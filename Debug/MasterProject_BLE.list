
MasterProject_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d888  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800d9c8  0800d9c8  0000e9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800de80  0800de80  0000ee80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800de88  0800de88  0000ee88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800de8c  0800de8c  0000ee8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  20000008  0800de90  0000f008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000088  0800df10  0000f088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000c0  0800df45  0000f0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  200000d4  0800df56  0000f0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  0800df56  0000f874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000fa67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00010000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00010000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800df56  0000f1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002ff6f  00000000  00000000  0000fa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006715  00000000  00000000  0003fa06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b50  00000000  00000000  00046120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000212d  00000000  00000000  00048c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d3ae  00000000  00000000  0004ad9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00031e25  00000000  00000000  0007814b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fc4a5  00000000  00000000  000a9f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001a6415  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000bcc8  00000000  00000000  001a6458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  001b2120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d4 	.word	0x200000d4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d9b0 	.word	0x0800d9b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000d8 	.word	0x200000d8
 800017c:	0800d9b0 	.word	0x0800d9b0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <BLE_ProcessCommand>:
#include "../Inc/ble_control.h"

#include <stdbool.h>  // Pour utiliser bool

bool BLE_ProcessCommand(uint8_t *data, uint8_t length)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]
    if (length >= 4)
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d914      	bls.n	800055c <BLE_ProcessCommand+0x3c>
    {
        if (data[0] == 0x00 && data[1] == 0x00 && data[2] == 0x00 && data[3] == 0x01)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d110      	bne.n	800055c <BLE_ProcessCommand+0x3c>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d10b      	bne.n	800055c <BLE_ProcessCommand+0x3c>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3302      	adds	r3, #2
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d106      	bne.n	800055c <BLE_ProcessCommand+0x3c>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3303      	adds	r3, #3
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d101      	bne.n	800055c <BLE_ProcessCommand+0x3c>
        {
            return true;  // La commande est valide
 8000558:	2301      	movs	r3, #1
 800055a:	e000      	b.n	800055e <BLE_ProcessCommand+0x3e>
        }
    }
    return false;  // La commande est invalide
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <LL_EXTI_EnableIT_32_63+0x24>)
 8000576:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800057a:	4905      	ldr	r1, [pc, #20]	@ (8000590 <LL_EXTI_EnableIT_32_63+0x24>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4313      	orrs	r3, r2
 8000580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	58000800 	.word	0x58000800

08000594 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800059c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b085      	sub	sp, #20
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80005ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005d2:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80005d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4313      	orrs	r3, r2
 80005de:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005e6:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000602:	f002 fa4b 	bl	8002a9c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000606:	f002 fa4f 	bl	8002aa8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800060a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800060e:	f7ff ffad 	bl	800056c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000612:	f00a ffb3 	bl	800b57c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000616:	f000 f821 	bl	800065c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800061a:	f000 f8c1 	bl	80007a0 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800061e:	bf00      	nop
}
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <APPD_EnableCPU2+0x34>)
 800062c:	1d3c      	adds	r4, r7, #4
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000638:	c403      	stmia	r4!, {r0, r1}
 800063a:	8022      	strh	r2, [r4, #0]
 800063c:	3402      	adds	r4, #2
 800063e:	0c13      	lsrs	r3, r2, #16
 8000640:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000642:	f00a fef3 	bl	800b42c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f00a f984 	bl	800a956 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800064e:	bf00      	nop
}
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	0800d9c8 	.word	0x0800d9c8

0800065c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800067c:	2300      	movs	r3, #0
 800067e:	77fb      	strb	r3, [r7, #31]
 8000680:	e036      	b.n	80006f0 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000682:	7ffb      	ldrb	r3, [r7, #31]
 8000684:	4a43      	ldr	r2, [pc, #268]	@ (8000794 <APPD_SetCPU2GpioConfig+0x138>)
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	4413      	add	r3, r2
 800068a:	799b      	ldrb	r3, [r3, #6]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d02c      	beq.n	80006ea <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000690:	7ffb      	ldrb	r3, [r7, #31]
 8000692:	4a40      	ldr	r2, [pc, #256]	@ (8000794 <APPD_SetCPU2GpioConfig+0x138>)
 8000694:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000698:	4a3f      	ldr	r2, [pc, #252]	@ (8000798 <APPD_SetCPU2GpioConfig+0x13c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d01b      	beq.n	80006d6 <APPD_SetCPU2GpioConfig+0x7a>
 800069e:	4a3e      	ldr	r2, [pc, #248]	@ (8000798 <APPD_SetCPU2GpioConfig+0x13c>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d821      	bhi.n	80006e8 <APPD_SetCPU2GpioConfig+0x8c>
 80006a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80006a8:	d003      	beq.n	80006b2 <APPD_SetCPU2GpioConfig+0x56>
 80006aa:	4a3c      	ldr	r2, [pc, #240]	@ (800079c <APPD_SetCPU2GpioConfig+0x140>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d009      	beq.n	80006c4 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 80006b0:	e01a      	b.n	80006e8 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	4a37      	ldr	r2, [pc, #220]	@ (8000794 <APPD_SetCPU2GpioConfig+0x138>)
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	4413      	add	r3, r2
 80006ba:	889a      	ldrh	r2, [r3, #4]
 80006bc:	8bbb      	ldrh	r3, [r7, #28]
 80006be:	4313      	orrs	r3, r2
 80006c0:	83bb      	strh	r3, [r7, #28]
          break;
 80006c2:	e012      	b.n	80006ea <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	4a33      	ldr	r2, [pc, #204]	@ (8000794 <APPD_SetCPU2GpioConfig+0x138>)
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	4413      	add	r3, r2
 80006cc:	889a      	ldrh	r2, [r3, #4]
 80006ce:	8b7b      	ldrh	r3, [r7, #26]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	837b      	strh	r3, [r7, #26]
          break;
 80006d4:	e009      	b.n	80006ea <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80006d6:	7ffb      	ldrb	r3, [r7, #31]
 80006d8:	4a2e      	ldr	r2, [pc, #184]	@ (8000794 <APPD_SetCPU2GpioConfig+0x138>)
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	4413      	add	r3, r2
 80006de:	889a      	ldrh	r2, [r3, #4]
 80006e0:	8b3b      	ldrh	r3, [r7, #24]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	833b      	strh	r3, [r7, #24]
          break;
 80006e6:	e000      	b.n	80006ea <APPD_SetCPU2GpioConfig+0x8e>
          break;
 80006e8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006ea:	7ffb      	ldrb	r3, [r7, #31]
 80006ec:	3301      	adds	r3, #1
 80006ee:	77fb      	strb	r3, [r7, #31]
 80006f0:	7ffb      	ldrb	r3, [r7, #31]
 80006f2:	2b25      	cmp	r3, #37	@ 0x25
 80006f4:	d9c5      	bls.n	8000682 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000702:	8bbb      	ldrh	r3, [r7, #28]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d014      	beq.n	8000732 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000708:	8bbb      	ldrh	r3, [r7, #28]
 800070a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff ff41 	bl	8000594 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff ff57 	bl	80005c6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000720:	f002 ff38 	bl	8003594 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000724:	8bbb      	ldrh	r3, [r7, #28]
 8000726:	2200      	movs	r2, #0
 8000728:	4619      	mov	r1, r3
 800072a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072e:	f003 f97f 	bl	8003a30 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000732:	8b7b      	ldrh	r3, [r7, #26]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d012      	beq.n	800075e <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000738:	8b7b      	ldrh	r3, [r7, #26]
 800073a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	2002      	movs	r0, #2
 800073e:	f7ff ff29 	bl	8000594 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000742:	2002      	movs	r0, #2
 8000744:	f7ff ff3f 	bl	80005c6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4813      	ldr	r0, [pc, #76]	@ (800079c <APPD_SetCPU2GpioConfig+0x140>)
 800074e:	f002 ff21 	bl	8003594 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000752:	8b7b      	ldrh	r3, [r7, #26]
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	4810      	ldr	r0, [pc, #64]	@ (800079c <APPD_SetCPU2GpioConfig+0x140>)
 800075a:	f003 f969 	bl	8003a30 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800075e:	8b3b      	ldrh	r3, [r7, #24]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d013      	beq.n	800078c <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000764:	8b3b      	ldrh	r3, [r7, #24]
 8000766:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000768:	2004      	movs	r0, #4
 800076a:	f7ff ff13 	bl	8000594 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800076e:	2004      	movs	r0, #4
 8000770:	f7ff ff29 	bl	80005c6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4807      	ldr	r0, [pc, #28]	@ (8000798 <APPD_SetCPU2GpioConfig+0x13c>)
 800077a:	f002 ff0b 	bl	8003594 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800077e:	8b3b      	ldrh	r3, [r7, #24]
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <APPD_SetCPU2GpioConfig+0x13c>)
 8000786:	f003 f953 	bl	8003a30 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800078a:	bf00      	nop
 800078c:	bf00      	nop
}
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	0800dc1c 	.word	0x0800dc1c
 8000798:	48000800 	.word	0x48000800
 800079c:	48000400 	.word	0x48000400

080007a0 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80007a4:	bf00      	nop
}
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80007b2:	f001 fbd3 	bl	8001f5c <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 80007b6:	bf00      	nop
}
 80007b8:	bd80      	pop	{r7, pc}

080007ba <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b084      	sub	sp, #16
 80007be:	af00      	add	r7, sp, #0
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	460b      	mov	r3, r1
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80007c8:	897a      	ldrh	r2, [r7, #10]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	68f9      	ldr	r1, [r7, #12]
 80007ce:	2000      	movs	r0, #0
 80007d0:	f001 f8c6 	bl	8001960 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80007d4:	bf00      	nop
}
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <LL_C2_PWR_SetPowerMode+0x28>)
 80007e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80007ea:	f023 0207 	bic.w	r2, r3, #7
 80007ee:	4905      	ldr	r1, [pc, #20]	@ (8000804 <LL_C2_PWR_SetPowerMode+0x28>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	58000400 	.word	0x58000400

08000808 <LL_EXTI_EnableIT_32_63>:
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <LL_EXTI_EnableIT_32_63+0x24>)
 8000812:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000816:	4905      	ldr	r1, [pc, #20]	@ (800082c <LL_EXTI_EnableIT_32_63+0x24>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4313      	orrs	r3, r2
 800081c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	58000800 	.word	0x58000800

08000830 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800083c:	4a0a      	ldr	r2, [pc, #40]	@ (8000868 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800083e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000846:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800084a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000856:	4313      	orrs	r3, r2
 8000858:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	cafecafe 	.word	0xcafecafe

0800086c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800087e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4313      	orrs	r3, r2
 8000886:	608b      	str	r3, [r1, #8]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000898:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <LL_DBGMCU_GetDeviceID+0x18>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e0042000 	.word	0xe0042000

080008b0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <LL_DBGMCU_GetRevisionID+0x18>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	0c1b      	lsrs	r3, r3, #16
 80008ba:	b29b      	uxth	r3, r3
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e0042000 	.word	0xe0042000

080008cc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <LL_LPM_EnableSleep+0x1c>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <LL_LPM_EnableSleep+0x1c>)
 80008d6:	f023 0304 	bic.w	r3, r3, #4
 80008da:	6113      	str	r3, [r2, #16]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	22ff      	movs	r2, #255	@ 0xff
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	22ca      	movs	r2, #202	@ 0xca
 8000912:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2253      	movs	r2, #83	@ 0x53
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f023 0207 	bic.w	r2, r3, #7
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	609a      	str	r2, [r3, #8]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <MX_APPE_Config>:
static void RxCpltCallback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <MX_APPE_Config+0x18>)
 8000952:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000956:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000958:	f000 f828 	bl	80009ac <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800095c:	f000 f82d 	bl	80009ba <Config_HSE>

  return;
 8000960:	bf00      	nop
}
 8000962:	bd80      	pop	{r7, pc}
 8000964:	58004000 	.word	0x58004000

08000968 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800096c:	f000 f839 	bl	80009e2 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000970:	f000 f852 	bl	8000a18 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000974:	4905      	ldr	r1, [pc, #20]	@ (800098c <MX_APPE_Init+0x24>)
 8000976:	2000      	movs	r0, #0
 8000978:	f000 fddc 	bl	8001534 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 800097c:	f7ff fe3f 	bl	80005fe <APPD_Init>
  RxUART_Init();
 8000980:	f000 f986 	bl	8000c90 <RxUART_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000984:	f000 f856 	bl	8000a34 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000988:	bf00      	nop
}
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200003f4 	.word	0x200003f4

08000990 <Init_Smps>:

void Init_Smps(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000994:	bf00      	nop
}
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <Init_Exti>:

void Init_Exti(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80009a2:	2050      	movs	r0, #80	@ 0x50
 80009a4:	f7ff ff30 	bl	8000808 <LL_EXTI_EnableIT_32_63>

  return;
 80009a8:	bf00      	nop
}
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80009b0:	bf00      	nop
}
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f00a fe35 	bl	800b630 <OTP_Read>
 80009c6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d005      	beq.n	80009da <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	799b      	ldrb	r3, [r3, #6]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff2c 	bl	8000830 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
}
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <System_Init>:

static void System_Init(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  Init_Smps();
 80009e6:	f7ff ffd3 	bl	8000990 <Init_Smps>

  Init_Exti();
 80009ea:	f7ff ffd8 	bl	800099e <Init_Exti>

  Init_Rtc();
 80009ee:	f000 f803 	bl	80009f8 <Init_Rtc>

  return;
 80009f2:	bf00      	nop
}
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <Init_Rtc+0x1c>)
 80009fe:	f7ff ff82 	bl	8000906 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000a02:	2100      	movs	r1, #0
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <Init_Rtc+0x1c>)
 8000a06:	f7ff ff8e 	bl	8000926 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000a0a:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <Init_Rtc+0x1c>)
 8000a0c:	f7ff ff6e 	bl	80008ec <LL_RTC_EnableWriteProtection>

  return;
 8000a10:	bf00      	nop
}
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40002800 	.word	0x40002800

08000a18 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000a1c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000a20:	f7ff ff24 	bl	800086c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000a24:	f00b fd70 	bl	800c508 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000a28:	2004      	movs	r0, #4
 8000a2a:	f7ff fed7 	bl	80007dc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000a2e:	bf00      	nop
}
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000a3a:	f00a fb41 	bl	800b0c0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000a3e:	4a11      	ldr	r2, [pc, #68]	@ (8000a84 <appe_Tl_Init+0x50>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	2004      	movs	r0, #4
 8000a44:	f00b fe9e 	bl	800c784 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <appe_Tl_Init+0x54>)
 8000a4a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <appe_Tl_Init+0x58>)
 8000a4e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <appe_Tl_Init+0x5c>)
 8000a56:	f00a f9f5 	bl	800ae44 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <appe_Tl_Init+0x60>)
 8000a5c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <appe_Tl_Init+0x64>)
 8000a60:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <appe_Tl_Init+0x68>)
 8000a64:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000a66:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000a6a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	4618      	mov	r0, r3
 8000a72:	f00a fc67 	bl	800b344 <TL_MM_Init>

  TL_Enable();
 8000a76:	f00a fb1d 	bl	800b0b4 <TL_Enable>

  return;
 8000a7a:	bf00      	nop
}
 8000a7c:	3720      	adds	r7, #32
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	0800ae7d 	.word	0x0800ae7d
 8000a88:	20030734 	.word	0x20030734
 8000a8c:	08000aa1 	.word	0x08000aa1
 8000a90:	08000ab9 	.word	0x08000ab9
 8000a94:	2003094c 	.word	0x2003094c
 8000a98:	20030840 	.word	0x20030840
 8000a9c:	200301f8 	.word	0x200301f8

08000aa0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000aaa:	bf00      	nop
}
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	330b      	adds	r3, #11
 8000ac6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000ad2:	2b07      	cmp	r3, #7
 8000ad4:	d81f      	bhi.n	8000b16 <APPE_SysUserEvtRx+0x5e>
 8000ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8000adc <APPE_SysUserEvtRx+0x24>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000afd 	.word	0x08000afd
 8000ae0:	08000b0f 	.word	0x08000b0f
 8000ae4:	08000b17 	.word	0x08000b17
 8000ae8:	08000b17 	.word	0x08000b17
 8000aec:	08000b17 	.word	0x08000b17
 8000af0:	08000b17 	.word	0x08000b17
 8000af4:	08000b17 	.word	0x08000b17
 8000af8:	08000b17 	.word	0x08000b17
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4618      	mov	r0, r3
 8000b02:	f009 ff55 	bl	800a9b0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f81b 	bl	8000b42 <APPE_SysEvtReadyProcessing>
    break;
 8000b0c:	e004      	b.n	8000b18 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f806 	bl	8000b20 <APPE_SysEvtError>
    break;
 8000b14:	e000      	b.n	8000b18 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000b16:	bf00      	nop
  }

  return;
 8000b18:	bf00      	nop
}
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	330b      	adds	r3, #11
 8000b2e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3302      	adds	r3, #2
 8000b34:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000b36:	bf00      	nop
}
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b08a      	sub	sp, #40	@ 0x28
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	330b      	adds	r3, #11
 8000b66:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d11d      	bne.n	8000bb2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000b76:	f7ff fd55 	bl	8000624 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000b7e:	237f      	movs	r3, #127	@ 0x7f
 8000b80:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000b82:	f7ff fe95 	bl	80008b0 <LL_DBGMCU_GetRevisionID>
 8000b86:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000b8e:	f7ff fe81 	bl	8000894 <LL_DBGMCU_GetDeviceID>
 8000b92:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f009 fef0 	bl	800a984 <SHCI_C2_Config>

    APP_BLE_Init();
 8000ba4:	f00a fe4e 	bl	800b844 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2001      	movs	r0, #1
 8000bac:	f00b fcbe 	bl	800c52c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000bb0:	e007      	b.n	8000bc2 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d103      	bne.n	8000bc2 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
  return;
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
}
 8000bc4:	3728      	adds	r7, #40	@ 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd2:	f001 ff3f 	bl	8002a54 <HAL_GetTick>
 8000bd6:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be2:	d00a      	beq.n	8000bfa <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000be4:	f001 ff4e 	bl	8002a84 <HAL_GetTickFreq>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf2:	e002      	b.n	8000bfa <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000bf4:	f7ff fe6a 	bl	80008cc <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000bf8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000bfa:	f001 ff2b 	bl	8002a54 <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d8f4      	bhi.n	8000bf4 <HAL_Delay+0x2a>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f00b fcb6 	bl	800c58c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000c28:	bf00      	nop
}
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f00b fca4 	bl	800c58c <UTIL_SEQ_Run>
  return;
 8000c44:	bf00      	nop
}
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000c54:	2100      	movs	r1, #0
 8000c56:	2004      	movs	r0, #4
 8000c58:	f00b fdb6 	bl	800c7c8 <UTIL_SEQ_SetTask>
  return;
 8000c5c:	bf00      	nop
}
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f00b fe17 	bl	800c8a0 <UTIL_SEQ_SetEvt>
  return;
 8000c72:	bf00      	nop
}
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000c82:	2002      	movs	r0, #2
 8000c84:	f00b fe2c 	bl	800c8e0 <UTIL_SEQ_WaitEvt>
  return;
 8000c88:	bf00      	nop
}
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <RxUART_Init>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
static void RxUART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <RxUART_Init+0x14>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	4903      	ldr	r1, [pc, #12]	@ (8000ca8 <RxUART_Init+0x18>)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 fe3c 	bl	8001918 <HW_UART_Receive_IT>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	08000cad 	.word	0x08000cad
 8000ca8:	200000f0 	.word	0x200000f0

08000cac <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <RxCpltCallback+0x50>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	2bff      	cmp	r3, #255	@ 0xff
 8000cb6:	d818      	bhi.n	8000cea <RxCpltCallback+0x3e>
  {
    if (aRxBuffer[0] == '\r')
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <RxCpltCallback+0x54>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b0d      	cmp	r3, #13
 8000cbe:	d109      	bne.n	8000cd4 <RxCpltCallback+0x28>
    {
      APP_DBG_MSG("received %s\n", CommandString);

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <RxCpltCallback+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8000cc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cca:	2100      	movs	r1, #0
 8000ccc:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <RxCpltCallback+0x58>)
 8000cce:	f00c f8a9 	bl	800ce24 <memset>
 8000cd2:	e00a      	b.n	8000cea <RxCpltCallback+0x3e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <RxCpltCallback+0x50>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	b291      	uxth	r1, r2
 8000cdc:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <RxCpltCallback+0x50>)
 8000cde:	8011      	strh	r1, [r2, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <RxCpltCallback+0x54>)
 8000ce4:	7819      	ldrb	r1, [r3, #0]
 8000ce6:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <RxCpltCallback+0x58>)
 8000ce8:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <RxCpltCallback+0x5c>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	4904      	ldr	r1, [pc, #16]	@ (8000d00 <RxCpltCallback+0x54>)
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 fe11 	bl	8001918 <HW_UART_Receive_IT>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001f8 	.word	0x200001f8
 8000d00:	200000f0 	.word	0x200000f0
 8000d04:	200000f8 	.word	0x200000f8
 8000d08:	08000cad 	.word	0x08000cad

08000d0c <LL_EXTI_EnableIT_0_31>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <LL_EXTI_EnableIT_0_31+0x24>)
 8000d16:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000d1a:	4905      	ldr	r1, [pc, #20]	@ (8000d30 <LL_EXTI_EnableIT_0_31+0x24>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	58000800 	.word	0x58000800

08000d34 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4904      	ldr	r1, [pc, #16]	@ (8000d54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]

}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	58000800 	.word	0x58000800

08000d58 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <ReadRtcSsrValue+0x3c>)
 8000d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <ReadRtcSsrValue+0x3c>)
 8000d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000d6e:	e005      	b.n	8000d7c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <ReadRtcSsrValue+0x3c>)
 8000d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d1f5      	bne.n	8000d70 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000d84:	683b      	ldr	r3, [r7, #0]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40002800 	.word	0x40002800

08000d98 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000da8:	79ba      	ldrb	r2, [r7, #6]
 8000daa:	491d      	ldr	r1, [pc, #116]	@ (8000e20 <LinkTimerAfter+0x88>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	440b      	add	r3, r1
 8000db6:	3315      	adds	r3, #21
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d009      	beq.n	8000dd6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	4916      	ldr	r1, [pc, #88]	@ (8000e20 <LinkTimerAfter+0x88>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	440b      	add	r3, r1
 8000dd0:	3314      	adds	r3, #20
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	4911      	ldr	r1, [pc, #68]	@ (8000e20 <LinkTimerAfter+0x88>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	440b      	add	r3, r1
 8000de4:	3315      	adds	r3, #21
 8000de6:	7bfa      	ldrb	r2, [r7, #15]
 8000de8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000dea:	79fa      	ldrb	r2, [r7, #7]
 8000dec:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <LinkTimerAfter+0x88>)
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3314      	adds	r3, #20
 8000dfa:	79ba      	ldrb	r2, [r7, #6]
 8000dfc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000dfe:	79ba      	ldrb	r2, [r7, #6]
 8000e00:	4907      	ldr	r1, [pc, #28]	@ (8000e20 <LinkTimerAfter+0x88>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	440b      	add	r3, r1
 8000e0c:	3315      	adds	r3, #21
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	701a      	strb	r2, [r3, #0]

  return;
 8000e12:	bf00      	nop
}
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200001fc 	.word	0x200001fc

08000e24 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000e34:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <LinkTimerBefore+0xb8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	79ba      	ldrb	r2, [r7, #6]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d032      	beq.n	8000ea6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000e40:	79ba      	ldrb	r2, [r7, #6]
 8000e42:	4927      	ldr	r1, [pc, #156]	@ (8000ee0 <LinkTimerBefore+0xbc>)
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	440b      	add	r3, r1
 8000e4e:	3314      	adds	r3, #20
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000e54:	7bfa      	ldrb	r2, [r7, #15]
 8000e56:	4922      	ldr	r1, [pc, #136]	@ (8000ee0 <LinkTimerBefore+0xbc>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	440b      	add	r3, r1
 8000e62:	3315      	adds	r3, #21
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e68:	79fa      	ldrb	r2, [r7, #7]
 8000e6a:	491d      	ldr	r1, [pc, #116]	@ (8000ee0 <LinkTimerBefore+0xbc>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	440b      	add	r3, r1
 8000e76:	3315      	adds	r3, #21
 8000e78:	79ba      	ldrb	r2, [r7, #6]
 8000e7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000e7c:	79fa      	ldrb	r2, [r7, #7]
 8000e7e:	4918      	ldr	r1, [pc, #96]	@ (8000ee0 <LinkTimerBefore+0xbc>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	440b      	add	r3, r1
 8000e8a:	3314      	adds	r3, #20
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000e90:	79ba      	ldrb	r2, [r7, #6]
 8000e92:	4913      	ldr	r1, [pc, #76]	@ (8000ee0 <LinkTimerBefore+0xbc>)
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	440b      	add	r3, r1
 8000e9e:	3314      	adds	r3, #20
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ea4:	e014      	b.n	8000ed0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ea6:	79fa      	ldrb	r2, [r7, #7]
 8000ea8:	490d      	ldr	r1, [pc, #52]	@ (8000ee0 <LinkTimerBefore+0xbc>)
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3315      	adds	r3, #21
 8000eb6:	79ba      	ldrb	r2, [r7, #6]
 8000eb8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000eba:	79ba      	ldrb	r2, [r7, #6]
 8000ebc:	4908      	ldr	r1, [pc, #32]	@ (8000ee0 <LinkTimerBefore+0xbc>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3314      	adds	r3, #20
 8000eca:	79fa      	ldrb	r2, [r7, #7]
 8000ecc:	701a      	strb	r2, [r3, #0]
  return;
 8000ece:	bf00      	nop
}
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000028c 	.word	0x2000028c
 8000ee0:	200001fc 	.word	0x200001fc

08000ee4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eee:	4b4e      	ldr	r3, [pc, #312]	@ (8001028 <linkTimer+0x144>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b06      	cmp	r3, #6
 8000ef6:	d118      	bne.n	8000f2a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8001028 <linkTimer+0x144>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b4b      	ldr	r3, [pc, #300]	@ (800102c <linkTimer+0x148>)
 8000f00:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000f02:	4a49      	ldr	r2, [pc, #292]	@ (8001028 <linkTimer+0x144>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000f08:	79fa      	ldrb	r2, [r7, #7]
 8000f0a:	4949      	ldr	r1, [pc, #292]	@ (8001030 <linkTimer+0x14c>)
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	440b      	add	r3, r1
 8000f16:	3315      	adds	r3, #21
 8000f18:	2206      	movs	r2, #6
 8000f1a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f1c:	4b45      	ldr	r3, [pc, #276]	@ (8001034 <linkTimer+0x150>)
 8000f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f22:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	81fb      	strh	r3, [r7, #14]
 8000f28:	e078      	b.n	800101c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000f2a:	f000 f909 	bl	8001140 <ReturnTimeElapsed>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	493e      	ldr	r1, [pc, #248]	@ (8001030 <linkTimer+0x14c>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3308      	adds	r3, #8
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	89fb      	ldrh	r3, [r7, #14]
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	4419      	add	r1, r3
 8000f4a:	4839      	ldr	r0, [pc, #228]	@ (8001030 <linkTimer+0x14c>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3308      	adds	r3, #8
 8000f58:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	4934      	ldr	r1, [pc, #208]	@ (8001030 <linkTimer+0x14c>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001028 <linkTimer+0x144>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	4a2e      	ldr	r2, [pc, #184]	@ (8001030 <linkTimer+0x14c>)
 8000f78:	460b      	mov	r3, r1
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	440b      	add	r3, r1
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	3308      	adds	r3, #8
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d337      	bcc.n	8000ffc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000f8c:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <linkTimer+0x144>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000f92:	7b7a      	ldrb	r2, [r7, #13]
 8000f94:	4926      	ldr	r1, [pc, #152]	@ (8001030 <linkTimer+0x14c>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3315      	adds	r3, #21
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000fa6:	e013      	b.n	8000fd0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000fa8:	7b7a      	ldrb	r2, [r7, #13]
 8000faa:	4921      	ldr	r1, [pc, #132]	@ (8001030 <linkTimer+0x14c>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3315      	adds	r3, #21
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000fbc:	7b7a      	ldrb	r2, [r7, #13]
 8000fbe:	491c      	ldr	r1, [pc, #112]	@ (8001030 <linkTimer+0x14c>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	3315      	adds	r3, #21
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000fd0:	7b3b      	ldrb	r3, [r7, #12]
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d00b      	beq.n	8000fee <linkTimer+0x10a>
 8000fd6:	7b3a      	ldrb	r2, [r7, #12]
 8000fd8:	4915      	ldr	r1, [pc, #84]	@ (8001030 <linkTimer+0x14c>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3308      	adds	r3, #8
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d2dc      	bcs.n	8000fa8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000fee:	7b7a      	ldrb	r2, [r7, #13]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fecf 	bl	8000d98 <LinkTimerAfter>
 8000ffa:	e00f      	b.n	800101c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <linkTimer+0x144>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff0c 	bl	8000e24 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <linkTimer+0x144>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <linkTimer+0x148>)
 8001014:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001016:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <linkTimer+0x144>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800101c:	89fb      	ldrh	r3, [r7, #14]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000028c 	.word	0x2000028c
 800102c:	2000028d 	.word	0x2000028d
 8001030:	200001fc 	.word	0x200001fc
 8001034:	20000290 	.word	0x20000290

08001038 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001048:	4b39      	ldr	r3, [pc, #228]	@ (8001130 <UnlinkTimer+0xf8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	429a      	cmp	r2, r3
 8001052:	d111      	bne.n	8001078 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001054:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <UnlinkTimer+0xf8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <UnlinkTimer+0xfc>)
 800105c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	4935      	ldr	r1, [pc, #212]	@ (8001138 <UnlinkTimer+0x100>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	3315      	adds	r3, #21
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <UnlinkTimer+0xf8>)
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e03e      	b.n	80010f6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001078:	79fa      	ldrb	r2, [r7, #7]
 800107a:	492f      	ldr	r1, [pc, #188]	@ (8001138 <UnlinkTimer+0x100>)
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	3314      	adds	r3, #20
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800108c:	79fa      	ldrb	r2, [r7, #7]
 800108e:	492a      	ldr	r1, [pc, #168]	@ (8001138 <UnlinkTimer+0x100>)
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	3315      	adds	r3, #21
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80010a0:	79f9      	ldrb	r1, [r7, #7]
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	4824      	ldr	r0, [pc, #144]	@ (8001138 <UnlinkTimer+0x100>)
 80010a6:	460b      	mov	r3, r1
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	440b      	add	r3, r1
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4403      	add	r3, r0
 80010b0:	3315      	adds	r3, #21
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2d8      	uxtb	r0, r3
 80010b6:	4920      	ldr	r1, [pc, #128]	@ (8001138 <UnlinkTimer+0x100>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	3315      	adds	r3, #21
 80010c4:	4602      	mov	r2, r0
 80010c6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d013      	beq.n	80010f6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80010ce:	79f9      	ldrb	r1, [r7, #7]
 80010d0:	7bba      	ldrb	r2, [r7, #14]
 80010d2:	4819      	ldr	r0, [pc, #100]	@ (8001138 <UnlinkTimer+0x100>)
 80010d4:	460b      	mov	r3, r1
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	440b      	add	r3, r1
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4403      	add	r3, r0
 80010de:	3314      	adds	r3, #20
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2d8      	uxtb	r0, r3
 80010e4:	4914      	ldr	r1, [pc, #80]	@ (8001138 <UnlinkTimer+0x100>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	3314      	adds	r3, #20
 80010f2:	4602      	mov	r2, r0
 80010f4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	490f      	ldr	r1, [pc, #60]	@ (8001138 <UnlinkTimer+0x100>)
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	330c      	adds	r3, #12
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <UnlinkTimer+0xf8>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b06      	cmp	r3, #6
 8001112:	d107      	bne.n	8001124 <UnlinkTimer+0xec>
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d104      	bne.n	8001124 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <UnlinkTimer+0x104>)
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	601a      	str	r2, [r3, #0]
  }

  return;
 8001122:	bf00      	nop
 8001124:	bf00      	nop
}
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	2000028c 	.word	0x2000028c
 8001134:	2000028d 	.word	0x2000028d
 8001138:	200001fc 	.word	0x200001fc
 800113c:	20000290 	.word	0x20000290

08001140 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <ReturnTimeElapsed+0x70>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114e:	d026      	beq.n	800119e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001150:	f7ff fe02 	bl	8000d58 <ReadRtcSsrValue>
 8001154:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <ReturnTimeElapsed+0x70>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	d805      	bhi.n	800116c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <ReturnTimeElapsed+0x70>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	e00a      	b.n	8001182 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <ReturnTimeElapsed+0x74>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001178:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <ReturnTimeElapsed+0x70>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	4413      	add	r3, r2
 8001180:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <ReturnTimeElapsed+0x78>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <ReturnTimeElapsed+0x7c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	40d3      	lsrs	r3, r2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	e001      	b.n	80011a2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	b29b      	uxth	r3, r3
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000290 	.word	0x20000290
 80011b4:	20000298 	.word	0x20000298
 80011b8:	20000296 	.word	0x20000296
 80011bc:	20000295 	.word	0x20000295

080011c0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d108      	bne.n	80011e2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80011d0:	f7ff fdc2 	bl	8000d58 <ReadRtcSsrValue>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a21      	ldr	r2, [pc, #132]	@ (800125c <RestartWakeupCounter+0x9c>)
 80011d8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011da:	2003      	movs	r0, #3
 80011dc:	f001 fde7 	bl	8002dae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80011e0:	e039      	b.n	8001256 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d803      	bhi.n	80011f0 <RestartWakeupCounter+0x30>
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <RestartWakeupCounter+0xa0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d002      	beq.n	80011f6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011f6:	bf00      	nop
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <RestartWakeupCounter+0xa4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f8      	beq.n	80011f8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <RestartWakeupCounter+0xa4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <RestartWakeupCounter+0xa4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001216:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <RestartWakeupCounter+0xa8>)
 800121a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800121e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001220:	2003      	movs	r0, #3
 8001222:	f001 fdd2 	bl	8002dca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <RestartWakeupCounter+0xac>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	0c1b      	lsrs	r3, r3, #16
 800122c:	041b      	lsls	r3, r3, #16
 800122e:	88fa      	ldrh	r2, [r7, #6]
 8001230:	490e      	ldr	r1, [pc, #56]	@ (800126c <RestartWakeupCounter+0xac>)
 8001232:	4313      	orrs	r3, r2
 8001234:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001236:	f7ff fd8f 	bl	8000d58 <ReadRtcSsrValue>
 800123a:	4603      	mov	r3, r0
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <RestartWakeupCounter+0x9c>)
 800123e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <RestartWakeupCounter+0xa4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <RestartWakeupCounter+0xa4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800124e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001250:	f3af 8000 	nop.w
  return ;
 8001254:	bf00      	nop
}
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000290 	.word	0x20000290
 8001260:	20000295 	.word	0x20000295
 8001264:	200003f4 	.word	0x200003f4
 8001268:	58000800 	.word	0x58000800
 800126c:	40002800 	.word	0x40002800

08001270 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001276:	4b45      	ldr	r3, [pc, #276]	@ (800138c <RescheduleTimerList+0x11c>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001282:	d107      	bne.n	8001294 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001284:	bf00      	nop
 8001286:	4b42      	ldr	r3, [pc, #264]	@ (8001390 <RescheduleTimerList+0x120>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f8      	bne.n	8001286 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001294:	4b3e      	ldr	r3, [pc, #248]	@ (8001390 <RescheduleTimerList+0x120>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <RescheduleTimerList+0x120>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012a2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80012a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001394 <RescheduleTimerList+0x124>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	493a      	ldr	r1, [pc, #232]	@ (8001398 <RescheduleTimerList+0x128>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3308      	adds	r3, #8
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80012be:	f7ff ff3f 	bl	8001140 <ReturnTimeElapsed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d205      	bcs.n	80012da <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012d2:	4b32      	ldr	r3, [pc, #200]	@ (800139c <RescheduleTimerList+0x12c>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e04d      	b.n	8001376 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4a30      	ldr	r2, [pc, #192]	@ (80013a0 <RescheduleTimerList+0x130>)
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	b292      	uxth	r2, r2
 80012e2:	4413      	add	r3, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d906      	bls.n	80012fa <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80012ec:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <RescheduleTimerList+0x130>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80012f2:	4b2a      	ldr	r3, [pc, #168]	@ (800139c <RescheduleTimerList+0x12c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e03d      	b.n	8001376 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001304:	4b25      	ldr	r3, [pc, #148]	@ (800139c <RescheduleTimerList+0x12c>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800130a:	e034      	b.n	8001376 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	4922      	ldr	r1, [pc, #136]	@ (8001398 <RescheduleTimerList+0x128>)
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	3308      	adds	r3, #8
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	429a      	cmp	r2, r3
 8001322:	d20a      	bcs.n	800133a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	491c      	ldr	r1, [pc, #112]	@ (8001398 <RescheduleTimerList+0x128>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	3308      	adds	r3, #8
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e013      	b.n	8001362 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	4916      	ldr	r1, [pc, #88]	@ (8001398 <RescheduleTimerList+0x128>)
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	3308      	adds	r3, #8
 800134a:	6819      	ldr	r1, [r3, #0]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	1ac9      	subs	r1, r1, r3
 8001352:	4811      	ldr	r0, [pc, #68]	@ (8001398 <RescheduleTimerList+0x128>)
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4403      	add	r3, r0
 800135e:	3308      	adds	r3, #8
 8001360:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <RescheduleTimerList+0x128>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3315      	adds	r3, #21
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b06      	cmp	r3, #6
 800137a:	d1c7      	bne.n	800130c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800137c:	89bb      	ldrh	r3, [r7, #12]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff1e 	bl	80011c0 <RestartWakeupCounter>

  return ;
 8001384:	bf00      	nop
}
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40002800 	.word	0x40002800
 8001390:	200003f4 	.word	0x200003f4
 8001394:	2000028c 	.word	0x2000028c
 8001398:	200001fc 	.word	0x200001fc
 800139c:	20000294 	.word	0x20000294
 80013a0:	2000029a 	.word	0x2000029a

080013a4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013aa:	f3ef 8310 	mrs	r3, PRIMASK
 80013ae:	617b      	str	r3, [r7, #20]
  return(result);
 80013b0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013b8:	4b59      	ldr	r3, [pc, #356]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	22ca      	movs	r2, #202	@ 0xca
 80013be:	625a      	str	r2, [r3, #36]	@ 0x24
 80013c0:	4b57      	ldr	r3, [pc, #348]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2253      	movs	r2, #83	@ 0x53
 80013c6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80013c8:	4b55      	ldr	r3, [pc, #340]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	4b54      	ldr	r3, [pc, #336]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013d6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80013d8:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80013e0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80013e4:	4950      	ldr	r1, [pc, #320]	@ (8001528 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	330c      	adds	r3, #12
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d16e      	bne.n	80014d8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80013fa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80013fe:	494a      	ldr	r1, [pc, #296]	@ (8001528 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800140e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001412:	4945      	ldr	r1, [pc, #276]	@ (8001528 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	3310      	adds	r3, #16
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001424:	4b41      	ldr	r3, [pc, #260]	@ (800152c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d04c      	beq.n	80014c8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800142e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001432:	493d      	ldr	r1, [pc, #244]	@ (8001528 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	330d      	adds	r3, #13
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d124      	bne.n	8001492 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001448:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fdf2 	bl	8001038 <UnlinkTimer>
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f383 8810 	msr	PRIMASK, r3
}
 800145e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001460:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001464:	4930      	ldr	r1, [pc, #192]	@ (8001528 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	3304      	adds	r3, #4
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f9b8 	bl	80017f0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	22ca      	movs	r2, #202	@ 0xca
 8001486:	625a      	str	r2, [r3, #36]	@ 0x24
 8001488:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2253      	movs	r2, #83	@ 0x53
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001490:	e012      	b.n	80014b8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f383 8810 	msr	PRIMASK, r3
}
 800149c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800149e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f920 	bl	80016e8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	22ca      	movs	r2, #202	@ 0xca
 80014ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2253      	movs	r2, #83	@ 0x53
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80014b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	4619      	mov	r1, r3
 80014c0:	69b8      	ldr	r0, [r7, #24]
 80014c2:	f000 fa1b 	bl	80018fc <HW_TS_RTC_Int_AppNot>
 80014c6:	e022      	b.n	800150e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80014c8:	f7ff fed2 	bl	8001270 <RescheduleTimerList>
 80014cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f383 8810 	msr	PRIMASK, r3
}
 80014d6:	e01a      	b.n	800150e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80014d8:	bf00      	nop
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f8      	beq.n	80014da <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80014f8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014fc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f383 8810 	msr	PRIMASK, r3
}
 800150c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	22ff      	movs	r2, #255	@ 0xff
 8001514:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001516:	bf00      	nop
}
 8001518:	3728      	adds	r7, #40	@ 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200003f4 	.word	0x200003f4
 8001524:	2000028c 	.word	0x2000028c
 8001528:	200001fc 	.word	0x200001fc
 800152c:	20000294 	.word	0x20000294
 8001530:	58000800 	.word	0x58000800

08001534 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001540:	4b5e      	ldr	r3, [pc, #376]	@ (80016bc <HW_TS_Init+0x188>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	22ca      	movs	r2, #202	@ 0xca
 8001546:	625a      	str	r2, [r3, #36]	@ 0x24
 8001548:	4b5c      	ldr	r3, [pc, #368]	@ (80016bc <HW_TS_Init+0x188>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2253      	movs	r2, #83	@ 0x53
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001550:	4b5b      	ldr	r3, [pc, #364]	@ (80016c0 <HW_TS_Init+0x18c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a5a      	ldr	r2, [pc, #360]	@ (80016c0 <HW_TS_Init+0x18c>)
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800155c:	4b58      	ldr	r3, [pc, #352]	@ (80016c0 <HW_TS_Init+0x18c>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f1c3 0304 	rsb	r3, r3, #4
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b55      	ldr	r3, [pc, #340]	@ (80016c4 <HW_TS_Init+0x190>)
 8001570:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001572:	4b53      	ldr	r3, [pc, #332]	@ (80016c0 <HW_TS_Init+0x18c>)
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800157a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800157e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	fa92 f2a2 	rbit	r2, r2
 8001586:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	2a00      	cmp	r2, #0
 8001590:	d101      	bne.n	8001596 <HW_TS_Init+0x62>
  {
    return 32U;
 8001592:	2220      	movs	r2, #32
 8001594:	e003      	b.n	800159e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	fab2 f282 	clz	r2, r2
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	40d3      	lsrs	r3, r2
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b48      	ldr	r3, [pc, #288]	@ (80016c8 <HW_TS_Init+0x194>)
 80015a8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80015aa:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <HW_TS_Init+0x18c>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b44      	ldr	r3, [pc, #272]	@ (80016cc <HW_TS_Init+0x198>)
 80015bc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80015be:	4b43      	ldr	r3, [pc, #268]	@ (80016cc <HW_TS_Init+0x198>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	4a40      	ldr	r2, [pc, #256]	@ (80016c8 <HW_TS_Init+0x194>)
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015d0:	4a3c      	ldr	r2, [pc, #240]	@ (80016c4 <HW_TS_Init+0x190>)
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	40d3      	lsrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80015de:	4293      	cmp	r3, r2
 80015e0:	d904      	bls.n	80015ec <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80015e2:	4b3b      	ldr	r3, [pc, #236]	@ (80016d0 <HW_TS_Init+0x19c>)
 80015e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e8:	801a      	strh	r2, [r3, #0]
 80015ea:	e003      	b.n	80015f4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b37      	ldr	r3, [pc, #220]	@ (80016d0 <HW_TS_Init+0x19c>)
 80015f2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80015f8:	f7ff fb9c 	bl	8000d34 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001600:	f7ff fb84 	bl	8000d0c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d13d      	bne.n	8001686 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800160a:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <HW_TS_Init+0x1a0>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001610:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <HW_TS_Init+0x1a4>)
 8001612:	f04f 32ff 	mov.w	r2, #4294967295
 8001616:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001618:	2300      	movs	r3, #0
 800161a:	77fb      	strb	r3, [r7, #31]
 800161c:	e00c      	b.n	8001638 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800161e:	7ffa      	ldrb	r2, [r7, #31]
 8001620:	492e      	ldr	r1, [pc, #184]	@ (80016dc <HW_TS_Init+0x1a8>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	330c      	adds	r3, #12
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	3301      	adds	r3, #1
 8001636:	77fb      	strb	r3, [r7, #31]
 8001638:	7ffb      	ldrb	r3, [r7, #31]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d9ef      	bls.n	800161e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800163e:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HW_TS_Init+0x1ac>)
 8001640:	2206      	movs	r2, #6
 8001642:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001644:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HW_TS_Init+0x188>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <HW_TS_Init+0x188>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001652:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HW_TS_Init+0x188>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <HW_TS_Init+0x188>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001664:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001666:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <HW_TS_Init+0x1b0>)
 8001668:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800166c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800166e:	2003      	movs	r0, #3
 8001670:	f001 fbab 	bl	8002dca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HW_TS_Init+0x188>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <HW_TS_Init+0x188>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e009      	b.n	800169a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001686:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <HW_TS_Init+0x188>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001694:	2003      	movs	r0, #3
 8001696:	f001 fb8a 	bl	8002dae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <HW_TS_Init+0x188>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	22ff      	movs	r2, #255	@ 0xff
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80016a2:	2200      	movs	r2, #0
 80016a4:	2103      	movs	r1, #3
 80016a6:	2003      	movs	r0, #3
 80016a8:	f001 fb3f 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016ac:	2003      	movs	r0, #3
 80016ae:	f001 fb56 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  return;
 80016b2:	bf00      	nop
}
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003f4 	.word	0x200003f4
 80016c0:	40002800 	.word	0x40002800
 80016c4:	20000295 	.word	0x20000295
 80016c8:	20000296 	.word	0x20000296
 80016cc:	20000298 	.word	0x20000298
 80016d0:	2000029a 	.word	0x2000029a
 80016d4:	20000294 	.word	0x20000294
 80016d8:	20000290 	.word	0x20000290
 80016dc:	200001fc 	.word	0x200001fc
 80016e0:	2000028c 	.word	0x2000028c
 80016e4:	58000800 	.word	0x58000800

080016e8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016f2:	f3ef 8310 	mrs	r3, PRIMASK
 80016f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80016f8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80016fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001700:	2003      	movs	r0, #3
 8001702:	f001 fb3a 	bl	8002d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001706:	4b34      	ldr	r3, [pc, #208]	@ (80017d8 <HW_TS_Stop+0xf0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	22ca      	movs	r2, #202	@ 0xca
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24
 800170e:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <HW_TS_Stop+0xf0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2253      	movs	r2, #83	@ 0x53
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001716:	79fa      	ldrb	r2, [r7, #7]
 8001718:	4930      	ldr	r1, [pc, #192]	@ (80017dc <HW_TS_Stop+0xf4>)
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	330c      	adds	r3, #12
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d142      	bne.n	80017b4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fc80 	bl	8001038 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001738:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <HW_TS_Stop+0xf8>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800173e:	7cfb      	ldrb	r3, [r7, #19]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d12f      	bne.n	80017a4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <HW_TS_Stop+0xfc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001750:	d107      	bne.n	8001762 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001752:	bf00      	nop
 8001754:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <HW_TS_Stop+0xf0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f8      	bne.n	8001754 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001762:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <HW_TS_Stop+0xf0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HW_TS_Stop+0xf0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001770:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001772:	bf00      	nop
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <HW_TS_Stop+0xf0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f8      	beq.n	8001774 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HW_TS_Stop+0xf0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <HW_TS_Stop+0xf0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001792:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HW_TS_Stop+0x100>)
 8001796:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800179a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800179c:	2003      	movs	r0, #3
 800179e:	f001 fb14 	bl	8002dca <HAL_NVIC_ClearPendingIRQ>
 80017a2:	e007      	b.n	80017b4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HW_TS_Stop+0x104>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	7cfa      	ldrb	r2, [r7, #19]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80017b0:	f7ff fd5e 	bl	8001270 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <HW_TS_Stop+0xf0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	22ff      	movs	r2, #255	@ 0xff
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017bc:	2003      	movs	r0, #3
 80017be:	f001 face 	bl	8002d5e <HAL_NVIC_EnableIRQ>
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f383 8810 	msr	PRIMASK, r3
}
 80017cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017ce:	bf00      	nop
}
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200003f4 	.word	0x200003f4
 80017dc:	200001fc 	.word	0x200001fc
 80017e0:	2000028c 	.word	0x2000028c
 80017e4:	40002800 	.word	0x40002800
 80017e8:	58000800 	.word	0x58000800
 80017ec:	2000028d 	.word	0x2000028d

080017f0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80017fc:	79fa      	ldrb	r2, [r7, #7]
 80017fe:	493b      	ldr	r1, [pc, #236]	@ (80018ec <HW_TS_Start+0xfc>)
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	330c      	adds	r3, #12
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d103      	bne.n	800181c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff66 	bl	80016e8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800181c:	f3ef 8310 	mrs	r3, PRIMASK
 8001820:	60fb      	str	r3, [r7, #12]
  return(result);
 8001822:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001824:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001826:	b672      	cpsid	i
}
 8001828:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800182a:	2003      	movs	r0, #3
 800182c:	f001 faa5 	bl	8002d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001830:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <HW_TS_Start+0x100>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	22ca      	movs	r2, #202	@ 0xca
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
 8001838:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <HW_TS_Start+0x100>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2253      	movs	r2, #83	@ 0x53
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001840:	79fa      	ldrb	r2, [r7, #7]
 8001842:	492a      	ldr	r1, [pc, #168]	@ (80018ec <HW_TS_Start+0xfc>)
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	330c      	adds	r3, #12
 8001850:	2202      	movs	r2, #2
 8001852:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	4925      	ldr	r1, [pc, #148]	@ (80018ec <HW_TS_Start+0xfc>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3308      	adds	r3, #8
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001868:	79fa      	ldrb	r2, [r7, #7]
 800186a:	4920      	ldr	r1, [pc, #128]	@ (80018ec <HW_TS_Start+0xfc>)
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	3304      	adds	r3, #4
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fb30 	bl	8000ee4 <linkTimer>
 8001884:	4603      	mov	r3, r0
 8001886:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001888:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <HW_TS_Start+0x104>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <HW_TS_Start+0x108>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	7c7a      	ldrb	r2, [r7, #17]
 8001896:	429a      	cmp	r2, r3
 8001898:	d002      	beq.n	80018a0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800189a:	f7ff fce9 	bl	8001270 <RescheduleTimerList>
 800189e:	e013      	b.n	80018c8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80018a0:	79fa      	ldrb	r2, [r7, #7]
 80018a2:	4912      	ldr	r1, [pc, #72]	@ (80018ec <HW_TS_Start+0xfc>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3308      	adds	r3, #8
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	8a7b      	ldrh	r3, [r7, #18]
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	1ac9      	subs	r1, r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <HW_TS_Start+0xfc>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4403      	add	r3, r0
 80018c4:	3308      	adds	r3, #8
 80018c6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HW_TS_Start+0x100>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	22ff      	movs	r2, #255	@ 0xff
 80018ce:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018d0:	2003      	movs	r0, #3
 80018d2:	f001 fa44 	bl	8002d5e <HAL_NVIC_EnableIRQ>
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f383 8810 	msr	PRIMASK, r3
}
 80018e0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80018e2:	bf00      	nop
}
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200001fc 	.word	0x200001fc
 80018f0:	200003f4 	.word	0x200003f4
 80018f4:	2000028c 	.word	0x2000028c
 80018f8:	2000028d 	.word	0x2000028d

080018fc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	460b      	mov	r3, r1
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4798      	blx	r3

  return;
 800190e:	bf00      	nop
}
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	4613      	mov	r3, r2
 8001928:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10c      	bne.n	800194a <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8001930:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <HW_UART_Receive_IT+0x3c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <HW_UART_Receive_IT+0x40>)
 8001938:	4a08      	ldr	r2, [pc, #32]	@ (800195c <HW_UART_Receive_IT+0x44>)
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	89bb      	ldrh	r3, [r7, #12]
 800193e:	461a      	mov	r2, r3
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	4805      	ldr	r0, [pc, #20]	@ (8001958 <HW_UART_Receive_IT+0x40>)
 8001944:	f005 fc92 	bl	800726c <HAL_UART_Receive_IT>
            break;
 8001948:	e000      	b.n	800194c <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800194a:	bf00      	nop
    }

    return;
 800194c:	bf00      	nop
}
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000029c 	.word	0x2000029c
 8001958:	20000418 	.word	0x20000418
 800195c:	40013800 	.word	0x40013800

08001960 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	4613      	mov	r3, r2
 8001970:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001976:	2300      	movs	r3, #0
 8001978:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10e      	bne.n	800199e <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001980:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <HW_UART_Transmit_DMA+0x80>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001986:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <HW_UART_Transmit_DMA+0x84>)
 8001988:	4a17      	ldr	r2, [pc, #92]	@ (80019e8 <HW_UART_Transmit_DMA+0x88>)
 800198a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800198c:	89bb      	ldrh	r3, [r7, #12]
 800198e:	461a      	mov	r2, r3
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	4814      	ldr	r0, [pc, #80]	@ (80019e4 <HW_UART_Transmit_DMA+0x84>)
 8001994:	f005 fcb6 	bl	8007304 <HAL_UART_Transmit_DMA>
 8001998:	4603      	mov	r3, r0
 800199a:	75fb      	strb	r3, [r7, #23]
            break;
 800199c:	e000      	b.n	80019a0 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800199e:	bf00      	nop
    }

    switch (hal_status)
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d816      	bhi.n	80019d4 <HW_UART_Transmit_DMA+0x74>
 80019a6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <HW_UART_Transmit_DMA+0x4c>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	080019bd 	.word	0x080019bd
 80019b0:	080019c3 	.word	0x080019c3
 80019b4:	080019c9 	.word	0x080019c9
 80019b8:	080019cf 	.word	0x080019cf
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80019bc:	2300      	movs	r3, #0
 80019be:	75bb      	strb	r3, [r7, #22]
            break;
 80019c0:	e009      	b.n	80019d6 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75bb      	strb	r3, [r7, #22]
            break;
 80019c6:	e006      	b.n	80019d6 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80019c8:	2302      	movs	r3, #2
 80019ca:	75bb      	strb	r3, [r7, #22]
            break;
 80019cc:	e003      	b.n	80019d6 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80019ce:	2303      	movs	r3, #3
 80019d0:	75bb      	strb	r3, [r7, #22]
            break;
 80019d2:	e000      	b.n	80019d6 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80019d4:	bf00      	nop
    }

    return hw_status;
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200002a0 	.word	0x200002a0
 80019e4:	20000418 	.word	0x20000418
 80019e8:	40013800 	.word	0x40013800

080019ec <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_UART_RxCpltCallback+0x34>)
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d107      	bne.n	8001a10 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001a00:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <HAL_UART_RxCpltCallback+0x38>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_UART_RxCpltCallback+0x38>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4798      	blx	r3
            }
            break;
 8001a0e:	e001      	b.n	8001a14 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001a10:	bf00      	nop
 8001a12:	e000      	b.n	8001a16 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8001a14:	bf00      	nop
    }

    return;
 8001a16:	bf00      	nop
}
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40013800 	.word	0x40013800
 8001a24:	2000029c 	.word	0x2000029c

08001a28 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_UART_TxCpltCallback+0x34>)
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <HAL_UART_TxCpltCallback+0x38>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_UART_TxCpltCallback+0x38>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4798      	blx	r3
            }
            break;
 8001a4a:	e001      	b.n	8001a50 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001a4c:	bf00      	nop
 8001a4e:	e000      	b.n	8001a52 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001a50:	bf00      	nop
    }

    return;
 8001a52:	bf00      	nop
}
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40013800 	.word	0x40013800
 8001a60:	200002a0 	.word	0x200002a0

08001a64 <LL_RCC_LSE_SetDriveCapability>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a74:	f023 0218 	bic.w	r2, r3, #24
 8001a78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_AHB1_GRP1_EnableClock>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_AHB2_GRP1_EnableClock>:
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ad0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ade:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <check_I2C_Status>:
PCF8574_HandleTypeDef pcf8574;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void check_I2C_Status(I2C_HandleTypeDef *hi2c) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    uint32_t error = HAL_I2C_GetError(hi2c);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f002 fb56 	bl	80041ae <HAL_I2C_GetError>
 8001b02:	60f8      	str	r0, [r7, #12]
    HAL_I2C_ModeTypeDef mode = hi2c->Mode;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b0a:	72fb      	strb	r3, [r7, #11]


    // 🔹 Vérification du mode I2C
    printf("Mode I2C actuel : ");
 8001b0c:	483d      	ldr	r0, [pc, #244]	@ (8001c04 <check_I2C_Status+0x110>)
 8001b0e:	f00b f839 	bl	800cb84 <iprintf>
    switch (mode) {
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	2b40      	cmp	r3, #64	@ 0x40
 8001b16:	d016      	beq.n	8001b46 <check_I2C_Status+0x52>
 8001b18:	2b40      	cmp	r3, #64	@ 0x40
 8001b1a:	dc18      	bgt.n	8001b4e <check_I2C_Status+0x5a>
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d00e      	beq.n	8001b3e <check_I2C_Status+0x4a>
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	dc14      	bgt.n	8001b4e <check_I2C_Status+0x5a>
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <check_I2C_Status+0x3a>
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d004      	beq.n	8001b36 <check_I2C_Status+0x42>
 8001b2c:	e00f      	b.n	8001b4e <check_I2C_Status+0x5a>
        case HAL_I2C_MODE_NONE:   printf("Aucune communication\n"); break;
 8001b2e:	4836      	ldr	r0, [pc, #216]	@ (8001c08 <check_I2C_Status+0x114>)
 8001b30:	f00b f898 	bl	800cc64 <puts>
 8001b34:	e00e      	b.n	8001b54 <check_I2C_Status+0x60>
        case HAL_I2C_MODE_MASTER: printf("Mode Maître\n"); break;
 8001b36:	4835      	ldr	r0, [pc, #212]	@ (8001c0c <check_I2C_Status+0x118>)
 8001b38:	f00b f894 	bl	800cc64 <puts>
 8001b3c:	e00a      	b.n	8001b54 <check_I2C_Status+0x60>
        case HAL_I2C_MODE_SLAVE:  printf("Mode Esclave\n"); break;
 8001b3e:	4834      	ldr	r0, [pc, #208]	@ (8001c10 <check_I2C_Status+0x11c>)
 8001b40:	f00b f890 	bl	800cc64 <puts>
 8001b44:	e006      	b.n	8001b54 <check_I2C_Status+0x60>
        case HAL_I2C_MODE_MEM:    printf("Mode Mémoire\n"); break;
 8001b46:	4833      	ldr	r0, [pc, #204]	@ (8001c14 <check_I2C_Status+0x120>)
 8001b48:	f00b f88c 	bl	800cc64 <puts>
 8001b4c:	e002      	b.n	8001b54 <check_I2C_Status+0x60>
        default: printf("Mode Inconnu\n");
 8001b4e:	4832      	ldr	r0, [pc, #200]	@ (8001c18 <check_I2C_Status+0x124>)
 8001b50:	f00b f888 	bl	800cc64 <puts>
    }

    // 🔹 Vérification des erreurs
    if (error == HAL_I2C_ERROR_NONE) {
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d103      	bne.n	8001b62 <check_I2C_Status+0x6e>
        printf("Aucune erreur I2C\n");
 8001b5a:	4830      	ldr	r0, [pc, #192]	@ (8001c1c <check_I2C_Status+0x128>)
 8001b5c:	f00b f882 	bl	800cc64 <puts>
        return;
 8001b60:	e04d      	b.n	8001bfe <check_I2C_Status+0x10a>
    }

    printf("Erreur I2C detectee : ");
 8001b62:	482f      	ldr	r0, [pc, #188]	@ (8001c20 <check_I2C_Status+0x12c>)
 8001b64:	f00b f80e 	bl	800cb84 <iprintf>

    if (error & HAL_I2C_ERROR_BERR)      printf("Bus Error (BERR) ");
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <check_I2C_Status+0x84>
 8001b72:	482c      	ldr	r0, [pc, #176]	@ (8001c24 <check_I2C_Status+0x130>)
 8001b74:	f00b f806 	bl	800cb84 <iprintf>
    if (error & HAL_I2C_ERROR_ARLO)      printf("Arbitration Lost (ARLO) ");
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <check_I2C_Status+0x94>
 8001b82:	4829      	ldr	r0, [pc, #164]	@ (8001c28 <check_I2C_Status+0x134>)
 8001b84:	f00a fffe 	bl	800cb84 <iprintf>
    if (error & HAL_I2C_ERROR_AF)        printf("Acknowledge Failure (AF) ");
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <check_I2C_Status+0xa4>
 8001b92:	4826      	ldr	r0, [pc, #152]	@ (8001c2c <check_I2C_Status+0x138>)
 8001b94:	f00a fff6 	bl	800cb84 <iprintf>
    if (error & HAL_I2C_ERROR_OVR)       printf("Overrun/Underrun (OVR) ");
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <check_I2C_Status+0xb4>
 8001ba2:	4823      	ldr	r0, [pc, #140]	@ (8001c30 <check_I2C_Status+0x13c>)
 8001ba4:	f00a ffee 	bl	800cb84 <iprintf>
    if (error & HAL_I2C_ERROR_DMA)       printf("DMA Transfer Error ");
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <check_I2C_Status+0xc4>
 8001bb2:	4820      	ldr	r0, [pc, #128]	@ (8001c34 <check_I2C_Status+0x140>)
 8001bb4:	f00a ffe6 	bl	800cb84 <iprintf>
    if (error & HAL_I2C_ERROR_TIMEOUT)   printf("Timeout Error ");
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <check_I2C_Status+0xd4>
 8001bc2:	481d      	ldr	r0, [pc, #116]	@ (8001c38 <check_I2C_Status+0x144>)
 8001bc4:	f00a ffde 	bl	800cb84 <iprintf>
    if (error & HAL_I2C_ERROR_SIZE)      printf("Size Management Error ");
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <check_I2C_Status+0xe4>
 8001bd2:	481a      	ldr	r0, [pc, #104]	@ (8001c3c <check_I2C_Status+0x148>)
 8001bd4:	f00a ffd6 	bl	800cb84 <iprintf>
    if (error & HAL_I2C_ERROR_DMA_PARAM) printf("DMA Parameter Error ");
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <check_I2C_Status+0xf4>
 8001be2:	4817      	ldr	r0, [pc, #92]	@ (8001c40 <check_I2C_Status+0x14c>)
 8001be4:	f00a ffce 	bl	800cb84 <iprintf>
    if (error & HAL_I2C_ERROR_INVALID_PARAM) printf("Invalid Parameter Error ");
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <check_I2C_Status+0x104>
 8001bf2:	4814      	ldr	r0, [pc, #80]	@ (8001c44 <check_I2C_Status+0x150>)
 8001bf4:	f00a ffc6 	bl	800cb84 <iprintf>
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    if (error & HAL_I2C_ERROR_INVALID_CALLBACK) printf("Invalid Callback Error ");
#endif
    printf("\n");
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f00a ffd5 	bl	800cba8 <putchar>
}
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	0800d9e4 	.word	0x0800d9e4
 8001c08:	0800d9f8 	.word	0x0800d9f8
 8001c0c:	0800da10 	.word	0x0800da10
 8001c10:	0800da20 	.word	0x0800da20
 8001c14:	0800da30 	.word	0x0800da30
 8001c18:	0800da40 	.word	0x0800da40
 8001c1c:	0800da50 	.word	0x0800da50
 8001c20:	0800da64 	.word	0x0800da64
 8001c24:	0800da7c 	.word	0x0800da7c
 8001c28:	0800da90 	.word	0x0800da90
 8001c2c:	0800daac 	.word	0x0800daac
 8001c30:	0800dac8 	.word	0x0800dac8
 8001c34:	0800dae0 	.word	0x0800dae0
 8001c38:	0800daf4 	.word	0x0800daf4
 8001c3c:	0800db04 	.word	0x0800db04
 8001c40:	0800db1c 	.word	0x0800db1c
 8001c44:	0800db34 	.word	0x0800db34

08001c48 <scan_I2C_devices>:

void scan_I2C_devices() {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
    printf("\n");
 8001c4e:	200a      	movs	r0, #10
 8001c50:	f00a ffaa 	bl	800cba8 <putchar>
    printf("Debut du scan I2C...\n");
 8001c54:	4813      	ldr	r0, [pc, #76]	@ (8001ca4 <scan_I2C_devices+0x5c>)
 8001c56:	f00b f805 	bl	800cc64 <puts>

    for (uint8_t address = 1; address < 127; address++) {
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	e013      	b.n	8001c88 <scan_I2C_devices+0x40>
        if (HAL_I2C_IsDeviceReady(&hi2c1, address << 1, 3, 100) == HAL_OK) {
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	b299      	uxth	r1, r3
 8001c68:	2364      	movs	r3, #100	@ 0x64
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	480e      	ldr	r0, [pc, #56]	@ (8001ca8 <scan_I2C_devices+0x60>)
 8001c6e:	f002 f8fd 	bl	8003e6c <HAL_I2C_IsDeviceReady>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <scan_I2C_devices+0x3a>
            printf("Esclave detecte a l'adresse 0x%X\n", address);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480b      	ldr	r0, [pc, #44]	@ (8001cac <scan_I2C_devices+0x64>)
 8001c7e:	f00a ff81 	bl	800cb84 <iprintf>
    for (uint8_t address = 1; address < 127; address++) {
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	3301      	adds	r3, #1
 8001c86:	71fb      	strb	r3, [r7, #7]
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001c8c:	d9e8      	bls.n	8001c60 <scan_I2C_devices+0x18>
        }
    }
    check_I2C_Status(&hi2c1);
 8001c8e:	4806      	ldr	r0, [pc, #24]	@ (8001ca8 <scan_I2C_devices+0x60>)
 8001c90:	f7ff ff30 	bl	8001af4 <check_I2C_Status>
    printf("Fin du scan I2C.\n");
 8001c94:	4806      	ldr	r0, [pc, #24]	@ (8001cb0 <scan_I2C_devices+0x68>)
 8001c96:	f00a ffe5 	bl	800cc64 <puts>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	0800db50 	.word	0x0800db50
 8001ca8:	200002a4 	.word	0x200002a4
 8001cac:	0800db68 	.word	0x0800db68
 8001cb0:	0800db8c 	.word	0x0800db8c

08001cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cba:	f000 fe5d 	bl	8002978 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001cbe:	f7fe fe45 	bl	800094c <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc2:	f000 f839 	bl	8001d38 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001cc6:	f000 f899 	bl	8001dfc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001cca:	f000 f8f7 	bl	8001ebc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cce:	f000 f9bd 	bl	800204c <MX_GPIO_Init>
  MX_DMA_Init();
 8001cd2:	f000 f991 	bl	8001ff8 <MX_DMA_Init>
  MX_RTC_Init();
 8001cd6:	f000 f90d 	bl	8001ef4 <MX_RTC_Init>
  MX_I2C1_Init();
 8001cda:	f000 f8af 	bl	8001e3c <MX_I2C1_Init>
  MX_RF_Init();
 8001cde:	f000 f901 	bl	8001ee4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_DeInit(&hi2c1);
 8001ce2:	4813      	ldr	r0, [pc, #76]	@ (8001d30 <main+0x7c>)
 8001ce4:	f001 ff7b 	bl	8003bde <HAL_I2C_DeInit>
  MX_I2C1_Init();
 8001ce8:	f000 f8a8 	bl	8001e3c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001cec:	f7fe fe3c 	bl	8000968 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t slaveADDR = 0x10<<1;
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	80fb      	strh	r3, [r7, #6]
  uint8_t TxData[6] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6};
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <main+0x80>)
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cfc:	6018      	str	r0, [r3, #0]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	8019      	strh	r1, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001d02:	f7fe ff87 	bl	8000c14 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001d06:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0a:	f00a fc3f 	bl	800c58c <UTIL_SEQ_Run>

    scan_I2C_devices();
 8001d0e:	f7ff ff9b 	bl	8001c48 <scan_I2C_devices>
    HAL_Delay(1000);
 8001d12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d16:	f7fe ff58 	bl	8000bca <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, slaveADDR, TxData, 6, 1000);
 8001d1a:	463a      	mov	r2, r7
 8001d1c:	88f9      	ldrh	r1, [r7, #6]
 8001d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2306      	movs	r3, #6
 8001d26:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <main+0x7c>)
 8001d28:	f001 ff88 	bl	8003c3c <HAL_I2C_Master_Transmit>
    MX_APPE_Process();
 8001d2c:	bf00      	nop
 8001d2e:	e7e8      	b.n	8001d02 <main+0x4e>
 8001d30:	200002a4 	.word	0x200002a4
 8001d34:	0800dba0 	.word	0x0800dba0

08001d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09a      	sub	sp, #104	@ 0x68
 8001d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	2248      	movs	r2, #72	@ 0x48
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f00b f86c 	bl	800ce24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d5e:	f003 fa8d 	bl	800527c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001d62:	2010      	movs	r0, #16
 8001d64:	f7ff fe7e 	bl	8001a64 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d68:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <SystemClock_Config+0xc0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d70:	4a21      	ldr	r2, [pc, #132]	@ (8001df8 <SystemClock_Config+0xc0>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <SystemClock_Config+0xc0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001d84:	2327      	movs	r3, #39	@ 0x27
 8001d86:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d9c:	2340      	movs	r3, #64	@ 0x40
 8001d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001da4:	23a0      	movs	r3, #160	@ 0xa0
 8001da6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dac:	f107 0320 	add.w	r3, r7, #32
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fdf7 	bl	80059a4 <HAL_RCC_OscConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001dbc:	f000 f99a 	bl	80020f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001dc0:	236f      	movs	r3, #111	@ 0x6f
 8001dc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2101      	movs	r1, #1
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 f953 	bl	800608c <HAL_RCC_ClockConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001dec:	f000 f982 	bl	80020f4 <Error_Handler>
  }
}
 8001df0:	bf00      	nop
 8001df2:	3768      	adds	r7, #104	@ 0x68
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	58000400 	.word	0x58000400

08001dfc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	@ 0x50
 8001e00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e02:	463b      	mov	r3, r7
 8001e04:	2250      	movs	r2, #80	@ 0x50
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00b f80b 	bl	800ce24 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001e0e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e12:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001e14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e18:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e22:	463b      	mov	r3, r7
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 fd6e 	bl	8006906 <HAL_RCCEx_PeriphCLKConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001e30:	f000 f960 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001e34:	bf00      	nop
 8001e36:	3750      	adds	r7, #80	@ 0x50
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e42:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb4 <MX_I2C1_Init+0x78>)
 8001e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e48:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <MX_I2C1_Init+0x7c>)
 8001e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e58:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e64:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e76:	480e      	ldr	r0, [pc, #56]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e78:	f001 fe16 	bl	8003aa8 <HAL_I2C_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e82:	f000 f937 	bl	80020f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e86:	2100      	movs	r1, #0
 8001e88:	4809      	ldr	r0, [pc, #36]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e8a:	f003 f8d9 	bl	8005040 <HAL_I2CEx_ConfigAnalogFilter>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e94:	f000 f92e 	bl	80020f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <MX_I2C1_Init+0x74>)
 8001e9c:	f003 f91b 	bl	80050d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ea6:	f000 f925 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200002a4 	.word	0x200002a4
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	00707cbb 	.word	0x00707cbb

08001ebc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_IPCC_Init+0x20>)
 8001ec2:	4a07      	ldr	r2, [pc, #28]	@ (8001ee0 <MX_IPCC_Init+0x24>)
 8001ec4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <MX_IPCC_Init+0x20>)
 8001ec8:	f003 f952 	bl	8005170 <HAL_IPCC_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001ed2:	f000 f90f 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200003b8 	.word	0x200003b8
 8001ee0:	58000c00 	.word	0x58000c00

08001ee4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001efa:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <MX_RTC_Init+0x64>)
 8001efc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001f04:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001f06:	220f      	movs	r2, #15
 8001f08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001f0c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001f10:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f18:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f2a:	480a      	ldr	r0, [pc, #40]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001f2c:	f004 ff72 	bl	8006e14 <HAL_RTC_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001f36:	f000 f8dd 	bl	80020f4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_RTC_Init+0x60>)
 8001f40:	f005 f868 	bl	8007014 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001f4a:	f000 f8d3 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200003f4 	.word	0x200003f4
 8001f58:	40002800 	.word	0x40002800

08001f5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f60:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f62:	4a24      	ldr	r2, [pc, #144]	@ (8001ff4 <MX_USART1_UART_Init+0x98>)
 8001f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f66:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f8e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f92:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa0:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fa6:	4812      	ldr	r0, [pc, #72]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001fa8:	f005 f910 	bl	80071cc <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001fb2:	f000 f89f 	bl	80020f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001fba:	f007 f984 	bl	80092c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001fc4:	f000 f896 	bl	80020f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4809      	ldr	r0, [pc, #36]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001fcc:	f007 f9b9 	bl	8009342 <HAL_UARTEx_SetRxFifoThreshold>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001fd6:	f000 f88d 	bl	80020f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	@ (8001ff0 <MX_USART1_UART_Init+0x94>)
 8001fdc:	f007 f93a 	bl	8009254 <HAL_UARTEx_DisableFifoMode>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001fe6:	f000 f885 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000418 	.word	0x20000418
 8001ff4:	40013800 	.word	0x40013800

08001ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ffc:	2004      	movs	r0, #4
 8001ffe:	f7ff fd47 	bl	8001a90 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002002:	2001      	movs	r0, #1
 8002004:	f7ff fd44 	bl	8001a90 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	200b      	movs	r0, #11
 800200e:	f000 fe8c 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002012:	200b      	movs	r0, #11
 8002014:	f000 fea3 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	200c      	movs	r0, #12
 800201e:	f000 fe84 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002022:	200c      	movs	r0, #12
 8002024:	f000 fe9b 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	200d      	movs	r0, #13
 800202e:	f000 fe7c 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002032:	200d      	movs	r0, #13
 8002034:	f000 fe93 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	200e      	movs	r0, #14
 800203e:	f000 fe74 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002042:	200e      	movs	r0, #14
 8002044:	f000 fe8b 	bl	8002d5e <HAL_NVIC_EnableIRQ>

}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002060:	2004      	movs	r0, #4
 8002062:	f7ff fd2e 	bl	8001ac2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2002      	movs	r0, #2
 8002068:	f7ff fd2b 	bl	8001ac2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff fd28 	bl	8001ac2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002072:	2008      	movs	r0, #8
 8002074:	f7ff fd25 	bl	8001ac2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2122      	movs	r1, #34	@ 0x22
 800207c:	481a      	ldr	r0, [pc, #104]	@ (80020e8 <MX_GPIO_Init+0x9c>)
 800207e:	f001 fcd7 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : P0_Pin */
  GPIO_InitStruct.Pin = P0_Pin;
 8002082:	2301      	movs	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208a:	2301      	movs	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(P0_GPIO_Port, &GPIO_InitStruct);
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	4619      	mov	r1, r3
 8002092:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002096:	f001 fa7d 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800209a:	2310      	movs	r3, #16
 800209c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4810      	ldr	r0, [pc, #64]	@ (80020ec <MX_GPIO_Init+0xa0>)
 80020ac:	f001 fa72 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD1_Pin;
 80020b0:	2322      	movs	r3, #34	@ 0x22
 80020b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4808      	ldr	r0, [pc, #32]	@ (80020e8 <MX_GPIO_Init+0x9c>)
 80020c6:	f001 fa65 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80020ca:	2303      	movs	r3, #3
 80020cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <MX_GPIO_Init+0xa4>)
 80020dc:	f001 fa5a 	bl	8003594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020e0:	bf00      	nop
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	48000400 	.word	0x48000400
 80020ec:	48000800 	.word	0x48000800
 80020f0:	48000c00 	.word	0x48000c00

080020f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <Error_Handler+0x8>

08002100 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_AHB2_GRP1_EnableClock>:
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002130:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4313      	orrs	r3, r2
 8002138:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800213e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4013      	ands	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_AHB3_GRP1_EnableClock>:
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002160:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002162:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4313      	orrs	r3, r2
 800216a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002170:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002178:	68fb      	ldr	r3, [r7, #12]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_APB1_GRP1_EnableClock>:
{
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002192:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002194:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4313      	orrs	r3, r2
 800219c:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4013      	ands	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_APB1_GRP1_DisableClock>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021ce:	4013      	ands	r3, r2
 80021d0:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_APB2_GRP1_EnableClock>:
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4013      	ands	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002214:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002218:	f7ff ff9c 	bl	8002154 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	202e      	movs	r0, #46	@ 0x2e
 8002222:	f000 fd82 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002226:	202e      	movs	r0, #46	@ 0x2e
 8002228:	f000 fd99 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b09c      	sub	sp, #112	@ 0x70
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	2250      	movs	r2, #80	@ 0x50
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f00a fde7 	bl	800ce24 <memset>
  if(hi2c->Instance==I2C1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a48      	ldr	r2, [pc, #288]	@ (800237c <HAL_I2C_MspInit+0x14c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	f040 8089 	bne.w	8002374 <HAL_I2C_MspInit+0x144>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002262:	2304      	movs	r3, #4
 8002264:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002266:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	4618      	mov	r0, r3
 8002272:	f004 fb48 	bl	8006906 <HAL_RCCEx_PeriphCLKConfig>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800227c:	f7ff ff3a 	bl	80020f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	2002      	movs	r0, #2
 8002282:	f7ff ff4e 	bl	8002122 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002286:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800228a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800228c:	2312      	movs	r3, #18
 800228e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002290:	2301      	movs	r3, #1
 8002292:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002298:	2304      	movs	r3, #4
 800229a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022a0:	4619      	mov	r1, r3
 80022a2:	4837      	ldr	r0, [pc, #220]	@ (8002380 <HAL_I2C_MspInit+0x150>)
 80022a4:	f001 f976 	bl	8003594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022a8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80022ac:	f7ff ff6b 	bl	8002186 <LL_APB1_GRP1_EnableClock>

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 80022b0:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022b2:	4a35      	ldr	r2, [pc, #212]	@ (8002388 <HAL_I2C_MspInit+0x158>)
 80022b4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80022b6:	4b33      	ldr	r3, [pc, #204]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022b8:	220b      	movs	r2, #11
 80022ba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022bc:	4b31      	ldr	r3, [pc, #196]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022be:	2210      	movs	r2, #16
 80022c0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c2:	4b30      	ldr	r3, [pc, #192]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022ca:	2280      	movs	r2, #128	@ 0x80
 80022cc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80022da:	4b2a      	ldr	r3, [pc, #168]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022dc:	2200      	movs	r2, #0
 80022de:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022e0:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80022e6:	4827      	ldr	r0, [pc, #156]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022e8:	f000 fd7e 	bl	8002de8 <HAL_DMA_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 80022f2:	f7ff feff 	bl	80020f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a22      	ldr	r2, [pc, #136]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80022fc:	4a21      	ldr	r2, [pc, #132]	@ (8002384 <HAL_I2C_MspInit+0x154>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 8002304:	4a22      	ldr	r2, [pc, #136]	@ (8002390 <HAL_I2C_MspInit+0x160>)
 8002306:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002308:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 800230a:	220a      	movs	r2, #10
 800230c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800230e:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002314:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800231a:	4b1c      	ldr	r3, [pc, #112]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 800231c:	2280      	movs	r2, #128	@ 0x80
 800231e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002326:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800232c:	4b17      	ldr	r3, [pc, #92]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002332:	4b16      	ldr	r3, [pc, #88]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002338:	4814      	ldr	r0, [pc, #80]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 800233a:	f000 fd55 	bl	8002de8 <HAL_DMA_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_I2C_MspInit+0x118>
    {
      Error_Handler();
 8002344:	f7ff fed6 	bl	80020f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a10      	ldr	r2, [pc, #64]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 800234c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800234e:	4a0f      	ldr	r2, [pc, #60]	@ (800238c <HAL_I2C_MspInit+0x15c>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	201e      	movs	r0, #30
 800235a:	f000 fce6 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800235e:	201e      	movs	r0, #30
 8002360:	f000 fcfd 	bl	8002d5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	201f      	movs	r0, #31
 800236a:	f000 fcde 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800236e:	201f      	movs	r0, #31
 8002370:	f000 fcf5 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002374:	bf00      	nop
 8002376:	3770      	adds	r7, #112	@ 0x70
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40005400 	.word	0x40005400
 8002380:	48000400 	.word	0x48000400
 8002384:	200002f8 	.word	0x200002f8
 8002388:	40020030 	.word	0x40020030
 800238c:	20000358 	.word	0x20000358
 8002390:	40020044 	.word	0x40020044

08002394 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <HAL_I2C_MspDeInit+0x58>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d11d      	bne.n	80023e2 <HAL_I2C_MspDeInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80023a6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80023aa:	f7ff ff05 	bl	80021b8 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80023ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023b2:	480f      	ldr	r0, [pc, #60]	@ (80023f0 <HAL_I2C_MspDeInit+0x5c>)
 80023b4:	f001 fa5e 	bl	8003874 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80023b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023bc:	480c      	ldr	r0, [pc, #48]	@ (80023f0 <HAL_I2C_MspDeInit+0x5c>)
 80023be:	f001 fa59 	bl	8003874 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fdb6 	bl	8002f38 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fdb1 	bl	8002f38 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80023d6:	201e      	movs	r0, #30
 80023d8:	f000 fccf 	bl	8002d7a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80023dc:	201f      	movs	r0, #31
 80023de:	f000 fccc 	bl	8002d7a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40005400 	.word	0x40005400
 80023f0:	48000400 	.word	0x48000400

080023f4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0d      	ldr	r2, [pc, #52]	@ (8002438 <HAL_IPCC_MspInit+0x44>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d113      	bne.n	800242e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002406:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800240a:	f7ff fea3 	bl	8002154 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	202c      	movs	r0, #44	@ 0x2c
 8002414:	f000 fc89 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002418:	202c      	movs	r0, #44	@ 0x2c
 800241a:	f000 fca0 	bl	8002d5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	202d      	movs	r0, #45	@ 0x2d
 8002424:	f000 fc81 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002428:	202d      	movs	r0, #45	@ 0x2d
 800242a:	f000 fc98 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	58000c00 	.word	0x58000c00

0800243c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b096      	sub	sp, #88	@ 0x58
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	2250      	movs	r2, #80	@ 0x50
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f00a fce9 	bl	800ce24 <memset>
  if(hrtc->Instance==RTC)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a12      	ldr	r2, [pc, #72]	@ (80024a0 <HAL_RTC_MspInit+0x64>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d11d      	bne.n	8002498 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800245c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002460:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002462:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002466:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002468:	f107 0308 	add.w	r3, r7, #8
 800246c:	4618      	mov	r0, r3
 800246e:	f004 fa4a 	bl	8006906 <HAL_RCCEx_PeriphCLKConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002478:	f7ff fe3c 	bl	80020f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800247c:	f7ff fe40 	bl	8002100 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002480:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002484:	f7ff fe7f 	bl	8002186 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	2003      	movs	r0, #3
 800248e:	f000 fc4c 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002492:	2003      	movs	r0, #3
 8002494:	f000 fc63 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002498:	bf00      	nop
 800249a:	3758      	adds	r7, #88	@ 0x58
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40002800 	.word	0x40002800

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b09c      	sub	sp, #112	@ 0x70
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	2250      	movs	r2, #80	@ 0x50
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00a fcad 	bl	800ce24 <memset>
  if(huart->Instance==USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a43      	ldr	r2, [pc, #268]	@ (80025dc <HAL_UART_MspInit+0x138>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d17f      	bne.n	80025d4 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fa10 	bl	8006906 <HAL_RCCEx_PeriphCLKConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024ec:	f7ff fe02 	bl	80020f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80024f4:	f7ff fe73 	bl	80021de <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f8:	2002      	movs	r0, #2
 80024fa:	f7ff fe12 	bl	8002122 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024fe:	23c0      	movs	r3, #192	@ 0xc0
 8002500:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800250e:	2307      	movs	r3, #7
 8002510:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002512:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002516:	4619      	mov	r1, r3
 8002518:	4831      	ldr	r0, [pc, #196]	@ (80025e0 <HAL_UART_MspInit+0x13c>)
 800251a:	f001 f83b 	bl	8003594 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800251e:	4b31      	ldr	r3, [pc, #196]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 8002520:	4a31      	ldr	r2, [pc, #196]	@ (80025e8 <HAL_UART_MspInit+0x144>)
 8002522:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002524:	4b2f      	ldr	r3, [pc, #188]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 8002526:	220e      	movs	r2, #14
 8002528:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800252a:	4b2e      	ldr	r3, [pc, #184]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002530:	4b2c      	ldr	r3, [pc, #176]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002536:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 8002538:	2280      	movs	r2, #128	@ 0x80
 800253a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800253c:	4b29      	ldr	r3, [pc, #164]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002542:	4b28      	ldr	r3, [pc, #160]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002548:	4b26      	ldr	r3, [pc, #152]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800254e:	4b25      	ldr	r3, [pc, #148]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002554:	4823      	ldr	r0, [pc, #140]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 8002556:	f000 fc47 	bl	8002de8 <HAL_DMA_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002560:	f7ff fdc8 	bl	80020f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a1f      	ldr	r2, [pc, #124]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 8002568:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800256c:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <HAL_UART_MspInit+0x140>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002572:	4b1e      	ldr	r3, [pc, #120]	@ (80025ec <HAL_UART_MspInit+0x148>)
 8002574:	4a1e      	ldr	r2, [pc, #120]	@ (80025f0 <HAL_UART_MspInit+0x14c>)
 8002576:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002578:	4b1c      	ldr	r3, [pc, #112]	@ (80025ec <HAL_UART_MspInit+0x148>)
 800257a:	220f      	movs	r2, #15
 800257c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800257e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_UART_MspInit+0x148>)
 8002580:	2210      	movs	r2, #16
 8002582:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002584:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <HAL_UART_MspInit+0x148>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800258a:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <HAL_UART_MspInit+0x148>)
 800258c:	2280      	movs	r2, #128	@ 0x80
 800258e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002590:	4b16      	ldr	r3, [pc, #88]	@ (80025ec <HAL_UART_MspInit+0x148>)
 8002592:	2200      	movs	r2, #0
 8002594:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002596:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <HAL_UART_MspInit+0x148>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800259c:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <HAL_UART_MspInit+0x148>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025a2:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <HAL_UART_MspInit+0x148>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025a8:	4810      	ldr	r0, [pc, #64]	@ (80025ec <HAL_UART_MspInit+0x148>)
 80025aa:	f000 fc1d 	bl	8002de8 <HAL_DMA_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 80025b4:	f7ff fd9e 	bl	80020f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a0c      	ldr	r2, [pc, #48]	@ (80025ec <HAL_UART_MspInit+0x148>)
 80025bc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025be:	4a0b      	ldr	r2, [pc, #44]	@ (80025ec <HAL_UART_MspInit+0x148>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	2024      	movs	r0, #36	@ 0x24
 80025ca:	f000 fbae 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ce:	2024      	movs	r0, #36	@ 0x24
 80025d0:	f000 fbc5 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80025d4:	bf00      	nop
 80025d6:	3770      	adds	r7, #112	@ 0x70
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40013800 	.word	0x40013800
 80025e0:	48000400 	.word	0x48000400
 80025e4:	200004ac 	.word	0x200004ac
 80025e8:	40020008 	.word	0x40020008
 80025ec:	2000050c 	.word	0x2000050c
 80025f0:	4002001c 	.word	0x4002001c

080025f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <NMI_Handler+0x4>

080025fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <HardFault_Handler+0x4>

08002604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <MemManage_Handler+0x4>

0800260c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <BusFault_Handler+0x4>

08002614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <UsageFault_Handler+0x4>

0800261c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264a:	f000 f9ef 	bl	8002a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}

08002652 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002656:	f7fe fea5 	bl	80013a4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002664:	4802      	ldr	r0, [pc, #8]	@ (8002670 <DMA1_Channel1_IRQHandler+0x10>)
 8002666:	f000 fe36 	bl	80032d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200004ac 	.word	0x200004ac

08002674 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002678:	4802      	ldr	r0, [pc, #8]	@ (8002684 <DMA1_Channel2_IRQHandler+0x10>)
 800267a:	f000 fe2c 	bl	80032d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000050c 	.word	0x2000050c

08002688 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800268c:	4802      	ldr	r0, [pc, #8]	@ (8002698 <DMA1_Channel3_IRQHandler+0x10>)
 800268e:	f000 fe22 	bl	80032d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200002f8 	.word	0x200002f8

0800269c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80026a0:	4802      	ldr	r0, [pc, #8]	@ (80026ac <DMA1_Channel4_IRQHandler+0x10>)
 80026a2:	f000 fe18 	bl	80032d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000358 	.word	0x20000358

080026b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026b4:	4802      	ldr	r0, [pc, #8]	@ (80026c0 <I2C1_EV_IRQHandler+0x10>)
 80026b6:	f001 fcc5 	bl	8004044 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200002a4 	.word	0x200002a4

080026c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80026c8:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <I2C1_ER_IRQHandler+0x10>)
 80026ca:	f001 fcd5 	bl	8004078 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200002a4 	.word	0x200002a4

080026d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <USART1_IRQHandler+0x10>)
 80026de:	f004 fe91 	bl	8007404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000418 	.word	0x20000418

080026ec <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80026f0:	f009 fdcc 	bl	800c28c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80026fc:	f009 fdfc 	bl	800c2f8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002708:	f001 f9aa 	bl	8003a60 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}

08002710 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e00a      	b.n	8002738 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002722:	f3af 8000 	nop.w
 8002726:	4601      	mov	r1, r0
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	60ba      	str	r2, [r7, #8]
 800272e:	b2ca      	uxtb	r2, r1
 8002730:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3301      	adds	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	dbf0      	blt.n	8002722 <_read+0x12>
  }

  return len;
 8002740:	687b      	ldr	r3, [r7, #4]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_close>:
  }
  return len;
}

int _close(int file)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002772:	605a      	str	r2, [r3, #4]
  return 0;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_isatty>:

int _isatty(int file)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027bc:	4a14      	ldr	r2, [pc, #80]	@ (8002810 <_sbrk+0x5c>)
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <_sbrk+0x60>)
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c8:	4b13      	ldr	r3, [pc, #76]	@ (8002818 <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d0:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <_sbrk+0x64>)
 80027d2:	4a12      	ldr	r2, [pc, #72]	@ (800281c <_sbrk+0x68>)
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d6:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <_sbrk+0x64>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d207      	bcs.n	80027f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e4:	f00a fb6c 	bl	800cec0 <__errno>
 80027e8:	4603      	mov	r3, r0
 80027ea:	220c      	movs	r2, #12
 80027ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	e009      	b.n	8002808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f4:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027fa:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	4a05      	ldr	r2, [pc, #20]	@ (8002818 <_sbrk+0x64>)
 8002804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20030000 	.word	0x20030000
 8002814:	00000400 	.word	0x00000400
 8002818:	2000056c 	.word	0x2000056c
 800281c:	20000878 	.word	0x20000878

08002820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002824:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <SystemInit+0x98>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282a:	4a23      	ldr	r2, [pc, #140]	@ (80028b8 <SystemInit+0x98>)
 800282c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002848:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800284c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800284e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002858:	4b18      	ldr	r3, [pc, #96]	@ (80028bc <SystemInit+0x9c>)
 800285a:	4013      	ands	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002866:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800286a:	f023 0305 	bic.w	r3, r3, #5
 800286e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800287a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800287e:	f023 0301 	bic.w	r3, r3, #1
 8002882:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288a:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <SystemInit+0xa0>)
 800288c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002892:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <SystemInit+0xa0>)
 8002894:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00
 80028bc:	faf6fefb 	.word	0xfaf6fefb
 80028c0:	22041000 	.word	0x22041000

080028c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80028c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c8:	3304      	adds	r3, #4

080028ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80028ce:	d3f9      	bcc.n	80028c4 <CopyDataInit>
  bx lr
 80028d0:	4770      	bx	lr

080028d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80028d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80028d4:	3004      	adds	r0, #4

080028d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80028d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80028d8:	d3fb      	bcc.n	80028d2 <FillZerobss>
  bx lr
 80028da:	4770      	bx	lr

080028dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028dc:	480c      	ldr	r0, [pc, #48]	@ (8002910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80028e0:	f7ff ff9e 	bl	8002820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80028e4:	480b      	ldr	r0, [pc, #44]	@ (8002914 <LoopForever+0x6>)
 80028e6:	490c      	ldr	r1, [pc, #48]	@ (8002918 <LoopForever+0xa>)
 80028e8:	4a0c      	ldr	r2, [pc, #48]	@ (800291c <LoopForever+0xe>)
 80028ea:	2300      	movs	r3, #0
 80028ec:	f7ff ffed 	bl	80028ca <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80028f0:	480b      	ldr	r0, [pc, #44]	@ (8002920 <LoopForever+0x12>)
 80028f2:	490c      	ldr	r1, [pc, #48]	@ (8002924 <LoopForever+0x16>)
 80028f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002928 <LoopForever+0x1a>)
 80028f6:	2300      	movs	r3, #0
 80028f8:	f7ff ffe7 	bl	80028ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80028fc:	480b      	ldr	r0, [pc, #44]	@ (800292c <LoopForever+0x1e>)
 80028fe:	490c      	ldr	r1, [pc, #48]	@ (8002930 <LoopForever+0x22>)
 8002900:	2300      	movs	r3, #0
 8002902:	f7ff ffe8 	bl	80028d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002906:	f00a fae1 	bl	800cecc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800290a:	f7ff f9d3 	bl	8001cb4 <main>

0800290e <LoopForever>:

LoopForever:
  b LoopForever
 800290e:	e7fe      	b.n	800290e <LoopForever>
  ldr   r0, =_estack
 8002910:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002914:	20000008 	.word	0x20000008
 8002918:	20000088 	.word	0x20000088
 800291c:	0800de90 	.word	0x0800de90
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002920:	200301e4 	.word	0x200301e4
 8002924:	20030a67 	.word	0x20030a67
 8002928:	0800df56 	.word	0x0800df56
  INIT_BSS _sbss, _ebss
 800292c:	200000d4 	.word	0x200000d4
 8002930:	20000874 	.word	0x20000874

08002934 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC1_IRQHandler>
	...

08002938 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6053      	str	r3, [r2, #4]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e0042000 	.word	0xe0042000

08002958 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800295c:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	6053      	str	r3, [r2, #4]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e0042000 	.word	0xe0042000

08002978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_Init+0x3c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a0b      	ldr	r2, [pc, #44]	@ (80029b4 <HAL_Init+0x3c>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800298c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298e:	2003      	movs	r0, #3
 8002990:	f000 f9c0 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002994:	2000      	movs	r0, #0
 8002996:	f000 f80f 	bl	80029b8 <HAL_InitTick>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	e001      	b.n	80029aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029a6:	f7ff fc33 	bl	8002210 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029aa:	79fb      	ldrb	r3, [r7, #7]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	58004000 	.word	0x58004000

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80029c4:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <HAL_InitTick+0x6c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d024      	beq.n	8002a16 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029cc:	f003 fd0a 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <HAL_InitTick+0x6c>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4619      	mov	r1, r3
 80029d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 f9d6 	bl	8002d96 <HAL_SYSTICK_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10f      	bne.n	8002a10 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	d809      	bhi.n	8002a0a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f6:	2200      	movs	r2, #0
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	f04f 30ff 	mov.w	r0, #4294967295
 80029fe:	f000 f994 	bl	8002d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a02:	4a09      	ldr	r2, [pc, #36]	@ (8002a28 <HAL_InitTick+0x70>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e007      	b.n	8002a1a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e004      	b.n	8002a1a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e001      	b.n	8002a1a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000010 	.word	0x20000010
 8002a28:	2000000c 	.word	0x2000000c

08002a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_IncTick+0x20>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_IncTick+0x24>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <HAL_IncTick+0x24>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000010 	.word	0x20000010
 8002a50:	20000570 	.word	0x20000570

08002a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return uwTick;
 8002a58:	4b03      	ldr	r3, [pc, #12]	@ (8002a68 <HAL_GetTick+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000570 	.word	0x20000570

08002a6c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002a70:	4b03      	ldr	r3, [pc, #12]	@ (8002a80 <HAL_GetTickPrio+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	2000000c 	.word	0x2000000c

08002a84 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <HAL_GetTickFreq+0x14>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000010 	.word	0x20000010

08002a9c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002aa0:	f7ff ff4a 	bl	8002938 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002aac:	f7ff ff54 	bl	8002958 <LL_DBGMCU_EnableDBGStopMode>
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae6:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	60d3      	str	r3, [r2, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <__NVIC_GetPriorityGrouping+0x18>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0307 	and.w	r3, r3, #7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db0b      	blt.n	8002b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4907      	ldr	r1, [pc, #28]	@ (8002b50 <__NVIC_EnableIRQ+0x38>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2001      	movs	r0, #1
 8002b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db12      	blt.n	8002b8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	490a      	ldr	r1, [pc, #40]	@ (8002b98 <__NVIC_DisableIRQ+0x44>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	3320      	adds	r3, #32
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b80:	f3bf 8f4f 	dsb	sy
}
 8002b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b86:	f3bf 8f6f 	isb	sy
}
 8002b8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0c      	blt.n	8002bc8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4907      	ldr	r1, [pc, #28]	@ (8002bd4 <__NVIC_SetPendingIRQ+0x38>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	3340      	adds	r3, #64	@ 0x40
 8002bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	db0c      	blt.n	8002c04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4907      	ldr	r1, [pc, #28]	@ (8002c10 <__NVIC_ClearPendingIRQ+0x38>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfe:	3360      	adds	r3, #96	@ 0x60
 8002c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	@ (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	@ (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	@ 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff8e 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	@ (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fec9 	bl	8002ab4 <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d38:	f7ff fee0 	bl	8002afc <__NVIC_GetPriorityGrouping>
 8002d3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f7ff ff90 	bl	8002c68 <NVIC_EncodePriority>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff5f 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4603      	mov	r3, r0
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fed3 	bl	8002b18 <__NVIC_EnableIRQ>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fee3 	bl	8002b54 <__NVIC_DisableIRQ>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff96 	bl	8002cd0 <SysTick_Config>
 8002da4:	4603      	mov	r3, r0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff feed 	bl	8002b9c <__NVIC_SetPendingIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fefd 	bl	8002bd8 <__NVIC_ClearPendingIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e08e      	b.n	8002f18 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_DMA_Init+0x138>)
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d80f      	bhi.n	8002e26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b45      	ldr	r3, [pc, #276]	@ (8002f24 <HAL_DMA_Init+0x13c>)
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a45      	ldr	r2, [pc, #276]	@ (8002f28 <HAL_DMA_Init+0x140>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	009a      	lsls	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a42      	ldr	r2, [pc, #264]	@ (8002f2c <HAL_DMA_Init+0x144>)
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e24:	e00e      	b.n	8002e44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b40      	ldr	r3, [pc, #256]	@ (8002f30 <HAL_DMA_Init+0x148>)
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a3d      	ldr	r2, [pc, #244]	@ (8002f28 <HAL_DMA_Init+0x140>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	009a      	lsls	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a3c      	ldr	r2, [pc, #240]	@ (8002f34 <HAL_DMA_Init+0x14c>)
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fb18 	bl	80034cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ea4:	d102      	bne.n	8002eac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ec2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_DMA_Init+0x106>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d80c      	bhi.n	8002eee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fb37 	bl	8003548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	e008      	b.n	8002f00 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40020407 	.word	0x40020407
 8002f24:	bffdfff8 	.word	0xbffdfff8
 8002f28:	cccccccd 	.word	0xcccccccd
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	bffdfbf8 	.word	0xbffdfbf8
 8002f34:	40020400 	.word	0x40020400

08002f38 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e07b      	b.n	8003042 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b3a      	ldr	r3, [pc, #232]	@ (800304c <HAL_DMA_DeInit+0x114>)
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d80f      	bhi.n	8002f86 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b38      	ldr	r3, [pc, #224]	@ (8003050 <HAL_DMA_DeInit+0x118>)
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a38      	ldr	r2, [pc, #224]	@ (8003054 <HAL_DMA_DeInit+0x11c>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	009a      	lsls	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a35      	ldr	r2, [pc, #212]	@ (8003058 <HAL_DMA_DeInit+0x120>)
 8002f82:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f84:	e00e      	b.n	8002fa4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b33      	ldr	r3, [pc, #204]	@ (800305c <HAL_DMA_DeInit+0x124>)
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a30      	ldr	r2, [pc, #192]	@ (8003054 <HAL_DMA_DeInit+0x11c>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	009a      	lsls	r2, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8003060 <HAL_DMA_DeInit+0x128>)
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb0:	f003 021c 	and.w	r2, r3, #28
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fa83 	bl	80034cc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fd6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00f      	beq.n	8003000 <HAL_DMA_DeInit+0xc8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d80b      	bhi.n	8003000 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 faad 	bl	8003548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ffe:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40020407 	.word	0x40020407
 8003050:	bffdfff8 	.word	0xbffdfff8
 8003054:	cccccccd 	.word	0xcccccccd
 8003058:	40020000 	.word	0x40020000
 800305c:	bffdfbf8 	.word	0xbffdfbf8
 8003060:	40020400 	.word	0x40020400

08003064 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_DMA_Start_IT+0x20>
 8003080:	2302      	movs	r3, #2
 8003082:	e066      	b.n	8003152 <HAL_DMA_Start_IT+0xee>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d155      	bne.n	8003144 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f9c7 	bl	8003450 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 020e 	orr.w	r2, r2, #14
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e00f      	b.n	80030fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 020a 	orr.w	r2, r2, #10
 80030fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003118:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003130:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0201 	orr.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e005      	b.n	8003150 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800314c:	2302      	movs	r3, #2
 800314e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003150:	7dfb      	ldrb	r3, [r7, #23]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e04f      	b.n	800320c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d008      	beq.n	800318a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2204      	movs	r2, #4
 800317c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e040      	b.n	800320c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 020e 	bic.w	r2, r2, #14
 8003198:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f003 021c 	and.w	r2, r3, #28
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00c      	beq.n	80031fa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d005      	beq.n	800323c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2204      	movs	r2, #4
 8003234:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e047      	b.n	80032cc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 020e 	bic.w	r2, r2, #14
 800324a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003266:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800326a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003270:	f003 021c 	and.w	r2, r3, #28
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f202 	lsl.w	r2, r1, r2
 800327e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003288:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00c      	beq.n	80032ac <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80032aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
    }
  }
  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f003 031c 	and.w	r3, r3, #28
 80032f6:	2204      	movs	r2, #4
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d026      	beq.n	8003350 <HAL_DMA_IRQHandler+0x7a>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d021      	beq.n	8003350 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0204 	bic.w	r2, r2, #4
 8003328:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	f003 021c 	and.w	r2, r3, #28
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	2104      	movs	r1, #4
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	2b00      	cmp	r3, #0
 8003344:	d071      	beq.n	800342a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800334e:	e06c      	b.n	800342a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003354:	f003 031c 	and.w	r3, r3, #28
 8003358:	2202      	movs	r2, #2
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d02e      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xec>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d029      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 020a 	bic.w	r2, r2, #10
 800338a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003398:	f003 021c 	and.w	r2, r3, #28
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	2102      	movs	r1, #2
 80033a2:	fa01 f202 	lsl.w	r2, r1, r2
 80033a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d038      	beq.n	800342a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033c0:	e033      	b.n	800342a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	f003 031c 	and.w	r3, r3, #28
 80033ca:	2208      	movs	r2, #8
 80033cc:	409a      	lsls	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d02a      	beq.n	800342c <HAL_DMA_IRQHandler+0x156>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d025      	beq.n	800342c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 020e 	bic.w	r2, r2, #14
 80033ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f4:	f003 021c 	and.w	r2, r3, #28
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341e:	2b00      	cmp	r3, #0
 8003420:	d004      	beq.n	800342c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800342a:	bf00      	nop
 800342c:	bf00      	nop
}
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003442:	b2db      	uxtb	r3, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003466:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003478:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f003 021c 	and.w	r2, r3, #28
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2101      	movs	r1, #1
 8003488:	fa01 f202 	lsl.w	r2, r1, r2
 800348c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b10      	cmp	r3, #16
 800349c:	d108      	bne.n	80034b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034ae:	e007      	b.n	80034c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	60da      	str	r2, [r3, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b17      	ldr	r3, [pc, #92]	@ (8003538 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034dc:	429a      	cmp	r2, r3
 80034de:	d80a      	bhi.n	80034f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ec:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6493      	str	r3, [r2, #72]	@ 0x48
 80034f4:	e007      	b.n	8003506 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	009a      	lsls	r2, r3, #2
 80034fe:	4b0f      	ldr	r3, [pc, #60]	@ (800353c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003500:	4413      	add	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3b08      	subs	r3, #8
 800350e:	4a0c      	ldr	r2, [pc, #48]	@ (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800351c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2201      	movs	r2, #1
 8003526:	409a      	lsls	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40020407 	.word	0x40020407
 800353c:	4002081c 	.word	0x4002081c
 8003540:	cccccccd 	.word	0xcccccccd
 8003544:	40020880 	.word	0x40020880

08003548 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003558:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	461a      	mov	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a09      	ldr	r2, [pc, #36]	@ (8003590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800356c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3b01      	subs	r3, #1
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2201      	movs	r2, #1
 8003578:	409a      	lsls	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	1000823f 	.word	0x1000823f
 8003590:	40020940 	.word	0x40020940

08003594 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a2:	e14c      	b.n	800383e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	4013      	ands	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 813e 	beq.w	8003838 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d005      	beq.n	80035d4 <HAL_GPIO_Init+0x40>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d130      	bne.n	8003636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360a:	2201      	movs	r2, #1
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f003 0201 	and.w	r2, r3, #1
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b03      	cmp	r3, #3
 8003640:	d017      	beq.n	8003672 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d123      	bne.n	80036c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	6939      	ldr	r1, [r7, #16]
 80036c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0203 	and.w	r2, r3, #3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8098 	beq.w	8003838 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003708:	4a54      	ldr	r2, [pc, #336]	@ (800385c <HAL_GPIO_Init+0x2c8>)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	089b      	lsrs	r3, r3, #2
 800370e:	3302      	adds	r3, #2
 8003710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	220f      	movs	r2, #15
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003732:	d019      	beq.n	8003768 <HAL_GPIO_Init+0x1d4>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a4a      	ldr	r2, [pc, #296]	@ (8003860 <HAL_GPIO_Init+0x2cc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d013      	beq.n	8003764 <HAL_GPIO_Init+0x1d0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a49      	ldr	r2, [pc, #292]	@ (8003864 <HAL_GPIO_Init+0x2d0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00d      	beq.n	8003760 <HAL_GPIO_Init+0x1cc>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a48      	ldr	r2, [pc, #288]	@ (8003868 <HAL_GPIO_Init+0x2d4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d007      	beq.n	800375c <HAL_GPIO_Init+0x1c8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a47      	ldr	r2, [pc, #284]	@ (800386c <HAL_GPIO_Init+0x2d8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_GPIO_Init+0x1c4>
 8003754:	2304      	movs	r3, #4
 8003756:	e008      	b.n	800376a <HAL_GPIO_Init+0x1d6>
 8003758:	2307      	movs	r3, #7
 800375a:	e006      	b.n	800376a <HAL_GPIO_Init+0x1d6>
 800375c:	2303      	movs	r3, #3
 800375e:	e004      	b.n	800376a <HAL_GPIO_Init+0x1d6>
 8003760:	2302      	movs	r3, #2
 8003762:	e002      	b.n	800376a <HAL_GPIO_Init+0x1d6>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_GPIO_Init+0x1d6>
 8003768:	2300      	movs	r3, #0
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	f002 0203 	and.w	r2, r2, #3
 8003770:	0092      	lsls	r2, r2, #2
 8003772:	4093      	lsls	r3, r2
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800377a:	4938      	ldr	r1, [pc, #224]	@ (800385c <HAL_GPIO_Init+0x2c8>)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	3302      	adds	r3, #2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003788:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <HAL_GPIO_Init+0x2dc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037ac:	4a30      	ldr	r2, [pc, #192]	@ (8003870 <HAL_GPIO_Init+0x2dc>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003870 <HAL_GPIO_Init+0x2dc>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037d6:	4a26      	ldr	r2, [pc, #152]	@ (8003870 <HAL_GPIO_Init+0x2dc>)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037dc:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_GPIO_Init+0x2dc>)
 80037de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003802:	4a1b      	ldr	r2, [pc, #108]	@ (8003870 <HAL_GPIO_Init+0x2dc>)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <HAL_GPIO_Init+0x2dc>)
 800380c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	43db      	mvns	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003830:	4a0f      	ldr	r2, [pc, #60]	@ (8003870 <HAL_GPIO_Init+0x2dc>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3301      	adds	r3, #1
 800383c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	f47f aeab 	bne.w	80035a4 <HAL_GPIO_Init+0x10>
  }
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40010000 	.word	0x40010000
 8003860:	48000400 	.word	0x48000400
 8003864:	48000800 	.word	0x48000800
 8003868:	48000c00 	.word	0x48000c00
 800386c:	48001000 	.word	0x48001000
 8003870:	58000800 	.word	0x58000800

08003874 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003882:	e0bb      	b.n	80039fc <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003884:	2201      	movs	r2, #1
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80ae 	beq.w	80039f6 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800389a:	4a5f      	ldr	r2, [pc, #380]	@ (8003a18 <HAL_GPIO_DeInit+0x1a4>)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	3302      	adds	r3, #2
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038c2:	d019      	beq.n	80038f8 <HAL_GPIO_DeInit+0x84>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a55      	ldr	r2, [pc, #340]	@ (8003a1c <HAL_GPIO_DeInit+0x1a8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_GPIO_DeInit+0x80>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a54      	ldr	r2, [pc, #336]	@ (8003a20 <HAL_GPIO_DeInit+0x1ac>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00d      	beq.n	80038f0 <HAL_GPIO_DeInit+0x7c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a53      	ldr	r2, [pc, #332]	@ (8003a24 <HAL_GPIO_DeInit+0x1b0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d007      	beq.n	80038ec <HAL_GPIO_DeInit+0x78>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a52      	ldr	r2, [pc, #328]	@ (8003a28 <HAL_GPIO_DeInit+0x1b4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d101      	bne.n	80038e8 <HAL_GPIO_DeInit+0x74>
 80038e4:	2304      	movs	r3, #4
 80038e6:	e008      	b.n	80038fa <HAL_GPIO_DeInit+0x86>
 80038e8:	2307      	movs	r3, #7
 80038ea:	e006      	b.n	80038fa <HAL_GPIO_DeInit+0x86>
 80038ec:	2303      	movs	r3, #3
 80038ee:	e004      	b.n	80038fa <HAL_GPIO_DeInit+0x86>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e002      	b.n	80038fa <HAL_GPIO_DeInit+0x86>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_GPIO_DeInit+0x86>
 80038f8:	2300      	movs	r3, #0
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	f002 0203 	and.w	r2, r2, #3
 8003900:	0092      	lsls	r2, r2, #2
 8003902:	4093      	lsls	r3, r2
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	429a      	cmp	r2, r3
 8003908:	d136      	bne.n	8003978 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800390a:	4b48      	ldr	r3, [pc, #288]	@ (8003a2c <HAL_GPIO_DeInit+0x1b8>)
 800390c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	43db      	mvns	r3, r3
 8003914:	4945      	ldr	r1, [pc, #276]	@ (8003a2c <HAL_GPIO_DeInit+0x1b8>)
 8003916:	4013      	ands	r3, r2
 8003918:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800391c:	4b43      	ldr	r3, [pc, #268]	@ (8003a2c <HAL_GPIO_DeInit+0x1b8>)
 800391e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	4941      	ldr	r1, [pc, #260]	@ (8003a2c <HAL_GPIO_DeInit+0x1b8>)
 8003928:	4013      	ands	r3, r2
 800392a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800392e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a2c <HAL_GPIO_DeInit+0x1b8>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	43db      	mvns	r3, r3
 8003936:	493d      	ldr	r1, [pc, #244]	@ (8003a2c <HAL_GPIO_DeInit+0x1b8>)
 8003938:	4013      	ands	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800393c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a2c <HAL_GPIO_DeInit+0x1b8>)
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	4939      	ldr	r1, [pc, #228]	@ (8003a2c <HAL_GPIO_DeInit+0x1b8>)
 8003946:	4013      	ands	r3, r2
 8003948:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800395a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a18 <HAL_GPIO_DeInit+0x1a4>)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	3302      	adds	r3, #2
 8003962:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43da      	mvns	r2, r3
 800396a:	482b      	ldr	r0, [pc, #172]	@ (8003a18 <HAL_GPIO_DeInit+0x1a4>)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	400a      	ands	r2, r1
 8003972:	3302      	adds	r3, #2
 8003974:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2103      	movs	r1, #3
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	08da      	lsrs	r2, r3, #3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3208      	adds	r2, #8
 8003994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	08d2      	lsrs	r2, r2, #3
 80039ac:	4019      	ands	r1, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2103      	movs	r1, #3
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	401a      	ands	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	2101      	movs	r1, #1
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2103      	movs	r1, #3
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	401a      	ands	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3301      	adds	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f af3d 	bne.w	8003884 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	48000400 	.word	0x48000400
 8003a20:	48000800 	.word	0x48000800
 8003a24:	48000c00 	.word	0x48000c00
 8003a28:	48001000 	.word	0x48001000
 8003a2c:	58000800 	.word	0x58000800

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003a66:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <HAL_HSEM_IRQHandler+0x30>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003a6c:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <HAL_HSEM_IRQHandler+0x30>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	4906      	ldr	r1, [pc, #24]	@ (8003a90 <HAL_HSEM_IRQHandler+0x30>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003a7a:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <HAL_HSEM_IRQHandler+0x30>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f807 	bl	8003a94 <HAL_HSEM_FreeCallback>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	58001500 	.word	0x58001500

08003a94 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e08d      	b.n	8003bd6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fe fbae 	bl	8002230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	@ 0x24
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003af8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d107      	bne.n	8003b22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	e006      	b.n	8003b30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d108      	bne.n	8003b4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	e007      	b.n	8003b5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69d9      	ldr	r1, [r3, #28]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e021      	b.n	8003c34 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	@ 0x24
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7fe fbc3 	bl	8002394 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	461a      	mov	r2, r3
 8003c48:	460b      	mov	r3, r1
 8003c4a:	817b      	strh	r3, [r7, #10]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	f040 80fd 	bne.w	8003e58 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_I2C_Master_Transmit+0x30>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e0f6      	b.n	8003e5a <HAL_I2C_Master_Transmit+0x21e>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c74:	f7fe feee 	bl	8002a54 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	2319      	movs	r3, #25
 8003c80:	2201      	movs	r2, #1
 8003c82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 ff87 	bl	8004b9a <I2C_WaitOnFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0e1      	b.n	8003e5a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2221      	movs	r2, #33	@ 0x21
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	893a      	ldrh	r2, [r7, #8]
 8003cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2bff      	cmp	r3, #255	@ 0xff
 8003cc6:	d906      	bls.n	8003cd6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	22ff      	movs	r2, #255	@ 0xff
 8003ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003cce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e007      	b.n	8003ce6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003ce0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ce4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d024      	beq.n	8003d38 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	781a      	ldrb	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	8979      	ldrh	r1, [r7, #10]
 8003d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e64 <HAL_I2C_Master_Transmit+0x228>)
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f001 f8f5 	bl	8004f20 <I2C_TransferConfig>
 8003d36:	e066      	b.n	8003e06 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	8979      	ldrh	r1, [r7, #10]
 8003d40:	4b48      	ldr	r3, [pc, #288]	@ (8003e64 <HAL_I2C_Master_Transmit+0x228>)
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f001 f8ea 	bl	8004f20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d4c:	e05b      	b.n	8003e06 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 ff7a 	bl	8004c4c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07b      	b.n	8003e5a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d034      	beq.n	8003e06 <HAL_I2C_Master_Transmit+0x1ca>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d130      	bne.n	8003e06 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	2200      	movs	r2, #0
 8003dac:	2180      	movs	r1, #128	@ 0x80
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fef3 	bl	8004b9a <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e04d      	b.n	8003e5a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2bff      	cmp	r3, #255	@ 0xff
 8003dc6:	d90e      	bls.n	8003de6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	22ff      	movs	r2, #255	@ 0xff
 8003dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	8979      	ldrh	r1, [r7, #10]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f001 f89e 	bl	8004f20 <I2C_TransferConfig>
 8003de4:	e00f      	b.n	8003e06 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	8979      	ldrh	r1, [r7, #10]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f001 f88d 	bl	8004f20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d19e      	bne.n	8003d4e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	6a39      	ldr	r1, [r7, #32]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 ff60 	bl	8004cda <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e01a      	b.n	8003e5a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <HAL_I2C_Master_Transmit+0x22c>)
 8003e38:	400b      	ands	r3, r1
 8003e3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	80002000 	.word	0x80002000
 8003e68:	fe00e800 	.word	0xfe00e800

08003e6c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	@ 0x28
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	f040 80d6 	bne.w	800403a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0cc      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2C_IsDeviceReady+0x44>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e0c5      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1d0>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2224      	movs	r2, #36	@ 0x24
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d107      	bne.n	8003ede <HAL_I2C_IsDeviceReady+0x72>
 8003ece:	897b      	ldrh	r3, [r7, #10]
 8003ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ed8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003edc:	e006      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x80>
 8003ede:	897b      	ldrh	r3, [r7, #10]
 8003ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ee8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fdaf 	bl	8002a54 <HAL_GetTick>
 8003ef6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	bf0c      	ite	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	2300      	movne	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f24:	e034      	b.n	8003f90 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d01a      	beq.n	8003f64 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f2e:	f7fe fd91 	bl	8002a54 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d302      	bcc.n	8003f44 <HAL_I2C_IsDeviceReady+0xd8>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e06b      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f90:	7ffb      	ldrb	r3, [r7, #31]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <HAL_I2C_IsDeviceReady+0x130>
 8003f96:	7fbb      	ldrb	r3, [r7, #30]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0c4      	beq.n	8003f26 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d01a      	beq.n	8003fe0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2120      	movs	r1, #32
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fdf0 	bl	8004b9a <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e03b      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e02d      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2120      	movs	r1, #32
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fdd5 	bl	8004b9a <I2C_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e020      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2210      	movs	r2, #16
 8004000:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2220      	movs	r2, #32
 8004008:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3301      	adds	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	f63f af56 	bhi.w	8003ec6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	f043 0220 	orr.w	r2, r3, #32
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
  }
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00f      	beq.n	80040ba <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00f      	beq.n	80040e4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	f043 0208 	orr.w	r2, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00f      	beq.n	800410e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fc:	f043 0202 	orr.w	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800410c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 030b 	and.w	r3, r3, #11
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fbe1 	bl	80048e8 <I2C_ITError>
  }
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	70fb      	strb	r3, [r7, #3]
 8004162:	4613      	mov	r3, r2
 8004164:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <I2C_Slave_ISR_IT+0x24>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e0e2      	b.n	80043b0 <I2C_Slave_ISR_IT+0x1ea>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004206:	6939      	ldr	r1, [r7, #16]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f9b5 	bl	8004578 <I2C_ITSlaveCplt>
 800420e:	e0ca      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d04b      	beq.n	80042b2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004220:	2b00      	cmp	r3, #0
 8004222:	d046      	beq.n	80042b2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d128      	bne.n	8004280 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b28      	cmp	r3, #40	@ 0x28
 8004238:	d108      	bne.n	800424c <I2C_Slave_ISR_IT+0x86>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004240:	d104      	bne.n	800424c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fafb 	bl	8004840 <I2C_ITListenCplt>
 800424a:	e031      	b.n	80042b0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b29      	cmp	r3, #41	@ 0x29
 8004256:	d10e      	bne.n	8004276 <I2C_Slave_ISR_IT+0xb0>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800425e:	d00a      	beq.n	8004276 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2210      	movs	r2, #16
 8004266:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fc54 	bl	8004b16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f926 	bl	80044c0 <I2C_ITSlaveSeqCplt>
 8004274:	e01c      	b.n	80042b0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800427e:	e08f      	b.n	80043a0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2210      	movs	r2, #16
 8004286:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <I2C_Slave_ISR_IT+0xdc>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a0:	d17e      	bne.n	80043a0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	4619      	mov	r1, r3
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fb1d 	bl	80048e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042ae:	e077      	b.n	80043a0 <I2C_Slave_ISR_IT+0x1da>
 80042b0:	e076      	b.n	80043a0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d02f      	beq.n	800431c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d02a      	beq.n	800431c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d018      	beq.n	8004302 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d14b      	bne.n	80043a4 <I2C_Slave_ISR_IT+0x1de>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004312:	d047      	beq.n	80043a4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f8d3 	bl	80044c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800431a:	e043      	b.n	80043a4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004330:	6939      	ldr	r1, [r7, #16]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f840 	bl	80043b8 <I2C_ITAddrCplt>
 8004338:	e035      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d030      	beq.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800434a:	2b00      	cmp	r3, #0
 800434c:	d02b      	beq.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d018      	beq.n	800438a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004388:	e00d      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004390:	d002      	beq.n	8004398 <I2C_Slave_ISR_IT+0x1d2>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f891 	bl	80044c0 <I2C_ITSlaveSeqCplt>
 800439e:	e002      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80043a4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043ce:	2b28      	cmp	r3, #40	@ 0x28
 80043d0:	d16a      	bne.n	80044a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80043f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800440c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d138      	bne.n	8004488 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	09db      	lsrs	r3, r3, #7
 800441a:	b29a      	uxth	r2, r3
 800441c:	89bb      	ldrh	r3, [r7, #12]
 800441e:	4053      	eors	r3, r2
 8004420:	b29b      	uxth	r3, r3
 8004422:	f003 0306 	and.w	r3, r3, #6
 8004426:	2b00      	cmp	r3, #0
 8004428:	d11c      	bne.n	8004464 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800442a:	897b      	ldrh	r3, [r7, #10]
 800442c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443c:	2b02      	cmp	r3, #2
 800443e:	d13b      	bne.n	80044b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2208      	movs	r2, #8
 800444c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004456:	89ba      	ldrh	r2, [r7, #12]
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fe7a 	bl	8004156 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004462:	e029      	b.n	80044b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004464:	893b      	ldrh	r3, [r7, #8]
 8004466:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004468:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fd89 	bl	8004f84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800447a:	89ba      	ldrh	r2, [r7, #12]
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fe68 	bl	8004156 <HAL_I2C_AddrCallback>
}
 8004486:	e017      	b.n	80044b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004488:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fd79 	bl	8004f84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800449a:	89ba      	ldrh	r2, [r7, #12]
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fe58 	bl	8004156 <HAL_I2C_AddrCallback>
}
 80044a6:	e007      	b.n	80044b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2208      	movs	r2, #8
 80044ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d008      	beq.n	80044f4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e00c      	b.n	800450e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800450c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b29      	cmp	r3, #41	@ 0x29
 8004518:	d112      	bne.n	8004540 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2228      	movs	r2, #40	@ 0x28
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2221      	movs	r2, #33	@ 0x21
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004528:	2101      	movs	r1, #1
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fd2a 	bl	8004f84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fdf8 	bl	800412e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800453e:	e017      	b.n	8004570 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b2a      	cmp	r3, #42	@ 0x2a
 800454a:	d111      	bne.n	8004570 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2228      	movs	r2, #40	@ 0x28
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2222      	movs	r2, #34	@ 0x22
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800455a:	2102      	movs	r1, #2
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fd11 	bl	8004f84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fde9 	bl	8004142 <HAL_I2C_SlaveRxCpltCallback>
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004592:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800459a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2220      	movs	r2, #32
 80045a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045a4:	7afb      	ldrb	r3, [r7, #11]
 80045a6:	2b21      	cmp	r3, #33	@ 0x21
 80045a8:	d002      	beq.n	80045b0 <I2C_ITSlaveCplt+0x38>
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	2b29      	cmp	r3, #41	@ 0x29
 80045ae:	d108      	bne.n	80045c2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80045b0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fce5 	bl	8004f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2221      	movs	r2, #33	@ 0x21
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
 80045c0:	e019      	b.n	80045f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045c2:	7afb      	ldrb	r3, [r7, #11]
 80045c4:	2b22      	cmp	r3, #34	@ 0x22
 80045c6:	d002      	beq.n	80045ce <I2C_ITSlaveCplt+0x56>
 80045c8:	7afb      	ldrb	r3, [r7, #11]
 80045ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80045cc:	d108      	bne.n	80045e0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80045ce:	f248 0102 	movw	r1, #32770	@ 0x8002
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fcd6 	bl	8004f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2222      	movs	r2, #34	@ 0x22
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80045de:	e00a      	b.n	80045f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80045e0:	7afb      	ldrb	r3, [r7, #11]
 80045e2:	2b28      	cmp	r3, #40	@ 0x28
 80045e4:	d107      	bne.n	80045f6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80045e6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fcca 	bl	8004f84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004604:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b89      	ldr	r3, [pc, #548]	@ (8004838 <I2C_ITSlaveCplt+0x2c0>)
 8004612:	400b      	ands	r3, r1
 8004614:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa7d 	bl	8004b16 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d013      	beq.n	800464e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004634:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01f      	beq.n	800467e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	b29a      	uxth	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800464c:	e017      	b.n	800467e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004666:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d020      	beq.n	80046ca <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0304 	bic.w	r3, r3, #4
 800468e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d8:	f043 0204 	orr.w	r2, r3, #4
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d049      	beq.n	800477e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d044      	beq.n	800477e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d128      	bne.n	8004750 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b28      	cmp	r3, #40	@ 0x28
 8004708:	d108      	bne.n	800471c <I2C_ITSlaveCplt+0x1a4>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004710:	d104      	bne.n	800471c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004712:	6979      	ldr	r1, [r7, #20]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f893 	bl	8004840 <I2C_ITListenCplt>
 800471a:	e030      	b.n	800477e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b29      	cmp	r3, #41	@ 0x29
 8004726:	d10e      	bne.n	8004746 <I2C_ITSlaveCplt+0x1ce>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800472e:	d00a      	beq.n	8004746 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2210      	movs	r2, #16
 8004736:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9ec 	bl	8004b16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff febe 	bl	80044c0 <I2C_ITSlaveSeqCplt>
 8004744:	e01b      	b.n	800477e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2210      	movs	r2, #16
 800474c:	61da      	str	r2, [r3, #28]
 800474e:	e016      	b.n	800477e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2210      	movs	r2, #16
 8004756:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475c:	f043 0204 	orr.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <I2C_ITSlaveCplt+0x1fa>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004770:	d105      	bne.n	800477e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f8b5 	bl	80048e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004798:	4619      	mov	r1, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f8a4 	bl	80048e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b28      	cmp	r3, #40	@ 0x28
 80047aa:	d141      	bne.n	8004830 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80047ac:	6979      	ldr	r1, [r7, #20]
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f846 	bl	8004840 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047b4:	e03c      	b.n	8004830 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047be:	d014      	beq.n	80047ea <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff fe7d 	bl	80044c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1c      	ldr	r2, [pc, #112]	@ (800483c <I2C_ITSlaveCplt+0x2c4>)
 80047ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fcc5 	bl	8004172 <HAL_I2C_ListenCpltCallback>
}
 80047e8:	e022      	b.n	8004830 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b22      	cmp	r3, #34	@ 0x22
 80047f4:	d10e      	bne.n	8004814 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fc98 	bl	8004142 <HAL_I2C_SlaveRxCpltCallback>
}
 8004812:	e00d      	b.n	8004830 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fc7f 	bl	800412e <HAL_I2C_SlaveTxCpltCallback>
}
 8004830:	bf00      	nop
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	fe00e800 	.word	0xfe00e800
 800483c:	ffff0000 	.word	0xffff0000

08004840 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a25      	ldr	r2, [pc, #148]	@ (80048e4 <I2C_ITListenCplt+0xa4>)
 800484e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d022      	beq.n	80048bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004892:	2b00      	cmp	r3, #0
 8004894:	d012      	beq.n	80048bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	f043 0204 	orr.w	r2, r3, #4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fb5f 	bl	8004f84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2210      	movs	r2, #16
 80048cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fc4b 	bl	8004172 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	ffff0000 	.word	0xffff0000

080048e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a6d      	ldr	r2, [pc, #436]	@ (8004abc <I2C_ITError+0x1d4>)
 8004906:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b28      	cmp	r3, #40	@ 0x28
 800491e:	d005      	beq.n	800492c <I2C_ITError+0x44>
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b29      	cmp	r3, #41	@ 0x29
 8004924:	d002      	beq.n	800492c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2b2a      	cmp	r3, #42	@ 0x2a
 800492a:	d10b      	bne.n	8004944 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800492c:	2103      	movs	r1, #3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fb28 	bl	8004f84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2228      	movs	r2, #40	@ 0x28
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a60      	ldr	r2, [pc, #384]	@ (8004ac0 <I2C_ITError+0x1d8>)
 8004940:	635a      	str	r2, [r3, #52]	@ 0x34
 8004942:	e030      	b.n	80049a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004944:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fb1b 	bl	8004f84 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8e1 	bl	8004b16 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b60      	cmp	r3, #96	@ 0x60
 800495e:	d01f      	beq.n	80049a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d114      	bne.n	80049a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b10      	cmp	r3, #16
 8004982:	d109      	bne.n	8004998 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2210      	movs	r2, #16
 800498a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004990:	f043 0204 	orr.w	r2, r3, #4
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2220      	movs	r2, #32
 800499e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d039      	beq.n	8004a28 <I2C_ITError+0x140>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b11      	cmp	r3, #17
 80049b8:	d002      	beq.n	80049c0 <I2C_ITError+0xd8>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b21      	cmp	r3, #33	@ 0x21
 80049be:	d133      	bne.n	8004a28 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049ce:	d107      	bne.n	80049e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe fd25 	bl	8003434 <HAL_DMA_GetState>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d017      	beq.n	8004a20 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f4:	4a33      	ldr	r2, [pc, #204]	@ (8004ac4 <I2C_ITError+0x1dc>)
 80049f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe fc07 	bl	8003218 <HAL_DMA_Abort_IT>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d04d      	beq.n	8004aac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a1e:	e045      	b.n	8004aac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f851 	bl	8004ac8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a26:	e041      	b.n	8004aac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d039      	beq.n	8004aa4 <I2C_ITError+0x1bc>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b12      	cmp	r3, #18
 8004a34:	d002      	beq.n	8004a3c <I2C_ITError+0x154>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b22      	cmp	r3, #34	@ 0x22
 8004a3a:	d133      	bne.n	8004aa4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a4a:	d107      	bne.n	8004a5c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fce7 	bl	8003434 <HAL_DMA_GetState>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d017      	beq.n	8004a9c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	4a14      	ldr	r2, [pc, #80]	@ (8004ac4 <I2C_ITError+0x1dc>)
 8004a72:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fbc9 	bl	8003218 <HAL_DMA_Abort_IT>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a96:	4610      	mov	r0, r2
 8004a98:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a9a:	e009      	b.n	8004ab0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f813 	bl	8004ac8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aa2:	e005      	b.n	8004ab0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f80f 	bl	8004ac8 <I2C_TreatErrorCallback>
  }
}
 8004aaa:	e002      	b.n	8004ab2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ab0:	bf00      	nop
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	ffff0000 	.word	0xffff0000
 8004ac0:	080041c7 	.word	0x080041c7
 8004ac4:	08004b5f 	.word	0x08004b5f

08004ac8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b60      	cmp	r3, #96	@ 0x60
 8004ada:	d10e      	bne.n	8004afa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fb51 	bl	800419a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004af8:	e009      	b.n	8004b0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fb3c 	bl	8004186 <HAL_I2C_ErrorCallback>
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d103      	bne.n	8004b34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d007      	beq.n	8004b52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	619a      	str	r2, [r3, #24]
  }
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	2200      	movs	r2, #0
 8004b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b88:	2200      	movs	r2, #0
 8004b8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7ff ff9b 	bl	8004ac8 <I2C_TreatErrorCallback>
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004baa:	e03b      	b.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	6839      	ldr	r1, [r7, #0]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f8d5 	bl	8004d60 <I2C_IsErrorOccurred>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e041      	b.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d02d      	beq.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc8:	f7fd ff44 	bl	8002a54 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d302      	bcc.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x44>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d122      	bne.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d113      	bne.n	8004c24 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e00f      	b.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d0b4      	beq.n	8004bac <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c58:	e033      	b.n	8004cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f87e 	bl	8004d60 <I2C_IsErrorOccurred>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e031      	b.n	8004cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d025      	beq.n	8004cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fd feed 	bl	8002a54 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11a      	bne.n	8004cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d013      	beq.n	8004cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9e:	f043 0220 	orr.w	r2, r3, #32
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e007      	b.n	8004cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d1c4      	bne.n	8004c5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce6:	e02f      	b.n	8004d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f837 	bl	8004d60 <I2C_IsErrorOccurred>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e02d      	b.n	8004d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfc:	f7fd feaa 	bl	8002a54 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11a      	bne.n	8004d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d013      	beq.n	8004d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e007      	b.n	8004d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d1c8      	bne.n	8004ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d068      	beq.n	8004e5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2210      	movs	r2, #16
 8004d92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d94:	e049      	b.n	8004e2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d045      	beq.n	8004e2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fd fe59 	bl	8002a54 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <I2C_IsErrorOccurred+0x54>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d13a      	bne.n	8004e2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd6:	d121      	bne.n	8004e1c <I2C_IsErrorOccurred+0xbc>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dde:	d01d      	beq.n	8004e1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d01a      	beq.n	8004e1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004df4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004df6:	f7fd fe2d 	bl	8002a54 <HAL_GetTick>
 8004dfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dfc:	e00e      	b.n	8004e1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004dfe:	f7fd fe29 	bl	8002a54 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b19      	cmp	r3, #25
 8004e0a:	d907      	bls.n	8004e1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	f043 0320 	orr.w	r3, r3, #32
 8004e12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e1a:	e006      	b.n	8004e2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d1e9      	bne.n	8004dfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d003      	beq.n	8004e40 <I2C_IsErrorOccurred+0xe0>
 8004e38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0aa      	beq.n	8004d96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	f043 0304 	orr.w	r3, r3, #4
 8004e56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	f043 0308 	orr.w	r3, r3, #8
 8004e98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00b      	beq.n	8004ecc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	f043 0302 	orr.w	r3, r3, #2
 8004eba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ec4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01c      	beq.n	8004f0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff fe1e 	bl	8004b16 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6859      	ldr	r1, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8004f1c <I2C_IsErrorOccurred+0x1bc>)
 8004ee6:	400b      	ands	r3, r1
 8004ee8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3728      	adds	r7, #40	@ 0x28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	fe00e800 	.word	0xfe00e800

08004f20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	817b      	strh	r3, [r7, #10]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f32:	897b      	ldrh	r3, [r7, #10]
 8004f34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f38:	7a7b      	ldrb	r3, [r7, #9]
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	0d5b      	lsrs	r3, r3, #21
 8004f5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f5e:	4b08      	ldr	r3, [pc, #32]	@ (8004f80 <I2C_TransferConfig+0x60>)
 8004f60:	430b      	orrs	r3, r1
 8004f62:	43db      	mvns	r3, r3
 8004f64:	ea02 0103 	and.w	r1, r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	03ff63ff 	.word	0x03ff63ff

08004f84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00f      	beq.n	8004fbe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004fa4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004fb2:	2b28      	cmp	r3, #40	@ 0x28
 8004fb4:	d003      	beq.n	8004fbe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004fbc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004fbe:	887b      	ldrh	r3, [r7, #2]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00f      	beq.n	8004fe8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004fce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004fdc:	2b28      	cmp	r3, #40	@ 0x28
 8004fde:	d003      	beq.n	8004fe8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004fe6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004fe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	da03      	bge.n	8004ff8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ff8:	887b      	ldrh	r3, [r7, #2]
 8004ffa:	2b10      	cmp	r3, #16
 8004ffc:	d103      	bne.n	8005006 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005004:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005006:	887b      	ldrh	r3, [r7, #2]
 8005008:	2b20      	cmp	r3, #32
 800500a:	d103      	bne.n	8005014 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f043 0320 	orr.w	r3, r3, #32
 8005012:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005014:	887b      	ldrh	r3, [r7, #2]
 8005016:	2b40      	cmp	r3, #64	@ 0x40
 8005018:	d103      	bne.n	8005022 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005020:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6819      	ldr	r1, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	43da      	mvns	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	400a      	ands	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b20      	cmp	r3, #32
 8005054:	d138      	bne.n	80050c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005060:	2302      	movs	r3, #2
 8005062:	e032      	b.n	80050ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2224      	movs	r2, #36	@ 0x24
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0201 	bic.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d139      	bne.n	8005160 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e033      	b.n	8005162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2224      	movs	r2, #36	@ 0x24
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005128:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	e000      	b.n	8005162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005160:	2302      	movs	r3, #2
  }
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
	...

08005170 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01e      	beq.n	80051c0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005182:	4b13      	ldr	r3, [pc, #76]	@ (80051d0 <HAL_IPCC_Init+0x60>)
 8005184:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fd f92e 	bl	80023f4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005198:	68b8      	ldr	r0, [r7, #8]
 800519a:	f000 f85b 	bl	8005254 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f82c 	bl	8005208 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80051be:	e001      	b.n	80051c4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	58000c00 	.word	0x58000c00

080051d4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	4613      	mov	r3, r2
 80051fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e00f      	b.n	8005236 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	4a0b      	ldr	r2, [pc, #44]	@ (800524c <IPCC_SetDefaultCallbacks+0x44>)
 8005220:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3306      	adds	r3, #6
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	4a08      	ldr	r2, [pc, #32]	@ (8005250 <IPCC_SetDefaultCallbacks+0x48>)
 800522e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3301      	adds	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b05      	cmp	r3, #5
 800523a:	d9ec      	bls.n	8005216 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	080051d5 	.word	0x080051d5
 8005250:	080051ef 	.word	0x080051ef

08005254 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005268:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	223f      	movs	r2, #63	@ 0x3f
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a04      	ldr	r2, [pc, #16]	@ (8005298 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800528a:	6013      	str	r3, [r2, #0]
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	58000400 	.word	0x58000400

0800529c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80052a0:	4b04      	ldr	r3, [pc, #16]	@ (80052b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	58000400 	.word	0x58000400

080052b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ca:	d101      	bne.n	80052d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <LL_RCC_HSE_Enable>:
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ee:	6013      	str	r3, [r2, #0]
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_RCC_HSE_Disable>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80052fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800530c:	6013      	str	r3, [r2, #0]
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <LL_RCC_HSE_IsReady>:
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800531c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005326:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800532a:	d101      	bne.n	8005330 <LL_RCC_HSE_IsReady+0x18>
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <LL_RCC_HSE_IsReady+0x1a>
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <LL_RCC_HSI_Enable>:
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800534a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800534e:	6013      	str	r3, [r2, #0]
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <LL_RCC_HSI_Disable>:
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800536c:	6013      	str	r3, [r2, #0]
}
 800536e:	bf00      	nop
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <LL_RCC_HSI_IsReady>:
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538a:	d101      	bne.n	8005390 <LL_RCC_HSI_IsReady+0x18>
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <LL_RCC_HSI_IsReady+0x1a>
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <LL_RCC_HSI_SetCalibTrimming>:
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80053a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_HSI48_Enable>:
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80053de:	bf00      	nop
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <LL_RCC_HSI48_Disable>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80053ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <LL_RCC_HSI48_IsReady>:
{
 800540a:	b480      	push	{r7}
 800540c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800540e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005412:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d101      	bne.n	8005422 <LL_RCC_HSI48_IsReady+0x18>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <LL_RCC_HSI48_IsReady+0x1a>
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_RCC_LSE_Enable>:
{
 800542e:	b480      	push	{r7}
 8005430:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005446:	bf00      	nop
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <LL_RCC_LSE_Disable>:
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <LL_RCC_LSE_EnableBypass>:
{
 8005472:	b480      	push	{r7}
 8005474:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005482:	f043 0304 	orr.w	r3, r3, #4
 8005486:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800548a:	bf00      	nop
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <LL_RCC_LSE_DisableBypass>:
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054a4:	f023 0304 	bic.w	r3, r3, #4
 80054a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80054ac:	bf00      	nop
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <LL_RCC_LSE_IsReady>:
{
 80054b6:	b480      	push	{r7}
 80054b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80054ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d101      	bne.n	80054ce <LL_RCC_LSE_IsReady+0x18>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <LL_RCC_LSE_IsReady+0x1a>
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <LL_RCC_LSI1_Enable>:
{
 80054da:	b480      	push	{r7}
 80054dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80054de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80054f2:	bf00      	nop
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <LL_RCC_LSI1_Disable>:
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005508:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005514:	bf00      	nop
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <LL_RCC_LSI1_IsReady>:
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d101      	bne.n	8005536 <LL_RCC_LSI1_IsReady+0x18>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <LL_RCC_LSI1_IsReady+0x1a>
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_RCC_LSI2_Enable>:
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800554a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800554e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005552:	f043 0304 	orr.w	r3, r3, #4
 8005556:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800555a:	bf00      	nop
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <LL_RCC_LSI2_Disable>:
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800556c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005570:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <LL_RCC_LSI2_IsReady>:
{
 8005586:	b480      	push	{r7}
 8005588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800558a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800558e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b08      	cmp	r3, #8
 8005598:	d101      	bne.n	800559e <LL_RCC_LSI2_IsReady+0x18>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <LL_RCC_LSI2_IsReady+0x1a>
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_RCC_LSI2_SetTrimming>:
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <LL_RCC_MSI_Enable>:
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055e6:	f043 0301 	orr.w	r3, r3, #1
 80055ea:	6013      	str	r3, [r2, #0]
}
 80055ec:	bf00      	nop
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <LL_RCC_MSI_Disable>:
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80055fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <LL_RCC_MSI_IsReady>:
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b02      	cmp	r3, #2
 8005624:	d101      	bne.n	800562a <LL_RCC_MSI_IsReady+0x16>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <LL_RCC_MSI_IsReady+0x18>
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <LL_RCC_MSI_SetRange>:
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005648:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <LL_RCC_MSI_GetRange>:
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800566e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2bb0      	cmp	r3, #176	@ 0xb0
 8005674:	d901      	bls.n	800567a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005676:	23b0      	movs	r3, #176	@ 0xb0
 8005678:	607b      	str	r3, [r7, #4]
  return msiRange;
 800567a:	687b      	ldr	r3, [r7, #4]
}
 800567c:	4618      	mov	r0, r3
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056a2:	4313      	orrs	r3, r2
 80056a4:	604b      	str	r3, [r1, #4]
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <LL_RCC_SetSysClkSource>:
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80056ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 0203 	bic.w	r2, r3, #3
 80056c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <LL_RCC_GetSysClkSource>:
{
 80056da:	b480      	push	{r7}
 80056dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80056de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 030c 	and.w	r3, r3, #12
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <LL_RCC_SetAHBPrescaler>:
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80056fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005704:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4313      	orrs	r3, r2
 800570c:	608b      	str	r3, [r1, #8]
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <LL_C2_RCC_SetAHBPrescaler>:
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005726:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800572a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800572e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <LL_RCC_SetAHB4Prescaler>:
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005752:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005756:	f023 020f 	bic.w	r2, r3, #15
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <LL_RCC_SetAPB1Prescaler>:
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800577c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005786:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4313      	orrs	r3, r2
 800578e:	608b      	str	r3, [r1, #8]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <LL_RCC_SetAPB2Prescaler>:
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80057a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	608b      	str	r3, [r1, #8]
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <LL_RCC_GetAHBPrescaler>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80057c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <LL_RCC_GetAHB4Prescaler>:
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80057e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <LL_RCC_GetAPB1Prescaler>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005806:	4618      	mov	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_RCC_GetAPB2Prescaler>:
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800581e:	4618      	mov	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800583a:	6013      	str	r3, [r2, #0]
}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005846:	b480      	push	{r7}
 8005848:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800584a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005854:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005858:	6013      	str	r3, [r2, #0]
}
 800585a:	bf00      	nop
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005876:	d101      	bne.n	800587c <LL_RCC_PLL_IsReady+0x18>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <LL_RCC_PLL_IsReady+0x1a>
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800588c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005898:	4618      	mov	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80058a2:	b480      	push	{r7}
 80058a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80058a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80058ba:	b480      	push	{r7}
 80058bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80058be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80058d2:	b480      	push	{r7}
 80058d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80058d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0303 	and.w	r3, r3, #3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80058ea:	b480      	push	{r7}
 80058ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80058ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058fc:	d101      	bne.n	8005902 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800590e:	b480      	push	{r7}
 8005910:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005916:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800591a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800591e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005922:	d101      	bne.n	8005928 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800593c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005948:	d101      	bne.n	800594e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800595a:	b480      	push	{r7}
 800595c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800595e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005968:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800596c:	d101      	bne.n	8005972 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800597e:	b480      	push	{r7}
 8005980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800598c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005990:	d101      	bne.n	8005996 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a4:	b590      	push	{r4, r7, lr}
 80059a6:	b08d      	sub	sp, #52	@ 0x34
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e363      	b.n	800607e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 808d 	beq.w	8005ade <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059c4:	f7ff fe89 	bl	80056da <LL_RCC_GetSysClkSource>
 80059c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059ca:	f7ff ff82 	bl	80058d2 <LL_RCC_PLL_GetMainSource>
 80059ce:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <HAL_RCC_OscConfig+0x3e>
 80059d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d8:	2b0c      	cmp	r3, #12
 80059da:	d147      	bne.n	8005a6c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d144      	bne.n	8005a6c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e347      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80059f2:	f7ff fe34 	bl	800565e <LL_RCC_MSI_GetRange>
 80059f6:	4603      	mov	r3, r0
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d914      	bls.n	8005a26 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fd2f 	bl	8006464 <RCC_SetFlashLatencyFromMSIRange>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e336      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff fe0e 	bl	8005636 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fe32 	bl	8005688 <LL_RCC_MSI_SetCalibTrimming>
 8005a24:	e013      	b.n	8005a4e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fe03 	bl	8005636 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fe27 	bl	8005688 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fd10 	bl	8006464 <RCC_SetFlashLatencyFromMSIRange>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e317      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005a4e:	f000 fcc9 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 8005a52:	4603      	mov	r3, r0
 8005a54:	4aa4      	ldr	r2, [pc, #656]	@ (8005ce8 <HAL_RCC_OscConfig+0x344>)
 8005a56:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a58:	4ba4      	ldr	r3, [pc, #656]	@ (8005cec <HAL_RCC_OscConfig+0x348>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fc ffab 	bl	80029b8 <HAL_InitTick>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d039      	beq.n	8005adc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e308      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01e      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a74:	f7ff fdb0 	bl	80055d8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a78:	f7fc ffec 	bl	8002a54 <HAL_GetTick>
 8005a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a80:	f7fc ffe8 	bl	8002a54 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e2f5      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005a92:	f7ff fdbf 	bl	8005614 <LL_RCC_MSI_IsReady>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f1      	beq.n	8005a80 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fdc8 	bl	8005636 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff fdec 	bl	8005688 <LL_RCC_MSI_SetCalibTrimming>
 8005ab0:	e015      	b.n	8005ade <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ab2:	f7ff fda0 	bl	80055f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ab6:	f7fc ffcd 	bl	8002a54 <HAL_GetTick>
 8005aba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005abe:	f7fc ffc9 	bl	8002a54 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e2d6      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005ad0:	f7ff fda0 	bl	8005614 <LL_RCC_MSI_IsReady>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f1      	bne.n	8005abe <HAL_RCC_OscConfig+0x11a>
 8005ada:	e000      	b.n	8005ade <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005adc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d047      	beq.n	8005b7a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aea:	f7ff fdf6 	bl	80056da <LL_RCC_GetSysClkSource>
 8005aee:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005af0:	f7ff feef 	bl	80058d2 <LL_RCC_PLL_GetMainSource>
 8005af4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d005      	beq.n	8005b08 <HAL_RCC_OscConfig+0x164>
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d108      	bne.n	8005b14 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d105      	bne.n	8005b14 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d134      	bne.n	8005b7a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e2b4      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b1c:	d102      	bne.n	8005b24 <HAL_RCC_OscConfig+0x180>
 8005b1e:	f7ff fbdd 	bl	80052dc <LL_RCC_HSE_Enable>
 8005b22:	e001      	b.n	8005b28 <HAL_RCC_OscConfig+0x184>
 8005b24:	f7ff fbe9 	bl	80052fa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d012      	beq.n	8005b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fc ff90 	bl	8002a54 <HAL_GetTick>
 8005b34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b38:	f7fc ff8c 	bl	8002a54 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b64      	cmp	r3, #100	@ 0x64
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e299      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005b4a:	f7ff fbe5 	bl	8005318 <LL_RCC_HSE_IsReady>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0f1      	beq.n	8005b38 <HAL_RCC_OscConfig+0x194>
 8005b54:	e011      	b.n	8005b7a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fc ff7d 	bl	8002a54 <HAL_GetTick>
 8005b5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b5e:	f7fc ff79 	bl	8002a54 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b64      	cmp	r3, #100	@ 0x64
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e286      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005b70:	f7ff fbd2 	bl	8005318 <LL_RCC_HSE_IsReady>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f1      	bne.n	8005b5e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d04c      	beq.n	8005c20 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b86:	f7ff fda8 	bl	80056da <LL_RCC_GetSysClkSource>
 8005b8a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b8c:	f7ff fea1 	bl	80058d2 <LL_RCC_PLL_GetMainSource>
 8005b90:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x200>
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b0c      	cmp	r3, #12
 8005b9c:	d10e      	bne.n	8005bbc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d10b      	bne.n	8005bbc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e266      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fbf1 	bl	800539c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005bba:	e031      	b.n	8005c20 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d019      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc4:	f7ff fbba 	bl	800533c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fc ff44 	bl	8002a54 <HAL_GetTick>
 8005bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd0:	f7fc ff40 	bl	8002a54 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e24d      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005be2:	f7ff fbc9 	bl	8005378 <LL_RCC_HSI_IsReady>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0f1      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff fbd3 	bl	800539c <LL_RCC_HSI_SetCalibTrimming>
 8005bf6:	e013      	b.n	8005c20 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bf8:	f7ff fbaf 	bl	800535a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fc ff2a 	bl	8002a54 <HAL_GetTick>
 8005c00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c04:	f7fc ff26 	bl	8002a54 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e233      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005c16:	f7ff fbaf 	bl	8005378 <LL_RCC_HSI_IsReady>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1f1      	bne.n	8005c04 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80a3 	beq.w	8005d80 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d076      	beq.n	8005d30 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d046      	beq.n	8005cdc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005c4e:	f7ff fc66 	bl	800551e <LL_RCC_LSI1_IsReady>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d113      	bne.n	8005c80 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005c58:	f7ff fc3f 	bl	80054da <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c5c:	f7fc fefa 	bl	8002a54 <HAL_GetTick>
 8005c60:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005c64:	f7fc fef6 	bl	8002a54 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e203      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005c76:	f7ff fc52 	bl	800551e <LL_RCC_LSI1_IsReady>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f1      	beq.n	8005c64 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005c80:	f7ff fc5f 	bl	8005542 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7fc fee6 	bl	8002a54 <HAL_GetTick>
 8005c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005c8c:	f7fc fee2 	bl	8002a54 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e1ef      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005c9e:	f7ff fc72 	bl	8005586 <LL_RCC_LSI2_IsReady>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f1      	beq.n	8005c8c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fc7c 	bl	80055aa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005cb2:	f7ff fc23 	bl	80054fc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb6:	f7fc fecd 	bl	8002a54 <HAL_GetTick>
 8005cba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005cbe:	f7fc fec9 	bl	8002a54 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e1d6      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005cd0:	f7ff fc25 	bl	800551e <LL_RCC_LSI1_IsReady>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f1      	bne.n	8005cbe <HAL_RCC_OscConfig+0x31a>
 8005cda:	e051      	b.n	8005d80 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005cdc:	f7ff fbfd 	bl	80054da <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fc feb8 	bl	8002a54 <HAL_GetTick>
 8005ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005ce6:	e00c      	b.n	8005d02 <HAL_RCC_OscConfig+0x35e>
 8005ce8:	20000008 	.word	0x20000008
 8005cec:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005cf0:	f7fc feb0 	bl	8002a54 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e1bd      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005d02:	f7ff fc0c 	bl	800551e <LL_RCC_LSI1_IsReady>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f1      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005d0c:	f7ff fc2a 	bl	8005564 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d12:	f7fc fe9f 	bl	8002a54 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e1ac      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005d24:	f7ff fc2f 	bl	8005586 <LL_RCC_LSI2_IsReady>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f1      	bne.n	8005d12 <HAL_RCC_OscConfig+0x36e>
 8005d2e:	e027      	b.n	8005d80 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005d30:	f7ff fc18 	bl	8005564 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7fc fe8e 	bl	8002a54 <HAL_GetTick>
 8005d38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d3c:	f7fc fe8a 	bl	8002a54 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e197      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005d4e:	f7ff fc1a 	bl	8005586 <LL_RCC_LSI2_IsReady>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f1      	bne.n	8005d3c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005d58:	f7ff fbd0 	bl	80054fc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5c:	f7fc fe7a 	bl	8002a54 <HAL_GetTick>
 8005d60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d64:	f7fc fe76 	bl	8002a54 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e183      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005d76:	f7ff fbd2 	bl	800551e <LL_RCC_LSI1_IsReady>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f1      	bne.n	8005d64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d05b      	beq.n	8005e44 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d8c:	4ba7      	ldr	r3, [pc, #668]	@ (800602c <HAL_RCC_OscConfig+0x688>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d114      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005d98:	f7ff fa70 	bl	800527c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9c:	f7fc fe5a 	bl	8002a54 <HAL_GetTick>
 8005da0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da4:	f7fc fe56 	bl	8002a54 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e163      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db6:	4b9d      	ldr	r3, [pc, #628]	@ (800602c <HAL_RCC_OscConfig+0x688>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d102      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x42c>
 8005dca:	f7ff fb30 	bl	800542e <LL_RCC_LSE_Enable>
 8005dce:	e00c      	b.n	8005dea <HAL_RCC_OscConfig+0x446>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b05      	cmp	r3, #5
 8005dd6:	d104      	bne.n	8005de2 <HAL_RCC_OscConfig+0x43e>
 8005dd8:	f7ff fb4b 	bl	8005472 <LL_RCC_LSE_EnableBypass>
 8005ddc:	f7ff fb27 	bl	800542e <LL_RCC_LSE_Enable>
 8005de0:	e003      	b.n	8005dea <HAL_RCC_OscConfig+0x446>
 8005de2:	f7ff fb35 	bl	8005450 <LL_RCC_LSE_Disable>
 8005de6:	f7ff fb55 	bl	8005494 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d014      	beq.n	8005e1c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df2:	f7fc fe2f 	bl	8002a54 <HAL_GetTick>
 8005df6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005df8:	e00a      	b.n	8005e10 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfa:	f7fc fe2b 	bl	8002a54 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e136      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e10:	f7ff fb51 	bl	80054b6 <LL_RCC_LSE_IsReady>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0ef      	beq.n	8005dfa <HAL_RCC_OscConfig+0x456>
 8005e1a:	e013      	b.n	8005e44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1c:	f7fc fe1a 	bl	8002a54 <HAL_GetTick>
 8005e20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e22:	e00a      	b.n	8005e3a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e24:	f7fc fe16 	bl	8002a54 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e121      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e3a:	f7ff fb3c 	bl	80054b6 <LL_RCC_LSE_IsReady>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1ef      	bne.n	8005e24 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d02c      	beq.n	8005eaa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d014      	beq.n	8005e82 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e58:	f7ff fab5 	bl	80053c6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7fc fdfa 	bl	8002a54 <HAL_GetTick>
 8005e60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e64:	f7fc fdf6 	bl	8002a54 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e103      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005e76:	f7ff fac8 	bl	800540a <LL_RCC_HSI48_IsReady>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f1      	beq.n	8005e64 <HAL_RCC_OscConfig+0x4c0>
 8005e80:	e013      	b.n	8005eaa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e82:	f7ff fab1 	bl	80053e8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e86:	f7fc fde5 	bl	8002a54 <HAL_GetTick>
 8005e8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e8e:	f7fc fde1 	bl	8002a54 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e0ee      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005ea0:	f7ff fab3 	bl	800540a <LL_RCC_HSI48_IsReady>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f1      	bne.n	8005e8e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80e4 	beq.w	800607c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb4:	f7ff fc11 	bl	80056da <LL_RCC_GetSysClkSource>
 8005eb8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	f040 80b4 	bne.w	8006034 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0203 	and.w	r2, r3, #3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d123      	bne.n	8005f22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d11c      	bne.n	8005f22 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d114      	bne.n	8005f22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d10d      	bne.n	8005f22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d106      	bne.n	8005f22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d05d      	beq.n	8005fde <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b0c      	cmp	r3, #12
 8005f26:	d058      	beq.n	8005fda <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e0a1      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f3a:	f7ff fc84 	bl	8005846 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f3e:	f7fc fd89 	bl	8002a54 <HAL_GetTick>
 8005f42:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f46:	f7fc fd85 	bl	8002a54 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e092      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1ef      	bne.n	8005f46 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	4b30      	ldr	r3, [pc, #192]	@ (8006030 <HAL_RCC_OscConfig+0x68c>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f78:	4311      	orrs	r1, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f7e:	0212      	lsls	r2, r2, #8
 8005f80:	4311      	orrs	r1, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f86:	4311      	orrs	r1, r2
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005f8c:	4311      	orrs	r1, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005f92:	430a      	orrs	r2, r1
 8005f94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f9c:	f7ff fc44 	bl	8005828 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fb0:	f7fc fd50 	bl	8002a54 <HAL_GetTick>
 8005fb4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fc fd4c 	bl	8002a54 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e059      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0ef      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd8:	e050      	b.n	800607c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e04f      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d147      	bne.n	800607c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005fec:	f7ff fc1c 	bl	8005828 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ffe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006000:	f7fc fd28 	bl	8002a54 <HAL_GetTick>
 8006004:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006008:	f7fc fd24 	bl	8002a54 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e031      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800601a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0ef      	beq.n	8006008 <HAL_RCC_OscConfig+0x664>
 8006028:	e028      	b.n	800607c <HAL_RCC_OscConfig+0x6d8>
 800602a:	bf00      	nop
 800602c:	58000400 	.word	0x58000400
 8006030:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	2b0c      	cmp	r3, #12
 8006038:	d01e      	beq.n	8006078 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603a:	f7ff fc04 	bl	8005846 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603e:	f7fc fd09 	bl	8002a54 <HAL_GetTick>
 8006042:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006046:	f7fc fd05 	bl	8002a54 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e012      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1ef      	bne.n	8006046 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006070:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <HAL_RCC_OscConfig+0x6e4>)
 8006072:	4013      	ands	r3, r2
 8006074:	60cb      	str	r3, [r1, #12]
 8006076:	e001      	b.n	800607c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3734      	adds	r7, #52	@ 0x34
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}
 8006086:	bf00      	nop
 8006088:	eefefffc 	.word	0xeefefffc

0800608c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e12d      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060a0:	4b98      	ldr	r3, [pc, #608]	@ (8006304 <HAL_RCC_ClockConfig+0x278>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d91b      	bls.n	80060e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ae:	4b95      	ldr	r3, [pc, #596]	@ (8006304 <HAL_RCC_ClockConfig+0x278>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f023 0207 	bic.w	r2, r3, #7
 80060b6:	4993      	ldr	r1, [pc, #588]	@ (8006304 <HAL_RCC_ClockConfig+0x278>)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060be:	f7fc fcc9 	bl	8002a54 <HAL_GetTick>
 80060c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060c6:	f7fc fcc5 	bl	8002a54 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e111      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d8:	4b8a      	ldr	r3, [pc, #552]	@ (8006304 <HAL_RCC_ClockConfig+0x278>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d1ef      	bne.n	80060c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fafb 	bl	80056f2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060fc:	f7fc fcaa 	bl	8002a54 <HAL_GetTick>
 8006100:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006102:	e008      	b.n	8006116 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006104:	f7fc fca6 	bl	8002a54 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e0f2      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006116:	f7ff fbe8 	bl	80058ea <LL_RCC_IsActiveFlag_HPRE>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0f1      	beq.n	8006104 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0320 	and.w	r3, r3, #32
 8006128:	2b00      	cmp	r3, #0
 800612a:	d016      	beq.n	800615a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff faf2 	bl	800571a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006136:	f7fc fc8d 	bl	8002a54 <HAL_GetTick>
 800613a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800613c:	e008      	b.n	8006150 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800613e:	f7fc fc89 	bl	8002a54 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e0d5      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006150:	f7ff fbdd 	bl	800590e <LL_RCC_IsActiveFlag_C2HPRE>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f1      	beq.n	800613e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff faeb 	bl	8005746 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006170:	f7fc fc70 	bl	8002a54 <HAL_GetTick>
 8006174:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006178:	f7fc fc6c 	bl	8002a54 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e0b8      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800618a:	f7ff fbd3 	bl	8005934 <LL_RCC_IsActiveFlag_SHDHPRE>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f1      	beq.n	8006178 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d016      	beq.n	80061ce <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fae5 	bl	8005774 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061aa:	f7fc fc53 	bl	8002a54 <HAL_GetTick>
 80061ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061b2:	f7fc fc4f 	bl	8002a54 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e09b      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061c4:	f7ff fbc9 	bl	800595a <LL_RCC_IsActiveFlag_PPRE1>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f1      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d017      	beq.n	800620a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fadb 	bl	800579c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061e6:	f7fc fc35 	bl	8002a54 <HAL_GetTick>
 80061ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061ee:	f7fc fc31 	bl	8002a54 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e07d      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006200:	f7ff fbbd 	bl	800597e <LL_RCC_IsActiveFlag_PPRE2>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f1      	beq.n	80061ee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d043      	beq.n	800629e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d106      	bne.n	800622c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800621e:	f7ff f87b 	bl	8005318 <LL_RCC_HSE_IsReady>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d11e      	bne.n	8006266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e067      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b03      	cmp	r3, #3
 8006232:	d106      	bne.n	8006242 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006234:	f7ff fb16 	bl	8005864 <LL_RCC_PLL_IsReady>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d113      	bne.n	8006266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e05c      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800624a:	f7ff f9e3 	bl	8005614 <LL_RCC_MSI_IsReady>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d108      	bne.n	8006266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e051      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006258:	f7ff f88e 	bl	8005378 <LL_RCC_HSI_IsReady>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e04a      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fa21 	bl	80056b2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006270:	f7fc fbf0 	bl	8002a54 <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	e00a      	b.n	800628e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006278:	f7fc fbec 	bl	8002a54 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e036      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628e:	f7ff fa24 	bl	80056da <LL_RCC_GetSysClkSource>
 8006292:	4602      	mov	r2, r0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	429a      	cmp	r2, r3
 800629c:	d1ec      	bne.n	8006278 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800629e:	4b19      	ldr	r3, [pc, #100]	@ (8006304 <HAL_RCC_ClockConfig+0x278>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d21b      	bcs.n	80062e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ac:	4b15      	ldr	r3, [pc, #84]	@ (8006304 <HAL_RCC_ClockConfig+0x278>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f023 0207 	bic.w	r2, r3, #7
 80062b4:	4913      	ldr	r1, [pc, #76]	@ (8006304 <HAL_RCC_ClockConfig+0x278>)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062bc:	f7fc fbca 	bl	8002a54 <HAL_GetTick>
 80062c0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062c4:	f7fc fbc6 	bl	8002a54 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e012      	b.n	80062fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006304 <HAL_RCC_ClockConfig+0x278>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d1ef      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80062e4:	f000 f87e 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 80062e8:	4603      	mov	r3, r0
 80062ea:	4a07      	ldr	r2, [pc, #28]	@ (8006308 <HAL_RCC_ClockConfig+0x27c>)
 80062ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80062ee:	f7fc fbbd 	bl	8002a6c <HAL_GetTickPrio>
 80062f2:	4603      	mov	r3, r0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fc fb5f 	bl	80029b8 <HAL_InitTick>
 80062fa:	4603      	mov	r3, r0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	58004000 	.word	0x58004000
 8006308:	20000008 	.word	0x20000008

0800630c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006312:	f7ff f9e2 	bl	80056da <LL_RCC_GetSysClkSource>
 8006316:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800631e:	f7ff f99e 	bl	800565e <LL_RCC_MSI_GetRange>
 8006322:	4603      	mov	r3, r0
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	4a2b      	ldr	r2, [pc, #172]	@ (80063d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800632c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e04b      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b04      	cmp	r3, #4
 8006338:	d102      	bne.n	8006340 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800633a:	4b28      	ldr	r3, [pc, #160]	@ (80063dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e045      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b08      	cmp	r3, #8
 8006344:	d10a      	bne.n	800635c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006346:	f7fe ffb7 	bl	80052b8 <LL_RCC_HSE_IsEnabledDiv2>
 800634a:	4603      	mov	r3, r0
 800634c:	2b01      	cmp	r3, #1
 800634e:	d102      	bne.n	8006356 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006350:	4b22      	ldr	r3, [pc, #136]	@ (80063dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e03a      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006356:	4b22      	ldr	r3, [pc, #136]	@ (80063e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e037      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800635c:	f7ff fab9 	bl	80058d2 <LL_RCC_PLL_GetMainSource>
 8006360:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d003      	beq.n	8006370 <HAL_RCC_GetSysClockFreq+0x64>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b03      	cmp	r3, #3
 800636c:	d003      	beq.n	8006376 <HAL_RCC_GetSysClockFreq+0x6a>
 800636e:	e00d      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006370:	4b1a      	ldr	r3, [pc, #104]	@ (80063dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006372:	60bb      	str	r3, [r7, #8]
        break;
 8006374:	e015      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006376:	f7fe ff9f 	bl	80052b8 <LL_RCC_HSE_IsEnabledDiv2>
 800637a:	4603      	mov	r3, r0
 800637c:	2b01      	cmp	r3, #1
 800637e:	d102      	bne.n	8006386 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006380:	4b16      	ldr	r3, [pc, #88]	@ (80063dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006382:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006384:	e00d      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006386:	4b16      	ldr	r3, [pc, #88]	@ (80063e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006388:	60bb      	str	r3, [r7, #8]
        break;
 800638a:	e00a      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800638c:	f7ff f967 	bl	800565e <LL_RCC_MSI_GetRange>
 8006390:	4603      	mov	r3, r0
 8006392:	091b      	lsrs	r3, r3, #4
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	4a0f      	ldr	r2, [pc, #60]	@ (80063d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800639a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800639e:	60bb      	str	r3, [r7, #8]
        break;
 80063a0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80063a2:	f7ff fa71 	bl	8005888 <LL_RCC_PLL_GetN>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	fb03 f402 	mul.w	r4, r3, r2
 80063ae:	f7ff fa84 	bl	80058ba <LL_RCC_PLL_GetDivider>
 80063b2:	4603      	mov	r3, r0
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	3301      	adds	r3, #1
 80063b8:	fbb4 f4f3 	udiv	r4, r4, r3
 80063bc:	f7ff fa71 	bl	80058a2 <LL_RCC_PLL_GetR>
 80063c0:	4603      	mov	r3, r0
 80063c2:	0f5b      	lsrs	r3, r3, #29
 80063c4:	3301      	adds	r3, #1
 80063c6:	fbb4 f3f3 	udiv	r3, r4, r3
 80063ca:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}
 80063d6:	bf00      	nop
 80063d8:	0800ddac 	.word	0x0800ddac
 80063dc:	00f42400 	.word	0x00f42400
 80063e0:	01e84800 	.word	0x01e84800

080063e4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063e4:	b598      	push	{r3, r4, r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80063e8:	f7ff ff90 	bl	800630c <HAL_RCC_GetSysClockFreq>
 80063ec:	4604      	mov	r4, r0
 80063ee:	f7ff f9e9 	bl	80057c4 <LL_RCC_GetAHBPrescaler>
 80063f2:	4603      	mov	r3, r0
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	4a03      	ldr	r2, [pc, #12]	@ (8006408 <HAL_RCC_GetHCLKFreq+0x24>)
 80063fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006400:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006404:	4618      	mov	r0, r3
 8006406:	bd98      	pop	{r3, r4, r7, pc}
 8006408:	0800dd4c 	.word	0x0800dd4c

0800640c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800640c:	b598      	push	{r3, r4, r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006410:	f7ff ffe8 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 8006414:	4604      	mov	r4, r0
 8006416:	f7ff f9ef 	bl	80057f8 <LL_RCC_GetAPB1Prescaler>
 800641a:	4603      	mov	r3, r0
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	4a04      	ldr	r2, [pc, #16]	@ (8006434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006430:	4618      	mov	r0, r3
 8006432:	bd98      	pop	{r3, r4, r7, pc}
 8006434:	0800dd8c 	.word	0x0800dd8c

08006438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006438:	b598      	push	{r3, r4, r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800643c:	f7ff ffd2 	bl	80063e4 <HAL_RCC_GetHCLKFreq>
 8006440:	4604      	mov	r4, r0
 8006442:	f7ff f9e5 	bl	8005810 <LL_RCC_GetAPB2Prescaler>
 8006446:	4603      	mov	r3, r0
 8006448:	0adb      	lsrs	r3, r3, #11
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	4a04      	ldr	r2, [pc, #16]	@ (8006460 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	fa24 f303 	lsr.w	r3, r4, r3
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd98      	pop	{r3, r4, r7, pc}
 8006460:	0800dd8c 	.word	0x0800dd8c

08006464 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2bb0      	cmp	r3, #176	@ 0xb0
 8006470:	d903      	bls.n	800647a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006472:	4b15      	ldr	r3, [pc, #84]	@ (80064c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e007      	b.n	800648a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	4a11      	ldr	r2, [pc, #68]	@ (80064c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006488:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800648a:	f7ff f9a7 	bl	80057dc <LL_RCC_GetAHB4Prescaler>
 800648e:	4603      	mov	r3, r0
 8006490:	091b      	lsrs	r3, r3, #4
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	4a0d      	ldr	r2, [pc, #52]	@ (80064cc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4a0a      	ldr	r2, [pc, #40]	@ (80064d0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	0c9c      	lsrs	r4, r3, #18
 80064ae:	f7fe fef5 	bl	800529c <HAL_PWREx_GetVoltageRange>
 80064b2:	4603      	mov	r3, r0
 80064b4:	4619      	mov	r1, r3
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 f80c 	bl	80064d4 <RCC_SetFlashLatency>
 80064bc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd90      	pop	{r4, r7, pc}
 80064c6:	bf00      	nop
 80064c8:	0800ddac 	.word	0x0800ddac
 80064cc:	0800dd4c 	.word	0x0800dd4c
 80064d0:	431bde83 	.word	0x431bde83

080064d4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80064d4:	b590      	push	{r4, r7, lr}
 80064d6:	b093      	sub	sp, #76	@ 0x4c
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80064de:	4b37      	ldr	r3, [pc, #220]	@ (80065bc <RCC_SetFlashLatency+0xe8>)
 80064e0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80064e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80064ea:	4a35      	ldr	r2, [pc, #212]	@ (80065c0 <RCC_SetFlashLatency+0xec>)
 80064ec:	f107 031c 	add.w	r3, r7, #28
 80064f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80064f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80064f6:	4b33      	ldr	r3, [pc, #204]	@ (80065c4 <RCC_SetFlashLatency+0xf0>)
 80064f8:	f107 040c 	add.w	r4, r7, #12
 80064fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006502:	2300      	movs	r3, #0
 8006504:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800650c:	d11a      	bne.n	8006544 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800650e:	2300      	movs	r3, #0
 8006510:	643b      	str	r3, [r7, #64]	@ 0x40
 8006512:	e013      	b.n	800653c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	3348      	adds	r3, #72	@ 0x48
 800651a:	443b      	add	r3, r7
 800651c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	429a      	cmp	r2, r3
 8006524:	d807      	bhi.n	8006536 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	3348      	adds	r3, #72	@ 0x48
 800652c:	443b      	add	r3, r7
 800652e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006532:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006534:	e020      	b.n	8006578 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006538:	3301      	adds	r3, #1
 800653a:	643b      	str	r3, [r7, #64]	@ 0x40
 800653c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800653e:	2b03      	cmp	r3, #3
 8006540:	d9e8      	bls.n	8006514 <RCC_SetFlashLatency+0x40>
 8006542:	e019      	b.n	8006578 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006544:	2300      	movs	r3, #0
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006548:	e013      	b.n	8006572 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800654a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	3348      	adds	r3, #72	@ 0x48
 8006550:	443b      	add	r3, r7
 8006552:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d807      	bhi.n	800656c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800655c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	3348      	adds	r3, #72	@ 0x48
 8006562:	443b      	add	r3, r7
 8006564:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006568:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800656a:	e005      	b.n	8006578 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800656c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800656e:	3301      	adds	r3, #1
 8006570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006574:	2b02      	cmp	r3, #2
 8006576:	d9e8      	bls.n	800654a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006578:	4b13      	ldr	r3, [pc, #76]	@ (80065c8 <RCC_SetFlashLatency+0xf4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 0207 	bic.w	r2, r3, #7
 8006580:	4911      	ldr	r1, [pc, #68]	@ (80065c8 <RCC_SetFlashLatency+0xf4>)
 8006582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006584:	4313      	orrs	r3, r2
 8006586:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006588:	f7fc fa64 	bl	8002a54 <HAL_GetTick>
 800658c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800658e:	e008      	b.n	80065a2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006590:	f7fc fa60 	bl	8002a54 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e007      	b.n	80065b2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80065a2:	4b09      	ldr	r3, [pc, #36]	@ (80065c8 <RCC_SetFlashLatency+0xf4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d1ef      	bne.n	8006590 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	374c      	adds	r7, #76	@ 0x4c
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd90      	pop	{r4, r7, pc}
 80065ba:	bf00      	nop
 80065bc:	0800dba8 	.word	0x0800dba8
 80065c0:	0800dbb8 	.word	0x0800dbb8
 80065c4:	0800dbc4 	.word	0x0800dbc4
 80065c8:	58004000 	.word	0x58004000

080065cc <LL_RCC_LSE_IsEnabled>:
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80065d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <LL_RCC_LSE_IsEnabled+0x18>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <LL_RCC_LSE_IsEnabled+0x1a>
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <LL_RCC_LSE_IsReady>:
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80065f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b02      	cmp	r3, #2
 8006602:	d101      	bne.n	8006608 <LL_RCC_LSE_IsReady+0x18>
 8006604:	2301      	movs	r3, #1
 8006606:	e000      	b.n	800660a <LL_RCC_LSE_IsReady+0x1a>
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <LL_RCC_SetRFWKPClockSource>:
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800661c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006624:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <LL_RCC_SetSMPSClockSource>:
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800664c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664e:	f023 0203 	bic.w	r2, r3, #3
 8006652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4313      	orrs	r3, r2
 800665a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <LL_RCC_SetSMPSPrescaler>:
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800667a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4313      	orrs	r3, r2
 8006682:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <LL_RCC_SetUSARTClockSource>:
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800669c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a0:	f023 0203 	bic.w	r2, r3, #3
 80066a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <LL_RCC_SetLPUARTClockSource>:
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80066c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <LL_RCC_SetI2CClockSource>:
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80066f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006700:	43db      	mvns	r3, r3
 8006702:	401a      	ands	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800670c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <LL_RCC_SetLPTIMClockSource>:
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800672a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800672e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	0c1b      	lsrs	r3, r3, #16
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	43db      	mvns	r3, r3
 800673a:	401a      	ands	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	041b      	lsls	r3, r3, #16
 8006740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <LL_RCC_SetSAIClockSource>:
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800675e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006766:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800676a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <LL_RCC_SetRNGClockSource>:
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800678a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006792:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <LL_RCC_SetCLK48ClockSource>:
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80067b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <LL_RCC_SetUSBClockSource>:
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff ffe3 	bl	80067ae <LL_RCC_SetCLK48ClockSource>
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <LL_RCC_SetADCClockSource>:
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80067f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006800:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006804:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <LL_RCC_SetRTCClockSource>:
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006830:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <LL_RCC_GetRTCClockSource>:
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800684c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006858:	4618      	mov	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <LL_RCC_ForceBackupDomainReset>:
{
 8006862:	b480      	push	{r7}
 8006864:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006876:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800687a:	bf00      	nop
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800688c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006890:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006894:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800689c:	bf00      	nop
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <LL_RCC_PLLSAI1_Enable>:
{
 80068a6:	b480      	push	{r7}
 80068a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80068aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068b8:	6013      	str	r3, [r2, #0]
}
 80068ba:	bf00      	nop
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <LL_RCC_PLLSAI1_Disable>:
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80068c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068d6:	6013      	str	r3, [r2, #0]
}
 80068d8:	bf00      	nop
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <LL_RCC_PLLSAI1_IsReady>:
{
 80068e2:	b480      	push	{r7}
 80068e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80068e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068f4:	d101      	bne.n	80068fa <LL_RCC_PLLSAI1_IsReady+0x18>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b088      	sub	sp, #32
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800690e:	2300      	movs	r3, #0
 8006910:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006912:	2300      	movs	r3, #0
 8006914:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d034      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006926:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800692a:	d021      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800692c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006930:	d81b      	bhi.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006932:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006936:	d01d      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006938:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800693c:	d815      	bhi.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006946:	d110      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006956:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006958:	e00d      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3304      	adds	r3, #4
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f947 	bl	8006bf2 <RCCEx_PLLSAI1_ConfigNP>
 8006964:	4603      	mov	r3, r0
 8006966:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006968:	e005      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	77fb      	strb	r3, [r7, #31]
        break;
 800696e:	e002      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006970:	bf00      	nop
 8006972:	e000      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006976:	7ffb      	ldrb	r3, [r7, #31]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff fee8 	bl	8006756 <LL_RCC_SetSAIClockSource>
 8006986:	e001      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006988:	7ffb      	ldrb	r3, [r7, #31]
 800698a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006994:	2b00      	cmp	r3, #0
 8006996:	d046      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006998:	f7ff ff56 	bl	8006848 <LL_RCC_GetRTCClockSource>
 800699c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d03c      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80069a8:	f7fe fc68 	bl	800527c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff ff30 	bl	800681c <LL_RCC_SetRTCClockSource>
 80069bc:	e02e      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80069be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80069c8:	f7ff ff4b 	bl	8006862 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80069cc:	f7ff ff5a 	bl	8006884 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80069de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80069e8:	f7ff fdf0 	bl	80065cc <LL_RCC_LSE_IsEnabled>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d114      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069f2:	f7fc f82f 	bl	8002a54 <HAL_GetTick>
 80069f6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80069f8:	e00b      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fa:	f7fc f82b 	bl	8002a54 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d902      	bls.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	77fb      	strb	r3, [r7, #31]
              break;
 8006a10:	e004      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006a12:	f7ff fded 	bl	80065f0 <LL_RCC_LSE_IsReady>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d1ee      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006a1c:	7ffb      	ldrb	r3, [r7, #31]
 8006a1e:	77bb      	strb	r3, [r7, #30]
 8006a20:	e001      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a22:	7ffb      	ldrb	r3, [r7, #31]
 8006a24:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff fe2a 	bl	8006690 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fe35 	bl	80066bc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fe5d 	bl	8006722 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d004      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff fe52 	bl	8006722 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fe2a 	bl	80066e8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d004      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff fe1f 	bl	80066e8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d022      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff fe8d 	bl	80067da <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ac8:	d107      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ad4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ad8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ade:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ae2:	d10b      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 f8dd 	bl	8006ca8 <RCCEx_PLLSAI1_ConfigNQ>
 8006aee:	4603      	mov	r3, r0
 8006af0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006af2:	7ffb      	ldrb	r3, [r7, #31]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006af8:	7ffb      	ldrb	r3, [r7, #31]
 8006afa:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d02b      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b10:	d008      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b1a:	d003      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fe2a 	bl	8006782 <LL_RCC_SetRNGClockSource>
 8006b2e:	e00a      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	f7ff fe21 	bl	8006782 <LL_RCC_SetRNGClockSource>
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7ff fe34 	bl	80067ae <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d022      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff fe3d 	bl	80067f0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b7e:	d107      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b8e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b98:	d10b      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f8dd 	bl	8006d5e <RCCEx_PLLSAI1_ConfigNR>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006ba8:	7ffb      	ldrb	r3, [r7, #31]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006bae:	7ffb      	ldrb	r3, [r7, #31]
 8006bb0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d004      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fd26 	bl	8006614 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d009      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fd45 	bl	8006668 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fd2c 	bl	8006640 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006be8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006bfe:	f7ff fe61 	bl	80068c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c02:	f7fb ff27 	bl	8002a54 <HAL_GetTick>
 8006c06:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c08:	e009      	b.n	8006c1e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c0a:	f7fb ff23 	bl	8002a54 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d902      	bls.n	8006c1e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1c:	e004      	b.n	8006c28 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c1e:	f7ff fe60 	bl	80068e2 <LL_RCC_PLLSAI1_IsReady>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1f0      	bne.n	8006c0a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d137      	bne.n	8006c9e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006c2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c42:	4313      	orrs	r3, r2
 8006c44:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006c5c:	f7ff fe23 	bl	80068a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c60:	f7fb fef8 	bl	8002a54 <HAL_GetTick>
 8006c64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c66:	e009      	b.n	8006c7c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c68:	f7fb fef4 	bl	8002a54 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d902      	bls.n	8006c7c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	73fb      	strb	r3, [r7, #15]
        break;
 8006c7a:	e004      	b.n	8006c86 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c7c:	f7ff fe31 	bl	80068e2 <LL_RCC_PLLSAI1_IsReady>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d1f0      	bne.n	8006c68 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d108      	bne.n	8006c9e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006cb4:	f7ff fe06 	bl	80068c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cb8:	f7fb fecc 	bl	8002a54 <HAL_GetTick>
 8006cbc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006cbe:	e009      	b.n	8006cd4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cc0:	f7fb fec8 	bl	8002a54 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d902      	bls.n	8006cd4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd2:	e004      	b.n	8006cde <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006cd4:	f7ff fe05 	bl	80068e2 <LL_RCC_PLLSAI1_IsReady>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d137      	bne.n	8006d54 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006d12:	f7ff fdc8 	bl	80068a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d16:	f7fb fe9d 	bl	8002a54 <HAL_GetTick>
 8006d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d1c:	e009      	b.n	8006d32 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d1e:	f7fb fe99 	bl	8002a54 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d902      	bls.n	8006d32 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	73fb      	strb	r3, [r7, #15]
        break;
 8006d30:	e004      	b.n	8006d3c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d32:	f7ff fdd6 	bl	80068e2 <LL_RCC_PLLSAI1_IsReady>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d1f0      	bne.n	8006d1e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d108      	bne.n	8006d54 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d50:	4313      	orrs	r3, r2
 8006d52:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006d6a:	f7ff fdab 	bl	80068c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d6e:	f7fb fe71 	bl	8002a54 <HAL_GetTick>
 8006d72:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006d74:	e009      	b.n	8006d8a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d76:	f7fb fe6d 	bl	8002a54 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d902      	bls.n	8006d8a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	73fb      	strb	r3, [r7, #15]
      break;
 8006d88:	e004      	b.n	8006d94 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006d8a:	f7ff fdaa 	bl	80068e2 <LL_RCC_PLLSAI1_IsReady>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1f0      	bne.n	8006d76 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d137      	bne.n	8006e0a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dae:	4313      	orrs	r3, r2
 8006db0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006dc8:	f7ff fd6d 	bl	80068a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dcc:	f7fb fe42 	bl	8002a54 <HAL_GetTick>
 8006dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006dd2:	e009      	b.n	8006de8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006dd4:	f7fb fe3e 	bl	8002a54 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d902      	bls.n	8006de8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	73fb      	strb	r3, [r7, #15]
        break;
 8006de6:	e004      	b.n	8006df2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006de8:	f7ff fd7b 	bl	80068e2 <LL_RCC_PLLSAI1_IsReady>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d1f0      	bne.n	8006dd4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d108      	bne.n	8006e0a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e06:	4313      	orrs	r3, r2
 8006e08:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e09f      	b.n	8006f66 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fb fafe 	bl	800243c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006e48:	4b49      	ldr	r3, [pc, #292]	@ (8006f70 <HAL_RTC_Init+0x15c>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b10      	cmp	r3, #16
 8006e52:	d07e      	beq.n	8006f52 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	22ca      	movs	r2, #202	@ 0xca
 8006e5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2253      	movs	r2, #83	@ 0x53
 8006e62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f8ab 	bl	8006fc0 <RTC_EnterInitMode>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	22ff      	movs	r2, #255	@ 0xff
 8006e76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
 8006e84:	e067      	b.n	8006f56 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e98:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6899      	ldr	r1, [r3, #8]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	68d2      	ldr	r2, [r2, #12]
 8006ec0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6919      	ldr	r1, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	041a      	lsls	r2, r3, #16
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ee4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0203 	bic.w	r2, r2, #3
 8006ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d113      	bne.n	8006f44 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f829 	bl	8006f74 <HAL_RTC_WaitForSynchro>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00d      	beq.n	8006f44 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	22ff      	movs	r2, #255	@ 0xff
 8006f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2204      	movs	r2, #4
 8006f34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e010      	b.n	8006f66 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	22ff      	movs	r2, #255	@ 0xff
 8006f4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
 8006f50:	e001      	b.n	8006f56 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40002800 	.word	0x40002800

08006f74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f8a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006f8c:	f7fb fd62 	bl	8002a54 <HAL_GetTick>
 8006f90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f92:	e009      	b.n	8006fa8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f94:	f7fb fd5e 	bl	8002a54 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e007      	b.n	8006fb8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0ee      	beq.n	8006f94 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d119      	bne.n	800700a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f04f 32ff 	mov.w	r2, #4294967295
 8006fde:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006fe0:	f7fb fd38 	bl	8002a54 <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fe6:	e009      	b.n	8006ffc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006fe8:	f7fb fd34 	bl	8002a54 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ff6:	d901      	bls.n	8006ffc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e007      	b.n	800700c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0ee      	beq.n	8006fe8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800702a:	2302      	movs	r3, #2
 800702c:	e0a8      	b.n	8007180 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	22ca      	movs	r2, #202	@ 0xca
 8007044:	625a      	str	r2, [r3, #36]	@ 0x24
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2253      	movs	r2, #83	@ 0x53
 800704c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007058:	2b00      	cmp	r3, #0
 800705a:	d020      	beq.n	800709e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800705c:	f7fb fcfa 	bl	8002a54 <HAL_GetTick>
 8007060:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007062:	e015      	b.n	8007090 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007064:	f7fb fcf6 	bl	8002a54 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007072:	d90d      	bls.n	8007090 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	22ff      	movs	r2, #255	@ 0xff
 800707a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2203      	movs	r2, #3
 8007080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e077      	b.n	8007180 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1e2      	bne.n	8007064 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ac:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80070be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80070c0:	f7fb fcc8 	bl	8002a54 <HAL_GetTick>
 80070c4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80070c6:	e015      	b.n	80070f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070c8:	f7fb fcc4 	bl	8002a54 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070d6:	d90d      	bls.n	80070f4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	22ff      	movs	r2, #255	@ 0xff
 80070de:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2203      	movs	r2, #3
 80070e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e045      	b.n	8007180 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0e2      	beq.n	80070c8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0207 	bic.w	r2, r2, #7
 8007118:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6899      	ldr	r1, [r3, #8]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	430a      	orrs	r2, r1
 8007128:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800712a:	4b17      	ldr	r3, [pc, #92]	@ (8007188 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800712c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007130:	4a15      	ldr	r2, [pc, #84]	@ (8007188 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007132:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007136:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800713a:	4b13      	ldr	r3, [pc, #76]	@ (8007188 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a12      	ldr	r2, [pc, #72]	@ (8007188 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007140:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007144:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007154:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007164:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	22ff      	movs	r2, #255	@ 0xff
 800716c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	58000800 	.word	0x58000800

0800718c <LL_RCC_GetUSARTClockSource>:
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007198:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4013      	ands	r3, r2
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <LL_RCC_GetLPUARTClockSource>:
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80071b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4013      	ands	r3, r2
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e042      	b.n	8007264 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d106      	bne.n	80071f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7fb f957 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2224      	movs	r2, #36	@ 0x24
 80071fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0201 	bic.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fe7e 	bl	8007f18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc53 	bl	8007ac8 <UART_SetConfig>
 8007222:	4603      	mov	r3, r0
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e01b      	b.n	8007264 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800723a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800724a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fefd 	bl	800805c <UART_CheckIdleState>
 8007262:	4603      	mov	r3, r0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08a      	sub	sp, #40	@ 0x28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	4613      	mov	r3, r2
 8007278:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007280:	2b20      	cmp	r3, #32
 8007282:	d137      	bne.n	80072f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_UART_Receive_IT+0x24>
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e030      	b.n	80072f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a18      	ldr	r2, [pc, #96]	@ (8007300 <HAL_UART_Receive_IT+0x94>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d01f      	beq.n	80072e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d018      	beq.n	80072e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	613b      	str	r3, [r7, #16]
   return(result);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	623b      	str	r3, [r7, #32]
 80072d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	69f9      	ldr	r1, [r7, #28]
 80072d6:	6a3a      	ldr	r2, [r7, #32]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e6      	bne.n	80072b2 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	461a      	mov	r2, r3
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 ffce 	bl	800828c <UART_Start_Receive_IT>
 80072f0:	4603      	mov	r3, r0
 80072f2:	e000      	b.n	80072f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
  }
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3728      	adds	r7, #40	@ 0x28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	40008000 	.word	0x40008000

08007304 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	@ 0x28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007318:	2b20      	cmp	r3, #32
 800731a:	d167      	bne.n	80073ec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <HAL_UART_Transmit_DMA+0x24>
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e060      	b.n	80073ee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	88fa      	ldrh	r2, [r7, #6]
 8007336:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	88fa      	ldrh	r2, [r7, #6]
 800733e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2221      	movs	r2, #33	@ 0x21
 800734e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d028      	beq.n	80073ac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800735e:	4a26      	ldr	r2, [pc, #152]	@ (80073f8 <HAL_UART_Transmit_DMA+0xf4>)
 8007360:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007366:	4a25      	ldr	r2, [pc, #148]	@ (80073fc <HAL_UART_Transmit_DMA+0xf8>)
 8007368:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800736e:	4a24      	ldr	r2, [pc, #144]	@ (8007400 <HAL_UART_Transmit_DMA+0xfc>)
 8007370:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007376:	2200      	movs	r2, #0
 8007378:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007382:	4619      	mov	r1, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3328      	adds	r3, #40	@ 0x28
 800738a:	461a      	mov	r2, r3
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	f7fb fe69 	bl	8003064 <HAL_DMA_Start_IT>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d009      	beq.n	80073ac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2210      	movs	r2, #16
 800739c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e020      	b.n	80073ee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2240      	movs	r2, #64	@ 0x40
 80073b2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3308      	adds	r3, #8
 80073ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	613b      	str	r3, [r7, #16]
   return(result);
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3308      	adds	r3, #8
 80073d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d4:	623a      	str	r2, [r7, #32]
 80073d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	69f9      	ldr	r1, [r7, #28]
 80073da:	6a3a      	ldr	r2, [r7, #32]
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e5      	bne.n	80073b4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
  }
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3728      	adds	r7, #40	@ 0x28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	0800861f 	.word	0x0800861f
 80073fc:	080086b9 	.word	0x080086b9
 8007400:	080086d5 	.word	0x080086d5

08007404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b0ba      	sub	sp, #232	@ 0xe8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800742a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800742e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007432:	4013      	ands	r3, r2
 8007434:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800743c:	2b00      	cmp	r3, #0
 800743e:	d11b      	bne.n	8007478 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d015      	beq.n	8007478 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b00      	cmp	r3, #0
 8007456:	d105      	bne.n	8007464 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800745c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d009      	beq.n	8007478 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8300 	beq.w	8007a6e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
      }
      return;
 8007476:	e2fa      	b.n	8007a6e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8123 	beq.w	80076c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007482:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007486:	4b8d      	ldr	r3, [pc, #564]	@ (80076bc <HAL_UART_IRQHandler+0x2b8>)
 8007488:	4013      	ands	r3, r2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800748e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007492:	4b8b      	ldr	r3, [pc, #556]	@ (80076c0 <HAL_UART_IRQHandler+0x2bc>)
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 8116 	beq.w	80076c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d011      	beq.n	80074cc <HAL_UART_IRQHandler+0xc8>
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2201      	movs	r2, #1
 80074ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c2:	f043 0201 	orr.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d011      	beq.n	80074fc <HAL_UART_IRQHandler+0xf8>
 80074d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2202      	movs	r2, #2
 80074ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f2:	f043 0204 	orr.w	r2, r3, #4
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d011      	beq.n	800752c <HAL_UART_IRQHandler+0x128>
 8007508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2204      	movs	r2, #4
 800751a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007522:	f043 0202 	orr.w	r2, r3, #2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800752c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b00      	cmp	r3, #0
 8007536:	d017      	beq.n	8007568 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007544:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007548:	4b5c      	ldr	r3, [pc, #368]	@ (80076bc <HAL_UART_IRQHandler+0x2b8>)
 800754a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2208      	movs	r2, #8
 8007556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755e:	f043 0208 	orr.w	r2, r3, #8
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800756c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007570:	2b00      	cmp	r3, #0
 8007572:	d012      	beq.n	800759a <HAL_UART_IRQHandler+0x196>
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007578:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00c      	beq.n	800759a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007590:	f043 0220 	orr.w	r2, r3, #32
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 8266 	beq.w	8007a72 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d013      	beq.n	80075da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d105      	bne.n	80075ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ee:	2b40      	cmp	r3, #64	@ 0x40
 80075f0:	d005      	beq.n	80075fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d054      	beq.n	80076a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 ffa7 	bl	8008552 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d146      	bne.n	80076a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800762c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800763e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007642:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800764a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1d9      	bne.n	8007612 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007664:	2b00      	cmp	r3, #0
 8007666:	d017      	beq.n	8007698 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800766e:	4a15      	ldr	r2, [pc, #84]	@ (80076c4 <HAL_UART_IRQHandler+0x2c0>)
 8007670:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007678:	4618      	mov	r0, r3
 800767a:	f7fb fdcd 	bl	8003218 <HAL_DMA_Abort_IT>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d019      	beq.n	80076b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800768a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007692:	4610      	mov	r0, r2
 8007694:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007696:	e00f      	b.n	80076b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f9ff 	bl	8007a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769e:	e00b      	b.n	80076b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f9fb 	bl	8007a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a6:	e007      	b.n	80076b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f9f7 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80076b6:	e1dc      	b.n	8007a72 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b8:	bf00      	nop
    return;
 80076ba:	e1da      	b.n	8007a72 <HAL_UART_IRQHandler+0x66e>
 80076bc:	10000001 	.word	0x10000001
 80076c0:	04000120 	.word	0x04000120
 80076c4:	08008755 	.word	0x08008755

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	f040 8170 	bne.w	80079b2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 8169 	beq.w	80079b2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 8162 	beq.w	80079b2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2210      	movs	r2, #16
 80076f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007700:	2b40      	cmp	r3, #64	@ 0x40
 8007702:	f040 80d8 	bne.w	80078b6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 80af 	beq.w	800787c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007724:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007728:	429a      	cmp	r2, r3
 800772a:	f080 80a7 	bcs.w	800787c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007734:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	f040 8087 	bne.w	800785a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800777a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007782:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800778e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1da      	bne.n	800774c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3308      	adds	r3, #8
 800779c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3308      	adds	r3, #8
 80077b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e1      	bne.n	8007796 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e3      	bne.n	80077d2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007828:	f023 0310 	bic.w	r3, r3, #16
 800782c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800783a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800783c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007840:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e4      	bne.n	8007818 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007854:	4618      	mov	r0, r3
 8007856:	f7fb fc80 	bl	800315a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2202      	movs	r2, #2
 800785e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800786c:	b29b      	uxth	r3, r3
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	b29b      	uxth	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f91b 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800787a:	e0fc      	b.n	8007a76 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007886:	429a      	cmp	r2, r3
 8007888:	f040 80f5 	bne.w	8007a76 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b20      	cmp	r3, #32
 800789c:	f040 80eb 	bne.w	8007a76 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8fe 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
      return;
 80078b4:	e0df      	b.n	8007a76 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 80d1 	beq.w	8007a7a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80078d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80cc 	beq.w	8007a7a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007904:	647b      	str	r3, [r7, #68]	@ 0x44
 8007906:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800790a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e4      	bne.n	80078e2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3308      	adds	r3, #8
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	e853 3f00 	ldrex	r3, [r3]
 8007926:	623b      	str	r3, [r7, #32]
   return(result);
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007940:	633a      	str	r2, [r7, #48]	@ 0x30
 8007942:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e1      	bne.n	8007918 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2220      	movs	r2, #32
 8007958:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	60fb      	str	r3, [r7, #12]
   return(result);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f023 0310 	bic.w	r3, r3, #16
 800797c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800798a:	61fb      	str	r3, [r7, #28]
 800798c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	617b      	str	r3, [r7, #20]
   return(result);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e4      	bne.n	8007968 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2202      	movs	r2, #2
 80079a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f880 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079b0:	e063      	b.n	8007a7a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00e      	beq.n	80079dc <HAL_UART_IRQHandler+0x5d8>
 80079be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 fc1f 	bl	8009218 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079da:	e051      	b.n	8007a80 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d014      	beq.n	8007a12 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d105      	bne.n	8007a00 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d008      	beq.n	8007a12 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d03a      	beq.n	8007a7e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
    }
    return;
 8007a10:	e035      	b.n	8007a7e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <HAL_UART_IRQHandler+0x62e>
 8007a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fea8 	bl	8008780 <UART_EndTransmit_IT>
    return;
 8007a30:	e026      	b.n	8007a80 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d009      	beq.n	8007a52 <HAL_UART_IRQHandler+0x64e>
 8007a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a42:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 fbf8 	bl	8009240 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a50:	e016      	b.n	8007a80 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d010      	beq.n	8007a80 <HAL_UART_IRQHandler+0x67c>
 8007a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	da0c      	bge.n	8007a80 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fbe0 	bl	800922c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a6c:	e008      	b.n	8007a80 <HAL_UART_IRQHandler+0x67c>
      return;
 8007a6e:	bf00      	nop
 8007a70:	e006      	b.n	8007a80 <HAL_UART_IRQHandler+0x67c>
    return;
 8007a72:	bf00      	nop
 8007a74:	e004      	b.n	8007a80 <HAL_UART_IRQHandler+0x67c>
      return;
 8007a76:	bf00      	nop
 8007a78:	e002      	b.n	8007a80 <HAL_UART_IRQHandler+0x67c>
      return;
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <HAL_UART_IRQHandler+0x67c>
    return;
 8007a7e:	bf00      	nop
  }
}
 8007a80:	37e8      	adds	r7, #232	@ 0xe8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop

08007a88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007acc:	b08c      	sub	sp, #48	@ 0x30
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4baf      	ldr	r3, [pc, #700]	@ (8007db4 <UART_SetConfig+0x2ec>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b00:	430b      	orrs	r3, r1
 8007b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4aa4      	ldr	r2, [pc, #656]	@ (8007db8 <UART_SetConfig+0x2f0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b30:	4313      	orrs	r3, r2
 8007b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007b3e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	6812      	ldr	r2, [r2, #0]
 8007b46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b52:	f023 010f 	bic.w	r1, r3, #15
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a95      	ldr	r2, [pc, #596]	@ (8007dbc <UART_SetConfig+0x2f4>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d125      	bne.n	8007bb8 <UART_SetConfig+0xf0>
 8007b6c:	2003      	movs	r0, #3
 8007b6e:	f7ff fb0d 	bl	800718c <LL_RCC_GetUSARTClockSource>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d81b      	bhi.n	8007bb0 <UART_SetConfig+0xe8>
 8007b78:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <UART_SetConfig+0xb8>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007b91 	.word	0x08007b91
 8007b84:	08007ba1 	.word	0x08007ba1
 8007b88:	08007b99 	.word	0x08007b99
 8007b8c:	08007ba9 	.word	0x08007ba9
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b96:	e042      	b.n	8007c1e <UART_SetConfig+0x156>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9e:	e03e      	b.n	8007c1e <UART_SetConfig+0x156>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba6:	e03a      	b.n	8007c1e <UART_SetConfig+0x156>
 8007ba8:	2308      	movs	r3, #8
 8007baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bae:	e036      	b.n	8007c1e <UART_SetConfig+0x156>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb6:	e032      	b.n	8007c1e <UART_SetConfig+0x156>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a7e      	ldr	r2, [pc, #504]	@ (8007db8 <UART_SetConfig+0x2f0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d12a      	bne.n	8007c18 <UART_SetConfig+0x150>
 8007bc2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007bc6:	f7ff faf1 	bl	80071ac <LL_RCC_GetLPUARTClockSource>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bd0:	d01a      	beq.n	8007c08 <UART_SetConfig+0x140>
 8007bd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bd6:	d81b      	bhi.n	8007c10 <UART_SetConfig+0x148>
 8007bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bdc:	d00c      	beq.n	8007bf8 <UART_SetConfig+0x130>
 8007bde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be2:	d815      	bhi.n	8007c10 <UART_SetConfig+0x148>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <UART_SetConfig+0x128>
 8007be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bec:	d008      	beq.n	8007c00 <UART_SetConfig+0x138>
 8007bee:	e00f      	b.n	8007c10 <UART_SetConfig+0x148>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bf6:	e012      	b.n	8007c1e <UART_SetConfig+0x156>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfe:	e00e      	b.n	8007c1e <UART_SetConfig+0x156>
 8007c00:	2304      	movs	r3, #4
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c06:	e00a      	b.n	8007c1e <UART_SetConfig+0x156>
 8007c08:	2308      	movs	r3, #8
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0e:	e006      	b.n	8007c1e <UART_SetConfig+0x156>
 8007c10:	2310      	movs	r3, #16
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c16:	e002      	b.n	8007c1e <UART_SetConfig+0x156>
 8007c18:	2310      	movs	r3, #16
 8007c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a65      	ldr	r2, [pc, #404]	@ (8007db8 <UART_SetConfig+0x2f0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	f040 8097 	bne.w	8007d58 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c2e:	2b08      	cmp	r3, #8
 8007c30:	d823      	bhi.n	8007c7a <UART_SetConfig+0x1b2>
 8007c32:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <UART_SetConfig+0x170>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c5d 	.word	0x08007c5d
 8007c3c:	08007c7b 	.word	0x08007c7b
 8007c40:	08007c65 	.word	0x08007c65
 8007c44:	08007c7b 	.word	0x08007c7b
 8007c48:	08007c6b 	.word	0x08007c6b
 8007c4c:	08007c7b 	.word	0x08007c7b
 8007c50:	08007c7b 	.word	0x08007c7b
 8007c54:	08007c7b 	.word	0x08007c7b
 8007c58:	08007c73 	.word	0x08007c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c5c:	f7fe fbd6 	bl	800640c <HAL_RCC_GetPCLK1Freq>
 8007c60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c62:	e010      	b.n	8007c86 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c64:	4b56      	ldr	r3, [pc, #344]	@ (8007dc0 <UART_SetConfig+0x2f8>)
 8007c66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c68:	e00d      	b.n	8007c86 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c6a:	f7fe fb4f 	bl	800630c <HAL_RCC_GetSysClockFreq>
 8007c6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c70:	e009      	b.n	8007c86 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c78:	e005      	b.n	8007c86 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 812b 	beq.w	8007ee4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c92:	4a4c      	ldr	r2, [pc, #304]	@ (8007dc4 <UART_SetConfig+0x2fc>)
 8007c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	4413      	add	r3, r2
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d305      	bcc.n	8007cbe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d903      	bls.n	8007cc6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007cc4:	e10e      	b.n	8007ee4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	2200      	movs	r2, #0
 8007cca:	60bb      	str	r3, [r7, #8]
 8007ccc:	60fa      	str	r2, [r7, #12]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8007dc4 <UART_SetConfig+0x2fc>)
 8007cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2200      	movs	r2, #0
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ce8:	f7f8 faa2 	bl	8000230 <__aeabi_uldivmod>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	020b      	lsls	r3, r1, #8
 8007cfe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d02:	0202      	lsls	r2, r0, #8
 8007d04:	6979      	ldr	r1, [r7, #20]
 8007d06:	6849      	ldr	r1, [r1, #4]
 8007d08:	0849      	lsrs	r1, r1, #1
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	4605      	mov	r5, r0
 8007d10:	eb12 0804 	adds.w	r8, r2, r4
 8007d14:	eb43 0905 	adc.w	r9, r3, r5
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	469a      	mov	sl, r3
 8007d20:	4693      	mov	fp, r2
 8007d22:	4652      	mov	r2, sl
 8007d24:	465b      	mov	r3, fp
 8007d26:	4640      	mov	r0, r8
 8007d28:	4649      	mov	r1, r9
 8007d2a:	f7f8 fa81 	bl	8000230 <__aeabi_uldivmod>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4613      	mov	r3, r2
 8007d34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d3c:	d308      	bcc.n	8007d50 <UART_SetConfig+0x288>
 8007d3e:	6a3b      	ldr	r3, [r7, #32]
 8007d40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d44:	d204      	bcs.n	8007d50 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6a3a      	ldr	r2, [r7, #32]
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	e0c9      	b.n	8007ee4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d56:	e0c5      	b.n	8007ee4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d60:	d16d      	bne.n	8007e3e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007d62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d66:	3b01      	subs	r3, #1
 8007d68:	2b07      	cmp	r3, #7
 8007d6a:	d82d      	bhi.n	8007dc8 <UART_SetConfig+0x300>
 8007d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d74 <UART_SetConfig+0x2ac>)
 8007d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d72:	bf00      	nop
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007dc9 	.word	0x08007dc9
 8007d80:	08007da3 	.word	0x08007da3
 8007d84:	08007dc9 	.word	0x08007dc9
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dc9 	.word	0x08007dc9
 8007d90:	08007dab 	.word	0x08007dab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d94:	f7fe fb50 	bl	8006438 <HAL_RCC_GetPCLK2Freq>
 8007d98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d9a:	e01b      	b.n	8007dd4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d9c:	4b08      	ldr	r3, [pc, #32]	@ (8007dc0 <UART_SetConfig+0x2f8>)
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007da0:	e018      	b.n	8007dd4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007da2:	f7fe fab3 	bl	800630c <HAL_RCC_GetSysClockFreq>
 8007da6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007da8:	e014      	b.n	8007dd4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007db0:	e010      	b.n	8007dd4 <UART_SetConfig+0x30c>
 8007db2:	bf00      	nop
 8007db4:	cfff69f3 	.word	0xcfff69f3
 8007db8:	40008000 	.word	0x40008000
 8007dbc:	40013800 	.word	0x40013800
 8007dc0:	00f42400 	.word	0x00f42400
 8007dc4:	0800ddec 	.word	0x0800ddec
      default:
        pclk = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007dd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8084 	beq.w	8007ee4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de0:	4a4b      	ldr	r2, [pc, #300]	@ (8007f10 <UART_SetConfig+0x448>)
 8007de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dea:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dee:	005a      	lsls	r2, r3, #1
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	085b      	lsrs	r3, r3, #1
 8007df6:	441a      	add	r2, r3
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e00:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	2b0f      	cmp	r3, #15
 8007e06:	d916      	bls.n	8007e36 <UART_SetConfig+0x36e>
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e0e:	d212      	bcs.n	8007e36 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f023 030f 	bic.w	r3, r3, #15
 8007e18:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	085b      	lsrs	r3, r3, #1
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	8bfb      	ldrh	r3, [r7, #30]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	8bfa      	ldrh	r2, [r7, #30]
 8007e32:	60da      	str	r2, [r3, #12]
 8007e34:	e056      	b.n	8007ee4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e3c:	e052      	b.n	8007ee4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e42:	3b01      	subs	r3, #1
 8007e44:	2b07      	cmp	r3, #7
 8007e46:	d822      	bhi.n	8007e8e <UART_SetConfig+0x3c6>
 8007e48:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <UART_SetConfig+0x388>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e71 	.word	0x08007e71
 8007e54:	08007e79 	.word	0x08007e79
 8007e58:	08007e8f 	.word	0x08007e8f
 8007e5c:	08007e7f 	.word	0x08007e7f
 8007e60:	08007e8f 	.word	0x08007e8f
 8007e64:	08007e8f 	.word	0x08007e8f
 8007e68:	08007e8f 	.word	0x08007e8f
 8007e6c:	08007e87 	.word	0x08007e87
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e70:	f7fe fae2 	bl	8006438 <HAL_RCC_GetPCLK2Freq>
 8007e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e76:	e010      	b.n	8007e9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e78:	4b26      	ldr	r3, [pc, #152]	@ (8007f14 <UART_SetConfig+0x44c>)
 8007e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e7c:	e00d      	b.n	8007e9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e7e:	f7fe fa45 	bl	800630c <HAL_RCC_GetSysClockFreq>
 8007e82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e84:	e009      	b.n	8007e9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e8c:	e005      	b.n	8007e9a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e98:	bf00      	nop
    }

    if (pclk != 0U)
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d021      	beq.n	8007ee4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8007f10 <UART_SetConfig+0x448>)
 8007ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eae:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	085b      	lsrs	r3, r3, #1
 8007eb8:	441a      	add	r2, r3
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	d909      	bls.n	8007ede <UART_SetConfig+0x416>
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ed0:	d205      	bcs.n	8007ede <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60da      	str	r2, [r3, #12]
 8007edc:	e002      	b.n	8007ee4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2200      	movs	r2, #0
 8007efe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3730      	adds	r7, #48	@ 0x30
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f0e:	bf00      	nop
 8007f10:	0800ddec 	.word	0x0800ddec
 8007f14:	00f42400 	.word	0x00f42400

08007f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01a      	beq.n	800802e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008016:	d10a      	bne.n	800802e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00a      	beq.n	8008050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	605a      	str	r2, [r3, #4]
  }
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b098      	sub	sp, #96	@ 0x60
 8008060:	af02      	add	r7, sp, #8
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800806c:	f7fa fcf2 	bl	8002a54 <HAL_GetTick>
 8008070:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0308 	and.w	r3, r3, #8
 800807c:	2b08      	cmp	r3, #8
 800807e:	d12f      	bne.n	80080e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008080:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008088:	2200      	movs	r2, #0
 800808a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f88e 	bl	80081b0 <UART_WaitOnFlagUntilTimeout>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d022      	beq.n	80080e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	e853 3f00 	ldrex	r3, [r3]
 80080a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080c0:	e841 2300 	strex	r3, r2, [r1]
 80080c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e6      	bne.n	800809a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e063      	b.n	80081a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d149      	bne.n	8008182 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080f6:	2200      	movs	r2, #0
 80080f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f857 	bl	80081b0 <UART_WaitOnFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d03c      	beq.n	8008182 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	623b      	str	r3, [r7, #32]
   return(result);
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800811c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008126:	633b      	str	r3, [r7, #48]	@ 0x30
 8008128:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800812c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e6      	bne.n	8008108 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3308      	adds	r3, #8
 8008140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	60fb      	str	r3, [r7, #12]
   return(result);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f023 0301 	bic.w	r3, r3, #1
 8008150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3308      	adds	r3, #8
 8008158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800815a:	61fa      	str	r2, [r7, #28]
 800815c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	69b9      	ldr	r1, [r7, #24]
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	617b      	str	r3, [r7, #20]
   return(result);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e5      	bne.n	800813a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e012      	b.n	80081a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2220      	movs	r2, #32
 8008186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2220      	movs	r2, #32
 800818e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3758      	adds	r7, #88	@ 0x58
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	4613      	mov	r3, r2
 80081be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c0:	e04f      	b.n	8008262 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d04b      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ca:	f7fa fc43 	bl	8002a54 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d302      	bcc.n	80081e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e04e      	b.n	8008282 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0304 	and.w	r3, r3, #4
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d037      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b80      	cmp	r3, #128	@ 0x80
 80081f6:	d034      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2b40      	cmp	r3, #64	@ 0x40
 80081fc:	d031      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b08      	cmp	r3, #8
 800820a:	d110      	bne.n	800822e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2208      	movs	r2, #8
 8008212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f99c 	bl	8008552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2208      	movs	r2, #8
 800821e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e029      	b.n	8008282 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800823c:	d111      	bne.n	8008262 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f982 	bl	8008552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e00f      	b.n	8008282 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4013      	ands	r3, r2
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	429a      	cmp	r2, r3
 8008270:	bf0c      	ite	eq
 8008272:	2301      	moveq	r3, #1
 8008274:	2300      	movne	r3, #0
 8008276:	b2db      	uxtb	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	429a      	cmp	r2, r3
 800827e:	d0a0      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800828c:	b480      	push	{r7}
 800828e:	b0a3      	sub	sp, #140	@ 0x8c
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	4613      	mov	r3, r2
 8008298:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	88fa      	ldrh	r2, [r7, #6]
 80082a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082be:	d10e      	bne.n	80082de <UART_Start_Receive_IT+0x52>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <UART_Start_Receive_IT+0x48>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80082ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082d2:	e02d      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	22ff      	movs	r2, #255	@ 0xff
 80082d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082dc:	e028      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10d      	bne.n	8008302 <UART_Start_Receive_IT+0x76>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <UART_Start_Receive_IT+0x6c>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	22ff      	movs	r2, #255	@ 0xff
 80082f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80082f6:	e01b      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	227f      	movs	r2, #127	@ 0x7f
 80082fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008300:	e016      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800830a:	d10d      	bne.n	8008328 <UART_Start_Receive_IT+0x9c>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d104      	bne.n	800831e <UART_Start_Receive_IT+0x92>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	227f      	movs	r2, #127	@ 0x7f
 8008318:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800831c:	e008      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	223f      	movs	r2, #63	@ 0x3f
 8008322:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008326:	e003      	b.n	8008330 <UART_Start_Receive_IT+0xa4>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2222      	movs	r2, #34	@ 0x22
 800833c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3308      	adds	r3, #8
 8008346:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008364:	673a      	str	r2, [r7, #112]	@ 0x70
 8008366:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800836a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008372:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e3      	bne.n	8008340 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800837c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008380:	d14f      	bne.n	8008422 <UART_Start_Receive_IT+0x196>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	429a      	cmp	r2, r3
 800838c:	d349      	bcc.n	8008422 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008396:	d107      	bne.n	80083a8 <UART_Start_Receive_IT+0x11c>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d103      	bne.n	80083a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4a47      	ldr	r2, [pc, #284]	@ (80084c0 <UART_Start_Receive_IT+0x234>)
 80083a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80083a6:	e002      	b.n	80083ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4a46      	ldr	r2, [pc, #280]	@ (80084c4 <UART_Start_Receive_IT+0x238>)
 80083ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01a      	beq.n	80083ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80083c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083da:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80083de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80083e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e4      	bne.n	80083b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3308      	adds	r3, #8
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008402:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3308      	adds	r3, #8
 800840a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800840c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800840e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800841a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e5      	bne.n	80083ec <UART_Start_Receive_IT+0x160>
 8008420:	e046      	b.n	80084b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800842a:	d107      	bne.n	800843c <UART_Start_Receive_IT+0x1b0>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4a24      	ldr	r2, [pc, #144]	@ (80084c8 <UART_Start_Receive_IT+0x23c>)
 8008438:	675a      	str	r2, [r3, #116]	@ 0x74
 800843a:	e002      	b.n	8008442 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4a23      	ldr	r2, [pc, #140]	@ (80084cc <UART_Start_Receive_IT+0x240>)
 8008440:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d019      	beq.n	800847e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008452:	e853 3f00 	ldrex	r3, [r3]
 8008456:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800845e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
 800846a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800846e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e6      	bne.n	800844a <UART_Start_Receive_IT+0x1be>
 800847c:	e018      	b.n	80084b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	613b      	str	r3, [r7, #16]
   return(result);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f043 0320 	orr.w	r3, r3, #32
 8008492:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800849c:	623b      	str	r3, [r7, #32]
 800849e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	69f9      	ldr	r1, [r7, #28]
 80084a2:	6a3a      	ldr	r2, [r7, #32]
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e6      	bne.n	800847e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	378c      	adds	r7, #140	@ 0x8c
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	08008ead 	.word	0x08008ead
 80084c4:	08008b49 	.word	0x08008b49
 80084c8:	08008991 	.word	0x08008991
 80084cc:	080087d9 	.word	0x080087d9

080084d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b08f      	sub	sp, #60	@ 0x3c
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80084ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e6      	bne.n	80084d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	60bb      	str	r3, [r7, #8]
   return(result);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008520:	633b      	str	r3, [r7, #48]	@ 0x30
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800852a:	61ba      	str	r2, [r7, #24]
 800852c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6979      	ldr	r1, [r7, #20]
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	613b      	str	r3, [r7, #16]
   return(result);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e5      	bne.n	800850a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008546:	bf00      	nop
 8008548:	373c      	adds	r7, #60	@ 0x3c
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008552:	b480      	push	{r7}
 8008554:	b095      	sub	sp, #84	@ 0x54
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800856e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	461a      	mov	r2, r3
 8008576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008578:	643b      	str	r3, [r7, #64]	@ 0x40
 800857a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800857e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e6      	bne.n	800855a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3308      	adds	r3, #8
 8008592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	61fb      	str	r3, [r7, #28]
   return(result);
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085a2:	f023 0301 	bic.w	r3, r3, #1
 80085a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3308      	adds	r3, #8
 80085ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e3      	bne.n	800858c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d118      	bne.n	80085fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f023 0310 	bic.w	r3, r3, #16
 80085e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6979      	ldr	r1, [r7, #20]
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	613b      	str	r3, [r7, #16]
   return(result);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e6      	bne.n	80085cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008612:	bf00      	nop
 8008614:	3754      	adds	r7, #84	@ 0x54
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b090      	sub	sp, #64	@ 0x40
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0320 	and.w	r3, r3, #32
 8008636:	2b00      	cmp	r3, #0
 8008638:	d137      	bne.n	80086aa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800863a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800863c:	2200      	movs	r2, #0
 800863e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	623b      	str	r3, [r7, #32]
   return(result);
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008658:	63bb      	str	r3, [r7, #56]	@ 0x38
 800865a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3308      	adds	r3, #8
 8008660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008662:	633a      	str	r2, [r7, #48]	@ 0x30
 8008664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e5      	bne.n	8008642 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	60fb      	str	r3, [r7, #12]
   return(result);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800868a:	637b      	str	r3, [r7, #52]	@ 0x34
 800868c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	461a      	mov	r2, r3
 8008692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008694:	61fb      	str	r3, [r7, #28]
 8008696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	69b9      	ldr	r1, [r7, #24]
 800869a:	69fa      	ldr	r2, [r7, #28]
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	617b      	str	r3, [r7, #20]
   return(result);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e6      	bne.n	8008676 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086a8:	e002      	b.n	80086b0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80086aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80086ac:	f7f9 f9bc 	bl	8001a28 <HAL_UART_TxCpltCallback>
}
 80086b0:	bf00      	nop
 80086b2:	3740      	adds	r7, #64	@ 0x40
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff f9de 	bl	8007a88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086fc:	2b80      	cmp	r3, #128	@ 0x80
 80086fe:	d109      	bne.n	8008714 <UART_DMAError+0x40>
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b21      	cmp	r3, #33	@ 0x21
 8008704:	d106      	bne.n	8008714 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2200      	movs	r2, #0
 800870a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800870e:	6978      	ldr	r0, [r7, #20]
 8008710:	f7ff fede 	bl	80084d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871e:	2b40      	cmp	r3, #64	@ 0x40
 8008720:	d109      	bne.n	8008736 <UART_DMAError+0x62>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b22      	cmp	r3, #34	@ 0x22
 8008726:	d106      	bne.n	8008736 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2200      	movs	r2, #0
 800872c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008730:	6978      	ldr	r0, [r7, #20]
 8008732:	f7ff ff0e 	bl	8008552 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800873c:	f043 0210 	orr.w	r2, r3, #16
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008746:	6978      	ldr	r0, [r7, #20]
 8008748:	f7ff f9a8 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800874c:	bf00      	nop
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008760:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7ff f992 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008778:	bf00      	nop
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	60bb      	str	r3, [r7, #8]
   return(result);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800879c:	61fb      	str	r3, [r7, #28]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	61bb      	str	r3, [r7, #24]
 80087a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	6979      	ldr	r1, [r7, #20]
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	613b      	str	r3, [r7, #16]
   return(result);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e6      	bne.n	8008788 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2220      	movs	r2, #32
 80087be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7f9 f92d 	bl	8001a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ce:	bf00      	nop
 80087d0:	3720      	adds	r7, #32
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b09c      	sub	sp, #112	@ 0x70
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80087e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087f0:	2b22      	cmp	r3, #34	@ 0x22
 80087f2:	f040 80be 	bne.w	8008972 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008800:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008804:	b2d9      	uxtb	r1, r3
 8008806:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800880a:	b2da      	uxtb	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008810:	400a      	ands	r2, r1
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800881a:	1c5a      	adds	r2, r3, #1
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008826:	b29b      	uxth	r3, r3
 8008828:	3b01      	subs	r3, #1
 800882a:	b29a      	uxth	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	f040 80a1 	bne.w	8008982 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800884e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800885e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008860:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800886c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e6      	bne.n	8008840 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3308      	adds	r3, #8
 8008878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008884:	f023 0301 	bic.w	r3, r3, #1
 8008888:	667b      	str	r3, [r7, #100]	@ 0x64
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008892:	647a      	str	r2, [r7, #68]	@ 0x44
 8008894:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e5      	bne.n	8008872 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a33      	ldr	r2, [pc, #204]	@ (800898c <UART_RxISR_8BIT+0x1b4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d01f      	beq.n	8008904 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d018      	beq.n	8008904 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	623b      	str	r3, [r7, #32]
   return(result);
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80088f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e6      	bne.n	80088d2 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008908:	2b01      	cmp	r3, #1
 800890a:	d12e      	bne.n	800896a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	e853 3f00 	ldrex	r3, [r3]
 800891e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0310 	bic.w	r3, r3, #16
 8008926:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	461a      	mov	r2, r3
 800892e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008930:	61fb      	str	r3, [r7, #28]
 8008932:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008934:	69b9      	ldr	r1, [r7, #24]
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	e841 2300 	strex	r3, r2, [r1]
 800893c:	617b      	str	r3, [r7, #20]
   return(result);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1e6      	bne.n	8008912 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f003 0310 	and.w	r3, r3, #16
 800894e:	2b10      	cmp	r3, #16
 8008950:	d103      	bne.n	800895a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2210      	movs	r2, #16
 8008958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff f8a4 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008968:	e00b      	b.n	8008982 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7f9 f83e 	bl	80019ec <HAL_UART_RxCpltCallback>
}
 8008970:	e007      	b.n	8008982 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	699a      	ldr	r2, [r3, #24]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0208 	orr.w	r2, r2, #8
 8008980:	619a      	str	r2, [r3, #24]
}
 8008982:	bf00      	nop
 8008984:	3770      	adds	r7, #112	@ 0x70
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	40008000 	.word	0x40008000

08008990 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b09c      	sub	sp, #112	@ 0x70
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800899e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089a8:	2b22      	cmp	r3, #34	@ 0x22
 80089aa:	f040 80be 	bne.w	8008b2a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80089be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80089c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80089c6:	4013      	ands	r3, r2
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d2:	1c9a      	adds	r2, r3, #2
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089de:	b29b      	uxth	r3, r3
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f040 80a1 	bne.w	8008b3a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a16:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a18:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e6      	bne.n	80089f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	f023 0301 	bic.w	r3, r3, #1
 8008a40:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3308      	adds	r3, #8
 8008a48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e5      	bne.n	8008a2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a33      	ldr	r2, [pc, #204]	@ (8008b44 <UART_RxISR_16BIT+0x1b4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d01f      	beq.n	8008abc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d018      	beq.n	8008abc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008aaa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e6      	bne.n	8008a8a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d12e      	bne.n	8008b22 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	e853 3f00 	ldrex	r3, [r3]
 8008ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f023 0310 	bic.w	r3, r3, #16
 8008ade:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	6979      	ldr	r1, [r7, #20]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	e841 2300 	strex	r3, r2, [r1]
 8008af4:	613b      	str	r3, [r7, #16]
   return(result);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e6      	bne.n	8008aca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	f003 0310 	and.w	r3, r3, #16
 8008b06:	2b10      	cmp	r3, #16
 8008b08:	d103      	bne.n	8008b12 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2210      	movs	r2, #16
 8008b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7fe ffc8 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b20:	e00b      	b.n	8008b3a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7f8 ff62 	bl	80019ec <HAL_UART_RxCpltCallback>
}
 8008b28:	e007      	b.n	8008b3a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	699a      	ldr	r2, [r3, #24]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0208 	orr.w	r2, r2, #8
 8008b38:	619a      	str	r2, [r3, #24]
}
 8008b3a:	bf00      	nop
 8008b3c:	3770      	adds	r7, #112	@ 0x70
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	40008000 	.word	0x40008000

08008b48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b0ac      	sub	sp, #176	@ 0xb0
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b56:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b7e:	2b22      	cmp	r3, #34	@ 0x22
 8008b80:	f040 8183 	bne.w	8008e8a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008b8a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b8e:	e126      	b.n	8008dde <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b96:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008b9e:	b2d9      	uxtb	r1, r3
 8008ba0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008baa:	400a      	ands	r2, r1
 8008bac:	b2d2      	uxtb	r2, r2
 8008bae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d053      	beq.n	8008c8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d011      	beq.n	8008c12 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00b      	beq.n	8008c12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c08:	f043 0201 	orr.w	r2, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d011      	beq.n	8008c42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c38:	f043 0204 	orr.w	r2, r3, #4
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d011      	beq.n	8008c72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2204      	movs	r2, #4
 8008c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c68:	f043 0202 	orr.w	r2, r3, #2
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d006      	beq.n	8008c8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7fe ff0d 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 80a3 	bne.w	8008dde <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cbc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008cc0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008cc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e4      	bne.n	8008c98 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cd8:	e853 3f00 	ldrex	r3, [r3]
 8008cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008cde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ce4:	f023 0301 	bic.w	r3, r3, #1
 8008ce8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cf6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008cf8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008cfc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e1      	bne.n	8008cce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a60      	ldr	r2, [pc, #384]	@ (8008ea4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d021      	beq.n	8008d6c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01a      	beq.n	8008d6c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d3e:	e853 3f00 	ldrex	r3, [r3]
 8008d42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d58:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d5a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e4      	bne.n	8008d36 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d130      	bne.n	8008dd6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	f023 0310 	bic.w	r3, r3, #16
 8008d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008da2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e4      	bne.n	8008d7a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d103      	bne.n	8008dc6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2210      	movs	r2, #16
 8008dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fe fe6e 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008dd4:	e00e      	b.n	8008df4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f8 fe08 	bl	80019ec <HAL_UART_RxCpltCallback>
        break;
 8008ddc:	e00a      	b.n	8008df4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dde:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d006      	beq.n	8008df4 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8008de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f47f aece 	bne.w	8008b90 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dfa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008dfe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d049      	beq.n	8008e9a <UART_RxISR_8BIT_FIFOEN+0x352>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e0c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d242      	bcs.n	8008e9a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	e853 3f00 	ldrex	r3, [r3]
 8008e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3308      	adds	r3, #8
 8008e34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008e38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e3      	bne.n	8008e14 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a16      	ldr	r2, [pc, #88]	@ (8008ea8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8008e50:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f043 0320 	orr.w	r3, r3, #32
 8008e66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e74:	61bb      	str	r3, [r7, #24]
 8008e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6979      	ldr	r1, [r7, #20]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	613b      	str	r3, [r7, #16]
   return(result);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e4      	bne.n	8008e52 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e88:	e007      	b.n	8008e9a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	699a      	ldr	r2, [r3, #24]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f042 0208 	orr.w	r2, r2, #8
 8008e98:	619a      	str	r2, [r3, #24]
}
 8008e9a:	bf00      	nop
 8008e9c:	37b0      	adds	r7, #176	@ 0xb0
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	40008000 	.word	0x40008000
 8008ea8:	080087d9 	.word	0x080087d9

08008eac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b0ae      	sub	sp, #184	@ 0xb8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008eba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ee2:	2b22      	cmp	r3, #34	@ 0x22
 8008ee4:	f040 8187 	bne.w	80091f6 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008eee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ef2:	e12a      	b.n	800914a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008efa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008f0a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008f0e:	4013      	ands	r3, r2
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f1c:	1c9a      	adds	r2, r3, #2
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d053      	beq.n	8008ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d011      	beq.n	8008f7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00b      	beq.n	8008f7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2201      	movs	r2, #1
 8008f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f70:	f043 0201 	orr.w	r2, r3, #1
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d011      	beq.n	8008faa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008f86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00b      	beq.n	8008faa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2202      	movs	r2, #2
 8008f98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa0:	f043 0204 	orr.w	r2, r3, #4
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008fae:	f003 0304 	and.w	r3, r3, #4
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d011      	beq.n	8008fda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008fb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00b      	beq.n	8008fda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fd0:	f043 0202 	orr.w	r2, r3, #2
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7fe fd59 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f040 80a5 	bne.w	800914a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800900e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009022:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009026:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800902a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800902e:	e841 2300 	strex	r3, r2, [r1]
 8009032:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1e2      	bne.n	8009000 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3308      	adds	r3, #8
 8009040:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800904a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800904c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009050:	f023 0301 	bic.w	r3, r3, #1
 8009054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009062:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009064:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009068:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e1      	bne.n	800903a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a60      	ldr	r2, [pc, #384]	@ (8009210 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d021      	beq.n	80090d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01a      	beq.n	80090d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e4      	bne.n	80090a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d130      	bne.n	8009142 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f6:	f023 0310 	bic.w	r3, r3, #16
 80090fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009108:	647b      	str	r3, [r7, #68]	@ 0x44
 800910a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800910e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009110:	e841 2300 	strex	r3, r2, [r1]
 8009114:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e4      	bne.n	80090e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	f003 0310 	and.w	r3, r3, #16
 8009126:	2b10      	cmp	r3, #16
 8009128:	d103      	bne.n	8009132 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2210      	movs	r2, #16
 8009130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7fe fcb8 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009140:	e00e      	b.n	8009160 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7f8 fc52 	bl	80019ec <HAL_UART_RxCpltCallback>
        break;
 8009148:	e00a      	b.n	8009160 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800914a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800914e:	2b00      	cmp	r3, #0
 8009150:	d006      	beq.n	8009160 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009156:	f003 0320 	and.w	r3, r3, #32
 800915a:	2b00      	cmp	r3, #0
 800915c:	f47f aeca 	bne.w	8008ef4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009166:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800916a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800916e:	2b00      	cmp	r3, #0
 8009170:	d049      	beq.n	8009206 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009178:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800917c:	429a      	cmp	r2, r3
 800917e:	d242      	bcs.n	8009206 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3308      	adds	r3, #8
 8009186:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	623b      	str	r3, [r7, #32]
   return(result);
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80091a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80091a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e3      	bne.n	8009180 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a16      	ldr	r2, [pc, #88]	@ (8009214 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80091bc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f043 0320 	orr.w	r3, r3, #32
 80091d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091e0:	61fb      	str	r3, [r7, #28]
 80091e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	69b9      	ldr	r1, [r7, #24]
 80091e6:	69fa      	ldr	r2, [r7, #28]
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	617b      	str	r3, [r7, #20]
   return(result);
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e4      	bne.n	80091be <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091f4:	e007      	b.n	8009206 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	699a      	ldr	r2, [r3, #24]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0208 	orr.w	r2, r2, #8
 8009204:	619a      	str	r2, [r3, #24]
}
 8009206:	bf00      	nop
 8009208:	37b8      	adds	r7, #184	@ 0xb8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	40008000 	.word	0x40008000
 8009214:	08008991 	.word	0x08008991

08009218 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <HAL_UARTEx_DisableFifoMode+0x16>
 8009266:	2302      	movs	r3, #2
 8009268:	e027      	b.n	80092ba <HAL_UARTEx_DisableFifoMode+0x66>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2224      	movs	r2, #36	@ 0x24
 8009276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0201 	bic.w	r2, r2, #1
 8009290:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009298:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2220      	movs	r2, #32
 80092ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d101      	bne.n	80092de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092da:	2302      	movs	r3, #2
 80092dc:	e02d      	b.n	800933a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2224      	movs	r2, #36	@ 0x24
 80092ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 0201 	bic.w	r2, r2, #1
 8009304:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f850 	bl	80093c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2220      	movs	r2, #32
 800932c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009352:	2b01      	cmp	r3, #1
 8009354:	d101      	bne.n	800935a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009356:	2302      	movs	r3, #2
 8009358:	e02d      	b.n	80093b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2224      	movs	r2, #36	@ 0x24
 8009366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0201 	bic.w	r2, r2, #1
 8009380:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f812 	bl	80093c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2220      	movs	r2, #32
 80093a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d108      	bne.n	80093e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093e0:	e031      	b.n	8009446 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093e2:	2308      	movs	r3, #8
 80093e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093e6:	2308      	movs	r3, #8
 80093e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	0e5b      	lsrs	r3, r3, #25
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	0f5b      	lsrs	r3, r3, #29
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 0307 	and.w	r3, r3, #7
 8009408:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	7b3a      	ldrb	r2, [r7, #12]
 800940e:	4911      	ldr	r1, [pc, #68]	@ (8009454 <UARTEx_SetNbDataToProcess+0x94>)
 8009410:	5c8a      	ldrb	r2, [r1, r2]
 8009412:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009416:	7b3a      	ldrb	r2, [r7, #12]
 8009418:	490f      	ldr	r1, [pc, #60]	@ (8009458 <UARTEx_SetNbDataToProcess+0x98>)
 800941a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800941c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009420:	b29a      	uxth	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	7b7a      	ldrb	r2, [r7, #13]
 800942c:	4909      	ldr	r1, [pc, #36]	@ (8009454 <UARTEx_SetNbDataToProcess+0x94>)
 800942e:	5c8a      	ldrb	r2, [r1, r2]
 8009430:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009434:	7b7a      	ldrb	r2, [r7, #13]
 8009436:	4908      	ldr	r1, [pc, #32]	@ (8009458 <UARTEx_SetNbDataToProcess+0x98>)
 8009438:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800943a:	fb93 f3f2 	sdiv	r3, r3, r2
 800943e:	b29a      	uxth	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009446:	bf00      	nop
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	0800de04 	.word	0x0800de04
 8009458:	0800de0c 	.word	0x0800de0c

0800945c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009466:	f107 0308 	add.w	r3, r7, #8
 800946a:	2218      	movs	r2, #24
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f001 f92d 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009474:	233f      	movs	r3, #63	@ 0x3f
 8009476:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009478:	2381      	movs	r3, #129	@ 0x81
 800947a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800947c:	1dfb      	adds	r3, r7, #7
 800947e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009480:	2301      	movs	r3, #1
 8009482:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009484:	f107 0308 	add.w	r3, r7, #8
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f001 fba8 	bl	800abe0 <hci_send_req>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	da01      	bge.n	800949a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009496:	23ff      	movs	r3, #255	@ 0xff
 8009498:	e000      	b.n	800949c <aci_gap_set_non_discoverable+0x40>
  return status;
 800949a:	79fb      	ldrb	r3, [r7, #7]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3720      	adds	r7, #32
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80094a4:	b5b0      	push	{r4, r5, r7, lr}
 80094a6:	b0ce      	sub	sp, #312	@ 0x138
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4605      	mov	r5, r0
 80094ac:	460c      	mov	r4, r1
 80094ae:	4610      	mov	r0, r2
 80094b0:	4619      	mov	r1, r3
 80094b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094b6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80094ba:	462a      	mov	r2, r5
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80094c6:	4622      	mov	r2, r4
 80094c8:	801a      	strh	r2, [r3, #0]
 80094ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094ce:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80094d2:	4602      	mov	r2, r0
 80094d4:	801a      	strh	r2, [r3, #0]
 80094d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80094da:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80094de:	460a      	mov	r2, r1
 80094e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80094e2:	f107 0310 	add.w	r3, r7, #16
 80094e6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80094ea:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80094ee:	3308      	adds	r3, #8
 80094f0:	f107 0210 	add.w	r2, r7, #16
 80094f4:	4413      	add	r3, r2
 80094f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80094fa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80094fe:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009502:	4413      	add	r3, r2
 8009504:	3309      	adds	r3, #9
 8009506:	f107 0210 	add.w	r2, r7, #16
 800950a:	4413      	add	r3, r2
 800950c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009510:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009514:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009518:	2200      	movs	r2, #0
 800951a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009522:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009526:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800952a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800952e:	7812      	ldrb	r2, [r2, #0]
 8009530:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009532:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009536:	3301      	adds	r3, #1
 8009538:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800953c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009540:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009544:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009548:	8812      	ldrh	r2, [r2, #0]
 800954a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800954e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009552:	3302      	adds	r3, #2
 8009554:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009558:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800955c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009560:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009564:	8812      	ldrh	r2, [r2, #0]
 8009566:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800956a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800956e:	3302      	adds	r3, #2
 8009570:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009574:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009578:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800957c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009580:	7812      	ldrb	r2, [r2, #0]
 8009582:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009584:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009588:	3301      	adds	r3, #1
 800958a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800958e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009592:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009596:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009598:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800959c:	3301      	adds	r3, #1
 800959e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80095a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095a6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80095aa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80095ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095b0:	3301      	adds	r3, #1
 80095b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80095b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80095ba:	3308      	adds	r3, #8
 80095bc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80095c0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80095c4:	4618      	mov	r0, r3
 80095c6:	f001 f872 	bl	800a6ae <Osal_MemCpy>
    index_input += Local_Name_Length;
 80095ca:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80095ce:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80095d2:	4413      	add	r3, r2
 80095d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80095d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80095dc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80095e0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80095e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095e6:	3301      	adds	r3, #1
 80095e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80095ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80095f0:	3301      	adds	r3, #1
 80095f2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80095f6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 f857 	bl	800a6ae <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009600:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009604:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009608:	4413      	add	r3, r2
 800960a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800960e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009612:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8009616:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009618:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800961c:	3302      	adds	r3, #2
 800961e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8009622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009626:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800962a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800962c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009630:	3302      	adds	r3, #2
 8009632:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800963a:	2218      	movs	r2, #24
 800963c:	2100      	movs	r1, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f001 f845 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009644:	233f      	movs	r3, #63	@ 0x3f
 8009646:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800964a:	2383      	movs	r3, #131	@ 0x83
 800964c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009650:	f107 0310 	add.w	r3, r7, #16
 8009654:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009658:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800965c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009660:	f107 030f 	add.w	r3, r7, #15
 8009664:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009668:	2301      	movs	r3, #1
 800966a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800966e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009672:	2100      	movs	r1, #0
 8009674:	4618      	mov	r0, r3
 8009676:	f001 fab3 	bl	800abe0 <hci_send_req>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	da01      	bge.n	8009684 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009680:	23ff      	movs	r3, #255	@ 0xff
 8009682:	e004      	b.n	800968e <aci_gap_set_discoverable+0x1ea>
  return status;
 8009684:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009688:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800968c:	781b      	ldrb	r3, [r3, #0]
}
 800968e:	4618      	mov	r0, r3
 8009690:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009694:	46bd      	mov	sp, r7
 8009696:	bdb0      	pop	{r4, r5, r7, pc}

08009698 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b0cc      	sub	sp, #304	@ 0x130
 800969c:	af00      	add	r7, sp, #0
 800969e:	4602      	mov	r2, r0
 80096a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096a4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80096a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80096aa:	f107 0310 	add.w	r3, r7, #16
 80096ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096ba:	2200      	movs	r2, #0
 80096bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80096c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80096cc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80096d0:	7812      	ldrb	r2, [r2, #0]
 80096d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80096d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096d8:	3301      	adds	r3, #1
 80096da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096e2:	2218      	movs	r2, #24
 80096e4:	2100      	movs	r1, #0
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fff1 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 80096ec:	233f      	movs	r3, #63	@ 0x3f
 80096ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80096f2:	2385      	movs	r3, #133	@ 0x85
 80096f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80096f8:	f107 0310 	add.w	r3, r7, #16
 80096fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009700:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009704:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009708:	f107 030f 	add.w	r3, r7, #15
 800970c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009710:	2301      	movs	r3, #1
 8009712:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009716:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800971a:	2100      	movs	r1, #0
 800971c:	4618      	mov	r0, r3
 800971e:	f001 fa5f 	bl	800abe0 <hci_send_req>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	da01      	bge.n	800972c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009728:	23ff      	movs	r3, #255	@ 0xff
 800972a:	e004      	b.n	8009736 <aci_gap_set_io_capability+0x9e>
  return status;
 800972c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009730:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009734:	781b      	ldrb	r3, [r3, #0]
}
 8009736:	4618      	mov	r0, r3
 8009738:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009740:	b5b0      	push	{r4, r5, r7, lr}
 8009742:	b0cc      	sub	sp, #304	@ 0x130
 8009744:	af00      	add	r7, sp, #0
 8009746:	4605      	mov	r5, r0
 8009748:	460c      	mov	r4, r1
 800974a:	4610      	mov	r0, r2
 800974c:	4619      	mov	r1, r3
 800974e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009752:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009756:	462a      	mov	r2, r5
 8009758:	701a      	strb	r2, [r3, #0]
 800975a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800975e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009762:	4622      	mov	r2, r4
 8009764:	701a      	strb	r2, [r3, #0]
 8009766:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800976a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800976e:	4602      	mov	r2, r0
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009776:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800977a:	460a      	mov	r2, r1
 800977c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800977e:	f107 0310 	add.w	r3, r7, #16
 8009782:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009786:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800978a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800978e:	2200      	movs	r2, #0
 8009790:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009798:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800979c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097a0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80097a4:	7812      	ldrb	r2, [r2, #0]
 80097a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097ac:	3301      	adds	r3, #1
 80097ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80097b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097ba:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80097be:	7812      	ldrb	r2, [r2, #0]
 80097c0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80097c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097c6:	3301      	adds	r3, #1
 80097c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80097cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097d4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80097d8:	7812      	ldrb	r2, [r2, #0]
 80097da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097e0:	3301      	adds	r3, #1
 80097e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80097e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80097ee:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80097f2:	7812      	ldrb	r2, [r2, #0]
 80097f4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80097f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097fa:	3301      	adds	r3, #1
 80097fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009800:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009804:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009808:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800980a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800980e:	3301      	adds	r3, #1
 8009810:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009814:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009818:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800981c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800981e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009822:	3301      	adds	r3, #1
 8009824:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009828:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800982c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009830:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009832:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009836:	3301      	adds	r3, #1
 8009838:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800983c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009840:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009844:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009848:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800984c:	3304      	adds	r3, #4
 800984e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009852:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009856:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800985a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800985c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009860:	3301      	adds	r3, #1
 8009862:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009866:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800986a:	2218      	movs	r2, #24
 800986c:	2100      	movs	r1, #0
 800986e:	4618      	mov	r0, r3
 8009870:	f000 ff2d 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009874:	233f      	movs	r3, #63	@ 0x3f
 8009876:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800987a:	2386      	movs	r3, #134	@ 0x86
 800987c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009880:	f107 0310 	add.w	r3, r7, #16
 8009884:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009888:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800988c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009890:	f107 030f 	add.w	r3, r7, #15
 8009894:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009898:	2301      	movs	r3, #1
 800989a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800989e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80098a2:	2100      	movs	r1, #0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f001 f99b 	bl	800abe0 <hci_send_req>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	da01      	bge.n	80098b4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80098b0:	23ff      	movs	r3, #255	@ 0xff
 80098b2:	e004      	b.n	80098be <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80098b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098bc:	781b      	ldrb	r3, [r3, #0]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bdb0      	pop	{r4, r5, r7, pc}

080098c8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b0cc      	sub	sp, #304	@ 0x130
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4602      	mov	r2, r0
 80098d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80098d8:	6019      	str	r1, [r3, #0]
 80098da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098de:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80098e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80098e4:	f107 0310 	add.w	r3, r7, #16
 80098e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80098ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098f4:	2200      	movs	r2, #0
 80098f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80098fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009902:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009906:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800990a:	8812      	ldrh	r2, [r2, #0]
 800990c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800990e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009912:	3302      	adds	r3, #2
 8009914:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8009918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800991c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009920:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800992a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800992e:	3304      	adds	r3, #4
 8009930:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009934:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009938:	2218      	movs	r2, #24
 800993a:	2100      	movs	r1, #0
 800993c:	4618      	mov	r0, r3
 800993e:	f000 fec6 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009942:	233f      	movs	r3, #63	@ 0x3f
 8009944:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8009948:	2388      	movs	r3, #136	@ 0x88
 800994a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800994e:	f107 0310 	add.w	r3, r7, #16
 8009952:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009956:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800995a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800995e:	f107 030f 	add.w	r3, r7, #15
 8009962:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009966:	2301      	movs	r3, #1
 8009968:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800996c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f001 f934 	bl	800abe0 <hci_send_req>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	da01      	bge.n	8009982 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800997e:	23ff      	movs	r3, #255	@ 0xff
 8009980:	e004      	b.n	800998c <aci_gap_pass_key_resp+0xc4>
  return status;
 8009982:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009986:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800998a:	781b      	ldrb	r3, [r3, #0]
}
 800998c:	4618      	mov	r0, r3
 800998e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009996:	b590      	push	{r4, r7, lr}
 8009998:	b0cd      	sub	sp, #308	@ 0x134
 800999a:	af00      	add	r7, sp, #0
 800999c:	4604      	mov	r4, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099a6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099b0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80099b4:	4622      	mov	r2, r4
 80099b6:	701a      	strb	r2, [r3, #0]
 80099b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099bc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80099c0:	4602      	mov	r2, r0
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099c8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80099cc:	460a      	mov	r2, r1
 80099ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80099d0:	f107 0310 	add.w	r3, r7, #16
 80099d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80099d8:	f107 0308 	add.w	r3, r7, #8
 80099dc:	2207      	movs	r2, #7
 80099de:	2100      	movs	r1, #0
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fe74 	bl	800a6ce <Osal_MemSet>
  int index_input = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80099ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099f4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80099f8:	7812      	ldrb	r2, [r2, #0]
 80099fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a00:	3301      	adds	r3, #1
 8009a02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a0e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009a12:	7812      	ldrb	r2, [r2, #0]
 8009a14:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a28:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009a2c:	7812      	ldrb	r2, [r2, #0]
 8009a2e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009a30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a34:	3301      	adds	r3, #1
 8009a36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a3e:	2218      	movs	r2, #24
 8009a40:	2100      	movs	r1, #0
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 fe43 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a48:	233f      	movs	r3, #63	@ 0x3f
 8009a4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8009a4e:	238a      	movs	r3, #138	@ 0x8a
 8009a50:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009a54:	f107 0310 	add.w	r3, r7, #16
 8009a58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009a5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009a60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009a64:	f107 0308 	add.w	r3, r7, #8
 8009a68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009a6c:	2307      	movs	r3, #7
 8009a6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f001 f8b1 	bl	800abe0 <hci_send_req>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da01      	bge.n	8009a88 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009a84:	23ff      	movs	r3, #255	@ 0xff
 8009a86:	e02e      	b.n	8009ae6 <aci_gap_init+0x150>
  if ( resp.Status )
 8009a88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a8c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <aci_gap_init+0x10c>
    return resp.Status;
 8009a96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	e021      	b.n	8009ae6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009aa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009aa6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009aaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ab4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009abc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ac0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009ac4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009ace:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009ad0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ad4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009ad8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009ae2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd90      	pop	{r4, r7, pc}

08009af0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b0cc      	sub	sp, #304	@ 0x130
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4602      	mov	r2, r0
 8009af8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009afc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009b00:	6019      	str	r1, [r3, #0]
 8009b02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b06:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009b0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009b0c:	f107 0310 	add.w	r3, r7, #16
 8009b10:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009b14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009b2e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009b32:	7812      	ldrb	r2, [r2, #0]
 8009b34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b44:	1c58      	adds	r0, r3, #1
 8009b46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b4a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009b4e:	781a      	ldrb	r2, [r3, #0]
 8009b50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b54:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009b58:	6819      	ldr	r1, [r3, #0]
 8009b5a:	f000 fda8 	bl	800a6ae <Osal_MemCpy>
  index_input += AdvDataLen;
 8009b5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009b62:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b76:	2218      	movs	r2, #24
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 fda7 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b80:	233f      	movs	r3, #63	@ 0x3f
 8009b82:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009b86:	238e      	movs	r3, #142	@ 0x8e
 8009b88:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009b8c:	f107 0310 	add.w	r3, r7, #16
 8009b90:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b98:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009b9c:	f107 030f 	add.w	r3, r7, #15
 8009ba0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009baa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009bae:	2100      	movs	r1, #0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 f815 	bl	800abe0 <hci_send_req>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	da01      	bge.n	8009bc0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009bbc:	23ff      	movs	r3, #255	@ 0xff
 8009bbe:	e004      	b.n	8009bca <aci_gap_update_adv_data+0xda>
  return status;
 8009bc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bc4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009bc8:	781b      	ldrb	r3, [r3, #0]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bde:	f107 0308 	add.w	r3, r7, #8
 8009be2:	2218      	movs	r2, #24
 8009be4:	2100      	movs	r1, #0
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fd71 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bec:	233f      	movs	r3, #63	@ 0x3f
 8009bee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009bf0:	2392      	movs	r3, #146	@ 0x92
 8009bf2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009bf4:	1dfb      	adds	r3, r7, #7
 8009bf6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bfc:	f107 0308 	add.w	r3, r7, #8
 8009c00:	2100      	movs	r1, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 ffec 	bl	800abe0 <hci_send_req>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da01      	bge.n	8009c12 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009c0e:	23ff      	movs	r3, #255	@ 0xff
 8009c10:	e000      	b.n	8009c14 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009c12:	79fb      	ldrb	r3, [r7, #7]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3720      	adds	r7, #32
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b0cc      	sub	sp, #304	@ 0x130
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4602      	mov	r2, r0
 8009c24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c28:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009c2c:	801a      	strh	r2, [r3, #0]
 8009c2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c32:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009c36:	460a      	mov	r2, r1
 8009c38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009c3a:	f107 0310 	add.w	r3, r7, #16
 8009c3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009c42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c5c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009c60:	8812      	ldrh	r2, [r2, #0]
 8009c62:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c68:	3302      	adds	r3, #2
 8009c6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c72:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c76:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009c7a:	7812      	ldrb	r2, [r2, #0]
 8009c7c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c82:	3301      	adds	r3, #1
 8009c84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c8c:	2218      	movs	r2, #24
 8009c8e:	2100      	movs	r1, #0
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fd1c 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c96:	233f      	movs	r3, #63	@ 0x3f
 8009c98:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009c9c:	23a5      	movs	r3, #165	@ 0xa5
 8009c9e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009ca2:	f107 0310 	add.w	r3, r7, #16
 8009ca6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009caa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009cae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009cb2:	f107 030f 	add.w	r3, r7, #15
 8009cb6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 ff8a 	bl	800abe0 <hci_send_req>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da01      	bge.n	8009cd6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009cd2:	23ff      	movs	r3, #255	@ 0xff
 8009cd4:	e004      	b.n	8009ce0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009cd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cda:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009cde:	781b      	ldrb	r3, [r3, #0]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b088      	sub	sp, #32
 8009cee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cf4:	f107 0308 	add.w	r3, r7, #8
 8009cf8:	2218      	movs	r2, #24
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fce6 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d02:	233f      	movs	r3, #63	@ 0x3f
 8009d04:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009d06:	f240 1301 	movw	r3, #257	@ 0x101
 8009d0a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009d0c:	1dfb      	adds	r3, r7, #7
 8009d0e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009d10:	2301      	movs	r3, #1
 8009d12:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d14:	f107 0308 	add.w	r3, r7, #8
 8009d18:	2100      	movs	r1, #0
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 ff60 	bl	800abe0 <hci_send_req>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	da01      	bge.n	8009d2a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009d26:	23ff      	movs	r3, #255	@ 0xff
 8009d28:	e000      	b.n	8009d2c <aci_gatt_init+0x42>
  return status;
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b0cf      	sub	sp, #316	@ 0x13c
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8009d40:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8009d44:	6001      	str	r1, [r0, #0]
 8009d46:	4610      	mov	r0, r2
 8009d48:	4619      	mov	r1, r3
 8009d4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d4e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009d52:	4622      	mov	r2, r4
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d5a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009d5e:	4602      	mov	r2, r0
 8009d60:	701a      	strb	r2, [r3, #0]
 8009d62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d66:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009d6a:	460a      	mov	r2, r1
 8009d6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009d6e:	f107 0310 	add.w	r3, r7, #16
 8009d72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009d76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d7a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d00a      	beq.n	8009d9a <aci_gatt_add_service+0x66>
 8009d84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009d88:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d101      	bne.n	8009d96 <aci_gatt_add_service+0x62>
 8009d92:	2311      	movs	r3, #17
 8009d94:	e002      	b.n	8009d9c <aci_gatt_add_service+0x68>
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <aci_gatt_add_service+0x68>
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	f107 0210 	add.w	r2, r7, #16
 8009da0:	4413      	add	r3, r2
 8009da2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	2203      	movs	r2, #3
 8009dac:	2100      	movs	r1, #0
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fc8d 	bl	800a6ce <Osal_MemSet>
  int index_input = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009dba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009dbe:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009dc2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009dc6:	7812      	ldrb	r2, [r2, #0]
 8009dc8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dce:	3301      	adds	r3, #1
 8009dd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009dd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009dd8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d002      	beq.n	8009de8 <aci_gatt_add_service+0xb4>
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d004      	beq.n	8009df0 <aci_gatt_add_service+0xbc>
 8009de6:	e007      	b.n	8009df8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009de8:	2302      	movs	r3, #2
 8009dea:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009dee:	e005      	b.n	8009dfc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009df0:	2310      	movs	r3, #16
 8009df2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009df6:	e001      	b.n	8009dfc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009df8:	2397      	movs	r3, #151	@ 0x97
 8009dfa:	e06c      	b.n	8009ed6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009dfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009e00:	1c58      	adds	r0, r3, #1
 8009e02:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8009e06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009e0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009e0e:	6819      	ldr	r1, [r3, #0]
 8009e10:	f000 fc4d 	bl	800a6ae <Osal_MemCpy>
    index_input += size;
 8009e14:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8009e18:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e26:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009e2a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009e2e:	7812      	ldrb	r2, [r2, #0]
 8009e30:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009e32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e36:	3301      	adds	r3, #1
 8009e38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e40:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009e44:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009e48:	7812      	ldrb	r2, [r2, #0]
 8009e4a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009e4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e50:	3301      	adds	r3, #1
 8009e52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e5a:	2218      	movs	r2, #24
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fc35 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e64:	233f      	movs	r3, #63	@ 0x3f
 8009e66:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8009e6a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009e6e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009e72:	f107 0310 	add.w	r3, r7, #16
 8009e76:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009e82:	f107 030c 	add.w	r3, r7, #12
 8009e86:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 fea2 	bl	800abe0 <hci_send_req>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	da01      	bge.n	8009ea6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009ea2:	23ff      	movs	r3, #255	@ 0xff
 8009ea4:	e017      	b.n	8009ed6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009ea6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009eaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d005      	beq.n	8009ec0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009eb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	e00a      	b.n	8009ed6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009ec0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009ec4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009ec8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009ed2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd90      	pop	{r4, r7, pc}

08009ee0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009ee0:	b590      	push	{r4, r7, lr}
 8009ee2:	b0d1      	sub	sp, #324	@ 0x144
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	4608      	mov	r0, r1
 8009eea:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8009eee:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009ef2:	600a      	str	r2, [r1, #0]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009efa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009efe:	4622      	mov	r2, r4
 8009f00:	801a      	strh	r2, [r3, #0]
 8009f02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f06:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f12:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8009f16:	460a      	mov	r2, r1
 8009f18:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009f1a:	f107 0318 	add.w	r3, r7, #24
 8009f1e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009f22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f26:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d00a      	beq.n	8009f46 <aci_gatt_add_char+0x66>
 8009f30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f34:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d101      	bne.n	8009f42 <aci_gatt_add_char+0x62>
 8009f3e:	2313      	movs	r3, #19
 8009f40:	e002      	b.n	8009f48 <aci_gatt_add_char+0x68>
 8009f42:	2303      	movs	r3, #3
 8009f44:	e000      	b.n	8009f48 <aci_gatt_add_char+0x68>
 8009f46:	2305      	movs	r3, #5
 8009f48:	f107 0218 	add.w	r2, r7, #24
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009f52:	f107 0314 	add.w	r3, r7, #20
 8009f56:	2203      	movs	r2, #3
 8009f58:	2100      	movs	r1, #0
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f000 fbb7 	bl	800a6ce <Osal_MemSet>
  int index_input = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8009f66:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009f6a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009f6e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009f72:	8812      	ldrh	r2, [r2, #0]
 8009f74:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f76:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009f7a:	3302      	adds	r3, #2
 8009f7c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009f80:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009f84:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009f88:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8009f8c:	7812      	ldrb	r2, [r2, #0]
 8009f8e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009f90:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009f94:	3301      	adds	r3, #1
 8009f96:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009f9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009f9e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d002      	beq.n	8009fae <aci_gatt_add_char+0xce>
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d004      	beq.n	8009fb6 <aci_gatt_add_char+0xd6>
 8009fac:	e007      	b.n	8009fbe <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009fae:	2302      	movs	r3, #2
 8009fb0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009fb4:	e005      	b.n	8009fc2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009fb6:	2310      	movs	r3, #16
 8009fb8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8009fbc:	e001      	b.n	8009fc2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009fbe:	2397      	movs	r3, #151	@ 0x97
 8009fc0:	e091      	b.n	800a0e6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009fc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009fc6:	1cd8      	adds	r0, r3, #3
 8009fc8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8009fcc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009fd0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009fd4:	6819      	ldr	r1, [r3, #0]
 8009fd6:	f000 fb6a 	bl	800a6ae <Osal_MemCpy>
    index_input += size;
 8009fda:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009fde:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009fe8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009fec:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009ff0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8009ff4:	8812      	ldrh	r2, [r2, #0]
 8009ff6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009ff8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a002:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a006:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a00a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a00c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a010:	3301      	adds	r3, #1
 800a012:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a016:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a01a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a01e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a020:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a024:	3301      	adds	r3, #1
 800a026:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a02a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a02e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800a032:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a034:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a038:	3301      	adds	r3, #1
 800a03a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a03e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a042:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800a046:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a048:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a04c:	3301      	adds	r3, #1
 800a04e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a052:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a056:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800a05a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a05c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a060:	3301      	adds	r3, #1
 800a062:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a066:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a06a:	2218      	movs	r2, #24
 800a06c:	2100      	movs	r1, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fb2d 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 800a074:	233f      	movs	r3, #63	@ 0x3f
 800a076:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800a07a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a07e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a082:	f107 0318 	add.w	r3, r7, #24
 800a086:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a08a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a08e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a092:	f107 0314 	add.w	r3, r7, #20
 800a096:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a09a:	2303      	movs	r3, #3
 800a09c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fd9a 	bl	800abe0 <hci_send_req>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	da01      	bge.n	800a0b6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a0b2:	23ff      	movs	r3, #255	@ 0xff
 800a0b4:	e017      	b.n	800a0e6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a0b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a0ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a0c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a0c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	e00a      	b.n	800a0e6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a0d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a0d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a0d8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800a0e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd90      	pop	{r4, r7, pc}

0800a0f0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a0f0:	b5b0      	push	{r4, r5, r7, lr}
 800a0f2:	b0cc      	sub	sp, #304	@ 0x130
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a102:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a106:	462a      	mov	r2, r5
 800a108:	801a      	strh	r2, [r3, #0]
 800a10a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a10e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a112:	4622      	mov	r2, r4
 800a114:	801a      	strh	r2, [r3, #0]
 800a116:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a11a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a11e:	4602      	mov	r2, r0
 800a120:	701a      	strb	r2, [r3, #0]
 800a122:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a126:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a12a:	460a      	mov	r2, r1
 800a12c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a12e:	f107 0310 	add.w	r3, r7, #16
 800a132:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a136:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a13a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a13e:	2200      	movs	r2, #0
 800a140:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800a148:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a14c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a150:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a154:	8812      	ldrh	r2, [r2, #0]
 800a156:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a158:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a15c:	3302      	adds	r3, #2
 800a15e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a162:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a166:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a16a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a16e:	8812      	ldrh	r2, [r2, #0]
 800a170:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a172:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a176:	3302      	adds	r3, #2
 800a178:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800a17c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a180:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a184:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a188:	7812      	ldrb	r2, [r2, #0]
 800a18a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a18c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a190:	3301      	adds	r3, #1
 800a192:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a196:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a19a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a19e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a1a2:	7812      	ldrb	r2, [r2, #0]
 800a1a4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a1a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a1b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1b4:	1d98      	adds	r0, r3, #6
 800a1b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1ba:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a1c6:	f000 fa72 	bl	800a6ae <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a1ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1ce:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a1d8:	4413      	add	r3, r2
 800a1da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1e2:	2218      	movs	r2, #24
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 fa71 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 800a1ec:	233f      	movs	r3, #63	@ 0x3f
 800a1ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a1f2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a1f6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a1fa:	f107 0310 	add.w	r3, r7, #16
 800a1fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a202:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a206:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a20a:	f107 030f 	add.w	r3, r7, #15
 800a20e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a212:	2301      	movs	r3, #1
 800a214:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a218:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a21c:	2100      	movs	r1, #0
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 fcde 	bl	800abe0 <hci_send_req>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	da01      	bge.n	800a22e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a22a:	23ff      	movs	r3, #255	@ 0xff
 800a22c:	e004      	b.n	800a238 <aci_gatt_update_char_value+0x148>
  return status;
 800a22e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a232:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a236:	781b      	ldrb	r3, [r3, #0]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a23e:	46bd      	mov	sp, r7
 800a240:	bdb0      	pop	{r4, r5, r7, pc}

0800a242 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b0cc      	sub	sp, #304	@ 0x130
 800a246:	af00      	add	r7, sp, #0
 800a248:	4602      	mov	r2, r0
 800a24a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a24e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a252:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a254:	f107 0310 	add.w	r3, r7, #16
 800a258:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a25c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a260:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a26e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a272:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a276:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a27a:	8812      	ldrh	r2, [r2, #0]
 800a27c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a27e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a282:	3302      	adds	r3, #2
 800a284:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a288:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a28c:	2218      	movs	r2, #24
 800a28e:	2100      	movs	r1, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fa1c 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 800a296:	233f      	movs	r3, #63	@ 0x3f
 800a298:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a29c:	f240 1325 	movw	r3, #293	@ 0x125
 800a2a0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a2a4:	f107 0310 	add.w	r3, r7, #16
 800a2a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a2ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a2b4:	f107 030f 	add.w	r3, r7, #15
 800a2b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 fc89 	bl	800abe0 <hci_send_req>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	da01      	bge.n	800a2d8 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a2d4:	23ff      	movs	r3, #255	@ 0xff
 800a2d6:	e004      	b.n	800a2e2 <aci_gatt_confirm_indication+0xa0>
  return status;
 800a2d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a2dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a2e0:	781b      	ldrb	r3, [r3, #0]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b0cc      	sub	sp, #304	@ 0x130
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a2f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a300:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a304:	4602      	mov	r2, r0
 800a306:	701a      	strb	r2, [r3, #0]
 800a308:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a30c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a310:	460a      	mov	r2, r1
 800a312:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a314:	f107 0310 	add.w	r3, r7, #16
 800a318:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a31c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a320:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a324:	2200      	movs	r2, #0
 800a326:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a32e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a332:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a336:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a33a:	7812      	ldrb	r2, [r2, #0]
 800a33c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a33e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a342:	3301      	adds	r3, #1
 800a344:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800a348:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a34c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a350:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a354:	7812      	ldrb	r2, [r2, #0]
 800a356:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a358:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a35c:	3301      	adds	r3, #1
 800a35e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a362:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a366:	1c98      	adds	r0, r3, #2
 800a368:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a36c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a370:	781a      	ldrb	r2, [r3, #0]
 800a372:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a376:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a37a:	6819      	ldr	r1, [r3, #0]
 800a37c:	f000 f997 	bl	800a6ae <Osal_MemCpy>
  index_input += Length;
 800a380:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a384:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a38e:	4413      	add	r3, r2
 800a390:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a394:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a398:	2218      	movs	r2, #24
 800a39a:	2100      	movs	r1, #0
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 f996 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 800a3a2:	233f      	movs	r3, #63	@ 0x3f
 800a3a4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a3a8:	230c      	movs	r3, #12
 800a3aa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a3ae:	f107 0310 	add.w	r3, r7, #16
 800a3b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a3b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a3ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a3be:	f107 030f 	add.w	r3, r7, #15
 800a3c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 fc04 	bl	800abe0 <hci_send_req>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	da01      	bge.n	800a3e2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a3de:	23ff      	movs	r3, #255	@ 0xff
 800a3e0:	e004      	b.n	800a3ec <aci_hal_write_config_data+0x100>
  return status;
 800a3e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a3ea:	781b      	ldrb	r3, [r3, #0]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b0cc      	sub	sp, #304	@ 0x130
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a402:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a406:	701a      	strb	r2, [r3, #0]
 800a408:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a40c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a410:	460a      	mov	r2, r1
 800a412:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a414:	f107 0310 	add.w	r3, r7, #16
 800a418:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a41c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a420:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a424:	2200      	movs	r2, #0
 800a426:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a42e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a432:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a436:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a43a:	7812      	ldrb	r2, [r2, #0]
 800a43c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a43e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a442:	3301      	adds	r3, #1
 800a444:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a448:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a44c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a450:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a454:	7812      	ldrb	r2, [r2, #0]
 800a456:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a458:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a45c:	3301      	adds	r3, #1
 800a45e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a462:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a466:	2218      	movs	r2, #24
 800a468:	2100      	movs	r1, #0
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 f92f 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 800a470:	233f      	movs	r3, #63	@ 0x3f
 800a472:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a476:	230f      	movs	r3, #15
 800a478:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a47c:	f107 0310 	add.w	r3, r7, #16
 800a480:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a484:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a488:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a48c:	f107 030f 	add.w	r3, r7, #15
 800a490:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a494:	2301      	movs	r3, #1
 800a496:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a49a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a49e:	2100      	movs	r1, #0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fb9d 	bl	800abe0 <hci_send_req>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	da01      	bge.n	800a4b0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a4ac:	23ff      	movs	r3, #255	@ 0xff
 800a4ae:	e004      	b.n	800a4ba <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a4b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a4b8:	781b      	ldrb	r3, [r3, #0]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b0cc      	sub	sp, #304	@ 0x130
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4d0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a4d4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a4d6:	f107 0310 	add.w	r3, r7, #16
 800a4da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a4de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a4f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a4f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a4f8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a4fc:	8812      	ldrh	r2, [r2, #0]
 800a4fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a500:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a504:	3302      	adds	r3, #2
 800a506:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a50a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a50e:	2218      	movs	r2, #24
 800a510:	2100      	movs	r1, #0
 800a512:	4618      	mov	r0, r3
 800a514:	f000 f8db 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x3f;
 800a518:	233f      	movs	r3, #63	@ 0x3f
 800a51a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a51e:	2318      	movs	r3, #24
 800a520:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a524:	f107 0310 	add.w	r3, r7, #16
 800a528:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a52c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a530:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a534:	f107 030f 	add.w	r3, r7, #15
 800a538:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a53c:	2301      	movs	r3, #1
 800a53e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a542:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a546:	2100      	movs	r1, #0
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 fb49 	bl	800abe0 <hci_send_req>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	da01      	bge.n	800a558 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a554:	23ff      	movs	r3, #255	@ 0xff
 800a556:	e004      	b.n	800a562 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a558:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a55c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a560:	781b      	ldrb	r3, [r3, #0]
}
 800a562:	4618      	mov	r0, r3
 800a564:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b088      	sub	sp, #32
 800a570:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a576:	f107 0308 	add.w	r3, r7, #8
 800a57a:	2218      	movs	r2, #24
 800a57c:	2100      	movs	r1, #0
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 f8a5 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x03;
 800a584:	2303      	movs	r3, #3
 800a586:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a588:	2303      	movs	r3, #3
 800a58a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a58c:	1dfb      	adds	r3, r7, #7
 800a58e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a590:	2301      	movs	r3, #1
 800a592:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a594:	f107 0308 	add.w	r3, r7, #8
 800a598:	2100      	movs	r1, #0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fb20 	bl	800abe0 <hci_send_req>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	da01      	bge.n	800a5aa <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a5a6:	23ff      	movs	r3, #255	@ 0xff
 800a5a8:	e000      	b.n	800a5ac <hci_reset+0x40>
  return status;
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3720      	adds	r7, #32
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a5b4:	b590      	push	{r4, r7, lr}
 800a5b6:	b0cd      	sub	sp, #308	@ 0x134
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5c4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	701a      	strb	r2, [r3, #0]
 800a5cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5d0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	701a      	strb	r2, [r3, #0]
 800a5d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5dc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a5e0:	460a      	mov	r2, r1
 800a5e2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a5e4:	f107 0310 	add.w	r3, r7, #16
 800a5e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a5ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a5fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a602:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a606:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a60e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a612:	3301      	adds	r3, #1
 800a614:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a618:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a61c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a620:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a624:	7812      	ldrb	r2, [r2, #0]
 800a626:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a628:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a62c:	3301      	adds	r3, #1
 800a62e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a632:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a636:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a63a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a63e:	7812      	ldrb	r2, [r2, #0]
 800a640:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a642:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a646:	3301      	adds	r3, #1
 800a648:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a64c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a650:	2218      	movs	r2, #24
 800a652:	2100      	movs	r1, #0
 800a654:	4618      	mov	r0, r3
 800a656:	f000 f83a 	bl	800a6ce <Osal_MemSet>
  rq.ogf = 0x08;
 800a65a:	2308      	movs	r3, #8
 800a65c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a660:	2331      	movs	r3, #49	@ 0x31
 800a662:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a666:	f107 0310 	add.w	r3, r7, #16
 800a66a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a66e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a672:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a676:	f107 030f 	add.w	r3, r7, #15
 800a67a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a67e:	2301      	movs	r3, #1
 800a680:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a688:	2100      	movs	r1, #0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 faa8 	bl	800abe0 <hci_send_req>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	da01      	bge.n	800a69a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a696:	23ff      	movs	r3, #255	@ 0xff
 800a698:	e004      	b.n	800a6a4 <hci_le_set_default_phy+0xf0>
  return status;
 800a69a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a69e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a6a2:	781b      	ldrb	r3, [r3, #0]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd90      	pop	{r4, r7, pc}

0800a6ae <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	68b9      	ldr	r1, [r7, #8]
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f002 fc2b 	bl	800cf1a <memcpy>
 800a6c4:	4603      	mov	r3, r0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	68b9      	ldr	r1, [r7, #8]
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f002 fba0 	bl	800ce24 <memset>
 800a6e4:	4603      	mov	r3, r0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	af00      	add	r7, sp, #0
  return;
 800a6f2:	bf00      	nop
}
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	af00      	add	r7, sp, #0
  return;
 800a700:	bf00      	nop
}
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a70a:	b480      	push	{r7}
 800a70c:	af00      	add	r7, sp, #0
  return;
 800a70e:	bf00      	nop
}
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a718:	b480      	push	{r7}
 800a71a:	af00      	add	r7, sp, #0
  return;
 800a71c:	bf00      	nop
}
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a726:	b480      	push	{r7}
 800a728:	af00      	add	r7, sp, #0
  return;
 800a72a:	bf00      	nop
}
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  return;
 800a738:	bf00      	nop
}
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a742:	b480      	push	{r7}
 800a744:	af00      	add	r7, sp, #0
  return;
 800a746:	bf00      	nop
}
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
  return;
 800a754:	bf00      	nop
}
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a75e:	b480      	push	{r7}
 800a760:	af00      	add	r7, sp, #0
  return;
 800a762:	bf00      	nop
}
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a76c:	b480      	push	{r7}
 800a76e:	af00      	add	r7, sp, #0
  return;
 800a770:	bf00      	nop
}
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a77a:	b480      	push	{r7}
 800a77c:	af00      	add	r7, sp, #0
  return;
 800a77e:	bf00      	nop
}
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a788:	b480      	push	{r7}
 800a78a:	af00      	add	r7, sp, #0
  return;
 800a78c:	bf00      	nop
}
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a796:	b480      	push	{r7}
 800a798:	af00      	add	r7, sp, #0
  return;
 800a79a:	bf00      	nop
}
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	af00      	add	r7, sp, #0
  return;
 800a7a8:	bf00      	nop
}
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	af00      	add	r7, sp, #0
  return;
 800a7b6:	bf00      	nop
}
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
  return;
 800a7c4:	bf00      	nop
}
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	af00      	add	r7, sp, #0
  return;
 800a7d2:	bf00      	nop
}
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a7e0:	4b04      	ldr	r3, [pc, #16]	@ (800a7f4 <SVCCTL_Init+0x18>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a7e6:	4b04      	ldr	r3, [pc, #16]	@ (800a7f8 <SVCCTL_Init+0x1c>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a7ec:	f000 f806 	bl	800a7fc <SVCCTL_SvcInit>

  return;
 800a7f0:	bf00      	nop
}
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20000088 	.word	0x20000088
 800a7f8:	200000a8 	.word	0x200000a8

0800a7fc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  BAS_Init();
 800a800:	f7ff ff75 	bl	800a6ee <BAS_Init>

  BLS_Init();
 800a804:	f7ff ff7a 	bl	800a6fc <BLS_Init>

  CRS_STM_Init();
 800a808:	f7ff ff7f 	bl	800a70a <CRS_STM_Init>

  DIS_Init();
 800a80c:	f7ff ff84 	bl	800a718 <DIS_Init>

  EDS_STM_Init();
 800a810:	f7ff ff89 	bl	800a726 <EDS_STM_Init>

  HIDS_Init();
 800a814:	f7ff ff8e 	bl	800a734 <HIDS_Init>

  HRS_Init();
 800a818:	f7ff ff93 	bl	800a742 <HRS_Init>

  HTS_Init();
 800a81c:	f7ff ff98 	bl	800a750 <HTS_Init>

  IAS_Init();
 800a820:	f7ff ff9d 	bl	800a75e <IAS_Init>

  LLS_Init();
 800a824:	f7ff ffa2 	bl	800a76c <LLS_Init>

  TPS_Init();
 800a828:	f7ff ffa7 	bl	800a77a <TPS_Init>

  MOTENV_STM_Init();
 800a82c:	f7ff ffac 	bl	800a788 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a830:	f7ff ffb1 	bl	800a796 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a834:	f7ff ffb6 	bl	800a7a4 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a838:	f7ff ffbb 	bl	800a7b2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a83c:	f7ff ffc7 	bl	800a7ce <BVOPUS_STM_Init>

  MESH_Init();
 800a840:	f7ff ffbe 	bl	800a7c0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a844:	f001 fba2 	bl	800bf8c <SVCCTL_InitCustomSvc>
  
  return;
 800a848:	bf00      	nop
}
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a854:	4b09      	ldr	r3, [pc, #36]	@ (800a87c <SVCCTL_RegisterSvcHandler+0x30>)
 800a856:	7f1b      	ldrb	r3, [r3, #28]
 800a858:	4619      	mov	r1, r3
 800a85a:	4a08      	ldr	r2, [pc, #32]	@ (800a87c <SVCCTL_RegisterSvcHandler+0x30>)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a862:	4b06      	ldr	r3, [pc, #24]	@ (800a87c <SVCCTL_RegisterSvcHandler+0x30>)
 800a864:	7f1b      	ldrb	r3, [r3, #28]
 800a866:	3301      	adds	r3, #1
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	4b04      	ldr	r3, [pc, #16]	@ (800a87c <SVCCTL_RegisterSvcHandler+0x30>)
 800a86c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a86e:	bf00      	nop
}
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	20000088 	.word	0x20000088

0800a880 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	3301      	adds	r3, #1
 800a88c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a88e:	2300      	movs	r3, #0
 800a890:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2bff      	cmp	r3, #255	@ 0xff
 800a898:	d125      	bne.n	800a8e6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	3302      	adds	r3, #2
 800a89e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a8aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8ae:	d118      	bne.n	800a8e2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	757b      	strb	r3, [r7, #21]
 800a8b4:	e00d      	b.n	800a8d2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a8b6:	7d7b      	ldrb	r3, [r7, #21]
 800a8b8:	4a1a      	ldr	r2, [pc, #104]	@ (800a924 <SVCCTL_UserEvtRx+0xa4>)
 800a8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	4798      	blx	r3
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d108      	bne.n	800a8de <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a8cc:	7d7b      	ldrb	r3, [r7, #21]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	757b      	strb	r3, [r7, #21]
 800a8d2:	4b14      	ldr	r3, [pc, #80]	@ (800a924 <SVCCTL_UserEvtRx+0xa4>)
 800a8d4:	7f1b      	ldrb	r3, [r3, #28]
 800a8d6:	7d7a      	ldrb	r2, [r7, #21]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d3ec      	bcc.n	800a8b6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a8dc:	e002      	b.n	800a8e4 <SVCCTL_UserEvtRx+0x64>
              break;
 800a8de:	bf00      	nop
          break;
 800a8e0:	e000      	b.n	800a8e4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a8e2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a8e4:	e000      	b.n	800a8e8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a8e6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d00f      	beq.n	800a90e <SVCCTL_UserEvtRx+0x8e>
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	dc10      	bgt.n	800a914 <SVCCTL_UserEvtRx+0x94>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <SVCCTL_UserEvtRx+0x7c>
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d006      	beq.n	800a908 <SVCCTL_UserEvtRx+0x88>
 800a8fa:	e00b      	b.n	800a914 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fffb 	bl	800b8f8 <SVCCTL_App_Notification>
 800a902:	4603      	mov	r3, r0
 800a904:	75bb      	strb	r3, [r7, #22]
      break;
 800a906:	e008      	b.n	800a91a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a908:	2301      	movs	r3, #1
 800a90a:	75bb      	strb	r3, [r7, #22]
      break;
 800a90c:	e005      	b.n	800a91a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a90e:	2300      	movs	r3, #0
 800a910:	75bb      	strb	r3, [r7, #22]
      break;
 800a912:	e002      	b.n	800a91a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a914:	2301      	movs	r3, #1
 800a916:	75bb      	strb	r3, [r7, #22]
      break;
 800a918:	bf00      	nop
  }

  return (return_status);
 800a91a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	20000088 	.word	0x20000088

0800a928 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a930:	f107 030c 	add.w	r3, r7, #12
 800a934:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	212e      	movs	r1, #46	@ 0x2e
 800a940:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800a944:	f000 fae8 	bl	800af18 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	330b      	adds	r3, #11
 800a94c:	78db      	ldrb	r3, [r3, #3]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3720      	adds	r7, #32
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b088      	sub	sp, #32
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a95e:	f107 030c 	add.w	r3, r7, #12
 800a962:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	210f      	movs	r1, #15
 800a96e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800a972:	f000 fad1 	bl	800af18 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	330b      	adds	r3, #11
 800a97a:	78db      	ldrb	r3, [r3, #3]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3720      	adds	r7, #32
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a98c:	f107 030c 	add.w	r3, r7, #12
 800a990:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	2110      	movs	r1, #16
 800a998:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800a99c:	f000 fabc 	bl	800af18 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	330b      	adds	r3, #11
 800a9a4:	78db      	ldrb	r3, [r3, #3]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3720      	adds	r7, #32
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b08b      	sub	sp, #44	@ 0x2c
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a9d8:	4b4a      	ldr	r3, [pc, #296]	@ (800ab04 <SHCI_GetWirelessFwInfo+0x154>)
 800a9da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a9e0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800a9ea:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a44      	ldr	r2, [pc, #272]	@ (800ab08 <SHCI_GetWirelessFwInfo+0x158>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d10f      	bne.n	800aa1c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	69db      	ldr	r3, [r3, #28]
 800aa0c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	617b      	str	r3, [r7, #20]
 800aa1a:	e01a      	b.n	800aa52 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800aa24:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800aa28:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800aa52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa54:	0e1b      	lsrs	r3, r3, #24
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5e:	0c1b      	lsrs	r3, r3, #16
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa68:	0a1b      	lsrs	r3, r3, #8
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	091b      	lsrs	r3, r3, #4
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	f003 030f 	and.w	r3, r3, #15
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800aa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 030f 	and.w	r3, r3, #15
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800aa8e:	6a3b      	ldr	r3, [r7, #32]
 800aa90:	0e1b      	lsrs	r3, r3, #24
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	0c1b      	lsrs	r3, r3, #16
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	0a1b      	lsrs	r3, r3, #8
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	0e1b      	lsrs	r3, r3, #24
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	0c1b      	lsrs	r3, r3, #16
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	0a1b      	lsrs	r3, r3, #8
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	0e1b      	lsrs	r3, r3, #24
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	0c1b      	lsrs	r3, r3, #16
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	372c      	adds	r7, #44	@ 0x2c
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	58004000 	.word	0x58004000
 800ab08:	a94656b9 	.word	0xa94656b9

0800ab0c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	4a08      	ldr	r2, [pc, #32]	@ (800ab3c <hci_init+0x30>)
 800ab1c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ab1e:	4a08      	ldr	r2, [pc, #32]	@ (800ab40 <hci_init+0x34>)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ab24:	4806      	ldr	r0, [pc, #24]	@ (800ab40 <hci_init+0x34>)
 800ab26:	f000 f979 	bl	800ae1c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f8da 	bl	800ace8 <TlInit>

  return;
 800ab34:	bf00      	nop
}
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	2000059c 	.word	0x2000059c
 800ab40:	20000574 	.word	0x20000574

0800ab44 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ab4a:	4822      	ldr	r0, [pc, #136]	@ (800abd4 <hci_user_evt_proc+0x90>)
 800ab4c:	f000 fda8 	bl	800b6a0 <LST_is_empty>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d12b      	bne.n	800abae <hci_user_evt_proc+0x6a>
 800ab56:	4b20      	ldr	r3, [pc, #128]	@ (800abd8 <hci_user_evt_proc+0x94>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d027      	beq.n	800abae <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ab5e:	f107 030c 	add.w	r3, r7, #12
 800ab62:	4619      	mov	r1, r3
 800ab64:	481b      	ldr	r0, [pc, #108]	@ (800abd4 <hci_user_evt_proc+0x90>)
 800ab66:	f000 fe2a 	bl	800b7be <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ab6a:	4b1c      	ldr	r3, [pc, #112]	@ (800abdc <hci_user_evt_proc+0x98>)
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00c      	beq.n	800ab8c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ab76:	2301      	movs	r3, #1
 800ab78:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ab7a:	4b18      	ldr	r3, [pc, #96]	@ (800abdc <hci_user_evt_proc+0x98>)
 800ab7c:	69db      	ldr	r3, [r3, #28]
 800ab7e:	1d3a      	adds	r2, r7, #4
 800ab80:	4610      	mov	r0, r2
 800ab82:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ab84:	793a      	ldrb	r2, [r7, #4]
 800ab86:	4b14      	ldr	r3, [pc, #80]	@ (800abd8 <hci_user_evt_proc+0x94>)
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	e002      	b.n	800ab92 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ab8c:	4b12      	ldr	r3, [pc, #72]	@ (800abd8 <hci_user_evt_proc+0x94>)
 800ab8e:	2201      	movs	r2, #1
 800ab90:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800ab92:	4b11      	ldr	r3, [pc, #68]	@ (800abd8 <hci_user_evt_proc+0x94>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d004      	beq.n	800aba4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fc0d 	bl	800b3bc <TL_MM_EvtDone>
 800aba2:	e004      	b.n	800abae <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4619      	mov	r1, r3
 800aba8:	480a      	ldr	r0, [pc, #40]	@ (800abd4 <hci_user_evt_proc+0x90>)
 800abaa:	f000 fd9b 	bl	800b6e4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800abae:	4809      	ldr	r0, [pc, #36]	@ (800abd4 <hci_user_evt_proc+0x90>)
 800abb0:	f000 fd76 	bl	800b6a0 <LST_is_empty>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d107      	bne.n	800abca <hci_user_evt_proc+0x86>
 800abba:	4b07      	ldr	r3, [pc, #28]	@ (800abd8 <hci_user_evt_proc+0x94>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800abc2:	4804      	ldr	r0, [pc, #16]	@ (800abd4 <hci_user_evt_proc+0x90>)
 800abc4:	f001 f8be 	bl	800bd44 <hci_notify_asynch_evt>
  }


  return;
 800abc8:	bf00      	nop
 800abca:	bf00      	nop
}
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	200000b0 	.word	0x200000b0
 800abd8:	200000bc 	.word	0x200000bc
 800abdc:	20000574 	.word	0x20000574

0800abe0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800abec:	2000      	movs	r0, #0
 800abee:	f000 f8d1 	bl	800ad94 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800abf2:	2300      	movs	r3, #0
 800abf4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	885b      	ldrh	r3, [r3, #2]
 800abfa:	b21b      	sxth	r3, r3
 800abfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac00:	b21a      	sxth	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	029b      	lsls	r3, r3, #10
 800ac08:	b21b      	sxth	r3, r3
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	b21b      	sxth	r3, r3
 800ac0e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800ac10:	4b33      	ldr	r3, [pc, #204]	@ (800ace0 <hci_send_req+0x100>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	b2d9      	uxtb	r1, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	689a      	ldr	r2, [r3, #8]
 800ac20:	8bbb      	ldrh	r3, [r7, #28]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 f890 	bl	800ad48 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ac28:	e04e      	b.n	800acc8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ac2a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800ac2e:	f001 f8a0 	bl	800bd72 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ac32:	e043      	b.n	800acbc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ac34:	f107 030c 	add.w	r3, r7, #12
 800ac38:	4619      	mov	r1, r3
 800ac3a:	482a      	ldr	r0, [pc, #168]	@ (800ace4 <hci_send_req+0x104>)
 800ac3c:	f000 fdbf 	bl	800b7be <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	7a5b      	ldrb	r3, [r3, #9]
 800ac44:	2b0f      	cmp	r3, #15
 800ac46:	d114      	bne.n	800ac72 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	330b      	adds	r3, #11
 800ac4c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	885b      	ldrh	r3, [r3, #2]
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	8bba      	ldrh	r2, [r7, #28]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d104      	bne.n	800ac64 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	7812      	ldrb	r2, [r2, #0]
 800ac62:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	785b      	ldrb	r3, [r3, #1]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d027      	beq.n	800acbc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	77fb      	strb	r3, [r7, #31]
 800ac70:	e024      	b.n	800acbc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	330b      	adds	r3, #11
 800ac76:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	8bba      	ldrh	r2, [r7, #28]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d114      	bne.n	800acb0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	7a9b      	ldrb	r3, [r3, #10]
 800ac8a:	3b03      	subs	r3, #3
 800ac8c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	695a      	ldr	r2, [r3, #20]
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	bfa8      	it	ge
 800ac98:	461a      	movge	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6918      	ldr	r0, [r3, #16]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	1cd9      	adds	r1, r3, #3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	461a      	mov	r2, r3
 800acac:	f002 f935 	bl	800cf1a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800acb8:	2301      	movs	r3, #1
 800acba:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800acbc:	4809      	ldr	r0, [pc, #36]	@ (800ace4 <hci_send_req+0x104>)
 800acbe:	f000 fcef 	bl	800b6a0 <LST_is_empty>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d0b5      	beq.n	800ac34 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800acc8:	7ffb      	ldrb	r3, [r7, #31]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0ad      	beq.n	800ac2a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800acce:	2001      	movs	r0, #1
 800acd0:	f000 f860 	bl	800ad94 <NotifyCmdStatus>

  return 0;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3720      	adds	r7, #32
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	200005a0 	.word	0x200005a0
 800ace4:	20000594 	.word	0x20000594

0800ace8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800acf0:	480f      	ldr	r0, [pc, #60]	@ (800ad30 <TlInit+0x48>)
 800acf2:	f000 fcc5 	bl	800b680 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800acf6:	4a0f      	ldr	r2, [pc, #60]	@ (800ad34 <TlInit+0x4c>)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800acfc:	480e      	ldr	r0, [pc, #56]	@ (800ad38 <TlInit+0x50>)
 800acfe:	f000 fcbf 	bl	800b680 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ad02:	4b0e      	ldr	r3, [pc, #56]	@ (800ad3c <TlInit+0x54>)
 800ad04:	2201      	movs	r2, #1
 800ad06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800ad08:	4b0d      	ldr	r3, [pc, #52]	@ (800ad40 <TlInit+0x58>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00a      	beq.n	800ad26 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800ad14:	4b0b      	ldr	r3, [pc, #44]	@ (800ad44 <TlInit+0x5c>)
 800ad16:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800ad18:	4b09      	ldr	r3, [pc, #36]	@ (800ad40 <TlInit+0x58>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f107 0208 	add.w	r2, r7, #8
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
  }

  return;
 800ad24:	bf00      	nop
 800ad26:	bf00      	nop
}
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000594 	.word	0x20000594
 800ad34:	200000b8 	.word	0x200000b8
 800ad38:	200000b0 	.word	0x200000b0
 800ad3c:	200000bc 	.word	0x200000bc
 800ad40:	20000574 	.word	0x20000574
 800ad44:	0800add5 	.word	0x0800add5

0800ad48 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	603a      	str	r2, [r7, #0]
 800ad52:	80fb      	strh	r3, [r7, #6]
 800ad54:	460b      	mov	r3, r1
 800ad56:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800ad58:	4b0c      	ldr	r3, [pc, #48]	@ (800ad8c <SendCmd+0x44>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	88fa      	ldrh	r2, [r7, #6]
 800ad5e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ad62:	4b0a      	ldr	r3, [pc, #40]	@ (800ad8c <SendCmd+0x44>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	797a      	ldrb	r2, [r7, #5]
 800ad68:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800ad6a:	4b08      	ldr	r3, [pc, #32]	@ (800ad8c <SendCmd+0x44>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	797a      	ldrb	r2, [r7, #5]
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f002 f8d0 	bl	800cf1a <memcpy>

  hciContext.io.Send(0,0);
 800ad7a:	4b05      	ldr	r3, [pc, #20]	@ (800ad90 <SendCmd+0x48>)
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	2100      	movs	r1, #0
 800ad80:	2000      	movs	r0, #0
 800ad82:	4798      	blx	r3

  return;
 800ad84:	bf00      	nop
}
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	200000b8 	.word	0x200000b8
 800ad90:	20000574 	.word	0x20000574

0800ad94 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800ad9e:	79fb      	ldrb	r3, [r7, #7]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d108      	bne.n	800adb6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800ada4:	4b0a      	ldr	r3, [pc, #40]	@ (800add0 <NotifyCmdStatus+0x3c>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00d      	beq.n	800adc8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800adac:	4b08      	ldr	r3, [pc, #32]	@ (800add0 <NotifyCmdStatus+0x3c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2000      	movs	r0, #0
 800adb2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800adb4:	e008      	b.n	800adc8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800adb6:	4b06      	ldr	r3, [pc, #24]	@ (800add0 <NotifyCmdStatus+0x3c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800adbe:	4b04      	ldr	r3, [pc, #16]	@ (800add0 <NotifyCmdStatus+0x3c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2001      	movs	r0, #1
 800adc4:	4798      	blx	r3
  return;
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
}
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	2000059c 	.word	0x2000059c

0800add4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	7a5b      	ldrb	r3, [r3, #9]
 800ade0:	2b0f      	cmp	r3, #15
 800ade2:	d003      	beq.n	800adec <TlEvtReceived+0x18>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7a5b      	ldrb	r3, [r3, #9]
 800ade8:	2b0e      	cmp	r3, #14
 800adea:	d107      	bne.n	800adfc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800adec:	6879      	ldr	r1, [r7, #4]
 800adee:	4809      	ldr	r0, [pc, #36]	@ (800ae14 <TlEvtReceived+0x40>)
 800adf0:	f000 fc9e 	bl	800b730 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800adf4:	2000      	movs	r0, #0
 800adf6:	f000 ffb1 	bl	800bd5c <hci_cmd_resp_release>
 800adfa:	e006      	b.n	800ae0a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	4806      	ldr	r0, [pc, #24]	@ (800ae18 <TlEvtReceived+0x44>)
 800ae00:	f000 fc96 	bl	800b730 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ae04:	4804      	ldr	r0, [pc, #16]	@ (800ae18 <TlEvtReceived+0x44>)
 800ae06:	f000 ff9d 	bl	800bd44 <hci_notify_asynch_evt>
  }

  return;
 800ae0a:	bf00      	nop
}
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20000594 	.word	0x20000594
 800ae18:	200000b0 	.word	0x200000b0

0800ae1c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a05      	ldr	r2, [pc, #20]	@ (800ae3c <hci_register_io_bus+0x20>)
 800ae28:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a04      	ldr	r2, [pc, #16]	@ (800ae40 <hci_register_io_bus+0x24>)
 800ae2e:	611a      	str	r2, [r3, #16]

  return;
 800ae30:	bf00      	nop
}
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	0800b135 	.word	0x0800b135
 800ae40:	0800b19d 	.word	0x0800b19d

0800ae44 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	4a08      	ldr	r2, [pc, #32]	@ (800ae74 <shci_init+0x30>)
 800ae54:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800ae56:	4a08      	ldr	r2, [pc, #32]	@ (800ae78 <shci_init+0x34>)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800ae5c:	4806      	ldr	r0, [pc, #24]	@ (800ae78 <shci_init+0x34>)
 800ae5e:	f000 f915 	bl	800b08c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f898 	bl	800af9c <TlInit>

  return;
 800ae6c:	bf00      	nop
}
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	200005c4 	.word	0x200005c4
 800ae78:	200005a4 	.word	0x200005a4

0800ae7c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ae82:	4822      	ldr	r0, [pc, #136]	@ (800af0c <shci_user_evt_proc+0x90>)
 800ae84:	f000 fc0c 	bl	800b6a0 <LST_is_empty>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d12b      	bne.n	800aee6 <shci_user_evt_proc+0x6a>
 800ae8e:	4b20      	ldr	r3, [pc, #128]	@ (800af10 <shci_user_evt_proc+0x94>)
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d027      	beq.n	800aee6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ae96:	f107 030c 	add.w	r3, r7, #12
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	481b      	ldr	r0, [pc, #108]	@ (800af0c <shci_user_evt_proc+0x90>)
 800ae9e:	f000 fc8e 	bl	800b7be <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800aea2:	4b1c      	ldr	r3, [pc, #112]	@ (800af14 <shci_user_evt_proc+0x98>)
 800aea4:	69db      	ldr	r3, [r3, #28]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00c      	beq.n	800aec4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800aeb2:	4b18      	ldr	r3, [pc, #96]	@ (800af14 <shci_user_evt_proc+0x98>)
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	1d3a      	adds	r2, r7, #4
 800aeb8:	4610      	mov	r0, r2
 800aeba:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800aebc:	793a      	ldrb	r2, [r7, #4]
 800aebe:	4b14      	ldr	r3, [pc, #80]	@ (800af10 <shci_user_evt_proc+0x94>)
 800aec0:	701a      	strb	r2, [r3, #0]
 800aec2:	e002      	b.n	800aeca <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800aec4:	4b12      	ldr	r3, [pc, #72]	@ (800af10 <shci_user_evt_proc+0x94>)
 800aec6:	2201      	movs	r2, #1
 800aec8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800aeca:	4b11      	ldr	r3, [pc, #68]	@ (800af10 <shci_user_evt_proc+0x94>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d004      	beq.n	800aedc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 fa71 	bl	800b3bc <TL_MM_EvtDone>
 800aeda:	e004      	b.n	800aee6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4619      	mov	r1, r3
 800aee0:	480a      	ldr	r0, [pc, #40]	@ (800af0c <shci_user_evt_proc+0x90>)
 800aee2:	f000 fbff 	bl	800b6e4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800aee6:	4809      	ldr	r0, [pc, #36]	@ (800af0c <shci_user_evt_proc+0x90>)
 800aee8:	f000 fbda 	bl	800b6a0 <LST_is_empty>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d107      	bne.n	800af02 <shci_user_evt_proc+0x86>
 800aef2:	4b07      	ldr	r3, [pc, #28]	@ (800af10 <shci_user_evt_proc+0x94>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800aefa:	4804      	ldr	r0, [pc, #16]	@ (800af0c <shci_user_evt_proc+0x90>)
 800aefc:	f7f5 fea6 	bl	8000c4c <shci_notify_asynch_evt>
  }


  return;
 800af00:	bf00      	nop
 800af02:	bf00      	nop
}
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200000c0 	.word	0x200000c0
 800af10:	200000d0 	.word	0x200000d0
 800af14:	200005a4 	.word	0x200005a4

0800af18 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60ba      	str	r2, [r7, #8]
 800af20:	607b      	str	r3, [r7, #4]
 800af22:	4603      	mov	r3, r0
 800af24:	81fb      	strh	r3, [r7, #14]
 800af26:	460b      	mov	r3, r1
 800af28:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800af2a:	2000      	movs	r0, #0
 800af2c:	f000 f868 	bl	800b000 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800af30:	4b17      	ldr	r3, [pc, #92]	@ (800af90 <shci_send+0x78>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	89fa      	ldrh	r2, [r7, #14]
 800af36:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800af3a:	4b15      	ldr	r3, [pc, #84]	@ (800af90 <shci_send+0x78>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	7b7a      	ldrb	r2, [r7, #13]
 800af40:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800af42:	4b13      	ldr	r3, [pc, #76]	@ (800af90 <shci_send+0x78>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	330c      	adds	r3, #12
 800af48:	7b7a      	ldrb	r2, [r7, #13]
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f001 ffe4 	bl	800cf1a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800af52:	4b10      	ldr	r3, [pc, #64]	@ (800af94 <shci_send+0x7c>)
 800af54:	2201      	movs	r2, #1
 800af56:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800af58:	4b0f      	ldr	r3, [pc, #60]	@ (800af98 <shci_send+0x80>)
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	2100      	movs	r1, #0
 800af5e:	2000      	movs	r0, #0
 800af60:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800af62:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800af66:	f7f5 fe88 	bl	8000c7a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f103 0008 	add.w	r0, r3, #8
 800af70:	4b07      	ldr	r3, [pc, #28]	@ (800af90 <shci_send+0x78>)
 800af72:	6819      	ldr	r1, [r3, #0]
 800af74:	4b06      	ldr	r3, [pc, #24]	@ (800af90 <shci_send+0x78>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	789b      	ldrb	r3, [r3, #2]
 800af7a:	3303      	adds	r3, #3
 800af7c:	461a      	mov	r2, r3
 800af7e:	f001 ffcc 	bl	800cf1a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800af82:	2001      	movs	r0, #1
 800af84:	f000 f83c 	bl	800b000 <Cmd_SetStatus>

  return;
 800af88:	bf00      	nop
}
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	200000cc 	.word	0x200000cc
 800af94:	200005c8 	.word	0x200005c8
 800af98:	200005a4 	.word	0x200005a4

0800af9c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800afa4:	4a10      	ldr	r2, [pc, #64]	@ (800afe8 <TlInit+0x4c>)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800afaa:	4810      	ldr	r0, [pc, #64]	@ (800afec <TlInit+0x50>)
 800afac:	f000 fb68 	bl	800b680 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800afb0:	2001      	movs	r0, #1
 800afb2:	f000 f825 	bl	800b000 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800afb6:	4b0e      	ldr	r3, [pc, #56]	@ (800aff0 <TlInit+0x54>)
 800afb8:	2201      	movs	r2, #1
 800afba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800afbc:	4b0d      	ldr	r3, [pc, #52]	@ (800aff4 <TlInit+0x58>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00c      	beq.n	800afde <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800afc8:	4b0b      	ldr	r3, [pc, #44]	@ (800aff8 <TlInit+0x5c>)
 800afca:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800afcc:	4b0b      	ldr	r3, [pc, #44]	@ (800affc <TlInit+0x60>)
 800afce:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800afd0:	4b08      	ldr	r3, [pc, #32]	@ (800aff4 <TlInit+0x58>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f107 020c 	add.w	r2, r7, #12
 800afd8:	4610      	mov	r0, r2
 800afda:	4798      	blx	r3
  }

  return;
 800afdc:	bf00      	nop
 800afde:	bf00      	nop
}
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	200000cc 	.word	0x200000cc
 800afec:	200000c0 	.word	0x200000c0
 800aff0:	200000d0 	.word	0x200000d0
 800aff4:	200005a4 	.word	0x200005a4
 800aff8:	0800b051 	.word	0x0800b051
 800affc:	0800b069 	.word	0x0800b069

0800b000 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10b      	bne.n	800b028 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b010:	4b0d      	ldr	r3, [pc, #52]	@ (800b048 <Cmd_SetStatus+0x48>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d003      	beq.n	800b020 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b018:	4b0b      	ldr	r3, [pc, #44]	@ (800b048 <Cmd_SetStatus+0x48>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2000      	movs	r0, #0
 800b01e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b020:	4b0a      	ldr	r3, [pc, #40]	@ (800b04c <Cmd_SetStatus+0x4c>)
 800b022:	2200      	movs	r2, #0
 800b024:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b026:	e00b      	b.n	800b040 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b028:	4b08      	ldr	r3, [pc, #32]	@ (800b04c <Cmd_SetStatus+0x4c>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b02e:	4b06      	ldr	r3, [pc, #24]	@ (800b048 <Cmd_SetStatus+0x48>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d004      	beq.n	800b040 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b036:	4b04      	ldr	r3, [pc, #16]	@ (800b048 <Cmd_SetStatus+0x48>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2001      	movs	r0, #1
 800b03c:	4798      	blx	r3
  return;
 800b03e:	bf00      	nop
 800b040:	bf00      	nop
}
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	200005c4 	.word	0x200005c4
 800b04c:	200000c8 	.word	0x200000c8

0800b050 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b058:	2000      	movs	r0, #0
 800b05a:	f7f5 fe03 	bl	8000c64 <shci_cmd_resp_release>

  return;
 800b05e:	bf00      	nop
}
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
	...

0800b068 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	4805      	ldr	r0, [pc, #20]	@ (800b088 <TlUserEvtReceived+0x20>)
 800b074:	f000 fb5c 	bl	800b730 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b078:	4803      	ldr	r0, [pc, #12]	@ (800b088 <TlUserEvtReceived+0x20>)
 800b07a:	f7f5 fde7 	bl	8000c4c <shci_notify_asynch_evt>

  return;
 800b07e:	bf00      	nop
}
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200000c0 	.word	0x200000c0

0800b08c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a05      	ldr	r2, [pc, #20]	@ (800b0ac <shci_register_io_bus+0x20>)
 800b098:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a04      	ldr	r2, [pc, #16]	@ (800b0b0 <shci_register_io_bus+0x24>)
 800b09e:	611a      	str	r2, [r3, #16]

  return;
 800b0a0:	bf00      	nop
}
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	0800b249 	.word	0x0800b249
 800b0b0:	0800b29d 	.word	0x0800b29d

0800b0b4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b0b8:	f001 f954 	bl	800c364 <HW_IPCC_Enable>

  return;
 800b0bc:	bf00      	nop
}
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <TL_Init>:


void TL_Init( void )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b0c4:	4b10      	ldr	r3, [pc, #64]	@ (800b108 <TL_Init+0x48>)
 800b0c6:	4a11      	ldr	r2, [pc, #68]	@ (800b10c <TL_Init+0x4c>)
 800b0c8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b0ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b108 <TL_Init+0x48>)
 800b0cc:	4a10      	ldr	r2, [pc, #64]	@ (800b110 <TL_Init+0x50>)
 800b0ce:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b0d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b108 <TL_Init+0x48>)
 800b0d2:	4a10      	ldr	r2, [pc, #64]	@ (800b114 <TL_Init+0x54>)
 800b0d4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b108 <TL_Init+0x48>)
 800b0d8:	4a0f      	ldr	r2, [pc, #60]	@ (800b118 <TL_Init+0x58>)
 800b0da:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b108 <TL_Init+0x48>)
 800b0de:	4a0f      	ldr	r2, [pc, #60]	@ (800b11c <TL_Init+0x5c>)
 800b0e0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b0e2:	4b09      	ldr	r3, [pc, #36]	@ (800b108 <TL_Init+0x48>)
 800b0e4:	4a0e      	ldr	r2, [pc, #56]	@ (800b120 <TL_Init+0x60>)
 800b0e6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b0e8:	4b07      	ldr	r3, [pc, #28]	@ (800b108 <TL_Init+0x48>)
 800b0ea:	4a0e      	ldr	r2, [pc, #56]	@ (800b124 <TL_Init+0x64>)
 800b0ec:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b0ee:	4b06      	ldr	r3, [pc, #24]	@ (800b108 <TL_Init+0x48>)
 800b0f0:	4a0d      	ldr	r2, [pc, #52]	@ (800b128 <TL_Init+0x68>)
 800b0f2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b0f4:	4b04      	ldr	r3, [pc, #16]	@ (800b108 <TL_Init+0x48>)
 800b0f6:	4a0d      	ldr	r2, [pc, #52]	@ (800b12c <TL_Init+0x6c>)
 800b0f8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b0fa:	4b03      	ldr	r3, [pc, #12]	@ (800b108 <TL_Init+0x48>)
 800b0fc:	4a0c      	ldr	r2, [pc, #48]	@ (800b130 <TL_Init+0x70>)
 800b0fe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b100:	f001 f944 	bl	800c38c <HW_IPCC_Init>

  return;
 800b104:	bf00      	nop
}
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20030000 	.word	0x20030000
 800b10c:	20030028 	.word	0x20030028
 800b110:	20030048 	.word	0x20030048
 800b114:	20030058 	.word	0x20030058
 800b118:	20030068 	.word	0x20030068
 800b11c:	20030070 	.word	0x20030070
 800b120:	20030078 	.word	0x20030078
 800b124:	20030080 	.word	0x20030080
 800b128:	2003009c 	.word	0x2003009c
 800b12c:	200300a0 	.word	0x200300a0
 800b130:	200300ac 	.word	0x200300ac

0800b134 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b140:	4811      	ldr	r0, [pc, #68]	@ (800b188 <TL_BLE_Init+0x54>)
 800b142:	f000 fa9d 	bl	800b680 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b146:	4b11      	ldr	r3, [pc, #68]	@ (800b18c <TL_BLE_Init+0x58>)
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	689a      	ldr	r2, [r3, #8]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	68da      	ldr	r2, [r3, #12]
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	4a0c      	ldr	r2, [pc, #48]	@ (800b190 <TL_BLE_Init+0x5c>)
 800b160:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	4a08      	ldr	r2, [pc, #32]	@ (800b188 <TL_BLE_Init+0x54>)
 800b166:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b168:	f001 f926 	bl	800c3b8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a08      	ldr	r2, [pc, #32]	@ (800b194 <TL_BLE_Init+0x60>)
 800b172:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	4a07      	ldr	r2, [pc, #28]	@ (800b198 <TL_BLE_Init+0x64>)
 800b17a:	6013      	str	r3, [r2, #0]

  return 0;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	200300c8 	.word	0x200300c8
 800b18c:	20030000 	.word	0x20030000
 800b190:	20030a58 	.word	0x20030a58
 800b194:	200005d4 	.word	0x200005d4
 800b198:	200005d8 	.word	0x200005d8

0800b19c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b1a8:	4b09      	ldr	r3, [pc, #36]	@ (800b1d0 <TL_BLE_SendCmd+0x34>)
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b1b2:	4b07      	ldr	r3, [pc, #28]	@ (800b1d0 <TL_BLE_SendCmd+0x34>)
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	2001      	movs	r0, #1
 800b1bc:	f000 f96c 	bl	800b498 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b1c0:	f001 f904 	bl	800c3cc <HW_IPCC_BLE_SendCmd>

  return 0;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20030000 	.word	0x20030000

0800b1d4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b1da:	e01c      	b.n	800b216 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b1dc:	1d3b      	adds	r3, r7, #4
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4812      	ldr	r0, [pc, #72]	@ (800b22c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b1e2:	f000 faec 	bl	800b7be <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	7a5b      	ldrb	r3, [r3, #9]
 800b1ea:	2b0f      	cmp	r3, #15
 800b1ec:	d003      	beq.n	800b1f6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	7a5b      	ldrb	r3, [r3, #9]
 800b1f2:	2b0e      	cmp	r3, #14
 800b1f4:	d105      	bne.n	800b202 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	2002      	movs	r0, #2
 800b1fc:	f000 f94c 	bl	800b498 <OutputDbgTrace>
 800b200:	e004      	b.n	800b20c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4619      	mov	r1, r3
 800b206:	2003      	movs	r0, #3
 800b208:	f000 f946 	bl	800b498 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b20c:	4b08      	ldr	r3, [pc, #32]	@ (800b230 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	4610      	mov	r0, r2
 800b214:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b216:	4805      	ldr	r0, [pc, #20]	@ (800b22c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b218:	f000 fa42 	bl	800b6a0 <LST_is_empty>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d0dc      	beq.n	800b1dc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b222:	bf00      	nop
}
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	200300c8 	.word	0x200300c8
 800b230:	200005d4 	.word	0x200005d4

0800b234 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b238:	4b02      	ldr	r3, [pc, #8]	@ (800b244 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4798      	blx	r3

  return;
 800b23e:	bf00      	nop
}
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	200005d8 	.word	0x200005d8

0800b248 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b254:	480d      	ldr	r0, [pc, #52]	@ (800b28c <TL_SYS_Init+0x44>)
 800b256:	f000 fa13 	bl	800b680 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b25a:	4b0d      	ldr	r3, [pc, #52]	@ (800b290 <TL_SYS_Init+0x48>)
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	4a08      	ldr	r2, [pc, #32]	@ (800b28c <TL_SYS_Init+0x44>)
 800b26c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b26e:	f001 f8cf 	bl	800c410 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a07      	ldr	r2, [pc, #28]	@ (800b294 <TL_SYS_Init+0x4c>)
 800b278:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	4a06      	ldr	r2, [pc, #24]	@ (800b298 <TL_SYS_Init+0x50>)
 800b280:	6013      	str	r3, [r2, #0]

  return 0;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	200300d0 	.word	0x200300d0
 800b290:	20030000 	.word	0x20030000
 800b294:	200005dc 	.word	0x200005dc
 800b298:	200005e0 	.word	0x200005e0

0800b29c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b2a8:	4b09      	ldr	r3, [pc, #36]	@ (800b2d0 <TL_SYS_SendCmd+0x34>)
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2210      	movs	r2, #16
 800b2b0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b2b2:	4b07      	ldr	r3, [pc, #28]	@ (800b2d0 <TL_SYS_SendCmd+0x34>)
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	2004      	movs	r0, #4
 800b2bc:	f000 f8ec 	bl	800b498 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b2c0:	f001 f8b0 	bl	800c424 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20030000 	.word	0x20030000

0800b2d4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b2d8:	4b07      	ldr	r3, [pc, #28]	@ (800b2f8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	2005      	movs	r0, #5
 800b2e2:	f000 f8d9 	bl	800b498 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b2e6:	4b05      	ldr	r3, [pc, #20]	@ (800b2fc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a03      	ldr	r2, [pc, #12]	@ (800b2f8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b2ec:	68d2      	ldr	r2, [r2, #12]
 800b2ee:	6812      	ldr	r2, [r2, #0]
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4798      	blx	r3

  return;
 800b2f4:	bf00      	nop
}
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20030000 	.word	0x20030000
 800b2fc:	200005dc 	.word	0x200005dc

0800b300 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b306:	e00e      	b.n	800b326 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b308:	1d3b      	adds	r3, r7, #4
 800b30a:	4619      	mov	r1, r3
 800b30c:	480b      	ldr	r0, [pc, #44]	@ (800b33c <HW_IPCC_SYS_EvtNot+0x3c>)
 800b30e:	f000 fa56 	bl	800b7be <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4619      	mov	r1, r3
 800b316:	2006      	movs	r0, #6
 800b318:	f000 f8be 	bl	800b498 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b31c:	4b08      	ldr	r3, [pc, #32]	@ (800b340 <HW_IPCC_SYS_EvtNot+0x40>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	4610      	mov	r0, r2
 800b324:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b326:	4805      	ldr	r0, [pc, #20]	@ (800b33c <HW_IPCC_SYS_EvtNot+0x3c>)
 800b328:	f000 f9ba 	bl	800b6a0 <LST_is_empty>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d0ea      	beq.n	800b308 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b332:	bf00      	nop
}
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	200300d0 	.word	0x200300d0
 800b340:	200005e0 	.word	0x200005e0

0800b344 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b34c:	4817      	ldr	r0, [pc, #92]	@ (800b3ac <TL_MM_Init+0x68>)
 800b34e:	f000 f997 	bl	800b680 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b352:	4817      	ldr	r0, [pc, #92]	@ (800b3b0 <TL_MM_Init+0x6c>)
 800b354:	f000 f994 	bl	800b680 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b358:	4b16      	ldr	r3, [pc, #88]	@ (800b3b4 <TL_MM_Init+0x70>)
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	4a16      	ldr	r2, [pc, #88]	@ (800b3b8 <TL_MM_Init+0x74>)
 800b35e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b360:	4b15      	ldr	r3, [pc, #84]	@ (800b3b8 <TL_MM_Init+0x74>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	6892      	ldr	r2, [r2, #8]
 800b368:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b36a:	4b13      	ldr	r3, [pc, #76]	@ (800b3b8 <TL_MM_Init+0x74>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	68d2      	ldr	r2, [r2, #12]
 800b372:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b374:	4b10      	ldr	r3, [pc, #64]	@ (800b3b8 <TL_MM_Init+0x74>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a0c      	ldr	r2, [pc, #48]	@ (800b3ac <TL_MM_Init+0x68>)
 800b37a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b37c:	4b0e      	ldr	r3, [pc, #56]	@ (800b3b8 <TL_MM_Init+0x74>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	6812      	ldr	r2, [r2, #0]
 800b384:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b386:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b8 <TL_MM_Init+0x74>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	6852      	ldr	r2, [r2, #4]
 800b38e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b390:	4b09      	ldr	r3, [pc, #36]	@ (800b3b8 <TL_MM_Init+0x74>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	6912      	ldr	r2, [r2, #16]
 800b398:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b39a:	4b07      	ldr	r3, [pc, #28]	@ (800b3b8 <TL_MM_Init+0x74>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	6952      	ldr	r2, [r2, #20]
 800b3a2:	619a      	str	r2, [r3, #24]

  return;
 800b3a4:	bf00      	nop
}
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	200300b8 	.word	0x200300b8
 800b3b0:	200005cc 	.word	0x200005cc
 800b3b4:	20030000 	.word	0x20030000
 800b3b8:	200005e4 	.word	0x200005e4

0800b3bc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b3c4:	6879      	ldr	r1, [r7, #4]
 800b3c6:	4807      	ldr	r0, [pc, #28]	@ (800b3e4 <TL_MM_EvtDone+0x28>)
 800b3c8:	f000 f9b2 	bl	800b730 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	f000 f862 	bl	800b498 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b3d4:	4804      	ldr	r0, [pc, #16]	@ (800b3e8 <TL_MM_EvtDone+0x2c>)
 800b3d6:	f001 f84b 	bl	800c470 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b3da:	bf00      	nop
}
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	200005cc 	.word	0x200005cc
 800b3e8:	0800b3ed 	.word	0x0800b3ed

0800b3ec <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b3f2:	e00c      	b.n	800b40e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b3f4:	1d3b      	adds	r3, r7, #4
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	480a      	ldr	r0, [pc, #40]	@ (800b424 <SendFreeBuf+0x38>)
 800b3fa:	f000 f9e0 	bl	800b7be <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b428 <SendFreeBuf+0x3c>)
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	4611      	mov	r1, r2
 800b408:	4618      	mov	r0, r3
 800b40a:	f000 f991 	bl	800b730 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b40e:	4805      	ldr	r0, [pc, #20]	@ (800b424 <SendFreeBuf+0x38>)
 800b410:	f000 f946 	bl	800b6a0 <LST_is_empty>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0ec      	beq.n	800b3f4 <SendFreeBuf+0x8>
  }

  return;
 800b41a:	bf00      	nop
}
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	200005cc 	.word	0x200005cc
 800b428:	20030000 	.word	0x20030000

0800b42c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b430:	4805      	ldr	r0, [pc, #20]	@ (800b448 <TL_TRACES_Init+0x1c>)
 800b432:	f000 f925 	bl	800b680 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b436:	4b05      	ldr	r3, [pc, #20]	@ (800b44c <TL_TRACES_Init+0x20>)
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	4a03      	ldr	r2, [pc, #12]	@ (800b448 <TL_TRACES_Init+0x1c>)
 800b43c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b43e:	f001 f84d 	bl	800c4dc <HW_IPCC_TRACES_Init>

  return;
 800b442:	bf00      	nop
}
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	200300c0 	.word	0x200300c0
 800b44c:	20030000 	.word	0x20030000

0800b450 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b456:	e008      	b.n	800b46a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b458:	1d3b      	adds	r3, r7, #4
 800b45a:	4619      	mov	r1, r3
 800b45c:	4808      	ldr	r0, [pc, #32]	@ (800b480 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b45e:	f000 f9ae 	bl	800b7be <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4618      	mov	r0, r3
 800b466:	f000 f80d 	bl	800b484 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b46a:	4805      	ldr	r0, [pc, #20]	@ (800b480 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b46c:	f000 f918 	bl	800b6a0 <LST_is_empty>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0f0      	beq.n	800b458 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b476:	bf00      	nop
}
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	200300c0 	.word	0x200300c0

0800b484 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b48c:	bf00      	nop
 800b48e:	370c      	adds	r7, #12
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	4603      	mov	r3, r0
 800b4a0:	6039      	str	r1, [r7, #0]
 800b4a2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	2b06      	cmp	r3, #6
 800b4a8:	d845      	bhi.n	800b536 <OutputDbgTrace+0x9e>
 800b4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b0 <OutputDbgTrace+0x18>)
 800b4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b0:	0800b4cd 	.word	0x0800b4cd
 800b4b4:	0800b4f1 	.word	0x0800b4f1
 800b4b8:	0800b4f7 	.word	0x0800b4f7
 800b4bc:	0800b50b 	.word	0x0800b50b
 800b4c0:	0800b517 	.word	0x0800b517
 800b4c4:	0800b51d 	.word	0x0800b51d
 800b4c8:	0800b52b 	.word	0x0800b52b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	7a5b      	ldrb	r3, [r3, #9]
 800b4d4:	2bff      	cmp	r3, #255	@ 0xff
 800b4d6:	d005      	beq.n	800b4e4 <OutputDbgTrace+0x4c>
 800b4d8:	2bff      	cmp	r3, #255	@ 0xff
 800b4da:	dc05      	bgt.n	800b4e8 <OutputDbgTrace+0x50>
 800b4dc:	2b0e      	cmp	r3, #14
 800b4de:	d005      	beq.n	800b4ec <OutputDbgTrace+0x54>
 800b4e0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b4e2:	e001      	b.n	800b4e8 <OutputDbgTrace+0x50>
          break;
 800b4e4:	bf00      	nop
 800b4e6:	e027      	b.n	800b538 <OutputDbgTrace+0xa0>
          break;
 800b4e8:	bf00      	nop
 800b4ea:	e025      	b.n	800b538 <OutputDbgTrace+0xa0>
          break;
 800b4ec:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b4ee:	e023      	b.n	800b538 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b4f4:	e020      	b.n	800b538 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	7a5b      	ldrb	r3, [r3, #9]
 800b4fe:	2b0e      	cmp	r3, #14
 800b500:	d001      	beq.n	800b506 <OutputDbgTrace+0x6e>
 800b502:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b504:	e000      	b.n	800b508 <OutputDbgTrace+0x70>
          break;
 800b506:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b508:	e016      	b.n	800b538 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	7a5b      	ldrb	r3, [r3, #9]
 800b512:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b514:	e010      	b.n	800b538 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b51a:	e00d      	b.n	800b538 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	7a5b      	ldrb	r3, [r3, #9]
 800b524:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b526:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b528:	e006      	b.n	800b538 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	7a5b      	ldrb	r3, [r3, #9]
 800b532:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b534:	e000      	b.n	800b538 <OutputDbgTrace+0xa0>

    default:
      break;
 800b536:	bf00      	nop
  }

  return;
 800b538:	bf00      	nop
}
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b54a:	f3ef 8310 	mrs	r3, PRIMASK
 800b54e:	607b      	str	r3, [r7, #4]
  return(result);
 800b550:	687b      	ldr	r3, [r7, #4]
    DbgTracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }

#else
  BACKUP_PRIMASK();
 800b552:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b554:	b672      	cpsid	i
}
 800b556:	bf00      	nop

  DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  DbgTracePeripheralReady = SET;
 800b558:	4b07      	ldr	r3, [pc, #28]	@ (800b578 <DbgTrace_TxCpltCallback+0x34>)
 800b55a:	2201      	movs	r2, #1
 800b55c:	701a      	strb	r2, [r3, #0]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f383 8810 	msr	PRIMASK, r3
}
 800b568:	bf00      	nop

  RESTORE_PRIMASK();
#endif
}
 800b56a:	bf00      	nop
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	20000011 	.word	0x20000011

0800b57c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b580:	f7f5 f915 	bl	80007ae <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
#endif 
#endif
  return;
 800b584:	bf00      	nop
}
 800b586:	bd80      	pop	{r7, pc}

0800b588 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	68b9      	ldr	r1, [r7, #8]
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 f805 	bl	800b5a8 <DbgTraceWrite>
 800b59e:	4603      	mov	r3, r0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5bc:	617b      	str	r3, [r7, #20]
  return(result);
 800b5be:	697b      	ldr	r3, [r7, #20]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b5c0:	61bb      	str	r3, [r7, #24]

  /* Ignore flushes */
  if ( handle == -1 )
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c8:	d102      	bne.n	800b5d0 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	61fb      	str	r3, [r7, #28]
 800b5ce:	e026      	b.n	800b61e <DbgTraceWrite+0x76>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d006      	beq.n	800b5e4 <DbgTraceWrite+0x3c>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d003      	beq.n	800b5e4 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e0:	61fb      	str	r3, [r7, #28]
 800b5e2:	e01c      	b.n	800b61e <DbgTraceWrite+0x76>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d019      	beq.n	800b61e <DbgTraceWrite+0x76>
  {
    chars_written = bufSize;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5ee:	b672      	cpsid	i
}
 800b5f0:	bf00      	nop
    {
      RESTORE_PRIMASK();
    }
#else
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    DbgTracePeripheralReady = RESET;
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b628 <DbgTraceWrite+0x80>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f383 8810 	msr	PRIMASK, r3
}
 800b602:	bf00      	nop
    RESTORE_PRIMASK();

    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	b29b      	uxth	r3, r3
 800b608:	4a08      	ldr	r2, [pc, #32]	@ (800b62c <DbgTraceWrite+0x84>)
 800b60a:	4619      	mov	r1, r3
 800b60c:	68b8      	ldr	r0, [r7, #8]
 800b60e:	f7f5 f8d4 	bl	80007ba <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
 800b612:	bf00      	nop
 800b614:	4b04      	ldr	r3, [pc, #16]	@ (800b628 <DbgTraceWrite+0x80>)
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d0fa      	beq.n	800b614 <DbgTraceWrite+0x6c>
#endif
    /* CS END */
  }
  return ( chars_written );
 800b61e:	69fb      	ldr	r3, [r7, #28]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3720      	adds	r7, #32
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	20000011 	.word	0x20000011
 800b62c:	0800b545 	.word	0x0800b545

0800b630 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b63a:	4b0f      	ldr	r3, [pc, #60]	@ (800b678 <OTP_Read+0x48>)
 800b63c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b63e:	e002      	b.n	800b646 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3b08      	subs	r3, #8
 800b644:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3307      	adds	r3, #7
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	79fa      	ldrb	r2, [r7, #7]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d003      	beq.n	800b65a <OTP_Read+0x2a>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4a09      	ldr	r2, [pc, #36]	@ (800b67c <OTP_Read+0x4c>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d1f2      	bne.n	800b640 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	3307      	adds	r3, #7
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	79fa      	ldrb	r2, [r7, #7]
 800b662:	429a      	cmp	r2, r3
 800b664:	d001      	beq.n	800b66a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b666:	2300      	movs	r3, #0
 800b668:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b66a:	68fb      	ldr	r3, [r7, #12]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	1fff73f8 	.word	0x1fff73f8
 800b67c:	1fff7000 	.word	0x1fff7000

0800b680 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	605a      	str	r2, [r3, #4]
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b6ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b6b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6b2:	b672      	cpsid	i
}
 800b6b4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d102      	bne.n	800b6c6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	75fb      	strb	r3, [r7, #23]
 800b6c4:	e001      	b.n	800b6ca <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	75fb      	strb	r3, [r7, #23]
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	f383 8810 	msr	PRIMASK, r3
}
 800b6d4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	371c      	adds	r7, #28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b6f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b6f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6f8:	b672      	cpsid	i
}
 800b6fa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	683a      	ldr	r2, [r7, #0]
 800b70e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	605a      	str	r2, [r3, #4]
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f383 8810 	msr	PRIMASK, r3
}
 800b722:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b724:	bf00      	nop
 800b726:	371c      	adds	r7, #28
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b730:	b480      	push	{r7}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b73a:	f3ef 8310 	mrs	r3, PRIMASK
 800b73e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b740:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b744:	b672      	cpsid	i
}
 800b746:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	f383 8810 	msr	PRIMASK, r3
}
 800b76e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b770:	bf00      	nop
 800b772:	371c      	adds	r7, #28
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b784:	f3ef 8310 	mrs	r3, PRIMASK
 800b788:	60fb      	str	r3, [r7, #12]
  return(result);
 800b78a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b78c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b78e:	b672      	cpsid	i
}
 800b790:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	6812      	ldr	r2, [r2, #0]
 800b79a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	6852      	ldr	r2, [r2, #4]
 800b7a4:	605a      	str	r2, [r3, #4]
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	f383 8810 	msr	PRIMASK, r3
}
 800b7b0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b7b2:	bf00      	nop
 800b7b4:	371c      	adds	r7, #28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b086      	sub	sp, #24
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b7cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b7d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7d2:	b672      	cpsid	i
}
 800b7d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7ff ffca 	bl	800b77c <LST_remove_node>
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	f383 8810 	msr	PRIMASK, r3
}
 800b7f2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b7f4:	bf00      	nop
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b800:	4b03      	ldr	r3, [pc, #12]	@ (800b810 <LL_FLASH_GetUDN+0x14>)
 800b802:	681b      	ldr	r3, [r3, #0]
}
 800b804:	4618      	mov	r0, r3
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	1fff7580 	.word	0x1fff7580

0800b814 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b814:	b480      	push	{r7}
 800b816:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b818:	4b03      	ldr	r3, [pc, #12]	@ (800b828 <LL_FLASH_GetDeviceID+0x14>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	b2db      	uxtb	r3, r3
}
 800b81e:	4618      	mov	r0, r3
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	1fff7584 	.word	0x1fff7584

0800b82c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b82c:	b480      	push	{r7}
 800b82e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b830:	4b03      	ldr	r3, [pc, #12]	@ (800b840 <LL_FLASH_GetSTCompanyID+0x14>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	0a1b      	lsrs	r3, r3, #8
}
 800b836:	4618      	mov	r0, r3
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	1fff7584 	.word	0x1fff7584

0800b844 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b844:	b5b0      	push	{r4, r5, r7, lr}
 800b846:	b090      	sub	sp, #64	@ 0x40
 800b848:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b84a:	2392      	movs	r3, #146	@ 0x92
 800b84c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b850:	4b25      	ldr	r3, [pc, #148]	@ (800b8e8 <APP_BLE_Init+0xa4>)
 800b852:	1d3c      	adds	r4, r7, #4
 800b854:	461d      	mov	r5, r3
 800b856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b85a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b85c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b85e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b862:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b866:	c403      	stmia	r4!, {r0, r1}
 800b868:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b86a:	f000 f913 	bl	800ba94 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b86e:	2101      	movs	r1, #1
 800b870:	2002      	movs	r0, #2
 800b872:	f000 fe5b 	bl	800c52c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b876:	4a1d      	ldr	r2, [pc, #116]	@ (800b8ec <APP_BLE_Init+0xa8>)
 800b878:	2100      	movs	r1, #0
 800b87a:	2002      	movs	r0, #2
 800b87c:	f000 ff82 	bl	800c784 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b880:	1d3b      	adds	r3, r7, #4
 800b882:	4618      	mov	r0, r3
 800b884:	f7ff f850 	bl	800a928 <SHCI_C2_BLE_Init>
 800b888:	4603      	mov	r3, r0
 800b88a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800b88e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b896:	f7f6 fc2d 	bl	80020f4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b89a:	f000 f911 	bl	800bac0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b89e:	f7fe ff9d 	bl	800a7dc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b8a2:	4b13      	ldr	r3, [pc, #76]	@ (800b8f0 <APP_BLE_Init+0xac>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b8aa:	4b11      	ldr	r3, [pc, #68]	@ (800b8f0 <APP_BLE_Init+0xac>)
 800b8ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b8b0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b8b2:	4a10      	ldr	r2, [pc, #64]	@ (800b8f4 <APP_BLE_Init+0xb0>)
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	f000 ff64 	bl	800c784 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b8bc:	2006      	movs	r0, #6
 800b8be:	f7fe fe01 	bl	800a4c4 <aci_hal_set_radio_activity_mask>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b8c8:	f000 fac5 	bl	800be56 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b8cc:	4b08      	ldr	r3, [pc, #32]	@ (800b8f0 <APP_BLE_Init+0xac>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b8d2:	4b07      	ldr	r3, [pc, #28]	@ (800b8f0 <APP_BLE_Init+0xac>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b8d8:	2001      	movs	r0, #1
 800b8da:	f000 f9a5 	bl	800bc28 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b8de:	bf00      	nop
}
 800b8e0:	3740      	adds	r7, #64	@ 0x40
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800dbd4 	.word	0x0800dbd4
 800b8ec:	0800ab45 	.word	0x0800ab45
 800b8f0:	200005f0 	.word	0x200005f0
 800b8f4:	0800bd11 	.word	0x0800bd11

0800b8f8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08a      	sub	sp, #40	@ 0x28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b900:	2392      	movs	r3, #146	@ 0x92
 800b902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3301      	adds	r3, #1
 800b90a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	2bff      	cmp	r3, #255	@ 0xff
 800b912:	d053      	beq.n	800b9bc <SVCCTL_App_Notification+0xc4>
 800b914:	2bff      	cmp	r3, #255	@ 0xff
 800b916:	f300 80af 	bgt.w	800ba78 <SVCCTL_App_Notification+0x180>
 800b91a:	2b05      	cmp	r3, #5
 800b91c:	d002      	beq.n	800b924 <SVCCTL_App_Notification+0x2c>
 800b91e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b920:	d020      	beq.n	800b964 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b922:	e0a9      	b.n	800ba78 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	3302      	adds	r3, #2
 800b928:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b930:	b29a      	uxth	r2, r3
 800b932:	4b55      	ldr	r3, [pc, #340]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800b934:	8adb      	ldrh	r3, [r3, #22]
 800b936:	429a      	cmp	r2, r3
 800b938:	d106      	bne.n	800b948 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b93a:	4b53      	ldr	r3, [pc, #332]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b940:	4b51      	ldr	r3, [pc, #324]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800b948:	2001      	movs	r0, #1
 800b94a:	f000 f96d 	bl	800bc28 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b94e:	4b4f      	ldr	r3, [pc, #316]	@ (800ba8c <SVCCTL_App_Notification+0x194>)
 800b950:	2201      	movs	r2, #1
 800b952:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b954:	4b4c      	ldr	r3, [pc, #304]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800b956:	8ada      	ldrh	r2, [r3, #22]
 800b958:	4b4c      	ldr	r3, [pc, #304]	@ (800ba8c <SVCCTL_App_Notification+0x194>)
 800b95a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b95c:	484b      	ldr	r0, [pc, #300]	@ (800ba8c <SVCCTL_App_Notification+0x194>)
 800b95e:	f000 fa66 	bl	800be2e <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b962:	e08c      	b.n	800ba7e <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	3302      	adds	r3, #2
 800b968:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d001      	beq.n	800b976 <SVCCTL_App_Notification+0x7e>
 800b972:	2b03      	cmp	r3, #3
          break;
 800b974:	e021      	b.n	800b9ba <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	3301      	adds	r3, #1
 800b97a:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b97c:	4b42      	ldr	r3, [pc, #264]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800b97e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b982:	2b04      	cmp	r3, #4
 800b984:	d104      	bne.n	800b990 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b986:	4b40      	ldr	r3, [pc, #256]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800b988:	2206      	movs	r2, #6
 800b98a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800b98e:	e003      	b.n	800b998 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b990:	4b3d      	ldr	r3, [pc, #244]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800b992:	2205      	movs	r2, #5
 800b994:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	4b39      	ldr	r3, [pc, #228]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800b9a2:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800b9a4:	4b39      	ldr	r3, [pc, #228]	@ (800ba8c <SVCCTL_App_Notification+0x194>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b9aa:	4b37      	ldr	r3, [pc, #220]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800b9ac:	8ada      	ldrh	r2, [r3, #22]
 800b9ae:	4b37      	ldr	r3, [pc, #220]	@ (800ba8c <SVCCTL_App_Notification+0x194>)
 800b9b0:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800b9b2:	4836      	ldr	r0, [pc, #216]	@ (800ba8c <SVCCTL_App_Notification+0x194>)
 800b9b4:	f000 fa3b 	bl	800be2e <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b9b8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b9ba:	e060      	b.n	800ba7e <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b9bc:	6a3b      	ldr	r3, [r7, #32]
 800b9be:	3302      	adds	r3, #2
 800b9c0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d047      	beq.n	800ba60 <SVCCTL_App_Notification+0x168>
 800b9d0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	dc51      	bgt.n	800ba7c <SVCCTL_App_Notification+0x184>
 800b9d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9dc:	d046      	beq.n	800ba6c <SVCCTL_App_Notification+0x174>
 800b9de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9e2:	dc4b      	bgt.n	800ba7c <SVCCTL_App_Notification+0x184>
 800b9e4:	2b04      	cmp	r3, #4
 800b9e6:	d043      	beq.n	800ba70 <SVCCTL_App_Notification+0x178>
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	db47      	blt.n	800ba7c <SVCCTL_App_Notification+0x184>
 800b9ec:	f240 420a 	movw	r2, #1034	@ 0x40a
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	dc43      	bgt.n	800ba7c <SVCCTL_App_Notification+0x184>
 800b9f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9f8:	dd40      	ble.n	800ba7c <SVCCTL_App_Notification+0x184>
 800b9fa:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800b9fe:	2b09      	cmp	r3, #9
 800ba00:	d83c      	bhi.n	800ba7c <SVCCTL_App_Notification+0x184>
 800ba02:	a201      	add	r2, pc, #4	@ (adr r2, 800ba08 <SVCCTL_App_Notification+0x110>)
 800ba04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba08:	0800ba59 	.word	0x0800ba59
 800ba0c:	0800ba31 	.word	0x0800ba31
 800ba10:	0800ba7d 	.word	0x0800ba7d
 800ba14:	0800ba7d 	.word	0x0800ba7d
 800ba18:	0800ba7d 	.word	0x0800ba7d
 800ba1c:	0800ba7d 	.word	0x0800ba7d
 800ba20:	0800ba75 	.word	0x0800ba75
 800ba24:	0800ba7d 	.word	0x0800ba7d
 800ba28:	0800ba45 	.word	0x0800ba45
 800ba2c:	0800ba75 	.word	0x0800ba75
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800ba30:	4b15      	ldr	r3, [pc, #84]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800ba32:	8adb      	ldrh	r3, [r3, #22]
 800ba34:	4916      	ldr	r1, [pc, #88]	@ (800ba90 <SVCCTL_App_Notification+0x198>)
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fd ff46 	bl	80098c8 <aci_gap_pass_key_resp>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800ba42:	e018      	b.n	800ba76 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800ba44:	4b10      	ldr	r3, [pc, #64]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800ba46:	8adb      	ldrh	r3, [r3, #22]
 800ba48:	2101      	movs	r1, #1
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fe f8e6 	bl	8009c1c <aci_gap_numeric_comparison_value_confirm_yesno>
 800ba50:	4603      	mov	r3, r0
 800ba52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800ba56:	e00e      	b.n	800ba76 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	3302      	adds	r3, #2
 800ba5c:	61bb      	str	r3, [r7, #24]
          break;
 800ba5e:	e00a      	b.n	800ba76 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ba60:	4b09      	ldr	r3, [pc, #36]	@ (800ba88 <SVCCTL_App_Notification+0x190>)
 800ba62:	8adb      	ldrh	r3, [r3, #22]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fe fbec 	bl	800a242 <aci_gatt_confirm_indication>
        break;
 800ba6a:	e004      	b.n	800ba76 <SVCCTL_App_Notification+0x17e>
          break;
 800ba6c:	bf00      	nop
 800ba6e:	e005      	b.n	800ba7c <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ba70:	bf00      	nop
 800ba72:	e003      	b.n	800ba7c <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ba74:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ba76:	e001      	b.n	800ba7c <SVCCTL_App_Notification+0x184>
      break;
 800ba78:	bf00      	nop
 800ba7a:	e000      	b.n	800ba7e <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ba7c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ba7e:	2301      	movs	r3, #1
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3728      	adds	r7, #40	@ 0x28
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	200005f0 	.word	0x200005f0
 800ba8c:	20000674 	.word	0x20000674
 800ba90:	0001b207 	.word	0x0001b207

0800ba94 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ba9a:	4b06      	ldr	r3, [pc, #24]	@ (800bab4 <Ble_Tl_Init+0x20>)
 800ba9c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ba9e:	4b06      	ldr	r3, [pc, #24]	@ (800bab8 <Ble_Tl_Init+0x24>)
 800baa0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800baa2:	463b      	mov	r3, r7
 800baa4:	4619      	mov	r1, r3
 800baa6:	4805      	ldr	r0, [pc, #20]	@ (800babc <Ble_Tl_Init+0x28>)
 800baa8:	f7ff f830 	bl	800ab0c <hci_init>

  return;
 800baac:	bf00      	nop
}
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	200300d8 	.word	0x200300d8
 800bab8:	0800bdc1 	.word	0x0800bdc1
 800babc:	0800bd89 	.word	0x0800bd89

0800bac0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800bac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bac2:	b08d      	sub	sp, #52	@ 0x34
 800bac4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800bac6:	2300      	movs	r3, #0
 800bac8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800baca:	2392      	movs	r3, #146	@ 0x92
 800bacc:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800bace:	f7fe fd4d 	bl	800a56c <hci_reset>
 800bad2:	4603      	mov	r3, r0
 800bad4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800bad6:	f000 f8d7 	bl	800bc88 <BleGetBdAddress>
 800bada:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	2106      	movs	r1, #6
 800bae0:	2000      	movs	r0, #0
 800bae2:	f7fe fc03 	bl	800a2ec <aci_hal_write_config_data>
 800bae6:	4603      	mov	r3, r0
 800bae8:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800baea:	4a4a      	ldr	r2, [pc, #296]	@ (800bc14 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800baec:	2110      	movs	r1, #16
 800baee:	2018      	movs	r0, #24
 800baf0:	f7fe fbfc 	bl	800a2ec <aci_hal_write_config_data>
 800baf4:	4603      	mov	r3, r0
 800baf6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800baf8:	4a47      	ldr	r2, [pc, #284]	@ (800bc18 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800bafa:	2110      	movs	r1, #16
 800bafc:	2008      	movs	r0, #8
 800bafe:	f7fe fbf5 	bl	800a2ec <aci_hal_write_config_data>
 800bb02:	4603      	mov	r3, r0
 800bb04:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800bb06:	2118      	movs	r1, #24
 800bb08:	2001      	movs	r0, #1
 800bb0a:	f7fe fc74 	bl	800a3f6 <aci_hal_set_tx_power_level>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800bb12:	f7fe f8ea 	bl	8009cea <aci_gatt_init>
 800bb16:	4603      	mov	r3, r0
 800bb18:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	f043 0301 	orr.w	r3, r3, #1
 800bb24:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01f      	beq.n	800bb6c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800bb2c:	4b3b      	ldr	r3, [pc, #236]	@ (800bc1c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800bb2e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800bb30:	1dba      	adds	r2, r7, #6
 800bb32:	7bf8      	ldrb	r0, [r7, #15]
 800bb34:	1cbb      	adds	r3, r7, #2
 800bb36:	9301      	str	r3, [sp, #4]
 800bb38:	1d3b      	adds	r3, r7, #4
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	2208      	movs	r2, #8
 800bb40:	2100      	movs	r1, #0
 800bb42:	f7fd ff28 	bl	8009996 <aci_gap_init>
 800bb46:	4603      	mov	r3, r0
 800bb48:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800bb4a:	88fc      	ldrh	r4, [r7, #6]
 800bb4c:	88bd      	ldrh	r5, [r7, #4]
 800bb4e:	68b8      	ldr	r0, [r7, #8]
 800bb50:	f7f4 fb16 	bl	8000180 <strlen>
 800bb54:	4603      	mov	r3, r0
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	4629      	mov	r1, r5
 800bb62:	4620      	mov	r0, r4
 800bb64:	f7fe fac4 	bl	800a0f0 <aci_gatt_update_char_value>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800bb6c:	88f8      	ldrh	r0, [r7, #6]
 800bb6e:	8879      	ldrh	r1, [r7, #2]
 800bb70:	463b      	mov	r3, r7
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	2302      	movs	r3, #2
 800bb76:	2200      	movs	r2, #0
 800bb78:	f7fe faba 	bl	800a0f0 <aci_gatt_update_char_value>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800bb80:	2202      	movs	r2, #2
 800bb82:	2102      	movs	r1, #2
 800bb84:	2000      	movs	r0, #0
 800bb86:	f7fe fd15 	bl	800a5b4 <hci_le_set_default_phy>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800bb8e:	4b24      	ldr	r3, [pc, #144]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb90:	2201      	movs	r2, #1
 800bb92:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800bb94:	4b22      	ldr	r3, [pc, #136]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fd fd7d 	bl	8009698 <aci_gap_set_io_capability>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800bba2:	4b1f      	ldr	r3, [pc, #124]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bba4:	2201      	movs	r2, #1
 800bba6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800bba8:	4b1d      	ldr	r3, [pc, #116]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbaa:	2208      	movs	r2, #8
 800bbac:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800bbae:	4b1c      	ldr	r3, [pc, #112]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbb0:	2210      	movs	r2, #16
 800bbb2:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800bbb4:	4b1a      	ldr	r3, [pc, #104]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800bbba:	4b19      	ldr	r3, [pc, #100]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbbc:	4a19      	ldr	r2, [pc, #100]	@ (800bc24 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800bbbe:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800bbc0:	4b17      	ldr	r3, [pc, #92]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800bbc6:	4b16      	ldr	r3, [pc, #88]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbc8:	789c      	ldrb	r4, [r3, #2]
 800bbca:	4b15      	ldr	r3, [pc, #84]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbcc:	785d      	ldrb	r5, [r3, #1]
 800bbce:	4b14      	ldr	r3, [pc, #80]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbd0:	791b      	ldrb	r3, [r3, #4]
 800bbd2:	4a13      	ldr	r2, [pc, #76]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbd4:	7952      	ldrb	r2, [r2, #5]
 800bbd6:	4912      	ldr	r1, [pc, #72]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbd8:	78c9      	ldrb	r1, [r1, #3]
 800bbda:	4811      	ldr	r0, [pc, #68]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbdc:	6880      	ldr	r0, [r0, #8]
 800bbde:	2600      	movs	r6, #0
 800bbe0:	9604      	str	r6, [sp, #16]
 800bbe2:	9003      	str	r0, [sp, #12]
 800bbe4:	9102      	str	r1, [sp, #8]
 800bbe6:	9201      	str	r2, [sp, #4]
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	2300      	movs	r3, #0
 800bbec:	2201      	movs	r2, #1
 800bbee:	4629      	mov	r1, r5
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f7fd fda5 	bl	8009740 <aci_gap_set_authentication_requirement>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800bbfa:	4b09      	ldr	r3, [pc, #36]	@ (800bc20 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800bbfc:	789b      	ldrb	r3, [r3, #2]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800bc02:	f7fd ffe7 	bl	8009bd4 <aci_gap_configure_filter_accept_list>
 800bc06:	4603      	mov	r3, r0
 800bc08:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800bc0a:	bf00      	nop
 800bc0c:	371c      	adds	r7, #28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc12:	bf00      	nop
 800bc14:	0800de1c 	.word	0x0800de1c
 800bc18:	0800de2c 	.word	0x0800de2c
 800bc1c:	0800dc10 	.word	0x0800dc10
 800bc20:	200005f0 	.word	0x200005f0
 800bc24:	0001b207 	.word	0x0001b207

0800bc28 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08c      	sub	sp, #48	@ 0x30
 800bc2c:	af08      	add	r7, sp, #32
 800bc2e:	4603      	mov	r3, r0
 800bc30:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bc32:	2392      	movs	r3, #146	@ 0x92
 800bc34:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800bc36:	4a12      	ldr	r2, [pc, #72]	@ (800bc80 <Adv_Request+0x58>)
 800bc38:	79fb      	ldrb	r3, [r7, #7]
 800bc3a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800bc3e:	2300      	movs	r3, #0
 800bc40:	9306      	str	r3, [sp, #24]
 800bc42:	2300      	movs	r3, #0
 800bc44:	9305      	str	r3, [sp, #20]
 800bc46:	2300      	movs	r3, #0
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	9303      	str	r3, [sp, #12]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	9302      	str	r3, [sp, #8]
 800bc52:	2300      	movs	r3, #0
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	2300      	movs	r3, #0
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	22a0      	movs	r2, #160	@ 0xa0
 800bc5e:	2180      	movs	r1, #128	@ 0x80
 800bc60:	2000      	movs	r0, #0
 800bc62:	f7fd fc1f 	bl	80094a4 <aci_gap_set_discoverable>
 800bc66:	4603      	mov	r3, r0
 800bc68:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800bc6a:	4906      	ldr	r1, [pc, #24]	@ (800bc84 <Adv_Request+0x5c>)
 800bc6c:	200c      	movs	r0, #12
 800bc6e:	f7fd ff3f 	bl	8009af0 <aci_gap_update_adv_data>
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800bc76:	bf00      	nop
}
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	200005f0 	.word	0x200005f0
 800bc84:	20000014 	.word	0x20000014

0800bc88 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800bc8e:	f7ff fdb5 	bl	800b7fc <LL_FLASH_GetUDN>
 800bc92:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9a:	d023      	beq.n	800bce4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800bc9c:	f7ff fdc6 	bl	800b82c <LL_FLASH_GetSTCompanyID>
 800bca0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800bca2:	f7ff fdb7 	bl	800b814 <LL_FLASH_GetDeviceID>
 800bca6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	4b16      	ldr	r3, [pc, #88]	@ (800bd08 <BleGetBdAddress+0x80>)
 800bcae:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	0a1b      	lsrs	r3, r3, #8
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	4b14      	ldr	r3, [pc, #80]	@ (800bd08 <BleGetBdAddress+0x80>)
 800bcb8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	4b12      	ldr	r3, [pc, #72]	@ (800bd08 <BleGetBdAddress+0x80>)
 800bcc0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	4b10      	ldr	r3, [pc, #64]	@ (800bd08 <BleGetBdAddress+0x80>)
 800bcc8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	0a1b      	lsrs	r3, r3, #8
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	4b0d      	ldr	r3, [pc, #52]	@ (800bd08 <BleGetBdAddress+0x80>)
 800bcd2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	0c1b      	lsrs	r3, r3, #16
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	4b0b      	ldr	r3, [pc, #44]	@ (800bd08 <BleGetBdAddress+0x80>)
 800bcdc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800bcde:	4b0a      	ldr	r3, [pc, #40]	@ (800bd08 <BleGetBdAddress+0x80>)
 800bce0:	617b      	str	r3, [r7, #20]
 800bce2:	e00b      	b.n	800bcfc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800bce4:	2000      	movs	r0, #0
 800bce6:	f7ff fca3 	bl	800b630 <OTP_Read>
 800bcea:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d002      	beq.n	800bcf8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	617b      	str	r3, [r7, #20]
 800bcf6:	e001      	b.n	800bcfc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800bcf8:	4b04      	ldr	r3, [pc, #16]	@ (800bd0c <BleGetBdAddress+0x84>)
 800bcfa:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800bcfc:	697b      	ldr	r3, [r7, #20]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3718      	adds	r7, #24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	200005e8 	.word	0x200005e8
 800bd0c:	0800de14 	.word	0x0800de14

0800bd10 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800bd16:	4b0a      	ldr	r3, [pc, #40]	@ (800bd40 <Adv_Cancel+0x30>)
 800bd18:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd1c:	2b05      	cmp	r3, #5
 800bd1e:	d00a      	beq.n	800bd36 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bd20:	2392      	movs	r3, #146	@ 0x92
 800bd22:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800bd24:	f7fd fb9a 	bl	800945c <aci_gap_set_non_discoverable>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bd2c:	4b04      	ldr	r3, [pc, #16]	@ (800bd40 <Adv_Cancel+0x30>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800bd34:	bf00      	nop
 800bd36:	bf00      	nop
}
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	200005f0 	.word	0x200005f0

0800bd44 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	2002      	movs	r0, #2
 800bd50:	f000 fd3a 	bl	800c7c8 <UTIL_SEQ_SetTask>

  return;
 800bd54:	bf00      	nop
}
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bd64:	2001      	movs	r0, #1
 800bd66:	f000 fd9b 	bl	800c8a0 <UTIL_SEQ_SetEvt>

  return;
 800bd6a:	bf00      	nop
}
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b082      	sub	sp, #8
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bd7a:	2001      	movs	r0, #1
 800bd7c:	f000 fdb0 	bl	800c8e0 <UTIL_SEQ_WaitEvt>

  return;
 800bd80:	bf00      	nop
}
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	3308      	adds	r3, #8
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe fd70 	bl	800a880 <SVCCTL_UserEvtRx>
 800bda0:	4603      	mov	r3, r0
 800bda2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800bda4:	7afb      	ldrb	r3, [r7, #11]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d003      	beq.n	800bdb2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2201      	movs	r2, #1
 800bdae:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800bdb0:	e003      	b.n	800bdba <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	701a      	strb	r2, [r3, #0]
  return;
 800bdb8:	bf00      	nop
}
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800bdca:	79fb      	ldrb	r3, [r7, #7]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <BLE_StatusNot+0x16>
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d006      	beq.n	800bde2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800bdd4:	e00b      	b.n	800bdee <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 fd20 	bl	800c820 <UTIL_SEQ_PauseTask>
      break;
 800bde0:	e005      	b.n	800bdee <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bde2:	2303      	movs	r3, #3
 800bde4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 fd3a 	bl	800c860 <UTIL_SEQ_ResumeTask>
      break;
 800bdec:	bf00      	nop
  }

  return;
 800bdee:	bf00      	nop
}
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	2b02      	cmp	r3, #2
 800be04:	d006      	beq.n	800be14 <Custom_STM_App_Notification+0x1e>
 800be06:	2b02      	cmp	r3, #2
 800be08:	dc06      	bgt.n	800be18 <Custom_STM_App_Notification+0x22>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d006      	beq.n	800be1c <Custom_STM_App_Notification+0x26>
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d006      	beq.n	800be20 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800be12:	e001      	b.n	800be18 <Custom_STM_App_Notification+0x22>
      break;
 800be14:	bf00      	nop
 800be16:	e004      	b.n	800be22 <Custom_STM_App_Notification+0x2c>
      break;
 800be18:	bf00      	nop
 800be1a:	e002      	b.n	800be22 <Custom_STM_App_Notification+0x2c>
      break;
 800be1c:	bf00      	nop
 800be1e:	e000      	b.n	800be22 <Custom_STM_App_Notification+0x2c>
      break;
 800be20:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800be22:	bf00      	nop
}
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <Custom_APP_Notification+0x16>
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d002      	beq.n	800be48 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800be42:	e002      	b.n	800be4a <Custom_APP_Notification+0x1c>
      break;
 800be44:	bf00      	nop
 800be46:	e000      	b.n	800be4a <Custom_APP_Notification+0x1c>
      break;
 800be48:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800be4a:	bf00      	nop
}
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800be56:	b480      	push	{r7}
 800be58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800be5a:	bf00      	nop
}
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08e      	sub	sp, #56	@ 0x38
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800be6c:	2300      	movs	r3, #0
 800be6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	3301      	adds	r3, #1
 800be76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  switch (event_pckt->evt)
 800be78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	2bff      	cmp	r3, #255	@ 0xff
 800be7e:	d17c      	bne.n	800bf7a <Custom_STM_Event_Handler+0x116>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800be80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be82:	3302      	adds	r3, #2
 800be84:	62bb      	str	r3, [r7, #40]	@ 0x28
      switch (blecore_evt->ecode)
 800be86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800be90:	2b1a      	cmp	r3, #26
 800be92:	d870      	bhi.n	800bf76 <Custom_STM_Event_Handler+0x112>
 800be94:	a201      	add	r2, pc, #4	@ (adr r2, 800be9c <Custom_STM_Event_Handler+0x38>)
 800be96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9a:	bf00      	nop
 800be9c:	0800bf09 	.word	0x0800bf09
 800bea0:	0800bf77 	.word	0x0800bf77
 800bea4:	0800bf77 	.word	0x0800bf77
 800bea8:	0800bf77 	.word	0x0800bf77
 800beac:	0800bf77 	.word	0x0800bf77
 800beb0:	0800bf77 	.word	0x0800bf77
 800beb4:	0800bf77 	.word	0x0800bf77
 800beb8:	0800bf77 	.word	0x0800bf77
 800bebc:	0800bf77 	.word	0x0800bf77
 800bec0:	0800bf77 	.word	0x0800bf77
 800bec4:	0800bf77 	.word	0x0800bf77
 800bec8:	0800bf77 	.word	0x0800bf77
 800becc:	0800bf77 	.word	0x0800bf77
 800bed0:	0800bf77 	.word	0x0800bf77
 800bed4:	0800bf77 	.word	0x0800bf77
 800bed8:	0800bf77 	.word	0x0800bf77
 800bedc:	0800bf77 	.word	0x0800bf77
 800bee0:	0800bf77 	.word	0x0800bf77
 800bee4:	0800bf77 	.word	0x0800bf77
 800bee8:	0800bf77 	.word	0x0800bf77
 800beec:	0800bf77 	.word	0x0800bf77
 800bef0:	0800bf77 	.word	0x0800bf77
 800bef4:	0800bf77 	.word	0x0800bf77
 800bef8:	0800bf77 	.word	0x0800bf77
 800befc:	0800bf77 	.word	0x0800bf77
 800bf00:	0800bf77 	.word	0x0800bf77
 800bf04:	0800bf59 	.word	0x0800bf59
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800bf08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf0a:	3302      	adds	r3, #2
 800bf0c:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	885b      	ldrh	r3, [r3, #2]
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	461a      	mov	r2, r3
 800bf16:	4b1c      	ldr	r3, [pc, #112]	@ (800bf88 <Custom_STM_Event_Handler+0x124>)
 800bf18:	885b      	ldrh	r3, [r3, #2]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d102      	bne.n	800bf26 <Custom_STM_Event_Handler+0xc2>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800bf20:	2301      	movs	r3, #1
 800bf22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          APP_DBG_MSG(">> BLE Write Detected!\n");
		  APP_DBG_MSG(">> Received Data (%d bytes): ", attribute_modified->Attr_Data_Length);

		  for (int i = 0; i < attribute_modified->Attr_Data_Length; i++) {
 800bf26:	2300      	movs	r3, #0
 800bf28:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf2a:	e002      	b.n	800bf32 <Custom_STM_Event_Handler+0xce>
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2e:	3301      	adds	r3, #1
 800bf30:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf32:	6a3b      	ldr	r3, [r7, #32]
 800bf34:	88db      	ldrh	r3, [r3, #6]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	dbf5      	blt.n	800bf2c <Custom_STM_Event_Handler+0xc8>
			  APP_DBG_MSG("%02X ", attribute_modified->Attr_Data[i]);
		  }
		  APP_DBG_MSG("\n");

		  if (BLE_ProcessCommand(attribute_modified->Attr_Data, attribute_modified->Attr_Data_Length))
 800bf40:	6a3b      	ldr	r3, [r7, #32]
 800bf42:	f103 0208 	add.w	r2, r3, #8
 800bf46:	6a3b      	ldr	r3, [r7, #32]
 800bf48:	88db      	ldrh	r3, [r3, #6]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	4619      	mov	r1, r3
 800bf50:	4610      	mov	r0, r2
 800bf52:	f7f4 fae5 	bl	8000520 <BLE_ProcessCommand>
		          {
		              APP_DBG_MSG(">> Action déclenchée suite à la commande 00 00 00 01\n");
		          }

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800bf56:	e00f      	b.n	800bf78 <Custom_STM_Event_Handler+0x114>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800bf58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5a:	3302      	adds	r3, #2
 800bf5c:	627b      	str	r3, [r7, #36]	@ 0x24
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800bf62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf64:	881b      	ldrh	r3, [r3, #0]
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 800bf6a:	f107 030c 	add.w	r3, r7, #12
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7ff ff41 	bl	800bdf6 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800bf74:	e000      	b.n	800bf78 <Custom_STM_Event_Handler+0x114>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800bf76:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bf78:	e000      	b.n	800bf7c <Custom_STM_Event_Handler+0x118>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800bf7a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800bf7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 800bf80:	4618      	mov	r0, r3
 800bf82:	3738      	adds	r7, #56	@ 0x38
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	20000678 	.word	0x20000678

0800bf8c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08c      	sub	sp, #48	@ 0x30
 800bf90:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bf92:	2392      	movs	r3, #146	@ 0x92
 800bf94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800bf96:	4834      	ldr	r0, [pc, #208]	@ (800c068 <SVCCTL_InitCustomSvc+0xdc>)
 800bf98:	f7fe fc58 	bl	800a84c <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MY_CUSTOM_SVC_UUID(uuid.Char_UUID_128);
 800bfa0:	238f      	movs	r3, #143	@ 0x8f
 800bfa2:	713b      	strb	r3, [r7, #4]
 800bfa4:	23e5      	movs	r3, #229	@ 0xe5
 800bfa6:	717b      	strb	r3, [r7, #5]
 800bfa8:	23b3      	movs	r3, #179	@ 0xb3
 800bfaa:	71bb      	strb	r3, [r7, #6]
 800bfac:	23d5      	movs	r3, #213	@ 0xd5
 800bfae:	71fb      	strb	r3, [r7, #7]
 800bfb0:	232e      	movs	r3, #46	@ 0x2e
 800bfb2:	723b      	strb	r3, [r7, #8]
 800bfb4:	237f      	movs	r3, #127	@ 0x7f
 800bfb6:	727b      	strb	r3, [r7, #9]
 800bfb8:	234a      	movs	r3, #74	@ 0x4a
 800bfba:	72bb      	strb	r3, [r7, #10]
 800bfbc:	2398      	movs	r3, #152	@ 0x98
 800bfbe:	72fb      	strb	r3, [r7, #11]
 800bfc0:	232a      	movs	r3, #42	@ 0x2a
 800bfc2:	733b      	strb	r3, [r7, #12]
 800bfc4:	2348      	movs	r3, #72	@ 0x48
 800bfc6:	737b      	strb	r3, [r7, #13]
 800bfc8:	237a      	movs	r3, #122	@ 0x7a
 800bfca:	73bb      	strb	r3, [r7, #14]
 800bfcc:	23cc      	movs	r3, #204	@ 0xcc
 800bfce:	73fb      	strb	r3, [r7, #15]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	743b      	strb	r3, [r7, #16]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	747b      	strb	r3, [r7, #17]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	74bb      	strb	r3, [r7, #18]
 800bfdc:	2300      	movs	r3, #0
 800bfde:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800bfe0:	7dbb      	ldrb	r3, [r7, #22]
 800bfe2:	1d39      	adds	r1, r7, #4
 800bfe4:	4a21      	ldr	r2, [pc, #132]	@ (800c06c <SVCCTL_InitCustomSvc+0xe0>)
 800bfe6:	9200      	str	r2, [sp, #0]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	2002      	movs	r0, #2
 800bfec:	f7fd fea2 	bl	8009d34 <aci_gatt_add_service>
 800bff0:	4603      	mov	r3, r0
 800bff2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  MY_CHAR
   */
  COPY_MY_CHAR_UUID(uuid.Char_UUID_128);
 800bff4:	2319      	movs	r3, #25
 800bff6:	713b      	strb	r3, [r7, #4]
 800bff8:	23ed      	movs	r3, #237	@ 0xed
 800bffa:	717b      	strb	r3, [r7, #5]
 800bffc:	2382      	movs	r3, #130	@ 0x82
 800bffe:	71bb      	strb	r3, [r7, #6]
 800c000:	23ae      	movs	r3, #174	@ 0xae
 800c002:	71fb      	strb	r3, [r7, #7]
 800c004:	23ed      	movs	r3, #237	@ 0xed
 800c006:	723b      	strb	r3, [r7, #8]
 800c008:	2321      	movs	r3, #33	@ 0x21
 800c00a:	727b      	strb	r3, [r7, #9]
 800c00c:	234c      	movs	r3, #76	@ 0x4c
 800c00e:	72bb      	strb	r3, [r7, #10]
 800c010:	239d      	movs	r3, #157	@ 0x9d
 800c012:	72fb      	strb	r3, [r7, #11]
 800c014:	2341      	movs	r3, #65	@ 0x41
 800c016:	733b      	strb	r3, [r7, #12]
 800c018:	2345      	movs	r3, #69	@ 0x45
 800c01a:	737b      	strb	r3, [r7, #13]
 800c01c:	2322      	movs	r3, #34	@ 0x22
 800c01e:	73bb      	strb	r3, [r7, #14]
 800c020:	238e      	movs	r3, #142	@ 0x8e
 800c022:	73fb      	strb	r3, [r7, #15]
 800c024:	2300      	movs	r3, #0
 800c026:	743b      	strb	r3, [r7, #16]
 800c028:	2300      	movs	r3, #0
 800c02a:	747b      	strb	r3, [r7, #17]
 800c02c:	2300      	movs	r3, #0
 800c02e:	74bb      	strb	r3, [r7, #18]
 800c030:	2300      	movs	r3, #0
 800c032:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_Custom_SvcHdle,
 800c034:	4b0d      	ldr	r3, [pc, #52]	@ (800c06c <SVCCTL_InitCustomSvc+0xe0>)
 800c036:	8818      	ldrh	r0, [r3, #0]
 800c038:	4b0d      	ldr	r3, [pc, #52]	@ (800c070 <SVCCTL_InitCustomSvc+0xe4>)
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	1d3a      	adds	r2, r7, #4
 800c03e:	490d      	ldr	r1, [pc, #52]	@ (800c074 <SVCCTL_InitCustomSvc+0xe8>)
 800c040:	9105      	str	r1, [sp, #20]
 800c042:	2100      	movs	r1, #0
 800c044:	9104      	str	r1, [sp, #16]
 800c046:	2110      	movs	r1, #16
 800c048:	9103      	str	r1, [sp, #12]
 800c04a:	2101      	movs	r1, #1
 800c04c:	9102      	str	r1, [sp, #8]
 800c04e:	2100      	movs	r1, #0
 800c050:	9101      	str	r1, [sp, #4]
 800c052:	210a      	movs	r1, #10
 800c054:	9100      	str	r1, [sp, #0]
 800c056:	2102      	movs	r1, #2
 800c058:	f7fd ff42 	bl	8009ee0 <aci_gatt_add_char>
 800c05c:	4603      	mov	r3, r0
 800c05e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c060:	bf00      	nop
}
 800c062:	3718      	adds	r7, #24
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	0800be65 	.word	0x0800be65
 800c06c:	20000678 	.word	0x20000678
 800c070:	20000020 	.word	0x20000020
 800c074:	2000067a 	.word	0x2000067a

0800c078 <LL_PWR_EnableBootC2>:
{
 800c078:	b480      	push	{r7}
 800c07a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c07c:	4b05      	ldr	r3, [pc, #20]	@ (800c094 <LL_PWR_EnableBootC2+0x1c>)
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	4a04      	ldr	r2, [pc, #16]	@ (800c094 <LL_PWR_EnableBootC2+0x1c>)
 800c082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c086:	60d3      	str	r3, [r2, #12]
}
 800c088:	bf00      	nop
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	58000400 	.word	0x58000400

0800c098 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c0a0:	4b06      	ldr	r3, [pc, #24]	@ (800c0bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c0a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800c0a6:	4905      	ldr	r1, [pc, #20]	@ (800c0bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800c0b0:	bf00      	nop
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	58000800 	.word	0x58000800

0800c0c0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c0c8:	4b05      	ldr	r3, [pc, #20]	@ (800c0e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c0ca:	6a1a      	ldr	r2, [r3, #32]
 800c0cc:	4904      	ldr	r1, [pc, #16]	@ (800c0e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	620b      	str	r3, [r1, #32]
}
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr
 800c0e0:	58000800 	.word	0x58000800

0800c0e4 <LL_AHB3_GRP1_EnableClock>:
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c0ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c0f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c0fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4013      	ands	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c108:	68fb      	ldr	r3, [r7, #12]
}
 800c10a:	bf00      	nop
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c116:	b480      	push	{r7}
 800c118:	b085      	sub	sp, #20
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c11e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c122:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800c126:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4313      	orrs	r3, r2
 800c12e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c136:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4013      	ands	r3, r2
 800c13e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c140:	68fb      	ldr	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr

0800c14e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800c14e:	b480      	push	{r7}
 800c150:	b083      	sub	sp, #12
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	601a      	str	r2, [r3, #0]
}
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f043 0201 	orr.w	r2, r3, #1
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	601a      	str	r2, [r3, #0]
}
 800c182:	bf00      	nop
 800c184:	370c      	adds	r7, #12
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685a      	ldr	r2, [r3, #4]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	041b      	lsls	r3, r3, #16
 800c1a0:	43db      	mvns	r3, r3
 800c1a2:	401a      	ands	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	605a      	str	r2, [r3, #4]
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	041b      	lsls	r3, r3, #16
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	605a      	str	r2, [r3, #4]
}
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685a      	ldr	r2, [r3, #4]
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	43db      	mvns	r3, r3
 800c1ea:	401a      	ands	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	605a      	str	r2, [r3, #4]
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	609a      	str	r2, [r3, #8]
}
 800c20c:	bf00      	nop
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	041a      	lsls	r2, r3, #16
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	609a      	str	r2, [r3, #8]
}
 800c22a:	bf00      	nop
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c236:	b480      	push	{r7}
 800c238:	b083      	sub	sp, #12
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68da      	ldr	r2, [r3, #12]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	4013      	ands	r3, r2
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d101      	bne.n	800c252 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c24e:	2301      	movs	r3, #1
 800c250:	e000      	b.n	800c254 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	370c      	adds	r7, #12
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	69da      	ldr	r2, [r3, #28]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	4013      	ands	r3, r2
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	429a      	cmp	r2, r3
 800c276:	d101      	bne.n	800c27c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c278:	2301      	movs	r3, #1
 800c27a:	e000      	b.n	800c27e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	370c      	adds	r7, #12
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
	...

0800c28c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c290:	2102      	movs	r1, #2
 800c292:	4818      	ldr	r0, [pc, #96]	@ (800c2f4 <HW_IPCC_Rx_Handler+0x68>)
 800c294:	f7ff ffe4 	bl	800c260 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d008      	beq.n	800c2b0 <HW_IPCC_Rx_Handler+0x24>
 800c29e:	4b15      	ldr	r3, [pc, #84]	@ (800c2f4 <HW_IPCC_Rx_Handler+0x68>)
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	f003 0302 	and.w	r3, r3, #2
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d102      	bne.n	800c2b0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800c2aa:	f000 f8d5 	bl	800c458 <HW_IPCC_SYS_EvtHandler>
 800c2ae:	e01e      	b.n	800c2ee <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	4810      	ldr	r0, [pc, #64]	@ (800c2f4 <HW_IPCC_Rx_Handler+0x68>)
 800c2b4:	f7ff ffd4 	bl	800c260 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d008      	beq.n	800c2d0 <HW_IPCC_Rx_Handler+0x44>
 800c2be:	4b0d      	ldr	r3, [pc, #52]	@ (800c2f4 <HW_IPCC_Rx_Handler+0x68>)
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d102      	bne.n	800c2d0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800c2ca:	f000 f889 	bl	800c3e0 <HW_IPCC_BLE_EvtHandler>
 800c2ce:	e00e      	b.n	800c2ee <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c2d0:	2108      	movs	r1, #8
 800c2d2:	4808      	ldr	r0, [pc, #32]	@ (800c2f4 <HW_IPCC_Rx_Handler+0x68>)
 800c2d4:	f7ff ffc4 	bl	800c260 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d008      	beq.n	800c2f0 <HW_IPCC_Rx_Handler+0x64>
 800c2de:	4b05      	ldr	r3, [pc, #20]	@ (800c2f4 <HW_IPCC_Rx_Handler+0x68>)
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	f003 0308 	and.w	r3, r3, #8
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d102      	bne.n	800c2f0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c2ea:	f000 f901 	bl	800c4f0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c2ee:	bf00      	nop
 800c2f0:	bf00      	nop
}
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	58000c00 	.word	0x58000c00

0800c2f8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	4818      	ldr	r0, [pc, #96]	@ (800c360 <HW_IPCC_Tx_Handler+0x68>)
 800c300:	f7ff ff99 	bl	800c236 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d108      	bne.n	800c31c <HW_IPCC_Tx_Handler+0x24>
 800c30a:	4b15      	ldr	r3, [pc, #84]	@ (800c360 <HW_IPCC_Tx_Handler+0x68>)
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c312:	2b00      	cmp	r3, #0
 800c314:	d102      	bne.n	800c31c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c316:	f000 f893 	bl	800c440 <HW_IPCC_SYS_CmdEvtHandler>
 800c31a:	e01e      	b.n	800c35a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c31c:	2108      	movs	r1, #8
 800c31e:	4810      	ldr	r0, [pc, #64]	@ (800c360 <HW_IPCC_Tx_Handler+0x68>)
 800c320:	f7ff ff89 	bl	800c236 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d108      	bne.n	800c33c <HW_IPCC_Tx_Handler+0x44>
 800c32a:	4b0d      	ldr	r3, [pc, #52]	@ (800c360 <HW_IPCC_Tx_Handler+0x68>)
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d102      	bne.n	800c33c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c336:	f000 f8bd 	bl	800c4b4 <HW_IPCC_MM_FreeBufHandler>
 800c33a:	e00e      	b.n	800c35a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c33c:	2120      	movs	r1, #32
 800c33e:	4808      	ldr	r0, [pc, #32]	@ (800c360 <HW_IPCC_Tx_Handler+0x68>)
 800c340:	f7ff ff79 	bl	800c236 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d108      	bne.n	800c35c <HW_IPCC_Tx_Handler+0x64>
 800c34a:	4b05      	ldr	r3, [pc, #20]	@ (800c360 <HW_IPCC_Tx_Handler+0x68>)
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c352:	2b00      	cmp	r3, #0
 800c354:	d102      	bne.n	800c35c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c356:	f000 f84f 	bl	800c3f8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c35a:	bf00      	nop
 800c35c:	bf00      	nop
}
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	58000c00 	.word	0x58000c00

0800c364 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c368:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c36c:	f7ff fed3 	bl	800c116 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c370:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c374:	f7ff fea4 	bl	800c0c0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c378:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c37c:	f7ff fe8c 	bl	800c098 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c380:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c382:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c384:	f7ff fe78 	bl	800c078 <LL_PWR_EnableBootC2>

  return;
 800c388:	bf00      	nop
}
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c390:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c394:	f7ff fea6 	bl	800c0e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c398:	4806      	ldr	r0, [pc, #24]	@ (800c3b4 <HW_IPCC_Init+0x28>)
 800c39a:	f7ff fee8 	bl	800c16e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c39e:	4805      	ldr	r0, [pc, #20]	@ (800c3b4 <HW_IPCC_Init+0x28>)
 800c3a0:	f7ff fed5 	bl	800c14e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c3a4:	202c      	movs	r0, #44	@ 0x2c
 800c3a6:	f7f6 fcda 	bl	8002d5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c3aa:	202d      	movs	r0, #45	@ 0x2d
 800c3ac:	f7f6 fcd7 	bl	8002d5e <HAL_NVIC_EnableIRQ>

  return;
 800c3b0:	bf00      	nop
}
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	58000c00 	.word	0x58000c00

0800c3b8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c3bc:	2101      	movs	r1, #1
 800c3be:	4802      	ldr	r0, [pc, #8]	@ (800c3c8 <HW_IPCC_BLE_Init+0x10>)
 800c3c0:	f7ff ff0a 	bl	800c1d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c3c4:	bf00      	nop
}
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	58000c00 	.word	0x58000c00

0800c3cc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c3d0:	2101      	movs	r1, #1
 800c3d2:	4802      	ldr	r0, [pc, #8]	@ (800c3dc <HW_IPCC_BLE_SendCmd+0x10>)
 800c3d4:	f7ff ff20 	bl	800c218 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c3d8:	bf00      	nop
}
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	58000c00 	.word	0x58000c00

0800c3e0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c3e4:	f7fe fef6 	bl	800b1d4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	4802      	ldr	r0, [pc, #8]	@ (800c3f4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800c3ec:	f7ff ff06 	bl	800c1fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c3f0:	bf00      	nop
}
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	58000c00 	.word	0x58000c00

0800c3f8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c3fc:	2120      	movs	r1, #32
 800c3fe:	4803      	ldr	r0, [pc, #12]	@ (800c40c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c400:	f7ff fed8 	bl	800c1b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c404:	f7fe ff16 	bl	800b234 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c408:	bf00      	nop
}
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	58000c00 	.word	0x58000c00

0800c410 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c414:	2102      	movs	r1, #2
 800c416:	4802      	ldr	r0, [pc, #8]	@ (800c420 <HW_IPCC_SYS_Init+0x10>)
 800c418:	f7ff fede 	bl	800c1d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c41c:	bf00      	nop
}
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	58000c00 	.word	0x58000c00

0800c424 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c428:	2102      	movs	r1, #2
 800c42a:	4804      	ldr	r0, [pc, #16]	@ (800c43c <HW_IPCC_SYS_SendCmd+0x18>)
 800c42c:	f7ff fef4 	bl	800c218 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c430:	2102      	movs	r1, #2
 800c432:	4802      	ldr	r0, [pc, #8]	@ (800c43c <HW_IPCC_SYS_SendCmd+0x18>)
 800c434:	f7ff feab 	bl	800c18e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c438:	bf00      	nop
}
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	58000c00 	.word	0x58000c00

0800c440 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c444:	2102      	movs	r1, #2
 800c446:	4803      	ldr	r0, [pc, #12]	@ (800c454 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c448:	f7ff feb4 	bl	800c1b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c44c:	f7fe ff42 	bl	800b2d4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c450:	bf00      	nop
}
 800c452:	bd80      	pop	{r7, pc}
 800c454:	58000c00 	.word	0x58000c00

0800c458 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c45c:	f7fe ff50 	bl	800b300 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c460:	2102      	movs	r1, #2
 800c462:	4802      	ldr	r0, [pc, #8]	@ (800c46c <HW_IPCC_SYS_EvtHandler+0x14>)
 800c464:	f7ff feca 	bl	800c1fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c468:	bf00      	nop
}
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	58000c00 	.word	0x58000c00

0800c470 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c478:	2108      	movs	r1, #8
 800c47a:	480c      	ldr	r0, [pc, #48]	@ (800c4ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c47c:	f7ff fedb 	bl	800c236 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d007      	beq.n	800c496 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c486:	4a0a      	ldr	r2, [pc, #40]	@ (800c4b0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c48c:	2108      	movs	r1, #8
 800c48e:	4807      	ldr	r0, [pc, #28]	@ (800c4ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c490:	f7ff fe7d 	bl	800c18e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c494:	e006      	b.n	800c4a4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c49a:	2108      	movs	r1, #8
 800c49c:	4803      	ldr	r0, [pc, #12]	@ (800c4ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c49e:	f7ff febb 	bl	800c218 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c4a2:	bf00      	nop
}
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	58000c00 	.word	0x58000c00
 800c4b0:	2000067c 	.word	0x2000067c

0800c4b4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c4b8:	2108      	movs	r1, #8
 800c4ba:	4806      	ldr	r0, [pc, #24]	@ (800c4d4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c4bc:	f7ff fe7a 	bl	800c1b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c4c0:	4b05      	ldr	r3, [pc, #20]	@ (800c4d8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c4c6:	2108      	movs	r1, #8
 800c4c8:	4802      	ldr	r0, [pc, #8]	@ (800c4d4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c4ca:	f7ff fea5 	bl	800c218 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c4ce:	bf00      	nop
}
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	58000c00 	.word	0x58000c00
 800c4d8:	2000067c 	.word	0x2000067c

0800c4dc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c4e0:	2108      	movs	r1, #8
 800c4e2:	4802      	ldr	r0, [pc, #8]	@ (800c4ec <HW_IPCC_TRACES_Init+0x10>)
 800c4e4:	f7ff fe78 	bl	800c1d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c4e8:	bf00      	nop
}
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	58000c00 	.word	0x58000c00

0800c4f0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c4f4:	f7fe ffac 	bl	800b450 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c4f8:	2108      	movs	r1, #8
 800c4fa:	4802      	ldr	r0, [pc, #8]	@ (800c504 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c4fc:	f7ff fe7e 	bl	800c1fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c500:	bf00      	nop
}
 800c502:	bd80      	pop	{r7, pc}
 800c504:	58000c00 	.word	0x58000c00

0800c508 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c50c:	4b05      	ldr	r3, [pc, #20]	@ (800c524 <UTIL_LPM_Init+0x1c>)
 800c50e:	2200      	movs	r2, #0
 800c510:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c512:	4b05      	ldr	r3, [pc, #20]	@ (800c528 <UTIL_LPM_Init+0x20>)
 800c514:	2200      	movs	r2, #0
 800c516:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c518:	bf00      	nop
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	20000680 	.word	0x20000680
 800c528:	20000684 	.word	0x20000684

0800c52c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c52c:	b480      	push	{r7}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c538:	f3ef 8310 	mrs	r3, PRIMASK
 800c53c:	613b      	str	r3, [r7, #16]
  return(result);
 800c53e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c540:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c542:	b672      	cpsid	i
}
 800c544:	bf00      	nop
  
  switch(state)
 800c546:	78fb      	ldrb	r3, [r7, #3]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d008      	beq.n	800c55e <UTIL_LPM_SetOffMode+0x32>
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d10e      	bne.n	800c56e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c550:	4b0d      	ldr	r3, [pc, #52]	@ (800c588 <UTIL_LPM_SetOffMode+0x5c>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4313      	orrs	r3, r2
 800c558:	4a0b      	ldr	r2, [pc, #44]	@ (800c588 <UTIL_LPM_SetOffMode+0x5c>)
 800c55a:	6013      	str	r3, [r2, #0]
      break;
 800c55c:	e008      	b.n	800c570 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	43da      	mvns	r2, r3
 800c562:	4b09      	ldr	r3, [pc, #36]	@ (800c588 <UTIL_LPM_SetOffMode+0x5c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4013      	ands	r3, r2
 800c568:	4a07      	ldr	r2, [pc, #28]	@ (800c588 <UTIL_LPM_SetOffMode+0x5c>)
 800c56a:	6013      	str	r3, [r2, #0]
      break;
 800c56c:	e000      	b.n	800c570 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c56e:	bf00      	nop
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f383 8810 	msr	PRIMASK, r3
}
 800c57a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c57c:	bf00      	nop
 800c57e:	371c      	adds	r7, #28
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	20000684 	.word	0x20000684

0800c58c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b090      	sub	sp, #64	@ 0x40
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c594:	4b73      	ldr	r3, [pc, #460]	@ (800c764 <UTIL_SEQ_Run+0x1d8>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800c59a:	4b72      	ldr	r3, [pc, #456]	@ (800c764 <UTIL_SEQ_Run+0x1d8>)
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	4a70      	ldr	r2, [pc, #448]	@ (800c764 <UTIL_SEQ_Run+0x1d8>)
 800c5a4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c5a6:	4b70      	ldr	r3, [pc, #448]	@ (800c768 <UTIL_SEQ_Run+0x1dc>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800c5ac:	4b6f      	ldr	r3, [pc, #444]	@ (800c76c <UTIL_SEQ_Run+0x1e0>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800c5b2:	4b6f      	ldr	r3, [pc, #444]	@ (800c770 <UTIL_SEQ_Run+0x1e4>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800c5b8:	4b6e      	ldr	r3, [pc, #440]	@ (800c774 <UTIL_SEQ_Run+0x1e8>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c5be:	e08d      	b.n	800c6dc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c5c4:	e002      	b.n	800c5cc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c5cc:	4a6a      	ldr	r2, [pc, #424]	@ (800c778 <UTIL_SEQ_Run+0x1ec>)
 800c5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d6:	401a      	ands	r2, r3
 800c5d8:	4b62      	ldr	r3, [pc, #392]	@ (800c764 <UTIL_SEQ_Run+0x1d8>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4013      	ands	r3, r2
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d0f1      	beq.n	800c5c6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c5e2:	4a65      	ldr	r2, [pc, #404]	@ (800c778 <UTIL_SEQ_Run+0x1ec>)
 800c5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ec:	401a      	ands	r2, r3
 800c5ee:	4b5d      	ldr	r3, [pc, #372]	@ (800c764 <UTIL_SEQ_Run+0x1d8>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c5f6:	4a60      	ldr	r2, [pc, #384]	@ (800c778 <UTIL_SEQ_Run+0x1ec>)
 800c5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	4413      	add	r3, r2
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c602:	4013      	ands	r3, r2
 800c604:	2b00      	cmp	r3, #0
 800c606:	d106      	bne.n	800c616 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c608:	4a5b      	ldr	r2, [pc, #364]	@ (800c778 <UTIL_SEQ_Run+0x1ec>)
 800c60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c60c:	00db      	lsls	r3, r3, #3
 800c60e:	4413      	add	r3, r2
 800c610:	f04f 32ff 	mov.w	r2, #4294967295
 800c614:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c616:	4a58      	ldr	r2, [pc, #352]	@ (800c778 <UTIL_SEQ_Run+0x1ec>)
 800c618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c61a:	00db      	lsls	r3, r3, #3
 800c61c:	4413      	add	r3, r2
 800c61e:	685a      	ldr	r2, [r3, #4]
 800c620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c622:	4013      	ands	r3, r2
 800c624:	4618      	mov	r0, r3
 800c626:	f000 f9b3 	bl	800c990 <SEQ_BitPosition>
 800c62a:	4603      	mov	r3, r0
 800c62c:	461a      	mov	r2, r3
 800c62e:	4b53      	ldr	r3, [pc, #332]	@ (800c77c <UTIL_SEQ_Run+0x1f0>)
 800c630:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c632:	4a51      	ldr	r2, [pc, #324]	@ (800c778 <UTIL_SEQ_Run+0x1ec>)
 800c634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c636:	00db      	lsls	r3, r3, #3
 800c638:	4413      	add	r3, r2
 800c63a:	685a      	ldr	r2, [r3, #4]
 800c63c:	4b4f      	ldr	r3, [pc, #316]	@ (800c77c <UTIL_SEQ_Run+0x1f0>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2101      	movs	r1, #1
 800c642:	fa01 f303 	lsl.w	r3, r1, r3
 800c646:	43db      	mvns	r3, r3
 800c648:	401a      	ands	r2, r3
 800c64a:	494b      	ldr	r1, [pc, #300]	@ (800c778 <UTIL_SEQ_Run+0x1ec>)
 800c64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c64e:	00db      	lsls	r3, r3, #3
 800c650:	440b      	add	r3, r1
 800c652:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c654:	f3ef 8310 	mrs	r3, PRIMASK
 800c658:	61bb      	str	r3, [r7, #24]
  return(result);
 800c65a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c65c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c65e:	b672      	cpsid	i
}
 800c660:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c662:	4b46      	ldr	r3, [pc, #280]	@ (800c77c <UTIL_SEQ_Run+0x1f0>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2201      	movs	r2, #1
 800c668:	fa02 f303 	lsl.w	r3, r2, r3
 800c66c:	43da      	mvns	r2, r3
 800c66e:	4b3e      	ldr	r3, [pc, #248]	@ (800c768 <UTIL_SEQ_Run+0x1dc>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4013      	ands	r3, r2
 800c674:	4a3c      	ldr	r2, [pc, #240]	@ (800c768 <UTIL_SEQ_Run+0x1dc>)
 800c676:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c678:	2302      	movs	r3, #2
 800c67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c67c:	e013      	b.n	800c6a6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c67e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c680:	3b01      	subs	r3, #1
 800c682:	4a3d      	ldr	r2, [pc, #244]	@ (800c778 <UTIL_SEQ_Run+0x1ec>)
 800c684:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c688:	4b3c      	ldr	r3, [pc, #240]	@ (800c77c <UTIL_SEQ_Run+0x1f0>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2201      	movs	r2, #1
 800c68e:	fa02 f303 	lsl.w	r3, r2, r3
 800c692:	43da      	mvns	r2, r3
 800c694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c696:	3b01      	subs	r3, #1
 800c698:	400a      	ands	r2, r1
 800c69a:	4937      	ldr	r1, [pc, #220]	@ (800c778 <UTIL_SEQ_Run+0x1ec>)
 800c69c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1e8      	bne.n	800c67e <UTIL_SEQ_Run+0xf2>
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	f383 8810 	msr	PRIMASK, r3
}
 800c6b6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c6b8:	4b30      	ldr	r3, [pc, #192]	@ (800c77c <UTIL_SEQ_Run+0x1f0>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a30      	ldr	r2, [pc, #192]	@ (800c780 <UTIL_SEQ_Run+0x1f4>)
 800c6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6c2:	4798      	blx	r3

    local_taskset = TaskSet;
 800c6c4:	4b28      	ldr	r3, [pc, #160]	@ (800c768 <UTIL_SEQ_Run+0x1dc>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800c6ca:	4b28      	ldr	r3, [pc, #160]	@ (800c76c <UTIL_SEQ_Run+0x1e0>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800c6d0:	4b27      	ldr	r3, [pc, #156]	@ (800c770 <UTIL_SEQ_Run+0x1e4>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800c6d6:	4b27      	ldr	r3, [pc, #156]	@ (800c774 <UTIL_SEQ_Run+0x1e8>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c6dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e0:	401a      	ands	r2, r3
 800c6e2:	4b20      	ldr	r3, [pc, #128]	@ (800c764 <UTIL_SEQ_Run+0x1d8>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <UTIL_SEQ_Run+0x16c>
 800c6ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f43f af64 	beq.w	800c5c0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c6f8:	4b20      	ldr	r3, [pc, #128]	@ (800c77c <UTIL_SEQ_Run+0x1f0>)
 800c6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c6fe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c700:	f000 f938 	bl	800c974 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c704:	f3ef 8310 	mrs	r3, PRIMASK
 800c708:	613b      	str	r3, [r7, #16]
  return(result);
 800c70a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c70c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c70e:	b672      	cpsid	i
}
 800c710:	bf00      	nop
  local_taskset = TaskSet;
 800c712:	4b15      	ldr	r3, [pc, #84]	@ (800c768 <UTIL_SEQ_Run+0x1dc>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800c718:	4b14      	ldr	r3, [pc, #80]	@ (800c76c <UTIL_SEQ_Run+0x1e0>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800c71e:	4b14      	ldr	r3, [pc, #80]	@ (800c770 <UTIL_SEQ_Run+0x1e4>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c724:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c728:	401a      	ands	r2, r3
 800c72a:	4b0e      	ldr	r3, [pc, #56]	@ (800c764 <UTIL_SEQ_Run+0x1d8>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4013      	ands	r3, r2
 800c730:	2b00      	cmp	r3, #0
 800c732:	d107      	bne.n	800c744 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c734:	4b0f      	ldr	r3, [pc, #60]	@ (800c774 <UTIL_SEQ_Run+0x1e8>)
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c73a:	4013      	ands	r3, r2
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c740:	f7f4 fa70 	bl	8000c24 <UTIL_SEQ_Idle>
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f383 8810 	msr	PRIMASK, r3
}
 800c74e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c750:	f000 f917 	bl	800c982 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c754:	4a03      	ldr	r2, [pc, #12]	@ (800c764 <UTIL_SEQ_Run+0x1d8>)
 800c756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c758:	6013      	str	r3, [r2, #0]

  return;
 800c75a:	bf00      	nop
}
 800c75c:	3740      	adds	r7, #64	@ 0x40
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	20000028 	.word	0x20000028
 800c768:	20000688 	.word	0x20000688
 800c76c:	2000068c 	.word	0x2000068c
 800c770:	20000024 	.word	0x20000024
 800c774:	20000690 	.word	0x20000690
 800c778:	20000718 	.word	0x20000718
 800c77c:	20000694 	.word	0x20000694
 800c780:	20000698 	.word	0x20000698

0800c784 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c790:	f3ef 8310 	mrs	r3, PRIMASK
 800c794:	617b      	str	r3, [r7, #20]
  return(result);
 800c796:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c79a:	b672      	cpsid	i
}
 800c79c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f000 f8f6 	bl	800c990 <SEQ_BitPosition>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4a06      	ldr	r2, [pc, #24]	@ (800c7c4 <UTIL_SEQ_RegTask+0x40>)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c7bc:	bf00      	nop
}
 800c7be:	3720      	adds	r7, #32
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	20000698 	.word	0x20000698

0800c7c8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b087      	sub	sp, #28
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c7da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c7dc:	b672      	cpsid	i
}
 800c7de:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c7e0:	4b0d      	ldr	r3, [pc, #52]	@ (800c818 <UTIL_SEQ_SetTask+0x50>)
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	4a0b      	ldr	r2, [pc, #44]	@ (800c818 <UTIL_SEQ_SetTask+0x50>)
 800c7ea:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c7ec:	4a0b      	ldr	r2, [pc, #44]	@ (800c81c <UTIL_SEQ_SetTask+0x54>)
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	431a      	orrs	r2, r3
 800c7f8:	4908      	ldr	r1, [pc, #32]	@ (800c81c <UTIL_SEQ_SetTask+0x54>)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	f383 8810 	msr	PRIMASK, r3
}
 800c80a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c80c:	bf00      	nop
}
 800c80e:	371c      	adds	r7, #28
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	20000688 	.word	0x20000688
 800c81c:	20000718 	.word	0x20000718

0800c820 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c820:	b480      	push	{r7}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c828:	f3ef 8310 	mrs	r3, PRIMASK
 800c82c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c82e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c830:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c832:	b672      	cpsid	i
}
 800c834:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	43da      	mvns	r2, r3
 800c83a:	4b08      	ldr	r3, [pc, #32]	@ (800c85c <UTIL_SEQ_PauseTask+0x3c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4013      	ands	r3, r2
 800c840:	4a06      	ldr	r2, [pc, #24]	@ (800c85c <UTIL_SEQ_PauseTask+0x3c>)
 800c842:	6013      	str	r3, [r2, #0]
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	f383 8810 	msr	PRIMASK, r3
}
 800c84e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c850:	bf00      	nop
}
 800c852:	371c      	adds	r7, #28
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	20000024 	.word	0x20000024

0800c860 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c860:	b480      	push	{r7}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c868:	f3ef 8310 	mrs	r3, PRIMASK
 800c86c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c86e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c872:	b672      	cpsid	i
}
 800c874:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c876:	4b09      	ldr	r3, [pc, #36]	@ (800c89c <UTIL_SEQ_ResumeTask+0x3c>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	4a07      	ldr	r2, [pc, #28]	@ (800c89c <UTIL_SEQ_ResumeTask+0x3c>)
 800c880:	6013      	str	r3, [r2, #0]
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	f383 8810 	msr	PRIMASK, r3
}
 800c88c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c88e:	bf00      	nop
}
 800c890:	371c      	adds	r7, #28
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	20000024 	.word	0x20000024

0800c8a0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b087      	sub	sp, #28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8a8:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c8b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8b2:	b672      	cpsid	i
}
 800c8b4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c8b6:	4b09      	ldr	r3, [pc, #36]	@ (800c8dc <UTIL_SEQ_SetEvt+0x3c>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	4a07      	ldr	r2, [pc, #28]	@ (800c8dc <UTIL_SEQ_SetEvt+0x3c>)
 800c8c0:	6013      	str	r3, [r2, #0]
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	f383 8810 	msr	PRIMASK, r3
}
 800c8cc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c8ce:	bf00      	nop
}
 800c8d0:	371c      	adds	r7, #28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	2000068c 	.word	0x2000068c

0800c8e0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b088      	sub	sp, #32
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c8e8:	4b1f      	ldr	r3, [pc, #124]	@ (800c968 <UTIL_SEQ_WaitEvt+0x88>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c8ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c968 <UTIL_SEQ_WaitEvt+0x88>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f6:	d102      	bne.n	800c8fe <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	61fb      	str	r3, [r7, #28]
 800c8fc:	e005      	b.n	800c90a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c8fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c968 <UTIL_SEQ_WaitEvt+0x88>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2201      	movs	r2, #1
 800c904:	fa02 f303 	lsl.w	r3, r2, r3
 800c908:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c90a:	4b18      	ldr	r3, [pc, #96]	@ (800c96c <UTIL_SEQ_WaitEvt+0x8c>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c910:	4a16      	ldr	r2, [pc, #88]	@ (800c96c <UTIL_SEQ_WaitEvt+0x8c>)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c916:	e003      	b.n	800c920 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c918:	6879      	ldr	r1, [r7, #4]
 800c91a:	69f8      	ldr	r0, [r7, #28]
 800c91c:	f7f4 f989 	bl	8000c32 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c920:	4b13      	ldr	r3, [pc, #76]	@ (800c970 <UTIL_SEQ_WaitEvt+0x90>)
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4013      	ands	r3, r2
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d0f5      	beq.n	800c918 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c92c:	4a0e      	ldr	r2, [pc, #56]	@ (800c968 <UTIL_SEQ_WaitEvt+0x88>)
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c932:	f3ef 8310 	mrs	r3, PRIMASK
 800c936:	60bb      	str	r3, [r7, #8]
  return(result);
 800c938:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c93c:	b672      	cpsid	i
}
 800c93e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	43da      	mvns	r2, r3
 800c944:	4b0a      	ldr	r3, [pc, #40]	@ (800c970 <UTIL_SEQ_WaitEvt+0x90>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4013      	ands	r3, r2
 800c94a:	4a09      	ldr	r2, [pc, #36]	@ (800c970 <UTIL_SEQ_WaitEvt+0x90>)
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f383 8810 	msr	PRIMASK, r3
}
 800c958:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c95a:	4a04      	ldr	r2, [pc, #16]	@ (800c96c <UTIL_SEQ_WaitEvt+0x8c>)
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	6013      	str	r3, [r2, #0]
  return;
 800c960:	bf00      	nop
}
 800c962:	3720      	adds	r7, #32
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	20000694 	.word	0x20000694
 800c96c:	20000690 	.word	0x20000690
 800c970:	2000068c 	.word	0x2000068c

0800c974 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c974:	b480      	push	{r7}
 800c976:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c978:	bf00      	nop
}
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c982:	b480      	push	{r7}
 800c984:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c986:	bf00      	nop
}
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c998:	2300      	movs	r3, #0
 800c99a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9a6:	d204      	bcs.n	800c9b2 <SEQ_BitPosition+0x22>
 800c9a8:	2310      	movs	r3, #16
 800c9aa:	73fb      	strb	r3, [r7, #15]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	041b      	lsls	r3, r3, #16
 800c9b0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9b8:	d205      	bcs.n	800c9c6 <SEQ_BitPosition+0x36>
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	3308      	adds	r3, #8
 800c9be:	73fb      	strb	r3, [r7, #15]
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	021b      	lsls	r3, r3, #8
 800c9c4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9cc:	d205      	bcs.n	800c9da <SEQ_BitPosition+0x4a>
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	73fb      	strb	r3, [r7, #15]
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	011b      	lsls	r3, r3, #4
 800c9d8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	0f1b      	lsrs	r3, r3, #28
 800c9de:	4a07      	ldr	r2, [pc, #28]	@ (800c9fc <SEQ_BitPosition+0x6c>)
 800c9e0:	5cd2      	ldrb	r2, [r2, r3]
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	f1c3 031f 	rsb	r3, r3, #31
 800c9ee:	b2db      	uxtb	r3, r3
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	0800de3c 	.word	0x0800de3c

0800ca00 <std>:
 800ca00:	2300      	movs	r3, #0
 800ca02:	b510      	push	{r4, lr}
 800ca04:	4604      	mov	r4, r0
 800ca06:	e9c0 3300 	strd	r3, r3, [r0]
 800ca0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca0e:	6083      	str	r3, [r0, #8]
 800ca10:	8181      	strh	r1, [r0, #12]
 800ca12:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca14:	81c2      	strh	r2, [r0, #14]
 800ca16:	6183      	str	r3, [r0, #24]
 800ca18:	4619      	mov	r1, r3
 800ca1a:	2208      	movs	r2, #8
 800ca1c:	305c      	adds	r0, #92	@ 0x5c
 800ca1e:	f000 fa01 	bl	800ce24 <memset>
 800ca22:	4b0d      	ldr	r3, [pc, #52]	@ (800ca58 <std+0x58>)
 800ca24:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca26:	4b0d      	ldr	r3, [pc, #52]	@ (800ca5c <std+0x5c>)
 800ca28:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca60 <std+0x60>)
 800ca2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca64 <std+0x64>)
 800ca30:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca32:	4b0d      	ldr	r3, [pc, #52]	@ (800ca68 <std+0x68>)
 800ca34:	6224      	str	r4, [r4, #32]
 800ca36:	429c      	cmp	r4, r3
 800ca38:	d006      	beq.n	800ca48 <std+0x48>
 800ca3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca3e:	4294      	cmp	r4, r2
 800ca40:	d002      	beq.n	800ca48 <std+0x48>
 800ca42:	33d0      	adds	r3, #208	@ 0xd0
 800ca44:	429c      	cmp	r4, r3
 800ca46:	d105      	bne.n	800ca54 <std+0x54>
 800ca48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca50:	f000 ba60 	b.w	800cf14 <__retarget_lock_init_recursive>
 800ca54:	bd10      	pop	{r4, pc}
 800ca56:	bf00      	nop
 800ca58:	0800cc75 	.word	0x0800cc75
 800ca5c:	0800cc97 	.word	0x0800cc97
 800ca60:	0800cccf 	.word	0x0800cccf
 800ca64:	0800ccf3 	.word	0x0800ccf3
 800ca68:	20000728 	.word	0x20000728

0800ca6c <stdio_exit_handler>:
 800ca6c:	4a02      	ldr	r2, [pc, #8]	@ (800ca78 <stdio_exit_handler+0xc>)
 800ca6e:	4903      	ldr	r1, [pc, #12]	@ (800ca7c <stdio_exit_handler+0x10>)
 800ca70:	4803      	ldr	r0, [pc, #12]	@ (800ca80 <stdio_exit_handler+0x14>)
 800ca72:	f000 b869 	b.w	800cb48 <_fwalk_sglue>
 800ca76:	bf00      	nop
 800ca78:	2000002c 	.word	0x2000002c
 800ca7c:	0800d7d1 	.word	0x0800d7d1
 800ca80:	2000003c 	.word	0x2000003c

0800ca84 <cleanup_stdio>:
 800ca84:	6841      	ldr	r1, [r0, #4]
 800ca86:	4b0c      	ldr	r3, [pc, #48]	@ (800cab8 <cleanup_stdio+0x34>)
 800ca88:	4299      	cmp	r1, r3
 800ca8a:	b510      	push	{r4, lr}
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	d001      	beq.n	800ca94 <cleanup_stdio+0x10>
 800ca90:	f000 fe9e 	bl	800d7d0 <_fflush_r>
 800ca94:	68a1      	ldr	r1, [r4, #8]
 800ca96:	4b09      	ldr	r3, [pc, #36]	@ (800cabc <cleanup_stdio+0x38>)
 800ca98:	4299      	cmp	r1, r3
 800ca9a:	d002      	beq.n	800caa2 <cleanup_stdio+0x1e>
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f000 fe97 	bl	800d7d0 <_fflush_r>
 800caa2:	68e1      	ldr	r1, [r4, #12]
 800caa4:	4b06      	ldr	r3, [pc, #24]	@ (800cac0 <cleanup_stdio+0x3c>)
 800caa6:	4299      	cmp	r1, r3
 800caa8:	d004      	beq.n	800cab4 <cleanup_stdio+0x30>
 800caaa:	4620      	mov	r0, r4
 800caac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cab0:	f000 be8e 	b.w	800d7d0 <_fflush_r>
 800cab4:	bd10      	pop	{r4, pc}
 800cab6:	bf00      	nop
 800cab8:	20000728 	.word	0x20000728
 800cabc:	20000790 	.word	0x20000790
 800cac0:	200007f8 	.word	0x200007f8

0800cac4 <global_stdio_init.part.0>:
 800cac4:	b510      	push	{r4, lr}
 800cac6:	4b0b      	ldr	r3, [pc, #44]	@ (800caf4 <global_stdio_init.part.0+0x30>)
 800cac8:	4c0b      	ldr	r4, [pc, #44]	@ (800caf8 <global_stdio_init.part.0+0x34>)
 800caca:	4a0c      	ldr	r2, [pc, #48]	@ (800cafc <global_stdio_init.part.0+0x38>)
 800cacc:	601a      	str	r2, [r3, #0]
 800cace:	4620      	mov	r0, r4
 800cad0:	2200      	movs	r2, #0
 800cad2:	2104      	movs	r1, #4
 800cad4:	f7ff ff94 	bl	800ca00 <std>
 800cad8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cadc:	2201      	movs	r2, #1
 800cade:	2109      	movs	r1, #9
 800cae0:	f7ff ff8e 	bl	800ca00 <std>
 800cae4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cae8:	2202      	movs	r2, #2
 800caea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caee:	2112      	movs	r1, #18
 800caf0:	f7ff bf86 	b.w	800ca00 <std>
 800caf4:	20000860 	.word	0x20000860
 800caf8:	20000728 	.word	0x20000728
 800cafc:	0800ca6d 	.word	0x0800ca6d

0800cb00 <__sfp_lock_acquire>:
 800cb00:	4801      	ldr	r0, [pc, #4]	@ (800cb08 <__sfp_lock_acquire+0x8>)
 800cb02:	f000 ba08 	b.w	800cf16 <__retarget_lock_acquire_recursive>
 800cb06:	bf00      	nop
 800cb08:	20000869 	.word	0x20000869

0800cb0c <__sfp_lock_release>:
 800cb0c:	4801      	ldr	r0, [pc, #4]	@ (800cb14 <__sfp_lock_release+0x8>)
 800cb0e:	f000 ba03 	b.w	800cf18 <__retarget_lock_release_recursive>
 800cb12:	bf00      	nop
 800cb14:	20000869 	.word	0x20000869

0800cb18 <__sinit>:
 800cb18:	b510      	push	{r4, lr}
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	f7ff fff0 	bl	800cb00 <__sfp_lock_acquire>
 800cb20:	6a23      	ldr	r3, [r4, #32]
 800cb22:	b11b      	cbz	r3, 800cb2c <__sinit+0x14>
 800cb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb28:	f7ff bff0 	b.w	800cb0c <__sfp_lock_release>
 800cb2c:	4b04      	ldr	r3, [pc, #16]	@ (800cb40 <__sinit+0x28>)
 800cb2e:	6223      	str	r3, [r4, #32]
 800cb30:	4b04      	ldr	r3, [pc, #16]	@ (800cb44 <__sinit+0x2c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1f5      	bne.n	800cb24 <__sinit+0xc>
 800cb38:	f7ff ffc4 	bl	800cac4 <global_stdio_init.part.0>
 800cb3c:	e7f2      	b.n	800cb24 <__sinit+0xc>
 800cb3e:	bf00      	nop
 800cb40:	0800ca85 	.word	0x0800ca85
 800cb44:	20000860 	.word	0x20000860

0800cb48 <_fwalk_sglue>:
 800cb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	4688      	mov	r8, r1
 800cb50:	4614      	mov	r4, r2
 800cb52:	2600      	movs	r6, #0
 800cb54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb58:	f1b9 0901 	subs.w	r9, r9, #1
 800cb5c:	d505      	bpl.n	800cb6a <_fwalk_sglue+0x22>
 800cb5e:	6824      	ldr	r4, [r4, #0]
 800cb60:	2c00      	cmp	r4, #0
 800cb62:	d1f7      	bne.n	800cb54 <_fwalk_sglue+0xc>
 800cb64:	4630      	mov	r0, r6
 800cb66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb6a:	89ab      	ldrh	r3, [r5, #12]
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d907      	bls.n	800cb80 <_fwalk_sglue+0x38>
 800cb70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb74:	3301      	adds	r3, #1
 800cb76:	d003      	beq.n	800cb80 <_fwalk_sglue+0x38>
 800cb78:	4629      	mov	r1, r5
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	47c0      	blx	r8
 800cb7e:	4306      	orrs	r6, r0
 800cb80:	3568      	adds	r5, #104	@ 0x68
 800cb82:	e7e9      	b.n	800cb58 <_fwalk_sglue+0x10>

0800cb84 <iprintf>:
 800cb84:	b40f      	push	{r0, r1, r2, r3}
 800cb86:	b507      	push	{r0, r1, r2, lr}
 800cb88:	4906      	ldr	r1, [pc, #24]	@ (800cba4 <iprintf+0x20>)
 800cb8a:	ab04      	add	r3, sp, #16
 800cb8c:	6808      	ldr	r0, [r1, #0]
 800cb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb92:	6881      	ldr	r1, [r0, #8]
 800cb94:	9301      	str	r3, [sp, #4]
 800cb96:	f000 faf1 	bl	800d17c <_vfiprintf_r>
 800cb9a:	b003      	add	sp, #12
 800cb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cba0:	b004      	add	sp, #16
 800cba2:	4770      	bx	lr
 800cba4:	20000038 	.word	0x20000038

0800cba8 <putchar>:
 800cba8:	4b02      	ldr	r3, [pc, #8]	@ (800cbb4 <putchar+0xc>)
 800cbaa:	4601      	mov	r1, r0
 800cbac:	6818      	ldr	r0, [r3, #0]
 800cbae:	6882      	ldr	r2, [r0, #8]
 800cbb0:	f000 be98 	b.w	800d8e4 <_putc_r>
 800cbb4:	20000038 	.word	0x20000038

0800cbb8 <_puts_r>:
 800cbb8:	6a03      	ldr	r3, [r0, #32]
 800cbba:	b570      	push	{r4, r5, r6, lr}
 800cbbc:	6884      	ldr	r4, [r0, #8]
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	460e      	mov	r6, r1
 800cbc2:	b90b      	cbnz	r3, 800cbc8 <_puts_r+0x10>
 800cbc4:	f7ff ffa8 	bl	800cb18 <__sinit>
 800cbc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbca:	07db      	lsls	r3, r3, #31
 800cbcc:	d405      	bmi.n	800cbda <_puts_r+0x22>
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	0598      	lsls	r0, r3, #22
 800cbd2:	d402      	bmi.n	800cbda <_puts_r+0x22>
 800cbd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbd6:	f000 f99e 	bl	800cf16 <__retarget_lock_acquire_recursive>
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	0719      	lsls	r1, r3, #28
 800cbde:	d502      	bpl.n	800cbe6 <_puts_r+0x2e>
 800cbe0:	6923      	ldr	r3, [r4, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d135      	bne.n	800cc52 <_puts_r+0x9a>
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	4628      	mov	r0, r5
 800cbea:	f000 f8c5 	bl	800cd78 <__swsetup_r>
 800cbee:	b380      	cbz	r0, 800cc52 <_puts_r+0x9a>
 800cbf0:	f04f 35ff 	mov.w	r5, #4294967295
 800cbf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbf6:	07da      	lsls	r2, r3, #31
 800cbf8:	d405      	bmi.n	800cc06 <_puts_r+0x4e>
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	059b      	lsls	r3, r3, #22
 800cbfe:	d402      	bmi.n	800cc06 <_puts_r+0x4e>
 800cc00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc02:	f000 f989 	bl	800cf18 <__retarget_lock_release_recursive>
 800cc06:	4628      	mov	r0, r5
 800cc08:	bd70      	pop	{r4, r5, r6, pc}
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	da04      	bge.n	800cc18 <_puts_r+0x60>
 800cc0e:	69a2      	ldr	r2, [r4, #24]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	dc17      	bgt.n	800cc44 <_puts_r+0x8c>
 800cc14:	290a      	cmp	r1, #10
 800cc16:	d015      	beq.n	800cc44 <_puts_r+0x8c>
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	6022      	str	r2, [r4, #0]
 800cc1e:	7019      	strb	r1, [r3, #0]
 800cc20:	68a3      	ldr	r3, [r4, #8]
 800cc22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc26:	3b01      	subs	r3, #1
 800cc28:	60a3      	str	r3, [r4, #8]
 800cc2a:	2900      	cmp	r1, #0
 800cc2c:	d1ed      	bne.n	800cc0a <_puts_r+0x52>
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	da11      	bge.n	800cc56 <_puts_r+0x9e>
 800cc32:	4622      	mov	r2, r4
 800cc34:	210a      	movs	r1, #10
 800cc36:	4628      	mov	r0, r5
 800cc38:	f000 f85f 	bl	800ccfa <__swbuf_r>
 800cc3c:	3001      	adds	r0, #1
 800cc3e:	d0d7      	beq.n	800cbf0 <_puts_r+0x38>
 800cc40:	250a      	movs	r5, #10
 800cc42:	e7d7      	b.n	800cbf4 <_puts_r+0x3c>
 800cc44:	4622      	mov	r2, r4
 800cc46:	4628      	mov	r0, r5
 800cc48:	f000 f857 	bl	800ccfa <__swbuf_r>
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d1e7      	bne.n	800cc20 <_puts_r+0x68>
 800cc50:	e7ce      	b.n	800cbf0 <_puts_r+0x38>
 800cc52:	3e01      	subs	r6, #1
 800cc54:	e7e4      	b.n	800cc20 <_puts_r+0x68>
 800cc56:	6823      	ldr	r3, [r4, #0]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	6022      	str	r2, [r4, #0]
 800cc5c:	220a      	movs	r2, #10
 800cc5e:	701a      	strb	r2, [r3, #0]
 800cc60:	e7ee      	b.n	800cc40 <_puts_r+0x88>
	...

0800cc64 <puts>:
 800cc64:	4b02      	ldr	r3, [pc, #8]	@ (800cc70 <puts+0xc>)
 800cc66:	4601      	mov	r1, r0
 800cc68:	6818      	ldr	r0, [r3, #0]
 800cc6a:	f7ff bfa5 	b.w	800cbb8 <_puts_r>
 800cc6e:	bf00      	nop
 800cc70:	20000038 	.word	0x20000038

0800cc74 <__sread>:
 800cc74:	b510      	push	{r4, lr}
 800cc76:	460c      	mov	r4, r1
 800cc78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc7c:	f000 f8fc 	bl	800ce78 <_read_r>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	bfab      	itete	ge
 800cc84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cc86:	89a3      	ldrhlt	r3, [r4, #12]
 800cc88:	181b      	addge	r3, r3, r0
 800cc8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc8e:	bfac      	ite	ge
 800cc90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc92:	81a3      	strhlt	r3, [r4, #12]
 800cc94:	bd10      	pop	{r4, pc}

0800cc96 <__swrite>:
 800cc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9a:	461f      	mov	r7, r3
 800cc9c:	898b      	ldrh	r3, [r1, #12]
 800cc9e:	05db      	lsls	r3, r3, #23
 800cca0:	4605      	mov	r5, r0
 800cca2:	460c      	mov	r4, r1
 800cca4:	4616      	mov	r6, r2
 800cca6:	d505      	bpl.n	800ccb4 <__swrite+0x1e>
 800cca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccac:	2302      	movs	r3, #2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f000 f8d0 	bl	800ce54 <_lseek_r>
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccbe:	81a3      	strh	r3, [r4, #12]
 800ccc0:	4632      	mov	r2, r6
 800ccc2:	463b      	mov	r3, r7
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccca:	f000 b8e7 	b.w	800ce9c <_write_r>

0800ccce <__sseek>:
 800ccce:	b510      	push	{r4, lr}
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd6:	f000 f8bd 	bl	800ce54 <_lseek_r>
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	bf15      	itete	ne
 800cce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ccea:	81a3      	strheq	r3, [r4, #12]
 800ccec:	bf18      	it	ne
 800ccee:	81a3      	strhne	r3, [r4, #12]
 800ccf0:	bd10      	pop	{r4, pc}

0800ccf2 <__sclose>:
 800ccf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf6:	f000 b89d 	b.w	800ce34 <_close_r>

0800ccfa <__swbuf_r>:
 800ccfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfc:	460e      	mov	r6, r1
 800ccfe:	4614      	mov	r4, r2
 800cd00:	4605      	mov	r5, r0
 800cd02:	b118      	cbz	r0, 800cd0c <__swbuf_r+0x12>
 800cd04:	6a03      	ldr	r3, [r0, #32]
 800cd06:	b90b      	cbnz	r3, 800cd0c <__swbuf_r+0x12>
 800cd08:	f7ff ff06 	bl	800cb18 <__sinit>
 800cd0c:	69a3      	ldr	r3, [r4, #24]
 800cd0e:	60a3      	str	r3, [r4, #8]
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	071a      	lsls	r2, r3, #28
 800cd14:	d501      	bpl.n	800cd1a <__swbuf_r+0x20>
 800cd16:	6923      	ldr	r3, [r4, #16]
 800cd18:	b943      	cbnz	r3, 800cd2c <__swbuf_r+0x32>
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f000 f82b 	bl	800cd78 <__swsetup_r>
 800cd22:	b118      	cbz	r0, 800cd2c <__swbuf_r+0x32>
 800cd24:	f04f 37ff 	mov.w	r7, #4294967295
 800cd28:	4638      	mov	r0, r7
 800cd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	6922      	ldr	r2, [r4, #16]
 800cd30:	1a98      	subs	r0, r3, r2
 800cd32:	6963      	ldr	r3, [r4, #20]
 800cd34:	b2f6      	uxtb	r6, r6
 800cd36:	4283      	cmp	r3, r0
 800cd38:	4637      	mov	r7, r6
 800cd3a:	dc05      	bgt.n	800cd48 <__swbuf_r+0x4e>
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	4628      	mov	r0, r5
 800cd40:	f000 fd46 	bl	800d7d0 <_fflush_r>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	d1ed      	bne.n	800cd24 <__swbuf_r+0x2a>
 800cd48:	68a3      	ldr	r3, [r4, #8]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	60a3      	str	r3, [r4, #8]
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	1c5a      	adds	r2, r3, #1
 800cd52:	6022      	str	r2, [r4, #0]
 800cd54:	701e      	strb	r6, [r3, #0]
 800cd56:	6962      	ldr	r2, [r4, #20]
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d004      	beq.n	800cd68 <__swbuf_r+0x6e>
 800cd5e:	89a3      	ldrh	r3, [r4, #12]
 800cd60:	07db      	lsls	r3, r3, #31
 800cd62:	d5e1      	bpl.n	800cd28 <__swbuf_r+0x2e>
 800cd64:	2e0a      	cmp	r6, #10
 800cd66:	d1df      	bne.n	800cd28 <__swbuf_r+0x2e>
 800cd68:	4621      	mov	r1, r4
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f000 fd30 	bl	800d7d0 <_fflush_r>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d0d9      	beq.n	800cd28 <__swbuf_r+0x2e>
 800cd74:	e7d6      	b.n	800cd24 <__swbuf_r+0x2a>
	...

0800cd78 <__swsetup_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	4b29      	ldr	r3, [pc, #164]	@ (800ce20 <__swsetup_r+0xa8>)
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	6818      	ldr	r0, [r3, #0]
 800cd80:	460c      	mov	r4, r1
 800cd82:	b118      	cbz	r0, 800cd8c <__swsetup_r+0x14>
 800cd84:	6a03      	ldr	r3, [r0, #32]
 800cd86:	b90b      	cbnz	r3, 800cd8c <__swsetup_r+0x14>
 800cd88:	f7ff fec6 	bl	800cb18 <__sinit>
 800cd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd90:	0719      	lsls	r1, r3, #28
 800cd92:	d422      	bmi.n	800cdda <__swsetup_r+0x62>
 800cd94:	06da      	lsls	r2, r3, #27
 800cd96:	d407      	bmi.n	800cda8 <__swsetup_r+0x30>
 800cd98:	2209      	movs	r2, #9
 800cd9a:	602a      	str	r2, [r5, #0]
 800cd9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cda0:	81a3      	strh	r3, [r4, #12]
 800cda2:	f04f 30ff 	mov.w	r0, #4294967295
 800cda6:	e033      	b.n	800ce10 <__swsetup_r+0x98>
 800cda8:	0758      	lsls	r0, r3, #29
 800cdaa:	d512      	bpl.n	800cdd2 <__swsetup_r+0x5a>
 800cdac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdae:	b141      	cbz	r1, 800cdc2 <__swsetup_r+0x4a>
 800cdb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdb4:	4299      	cmp	r1, r3
 800cdb6:	d002      	beq.n	800cdbe <__swsetup_r+0x46>
 800cdb8:	4628      	mov	r0, r5
 800cdba:	f000 f8bd 	bl	800cf38 <_free_r>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdc2:	89a3      	ldrh	r3, [r4, #12]
 800cdc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cdc8:	81a3      	strh	r3, [r4, #12]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	6063      	str	r3, [r4, #4]
 800cdce:	6923      	ldr	r3, [r4, #16]
 800cdd0:	6023      	str	r3, [r4, #0]
 800cdd2:	89a3      	ldrh	r3, [r4, #12]
 800cdd4:	f043 0308 	orr.w	r3, r3, #8
 800cdd8:	81a3      	strh	r3, [r4, #12]
 800cdda:	6923      	ldr	r3, [r4, #16]
 800cddc:	b94b      	cbnz	r3, 800cdf2 <__swsetup_r+0x7a>
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cde4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cde8:	d003      	beq.n	800cdf2 <__swsetup_r+0x7a>
 800cdea:	4621      	mov	r1, r4
 800cdec:	4628      	mov	r0, r5
 800cdee:	f000 fd3d 	bl	800d86c <__smakebuf_r>
 800cdf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdf6:	f013 0201 	ands.w	r2, r3, #1
 800cdfa:	d00a      	beq.n	800ce12 <__swsetup_r+0x9a>
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	60a2      	str	r2, [r4, #8]
 800ce00:	6962      	ldr	r2, [r4, #20]
 800ce02:	4252      	negs	r2, r2
 800ce04:	61a2      	str	r2, [r4, #24]
 800ce06:	6922      	ldr	r2, [r4, #16]
 800ce08:	b942      	cbnz	r2, 800ce1c <__swsetup_r+0xa4>
 800ce0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce0e:	d1c5      	bne.n	800cd9c <__swsetup_r+0x24>
 800ce10:	bd38      	pop	{r3, r4, r5, pc}
 800ce12:	0799      	lsls	r1, r3, #30
 800ce14:	bf58      	it	pl
 800ce16:	6962      	ldrpl	r2, [r4, #20]
 800ce18:	60a2      	str	r2, [r4, #8]
 800ce1a:	e7f4      	b.n	800ce06 <__swsetup_r+0x8e>
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	e7f7      	b.n	800ce10 <__swsetup_r+0x98>
 800ce20:	20000038 	.word	0x20000038

0800ce24 <memset>:
 800ce24:	4402      	add	r2, r0
 800ce26:	4603      	mov	r3, r0
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d100      	bne.n	800ce2e <memset+0xa>
 800ce2c:	4770      	bx	lr
 800ce2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce32:	e7f9      	b.n	800ce28 <memset+0x4>

0800ce34 <_close_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4d06      	ldr	r5, [pc, #24]	@ (800ce50 <_close_r+0x1c>)
 800ce38:	2300      	movs	r3, #0
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	602b      	str	r3, [r5, #0]
 800ce40:	f7f5 fc83 	bl	800274a <_close>
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	d102      	bne.n	800ce4e <_close_r+0x1a>
 800ce48:	682b      	ldr	r3, [r5, #0]
 800ce4a:	b103      	cbz	r3, 800ce4e <_close_r+0x1a>
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	bd38      	pop	{r3, r4, r5, pc}
 800ce50:	20000864 	.word	0x20000864

0800ce54 <_lseek_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	4d07      	ldr	r5, [pc, #28]	@ (800ce74 <_lseek_r+0x20>)
 800ce58:	4604      	mov	r4, r0
 800ce5a:	4608      	mov	r0, r1
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	2200      	movs	r2, #0
 800ce60:	602a      	str	r2, [r5, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	f7f5 fc98 	bl	8002798 <_lseek>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d102      	bne.n	800ce72 <_lseek_r+0x1e>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	b103      	cbz	r3, 800ce72 <_lseek_r+0x1e>
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	20000864 	.word	0x20000864

0800ce78 <_read_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4d07      	ldr	r5, [pc, #28]	@ (800ce98 <_read_r+0x20>)
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	4608      	mov	r0, r1
 800ce80:	4611      	mov	r1, r2
 800ce82:	2200      	movs	r2, #0
 800ce84:	602a      	str	r2, [r5, #0]
 800ce86:	461a      	mov	r2, r3
 800ce88:	f7f5 fc42 	bl	8002710 <_read>
 800ce8c:	1c43      	adds	r3, r0, #1
 800ce8e:	d102      	bne.n	800ce96 <_read_r+0x1e>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	b103      	cbz	r3, 800ce96 <_read_r+0x1e>
 800ce94:	6023      	str	r3, [r4, #0]
 800ce96:	bd38      	pop	{r3, r4, r5, pc}
 800ce98:	20000864 	.word	0x20000864

0800ce9c <_write_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d07      	ldr	r5, [pc, #28]	@ (800cebc <_write_r+0x20>)
 800cea0:	4604      	mov	r4, r0
 800cea2:	4608      	mov	r0, r1
 800cea4:	4611      	mov	r1, r2
 800cea6:	2200      	movs	r2, #0
 800cea8:	602a      	str	r2, [r5, #0]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	f7fe fb6c 	bl	800b588 <_write>
 800ceb0:	1c43      	adds	r3, r0, #1
 800ceb2:	d102      	bne.n	800ceba <_write_r+0x1e>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	b103      	cbz	r3, 800ceba <_write_r+0x1e>
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	bd38      	pop	{r3, r4, r5, pc}
 800cebc:	20000864 	.word	0x20000864

0800cec0 <__errno>:
 800cec0:	4b01      	ldr	r3, [pc, #4]	@ (800cec8 <__errno+0x8>)
 800cec2:	6818      	ldr	r0, [r3, #0]
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	20000038 	.word	0x20000038

0800cecc <__libc_init_array>:
 800cecc:	b570      	push	{r4, r5, r6, lr}
 800cece:	4d0d      	ldr	r5, [pc, #52]	@ (800cf04 <__libc_init_array+0x38>)
 800ced0:	4c0d      	ldr	r4, [pc, #52]	@ (800cf08 <__libc_init_array+0x3c>)
 800ced2:	1b64      	subs	r4, r4, r5
 800ced4:	10a4      	asrs	r4, r4, #2
 800ced6:	2600      	movs	r6, #0
 800ced8:	42a6      	cmp	r6, r4
 800ceda:	d109      	bne.n	800cef0 <__libc_init_array+0x24>
 800cedc:	4d0b      	ldr	r5, [pc, #44]	@ (800cf0c <__libc_init_array+0x40>)
 800cede:	4c0c      	ldr	r4, [pc, #48]	@ (800cf10 <__libc_init_array+0x44>)
 800cee0:	f000 fd66 	bl	800d9b0 <_init>
 800cee4:	1b64      	subs	r4, r4, r5
 800cee6:	10a4      	asrs	r4, r4, #2
 800cee8:	2600      	movs	r6, #0
 800ceea:	42a6      	cmp	r6, r4
 800ceec:	d105      	bne.n	800cefa <__libc_init_array+0x2e>
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cef4:	4798      	blx	r3
 800cef6:	3601      	adds	r6, #1
 800cef8:	e7ee      	b.n	800ced8 <__libc_init_array+0xc>
 800cefa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cefe:	4798      	blx	r3
 800cf00:	3601      	adds	r6, #1
 800cf02:	e7f2      	b.n	800ceea <__libc_init_array+0x1e>
 800cf04:	0800de88 	.word	0x0800de88
 800cf08:	0800de88 	.word	0x0800de88
 800cf0c:	0800de88 	.word	0x0800de88
 800cf10:	0800de8c 	.word	0x0800de8c

0800cf14 <__retarget_lock_init_recursive>:
 800cf14:	4770      	bx	lr

0800cf16 <__retarget_lock_acquire_recursive>:
 800cf16:	4770      	bx	lr

0800cf18 <__retarget_lock_release_recursive>:
 800cf18:	4770      	bx	lr

0800cf1a <memcpy>:
 800cf1a:	440a      	add	r2, r1
 800cf1c:	4291      	cmp	r1, r2
 800cf1e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf22:	d100      	bne.n	800cf26 <memcpy+0xc>
 800cf24:	4770      	bx	lr
 800cf26:	b510      	push	{r4, lr}
 800cf28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf30:	4291      	cmp	r1, r2
 800cf32:	d1f9      	bne.n	800cf28 <memcpy+0xe>
 800cf34:	bd10      	pop	{r4, pc}
	...

0800cf38 <_free_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4605      	mov	r5, r0
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	d041      	beq.n	800cfc4 <_free_r+0x8c>
 800cf40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf44:	1f0c      	subs	r4, r1, #4
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	bfb8      	it	lt
 800cf4a:	18e4      	addlt	r4, r4, r3
 800cf4c:	f000 f8e0 	bl	800d110 <__malloc_lock>
 800cf50:	4a1d      	ldr	r2, [pc, #116]	@ (800cfc8 <_free_r+0x90>)
 800cf52:	6813      	ldr	r3, [r2, #0]
 800cf54:	b933      	cbnz	r3, 800cf64 <_free_r+0x2c>
 800cf56:	6063      	str	r3, [r4, #4]
 800cf58:	6014      	str	r4, [r2, #0]
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf60:	f000 b8dc 	b.w	800d11c <__malloc_unlock>
 800cf64:	42a3      	cmp	r3, r4
 800cf66:	d908      	bls.n	800cf7a <_free_r+0x42>
 800cf68:	6820      	ldr	r0, [r4, #0]
 800cf6a:	1821      	adds	r1, r4, r0
 800cf6c:	428b      	cmp	r3, r1
 800cf6e:	bf01      	itttt	eq
 800cf70:	6819      	ldreq	r1, [r3, #0]
 800cf72:	685b      	ldreq	r3, [r3, #4]
 800cf74:	1809      	addeq	r1, r1, r0
 800cf76:	6021      	streq	r1, [r4, #0]
 800cf78:	e7ed      	b.n	800cf56 <_free_r+0x1e>
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	b10b      	cbz	r3, 800cf84 <_free_r+0x4c>
 800cf80:	42a3      	cmp	r3, r4
 800cf82:	d9fa      	bls.n	800cf7a <_free_r+0x42>
 800cf84:	6811      	ldr	r1, [r2, #0]
 800cf86:	1850      	adds	r0, r2, r1
 800cf88:	42a0      	cmp	r0, r4
 800cf8a:	d10b      	bne.n	800cfa4 <_free_r+0x6c>
 800cf8c:	6820      	ldr	r0, [r4, #0]
 800cf8e:	4401      	add	r1, r0
 800cf90:	1850      	adds	r0, r2, r1
 800cf92:	4283      	cmp	r3, r0
 800cf94:	6011      	str	r1, [r2, #0]
 800cf96:	d1e0      	bne.n	800cf5a <_free_r+0x22>
 800cf98:	6818      	ldr	r0, [r3, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	6053      	str	r3, [r2, #4]
 800cf9e:	4408      	add	r0, r1
 800cfa0:	6010      	str	r0, [r2, #0]
 800cfa2:	e7da      	b.n	800cf5a <_free_r+0x22>
 800cfa4:	d902      	bls.n	800cfac <_free_r+0x74>
 800cfa6:	230c      	movs	r3, #12
 800cfa8:	602b      	str	r3, [r5, #0]
 800cfaa:	e7d6      	b.n	800cf5a <_free_r+0x22>
 800cfac:	6820      	ldr	r0, [r4, #0]
 800cfae:	1821      	adds	r1, r4, r0
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	bf04      	itt	eq
 800cfb4:	6819      	ldreq	r1, [r3, #0]
 800cfb6:	685b      	ldreq	r3, [r3, #4]
 800cfb8:	6063      	str	r3, [r4, #4]
 800cfba:	bf04      	itt	eq
 800cfbc:	1809      	addeq	r1, r1, r0
 800cfbe:	6021      	streq	r1, [r4, #0]
 800cfc0:	6054      	str	r4, [r2, #4]
 800cfc2:	e7ca      	b.n	800cf5a <_free_r+0x22>
 800cfc4:	bd38      	pop	{r3, r4, r5, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20000870 	.word	0x20000870

0800cfcc <sbrk_aligned>:
 800cfcc:	b570      	push	{r4, r5, r6, lr}
 800cfce:	4e0f      	ldr	r6, [pc, #60]	@ (800d00c <sbrk_aligned+0x40>)
 800cfd0:	460c      	mov	r4, r1
 800cfd2:	6831      	ldr	r1, [r6, #0]
 800cfd4:	4605      	mov	r5, r0
 800cfd6:	b911      	cbnz	r1, 800cfde <sbrk_aligned+0x12>
 800cfd8:	f000 fcda 	bl	800d990 <_sbrk_r>
 800cfdc:	6030      	str	r0, [r6, #0]
 800cfde:	4621      	mov	r1, r4
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f000 fcd5 	bl	800d990 <_sbrk_r>
 800cfe6:	1c43      	adds	r3, r0, #1
 800cfe8:	d103      	bne.n	800cff2 <sbrk_aligned+0x26>
 800cfea:	f04f 34ff 	mov.w	r4, #4294967295
 800cfee:	4620      	mov	r0, r4
 800cff0:	bd70      	pop	{r4, r5, r6, pc}
 800cff2:	1cc4      	adds	r4, r0, #3
 800cff4:	f024 0403 	bic.w	r4, r4, #3
 800cff8:	42a0      	cmp	r0, r4
 800cffa:	d0f8      	beq.n	800cfee <sbrk_aligned+0x22>
 800cffc:	1a21      	subs	r1, r4, r0
 800cffe:	4628      	mov	r0, r5
 800d000:	f000 fcc6 	bl	800d990 <_sbrk_r>
 800d004:	3001      	adds	r0, #1
 800d006:	d1f2      	bne.n	800cfee <sbrk_aligned+0x22>
 800d008:	e7ef      	b.n	800cfea <sbrk_aligned+0x1e>
 800d00a:	bf00      	nop
 800d00c:	2000086c 	.word	0x2000086c

0800d010 <_malloc_r>:
 800d010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d014:	1ccd      	adds	r5, r1, #3
 800d016:	f025 0503 	bic.w	r5, r5, #3
 800d01a:	3508      	adds	r5, #8
 800d01c:	2d0c      	cmp	r5, #12
 800d01e:	bf38      	it	cc
 800d020:	250c      	movcc	r5, #12
 800d022:	2d00      	cmp	r5, #0
 800d024:	4606      	mov	r6, r0
 800d026:	db01      	blt.n	800d02c <_malloc_r+0x1c>
 800d028:	42a9      	cmp	r1, r5
 800d02a:	d904      	bls.n	800d036 <_malloc_r+0x26>
 800d02c:	230c      	movs	r3, #12
 800d02e:	6033      	str	r3, [r6, #0]
 800d030:	2000      	movs	r0, #0
 800d032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d10c <_malloc_r+0xfc>
 800d03a:	f000 f869 	bl	800d110 <__malloc_lock>
 800d03e:	f8d8 3000 	ldr.w	r3, [r8]
 800d042:	461c      	mov	r4, r3
 800d044:	bb44      	cbnz	r4, 800d098 <_malloc_r+0x88>
 800d046:	4629      	mov	r1, r5
 800d048:	4630      	mov	r0, r6
 800d04a:	f7ff ffbf 	bl	800cfcc <sbrk_aligned>
 800d04e:	1c43      	adds	r3, r0, #1
 800d050:	4604      	mov	r4, r0
 800d052:	d158      	bne.n	800d106 <_malloc_r+0xf6>
 800d054:	f8d8 4000 	ldr.w	r4, [r8]
 800d058:	4627      	mov	r7, r4
 800d05a:	2f00      	cmp	r7, #0
 800d05c:	d143      	bne.n	800d0e6 <_malloc_r+0xd6>
 800d05e:	2c00      	cmp	r4, #0
 800d060:	d04b      	beq.n	800d0fa <_malloc_r+0xea>
 800d062:	6823      	ldr	r3, [r4, #0]
 800d064:	4639      	mov	r1, r7
 800d066:	4630      	mov	r0, r6
 800d068:	eb04 0903 	add.w	r9, r4, r3
 800d06c:	f000 fc90 	bl	800d990 <_sbrk_r>
 800d070:	4581      	cmp	r9, r0
 800d072:	d142      	bne.n	800d0fa <_malloc_r+0xea>
 800d074:	6821      	ldr	r1, [r4, #0]
 800d076:	1a6d      	subs	r5, r5, r1
 800d078:	4629      	mov	r1, r5
 800d07a:	4630      	mov	r0, r6
 800d07c:	f7ff ffa6 	bl	800cfcc <sbrk_aligned>
 800d080:	3001      	adds	r0, #1
 800d082:	d03a      	beq.n	800d0fa <_malloc_r+0xea>
 800d084:	6823      	ldr	r3, [r4, #0]
 800d086:	442b      	add	r3, r5
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	f8d8 3000 	ldr.w	r3, [r8]
 800d08e:	685a      	ldr	r2, [r3, #4]
 800d090:	bb62      	cbnz	r2, 800d0ec <_malloc_r+0xdc>
 800d092:	f8c8 7000 	str.w	r7, [r8]
 800d096:	e00f      	b.n	800d0b8 <_malloc_r+0xa8>
 800d098:	6822      	ldr	r2, [r4, #0]
 800d09a:	1b52      	subs	r2, r2, r5
 800d09c:	d420      	bmi.n	800d0e0 <_malloc_r+0xd0>
 800d09e:	2a0b      	cmp	r2, #11
 800d0a0:	d917      	bls.n	800d0d2 <_malloc_r+0xc2>
 800d0a2:	1961      	adds	r1, r4, r5
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	6025      	str	r5, [r4, #0]
 800d0a8:	bf18      	it	ne
 800d0aa:	6059      	strne	r1, [r3, #4]
 800d0ac:	6863      	ldr	r3, [r4, #4]
 800d0ae:	bf08      	it	eq
 800d0b0:	f8c8 1000 	streq.w	r1, [r8]
 800d0b4:	5162      	str	r2, [r4, r5]
 800d0b6:	604b      	str	r3, [r1, #4]
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	f000 f82f 	bl	800d11c <__malloc_unlock>
 800d0be:	f104 000b 	add.w	r0, r4, #11
 800d0c2:	1d23      	adds	r3, r4, #4
 800d0c4:	f020 0007 	bic.w	r0, r0, #7
 800d0c8:	1ac2      	subs	r2, r0, r3
 800d0ca:	bf1c      	itt	ne
 800d0cc:	1a1b      	subne	r3, r3, r0
 800d0ce:	50a3      	strne	r3, [r4, r2]
 800d0d0:	e7af      	b.n	800d032 <_malloc_r+0x22>
 800d0d2:	6862      	ldr	r2, [r4, #4]
 800d0d4:	42a3      	cmp	r3, r4
 800d0d6:	bf0c      	ite	eq
 800d0d8:	f8c8 2000 	streq.w	r2, [r8]
 800d0dc:	605a      	strne	r2, [r3, #4]
 800d0de:	e7eb      	b.n	800d0b8 <_malloc_r+0xa8>
 800d0e0:	4623      	mov	r3, r4
 800d0e2:	6864      	ldr	r4, [r4, #4]
 800d0e4:	e7ae      	b.n	800d044 <_malloc_r+0x34>
 800d0e6:	463c      	mov	r4, r7
 800d0e8:	687f      	ldr	r7, [r7, #4]
 800d0ea:	e7b6      	b.n	800d05a <_malloc_r+0x4a>
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	42a3      	cmp	r3, r4
 800d0f2:	d1fb      	bne.n	800d0ec <_malloc_r+0xdc>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	6053      	str	r3, [r2, #4]
 800d0f8:	e7de      	b.n	800d0b8 <_malloc_r+0xa8>
 800d0fa:	230c      	movs	r3, #12
 800d0fc:	6033      	str	r3, [r6, #0]
 800d0fe:	4630      	mov	r0, r6
 800d100:	f000 f80c 	bl	800d11c <__malloc_unlock>
 800d104:	e794      	b.n	800d030 <_malloc_r+0x20>
 800d106:	6005      	str	r5, [r0, #0]
 800d108:	e7d6      	b.n	800d0b8 <_malloc_r+0xa8>
 800d10a:	bf00      	nop
 800d10c:	20000870 	.word	0x20000870

0800d110 <__malloc_lock>:
 800d110:	4801      	ldr	r0, [pc, #4]	@ (800d118 <__malloc_lock+0x8>)
 800d112:	f7ff bf00 	b.w	800cf16 <__retarget_lock_acquire_recursive>
 800d116:	bf00      	nop
 800d118:	20000868 	.word	0x20000868

0800d11c <__malloc_unlock>:
 800d11c:	4801      	ldr	r0, [pc, #4]	@ (800d124 <__malloc_unlock+0x8>)
 800d11e:	f7ff befb 	b.w	800cf18 <__retarget_lock_release_recursive>
 800d122:	bf00      	nop
 800d124:	20000868 	.word	0x20000868

0800d128 <__sfputc_r>:
 800d128:	6893      	ldr	r3, [r2, #8]
 800d12a:	3b01      	subs	r3, #1
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	b410      	push	{r4}
 800d130:	6093      	str	r3, [r2, #8]
 800d132:	da08      	bge.n	800d146 <__sfputc_r+0x1e>
 800d134:	6994      	ldr	r4, [r2, #24]
 800d136:	42a3      	cmp	r3, r4
 800d138:	db01      	blt.n	800d13e <__sfputc_r+0x16>
 800d13a:	290a      	cmp	r1, #10
 800d13c:	d103      	bne.n	800d146 <__sfputc_r+0x1e>
 800d13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d142:	f7ff bdda 	b.w	800ccfa <__swbuf_r>
 800d146:	6813      	ldr	r3, [r2, #0]
 800d148:	1c58      	adds	r0, r3, #1
 800d14a:	6010      	str	r0, [r2, #0]
 800d14c:	7019      	strb	r1, [r3, #0]
 800d14e:	4608      	mov	r0, r1
 800d150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d154:	4770      	bx	lr

0800d156 <__sfputs_r>:
 800d156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d158:	4606      	mov	r6, r0
 800d15a:	460f      	mov	r7, r1
 800d15c:	4614      	mov	r4, r2
 800d15e:	18d5      	adds	r5, r2, r3
 800d160:	42ac      	cmp	r4, r5
 800d162:	d101      	bne.n	800d168 <__sfputs_r+0x12>
 800d164:	2000      	movs	r0, #0
 800d166:	e007      	b.n	800d178 <__sfputs_r+0x22>
 800d168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d16c:	463a      	mov	r2, r7
 800d16e:	4630      	mov	r0, r6
 800d170:	f7ff ffda 	bl	800d128 <__sfputc_r>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d1f3      	bne.n	800d160 <__sfputs_r+0xa>
 800d178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d17c <_vfiprintf_r>:
 800d17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d180:	460d      	mov	r5, r1
 800d182:	b09d      	sub	sp, #116	@ 0x74
 800d184:	4614      	mov	r4, r2
 800d186:	4698      	mov	r8, r3
 800d188:	4606      	mov	r6, r0
 800d18a:	b118      	cbz	r0, 800d194 <_vfiprintf_r+0x18>
 800d18c:	6a03      	ldr	r3, [r0, #32]
 800d18e:	b90b      	cbnz	r3, 800d194 <_vfiprintf_r+0x18>
 800d190:	f7ff fcc2 	bl	800cb18 <__sinit>
 800d194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d196:	07d9      	lsls	r1, r3, #31
 800d198:	d405      	bmi.n	800d1a6 <_vfiprintf_r+0x2a>
 800d19a:	89ab      	ldrh	r3, [r5, #12]
 800d19c:	059a      	lsls	r2, r3, #22
 800d19e:	d402      	bmi.n	800d1a6 <_vfiprintf_r+0x2a>
 800d1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1a2:	f7ff feb8 	bl	800cf16 <__retarget_lock_acquire_recursive>
 800d1a6:	89ab      	ldrh	r3, [r5, #12]
 800d1a8:	071b      	lsls	r3, r3, #28
 800d1aa:	d501      	bpl.n	800d1b0 <_vfiprintf_r+0x34>
 800d1ac:	692b      	ldr	r3, [r5, #16]
 800d1ae:	b99b      	cbnz	r3, 800d1d8 <_vfiprintf_r+0x5c>
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff fde0 	bl	800cd78 <__swsetup_r>
 800d1b8:	b170      	cbz	r0, 800d1d8 <_vfiprintf_r+0x5c>
 800d1ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1bc:	07dc      	lsls	r4, r3, #31
 800d1be:	d504      	bpl.n	800d1ca <_vfiprintf_r+0x4e>
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c4:	b01d      	add	sp, #116	@ 0x74
 800d1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ca:	89ab      	ldrh	r3, [r5, #12]
 800d1cc:	0598      	lsls	r0, r3, #22
 800d1ce:	d4f7      	bmi.n	800d1c0 <_vfiprintf_r+0x44>
 800d1d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1d2:	f7ff fea1 	bl	800cf18 <__retarget_lock_release_recursive>
 800d1d6:	e7f3      	b.n	800d1c0 <_vfiprintf_r+0x44>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1dc:	2320      	movs	r3, #32
 800d1de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1e6:	2330      	movs	r3, #48	@ 0x30
 800d1e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d398 <_vfiprintf_r+0x21c>
 800d1ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1f0:	f04f 0901 	mov.w	r9, #1
 800d1f4:	4623      	mov	r3, r4
 800d1f6:	469a      	mov	sl, r3
 800d1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1fc:	b10a      	cbz	r2, 800d202 <_vfiprintf_r+0x86>
 800d1fe:	2a25      	cmp	r2, #37	@ 0x25
 800d200:	d1f9      	bne.n	800d1f6 <_vfiprintf_r+0x7a>
 800d202:	ebba 0b04 	subs.w	fp, sl, r4
 800d206:	d00b      	beq.n	800d220 <_vfiprintf_r+0xa4>
 800d208:	465b      	mov	r3, fp
 800d20a:	4622      	mov	r2, r4
 800d20c:	4629      	mov	r1, r5
 800d20e:	4630      	mov	r0, r6
 800d210:	f7ff ffa1 	bl	800d156 <__sfputs_r>
 800d214:	3001      	adds	r0, #1
 800d216:	f000 80a7 	beq.w	800d368 <_vfiprintf_r+0x1ec>
 800d21a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d21c:	445a      	add	r2, fp
 800d21e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d220:	f89a 3000 	ldrb.w	r3, [sl]
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 809f 	beq.w	800d368 <_vfiprintf_r+0x1ec>
 800d22a:	2300      	movs	r3, #0
 800d22c:	f04f 32ff 	mov.w	r2, #4294967295
 800d230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d234:	f10a 0a01 	add.w	sl, sl, #1
 800d238:	9304      	str	r3, [sp, #16]
 800d23a:	9307      	str	r3, [sp, #28]
 800d23c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d240:	931a      	str	r3, [sp, #104]	@ 0x68
 800d242:	4654      	mov	r4, sl
 800d244:	2205      	movs	r2, #5
 800d246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d24a:	4853      	ldr	r0, [pc, #332]	@ (800d398 <_vfiprintf_r+0x21c>)
 800d24c:	f7f2 ffa0 	bl	8000190 <memchr>
 800d250:	9a04      	ldr	r2, [sp, #16]
 800d252:	b9d8      	cbnz	r0, 800d28c <_vfiprintf_r+0x110>
 800d254:	06d1      	lsls	r1, r2, #27
 800d256:	bf44      	itt	mi
 800d258:	2320      	movmi	r3, #32
 800d25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d25e:	0713      	lsls	r3, r2, #28
 800d260:	bf44      	itt	mi
 800d262:	232b      	movmi	r3, #43	@ 0x2b
 800d264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d268:	f89a 3000 	ldrb.w	r3, [sl]
 800d26c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d26e:	d015      	beq.n	800d29c <_vfiprintf_r+0x120>
 800d270:	9a07      	ldr	r2, [sp, #28]
 800d272:	4654      	mov	r4, sl
 800d274:	2000      	movs	r0, #0
 800d276:	f04f 0c0a 	mov.w	ip, #10
 800d27a:	4621      	mov	r1, r4
 800d27c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d280:	3b30      	subs	r3, #48	@ 0x30
 800d282:	2b09      	cmp	r3, #9
 800d284:	d94b      	bls.n	800d31e <_vfiprintf_r+0x1a2>
 800d286:	b1b0      	cbz	r0, 800d2b6 <_vfiprintf_r+0x13a>
 800d288:	9207      	str	r2, [sp, #28]
 800d28a:	e014      	b.n	800d2b6 <_vfiprintf_r+0x13a>
 800d28c:	eba0 0308 	sub.w	r3, r0, r8
 800d290:	fa09 f303 	lsl.w	r3, r9, r3
 800d294:	4313      	orrs	r3, r2
 800d296:	9304      	str	r3, [sp, #16]
 800d298:	46a2      	mov	sl, r4
 800d29a:	e7d2      	b.n	800d242 <_vfiprintf_r+0xc6>
 800d29c:	9b03      	ldr	r3, [sp, #12]
 800d29e:	1d19      	adds	r1, r3, #4
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	9103      	str	r1, [sp, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	bfbb      	ittet	lt
 800d2a8:	425b      	neglt	r3, r3
 800d2aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ae:	9307      	strge	r3, [sp, #28]
 800d2b0:	9307      	strlt	r3, [sp, #28]
 800d2b2:	bfb8      	it	lt
 800d2b4:	9204      	strlt	r2, [sp, #16]
 800d2b6:	7823      	ldrb	r3, [r4, #0]
 800d2b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2ba:	d10a      	bne.n	800d2d2 <_vfiprintf_r+0x156>
 800d2bc:	7863      	ldrb	r3, [r4, #1]
 800d2be:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2c0:	d132      	bne.n	800d328 <_vfiprintf_r+0x1ac>
 800d2c2:	9b03      	ldr	r3, [sp, #12]
 800d2c4:	1d1a      	adds	r2, r3, #4
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	9203      	str	r2, [sp, #12]
 800d2ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2ce:	3402      	adds	r4, #2
 800d2d0:	9305      	str	r3, [sp, #20]
 800d2d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3a8 <_vfiprintf_r+0x22c>
 800d2d6:	7821      	ldrb	r1, [r4, #0]
 800d2d8:	2203      	movs	r2, #3
 800d2da:	4650      	mov	r0, sl
 800d2dc:	f7f2 ff58 	bl	8000190 <memchr>
 800d2e0:	b138      	cbz	r0, 800d2f2 <_vfiprintf_r+0x176>
 800d2e2:	9b04      	ldr	r3, [sp, #16]
 800d2e4:	eba0 000a 	sub.w	r0, r0, sl
 800d2e8:	2240      	movs	r2, #64	@ 0x40
 800d2ea:	4082      	lsls	r2, r0
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	3401      	adds	r4, #1
 800d2f0:	9304      	str	r3, [sp, #16]
 800d2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f6:	4829      	ldr	r0, [pc, #164]	@ (800d39c <_vfiprintf_r+0x220>)
 800d2f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2fc:	2206      	movs	r2, #6
 800d2fe:	f7f2 ff47 	bl	8000190 <memchr>
 800d302:	2800      	cmp	r0, #0
 800d304:	d03f      	beq.n	800d386 <_vfiprintf_r+0x20a>
 800d306:	4b26      	ldr	r3, [pc, #152]	@ (800d3a0 <_vfiprintf_r+0x224>)
 800d308:	bb1b      	cbnz	r3, 800d352 <_vfiprintf_r+0x1d6>
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	3307      	adds	r3, #7
 800d30e:	f023 0307 	bic.w	r3, r3, #7
 800d312:	3308      	adds	r3, #8
 800d314:	9303      	str	r3, [sp, #12]
 800d316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d318:	443b      	add	r3, r7
 800d31a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d31c:	e76a      	b.n	800d1f4 <_vfiprintf_r+0x78>
 800d31e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d322:	460c      	mov	r4, r1
 800d324:	2001      	movs	r0, #1
 800d326:	e7a8      	b.n	800d27a <_vfiprintf_r+0xfe>
 800d328:	2300      	movs	r3, #0
 800d32a:	3401      	adds	r4, #1
 800d32c:	9305      	str	r3, [sp, #20]
 800d32e:	4619      	mov	r1, r3
 800d330:	f04f 0c0a 	mov.w	ip, #10
 800d334:	4620      	mov	r0, r4
 800d336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d33a:	3a30      	subs	r2, #48	@ 0x30
 800d33c:	2a09      	cmp	r2, #9
 800d33e:	d903      	bls.n	800d348 <_vfiprintf_r+0x1cc>
 800d340:	2b00      	cmp	r3, #0
 800d342:	d0c6      	beq.n	800d2d2 <_vfiprintf_r+0x156>
 800d344:	9105      	str	r1, [sp, #20]
 800d346:	e7c4      	b.n	800d2d2 <_vfiprintf_r+0x156>
 800d348:	fb0c 2101 	mla	r1, ip, r1, r2
 800d34c:	4604      	mov	r4, r0
 800d34e:	2301      	movs	r3, #1
 800d350:	e7f0      	b.n	800d334 <_vfiprintf_r+0x1b8>
 800d352:	ab03      	add	r3, sp, #12
 800d354:	9300      	str	r3, [sp, #0]
 800d356:	462a      	mov	r2, r5
 800d358:	4b12      	ldr	r3, [pc, #72]	@ (800d3a4 <_vfiprintf_r+0x228>)
 800d35a:	a904      	add	r1, sp, #16
 800d35c:	4630      	mov	r0, r6
 800d35e:	f3af 8000 	nop.w
 800d362:	4607      	mov	r7, r0
 800d364:	1c78      	adds	r0, r7, #1
 800d366:	d1d6      	bne.n	800d316 <_vfiprintf_r+0x19a>
 800d368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d36a:	07d9      	lsls	r1, r3, #31
 800d36c:	d405      	bmi.n	800d37a <_vfiprintf_r+0x1fe>
 800d36e:	89ab      	ldrh	r3, [r5, #12]
 800d370:	059a      	lsls	r2, r3, #22
 800d372:	d402      	bmi.n	800d37a <_vfiprintf_r+0x1fe>
 800d374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d376:	f7ff fdcf 	bl	800cf18 <__retarget_lock_release_recursive>
 800d37a:	89ab      	ldrh	r3, [r5, #12]
 800d37c:	065b      	lsls	r3, r3, #25
 800d37e:	f53f af1f 	bmi.w	800d1c0 <_vfiprintf_r+0x44>
 800d382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d384:	e71e      	b.n	800d1c4 <_vfiprintf_r+0x48>
 800d386:	ab03      	add	r3, sp, #12
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	462a      	mov	r2, r5
 800d38c:	4b05      	ldr	r3, [pc, #20]	@ (800d3a4 <_vfiprintf_r+0x228>)
 800d38e:	a904      	add	r1, sp, #16
 800d390:	4630      	mov	r0, r6
 800d392:	f000 f879 	bl	800d488 <_printf_i>
 800d396:	e7e4      	b.n	800d362 <_vfiprintf_r+0x1e6>
 800d398:	0800de4c 	.word	0x0800de4c
 800d39c:	0800de56 	.word	0x0800de56
 800d3a0:	00000000 	.word	0x00000000
 800d3a4:	0800d157 	.word	0x0800d157
 800d3a8:	0800de52 	.word	0x0800de52

0800d3ac <_printf_common>:
 800d3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b0:	4616      	mov	r6, r2
 800d3b2:	4698      	mov	r8, r3
 800d3b4:	688a      	ldr	r2, [r1, #8]
 800d3b6:	690b      	ldr	r3, [r1, #16]
 800d3b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	bfb8      	it	lt
 800d3c0:	4613      	movlt	r3, r2
 800d3c2:	6033      	str	r3, [r6, #0]
 800d3c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d3c8:	4607      	mov	r7, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	b10a      	cbz	r2, 800d3d2 <_printf_common+0x26>
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	6033      	str	r3, [r6, #0]
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	0699      	lsls	r1, r3, #26
 800d3d6:	bf42      	ittt	mi
 800d3d8:	6833      	ldrmi	r3, [r6, #0]
 800d3da:	3302      	addmi	r3, #2
 800d3dc:	6033      	strmi	r3, [r6, #0]
 800d3de:	6825      	ldr	r5, [r4, #0]
 800d3e0:	f015 0506 	ands.w	r5, r5, #6
 800d3e4:	d106      	bne.n	800d3f4 <_printf_common+0x48>
 800d3e6:	f104 0a19 	add.w	sl, r4, #25
 800d3ea:	68e3      	ldr	r3, [r4, #12]
 800d3ec:	6832      	ldr	r2, [r6, #0]
 800d3ee:	1a9b      	subs	r3, r3, r2
 800d3f0:	42ab      	cmp	r3, r5
 800d3f2:	dc26      	bgt.n	800d442 <_printf_common+0x96>
 800d3f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d3f8:	6822      	ldr	r2, [r4, #0]
 800d3fa:	3b00      	subs	r3, #0
 800d3fc:	bf18      	it	ne
 800d3fe:	2301      	movne	r3, #1
 800d400:	0692      	lsls	r2, r2, #26
 800d402:	d42b      	bmi.n	800d45c <_printf_common+0xb0>
 800d404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d408:	4641      	mov	r1, r8
 800d40a:	4638      	mov	r0, r7
 800d40c:	47c8      	blx	r9
 800d40e:	3001      	adds	r0, #1
 800d410:	d01e      	beq.n	800d450 <_printf_common+0xa4>
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	6922      	ldr	r2, [r4, #16]
 800d416:	f003 0306 	and.w	r3, r3, #6
 800d41a:	2b04      	cmp	r3, #4
 800d41c:	bf02      	ittt	eq
 800d41e:	68e5      	ldreq	r5, [r4, #12]
 800d420:	6833      	ldreq	r3, [r6, #0]
 800d422:	1aed      	subeq	r5, r5, r3
 800d424:	68a3      	ldr	r3, [r4, #8]
 800d426:	bf0c      	ite	eq
 800d428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d42c:	2500      	movne	r5, #0
 800d42e:	4293      	cmp	r3, r2
 800d430:	bfc4      	itt	gt
 800d432:	1a9b      	subgt	r3, r3, r2
 800d434:	18ed      	addgt	r5, r5, r3
 800d436:	2600      	movs	r6, #0
 800d438:	341a      	adds	r4, #26
 800d43a:	42b5      	cmp	r5, r6
 800d43c:	d11a      	bne.n	800d474 <_printf_common+0xc8>
 800d43e:	2000      	movs	r0, #0
 800d440:	e008      	b.n	800d454 <_printf_common+0xa8>
 800d442:	2301      	movs	r3, #1
 800d444:	4652      	mov	r2, sl
 800d446:	4641      	mov	r1, r8
 800d448:	4638      	mov	r0, r7
 800d44a:	47c8      	blx	r9
 800d44c:	3001      	adds	r0, #1
 800d44e:	d103      	bne.n	800d458 <_printf_common+0xac>
 800d450:	f04f 30ff 	mov.w	r0, #4294967295
 800d454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d458:	3501      	adds	r5, #1
 800d45a:	e7c6      	b.n	800d3ea <_printf_common+0x3e>
 800d45c:	18e1      	adds	r1, r4, r3
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	2030      	movs	r0, #48	@ 0x30
 800d462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d466:	4422      	add	r2, r4
 800d468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d46c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d470:	3302      	adds	r3, #2
 800d472:	e7c7      	b.n	800d404 <_printf_common+0x58>
 800d474:	2301      	movs	r3, #1
 800d476:	4622      	mov	r2, r4
 800d478:	4641      	mov	r1, r8
 800d47a:	4638      	mov	r0, r7
 800d47c:	47c8      	blx	r9
 800d47e:	3001      	adds	r0, #1
 800d480:	d0e6      	beq.n	800d450 <_printf_common+0xa4>
 800d482:	3601      	adds	r6, #1
 800d484:	e7d9      	b.n	800d43a <_printf_common+0x8e>
	...

0800d488 <_printf_i>:
 800d488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d48c:	7e0f      	ldrb	r7, [r1, #24]
 800d48e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d490:	2f78      	cmp	r7, #120	@ 0x78
 800d492:	4691      	mov	r9, r2
 800d494:	4680      	mov	r8, r0
 800d496:	460c      	mov	r4, r1
 800d498:	469a      	mov	sl, r3
 800d49a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d49e:	d807      	bhi.n	800d4b0 <_printf_i+0x28>
 800d4a0:	2f62      	cmp	r7, #98	@ 0x62
 800d4a2:	d80a      	bhi.n	800d4ba <_printf_i+0x32>
 800d4a4:	2f00      	cmp	r7, #0
 800d4a6:	f000 80d2 	beq.w	800d64e <_printf_i+0x1c6>
 800d4aa:	2f58      	cmp	r7, #88	@ 0x58
 800d4ac:	f000 80b9 	beq.w	800d622 <_printf_i+0x19a>
 800d4b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d4b8:	e03a      	b.n	800d530 <_printf_i+0xa8>
 800d4ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d4be:	2b15      	cmp	r3, #21
 800d4c0:	d8f6      	bhi.n	800d4b0 <_printf_i+0x28>
 800d4c2:	a101      	add	r1, pc, #4	@ (adr r1, 800d4c8 <_printf_i+0x40>)
 800d4c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4c8:	0800d521 	.word	0x0800d521
 800d4cc:	0800d535 	.word	0x0800d535
 800d4d0:	0800d4b1 	.word	0x0800d4b1
 800d4d4:	0800d4b1 	.word	0x0800d4b1
 800d4d8:	0800d4b1 	.word	0x0800d4b1
 800d4dc:	0800d4b1 	.word	0x0800d4b1
 800d4e0:	0800d535 	.word	0x0800d535
 800d4e4:	0800d4b1 	.word	0x0800d4b1
 800d4e8:	0800d4b1 	.word	0x0800d4b1
 800d4ec:	0800d4b1 	.word	0x0800d4b1
 800d4f0:	0800d4b1 	.word	0x0800d4b1
 800d4f4:	0800d635 	.word	0x0800d635
 800d4f8:	0800d55f 	.word	0x0800d55f
 800d4fc:	0800d5ef 	.word	0x0800d5ef
 800d500:	0800d4b1 	.word	0x0800d4b1
 800d504:	0800d4b1 	.word	0x0800d4b1
 800d508:	0800d657 	.word	0x0800d657
 800d50c:	0800d4b1 	.word	0x0800d4b1
 800d510:	0800d55f 	.word	0x0800d55f
 800d514:	0800d4b1 	.word	0x0800d4b1
 800d518:	0800d4b1 	.word	0x0800d4b1
 800d51c:	0800d5f7 	.word	0x0800d5f7
 800d520:	6833      	ldr	r3, [r6, #0]
 800d522:	1d1a      	adds	r2, r3, #4
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6032      	str	r2, [r6, #0]
 800d528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d52c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d530:	2301      	movs	r3, #1
 800d532:	e09d      	b.n	800d670 <_printf_i+0x1e8>
 800d534:	6833      	ldr	r3, [r6, #0]
 800d536:	6820      	ldr	r0, [r4, #0]
 800d538:	1d19      	adds	r1, r3, #4
 800d53a:	6031      	str	r1, [r6, #0]
 800d53c:	0606      	lsls	r6, r0, #24
 800d53e:	d501      	bpl.n	800d544 <_printf_i+0xbc>
 800d540:	681d      	ldr	r5, [r3, #0]
 800d542:	e003      	b.n	800d54c <_printf_i+0xc4>
 800d544:	0645      	lsls	r5, r0, #25
 800d546:	d5fb      	bpl.n	800d540 <_printf_i+0xb8>
 800d548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d54c:	2d00      	cmp	r5, #0
 800d54e:	da03      	bge.n	800d558 <_printf_i+0xd0>
 800d550:	232d      	movs	r3, #45	@ 0x2d
 800d552:	426d      	negs	r5, r5
 800d554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d558:	4859      	ldr	r0, [pc, #356]	@ (800d6c0 <_printf_i+0x238>)
 800d55a:	230a      	movs	r3, #10
 800d55c:	e011      	b.n	800d582 <_printf_i+0xfa>
 800d55e:	6821      	ldr	r1, [r4, #0]
 800d560:	6833      	ldr	r3, [r6, #0]
 800d562:	0608      	lsls	r0, r1, #24
 800d564:	f853 5b04 	ldr.w	r5, [r3], #4
 800d568:	d402      	bmi.n	800d570 <_printf_i+0xe8>
 800d56a:	0649      	lsls	r1, r1, #25
 800d56c:	bf48      	it	mi
 800d56e:	b2ad      	uxthmi	r5, r5
 800d570:	2f6f      	cmp	r7, #111	@ 0x6f
 800d572:	4853      	ldr	r0, [pc, #332]	@ (800d6c0 <_printf_i+0x238>)
 800d574:	6033      	str	r3, [r6, #0]
 800d576:	bf14      	ite	ne
 800d578:	230a      	movne	r3, #10
 800d57a:	2308      	moveq	r3, #8
 800d57c:	2100      	movs	r1, #0
 800d57e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d582:	6866      	ldr	r6, [r4, #4]
 800d584:	60a6      	str	r6, [r4, #8]
 800d586:	2e00      	cmp	r6, #0
 800d588:	bfa2      	ittt	ge
 800d58a:	6821      	ldrge	r1, [r4, #0]
 800d58c:	f021 0104 	bicge.w	r1, r1, #4
 800d590:	6021      	strge	r1, [r4, #0]
 800d592:	b90d      	cbnz	r5, 800d598 <_printf_i+0x110>
 800d594:	2e00      	cmp	r6, #0
 800d596:	d04b      	beq.n	800d630 <_printf_i+0x1a8>
 800d598:	4616      	mov	r6, r2
 800d59a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d59e:	fb03 5711 	mls	r7, r3, r1, r5
 800d5a2:	5dc7      	ldrb	r7, [r0, r7]
 800d5a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d5a8:	462f      	mov	r7, r5
 800d5aa:	42bb      	cmp	r3, r7
 800d5ac:	460d      	mov	r5, r1
 800d5ae:	d9f4      	bls.n	800d59a <_printf_i+0x112>
 800d5b0:	2b08      	cmp	r3, #8
 800d5b2:	d10b      	bne.n	800d5cc <_printf_i+0x144>
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	07df      	lsls	r7, r3, #31
 800d5b8:	d508      	bpl.n	800d5cc <_printf_i+0x144>
 800d5ba:	6923      	ldr	r3, [r4, #16]
 800d5bc:	6861      	ldr	r1, [r4, #4]
 800d5be:	4299      	cmp	r1, r3
 800d5c0:	bfde      	ittt	le
 800d5c2:	2330      	movle	r3, #48	@ 0x30
 800d5c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d5c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d5cc:	1b92      	subs	r2, r2, r6
 800d5ce:	6122      	str	r2, [r4, #16]
 800d5d0:	f8cd a000 	str.w	sl, [sp]
 800d5d4:	464b      	mov	r3, r9
 800d5d6:	aa03      	add	r2, sp, #12
 800d5d8:	4621      	mov	r1, r4
 800d5da:	4640      	mov	r0, r8
 800d5dc:	f7ff fee6 	bl	800d3ac <_printf_common>
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	d14a      	bne.n	800d67a <_printf_i+0x1f2>
 800d5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e8:	b004      	add	sp, #16
 800d5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ee:	6823      	ldr	r3, [r4, #0]
 800d5f0:	f043 0320 	orr.w	r3, r3, #32
 800d5f4:	6023      	str	r3, [r4, #0]
 800d5f6:	4833      	ldr	r0, [pc, #204]	@ (800d6c4 <_printf_i+0x23c>)
 800d5f8:	2778      	movs	r7, #120	@ 0x78
 800d5fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	6831      	ldr	r1, [r6, #0]
 800d602:	061f      	lsls	r7, r3, #24
 800d604:	f851 5b04 	ldr.w	r5, [r1], #4
 800d608:	d402      	bmi.n	800d610 <_printf_i+0x188>
 800d60a:	065f      	lsls	r7, r3, #25
 800d60c:	bf48      	it	mi
 800d60e:	b2ad      	uxthmi	r5, r5
 800d610:	6031      	str	r1, [r6, #0]
 800d612:	07d9      	lsls	r1, r3, #31
 800d614:	bf44      	itt	mi
 800d616:	f043 0320 	orrmi.w	r3, r3, #32
 800d61a:	6023      	strmi	r3, [r4, #0]
 800d61c:	b11d      	cbz	r5, 800d626 <_printf_i+0x19e>
 800d61e:	2310      	movs	r3, #16
 800d620:	e7ac      	b.n	800d57c <_printf_i+0xf4>
 800d622:	4827      	ldr	r0, [pc, #156]	@ (800d6c0 <_printf_i+0x238>)
 800d624:	e7e9      	b.n	800d5fa <_printf_i+0x172>
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	f023 0320 	bic.w	r3, r3, #32
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	e7f6      	b.n	800d61e <_printf_i+0x196>
 800d630:	4616      	mov	r6, r2
 800d632:	e7bd      	b.n	800d5b0 <_printf_i+0x128>
 800d634:	6833      	ldr	r3, [r6, #0]
 800d636:	6825      	ldr	r5, [r4, #0]
 800d638:	6961      	ldr	r1, [r4, #20]
 800d63a:	1d18      	adds	r0, r3, #4
 800d63c:	6030      	str	r0, [r6, #0]
 800d63e:	062e      	lsls	r6, r5, #24
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	d501      	bpl.n	800d648 <_printf_i+0x1c0>
 800d644:	6019      	str	r1, [r3, #0]
 800d646:	e002      	b.n	800d64e <_printf_i+0x1c6>
 800d648:	0668      	lsls	r0, r5, #25
 800d64a:	d5fb      	bpl.n	800d644 <_printf_i+0x1bc>
 800d64c:	8019      	strh	r1, [r3, #0]
 800d64e:	2300      	movs	r3, #0
 800d650:	6123      	str	r3, [r4, #16]
 800d652:	4616      	mov	r6, r2
 800d654:	e7bc      	b.n	800d5d0 <_printf_i+0x148>
 800d656:	6833      	ldr	r3, [r6, #0]
 800d658:	1d1a      	adds	r2, r3, #4
 800d65a:	6032      	str	r2, [r6, #0]
 800d65c:	681e      	ldr	r6, [r3, #0]
 800d65e:	6862      	ldr	r2, [r4, #4]
 800d660:	2100      	movs	r1, #0
 800d662:	4630      	mov	r0, r6
 800d664:	f7f2 fd94 	bl	8000190 <memchr>
 800d668:	b108      	cbz	r0, 800d66e <_printf_i+0x1e6>
 800d66a:	1b80      	subs	r0, r0, r6
 800d66c:	6060      	str	r0, [r4, #4]
 800d66e:	6863      	ldr	r3, [r4, #4]
 800d670:	6123      	str	r3, [r4, #16]
 800d672:	2300      	movs	r3, #0
 800d674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d678:	e7aa      	b.n	800d5d0 <_printf_i+0x148>
 800d67a:	6923      	ldr	r3, [r4, #16]
 800d67c:	4632      	mov	r2, r6
 800d67e:	4649      	mov	r1, r9
 800d680:	4640      	mov	r0, r8
 800d682:	47d0      	blx	sl
 800d684:	3001      	adds	r0, #1
 800d686:	d0ad      	beq.n	800d5e4 <_printf_i+0x15c>
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	079b      	lsls	r3, r3, #30
 800d68c:	d413      	bmi.n	800d6b6 <_printf_i+0x22e>
 800d68e:	68e0      	ldr	r0, [r4, #12]
 800d690:	9b03      	ldr	r3, [sp, #12]
 800d692:	4298      	cmp	r0, r3
 800d694:	bfb8      	it	lt
 800d696:	4618      	movlt	r0, r3
 800d698:	e7a6      	b.n	800d5e8 <_printf_i+0x160>
 800d69a:	2301      	movs	r3, #1
 800d69c:	4632      	mov	r2, r6
 800d69e:	4649      	mov	r1, r9
 800d6a0:	4640      	mov	r0, r8
 800d6a2:	47d0      	blx	sl
 800d6a4:	3001      	adds	r0, #1
 800d6a6:	d09d      	beq.n	800d5e4 <_printf_i+0x15c>
 800d6a8:	3501      	adds	r5, #1
 800d6aa:	68e3      	ldr	r3, [r4, #12]
 800d6ac:	9903      	ldr	r1, [sp, #12]
 800d6ae:	1a5b      	subs	r3, r3, r1
 800d6b0:	42ab      	cmp	r3, r5
 800d6b2:	dcf2      	bgt.n	800d69a <_printf_i+0x212>
 800d6b4:	e7eb      	b.n	800d68e <_printf_i+0x206>
 800d6b6:	2500      	movs	r5, #0
 800d6b8:	f104 0619 	add.w	r6, r4, #25
 800d6bc:	e7f5      	b.n	800d6aa <_printf_i+0x222>
 800d6be:	bf00      	nop
 800d6c0:	0800de5d 	.word	0x0800de5d
 800d6c4:	0800de6e 	.word	0x0800de6e

0800d6c8 <__sflush_r>:
 800d6c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d0:	0716      	lsls	r6, r2, #28
 800d6d2:	4605      	mov	r5, r0
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	d454      	bmi.n	800d782 <__sflush_r+0xba>
 800d6d8:	684b      	ldr	r3, [r1, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	dc02      	bgt.n	800d6e4 <__sflush_r+0x1c>
 800d6de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	dd48      	ble.n	800d776 <__sflush_r+0xae>
 800d6e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6e6:	2e00      	cmp	r6, #0
 800d6e8:	d045      	beq.n	800d776 <__sflush_r+0xae>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6f0:	682f      	ldr	r7, [r5, #0]
 800d6f2:	6a21      	ldr	r1, [r4, #32]
 800d6f4:	602b      	str	r3, [r5, #0]
 800d6f6:	d030      	beq.n	800d75a <__sflush_r+0x92>
 800d6f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6fa:	89a3      	ldrh	r3, [r4, #12]
 800d6fc:	0759      	lsls	r1, r3, #29
 800d6fe:	d505      	bpl.n	800d70c <__sflush_r+0x44>
 800d700:	6863      	ldr	r3, [r4, #4]
 800d702:	1ad2      	subs	r2, r2, r3
 800d704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d706:	b10b      	cbz	r3, 800d70c <__sflush_r+0x44>
 800d708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d70a:	1ad2      	subs	r2, r2, r3
 800d70c:	2300      	movs	r3, #0
 800d70e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d710:	6a21      	ldr	r1, [r4, #32]
 800d712:	4628      	mov	r0, r5
 800d714:	47b0      	blx	r6
 800d716:	1c43      	adds	r3, r0, #1
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	d106      	bne.n	800d72a <__sflush_r+0x62>
 800d71c:	6829      	ldr	r1, [r5, #0]
 800d71e:	291d      	cmp	r1, #29
 800d720:	d82b      	bhi.n	800d77a <__sflush_r+0xb2>
 800d722:	4a2a      	ldr	r2, [pc, #168]	@ (800d7cc <__sflush_r+0x104>)
 800d724:	410a      	asrs	r2, r1
 800d726:	07d6      	lsls	r6, r2, #31
 800d728:	d427      	bmi.n	800d77a <__sflush_r+0xb2>
 800d72a:	2200      	movs	r2, #0
 800d72c:	6062      	str	r2, [r4, #4]
 800d72e:	04d9      	lsls	r1, r3, #19
 800d730:	6922      	ldr	r2, [r4, #16]
 800d732:	6022      	str	r2, [r4, #0]
 800d734:	d504      	bpl.n	800d740 <__sflush_r+0x78>
 800d736:	1c42      	adds	r2, r0, #1
 800d738:	d101      	bne.n	800d73e <__sflush_r+0x76>
 800d73a:	682b      	ldr	r3, [r5, #0]
 800d73c:	b903      	cbnz	r3, 800d740 <__sflush_r+0x78>
 800d73e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d742:	602f      	str	r7, [r5, #0]
 800d744:	b1b9      	cbz	r1, 800d776 <__sflush_r+0xae>
 800d746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d74a:	4299      	cmp	r1, r3
 800d74c:	d002      	beq.n	800d754 <__sflush_r+0x8c>
 800d74e:	4628      	mov	r0, r5
 800d750:	f7ff fbf2 	bl	800cf38 <_free_r>
 800d754:	2300      	movs	r3, #0
 800d756:	6363      	str	r3, [r4, #52]	@ 0x34
 800d758:	e00d      	b.n	800d776 <__sflush_r+0xae>
 800d75a:	2301      	movs	r3, #1
 800d75c:	4628      	mov	r0, r5
 800d75e:	47b0      	blx	r6
 800d760:	4602      	mov	r2, r0
 800d762:	1c50      	adds	r0, r2, #1
 800d764:	d1c9      	bne.n	800d6fa <__sflush_r+0x32>
 800d766:	682b      	ldr	r3, [r5, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d0c6      	beq.n	800d6fa <__sflush_r+0x32>
 800d76c:	2b1d      	cmp	r3, #29
 800d76e:	d001      	beq.n	800d774 <__sflush_r+0xac>
 800d770:	2b16      	cmp	r3, #22
 800d772:	d11e      	bne.n	800d7b2 <__sflush_r+0xea>
 800d774:	602f      	str	r7, [r5, #0]
 800d776:	2000      	movs	r0, #0
 800d778:	e022      	b.n	800d7c0 <__sflush_r+0xf8>
 800d77a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d77e:	b21b      	sxth	r3, r3
 800d780:	e01b      	b.n	800d7ba <__sflush_r+0xf2>
 800d782:	690f      	ldr	r7, [r1, #16]
 800d784:	2f00      	cmp	r7, #0
 800d786:	d0f6      	beq.n	800d776 <__sflush_r+0xae>
 800d788:	0793      	lsls	r3, r2, #30
 800d78a:	680e      	ldr	r6, [r1, #0]
 800d78c:	bf08      	it	eq
 800d78e:	694b      	ldreq	r3, [r1, #20]
 800d790:	600f      	str	r7, [r1, #0]
 800d792:	bf18      	it	ne
 800d794:	2300      	movne	r3, #0
 800d796:	eba6 0807 	sub.w	r8, r6, r7
 800d79a:	608b      	str	r3, [r1, #8]
 800d79c:	f1b8 0f00 	cmp.w	r8, #0
 800d7a0:	dde9      	ble.n	800d776 <__sflush_r+0xae>
 800d7a2:	6a21      	ldr	r1, [r4, #32]
 800d7a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d7a6:	4643      	mov	r3, r8
 800d7a8:	463a      	mov	r2, r7
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	47b0      	blx	r6
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	dc08      	bgt.n	800d7c4 <__sflush_r+0xfc>
 800d7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ba:	81a3      	strh	r3, [r4, #12]
 800d7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c4:	4407      	add	r7, r0
 800d7c6:	eba8 0800 	sub.w	r8, r8, r0
 800d7ca:	e7e7      	b.n	800d79c <__sflush_r+0xd4>
 800d7cc:	dfbffffe 	.word	0xdfbffffe

0800d7d0 <_fflush_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	690b      	ldr	r3, [r1, #16]
 800d7d4:	4605      	mov	r5, r0
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	b913      	cbnz	r3, 800d7e0 <_fflush_r+0x10>
 800d7da:	2500      	movs	r5, #0
 800d7dc:	4628      	mov	r0, r5
 800d7de:	bd38      	pop	{r3, r4, r5, pc}
 800d7e0:	b118      	cbz	r0, 800d7ea <_fflush_r+0x1a>
 800d7e2:	6a03      	ldr	r3, [r0, #32]
 800d7e4:	b90b      	cbnz	r3, 800d7ea <_fflush_r+0x1a>
 800d7e6:	f7ff f997 	bl	800cb18 <__sinit>
 800d7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d0f3      	beq.n	800d7da <_fflush_r+0xa>
 800d7f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7f4:	07d0      	lsls	r0, r2, #31
 800d7f6:	d404      	bmi.n	800d802 <_fflush_r+0x32>
 800d7f8:	0599      	lsls	r1, r3, #22
 800d7fa:	d402      	bmi.n	800d802 <_fflush_r+0x32>
 800d7fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7fe:	f7ff fb8a 	bl	800cf16 <__retarget_lock_acquire_recursive>
 800d802:	4628      	mov	r0, r5
 800d804:	4621      	mov	r1, r4
 800d806:	f7ff ff5f 	bl	800d6c8 <__sflush_r>
 800d80a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d80c:	07da      	lsls	r2, r3, #31
 800d80e:	4605      	mov	r5, r0
 800d810:	d4e4      	bmi.n	800d7dc <_fflush_r+0xc>
 800d812:	89a3      	ldrh	r3, [r4, #12]
 800d814:	059b      	lsls	r3, r3, #22
 800d816:	d4e1      	bmi.n	800d7dc <_fflush_r+0xc>
 800d818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d81a:	f7ff fb7d 	bl	800cf18 <__retarget_lock_release_recursive>
 800d81e:	e7dd      	b.n	800d7dc <_fflush_r+0xc>

0800d820 <__swhatbuf_r>:
 800d820:	b570      	push	{r4, r5, r6, lr}
 800d822:	460c      	mov	r4, r1
 800d824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d828:	2900      	cmp	r1, #0
 800d82a:	b096      	sub	sp, #88	@ 0x58
 800d82c:	4615      	mov	r5, r2
 800d82e:	461e      	mov	r6, r3
 800d830:	da0d      	bge.n	800d84e <__swhatbuf_r+0x2e>
 800d832:	89a3      	ldrh	r3, [r4, #12]
 800d834:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d838:	f04f 0100 	mov.w	r1, #0
 800d83c:	bf14      	ite	ne
 800d83e:	2340      	movne	r3, #64	@ 0x40
 800d840:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d844:	2000      	movs	r0, #0
 800d846:	6031      	str	r1, [r6, #0]
 800d848:	602b      	str	r3, [r5, #0]
 800d84a:	b016      	add	sp, #88	@ 0x58
 800d84c:	bd70      	pop	{r4, r5, r6, pc}
 800d84e:	466a      	mov	r2, sp
 800d850:	f000 f87c 	bl	800d94c <_fstat_r>
 800d854:	2800      	cmp	r0, #0
 800d856:	dbec      	blt.n	800d832 <__swhatbuf_r+0x12>
 800d858:	9901      	ldr	r1, [sp, #4]
 800d85a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d85e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d862:	4259      	negs	r1, r3
 800d864:	4159      	adcs	r1, r3
 800d866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d86a:	e7eb      	b.n	800d844 <__swhatbuf_r+0x24>

0800d86c <__smakebuf_r>:
 800d86c:	898b      	ldrh	r3, [r1, #12]
 800d86e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d870:	079d      	lsls	r5, r3, #30
 800d872:	4606      	mov	r6, r0
 800d874:	460c      	mov	r4, r1
 800d876:	d507      	bpl.n	800d888 <__smakebuf_r+0x1c>
 800d878:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	6123      	str	r3, [r4, #16]
 800d880:	2301      	movs	r3, #1
 800d882:	6163      	str	r3, [r4, #20]
 800d884:	b003      	add	sp, #12
 800d886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d888:	ab01      	add	r3, sp, #4
 800d88a:	466a      	mov	r2, sp
 800d88c:	f7ff ffc8 	bl	800d820 <__swhatbuf_r>
 800d890:	9f00      	ldr	r7, [sp, #0]
 800d892:	4605      	mov	r5, r0
 800d894:	4639      	mov	r1, r7
 800d896:	4630      	mov	r0, r6
 800d898:	f7ff fbba 	bl	800d010 <_malloc_r>
 800d89c:	b948      	cbnz	r0, 800d8b2 <__smakebuf_r+0x46>
 800d89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a2:	059a      	lsls	r2, r3, #22
 800d8a4:	d4ee      	bmi.n	800d884 <__smakebuf_r+0x18>
 800d8a6:	f023 0303 	bic.w	r3, r3, #3
 800d8aa:	f043 0302 	orr.w	r3, r3, #2
 800d8ae:	81a3      	strh	r3, [r4, #12]
 800d8b0:	e7e2      	b.n	800d878 <__smakebuf_r+0xc>
 800d8b2:	89a3      	ldrh	r3, [r4, #12]
 800d8b4:	6020      	str	r0, [r4, #0]
 800d8b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8ba:	81a3      	strh	r3, [r4, #12]
 800d8bc:	9b01      	ldr	r3, [sp, #4]
 800d8be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8c2:	b15b      	cbz	r3, 800d8dc <__smakebuf_r+0x70>
 800d8c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f000 f851 	bl	800d970 <_isatty_r>
 800d8ce:	b128      	cbz	r0, 800d8dc <__smakebuf_r+0x70>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	f023 0303 	bic.w	r3, r3, #3
 800d8d6:	f043 0301 	orr.w	r3, r3, #1
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	89a3      	ldrh	r3, [r4, #12]
 800d8de:	431d      	orrs	r5, r3
 800d8e0:	81a5      	strh	r5, [r4, #12]
 800d8e2:	e7cf      	b.n	800d884 <__smakebuf_r+0x18>

0800d8e4 <_putc_r>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	460d      	mov	r5, r1
 800d8e8:	4614      	mov	r4, r2
 800d8ea:	4606      	mov	r6, r0
 800d8ec:	b118      	cbz	r0, 800d8f6 <_putc_r+0x12>
 800d8ee:	6a03      	ldr	r3, [r0, #32]
 800d8f0:	b90b      	cbnz	r3, 800d8f6 <_putc_r+0x12>
 800d8f2:	f7ff f911 	bl	800cb18 <__sinit>
 800d8f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8f8:	07d8      	lsls	r0, r3, #31
 800d8fa:	d405      	bmi.n	800d908 <_putc_r+0x24>
 800d8fc:	89a3      	ldrh	r3, [r4, #12]
 800d8fe:	0599      	lsls	r1, r3, #22
 800d900:	d402      	bmi.n	800d908 <_putc_r+0x24>
 800d902:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d904:	f7ff fb07 	bl	800cf16 <__retarget_lock_acquire_recursive>
 800d908:	68a3      	ldr	r3, [r4, #8]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	60a3      	str	r3, [r4, #8]
 800d910:	da05      	bge.n	800d91e <_putc_r+0x3a>
 800d912:	69a2      	ldr	r2, [r4, #24]
 800d914:	4293      	cmp	r3, r2
 800d916:	db12      	blt.n	800d93e <_putc_r+0x5a>
 800d918:	b2eb      	uxtb	r3, r5
 800d91a:	2b0a      	cmp	r3, #10
 800d91c:	d00f      	beq.n	800d93e <_putc_r+0x5a>
 800d91e:	6823      	ldr	r3, [r4, #0]
 800d920:	1c5a      	adds	r2, r3, #1
 800d922:	6022      	str	r2, [r4, #0]
 800d924:	701d      	strb	r5, [r3, #0]
 800d926:	b2ed      	uxtb	r5, r5
 800d928:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d92a:	07da      	lsls	r2, r3, #31
 800d92c:	d405      	bmi.n	800d93a <_putc_r+0x56>
 800d92e:	89a3      	ldrh	r3, [r4, #12]
 800d930:	059b      	lsls	r3, r3, #22
 800d932:	d402      	bmi.n	800d93a <_putc_r+0x56>
 800d934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d936:	f7ff faef 	bl	800cf18 <__retarget_lock_release_recursive>
 800d93a:	4628      	mov	r0, r5
 800d93c:	bd70      	pop	{r4, r5, r6, pc}
 800d93e:	4629      	mov	r1, r5
 800d940:	4622      	mov	r2, r4
 800d942:	4630      	mov	r0, r6
 800d944:	f7ff f9d9 	bl	800ccfa <__swbuf_r>
 800d948:	4605      	mov	r5, r0
 800d94a:	e7ed      	b.n	800d928 <_putc_r+0x44>

0800d94c <_fstat_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	4d07      	ldr	r5, [pc, #28]	@ (800d96c <_fstat_r+0x20>)
 800d950:	2300      	movs	r3, #0
 800d952:	4604      	mov	r4, r0
 800d954:	4608      	mov	r0, r1
 800d956:	4611      	mov	r1, r2
 800d958:	602b      	str	r3, [r5, #0]
 800d95a:	f7f4 ff02 	bl	8002762 <_fstat>
 800d95e:	1c43      	adds	r3, r0, #1
 800d960:	d102      	bne.n	800d968 <_fstat_r+0x1c>
 800d962:	682b      	ldr	r3, [r5, #0]
 800d964:	b103      	cbz	r3, 800d968 <_fstat_r+0x1c>
 800d966:	6023      	str	r3, [r4, #0]
 800d968:	bd38      	pop	{r3, r4, r5, pc}
 800d96a:	bf00      	nop
 800d96c:	20000864 	.word	0x20000864

0800d970 <_isatty_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4d06      	ldr	r5, [pc, #24]	@ (800d98c <_isatty_r+0x1c>)
 800d974:	2300      	movs	r3, #0
 800d976:	4604      	mov	r4, r0
 800d978:	4608      	mov	r0, r1
 800d97a:	602b      	str	r3, [r5, #0]
 800d97c:	f7f4 ff01 	bl	8002782 <_isatty>
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d102      	bne.n	800d98a <_isatty_r+0x1a>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	b103      	cbz	r3, 800d98a <_isatty_r+0x1a>
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	20000864 	.word	0x20000864

0800d990 <_sbrk_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4d06      	ldr	r5, [pc, #24]	@ (800d9ac <_sbrk_r+0x1c>)
 800d994:	2300      	movs	r3, #0
 800d996:	4604      	mov	r4, r0
 800d998:	4608      	mov	r0, r1
 800d99a:	602b      	str	r3, [r5, #0]
 800d99c:	f7f4 ff0a 	bl	80027b4 <_sbrk>
 800d9a0:	1c43      	adds	r3, r0, #1
 800d9a2:	d102      	bne.n	800d9aa <_sbrk_r+0x1a>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	b103      	cbz	r3, 800d9aa <_sbrk_r+0x1a>
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	bd38      	pop	{r3, r4, r5, pc}
 800d9ac:	20000864 	.word	0x20000864

0800d9b0 <_init>:
 800d9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9b2:	bf00      	nop
 800d9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b6:	bc08      	pop	{r3}
 800d9b8:	469e      	mov	lr, r3
 800d9ba:	4770      	bx	lr

0800d9bc <_fini>:
 800d9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9be:	bf00      	nop
 800d9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9c2:	bc08      	pop	{r3}
 800d9c4:	469e      	mov	lr, r3
 800d9c6:	4770      	bx	lr
