
MasterProject_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014870  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  080149b0  080149b0  000159b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015438  08015438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015440  08015440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015444  08015444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  20000008  08015448  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000200  08015640  00017200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000238  08015675  00017238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  2000024c  08015686  0001724c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08015686  00017b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00019000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00019000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08015686  000181e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00038e23  00000000  00000000  00018a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000074c4  00000000  00000000  000518ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003520  00000000  00000000  00058d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000294a  00000000  00000000  0005c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002fbf5  00000000  00000000  0005ebea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003cb86  00000000  00000000  0008e7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010a0bb  00000000  00000000  000cb365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001d5420  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000f71c  00000000  00000000  001d5464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  001e4b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000024c 	.word	0x2000024c
 800015c:	00000000 	.word	0x00000000
 8000160:	08014998 	.word	0x08014998

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000250 	.word	0x20000250
 800017c:	08014998 	.word	0x08014998

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a0 	b.w	8000fb0 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff0b 	bl	8000aac <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc81 	bl	80005c8 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc02 	bl	80004d4 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc78 	bl	80005c8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff faba 	bl	8000258 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9d08      	ldr	r5, [sp, #32]
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d14e      	bne.n	8000d9e <__udivmoddi4+0xaa>
 8000d00:	4694      	mov	ip, r2
 8000d02:	458c      	cmp	ip, r1
 8000d04:	4686      	mov	lr, r0
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	d962      	bls.n	8000dd2 <__udivmoddi4+0xde>
 8000d0c:	b14a      	cbz	r2, 8000d22 <__udivmoddi4+0x2e>
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	4091      	lsls	r1, r2
 8000d14:	fa20 f303 	lsr.w	r3, r0, r3
 8000d18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f f68c 	uxth.w	r6, ip
 8000d2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb07 1114 	mls	r1, r7, r4, r1
 8000d36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3a:	fb04 f106 	mul.w	r1, r4, r6
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x64>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4a:	f080 8112 	bcs.w	8000f72 <__udivmoddi4+0x27e>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 810f 	bls.w	8000f72 <__udivmoddi4+0x27e>
 8000d54:	3c02      	subs	r4, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	1a59      	subs	r1, r3, r1
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d62:	fb07 1110 	mls	r1, r7, r0, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb00 f606 	mul.w	r6, r0, r6
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x94>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7a:	f080 80fc 	bcs.w	8000f76 <__udivmoddi4+0x282>
 8000d7e:	429e      	cmp	r6, r3
 8000d80:	f240 80f9 	bls.w	8000f76 <__udivmoddi4+0x282>
 8000d84:	4463      	add	r3, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	1b9b      	subs	r3, r3, r6
 8000d8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa6>
 8000d92:	40d3      	lsrs	r3, r2
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xba>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb4>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x150>
 8000db6:	42a3      	cmp	r3, r4
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xcc>
 8000dba:	4290      	cmp	r0, r2
 8000dbc:	f0c0 80f0 	bcc.w	8000fa0 <__udivmoddi4+0x2ac>
 8000dc0:	1a86      	subs	r6, r0, r2
 8000dc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d0e6      	beq.n	8000d9a <__udivmoddi4+0xa6>
 8000dcc:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd0:	e7e3      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x204>
 8000dd8:	eba1 040c 	sub.w	r4, r1, ip
 8000ddc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	2101      	movs	r1, #1
 8000de6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dee:	fb08 4416 	mls	r4, r8, r6, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb07 f006 	mul.w	r0, r7, r6
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x11c>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x11a>
 8000e08:	4298      	cmp	r0, r3
 8000e0a:	f200 80cd 	bhi.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e0e:	4626      	mov	r6, r4
 8000e10:	1a1c      	subs	r4, r3, r0
 8000e12:	fa1f f38e 	uxth.w	r3, lr
 8000e16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e22:	fb00 f707 	mul.w	r7, r0, r7
 8000e26:	429f      	cmp	r7, r3
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x148>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x146>
 8000e34:	429f      	cmp	r7, r3
 8000e36:	f200 80b0 	bhi.w	8000f9a <__udivmoddi4+0x2a6>
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	1bdb      	subs	r3, r3, r7
 8000e3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x9c>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e54:	fa04 f301 	lsl.w	r3, r4, r1
 8000e58:	ea43 030c 	orr.w	r3, r3, ip
 8000e5c:	40f4      	lsrs	r4, r6
 8000e5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e62:	0c38      	lsrs	r0, r7, #16
 8000e64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e68:	fbb4 fef0 	udiv	lr, r4, r0
 8000e6c:	fa1f fc87 	uxth.w	ip, r7
 8000e70:	fb00 441e 	mls	r4, r0, lr, r4
 8000e74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e78:	fb0e f90c 	mul.w	r9, lr, ip
 8000e7c:	45a1      	cmp	r9, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d90a      	bls.n	8000e9a <__udivmoddi4+0x1a6>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8a:	f080 8084 	bcs.w	8000f96 <__udivmoddi4+0x2a2>
 8000e8e:	45a1      	cmp	r9, r4
 8000e90:	f240 8081 	bls.w	8000f96 <__udivmoddi4+0x2a2>
 8000e94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	eba4 0409 	sub.w	r4, r4, r9
 8000e9e:	fa1f f983 	uxth.w	r9, r3
 8000ea2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ea6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eaa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x1d2>
 8000eb6:	193c      	adds	r4, r7, r4
 8000eb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ebc:	d267      	bcs.n	8000f8e <__udivmoddi4+0x29a>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d965      	bls.n	8000f8e <__udivmoddi4+0x29a>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eca:	fba0 9302 	umull	r9, r3, r0, r2
 8000ece:	eba4 040c 	sub.w	r4, r4, ip
 8000ed2:	429c      	cmp	r4, r3
 8000ed4:	46ce      	mov	lr, r9
 8000ed6:	469c      	mov	ip, r3
 8000ed8:	d351      	bcc.n	8000f7e <__udivmoddi4+0x28a>
 8000eda:	d04e      	beq.n	8000f7a <__udivmoddi4+0x286>
 8000edc:	b155      	cbz	r5, 8000ef4 <__udivmoddi4+0x200>
 8000ede:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	40cb      	lsrs	r3, r1
 8000eec:	431e      	orrs	r6, r3
 8000eee:	40cc      	lsrs	r4, r1
 8000ef0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	e750      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f103 	lsr.w	r1, r0, r3
 8000f00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f04:	fa24 f303 	lsr.w	r3, r4, r3
 8000f08:	4094      	lsls	r4, r2
 8000f0a:	430c      	orrs	r4, r1
 8000f0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f14:	fa1f f78c 	uxth.w	r7, ip
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f20:	0c23      	lsrs	r3, r4, #16
 8000f22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f26:	fb00 f107 	mul.w	r1, r0, r7
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x24c>
 8000f2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f36:	d22c      	bcs.n	8000f92 <__udivmoddi4+0x29e>
 8000f38:	4299      	cmp	r1, r3
 8000f3a:	d92a      	bls.n	8000f92 <__udivmoddi4+0x29e>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	1a5b      	subs	r3, r3, r1
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f48:	fb08 3311 	mls	r3, r8, r1, r3
 8000f4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f50:	fb01 f307 	mul.w	r3, r1, r7
 8000f54:	42a3      	cmp	r3, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x276>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f60:	d213      	bcs.n	8000f8a <__udivmoddi4+0x296>
 8000f62:	42a3      	cmp	r3, r4
 8000f64:	d911      	bls.n	8000f8a <__udivmoddi4+0x296>
 8000f66:	3902      	subs	r1, #2
 8000f68:	4464      	add	r4, ip
 8000f6a:	1ae4      	subs	r4, r4, r3
 8000f6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f70:	e739      	b.n	8000de6 <__udivmoddi4+0xf2>
 8000f72:	4604      	mov	r4, r0
 8000f74:	e6f0      	b.n	8000d58 <__udivmoddi4+0x64>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e706      	b.n	8000d88 <__udivmoddi4+0x94>
 8000f7a:	45c8      	cmp	r8, r9
 8000f7c:	d2ae      	bcs.n	8000edc <__udivmoddi4+0x1e8>
 8000f7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7a8      	b.n	8000edc <__udivmoddi4+0x1e8>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	e7ed      	b.n	8000f6a <__udivmoddi4+0x276>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	e799      	b.n	8000ec6 <__udivmoddi4+0x1d2>
 8000f92:	4630      	mov	r0, r6
 8000f94:	e7d4      	b.n	8000f40 <__udivmoddi4+0x24c>
 8000f96:	46d6      	mov	lr, sl
 8000f98:	e77f      	b.n	8000e9a <__udivmoddi4+0x1a6>
 8000f9a:	4463      	add	r3, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e74d      	b.n	8000e3c <__udivmoddi4+0x148>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	4623      	mov	r3, r4
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e70f      	b.n	8000dc8 <__udivmoddi4+0xd4>
 8000fa8:	3e02      	subs	r6, #2
 8000faa:	4463      	add	r3, ip
 8000fac:	e730      	b.n	8000e10 <__udivmoddi4+0x11c>
 8000fae:	bf00      	nop

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <check_command>:
#include <stdio.h>
#include <string.h>

extern bool GPIO_EXTENDER_ProcessCommand(uint8_t *data);

bool check_command(uint8_t *data) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if (data[0] == 0x01) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <check_command+0x14>
		return true;  // Commande valide
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <check_command+0x16>
	}
	return false;  // Commande invalide
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <BLE_ProcessCommand>:

// Fonction pour traiter la commande BLE
// Format des données a envoyé : {"GPS_mode":0,"forward":0,"spine":0} de avancé de 50 à 100, reculé de 0 à 50
bool BLE_ProcessCommand(uint8_t *data, uint8_t length) {
 8000fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fdc:	b0d2      	sub	sp, #328	@ 0x148
 8000fde:	af06      	add	r7, sp, #24
 8000fe0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fe4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000fe8:	6018      	str	r0, [r3, #0]
 8000fea:	460a      	mov	r2, r1
 8000fec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ff0:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8000ff4:	701a      	strb	r2, [r3, #0]
    char json_string[256] = {0};
 8000ff6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ffa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	3304      	adds	r3, #4
 8001004:	22fc      	movs	r2, #252	@ 0xfc
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f011 f84d 	bl	80120a8 <memset>
    if (length >= sizeof(json_string)) return false;
    memcpy(json_string, data, length);
 800100e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001012:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800101c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001020:	f107 0014 	add.w	r0, r7, #20
 8001024:	6819      	ldr	r1, [r3, #0]
 8001026:	f011 f8e0 	bl	80121ea <memcpy>
    json_string[length] = '\0';
 800102a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800102e:	f2a3 1325 	subw	r3, r3, #293	@ 0x125
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001038:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800103c:	2100      	movs	r1, #0
 800103e:	54d1      	strb	r1, [r2, r3]

    printf(">> JSON reçu : %s\r\n", json_string);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4864      	ldr	r0, [pc, #400]	@ (80011d8 <BLE_ProcessCommand+0x200>)
 8001048:	f010 febe 	bl	8011dc8 <iprintf>

    // Parse le JSON
    cJSON *root = cJSON_Parse(json_string);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4618      	mov	r0, r3
 8001052:	f001 f90f 	bl	8002274 <cJSON_Parse>
 8001056:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
    if (root == NULL) {
 800105a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d104      	bne.n	800106c <BLE_ProcessCommand+0x94>
        printf("⚠️ JSON invalide\n");
 8001062:	485e      	ldr	r0, [pc, #376]	@ (80011dc <BLE_ProcessCommand+0x204>)
 8001064:	f010 ff20 	bl	8011ea8 <puts>
        return false;
 8001068:	2300      	movs	r3, #0
 800106a:	e0af      	b.n	80011cc <BLE_ProcessCommand+0x1f4>
    }

    // Extraction des champs moteurs
    cJSON *forward = cJSON_GetObjectItem(root, "forward");
 800106c:	495c      	ldr	r1, [pc, #368]	@ (80011e0 <BLE_ProcessCommand+0x208>)
 800106e:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001072:	f001 fc04 	bl	800287e <cJSON_GetObjectItem>
 8001076:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    cJSON *spine = cJSON_GetObjectItem(root, "spine");
 800107a:	495a      	ldr	r1, [pc, #360]	@ (80011e4 <BLE_ProcessCommand+0x20c>)
 800107c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001080:	f001 fbfd 	bl	800287e <cJSON_GetObjectItem>
 8001084:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    cJSON *GPS_mode = cJSON_GetObjectItem(root, "GPS_mode");
 8001088:	4957      	ldr	r1, [pc, #348]	@ (80011e8 <BLE_ProcessCommand+0x210>)
 800108a:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800108e:	f001 fbf6 	bl	800287e <cJSON_GetObjectItem>
 8001092:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    cJSON *p = cJSON_GetObjectItem(root, "p");
 8001096:	4955      	ldr	r1, [pc, #340]	@ (80011ec <BLE_ProcessCommand+0x214>)
 8001098:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800109c:	f001 fbef 	bl	800287e <cJSON_GetObjectItem>
 80010a0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
    cJSON *i = cJSON_GetObjectItem(root, "i");
 80010a4:	4952      	ldr	r1, [pc, #328]	@ (80011f0 <BLE_ProcessCommand+0x218>)
 80010a6:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80010aa:	f001 fbe8 	bl	800287e <cJSON_GetObjectItem>
 80010ae:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    cJSON *d = cJSON_GetObjectItem(root, "d");
 80010b2:	4950      	ldr	r1, [pc, #320]	@ (80011f4 <BLE_ProcessCommand+0x21c>)
 80010b4:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80010b8:	f001 fbe1 	bl	800287e <cJSON_GetObjectItem>
 80010bc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    if (!cJSON_IsNumber(forward) || !cJSON_IsNumber(spine) || !cJSON_IsNumber(GPS_mode) || !cJSON_IsNumber(p) || !cJSON_IsNumber(i) || !cJSON_IsNumber(d)) {
 80010c0:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80010c4:	f001 fbea 	bl	800289c <cJSON_IsNumber>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d022      	beq.n	8001114 <BLE_ProcessCommand+0x13c>
 80010ce:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80010d2:	f001 fbe3 	bl	800289c <cJSON_IsNumber>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01b      	beq.n	8001114 <BLE_ProcessCommand+0x13c>
 80010dc:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80010e0:	f001 fbdc 	bl	800289c <cJSON_IsNumber>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d014      	beq.n	8001114 <BLE_ProcessCommand+0x13c>
 80010ea:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80010ee:	f001 fbd5 	bl	800289c <cJSON_IsNumber>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00d      	beq.n	8001114 <BLE_ProcessCommand+0x13c>
 80010f8:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80010fc:	f001 fbce 	bl	800289c <cJSON_IsNumber>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <BLE_ProcessCommand+0x13c>
 8001106:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800110a:	f001 fbc7 	bl	800289c <cJSON_IsNumber>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d108      	bne.n	8001126 <BLE_ProcessCommand+0x14e>
        printf("⚠️ Un ou plusieurs champs ne sont pas des nombres\n");
 8001114:	4838      	ldr	r0, [pc, #224]	@ (80011f8 <BLE_ProcessCommand+0x220>)
 8001116:	f010 fec7 	bl	8011ea8 <puts>
        cJSON_Delete(root);
 800111a:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 800111e:	f000 fbcf 	bl	80018c0 <cJSON_Delete>
        return false;
 8001122:	2300      	movs	r3, #0
 8001124:	e052      	b.n	80011cc <BLE_ProcessCommand+0x1f4>
    }

    printf("Moteurs : forward=%d, spine=%d, GPS_mode=%d, p=%d, i=%d, d=%d\n",
 8001126:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800112a:	695e      	ldr	r6, [r3, #20]
 800112c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001138:	6959      	ldr	r1, [r3, #20]
 800113a:	6039      	str	r1, [r7, #0]
 800113c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001140:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001144:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8001148:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800114c:	f8d7 4114 	ldr.w	r4, [r7, #276]	@ 0x114
 8001150:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 8001154:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800115c:	e9cd 2300 	strd	r2, r3, [sp]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4631      	mov	r1, r6
 8001166:	4825      	ldr	r0, [pc, #148]	@ (80011fc <BLE_ProcessCommand+0x224>)
 8001168:	f010 fe2e 	bl	8011dc8 <iprintf>
           forward->valueint, spine->valueint, GPS_mode->valueint, p->valuedouble, i->valuedouble, d->valuedouble);

    cJSON_Delete(root);
 800116c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001170:	f000 fba6 	bl	80018c0 <cJSON_Delete>

    motorTraduction(forward->valueint, spine->valueint, p->valuedouble, i->valuedouble, d->valuedouble);
 8001174:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001178:	695c      	ldr	r4, [r3, #20]
 800117a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800117e:	695d      	ldr	r5, [r3, #20]
 8001180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001184:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fd14 	bl	8000bb8 <__aeabi_d2f>
 8001190:	4606      	mov	r6, r0
 8001192:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001196:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fd0b 	bl	8000bb8 <__aeabi_d2f>
 80011a2:	4680      	mov	r8, r0
 80011a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80011a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fd02 	bl	8000bb8 <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	ee01 3a10 	vmov	s2, r3
 80011ba:	ee00 8a90 	vmov	s1, r8
 80011be:	ee00 6a10 	vmov	s0, r6
 80011c2:	4629      	mov	r1, r5
 80011c4:	4620      	mov	r0, r4
 80011c6:	f000 f8f9 	bl	80013bc <motorTraduction>
    return true;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80011d2:	46bd      	mov	sp, r7
 80011d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011d8:	080149b0 	.word	0x080149b0
 80011dc:	080149c8 	.word	0x080149c8
 80011e0:	080149e0 	.word	0x080149e0
 80011e4:	080149e8 	.word	0x080149e8
 80011e8:	080149f0 	.word	0x080149f0
 80011ec:	080149fc 	.word	0x080149fc
 80011f0:	08014a00 	.word	0x08014a00
 80011f4:	08014a04 	.word	0x08014a04
 80011f8:	08014a08 	.word	0x08014a08
 80011fc:	08014a40 	.word	0x08014a40

08001200 <GPIO_EXTENDER_ProcessCommand>:
#include <stdbool.h>

extern I2C_HandleTypeDef hi2c1;
#define PCF8574_ADDRESS (0x39 << 1)  // Adresse I2C correcte

bool GPIO_EXTENDER_ProcessCommand(uint8_t *data) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af02      	add	r7, sp, #8
 8001206:	6078      	str	r0, [r7, #4]
    uint8_t TxData = *data;  // Convertir la donnée en octet unique
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	73fb      	strb	r3, [r7, #15]

    if (HAL_I2C_Master_Transmit(&hi2c1, PCF8574_ADDRESS, &TxData, 1, 1000) == HAL_OK) {
 800120e:	f107 020f 	add.w	r2, r7, #15
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	2172      	movs	r1, #114	@ 0x72
 800121c:	4806      	ldr	r0, [pc, #24]	@ (8001238 <GPIO_EXTENDER_ProcessCommand+0x38>)
 800121e:	f005 f85d 	bl	80062dc <HAL_I2C_Master_Transmit>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <GPIO_EXTENDER_ProcessCommand+0x2c>
        return true;  // Transmission réussie
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <GPIO_EXTENDER_ProcessCommand+0x2e>
    } else {
        return false;  // Erreur de transmission
 800122c:	2300      	movs	r3, #0
    }
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200004c8 	.word	0x200004c8

0800123c <print_binary>:
Pins_Typedef pins[] = {
    { .Pin = 0x00 }
};
size_t pins_size = sizeof(pins) / sizeof(Pins_Typedef);

void print_binary(uint8_t value) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
    printf("Etat binaire des pins : ");
 8001246:	480e      	ldr	r0, [pc, #56]	@ (8001280 <print_binary+0x44>)
 8001248:	f010 fdbe 	bl	8011dc8 <iprintf>
    for (int i = 7; i >= 0; i--) {
 800124c:	2307      	movs	r3, #7
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e00c      	b.n	800126c <print_binary+0x30>
        printf("%d", (value >> i) & 1);
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	fa42 f303 	asr.w	r3, r2, r3
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	4619      	mov	r1, r3
 8001260:	4808      	ldr	r0, [pc, #32]	@ (8001284 <print_binary+0x48>)
 8001262:	f010 fdb1 	bl	8011dc8 <iprintf>
    for (int i = 7; i >= 0; i--) {
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3b01      	subs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	daef      	bge.n	8001252 <print_binary+0x16>
    }
    printf("\n");
 8001272:	200a      	movs	r0, #10
 8001274:	f010 fdba 	bl	8011dec <putchar>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	08014a80 	.word	0x08014a80
 8001284:	08014a9c 	.word	0x08014a9c

08001288 <compute_pid>:

float map_power_to_speed(int power) {
    return (power / 100.0f) * 34.0f; // linéaire de 0 à 35 tr/s
}

int compute_pid(PID_Controller *pid, float setpoint, float measurement, float dt) {
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	ed87 0a02 	vstr	s0, [r7, #8]
 8001294:	edc7 0a01 	vstr	s1, [r7, #4]
 8001298:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - measurement;
 800129c:	ed97 7a02 	vldr	s14, [r7, #8]
 80012a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	edc7 7a06 	vstr	s15, [r7, #24]
    pid->integral += error * dt;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80012b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80012b6:	edd7 7a00 	vldr	s15, [r7]
 80012ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	edc3 7a03 	vstr	s15, [r3, #12]
    float derivative = (error - pid->previous_error) / dt;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80012ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80012d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012d6:	ed97 7a00 	vldr	s14, [r7]
 80012da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012de:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->previous_error = error;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	611a      	str	r2, [r3, #16]

    if (pid->integral > pid->max_integral) pid->integral = pid->max_integral;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80012f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	dd03      	ble.n	8001306 <compute_pid+0x7e>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	60da      	str	r2, [r3, #12]
    if (pid->integral < -pid->max_integral) pid->integral = -pid->max_integral;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	ed93 7a03 	vldr	s14, [r3, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001312:	eef1 7a67 	vneg.f32	s15, s15
 8001316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	d507      	bpl.n	8001330 <compute_pid+0xa8>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	edd3 7a06 	vldr	s15, [r3, #24]
 8001326:	eef1 7a67 	vneg.f32	s15, s15
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	edc3 7a03 	vstr	s15, [r3, #12]

    float output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	ed93 7a00 	vldr	s14, [r3]
 8001336:	edd7 7a06 	vldr	s15, [r7, #24]
 800133a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	edd3 6a01 	vldr	s13, [r3, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	edd3 7a03 	vldr	s15, [r3, #12]
 800134a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	edd3 6a02 	vldr	s13, [r3, #8]
 8001358:	edd7 7a05 	vldr	s15, [r7, #20]
 800135c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001364:	edc7 7a07 	vstr	s15, [r7, #28]
//			setpoint, measurement, error, output);
//	printf("PID - Integral: %.2f, Derivative: %.2f\n", pid->integral, derivative);
//	printf("PID - Gains: Kp=%.2f, Ki=%.2f, Kd=%.2f\n", pid->kp, pid->ki, pid->kd);


	if (output > 100.0f) output = 100.0f;
 8001368:	edd7 7a07 	vldr	s15, [r7, #28]
 800136c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80013ac <compute_pid+0x124>
 8001370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	dd01      	ble.n	800137e <compute_pid+0xf6>
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <compute_pid+0x128>)
 800137c:	61fb      	str	r3, [r7, #28]
	if (output < -100.0f) output = -100.0f;
 800137e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001382:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80013b4 <compute_pid+0x12c>
 8001386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	d501      	bpl.n	8001394 <compute_pid+0x10c>
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <compute_pid+0x130>)
 8001392:	61fb      	str	r3, [r7, #28]

    return (int)output;
 8001394:	edd7 7a07 	vldr	s15, [r7, #28]
 8001398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139c:	ee17 3a90 	vmov	r3, s15
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3724      	adds	r7, #36	@ 0x24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	42c80000 	.word	0x42c80000
 80013b0:	42c80000 	.word	0x42c80000
 80013b4:	c2c80000 	.word	0xc2c80000
 80013b8:	c2c80000 	.word	0xc2c80000

080013bc <motorTraduction>:

void motorTraduction(int forward, int spine, float p, float i, float d) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	@ 0x38
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6178      	str	r0, [r7, #20]
 80013c4:	6139      	str	r1, [r7, #16]
 80013c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80013ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80013ce:	ed87 1a01 	vstr	s2, [r7, #4]
	for(int it = 0; it < 4; it++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80013d6:	e02a      	b.n	800142e <motorTraduction+0x72>
		motors[it].pid.kp = p;  // Gain proportionnel
 80013d8:	496c      	ldr	r1, [pc, #432]	@ (800158c <motorTraduction+0x1d0>)
 80013da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	330c      	adds	r3, #12
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]
		motors[it].pid.ki = i;  // Gain intégral
 80013ec:	4967      	ldr	r1, [pc, #412]	@ (800158c <motorTraduction+0x1d0>)
 80013ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3310      	adds	r3, #16
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	601a      	str	r2, [r3, #0]
		motors[it].pid.kd = d;// Gain dérivé
 8001400:	4962      	ldr	r1, [pc, #392]	@ (800158c <motorTraduction+0x1d0>)
 8001402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3314      	adds	r3, #20
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]
		motors[it].pid.max_integral = 50.0f;  // Réinitialisation de l'intégrale
 8001414:	495d      	ldr	r1, [pc, #372]	@ (800158c <motorTraduction+0x1d0>)
 8001416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3324      	adds	r3, #36	@ 0x24
 8001424:	4a5a      	ldr	r2, [pc, #360]	@ (8001590 <motorTraduction+0x1d4>)
 8001426:	601a      	str	r2, [r3, #0]
	for(int it = 0; it < 4; it++) {
 8001428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800142a:	3301      	adds	r3, #1
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
 800142e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001430:	2b03      	cmp	r3, #3
 8001432:	ddd1      	ble.n	80013d8 <motorTraduction+0x1c>
	}

    // Centre les valeurs autour de 0 (50 = stop)
    int fwd = forward - 50;  // [-50 ; +50]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3b32      	subs	r3, #50	@ 0x32
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
    int turn = spine - 50;   // [-50 ; +50]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	3b32      	subs	r3, #50	@ 0x32
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Gains (peuvent être ajustés pour modifier réactivité)
    float Kf = 2.0f;  // Avancer/Reculer
 8001440:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
    float Kt = 2.0f;  // Rotation
 8001446:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calcule les composantes
    int speed_forward = (int)(Kf * fwd);   // [-100 ; +100]
 800144c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001456:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001462:	ee17 3a90 	vmov	r3, s15
 8001466:	623b      	str	r3, [r7, #32]
    int speed_turn    = (int)(Kt * turn);  // [-100 ; +100]
 8001468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001472:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 3a90 	vmov	r3, s15
 8001482:	61fb      	str	r3, [r7, #28]

    // Applique la logique différentielle pour chaque moteur
    motors[0].setpoint = speed_forward - speed_turn;
 8001484:	6a3a      	ldr	r2, [r7, #32]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	4b3e      	ldr	r3, [pc, #248]	@ (800158c <motorTraduction+0x1d0>)
 8001494:	edc3 7a00 	vstr	s15, [r3]
    motors[1].setpoint = speed_forward + speed_turn;
 8001498:	6a3a      	ldr	r2, [r7, #32]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	4413      	add	r3, r2
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a6:	4b39      	ldr	r3, [pc, #228]	@ (800158c <motorTraduction+0x1d0>)
 80014a8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    motors[2].setpoint = speed_forward - speed_turn;
 80014ac:	6a3a      	ldr	r2, [r7, #32]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ba:	4b34      	ldr	r3, [pc, #208]	@ (800158c <motorTraduction+0x1d0>)
 80014bc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
    motors[3].setpoint = speed_forward + speed_turn;
 80014c0:	6a3a      	ldr	r2, [r7, #32]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	4b2f      	ldr	r3, [pc, #188]	@ (800158c <motorTraduction+0x1d0>)
 80014d0:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
//    setMotor(1, compute_pid(&motors[0].pid, map_power_to_speed(motors[0].setpoint), motors[0].measured_speed, 1.0f));
//    setMotor(2, compute_pid(&motors[1].pid, map_power_to_speed(motors[1].setpoint), motors[1].measured_speed, 1.0f));
//    setMotor(3, compute_pid(&motors[2].pid, map_power_to_speed(motors[2].setpoint), motors[2].measured_speed, 1.0f));
//    setMotor(4, compute_pid(&motors[3].pid, map_power_to_speed(motors[3].setpoint), motors[3].measured_speed, 1.0f))

    setMotor(1, compute_pid(&motors[0].pid, motors[0].setpoint, motors[0].measured_speed, 1.0f));
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <motorTraduction+0x1d0>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <motorTraduction+0x1d0>)
 80014dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80014e0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80014e4:	eef0 0a47 	vmov.f32	s1, s14
 80014e8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ec:	4829      	ldr	r0, [pc, #164]	@ (8001594 <motorTraduction+0x1d8>)
 80014ee:	f7ff fecb 	bl	8001288 <compute_pid>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4619      	mov	r1, r3
 80014f6:	2001      	movs	r0, #1
 80014f8:	f000 f856 	bl	80015a8 <setMotor>
    setMotor(2, compute_pid(&motors[1].pid, motors[1].setpoint, motors[1].measured_speed, 1.0f));
 80014fc:	4b23      	ldr	r3, [pc, #140]	@ (800158c <motorTraduction+0x1d0>)
 80014fe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001502:	4b22      	ldr	r3, [pc, #136]	@ (800158c <motorTraduction+0x1d0>)
 8001504:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001508:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800150c:	eef0 0a47 	vmov.f32	s1, s14
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	4820      	ldr	r0, [pc, #128]	@ (8001598 <motorTraduction+0x1dc>)
 8001516:	f7ff feb7 	bl	8001288 <compute_pid>
 800151a:	4603      	mov	r3, r0
 800151c:	4619      	mov	r1, r3
 800151e:	2002      	movs	r0, #2
 8001520:	f000 f842 	bl	80015a8 <setMotor>
    setMotor(3, compute_pid(&motors[2].pid, motors[2].setpoint, motors[2].measured_speed, 1.0f));
 8001524:	4b19      	ldr	r3, [pc, #100]	@ (800158c <motorTraduction+0x1d0>)
 8001526:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <motorTraduction+0x1d0>)
 800152c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001530:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001534:	eef0 0a47 	vmov.f32	s1, s14
 8001538:	eeb0 0a67 	vmov.f32	s0, s15
 800153c:	4817      	ldr	r0, [pc, #92]	@ (800159c <motorTraduction+0x1e0>)
 800153e:	f7ff fea3 	bl	8001288 <compute_pid>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	2003      	movs	r0, #3
 8001548:	f000 f82e 	bl	80015a8 <setMotor>
    setMotor(4, compute_pid(&motors[3].pid, motors[3].setpoint, motors[3].measured_speed, 1.0f));
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <motorTraduction+0x1d0>)
 800154e:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <motorTraduction+0x1d0>)
 8001554:	ed93 7a1f 	vldr	s14, [r3, #124]	@ 0x7c
 8001558:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800155c:	eef0 0a47 	vmov.f32	s1, s14
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	480e      	ldr	r0, [pc, #56]	@ (80015a0 <motorTraduction+0x1e4>)
 8001566:	f7ff fe8f 	bl	8001288 <compute_pid>
 800156a:	4603      	mov	r3, r0
 800156c:	4619      	mov	r1, r3
 800156e:	2004      	movs	r0, #4
 8001570:	f000 f81a 	bl	80015a8 <setMotor>

	print_binary(pins[0].Pin);
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <motorTraduction+0x1e8>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fe5f 	bl	800123c <print_binary>
	GPIO_EXTENDER_ProcessCommand(&pins[0].Pin);
 800157e:	4809      	ldr	r0, [pc, #36]	@ (80015a4 <motorTraduction+0x1e8>)
 8001580:	f7ff fe3e 	bl	8001200 <GPIO_EXTENDER_ProcessCommand>
}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	@ 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000268 	.word	0x20000268
 8001590:	42480000 	.word	0x42480000
 8001594:	20000274 	.word	0x20000274
 8001598:	2000029c 	.word	0x2000029c
 800159c:	200002c4 	.word	0x200002c4
 80015a0:	200002ec 	.word	0x200002ec
 80015a4:	20000308 	.word	0x20000308

080015a8 <setMotor>:

void setMotor(int id, int vitesse) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	switch (id) {
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d856      	bhi.n	8001668 <setMotor+0xc0>
 80015ba:	a201      	add	r2, pc, #4	@ (adr r2, 80015c0 <setMotor+0x18>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015d1 	.word	0x080015d1
 80015c4:	080015f7 	.word	0x080015f7
 80015c8:	0800161d 	.word	0x0800161d
 80015cc:	08001643 	.word	0x08001643
	case 1:
		setDirection(id,vitesse);
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f854 	bl	8001680 <setDirection>
		Set_PWM_DutyCycle(&htim2, TIM_CHANNEL_1, abs(vitesse));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfb8      	it	lt
 80015de:	425b      	neglt	r3, r3
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ec:	2100      	movs	r1, #0
 80015ee:	4822      	ldr	r0, [pc, #136]	@ (8001678 <setMotor+0xd0>)
 80015f0:	f000 f892 	bl	8001718 <Set_PWM_DutyCycle>
		break;
 80015f4:	e03c      	b.n	8001670 <setMotor+0xc8>
	case 2:
		setDirection(id,vitesse);
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f841 	bl	8001680 <setDirection>
		Set_PWM_DutyCycle(&htim2, TIM_CHANNEL_2, abs(vitesse));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	bfb8      	it	lt
 8001604:	425b      	neglt	r3, r3
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	2104      	movs	r1, #4
 8001614:	4818      	ldr	r0, [pc, #96]	@ (8001678 <setMotor+0xd0>)
 8001616:	f000 f87f 	bl	8001718 <Set_PWM_DutyCycle>
		break;
 800161a:	e029      	b.n	8001670 <setMotor+0xc8>
	case 3:
		setDirection(id,vitesse);
 800161c:	6839      	ldr	r1, [r7, #0]
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f82e 	bl	8001680 <setDirection>
		Set_PWM_DutyCycle(&htim2, TIM_CHANNEL_3, abs(vitesse));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bfb8      	it	lt
 800162a:	425b      	neglt	r3, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	2108      	movs	r1, #8
 800163a:	480f      	ldr	r0, [pc, #60]	@ (8001678 <setMotor+0xd0>)
 800163c:	f000 f86c 	bl	8001718 <Set_PWM_DutyCycle>
		break;
 8001640:	e016      	b.n	8001670 <setMotor+0xc8>
	case 4:
		setDirection(id,vitesse);
 8001642:	6839      	ldr	r1, [r7, #0]
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f81b 	bl	8001680 <setDirection>
		Set_PWM_DutyCycle(&htim2, TIM_CHANNEL_4, abs(vitesse));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	bfb8      	it	lt
 8001650:	425b      	neglt	r3, r3
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	210c      	movs	r1, #12
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <setMotor+0xd0>)
 8001662:	f000 f859 	bl	8001718 <Set_PWM_DutyCycle>
		break;
 8001666:	e003      	b.n	8001670 <setMotor+0xc8>
	default:
		printf("Erreur : ID de moteur invalide\n");
 8001668:	4804      	ldr	r0, [pc, #16]	@ (800167c <setMotor+0xd4>)
 800166a:	f010 fc1d 	bl	8011ea8 <puts>
		return;
 800166e:	bf00      	nop
	}
//	printf("Moteur %d regle a la vitesse %d\n", id, vitesse);
}
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000063c 	.word	0x2000063c
 800167c:	08014aa0 	.word	0x08014aa0

08001680 <setDirection>:

void setDirection(int id, int vitesse) {
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
    if (id < 1 || id > 4) return;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	dd3b      	ble.n	8001708 <setDirection+0x88>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b04      	cmp	r3, #4
 8001694:	dc38      	bgt.n	8001708 <setDirection+0x88>

    // Calcul de l'offset dans l'octet (0 pour M1, 2 pour M2, etc.)
    uint8_t shift = (id - 1) * 2;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3b01      	subs	r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]

    uint8_t last = pins[0].Pin; // Sauvegarde de l'état avant modification
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <setDirection+0x94>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	73bb      	strb	r3, [r7, #14]

    // Reset des deux bits correspondant au moteur (met à 00)
    pins[0].Pin &= ~(0b11 << shift);
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <setDirection+0x94>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2103      	movs	r1, #3
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	4013      	ands	r3, r2
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <setDirection+0x94>)
 80016c2:	701a      	strb	r2, [r3, #0]

    if (vitesse > 0) {
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dd0d      	ble.n	80016e6 <setDirection+0x66>
//    	printf("Avant 01 pour M%d\n",id);
        // Avant → 01
        pins[0].Pin |= (0b01 << shift);
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <setDirection+0x94>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <setDirection+0x94>)
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	e011      	b.n	800170a <setDirection+0x8a>
    } else if (vitesse < 0) {
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da0e      	bge.n	800170a <setDirection+0x8a>
//    	printf("Arrière 10 pour M%d\n",id);
        // Arrière → 10
        pins[0].Pin |= (0b10 << shift);
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <setDirection+0x94>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	2102      	movs	r1, #2
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <setDirection+0x94>)
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	e000      	b.n	800170a <setDirection+0x8a>
    if (id < 1 || id > 4) return;
 8001708:	bf00      	nop
//		GPIO_EXTENDER_ProcessCommand(&pins[0].Pin);
//	} else {
//		printf("Aucun changement de direction pour M%d, etat inchange : \n", id);
//	}

}
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	20000308 	.word	0x20000308

08001718 <Set_PWM_DutyCycle>:

void Set_PWM_DutyCycle(TIM_HandleTypeDef *htim, uint32_t channel, float dutyCycle) {
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t period = __HAL_TIM_GET_AUTORELOAD(htim);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172c:	617b      	str	r3, [r7, #20]
    uint32_t pulse = (uint32_t)((dutyCycle / 100.0f) * (float)(period));
 800172e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001732:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80017b8 <Set_PWM_DutyCycle+0xa0>
 8001736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174c:	ee17 3a90 	vmov	r3, s15
 8001750:	613b      	str	r3, [r7, #16]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <Set_PWM_DutyCycle+0x4a>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001760:	e023      	b.n	80017aa <Set_PWM_DutyCycle+0x92>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d104      	bne.n	8001772 <Set_PWM_DutyCycle+0x5a>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001770:	e01b      	b.n	80017aa <Set_PWM_DutyCycle+0x92>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b08      	cmp	r3, #8
 8001776:	d104      	bne.n	8001782 <Set_PWM_DutyCycle+0x6a>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001780:	e013      	b.n	80017aa <Set_PWM_DutyCycle+0x92>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d104      	bne.n	8001792 <Set_PWM_DutyCycle+0x7a>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001790:	e00b      	b.n	80017aa <Set_PWM_DutyCycle+0x92>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b10      	cmp	r3, #16
 8001796:	d104      	bne.n	80017a2 <Set_PWM_DutyCycle+0x8a>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80017a0:	e003      	b.n	80017aa <Set_PWM_DutyCycle+0x92>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	42c80000 	.word	0x42c80000

080017bc <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <case_insensitive_strcmp+0x16>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e056      	b.n	8001884 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d10d      	bne.n	80017fa <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	e050      	b.n	8001884 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <case_insensitive_strcmp+0x32>
        {
            return 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e04a      	b.n	8001884 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3301      	adds	r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	3301      	adds	r3, #1
 8001804:	4a22      	ldr	r2, [pc, #136]	@ (8001890 <case_insensitive_strcmp+0xd4>)
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d103      	bne.n	800181a <case_insensitive_strcmp+0x5e>
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	f103 0220 	add.w	r2, r3, #32
 8001818:	e000      	b.n	800181c <case_insensitive_strcmp+0x60>
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	73bb      	strb	r3, [r7, #14]
 8001822:	7bbb      	ldrb	r3, [r7, #14]
 8001824:	3301      	adds	r3, #1
 8001826:	491a      	ldr	r1, [pc, #104]	@ (8001890 <case_insensitive_strcmp+0xd4>)
 8001828:	440b      	add	r3, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d102      	bne.n	800183a <case_insensitive_strcmp+0x7e>
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	3320      	adds	r3, #32
 8001838:	e000      	b.n	800183c <case_insensitive_strcmp+0x80>
 800183a:	7bbb      	ldrb	r3, [r7, #14]
 800183c:	429a      	cmp	r2, r3
 800183e:	d0d0      	beq.n	80017e2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	737b      	strb	r3, [r7, #13]
 8001846:	7b7b      	ldrb	r3, [r7, #13]
 8001848:	3301      	adds	r3, #1
 800184a:	4a11      	ldr	r2, [pc, #68]	@ (8001890 <case_insensitive_strcmp+0xd4>)
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b01      	cmp	r3, #1
 8001856:	d103      	bne.n	8001860 <case_insensitive_strcmp+0xa4>
 8001858:	7b7b      	ldrb	r3, [r7, #13]
 800185a:	f103 0220 	add.w	r2, r3, #32
 800185e:	e000      	b.n	8001862 <case_insensitive_strcmp+0xa6>
 8001860:	7b7a      	ldrb	r2, [r7, #13]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	733b      	strb	r3, [r7, #12]
 8001868:	7b3b      	ldrb	r3, [r7, #12]
 800186a:	3301      	adds	r3, #1
 800186c:	4908      	ldr	r1, [pc, #32]	@ (8001890 <case_insensitive_strcmp+0xd4>)
 800186e:	440b      	add	r3, r1
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <case_insensitive_strcmp+0xc4>
 800187a:	7b3b      	ldrb	r3, [r7, #12]
 800187c:	3320      	adds	r3, #32
 800187e:	e000      	b.n	8001882 <case_insensitive_strcmp+0xc6>
 8001880:	7b3b      	ldrb	r3, [r7, #12]
 8001882:	1ad3      	subs	r3, r2, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	08015060 	.word	0x08015060

08001894 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2028      	movs	r0, #40	@ 0x28
 80018a2:	4798      	blx	r3
 80018a4:	60f8      	str	r0, [r7, #12]
    if (node)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80018ac:	2228      	movs	r2, #40	@ 0x28
 80018ae:	2100      	movs	r1, #0
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f010 fbf9 	bl	80120a8 <memset>
    }

    return node;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80018cc:	e037      	b.n	800193e <cJSON_Delete+0x7e>
    {
        next = item->next;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d108      	bne.n	80018f2 <cJSON_Delete+0x32>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ffe7 	bl	80018c0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <cJSON_Delete+0x52>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <cJSON_Delete+0x90>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6912      	ldr	r2, [r2, #16]
 800190e:	4610      	mov	r0, r2
 8001910:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <cJSON_Delete+0x72>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001926:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <cJSON_Delete+0x90>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6a12      	ldr	r2, [r2, #32]
 800192e:	4610      	mov	r0, r2
 8001930:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <cJSON_Delete+0x90>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
        item = next;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1c4      	bne.n	80018ce <cJSON_Delete+0xe>
    }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000008 	.word	0x20000008

08001954 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001958:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	0000      	movs	r0, r0
	...

08001968 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b098      	sub	sp, #96	@ 0x60
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800197e:	2300      	movs	r3, #0
 8001980:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001982:	f7ff ffe7 	bl	8001954 <get_decimal_point>
 8001986:	4603      	mov	r3, r0
 8001988:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <parse_number+0x36>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <parse_number+0x3a>
    {
        return false;
 800199e:	2300      	movs	r3, #0
 80019a0:	e0a0      	b.n	8001ae4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019a6:	e03d      	b.n	8001a24 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6899      	ldr	r1, [r3, #8]
 80019b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019b2:	440b      	add	r3, r1
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b45      	cmp	r3, #69	@ 0x45
 80019ba:	dc17      	bgt.n	80019ec <parse_number+0x84>
 80019bc:	2b2b      	cmp	r3, #43	@ 0x2b
 80019be:	db40      	blt.n	8001a42 <parse_number+0xda>
 80019c0:	3b2b      	subs	r3, #43	@ 0x2b
 80019c2:	2201      	movs	r2, #1
 80019c4:	409a      	lsls	r2, r3
 80019c6:	4b4c      	ldr	r3, [pc, #304]	@ (8001af8 <parse_number+0x190>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10b      	bne.n	80019f0 <parse_number+0x88>
 80019d8:	f002 0308 	and.w	r3, r2, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d111      	bne.n	8001a0e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80019ea:	e02a      	b.n	8001a42 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80019ec:	2b65      	cmp	r3, #101	@ 0x65
 80019ee:	d128      	bne.n	8001a42 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6899      	ldr	r1, [r3, #8]
 80019f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019fa:	440b      	add	r3, r1
 80019fc:	4413      	add	r3, r2
 80019fe:	7819      	ldrb	r1, [r3, #0]
 8001a00:	f107 0208 	add.w	r2, r7, #8
 8001a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a06:	4413      	add	r3, r2
 8001a08:	460a      	mov	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
                break;
 8001a0c:	e007      	b.n	8001a1e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001a0e:	f107 0208 	add.w	r2, r7, #8
 8001a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a14:	4413      	add	r3, r2
 8001a16:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001a1a:	701a      	strb	r2, [r3, #0]
                break;
 8001a1c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a20:	3301      	adds	r3, #1
 8001a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a26:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a28:	d80d      	bhi.n	8001a46 <parse_number+0xde>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00a      	beq.n	8001a46 <parse_number+0xde>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a36:	441a      	add	r2, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d3b3      	bcc.n	80019a8 <parse_number+0x40>
        }
    }
loop_end:
 8001a40:	e001      	b.n	8001a46 <parse_number+0xde>
                goto loop_end;
 8001a42:	bf00      	nop
 8001a44:	e000      	b.n	8001a48 <parse_number+0xe0>
loop_end:
 8001a46:	bf00      	nop
    number_c_string[i] = '\0';
 8001a48:	f107 0208 	add.w	r2, r7, #8
 8001a4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a4e:	4413      	add	r3, r2
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001a54:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00f fa78 	bl	8010f54 <strtod>
 8001a64:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001a68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d101      	bne.n	8001a76 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001a72:	2300      	movs	r3, #0
 8001a74:	e036      	b.n	8001ae4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001a7c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001a80:	a31b      	add	r3, pc, #108	@ (adr r3, 8001af0 <parse_number+0x188>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a8a:	f7ff f823 	bl	8000ad4 <__aeabi_dcmpge>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a9a:	615a      	str	r2, [r3, #20]
 8001a9c:	e015      	b.n	8001aca <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <parse_number+0x194>)
 8001aa4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001aa8:	f7ff f80a 	bl	8000ac0 <__aeabi_dcmple>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ab8:	615a      	str	r2, [r3, #20]
 8001aba:	e006      	b.n	8001aca <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001abc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001ac0:	f7ff f832 	bl	8000b28 <__aeabi_d2iz>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2208      	movs	r2, #8
 8001ace:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001ad6:	f107 0208 	add.w	r2, r7, #8
 8001ada:	1a8a      	subs	r2, r1, r2
 8001adc:	441a      	add	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	609a      	str	r2, [r3, #8]
    return true;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3760      	adds	r7, #96	@ 0x60
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	f3af 8000 	nop.w
 8001af0:	ffc00000 	.word	0xffc00000
 8001af4:	41dfffff 	.word	0x41dfffff
 8001af8:	04007fe5 	.word	0x04007fe5
 8001afc:	c1e00000 	.word	0xc1e00000

08001b00 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	e04c      	b.n	8001bb0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b20:	d90f      	bls.n	8001b42 <parse_hex4+0x42>
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b39      	cmp	r3, #57	@ 0x39
 8001b2c:	d809      	bhi.n	8001b42 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b30      	subs	r3, #48	@ 0x30
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	e02d      	b.n	8001b9e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b40      	cmp	r3, #64	@ 0x40
 8001b4c:	d90f      	bls.n	8001b6e <parse_hex4+0x6e>
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b46      	cmp	r3, #70	@ 0x46
 8001b58:	d809      	bhi.n	8001b6e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	3b37      	subs	r3, #55	@ 0x37
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	e017      	b.n	8001b9e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4413      	add	r3, r2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b60      	cmp	r3, #96	@ 0x60
 8001b78:	d90f      	bls.n	8001b9a <parse_hex4+0x9a>
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4413      	add	r3, r2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b66      	cmp	r3, #102	@ 0x66
 8001b84:	d809      	bhi.n	8001b9a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	3b57      	subs	r3, #87	@ 0x57
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e001      	b.n	8001b9e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e00c      	b.n	8001bb8 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d802      	bhi.n	8001baa <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3301      	adds	r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d9af      	bls.n	8001b16 <parse_hex4+0x16>
        }
    }

    return h;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	f340 80b7 	ble.w	8001d6e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	3302      	adds	r3, #2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff7b 	bl	8001b00 <parse_hex4>
 8001c0a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001c12:	d304      	bcc.n	8001c1e <utf16_literal_to_utf8+0x5a>
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001c1a:	f0c0 80aa 	bcc.w	8001d72 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8001c24:	d337      	bcc.n	8001c96 <utf16_literal_to_utf8+0xd2>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001c2c:	d233      	bcs.n	8001c96 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	3306      	adds	r3, #6
 8001c32:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001c38:	230c      	movs	r3, #12
 8001c3a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	f340 8096 	ble.w	8001d76 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001c50:	f040 8093 	bne.w	8001d7a <utf16_literal_to_utf8+0x1b6>
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b75      	cmp	r3, #117	@ 0x75
 8001c5c:	f040 808d 	bne.w	8001d7a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3302      	adds	r3, #2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff4b 	bl	8001b00 <parse_hex4>
 8001c6a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001c72:	f0c0 8084 	bcc.w	8001d7e <utf16_literal_to_utf8+0x1ba>
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001c7c:	d27f      	bcs.n	8001d7e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	029a      	lsls	r2, r3, #10
 8001c82:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <utf16_literal_to_utf8+0x1cc>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001c94:	e004      	b.n	8001ca0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001c96:	2306      	movs	r3, #6
 8001c98:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ca4:	d803      	bhi.n	8001cae <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001cac:	e01f      	b.n	8001cee <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cb4:	d206      	bcs.n	8001cc4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001cbc:	23c0      	movs	r3, #192	@ 0xc0
 8001cbe:	f887 3020 	strb.w	r3, [r7, #32]
 8001cc2:	e014      	b.n	8001cee <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cca:	d206      	bcs.n	8001cda <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001cd2:	23e0      	movs	r3, #224	@ 0xe0
 8001cd4:	f887 3020 	strb.w	r3, [r7, #32]
 8001cd8:	e009      	b.n	8001cee <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001ce0:	d24f      	bcs.n	8001d82 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001ce8:	23f0      	movs	r3, #240	@ 0xf0
 8001cea:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001cee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001cf8:	e015      	b.n	8001d26 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6819      	ldr	r1, [r3, #0]
 8001d08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d0c:	440b      	add	r3, r1
 8001d0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d20:	3b01      	subs	r3, #1
 8001d22:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001d26:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e5      	bne.n	8001cfa <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d909      	bls.n	8001d4a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	b2d9      	uxtb	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e007      	b.n	8001d5a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d62:	441a      	add	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001d68:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d6c:	e00b      	b.n	8001d86 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001d6e:	bf00      	nop
 8001d70:	e008      	b.n	8001d84 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001d72:	bf00      	nop
 8001d74:	e006      	b.n	8001d84 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001d76:	bf00      	nop
 8001d78:	e004      	b.n	8001d84 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001d7a:	bf00      	nop
 8001d7c:	e002      	b.n	8001d84 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001d7e:	bf00      	nop
 8001d80:	e000      	b.n	8001d84 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001d82:	bf00      	nop

fail:
    return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3728      	adds	r7, #40	@ 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	000ffc00 	.word	0x000ffc00

08001d94 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	3301      	adds	r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	3301      	adds	r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b22      	cmp	r3, #34	@ 0x22
 8001dd0:	f040 8103 	bne.w	8001fda <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001ddc:	e017      	b.n	8001e0e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b5c      	cmp	r3, #92	@ 0x5c
 8001de4:	d110      	bne.n	8001e08 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	f080 80f1 	bcs.w	8001fde <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	3301      	adds	r3, #1
 8001e06:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a3a      	ldr	r2, [r7, #32]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d203      	bcs.n	8001e28 <parse_string+0x94>
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b22      	cmp	r3, #34	@ 0x22
 8001e26:	d1da      	bne.n	8001dde <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a3a      	ldr	r2, [r7, #32]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	f080 80d3 	bcs.w	8001fe2 <parse_string+0x24e>
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b22      	cmp	r3, #34	@ 0x22
 8001e42:	f040 80ce 	bne.w	8001fe2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4413      	add	r3, r2
 8001e50:	6a3a      	ldr	r2, [r7, #32]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	3201      	adds	r2, #1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4798      	blx	r3
 8001e68:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80ba 	beq.w	8001fe6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001e76:	e094      	b.n	8001fa2 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001e7e:	d008      	beq.n	8001e92 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e82:	1c53      	adds	r3, r2, #1
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1c59      	adds	r1, r3, #1
 8001e8a:	60f9      	str	r1, [r7, #12]
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	e087      	b.n	8001fa2 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001e92:	2302      	movs	r3, #2
 8001e94:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001e96:	6a3a      	ldr	r2, [r7, #32]
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f340 80a4 	ble.w	8001fea <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b75      	cmp	r3, #117	@ 0x75
 8001eaa:	f300 80a0 	bgt.w	8001fee <parse_string+0x25a>
 8001eae:	2b5c      	cmp	r3, #92	@ 0x5c
 8001eb0:	da04      	bge.n	8001ebc <parse_string+0x128>
 8001eb2:	2b22      	cmp	r3, #34	@ 0x22
 8001eb4:	d05c      	beq.n	8001f70 <parse_string+0x1dc>
 8001eb6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001eb8:	d05a      	beq.n	8001f70 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001eba:	e098      	b.n	8001fee <parse_string+0x25a>
            switch (input_pointer[1])
 8001ebc:	3b5c      	subs	r3, #92	@ 0x5c
 8001ebe:	2b19      	cmp	r3, #25
 8001ec0:	f200 8095 	bhi.w	8001fee <parse_string+0x25a>
 8001ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ecc <parse_string+0x138>)
 8001ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eca:	bf00      	nop
 8001ecc:	08001f71 	.word	0x08001f71
 8001ed0:	08001fef 	.word	0x08001fef
 8001ed4:	08001fef 	.word	0x08001fef
 8001ed8:	08001fef 	.word	0x08001fef
 8001edc:	08001fef 	.word	0x08001fef
 8001ee0:	08001fef 	.word	0x08001fef
 8001ee4:	08001f35 	.word	0x08001f35
 8001ee8:	08001fef 	.word	0x08001fef
 8001eec:	08001fef 	.word	0x08001fef
 8001ef0:	08001fef 	.word	0x08001fef
 8001ef4:	08001f41 	.word	0x08001f41
 8001ef8:	08001fef 	.word	0x08001fef
 8001efc:	08001fef 	.word	0x08001fef
 8001f00:	08001fef 	.word	0x08001fef
 8001f04:	08001fef 	.word	0x08001fef
 8001f08:	08001fef 	.word	0x08001fef
 8001f0c:	08001fef 	.word	0x08001fef
 8001f10:	08001fef 	.word	0x08001fef
 8001f14:	08001f4d 	.word	0x08001f4d
 8001f18:	08001fef 	.word	0x08001fef
 8001f1c:	08001fef 	.word	0x08001fef
 8001f20:	08001fef 	.word	0x08001fef
 8001f24:	08001f59 	.word	0x08001f59
 8001f28:	08001fef 	.word	0x08001fef
 8001f2c:	08001f65 	.word	0x08001f65
 8001f30:	08001f81 	.word	0x08001f81
                    *output_pointer++ = '\b';
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	60fa      	str	r2, [r7, #12]
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	701a      	strb	r2, [r3, #0]
                    break;
 8001f3e:	e02c      	b.n	8001f9a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60fa      	str	r2, [r7, #12]
 8001f46:	220c      	movs	r2, #12
 8001f48:	701a      	strb	r2, [r3, #0]
                    break;
 8001f4a:	e026      	b.n	8001f9a <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60fa      	str	r2, [r7, #12]
 8001f52:	220a      	movs	r2, #10
 8001f54:	701a      	strb	r2, [r3, #0]
                    break;
 8001f56:	e020      	b.n	8001f9a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	60fa      	str	r2, [r7, #12]
 8001f5e:	220d      	movs	r2, #13
 8001f60:	701a      	strb	r2, [r3, #0]
                    break;
 8001f62:	e01a      	b.n	8001f9a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	60fa      	str	r2, [r7, #12]
 8001f6a:	2209      	movs	r2, #9
 8001f6c:	701a      	strb	r2, [r3, #0]
                    break;
 8001f6e:	e014      	b.n	8001f9a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	60f9      	str	r1, [r7, #12]
 8001f7a:	7812      	ldrb	r2, [r2, #0]
 8001f7c:	701a      	strb	r2, [r3, #0]
                    break;
 8001f7e:	e00c      	b.n	8001f9a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	461a      	mov	r2, r3
 8001f86:	6a39      	ldr	r1, [r7, #32]
 8001f88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f8a:	f7ff fe1b 	bl	8001bc4 <utf16_literal_to_utf8>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d02c      	beq.n	8001ff2 <parse_string+0x25e>
                    break;
 8001f98:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
 8001f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f9e:	4413      	add	r3, r2
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	f4ff af66 	bcc.w	8001e78 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6a3a      	ldr	r2, [r7, #32]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	609a      	str	r2, [r3, #8]

    return true;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e01e      	b.n	8002018 <parse_string+0x284>
        goto fail;
 8001fda:	bf00      	nop
 8001fdc:	e00a      	b.n	8001ff4 <parse_string+0x260>
                    goto fail;
 8001fde:	bf00      	nop
 8001fe0:	e008      	b.n	8001ff4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001fe2:	bf00      	nop
 8001fe4:	e006      	b.n	8001ff4 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001fe6:	bf00      	nop
 8001fe8:	e004      	b.n	8001ff4 <parse_string+0x260>
                goto fail;
 8001fea:	bf00      	nop
 8001fec:	e002      	b.n	8001ff4 <parse_string+0x260>
                    goto fail;
 8001fee:	bf00      	nop
 8001ff0:	e000      	b.n	8001ff4 <parse_string+0x260>
                        goto fail;
 8001ff2:	bf00      	nop

fail:
    if (output != NULL)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	69f8      	ldr	r0, [r7, #28]
 8002000:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	461a      	mov	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	609a      	str	r2, [r3, #8]
    }

    return false;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <buffer_skip_whitespace+0x16>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8002036:	2300      	movs	r3, #0
 8002038:	e02c      	b.n	8002094 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <buffer_skip_whitespace+0x2c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d306      	bcc.n	800205a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	e021      	b.n	8002094 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00d      	beq.n	800207c <buffer_skip_whitespace+0x5c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <buffer_skip_whitespace+0x5c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b20      	cmp	r3, #32
 800207a:	d9e9      	bls.n	8002050 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d104      	bne.n	8002092 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002092:	687b      	ldr	r3, [r7, #4]
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <skip_utf8_bom+0x1e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <skip_utf8_bom+0x1e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <skip_utf8_bom+0x22>
    {
        return NULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	e01c      	b.n	80020fc <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d018      	beq.n	80020fa <skip_utf8_bom+0x5a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	1d1a      	adds	r2, r3, #4
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d211      	bcs.n	80020fa <skip_utf8_bom+0x5a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4413      	add	r3, r2
 80020e0:	2203      	movs	r2, #3
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <skip_utf8_bom+0x64>)
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00f ffe7 	bl	80120b8 <strncmp>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d104      	bne.n	80020fa <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	1cda      	adds	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80020fa:	687b      	ldr	r3, [r7, #4]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	08014af4 	.word	0x08014af4

08002108 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	e00c      	b.n	8002138 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7fe f88e 	bl	8000240 <strlen>
 8002124:	4603      	mov	r3, r0
 8002126:	3301      	adds	r3, #1
 8002128:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	6979      	ldr	r1, [r7, #20]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f805 	bl	8002140 <cJSON_ParseWithLengthOpts>
 8002136:	4603      	mov	r3, r0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	@ 0x38
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800214e:	f107 0318 	add.w	r3, r7, #24
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	615a      	str	r2, [r3, #20]
 8002160:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8002162:	2300      	movs	r3, #0
 8002164:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8002166:	4b41      	ldr	r3, [pc, #260]	@ (800226c <cJSON_ParseWithLengthOpts+0x12c>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800216c:	4b3f      	ldr	r3, [pc, #252]	@ (800226c <cJSON_ParseWithLengthOpts+0x12c>)
 800216e:	2200      	movs	r2, #0
 8002170:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d042      	beq.n	80021fe <cJSON_ParseWithLengthOpts+0xbe>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d03f      	beq.n	80021fe <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800218a:	4a39      	ldr	r2, [pc, #228]	@ (8002270 <cJSON_ParseWithLengthOpts+0x130>)
 800218c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002190:	ca07      	ldmia	r2, {r0, r1, r2}
 8002192:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8002196:	4836      	ldr	r0, [pc, #216]	@ (8002270 <cJSON_ParseWithLengthOpts+0x130>)
 8002198:	f7ff fb7c 	bl	8001894 <cJSON_New_Item>
 800219c:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800219e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d02e      	beq.n	8002202 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80021a4:	f107 0318 	add.w	r3, r7, #24
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff79 	bl	80020a0 <skip_utf8_bom>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff35 	bl	8002020 <buffer_skip_whitespace>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4619      	mov	r1, r3
 80021ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021bc:	f000 f868 	bl	8002290 <parse_value>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01f      	beq.n	8002206 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80021cc:	f107 0318 	add.w	r3, r7, #24
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff25 	bl	8002020 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80021d6:	6a3a      	ldr	r2, [r7, #32]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d215      	bcs.n	800220a <cJSON_ParseWithLengthOpts+0xca>
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10f      	bne.n	800220a <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	441a      	add	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
    }

    return item;
 80021fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fc:	e031      	b.n	8002262 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80021fe:	bf00      	nop
 8002200:	e004      	b.n	800220c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002202:	bf00      	nop
 8002204:	e002      	b.n	800220c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002206:	bf00      	nop
 8002208:	e000      	b.n	800220c <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800220a:	bf00      	nop

fail:
    if (item != NULL)
 800220c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002212:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002214:	f7ff fb54 	bl	80018c0 <cJSON_Delete>
    }

    if (value != NULL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d020      	beq.n	8002260 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8002226:	6a3a      	ldr	r2, [r7, #32]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	429a      	cmp	r2, r3
 800222c:	d202      	bcs.n	8002234 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e005      	b.n	8002240 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b01      	subs	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	441a      	add	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <cJSON_ParseWithLengthOpts+0x12c>)
 8002252:	461a      	mov	r2, r3
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	e893 0003 	ldmia.w	r3, {r0, r1}
 800225c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3738      	adds	r7, #56	@ 0x38
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000030c 	.word	0x2000030c
 8002270:	20000008 	.word	0x20000008

08002274 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff41 	bl	8002108 <cJSON_ParseWithOpts>
 8002286:	4603      	mov	r3, r0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <parse_value+0x18>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <parse_value+0x1c>
    {
        return false; /* no input */
 80022a8:	2300      	movs	r3, #0
 80022aa:	e0d2      	b.n	8002452 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01d      	beq.n	80022ee <parse_value+0x5e>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	1d1a      	adds	r2, r3, #4
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d816      	bhi.n	80022ee <parse_value+0x5e>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4413      	add	r3, r2
 80022ca:	2204      	movs	r2, #4
 80022cc:	4963      	ldr	r1, [pc, #396]	@ (800245c <parse_value+0x1cc>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00f fef2 	bl	80120b8 <strncmp>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2204      	movs	r2, #4
 80022de:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	1d1a      	adds	r2, r3, #4
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	609a      	str	r2, [r3, #8]
        return true;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0b1      	b.n	8002452 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01d      	beq.n	8002330 <parse_value+0xa0>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	1d5a      	adds	r2, r3, #5
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d816      	bhi.n	8002330 <parse_value+0xa0>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4413      	add	r3, r2
 800230c:	2205      	movs	r2, #5
 800230e:	4954      	ldr	r1, [pc, #336]	@ (8002460 <parse_value+0x1d0>)
 8002310:	4618      	mov	r0, r3
 8002312:	f00f fed1 	bl	80120b8 <strncmp>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	1d5a      	adds	r2, r3, #5
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	609a      	str	r2, [r3, #8]
        return true;
 800232c:	2301      	movs	r3, #1
 800232e:	e090      	b.n	8002452 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d020      	beq.n	8002378 <parse_value+0xe8>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d819      	bhi.n	8002378 <parse_value+0xe8>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4413      	add	r3, r2
 800234e:	2204      	movs	r2, #4
 8002350:	4944      	ldr	r1, [pc, #272]	@ (8002464 <parse_value+0x1d4>)
 8002352:	4618      	mov	r0, r3
 8002354:	f00f feb0 	bl	80120b8 <strncmp>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	1d1a      	adds	r2, r3, #4
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	609a      	str	r2, [r3, #8]
        return true;
 8002374:	2301      	movs	r3, #1
 8002376:	e06c      	b.n	8002452 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d013      	beq.n	80023a6 <parse_value+0x116>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	d20d      	bcs.n	80023a6 <parse_value+0x116>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4413      	add	r3, r2
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b22      	cmp	r3, #34	@ 0x22
 8002398:	d105      	bne.n	80023a6 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800239a:	6839      	ldr	r1, [r7, #0]
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff fcf9 	bl	8001d94 <parse_string>
 80023a2:	4603      	mov	r3, r0
 80023a4:	e055      	b.n	8002452 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <parse_value+0x164>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d21d      	bcs.n	80023f4 <parse_value+0x164>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4413      	add	r3, r2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b2d      	cmp	r3, #45	@ 0x2d
 80023c6:	d00f      	beq.n	80023e8 <parse_value+0x158>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4413      	add	r3, r2
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80023d6:	d90d      	bls.n	80023f4 <parse_value+0x164>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b39      	cmp	r3, #57	@ 0x39
 80023e6:	d805      	bhi.n	80023f4 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fabc 	bl	8001968 <parse_number>
 80023f0:	4603      	mov	r3, r0
 80023f2:	e02e      	b.n	8002452 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d013      	beq.n	8002422 <parse_value+0x192>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	d20d      	bcs.n	8002422 <parse_value+0x192>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b5b      	cmp	r3, #91	@ 0x5b
 8002414:	d105      	bne.n	8002422 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002416:	6839      	ldr	r1, [r7, #0]
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f825 	bl	8002468 <parse_array>
 800241e:	4603      	mov	r3, r0
 8002420:	e017      	b.n	8002452 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <parse_value+0x1c0>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	d20d      	bcs.n	8002450 <parse_value+0x1c0>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4413      	add	r3, r2
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b7b      	cmp	r3, #123	@ 0x7b
 8002442:	d105      	bne.n	8002450 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002444:	6839      	ldr	r1, [r7, #0]
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f8d2 	bl	80025f0 <parse_object>
 800244c:	4603      	mov	r3, r0
 800244e:	e000      	b.n	8002452 <parse_value+0x1c2>
    }

    return false;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	08014acc 	.word	0x08014acc
 8002460:	08014af8 	.word	0x08014af8
 8002464:	08014b00 	.word	0x08014b00

08002468 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002482:	d301      	bcc.n	8002488 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002484:	2300      	movs	r3, #0
 8002486:	e0af      	b.n	80025e8 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b5b      	cmp	r3, #91	@ 0x5b
 80024a0:	f040 8094 	bne.w	80025cc <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80024ae:	6838      	ldr	r0, [r7, #0]
 80024b0:	f7ff fdb6 	bl	8002020 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <parse_array+0x6e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d207      	bcs.n	80024d6 <parse_array+0x6e>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b5d      	cmp	r3, #93	@ 0x5d
 80024d4:	d061      	beq.n	800259a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <parse_array+0x80>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d305      	bcc.n	80024f4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	609a      	str	r2, [r3, #8]
        goto fail;
 80024f2:	e072      	b.n	80025da <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	3310      	adds	r3, #16
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f9c6 	bl	8001894 <cJSON_New_Item>
 8002508:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d05f      	beq.n	80025d0 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	e007      	b.n	8002530 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800253a:	6838      	ldr	r0, [r7, #0]
 800253c:	f7ff fd70 	bl	8002020 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	6938      	ldr	r0, [r7, #16]
 8002544:	f7ff fea4 	bl	8002290 <parse_value>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d042      	beq.n	80025d4 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800254e:	6838      	ldr	r0, [r7, #0]
 8002550:	f7ff fd66 	bl	8002020 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <parse_array+0x10e>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	d207      	bcs.n	8002576 <parse_array+0x10e>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4413      	add	r3, r2
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b2c      	cmp	r3, #44	@ 0x2c
 8002574:	d0c3      	beq.n	80024fe <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d02d      	beq.n	80025d8 <parse_array+0x170>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d227      	bcs.n	80025d8 <parse_array+0x170>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b5d      	cmp	r3, #93	@ 0x5d
 8002596:	d11f      	bne.n	80025d8 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002598:	e000      	b.n	800259c <parse_array+0x134>
        goto success;
 800259a:	bf00      	nop
    input_buffer->depth--;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	1e5a      	subs	r2, r3, #1
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <parse_array+0x14a>
        head->prev = current_item;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	60da      	str	r2, [r3, #12]
    item->child = head;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	609a      	str	r2, [r3, #8]

    return true;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e00d      	b.n	80025e8 <parse_array+0x180>
        goto fail;
 80025cc:	bf00      	nop
 80025ce:	e004      	b.n	80025da <parse_array+0x172>
            goto fail; /* allocation failure */
 80025d0:	bf00      	nop
 80025d2:	e002      	b.n	80025da <parse_array+0x172>
            goto fail; /* failed to parse value */
 80025d4:	bf00      	nop
 80025d6:	e000      	b.n	80025da <parse_array+0x172>
        goto fail; /* expected end of array */
 80025d8:	bf00      	nop

fail:
    if (head != NULL)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80025e0:	6978      	ldr	r0, [r7, #20]
 80025e2:	f7ff f96d 	bl	80018c0 <cJSON_Delete>
    }

    return false;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800260a:	d301      	bcc.n	8002610 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800260c:	2300      	movs	r3, #0
 800260e:	e0ea      	b.n	80027e6 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80d0 	beq.w	80027c2 <parse_object+0x1d2>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	f080 80c9 	bcs.w	80027c2 <parse_object+0x1d2>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4413      	add	r3, r2
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b7b      	cmp	r3, #123	@ 0x7b
 800263e:	f040 80c0 	bne.w	80027c2 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f7ff fce7 	bl	8002020 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00e      	beq.n	8002676 <parse_object+0x86>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	d208      	bcs.n	8002676 <parse_object+0x86>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4413      	add	r3, r2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b7d      	cmp	r3, #125	@ 0x7d
 8002672:	f000 808d 	beq.w	8002790 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <parse_object+0x98>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	d305      	bcc.n	8002694 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	609a      	str	r2, [r3, #8]
        goto fail;
 8002692:	e0a1      	b.n	80027d8 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	1e5a      	subs	r2, r3, #1
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	3310      	adds	r3, #16
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f8f6 	bl	8001894 <cJSON_New_Item>
 80026a8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 808a 	beq.w	80027c6 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e007      	b.n	80026d2 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80026dc:	6838      	ldr	r0, [r7, #0]
 80026de:	f7ff fc9f 	bl	8002020 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80026e2:	6839      	ldr	r1, [r7, #0]
 80026e4:	6938      	ldr	r0, [r7, #16]
 80026e6:	f7ff fb55 	bl	8001d94 <parse_string>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d06c      	beq.n	80027ca <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	f7ff fc95 	bl	8002020 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d061      	beq.n	80027ce <parse_object+0x1de>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	d25b      	bcs.n	80027ce <parse_object+0x1de>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	4413      	add	r3, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b3a      	cmp	r3, #58	@ 0x3a
 8002724:	d153      	bne.n	80027ce <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	f7ff fc75 	bl	8002020 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	6938      	ldr	r0, [r7, #16]
 800273a:	f7ff fda9 	bl	8002290 <parse_value>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d046      	beq.n	80027d2 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002744:	6838      	ldr	r0, [r7, #0]
 8002746:	f7ff fc6b 	bl	8002020 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <parse_object+0x17c>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <parse_object+0x17c>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4413      	add	r3, r2
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b2c      	cmp	r3, #44	@ 0x2c
 800276a:	d098      	beq.n	800269e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d031      	beq.n	80027d6 <parse_object+0x1e6>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d22b      	bcs.n	80027d6 <parse_object+0x1e6>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b7d      	cmp	r3, #125	@ 0x7d
 800278c:	d123      	bne.n	80027d6 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800278e:	e000      	b.n	8002792 <parse_object+0x1a2>
        goto success; /* empty object */
 8002790:	bf00      	nop
    input_buffer->depth--;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	1e5a      	subs	r2, r3, #1
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <parse_object+0x1b8>
        head->prev = current_item;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	60da      	str	r2, [r3, #12]
    item->child = head;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	609a      	str	r2, [r3, #8]
    return true;
 80027be:	2301      	movs	r3, #1
 80027c0:	e011      	b.n	80027e6 <parse_object+0x1f6>
        goto fail; /* not an object */
 80027c2:	bf00      	nop
 80027c4:	e008      	b.n	80027d8 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 80027c6:	bf00      	nop
 80027c8:	e006      	b.n	80027d8 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 80027ca:	bf00      	nop
 80027cc:	e004      	b.n	80027d8 <parse_object+0x1e8>
            goto fail; /* invalid object */
 80027ce:	bf00      	nop
 80027d0:	e002      	b.n	80027d8 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 80027d2:	bf00      	nop
 80027d4:	e000      	b.n	80027d8 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 80027d6:	bf00      	nop

fail:
    if (head != NULL)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff f86e 	bl	80018c0 <cJSON_Delete>
    }

    return false;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <get_object_item+0x1c>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <get_object_item+0x20>
    {
        return NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	e033      	b.n	8002876 <get_object_item+0x88>
    }

    current_element = object->child;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d017      	beq.n	800284a <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800281a:	e002      	b.n	8002822 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01c      	beq.n	8002862 <get_object_item+0x74>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d018      	beq.n	8002862 <get_object_item+0x74>
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4619      	mov	r1, r3
 8002836:	68b8      	ldr	r0, [r7, #8]
 8002838:	f7fd fca2 	bl	8000180 <strcmp>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ec      	bne.n	800281c <get_object_item+0x2e>
 8002842:	e00e      	b.n	8002862 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <get_object_item+0x74>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4619      	mov	r1, r3
 8002856:	68b8      	ldr	r0, [r7, #8]
 8002858:	f7fe ffb0 	bl	80017bc <case_insensitive_strcmp>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <get_object_item+0x82>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <get_object_item+0x86>
        return NULL;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <get_object_item+0x88>
    }

    return current_element;
 8002874:	697b      	ldr	r3, [r7, #20]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002888:	2200      	movs	r2, #0
 800288a:	6839      	ldr	r1, [r7, #0]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ffae 	bl	80027ee <get_object_item>
 8002892:	4603      	mov	r3, r0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <cJSON_IsNumber+0x12>
    {
        return false;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e007      	b.n	80028be <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80028d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80028da:	4905      	ldr	r1, [pc, #20]	@ (80028f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	58000800 	.word	0x58000800

080028f4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002900:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4313      	orrs	r3, r2
 800290a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002910:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002918:	68fb      	ldr	r3, [r7, #12]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002932:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8002936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002946:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002950:	68fb      	ldr	r3, [r7, #12]
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002962:	f002 fbd3 	bl	800510c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002966:	f002 fbd7 	bl	8005118 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800296a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800296e:	f7ff ffad 	bl	80028cc <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8002972:	f00c f979 	bl	800ec68 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8002976:	f000 f821 	bl	80029bc <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800297a:	f000 f8c1 	bl	8002b00 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800297e:	bf00      	nop
}
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8002984:	b5b0      	push	{r4, r5, r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800298a:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <APPD_EnableCPU2+0x34>)
 800298c:	1d3c      	adds	r4, r7, #4
 800298e:	461d      	mov	r5, r3
 8002990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002994:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002998:	c403      	stmia	r4!, {r0, r1}
 800299a:	8022      	strh	r2, [r4, #0]
 800299c:	3402      	adds	r4, #2
 800299e:	0c13      	lsrs	r3, r2, #16
 80029a0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80029a2:	f00c f8b9 	bl	800eb18 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	4618      	mov	r0, r3
 80029aa:	f00b fb4a 	bl	800e042 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80029ae:	bf00      	nop
}
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bdb0      	pop	{r4, r5, r7, pc}
 80029b6:	bf00      	nop
 80029b8:	08014b08 	.word	0x08014b08

080029bc <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e036      	b.n	8002a50 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80029e2:	7ffb      	ldrb	r3, [r7, #31]
 80029e4:	4a43      	ldr	r2, [pc, #268]	@ (8002af4 <APPD_SetCPU2GpioConfig+0x138>)
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	799b      	ldrb	r3, [r3, #6]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02c      	beq.n	8002a4a <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80029f0:	7ffb      	ldrb	r3, [r7, #31]
 80029f2:	4a40      	ldr	r2, [pc, #256]	@ (8002af4 <APPD_SetCPU2GpioConfig+0x138>)
 80029f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029f8:	4a3f      	ldr	r2, [pc, #252]	@ (8002af8 <APPD_SetCPU2GpioConfig+0x13c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d01b      	beq.n	8002a36 <APPD_SetCPU2GpioConfig+0x7a>
 80029fe:	4a3e      	ldr	r2, [pc, #248]	@ (8002af8 <APPD_SetCPU2GpioConfig+0x13c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d821      	bhi.n	8002a48 <APPD_SetCPU2GpioConfig+0x8c>
 8002a04:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a08:	d003      	beq.n	8002a12 <APPD_SetCPU2GpioConfig+0x56>
 8002a0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002afc <APPD_SetCPU2GpioConfig+0x140>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8002a10:	e01a      	b.n	8002a48 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8002a12:	7ffb      	ldrb	r3, [r7, #31]
 8002a14:	4a37      	ldr	r2, [pc, #220]	@ (8002af4 <APPD_SetCPU2GpioConfig+0x138>)
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	889a      	ldrh	r2, [r3, #4]
 8002a1c:	8bbb      	ldrh	r3, [r7, #28]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	83bb      	strh	r3, [r7, #28]
          break;
 8002a22:	e012      	b.n	8002a4a <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8002a24:	7ffb      	ldrb	r3, [r7, #31]
 8002a26:	4a33      	ldr	r2, [pc, #204]	@ (8002af4 <APPD_SetCPU2GpioConfig+0x138>)
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	889a      	ldrh	r2, [r3, #4]
 8002a2e:	8b7b      	ldrh	r3, [r7, #26]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	837b      	strh	r3, [r7, #26]
          break;
 8002a34:	e009      	b.n	8002a4a <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8002a36:	7ffb      	ldrb	r3, [r7, #31]
 8002a38:	4a2e      	ldr	r2, [pc, #184]	@ (8002af4 <APPD_SetCPU2GpioConfig+0x138>)
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	889a      	ldrh	r2, [r3, #4]
 8002a40:	8b3b      	ldrh	r3, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	833b      	strh	r3, [r7, #24]
          break;
 8002a46:	e000      	b.n	8002a4a <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8002a48:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8002a4a:	7ffb      	ldrb	r3, [r7, #31]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	7ffb      	ldrb	r3, [r7, #31]
 8002a52:	2b25      	cmp	r3, #37	@ 0x25
 8002a54:	d9c5      	bls.n	80029e2 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8002a62:	8bbb      	ldrh	r3, [r7, #28]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d014      	beq.n	8002a92 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8002a68:	8bbb      	ldrh	r3, [r7, #28]
 8002a6a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7ff ff41 	bl	80028f4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8002a72:	2001      	movs	r0, #1
 8002a74:	f7ff ff57 	bl	8002926 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a80:	f003 f8c0 	bl	8005c04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8002a84:	8bbb      	ldrh	r3, [r7, #28]
 8002a86:	2200      	movs	r2, #0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a8e:	f003 fb07 	bl	80060a0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8002a92:	8b7b      	ldrh	r3, [r7, #26]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8002a98:	8b7b      	ldrh	r3, [r7, #26]
 8002a9a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f7ff ff29 	bl	80028f4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8002aa2:	2002      	movs	r0, #2
 8002aa4:	f7ff ff3f 	bl	8002926 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4813      	ldr	r0, [pc, #76]	@ (8002afc <APPD_SetCPU2GpioConfig+0x140>)
 8002aae:	f003 f8a9 	bl	8005c04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8002ab2:	8b7b      	ldrh	r3, [r7, #26]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4810      	ldr	r0, [pc, #64]	@ (8002afc <APPD_SetCPU2GpioConfig+0x140>)
 8002aba:	f003 faf1 	bl	80060a0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8002abe:	8b3b      	ldrh	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8002ac4:	8b3b      	ldrh	r3, [r7, #24]
 8002ac6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac8:	2004      	movs	r0, #4
 8002aca:	f7ff ff13 	bl	80028f4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8002ace:	2004      	movs	r0, #4
 8002ad0:	f7ff ff29 	bl	8002926 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <APPD_SetCPU2GpioConfig+0x13c>)
 8002ada:	f003 f893 	bl	8005c04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8002ade:	8b3b      	ldrh	r3, [r7, #24]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4804      	ldr	r0, [pc, #16]	@ (8002af8 <APPD_SetCPU2GpioConfig+0x13c>)
 8002ae6:	f003 fadb 	bl	80060a0 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
}
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	08014dd8 	.word	0x08014dd8
 8002af8:	48000800 	.word	0x48000800
 8002afc:	48000400 	.word	0x48000400

08002b00 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8002b04:	bf00      	nop
}
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8002b12:	f001 fcb9 	bl	8004488 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8002b16:	bf00      	nop
}
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	460b      	mov	r3, r1
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8002b28:	897a      	ldrh	r2, [r7, #10]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68f9      	ldr	r1, [r7, #12]
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f001 f892 	bl	8003c58 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8002b34:	bf00      	nop
}
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8002b44:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <LL_C2_PWR_SetPowerMode+0x28>)
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4905      	ldr	r1, [pc, #20]	@ (8002b64 <LL_C2_PWR_SetPowerMode+0x28>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	58000400 	.word	0x58000400

08002b68 <LL_EXTI_EnableIT_32_63>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <LL_EXTI_EnableIT_32_63+0x24>)
 8002b72:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002b76:	4905      	ldr	r1, [pc, #20]	@ (8002b8c <LL_EXTI_EnableIT_32_63+0x24>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	58000800 	.word	0x58000800

08002b90 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002b9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002baa:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	cafecafe 	.word	0xcafecafe

08002bcc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002bde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <LL_DBGMCU_GetDeviceID+0x18>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e0042000 	.word	0xe0042000

08002c10 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <LL_DBGMCU_GetRevisionID+0x18>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	b29b      	uxth	r3, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e0042000 	.word	0xe0042000

08002c2c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	22ff      	movs	r2, #255	@ 0xff
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	22ca      	movs	r2, #202	@ 0xca
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2253      	movs	r2, #83	@ 0x53
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 0207 	bic.w	r2, r3, #7
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <MX_APPE_Config>:
static void RxCpltCallback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <MX_APPE_Config+0x18>)
 8002c92:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c96:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002c98:	f000 f828 	bl	8002cec <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8002c9c:	f000 f82d 	bl	8002cfa <Config_HSE>

  return;
 8002ca0:	bf00      	nop
}
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	58004000 	.word	0x58004000

08002ca8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8002cac:	f000 f839 	bl	8002d22 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002cb0:	f000 f852 	bl	8002d58 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002cb4:	4905      	ldr	r1, [pc, #20]	@ (8002ccc <MX_APPE_Init+0x24>)
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f000 fdb8 	bl	800382c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8002cbc:	f7ff fe4f 	bl	800295e <APPD_Init>
  RxUART_Init();
 8002cc0:	f000 f962 	bl	8002f88 <RxUART_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8002cc4:	f000 f856 	bl	8002d74 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8002cc8:	bf00      	nop
}
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000618 	.word	0x20000618

08002cd0 <Init_Smps>:

void Init_Smps(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8002cd4:	bf00      	nop
}
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <Init_Exti>:

void Init_Exti(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002ce2:	2050      	movs	r0, #80	@ 0x50
 8002ce4:	f7ff ff40 	bl	8002b68 <LL_EXTI_EnableIT_32_63>

  return;
 8002ce8:	bf00      	nop
}
 8002cea:	bd80      	pop	{r7, pc}

08002cec <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8002cf0:	bf00      	nop
}
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f00c f80b 	bl	800ed1c <OTP_Read>
 8002d06:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	799b      	ldrb	r3, [r3, #6]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff3c 	bl	8002b90 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
}
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <System_Init>:

static void System_Init(void)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	af00      	add	r7, sp, #0
  Init_Smps();
 8002d26:	f7ff ffd3 	bl	8002cd0 <Init_Smps>

  Init_Exti();
 8002d2a:	f7ff ffd8 	bl	8002cde <Init_Exti>

  Init_Rtc();
 8002d2e:	f000 f803 	bl	8002d38 <Init_Rtc>

  return;
 8002d32:	bf00      	nop
}
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <Init_Rtc>:

static void Init_Rtc(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002d3c:	4805      	ldr	r0, [pc, #20]	@ (8002d54 <Init_Rtc+0x1c>)
 8002d3e:	f7ff ff82 	bl	8002c46 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002d42:	2100      	movs	r1, #0
 8002d44:	4803      	ldr	r0, [pc, #12]	@ (8002d54 <Init_Rtc+0x1c>)
 8002d46:	f7ff ff8e 	bl	8002c66 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002d4a:	4802      	ldr	r0, [pc, #8]	@ (8002d54 <Init_Rtc+0x1c>)
 8002d4c:	f7ff ff6e 	bl	8002c2c <LL_RTC_EnableWriteProtection>

  return;
 8002d50:	bf00      	nop
}
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40002800 	.word	0x40002800

08002d58 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002d5c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002d60:	f7ff ff34 	bl	8002bcc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002d64:	f00c ff6a 	bl	800fc3c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002d68:	2004      	movs	r0, #4
 8002d6a:	f7ff fee7 	bl	8002b3c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002d6e:	bf00      	nop
}
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002d7a:	f00b fd17 	bl	800e7ac <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8002d7e:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <appe_Tl_Init+0x50>)
 8002d80:	2100      	movs	r1, #0
 8002d82:	2004      	movs	r0, #4
 8002d84:	f00d f898 	bl	800feb8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <appe_Tl_Init+0x54>)
 8002d8a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <appe_Tl_Init+0x58>)
 8002d8e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002d90:	463b      	mov	r3, r7
 8002d92:	4619      	mov	r1, r3
 8002d94:	480e      	ldr	r0, [pc, #56]	@ (8002dd0 <appe_Tl_Init+0x5c>)
 8002d96:	f00b fbcb 	bl	800e530 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <appe_Tl_Init+0x60>)
 8002d9c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <appe_Tl_Init+0x64>)
 8002da0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <appe_Tl_Init+0x68>)
 8002da4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8002da6:	f240 533c 	movw	r3, #1340	@ 0x53c
 8002daa:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002dac:	f107 0308 	add.w	r3, r7, #8
 8002db0:	4618      	mov	r0, r3
 8002db2:	f00b fe3d 	bl	800ea30 <TL_MM_Init>

  TL_Enable();
 8002db6:	f00b fcf3 	bl	800e7a0 <TL_Enable>

  return;
 8002dba:	bf00      	nop
}
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0800e569 	.word	0x0800e569
 8002dc8:	20030734 	.word	0x20030734
 8002dcc:	08002de1 	.word	0x08002de1
 8002dd0:	08002df9 	.word	0x08002df9
 8002dd4:	2003094c 	.word	0x2003094c
 8002dd8:	20030840 	.word	0x20030840
 8002ddc:	200301f8 	.word	0x200301f8

08002de0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002dea:	bf00      	nop
}
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	330b      	adds	r3, #11
 8002e06:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8002e12:	2b07      	cmp	r3, #7
 8002e14:	d81f      	bhi.n	8002e56 <APPE_SysUserEvtRx+0x5e>
 8002e16:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <APPE_SysUserEvtRx+0x24>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e3d 	.word	0x08002e3d
 8002e20:	08002e4f 	.word	0x08002e4f
 8002e24:	08002e57 	.word	0x08002e57
 8002e28:	08002e57 	.word	0x08002e57
 8002e2c:	08002e57 	.word	0x08002e57
 8002e30:	08002e57 	.word	0x08002e57
 8002e34:	08002e57 	.word	0x08002e57
 8002e38:	08002e57 	.word	0x08002e57
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	4618      	mov	r0, r3
 8002e42:	f00b f92b 	bl	800e09c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f81b 	bl	8002e82 <APPE_SysEvtReadyProcessing>
    break;
 8002e4c:	e004      	b.n	8002e58 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f806 	bl	8002e60 <APPE_SysEvtError>
    break;
 8002e54:	e000      	b.n	8002e58 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8002e56:	bf00      	nop
  }

  return;
 8002e58:	bf00      	nop
}
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	330b      	adds	r3, #11
 8002e6e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3302      	adds	r3, #2
 8002e74:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8002e76:	bf00      	nop
}
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08a      	sub	sp, #40	@ 0x28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	330b      	adds	r3, #11
 8002ea6:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	3302      	adds	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11d      	bne.n	8002ef2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8002eb6:	f7ff fd65 	bl	8002984 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002eba:	230f      	movs	r3, #15
 8002ebc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002ebe:	237f      	movs	r3, #127	@ 0x7f
 8002ec0:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8002ec2:	f7ff fea5 	bl	8002c10 <LL_DBGMCU_GetRevisionID>
 8002ec6:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8002ece:	f7ff fe91 	bl	8002bf4 <LL_DBGMCU_GetDeviceID>
 8002ed2:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f00b f8c6 	bl	800e070 <SHCI_C2_Config>

    APP_BLE_Init();
 8002ee4:	f00c f824 	bl	800ef30 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2001      	movs	r0, #1
 8002eec:	f00c feb8 	bl	800fc60 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002ef0:	e007      	b.n	8002f02 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d103      	bne.n	8002f02 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
  return;
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
}
 8002f04:	3728      	adds	r7, #40	@ 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f12:	f00c fed5 	bl	800fcc0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002f1e:	bf00      	nop
}
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002f32:	f04f 30ff 	mov.w	r0, #4294967295
 8002f36:	f00c fec3 	bl	800fcc0 <UTIL_SEQ_Run>
  return;
 8002f3a:	bf00      	nop
}
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2004      	movs	r0, #4
 8002f4e:	f00c ffd5 	bl	800fefc <UTIL_SEQ_SetTask>
  return;
 8002f52:	bf00      	nop
}
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002f62:	2002      	movs	r0, #2
 8002f64:	f00d f836 	bl	800ffd4 <UTIL_SEQ_SetEvt>
  return;
 8002f68:	bf00      	nop
}
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002f78:	2002      	movs	r0, #2
 8002f7a:	f00d f84b 	bl	8010014 <UTIL_SEQ_WaitEvt>
  return;
 8002f7e:	bf00      	nop
}
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <RxUART_Init>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
static void RxUART_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8002f8c:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <RxUART_Init+0x14>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4903      	ldr	r1, [pc, #12]	@ (8002fa0 <RxUART_Init+0x18>)
 8002f92:	2000      	movs	r0, #0
 8002f94:	f000 fe3c 	bl	8003c10 <HW_UART_Receive_IT>
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	08002fa5 	.word	0x08002fa5
 8002fa0:	20000314 	.word	0x20000314

08002fa4 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8002fa8:	4b12      	ldr	r3, [pc, #72]	@ (8002ff4 <RxCpltCallback+0x50>)
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	2bff      	cmp	r3, #255	@ 0xff
 8002fae:	d818      	bhi.n	8002fe2 <RxCpltCallback+0x3e>
  {
    if (aRxBuffer[0] == '\r')
 8002fb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <RxCpltCallback+0x54>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b0d      	cmp	r3, #13
 8002fb6:	d109      	bne.n	8002fcc <RxCpltCallback+0x28>
    {
      APP_DBG_MSG("received %s\n", CommandString);

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <RxCpltCallback+0x50>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8002fbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	480d      	ldr	r0, [pc, #52]	@ (8002ffc <RxCpltCallback+0x58>)
 8002fc6:	f00f f86f 	bl	80120a8 <memset>
 8002fca:	e00a      	b.n	8002fe2 <RxCpltCallback+0x3e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8002fcc:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <RxCpltCallback+0x50>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	b291      	uxth	r1, r2
 8002fd4:	4a07      	ldr	r2, [pc, #28]	@ (8002ff4 <RxCpltCallback+0x50>)
 8002fd6:	8011      	strh	r1, [r2, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <RxCpltCallback+0x54>)
 8002fdc:	7819      	ldrb	r1, [r3, #0]
 8002fde:	4b07      	ldr	r3, [pc, #28]	@ (8002ffc <RxCpltCallback+0x58>)
 8002fe0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8002fe2:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <RxCpltCallback+0x5c>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4904      	ldr	r1, [pc, #16]	@ (8002ff8 <RxCpltCallback+0x54>)
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f000 fe11 	bl	8003c10 <HW_UART_Receive_IT>
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2000041c 	.word	0x2000041c
 8002ff8:	20000314 	.word	0x20000314
 8002ffc:	2000031c 	.word	0x2000031c
 8003000:	08002fa5 	.word	0x08002fa5

08003004 <LL_EXTI_EnableIT_0_31>:
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <LL_EXTI_EnableIT_0_31+0x24>)
 800300e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003012:	4905      	ldr	r1, [pc, #20]	@ (8003028 <LL_EXTI_EnableIT_0_31+0x24>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	58000800 	.word	0x58000800

0800302c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003034:	4b05      	ldr	r3, [pc, #20]	@ (800304c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4904      	ldr	r1, [pc, #16]	@ (800304c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]

}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	58000800 	.word	0x58000800

08003050 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8003056:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <ReadRtcSsrValue+0x3c>)
 8003058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305a:	b29b      	uxth	r3, r3
 800305c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <ReadRtcSsrValue+0x3c>)
 8003060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003062:	b29b      	uxth	r3, r3
 8003064:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8003066:	e005      	b.n	8003074 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <ReadRtcSsrValue+0x3c>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	b29b      	uxth	r3, r3
 8003072:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d1f5      	bne.n	8003068 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800307c:	683b      	ldr	r3, [r7, #0]
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40002800 	.word	0x40002800

08003090 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	460a      	mov	r2, r1
 800309a:	71fb      	strb	r3, [r7, #7]
 800309c:	4613      	mov	r3, r2
 800309e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80030a0:	79ba      	ldrb	r2, [r7, #6]
 80030a2:	491d      	ldr	r1, [pc, #116]	@ (8003118 <LinkTimerAfter+0x88>)
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	440b      	add	r3, r1
 80030ae:	3315      	adds	r3, #21
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d009      	beq.n	80030ce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	4916      	ldr	r1, [pc, #88]	@ (8003118 <LinkTimerAfter+0x88>)
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	3314      	adds	r3, #20
 80030ca:	79fa      	ldrb	r2, [r7, #7]
 80030cc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80030ce:	79fa      	ldrb	r2, [r7, #7]
 80030d0:	4911      	ldr	r1, [pc, #68]	@ (8003118 <LinkTimerAfter+0x88>)
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	3315      	adds	r3, #21
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80030e2:	79fa      	ldrb	r2, [r7, #7]
 80030e4:	490c      	ldr	r1, [pc, #48]	@ (8003118 <LinkTimerAfter+0x88>)
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	3314      	adds	r3, #20
 80030f2:	79ba      	ldrb	r2, [r7, #6]
 80030f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80030f6:	79ba      	ldrb	r2, [r7, #6]
 80030f8:	4907      	ldr	r1, [pc, #28]	@ (8003118 <LinkTimerAfter+0x88>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	440b      	add	r3, r1
 8003104:	3315      	adds	r3, #21
 8003106:	79fa      	ldrb	r2, [r7, #7]
 8003108:	701a      	strb	r2, [r3, #0]

  return;
 800310a:	bf00      	nop
}
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000420 	.word	0x20000420

0800311c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	460a      	mov	r2, r1
 8003126:	71fb      	strb	r3, [r7, #7]
 8003128:	4613      	mov	r3, r2
 800312a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800312c:	4b29      	ldr	r3, [pc, #164]	@ (80031d4 <LinkTimerBefore+0xb8>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	79ba      	ldrb	r2, [r7, #6]
 8003134:	429a      	cmp	r2, r3
 8003136:	d032      	beq.n	800319e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8003138:	79ba      	ldrb	r2, [r7, #6]
 800313a:	4927      	ldr	r1, [pc, #156]	@ (80031d8 <LinkTimerBefore+0xbc>)
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	3314      	adds	r3, #20
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	4922      	ldr	r1, [pc, #136]	@ (80031d8 <LinkTimerBefore+0xbc>)
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3315      	adds	r3, #21
 800315c:	79fa      	ldrb	r2, [r7, #7]
 800315e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8003160:	79fa      	ldrb	r2, [r7, #7]
 8003162:	491d      	ldr	r1, [pc, #116]	@ (80031d8 <LinkTimerBefore+0xbc>)
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	3315      	adds	r3, #21
 8003170:	79ba      	ldrb	r2, [r7, #6]
 8003172:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8003174:	79fa      	ldrb	r2, [r7, #7]
 8003176:	4918      	ldr	r1, [pc, #96]	@ (80031d8 <LinkTimerBefore+0xbc>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	3314      	adds	r3, #20
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8003188:	79ba      	ldrb	r2, [r7, #6]
 800318a:	4913      	ldr	r1, [pc, #76]	@ (80031d8 <LinkTimerBefore+0xbc>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	3314      	adds	r3, #20
 8003198:	79fa      	ldrb	r2, [r7, #7]
 800319a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800319c:	e014      	b.n	80031c8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800319e:	79fa      	ldrb	r2, [r7, #7]
 80031a0:	490d      	ldr	r1, [pc, #52]	@ (80031d8 <LinkTimerBefore+0xbc>)
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	3315      	adds	r3, #21
 80031ae:	79ba      	ldrb	r2, [r7, #6]
 80031b0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80031b2:	79ba      	ldrb	r2, [r7, #6]
 80031b4:	4908      	ldr	r1, [pc, #32]	@ (80031d8 <LinkTimerBefore+0xbc>)
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	3314      	adds	r3, #20
 80031c2:	79fa      	ldrb	r2, [r7, #7]
 80031c4:	701a      	strb	r2, [r3, #0]
  return;
 80031c6:	bf00      	nop
}
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	200004b0 	.word	0x200004b0
 80031d8:	20000420 	.word	0x20000420

080031dc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003320 <linkTimer+0x144>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d118      	bne.n	8003222 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80031f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003320 <linkTimer+0x144>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <linkTimer+0x148>)
 80031f8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80031fa:	4a49      	ldr	r2, [pc, #292]	@ (8003320 <linkTimer+0x144>)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8003200:	79fa      	ldrb	r2, [r7, #7]
 8003202:	4949      	ldr	r1, [pc, #292]	@ (8003328 <linkTimer+0x14c>)
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	440b      	add	r3, r1
 800320e:	3315      	adds	r3, #21
 8003210:	2206      	movs	r2, #6
 8003212:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003214:	4b45      	ldr	r3, [pc, #276]	@ (800332c <linkTimer+0x150>)
 8003216:	f04f 32ff 	mov.w	r2, #4294967295
 800321a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	81fb      	strh	r3, [r7, #14]
 8003220:	e078      	b.n	8003314 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8003222:	f000 f909 	bl	8003438 <ReturnTimeElapsed>
 8003226:	4603      	mov	r3, r0
 8003228:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800322a:	79fa      	ldrb	r2, [r7, #7]
 800322c:	493e      	ldr	r1, [pc, #248]	@ (8003328 <linkTimer+0x14c>)
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	3308      	adds	r3, #8
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	79fa      	ldrb	r2, [r7, #7]
 8003240:	4419      	add	r1, r3
 8003242:	4839      	ldr	r0, [pc, #228]	@ (8003328 <linkTimer+0x14c>)
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4403      	add	r3, r0
 800324e:	3308      	adds	r3, #8
 8003250:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8003252:	79fa      	ldrb	r2, [r7, #7]
 8003254:	4934      	ldr	r1, [pc, #208]	@ (8003328 <linkTimer+0x14c>)
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	3308      	adds	r3, #8
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8003266:	4b2e      	ldr	r3, [pc, #184]	@ (8003320 <linkTimer+0x144>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4619      	mov	r1, r3
 800326e:	4a2e      	ldr	r2, [pc, #184]	@ (8003328 <linkTimer+0x14c>)
 8003270:	460b      	mov	r3, r1
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	440b      	add	r3, r1
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	3308      	adds	r3, #8
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	d337      	bcc.n	80032f4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8003284:	4b26      	ldr	r3, [pc, #152]	@ (8003320 <linkTimer+0x144>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800328a:	7b7a      	ldrb	r2, [r7, #13]
 800328c:	4926      	ldr	r1, [pc, #152]	@ (8003328 <linkTimer+0x14c>)
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	3315      	adds	r3, #21
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800329e:	e013      	b.n	80032c8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80032a0:	7b7a      	ldrb	r2, [r7, #13]
 80032a2:	4921      	ldr	r1, [pc, #132]	@ (8003328 <linkTimer+0x14c>)
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	3315      	adds	r3, #21
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80032b4:	7b7a      	ldrb	r2, [r7, #13]
 80032b6:	491c      	ldr	r1, [pc, #112]	@ (8003328 <linkTimer+0x14c>)
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	3315      	adds	r3, #21
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80032c8:	7b3b      	ldrb	r3, [r7, #12]
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d00b      	beq.n	80032e6 <linkTimer+0x10a>
 80032ce:	7b3a      	ldrb	r2, [r7, #12]
 80032d0:	4915      	ldr	r1, [pc, #84]	@ (8003328 <linkTimer+0x14c>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	3308      	adds	r3, #8
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d2dc      	bcs.n	80032a0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80032e6:	7b7a      	ldrb	r2, [r7, #13]
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fecf 	bl	8003090 <LinkTimerAfter>
 80032f2:	e00f      	b.n	8003314 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80032f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <linkTimer+0x144>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ff0c 	bl	800311c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8003304:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <linkTimer+0x144>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <linkTimer+0x148>)
 800330c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800330e:	4a04      	ldr	r2, [pc, #16]	@ (8003320 <linkTimer+0x144>)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8003314:	89fb      	ldrh	r3, [r7, #14]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200004b0 	.word	0x200004b0
 8003324:	200004b1 	.word	0x200004b1
 8003328:	20000420 	.word	0x20000420
 800332c:	200004b4 	.word	0x200004b4

08003330 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	460a      	mov	r2, r1
 800333a:	71fb      	strb	r3, [r7, #7]
 800333c:	4613      	mov	r3, r2
 800333e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8003340:	4b39      	ldr	r3, [pc, #228]	@ (8003428 <UnlinkTimer+0xf8>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	79fa      	ldrb	r2, [r7, #7]
 8003348:	429a      	cmp	r2, r3
 800334a:	d111      	bne.n	8003370 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800334c:	4b36      	ldr	r3, [pc, #216]	@ (8003428 <UnlinkTimer+0xf8>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b36      	ldr	r3, [pc, #216]	@ (800342c <UnlinkTimer+0xfc>)
 8003354:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8003356:	79fa      	ldrb	r2, [r7, #7]
 8003358:	4935      	ldr	r1, [pc, #212]	@ (8003430 <UnlinkTimer+0x100>)
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	440b      	add	r3, r1
 8003364:	3315      	adds	r3, #21
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b2f      	ldr	r3, [pc, #188]	@ (8003428 <UnlinkTimer+0xf8>)
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e03e      	b.n	80033ee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8003370:	79fa      	ldrb	r2, [r7, #7]
 8003372:	492f      	ldr	r1, [pc, #188]	@ (8003430 <UnlinkTimer+0x100>)
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	3314      	adds	r3, #20
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8003384:	79fa      	ldrb	r2, [r7, #7]
 8003386:	492a      	ldr	r1, [pc, #168]	@ (8003430 <UnlinkTimer+0x100>)
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	440b      	add	r3, r1
 8003392:	3315      	adds	r3, #21
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003398:	79f9      	ldrb	r1, [r7, #7]
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	4824      	ldr	r0, [pc, #144]	@ (8003430 <UnlinkTimer+0x100>)
 800339e:	460b      	mov	r3, r1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	440b      	add	r3, r1
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4403      	add	r3, r0
 80033a8:	3315      	adds	r3, #21
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b2d8      	uxtb	r0, r3
 80033ae:	4920      	ldr	r1, [pc, #128]	@ (8003430 <UnlinkTimer+0x100>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	3315      	adds	r3, #21
 80033bc:	4602      	mov	r2, r0
 80033be:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d013      	beq.n	80033ee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80033c6:	79f9      	ldrb	r1, [r7, #7]
 80033c8:	7bba      	ldrb	r2, [r7, #14]
 80033ca:	4819      	ldr	r0, [pc, #100]	@ (8003430 <UnlinkTimer+0x100>)
 80033cc:	460b      	mov	r3, r1
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	440b      	add	r3, r1
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4403      	add	r3, r0
 80033d6:	3314      	adds	r3, #20
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2d8      	uxtb	r0, r3
 80033dc:	4914      	ldr	r1, [pc, #80]	@ (8003430 <UnlinkTimer+0x100>)
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	3314      	adds	r3, #20
 80033ea:	4602      	mov	r2, r0
 80033ec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80033ee:	79fa      	ldrb	r2, [r7, #7]
 80033f0:	490f      	ldr	r1, [pc, #60]	@ (8003430 <UnlinkTimer+0x100>)
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	330c      	adds	r3, #12
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8003402:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <UnlinkTimer+0xf8>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b06      	cmp	r3, #6
 800340a:	d107      	bne.n	800341c <UnlinkTimer+0xec>
 800340c:	79bb      	ldrb	r3, [r7, #6]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003412:	4b08      	ldr	r3, [pc, #32]	@ (8003434 <UnlinkTimer+0x104>)
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	601a      	str	r2, [r3, #0]
  }

  return;
 800341a:	bf00      	nop
 800341c:	bf00      	nop
}
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	200004b0 	.word	0x200004b0
 800342c:	200004b1 	.word	0x200004b1
 8003430:	20000420 	.word	0x20000420
 8003434:	200004b4 	.word	0x200004b4

08003438 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800343e:	4b1a      	ldr	r3, [pc, #104]	@ (80034a8 <ReturnTimeElapsed+0x70>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d026      	beq.n	8003496 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8003448:	f7ff fe02 	bl	8003050 <ReadRtcSsrValue>
 800344c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800344e:	4b16      	ldr	r3, [pc, #88]	@ (80034a8 <ReturnTimeElapsed+0x70>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d805      	bhi.n	8003464 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8003458:	4b13      	ldr	r3, [pc, #76]	@ (80034a8 <ReturnTimeElapsed+0x70>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	e00a      	b.n	800347a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8003464:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <ReturnTimeElapsed+0x74>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8003470:	4b0d      	ldr	r3, [pc, #52]	@ (80034a8 <ReturnTimeElapsed+0x70>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	4413      	add	r3, r2
 8003478:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <ReturnTimeElapsed+0x78>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003488:	4b0a      	ldr	r3, [pc, #40]	@ (80034b4 <ReturnTimeElapsed+0x7c>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	40d3      	lsrs	r3, r2
 8003492:	607b      	str	r3, [r7, #4]
 8003494:	e001      	b.n	800349a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	b29b      	uxth	r3, r3
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200004b4 	.word	0x200004b4
 80034ac:	200004bc 	.word	0x200004bc
 80034b0:	200004ba 	.word	0x200004ba
 80034b4:	200004b9 	.word	0x200004b9

080034b8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d108      	bne.n	80034da <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80034c8:	f7ff fdc2 	bl	8003050 <ReadRtcSsrValue>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4a21      	ldr	r2, [pc, #132]	@ (8003554 <RestartWakeupCounter+0x9c>)
 80034d0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80034d2:	2003      	movs	r0, #3
 80034d4:	f001 ffa3 	bl	800541e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80034d8:	e039      	b.n	800354e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d803      	bhi.n	80034e8 <RestartWakeupCounter+0x30>
 80034e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <RestartWakeupCounter+0xa0>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d002      	beq.n	80034ee <RestartWakeupCounter+0x36>
      Value -= 1;
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80034ee:	bf00      	nop
 80034f0:	4b1a      	ldr	r3, [pc, #104]	@ (800355c <RestartWakeupCounter+0xa4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f8      	beq.n	80034f0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80034fe:	4b17      	ldr	r3, [pc, #92]	@ (800355c <RestartWakeupCounter+0xa4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <RestartWakeupCounter+0xa4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800350e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003510:	4b13      	ldr	r3, [pc, #76]	@ (8003560 <RestartWakeupCounter+0xa8>)
 8003512:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003516:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003518:	2003      	movs	r0, #3
 800351a:	f001 ff8e 	bl	800543a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800351e:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <RestartWakeupCounter+0xac>)
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	0c1b      	lsrs	r3, r3, #16
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	490e      	ldr	r1, [pc, #56]	@ (8003564 <RestartWakeupCounter+0xac>)
 800352a:	4313      	orrs	r3, r2
 800352c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800352e:	f7ff fd8f 	bl	8003050 <ReadRtcSsrValue>
 8003532:	4603      	mov	r3, r0
 8003534:	4a07      	ldr	r2, [pc, #28]	@ (8003554 <RestartWakeupCounter+0x9c>)
 8003536:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003538:	4b08      	ldr	r3, [pc, #32]	@ (800355c <RestartWakeupCounter+0xa4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	4b07      	ldr	r3, [pc, #28]	@ (800355c <RestartWakeupCounter+0xa4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003546:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003548:	f3af 8000 	nop.w
  return ;
 800354c:	bf00      	nop
}
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200004b4 	.word	0x200004b4
 8003558:	200004b9 	.word	0x200004b9
 800355c:	20000618 	.word	0x20000618
 8003560:	58000800 	.word	0x58000800
 8003564:	40002800 	.word	0x40002800

08003568 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800356e:	4b45      	ldr	r3, [pc, #276]	@ (8003684 <RescheduleTimerList+0x11c>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800357a:	d107      	bne.n	800358c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800357c:	bf00      	nop
 800357e:	4b42      	ldr	r3, [pc, #264]	@ (8003688 <RescheduleTimerList+0x120>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f8      	bne.n	800357e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800358c:	4b3e      	ldr	r3, [pc, #248]	@ (8003688 <RescheduleTimerList+0x120>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4b3d      	ldr	r3, [pc, #244]	@ (8003688 <RescheduleTimerList+0x120>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800359a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800359c:	4b3b      	ldr	r3, [pc, #236]	@ (800368c <RescheduleTimerList+0x124>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	493a      	ldr	r1, [pc, #232]	@ (8003690 <RescheduleTimerList+0x128>)
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	440b      	add	r3, r1
 80035b0:	3308      	adds	r3, #8
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80035b6:	f7ff ff3f 	bl	8003438 <ReturnTimeElapsed>
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d205      	bcs.n	80035d2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80035ca:	4b32      	ldr	r3, [pc, #200]	@ (8003694 <RescheduleTimerList+0x12c>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e04d      	b.n	800366e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	4a30      	ldr	r2, [pc, #192]	@ (8003698 <RescheduleTimerList+0x130>)
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	b292      	uxth	r2, r2
 80035da:	4413      	add	r3, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d906      	bls.n	80035f2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80035e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003698 <RescheduleTimerList+0x130>)
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80035ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <RescheduleTimerList+0x12c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e03d      	b.n	800366e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80035fc:	4b25      	ldr	r3, [pc, #148]	@ (8003694 <RescheduleTimerList+0x12c>)
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003602:	e034      	b.n	800366e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	4922      	ldr	r1, [pc, #136]	@ (8003690 <RescheduleTimerList+0x128>)
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	3308      	adds	r3, #8
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	429a      	cmp	r2, r3
 800361a:	d20a      	bcs.n	8003632 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	491c      	ldr	r1, [pc, #112]	@ (8003690 <RescheduleTimerList+0x128>)
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	440b      	add	r3, r1
 800362a:	3308      	adds	r3, #8
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e013      	b.n	800365a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	4916      	ldr	r1, [pc, #88]	@ (8003690 <RescheduleTimerList+0x128>)
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	440b      	add	r3, r1
 8003640:	3308      	adds	r3, #8
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	1ac9      	subs	r1, r1, r3
 800364a:	4811      	ldr	r0, [pc, #68]	@ (8003690 <RescheduleTimerList+0x128>)
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4403      	add	r3, r0
 8003656:	3308      	adds	r3, #8
 8003658:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	490c      	ldr	r1, [pc, #48]	@ (8003690 <RescheduleTimerList+0x128>)
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	3315      	adds	r3, #21
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d1c7      	bne.n	8003604 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003674:	89bb      	ldrh	r3, [r7, #12]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff1e 	bl	80034b8 <RestartWakeupCounter>

  return ;
 800367c:	bf00      	nop
}
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40002800 	.word	0x40002800
 8003688:	20000618 	.word	0x20000618
 800368c:	200004b0 	.word	0x200004b0
 8003690:	20000420 	.word	0x20000420
 8003694:	200004b8 	.word	0x200004b8
 8003698:	200004be 	.word	0x200004be

0800369c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a2:	f3ef 8310 	mrs	r3, PRIMASK
 80036a6:	617b      	str	r3, [r7, #20]
  return(result);
 80036a8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80036ac:	b672      	cpsid	i
}
 80036ae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80036b0:	4b59      	ldr	r3, [pc, #356]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	22ca      	movs	r2, #202	@ 0xca
 80036b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80036b8:	4b57      	ldr	r3, [pc, #348]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2253      	movs	r2, #83	@ 0x53
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80036c0:	4b55      	ldr	r3, [pc, #340]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	4b54      	ldr	r3, [pc, #336]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ce:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80036d0:	4b52      	ldr	r3, [pc, #328]	@ (800381c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80036d8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80036dc:	4950      	ldr	r1, [pc, #320]	@ (8003820 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	330c      	adds	r3, #12
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d16e      	bne.n	80037d0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80036f2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80036f6:	494a      	ldr	r1, [pc, #296]	@ (8003820 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	440b      	add	r3, r1
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8003706:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800370a:	4945      	ldr	r1, [pc, #276]	@ (8003820 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	3310      	adds	r3, #16
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800371c:	4b41      	ldr	r3, [pc, #260]	@ (8003824 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04c      	beq.n	80037c0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003726:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800372a:	493d      	ldr	r1, [pc, #244]	@ (8003820 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	440b      	add	r3, r1
 8003736:	330d      	adds	r3, #13
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d124      	bne.n	800378a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003740:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003744:	2101      	movs	r1, #1
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fdf2 	bl	8003330 <UnlinkTimer>
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003758:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800375c:	4930      	ldr	r1, [pc, #192]	@ (8003820 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	440b      	add	r3, r1
 8003768:	3304      	adds	r3, #4
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f9b8 	bl	8003ae8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003778:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	22ca      	movs	r2, #202	@ 0xca
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003780:	4b25      	ldr	r3, [pc, #148]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2253      	movs	r2, #83	@ 0x53
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24
 8003788:	e012      	b.n	80037b0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f383 8810 	msr	PRIMASK, r3
}
 8003794:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003796:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f920 	bl	80039e0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80037a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	22ca      	movs	r2, #202	@ 0xca
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2253      	movs	r2, #83	@ 0x53
 80037ae:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80037b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	4619      	mov	r1, r3
 80037b8:	69b8      	ldr	r0, [r7, #24]
 80037ba:	f000 fa1b 	bl	8003bf4 <HW_TS_RTC_Int_AppNot>
 80037be:	e022      	b.n	8003806 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80037c0:	f7ff fed2 	bl	8003568 <RescheduleTimerList>
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	e01a      	b.n	8003806 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80037d0:	bf00      	nop
 80037d2:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f8      	beq.n	80037d2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80037e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80037f0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80037f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003828 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80037f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003806:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	22ff      	movs	r2, #255	@ 0xff
 800380c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800380e:	bf00      	nop
}
 8003810:	3728      	adds	r7, #40	@ 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000618 	.word	0x20000618
 800381c:	200004b0 	.word	0x200004b0
 8003820:	20000420 	.word	0x20000420
 8003824:	200004b8 	.word	0x200004b8
 8003828:	58000800 	.word	0x58000800

0800382c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	6039      	str	r1, [r7, #0]
 8003836:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003838:	4b5e      	ldr	r3, [pc, #376]	@ (80039b4 <HW_TS_Init+0x188>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	22ca      	movs	r2, #202	@ 0xca
 800383e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003840:	4b5c      	ldr	r3, [pc, #368]	@ (80039b4 <HW_TS_Init+0x188>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2253      	movs	r2, #83	@ 0x53
 8003846:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003848:	4b5b      	ldr	r3, [pc, #364]	@ (80039b8 <HW_TS_Init+0x18c>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a5a      	ldr	r2, [pc, #360]	@ (80039b8 <HW_TS_Init+0x18c>)
 800384e:	f043 0320 	orr.w	r3, r3, #32
 8003852:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003854:	4b58      	ldr	r3, [pc, #352]	@ (80039b8 <HW_TS_Init+0x18c>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f1c3 0304 	rsb	r3, r3, #4
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b55      	ldr	r3, [pc, #340]	@ (80039bc <HW_TS_Init+0x190>)
 8003868:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800386a:	4b53      	ldr	r3, [pc, #332]	@ (80039b8 <HW_TS_Init+0x18c>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003872:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8003876:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	fa92 f2a2 	rbit	r2, r2
 800387e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	2a00      	cmp	r2, #0
 8003888:	d101      	bne.n	800388e <HW_TS_Init+0x62>
  {
    return 32U;
 800388a:	2220      	movs	r2, #32
 800388c:	e003      	b.n	8003896 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	fab2 f282 	clz	r2, r2
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	40d3      	lsrs	r3, r2
 8003898:	b2db      	uxtb	r3, r3
 800389a:	3301      	adds	r3, #1
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4b48      	ldr	r3, [pc, #288]	@ (80039c0 <HW_TS_Init+0x194>)
 80038a0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80038a2:	4b45      	ldr	r3, [pc, #276]	@ (80039b8 <HW_TS_Init+0x18c>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	4b44      	ldr	r3, [pc, #272]	@ (80039c4 <HW_TS_Init+0x198>)
 80038b4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80038b6:	4b43      	ldr	r3, [pc, #268]	@ (80039c4 <HW_TS_Init+0x198>)
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	4a40      	ldr	r2, [pc, #256]	@ (80039c0 <HW_TS_Init+0x194>)
 80038be:	7812      	ldrb	r2, [r2, #0]
 80038c0:	fb02 f303 	mul.w	r3, r2, r3
 80038c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038c8:	4a3c      	ldr	r2, [pc, #240]	@ (80039bc <HW_TS_Init+0x190>)
 80038ca:	7812      	ldrb	r2, [r2, #0]
 80038cc:	40d3      	lsrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d904      	bls.n	80038e4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80038da:	4b3b      	ldr	r3, [pc, #236]	@ (80039c8 <HW_TS_Init+0x19c>)
 80038dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	e003      	b.n	80038ec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	4b37      	ldr	r3, [pc, #220]	@ (80039c8 <HW_TS_Init+0x19c>)
 80038ea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80038ec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80038f0:	f7ff fb9c 	bl	800302c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80038f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80038f8:	f7ff fb84 	bl	8003004 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d13d      	bne.n	800397e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003902:	4b32      	ldr	r3, [pc, #200]	@ (80039cc <HW_TS_Init+0x1a0>)
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003908:	4b31      	ldr	r3, [pc, #196]	@ (80039d0 <HW_TS_Init+0x1a4>)
 800390a:	f04f 32ff 	mov.w	r2, #4294967295
 800390e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e00c      	b.n	8003930 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003916:	7ffa      	ldrb	r2, [r7, #31]
 8003918:	492e      	ldr	r1, [pc, #184]	@ (80039d4 <HW_TS_Init+0x1a8>)
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	330c      	adds	r3, #12
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800392a:	7ffb      	ldrb	r3, [r7, #31]
 800392c:	3301      	adds	r3, #1
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	7ffb      	ldrb	r3, [r7, #31]
 8003932:	2b05      	cmp	r3, #5
 8003934:	d9ef      	bls.n	8003916 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003936:	4b28      	ldr	r3, [pc, #160]	@ (80039d8 <HW_TS_Init+0x1ac>)
 8003938:	2206      	movs	r2, #6
 800393a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800393c:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <HW_TS_Init+0x188>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <HW_TS_Init+0x188>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800394c:	4b19      	ldr	r3, [pc, #100]	@ (80039b4 <HW_TS_Init+0x188>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	4b17      	ldr	r3, [pc, #92]	@ (80039b4 <HW_TS_Init+0x188>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800395c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800395e:	4b1f      	ldr	r3, [pc, #124]	@ (80039dc <HW_TS_Init+0x1b0>)
 8003960:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003964:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003966:	2003      	movs	r0, #3
 8003968:	f001 fd67 	bl	800543a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800396c:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <HW_TS_Init+0x188>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	4b10      	ldr	r3, [pc, #64]	@ (80039b4 <HW_TS_Init+0x188>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	e009      	b.n	8003992 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800397e:	4b0d      	ldr	r3, [pc, #52]	@ (80039b4 <HW_TS_Init+0x188>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800398c:	2003      	movs	r0, #3
 800398e:	f001 fd46 	bl	800541e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003992:	4b08      	ldr	r3, [pc, #32]	@ (80039b4 <HW_TS_Init+0x188>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	22ff      	movs	r2, #255	@ 0xff
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800399a:	2200      	movs	r2, #0
 800399c:	2103      	movs	r1, #3
 800399e:	2003      	movs	r0, #3
 80039a0:	f001 fcfb 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80039a4:	2003      	movs	r0, #3
 80039a6:	f001 fd12 	bl	80053ce <HAL_NVIC_EnableIRQ>

  return;
 80039aa:	bf00      	nop
}
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000618 	.word	0x20000618
 80039b8:	40002800 	.word	0x40002800
 80039bc:	200004b9 	.word	0x200004b9
 80039c0:	200004ba 	.word	0x200004ba
 80039c4:	200004bc 	.word	0x200004bc
 80039c8:	200004be 	.word	0x200004be
 80039cc:	200004b8 	.word	0x200004b8
 80039d0:	200004b4 	.word	0x200004b4
 80039d4:	20000420 	.word	0x20000420
 80039d8:	200004b0 	.word	0x200004b0
 80039dc:	58000800 	.word	0x58000800

080039e0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ea:	f3ef 8310 	mrs	r3, PRIMASK
 80039ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80039f0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80039f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80039f4:	b672      	cpsid	i
}
 80039f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80039f8:	2003      	movs	r0, #3
 80039fa:	f001 fcf6 	bl	80053ea <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80039fe:	4b34      	ldr	r3, [pc, #208]	@ (8003ad0 <HW_TS_Stop+0xf0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	22ca      	movs	r2, #202	@ 0xca
 8003a04:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a06:	4b32      	ldr	r3, [pc, #200]	@ (8003ad0 <HW_TS_Stop+0xf0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2253      	movs	r2, #83	@ 0x53
 8003a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003a0e:	79fa      	ldrb	r2, [r7, #7]
 8003a10:	4930      	ldr	r1, [pc, #192]	@ (8003ad4 <HW_TS_Stop+0xf4>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d142      	bne.n	8003aac <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fc80 	bl	8003330 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003a30:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <HW_TS_Stop+0xf8>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	2b06      	cmp	r3, #6
 8003a3a:	d12f      	bne.n	8003a9c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003a3c:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <HW_TS_Stop+0xfc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a48:	d107      	bne.n	8003a5a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003a4a:	bf00      	nop
 8003a4c:	4b20      	ldr	r3, [pc, #128]	@ (8003ad0 <HW_TS_Stop+0xf0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f8      	bne.n	8003a4c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <HW_TS_Stop+0xf0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad0 <HW_TS_Stop+0xf0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a68:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003a6a:	bf00      	nop
 8003a6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ad0 <HW_TS_Stop+0xf0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f8      	beq.n	8003a6c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <HW_TS_Stop+0xf0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4b13      	ldr	r3, [pc, #76]	@ (8003ad0 <HW_TS_Stop+0xf0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003a8a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003a8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <HW_TS_Stop+0x100>)
 8003a8e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003a92:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003a94:	2003      	movs	r0, #3
 8003a96:	f001 fcd0 	bl	800543a <HAL_NVIC_ClearPendingIRQ>
 8003a9a:	e007      	b.n	8003aac <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003a9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <HW_TS_Stop+0x104>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	7cfa      	ldrb	r2, [r7, #19]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003aa8:	f7ff fd5e 	bl	8003568 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003aac:	4b08      	ldr	r3, [pc, #32]	@ (8003ad0 <HW_TS_Stop+0xf0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	22ff      	movs	r2, #255	@ 0xff
 8003ab2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f001 fc8a 	bl	80053ce <HAL_NVIC_EnableIRQ>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003ac6:	bf00      	nop
}
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000618 	.word	0x20000618
 8003ad4:	20000420 	.word	0x20000420
 8003ad8:	200004b0 	.word	0x200004b0
 8003adc:	40002800 	.word	0x40002800
 8003ae0:	58000800 	.word	0x58000800
 8003ae4:	200004b1 	.word	0x200004b1

08003ae8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	6039      	str	r1, [r7, #0]
 8003af2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003af4:	79fa      	ldrb	r2, [r7, #7]
 8003af6:	493b      	ldr	r1, [pc, #236]	@ (8003be4 <HW_TS_Start+0xfc>)
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	330c      	adds	r3, #12
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d103      	bne.n	8003b14 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff ff66 	bl	80039e0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b14:	f3ef 8310 	mrs	r3, PRIMASK
 8003b18:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003b1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b1e:	b672      	cpsid	i
}
 8003b20:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003b22:	2003      	movs	r0, #3
 8003b24:	f001 fc61 	bl	80053ea <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003b28:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <HW_TS_Start+0x100>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	22ca      	movs	r2, #202	@ 0xca
 8003b2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b30:	4b2d      	ldr	r3, [pc, #180]	@ (8003be8 <HW_TS_Start+0x100>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2253      	movs	r2, #83	@ 0x53
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003b38:	79fa      	ldrb	r2, [r7, #7]
 8003b3a:	492a      	ldr	r1, [pc, #168]	@ (8003be4 <HW_TS_Start+0xfc>)
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	440b      	add	r3, r1
 8003b46:	330c      	adds	r3, #12
 8003b48:	2202      	movs	r2, #2
 8003b4a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003b4c:	79fa      	ldrb	r2, [r7, #7]
 8003b4e:	4925      	ldr	r1, [pc, #148]	@ (8003be4 <HW_TS_Start+0xfc>)
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	440b      	add	r3, r1
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003b60:	79fa      	ldrb	r2, [r7, #7]
 8003b62:	4920      	ldr	r1, [pc, #128]	@ (8003be4 <HW_TS_Start+0xfc>)
 8003b64:	4613      	mov	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3304      	adds	r3, #4
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fb30 	bl	80031dc <linkTimer>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003b80:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <HW_TS_Start+0x104>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003b86:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <HW_TS_Start+0x108>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	7c7a      	ldrb	r2, [r7, #17]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d002      	beq.n	8003b98 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8003b92:	f7ff fce9 	bl	8003568 <RescheduleTimerList>
 8003b96:	e013      	b.n	8003bc0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003b98:	79fa      	ldrb	r2, [r7, #7]
 8003b9a:	4912      	ldr	r1, [pc, #72]	@ (8003be4 <HW_TS_Start+0xfc>)
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	8a7b      	ldrh	r3, [r7, #18]
 8003bac:	79fa      	ldrb	r2, [r7, #7]
 8003bae:	1ac9      	subs	r1, r1, r3
 8003bb0:	480c      	ldr	r0, [pc, #48]	@ (8003be4 <HW_TS_Start+0xfc>)
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4403      	add	r3, r0
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HW_TS_Start+0x100>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	22ff      	movs	r2, #255	@ 0xff
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003bc8:	2003      	movs	r0, #3
 8003bca:	f001 fc00 	bl	80053ce <HAL_NVIC_EnableIRQ>
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f383 8810 	msr	PRIMASK, r3
}
 8003bd8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003bda:	bf00      	nop
}
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000420 	.word	0x20000420
 8003be8:	20000618 	.word	0x20000618
 8003bec:	200004b0 	.word	0x200004b0
 8003bf0:	200004b1 	.word	0x200004b1

08003bf4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4798      	blx	r3

  return;
 8003c06:	bf00      	nop
}
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10c      	bne.n	8003c42 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8003c28:	4a08      	ldr	r2, [pc, #32]	@ (8003c4c <HW_UART_Receive_IT+0x3c>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <HW_UART_Receive_IT+0x40>)
 8003c30:	4a08      	ldr	r2, [pc, #32]	@ (8003c54 <HW_UART_Receive_IT+0x44>)
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	89bb      	ldrh	r3, [r7, #12]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	4805      	ldr	r0, [pc, #20]	@ (8003c50 <HW_UART_Receive_IT+0x40>)
 8003c3c:	f006 fe8c 	bl	800a958 <HAL_UART_Receive_IT>
            break;
 8003c40:	e000      	b.n	8003c44 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003c42:	bf00      	nop
    }

    return;
 8003c44:	bf00      	nop
}
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	200004c0 	.word	0x200004c0
 8003c50:	200006d4 	.word	0x200006d4
 8003c54:	40013800 	.word	0x40013800

08003c58 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	4603      	mov	r3, r0
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	4613      	mov	r3, r2
 8003c68:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10e      	bne.n	8003c96 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8003c78:	4a17      	ldr	r2, [pc, #92]	@ (8003cd8 <HW_UART_Transmit_DMA+0x80>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8003c7e:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <HW_UART_Transmit_DMA+0x84>)
 8003c80:	4a17      	ldr	r2, [pc, #92]	@ (8003ce0 <HW_UART_Transmit_DMA+0x88>)
 8003c82:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003c84:	89bb      	ldrh	r3, [r7, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	4814      	ldr	r0, [pc, #80]	@ (8003cdc <HW_UART_Transmit_DMA+0x84>)
 8003c8c:	f006 feb0 	bl	800a9f0 <HAL_UART_Transmit_DMA>
 8003c90:	4603      	mov	r3, r0
 8003c92:	75fb      	strb	r3, [r7, #23]
            break;
 8003c94:	e000      	b.n	8003c98 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003c96:	bf00      	nop
    }

    switch (hal_status)
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d816      	bhi.n	8003ccc <HW_UART_Transmit_DMA+0x74>
 8003c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca4 <HW_UART_Transmit_DMA+0x4c>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cb5 	.word	0x08003cb5
 8003ca8:	08003cbb 	.word	0x08003cbb
 8003cac:	08003cc1 	.word	0x08003cc1
 8003cb0:	08003cc7 	.word	0x08003cc7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	75bb      	strb	r3, [r7, #22]
            break;
 8003cb8:	e009      	b.n	8003cce <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75bb      	strb	r3, [r7, #22]
            break;
 8003cbe:	e006      	b.n	8003cce <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	75bb      	strb	r3, [r7, #22]
            break;
 8003cc4:	e003      	b.n	8003cce <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	75bb      	strb	r3, [r7, #22]
            break;
 8003cca:	e000      	b.n	8003cce <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8003ccc:	bf00      	nop
    }

    return hw_status;
 8003cce:	7dbb      	ldrb	r3, [r7, #22]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200004c4 	.word	0x200004c4
 8003cdc:	200006d4 	.word	0x200006d4
 8003ce0:	40013800 	.word	0x40013800

08003ce4 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_UART_RxCpltCallback+0x34>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d107      	bne.n	8003d08 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8003cf8:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <HAL_UART_RxCpltCallback+0x38>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8003d00:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_UART_RxCpltCallback+0x38>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4798      	blx	r3
            }
            break;
 8003d06:	e001      	b.n	8003d0c <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <HAL_UART_RxCpltCallback+0x2a>
            break;
 8003d0c:	bf00      	nop
    }

    return;
 8003d0e:	bf00      	nop
}
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40013800 	.word	0x40013800
 8003d1c:	200004c0 	.word	0x200004c0

08003d20 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <HAL_UART_TxCpltCallback+0x34>)
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d107      	bne.n	8003d44 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003d34:	4b08      	ldr	r3, [pc, #32]	@ (8003d58 <HAL_UART_TxCpltCallback+0x38>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_UART_TxCpltCallback+0x38>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4798      	blx	r3
            }
            break;
 8003d42:	e001      	b.n	8003d48 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8003d44:	bf00      	nop
 8003d46:	e000      	b.n	8003d4a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8003d48:	bf00      	nop
    }

    return;
 8003d4a:	bf00      	nop
}
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40013800 	.word	0x40013800
 8003d58:	200004c4 	.word	0x200004c4

08003d5c <LL_RCC_LSE_SetDriveCapability>:
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6c:	f023 0218 	bic.w	r2, r3, #24
 8003d70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_AHB1_GRP1_EnableClock>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4013      	ands	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003dac:	68fb      	ldr	r3, [r7, #12]
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <LL_AHB2_GRP1_EnableClock>:
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003dde:	68fb      	ldr	r3, [r7, #12]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_GPIO_EXTI_Callback>:
//    if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
//        pulse_count++;
//    }
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dfc:	d019      	beq.n	8003e32 <HAL_GPIO_EXTI_Callback+0x46>
 8003dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e02:	dc22      	bgt.n	8003e4a <HAL_GPIO_EXTI_Callback+0x5e>
 8003e04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e08:	d00d      	beq.n	8003e26 <HAL_GPIO_EXTI_Callback+0x3a>
 8003e0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e0e:	dc1c      	bgt.n	8003e4a <HAL_GPIO_EXTI_Callback+0x5e>
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d014      	beq.n	8003e3e <HAL_GPIO_EXTI_Callback+0x52>
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e18:	d117      	bne.n	8003e4a <HAL_GPIO_EXTI_Callback+0x5e>
		case M1_Coder_Pin:
			// Incrémenter le compteur pour le moteur 1
			M1_count++;
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e58 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a0d      	ldr	r2, [pc, #52]	@ (8003e58 <HAL_GPIO_EXTI_Callback+0x6c>)
 8003e22:	6013      	str	r3, [r2, #0]
			break;
 8003e24:	e011      	b.n	8003e4a <HAL_GPIO_EXTI_Callback+0x5e>
		case M2_Coder_Pin:
			// Incrémenter le compteur pour le moteur 2
			M2_count++;
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <HAL_GPIO_EXTI_Callback+0x70>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e5c <HAL_GPIO_EXTI_Callback+0x70>)
 8003e2e:	6013      	str	r3, [r2, #0]
			break;
 8003e30:	e00b      	b.n	8003e4a <HAL_GPIO_EXTI_Callback+0x5e>
		case M3_Coder_Pin:
			// Incrémenter le compteur pour le moteur 3
			M3_count++;
 8003e32:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	4a09      	ldr	r2, [pc, #36]	@ (8003e60 <HAL_GPIO_EXTI_Callback+0x74>)
 8003e3a:	6013      	str	r3, [r2, #0]
			break;
 8003e3c:	e005      	b.n	8003e4a <HAL_GPIO_EXTI_Callback+0x5e>
		case M4_Coder_Pin:
			// Incrémenter le compteur pour le moteur 4
			M4_count++;
 8003e3e:	4b09      	ldr	r3, [pc, #36]	@ (8003e64 <HAL_GPIO_EXTI_Callback+0x78>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	4a07      	ldr	r2, [pc, #28]	@ (8003e64 <HAL_GPIO_EXTI_Callback+0x78>)
 8003e46:	6013      	str	r3, [r2, #0]
			break;
 8003e48:	bf00      	nop
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000828 	.word	0x20000828
 8003e5c:	2000082c 	.word	0x2000082c
 8003e60:	20000830 	.word	0x20000830
 8003e64:	20000834 	.word	0x20000834

08003e68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	if(htim == &htim16) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a28      	ldr	r2, [pc, #160]	@ (8003f14 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d146      	bne.n	8003f06 <HAL_TIM_PeriodElapsedCallback+0x9e>
		motors[0].measured_speed = M1_count;
 8003e78:	4b27      	ldr	r3, [pc, #156]	@ (8003f18 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e84:	4b25      	ldr	r3, [pc, #148]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003e86:	edc3 7a01 	vstr	s15, [r3, #4]
		M1_count = 0; // Reset pour la prochaine seconde
 8003e8a:	4b23      	ldr	r3, [pc, #140]	@ (8003f18 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
		motors[1].measured_speed = M2_count;
 8003e90:	4b23      	ldr	r3, [pc, #140]	@ (8003f20 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003e9e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		M2_count = 0; // Reset pour la prochaine seconde
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f20 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
		motors[2].measured_speed = M3_count;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	ee07 3a90 	vmov	s15, r3
 8003eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb4:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003eb6:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		M3_count = 0; // Reset pour la prochaine seconde
 8003eba:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
		motors[3].measured_speed = M4_count;
 8003ec0:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	ee07 3a90 	vmov	s15, r3
 8003ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003ece:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
		M4_count = 0; // Reset pour la prochaine seconde
 8003ed2:	4b15      	ldr	r3, [pc, #84]	@ (8003f28 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

	    lol = (motors[0].measured_speed + motors[1].measured_speed + motors[2].measured_speed / 3);
 8003ed8:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003eda:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ede:	4b0f      	ldr	r3, [pc, #60]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003ee0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003eea:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8003eee:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 8003ef2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003efe:	ee17 2a90 	vmov	r2, s15
 8003f02:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003f04:	601a      	str	r2, [r3, #0]
	}
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000688 	.word	0x20000688
 8003f18:	20000828 	.word	0x20000828
 8003f1c:	20000268 	.word	0x20000268
 8003f20:	2000082c 	.word	0x2000082c
 8003f24:	20000830 	.word	0x20000830
 8003f28:	20000834 	.word	0x20000834
 8003f2c:	20000838 	.word	0x20000838

08003f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f36:	f001 f863 	bl	8005000 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003f3a:	f7fe fea7 	bl	8002c8c <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f3e:	f000 f8d5 	bl	80040ec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003f42:	f000 f935 	bl	80041b0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003f46:	f000 f993 	bl	8004270 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f4a:	f000 fb15 	bl	8004578 <MX_GPIO_Init>
  MX_DMA_Init();
 8003f4e:	f000 fae9 	bl	8004524 <MX_DMA_Init>
  MX_RTC_Init();
 8003f52:	f000 f9a9 	bl	80042a8 <MX_RTC_Init>
  MX_I2C1_Init();
 8003f56:	f000 f94b 	bl	80041f0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003f5a:	f000 f9d9 	bl	8004310 <MX_TIM2_Init>
  MX_TIM16_Init();
 8003f5e:	f000 fa6d 	bl	800443c <MX_TIM16_Init>
  MX_RF_Init();
 8003f62:	f000 f999 	bl	8004298 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_DeInit(&hi2c1);
 8003f66:	4857      	ldr	r0, [pc, #348]	@ (80040c4 <main+0x194>)
 8003f68:	f002 f989 	bl	800627e <HAL_I2C_DeInit>
  MX_I2C1_Init();
 8003f6c:	f000 f940 	bl	80041f0 <MX_I2C1_Init>
  HAL_TIM_Base_Start_IT(&htim16);
 8003f70:	4855      	ldr	r0, [pc, #340]	@ (80040c8 <main+0x198>)
 8003f72:	f005 fbbb 	bl	80096ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8003f76:	4855      	ldr	r0, [pc, #340]	@ (80040cc <main+0x19c>)
 8003f78:	f005 fbb8 	bl	80096ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4853      	ldr	r0, [pc, #332]	@ (80040cc <main+0x19c>)
 8003f80:	f005 fc64 	bl	800984c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003f84:	2104      	movs	r1, #4
 8003f86:	4851      	ldr	r0, [pc, #324]	@ (80040cc <main+0x19c>)
 8003f88:	f005 fc60 	bl	800984c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003f8c:	2108      	movs	r1, #8
 8003f8e:	484f      	ldr	r0, [pc, #316]	@ (80040cc <main+0x19c>)
 8003f90:	f005 fc5c 	bl	800984c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003f94:	210c      	movs	r1, #12
 8003f96:	484d      	ldr	r0, [pc, #308]	@ (80040cc <main+0x19c>)
 8003f98:	f005 fc58 	bl	800984c <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003f9c:	f7fe fe84 	bl	8002ca8 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for (int i = 0; i < 4; i++) {
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	607b      	str	r3, [r7, #4]
 8003fa4:	e02d      	b.n	8004002 <main+0xd2>
      motors[i].pid.kp = 1.0f;
 8003fa6:	494a      	ldr	r1, [pc, #296]	@ (80040d0 <main+0x1a0>)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003fba:	601a      	str	r2, [r3, #0]
      motors[i].pid.ki = 0.0f;
 8003fbc:	4944      	ldr	r1, [pc, #272]	@ (80040d0 <main+0x1a0>)
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	440b      	add	r3, r1
 8003fca:	3310      	adds	r3, #16
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
      motors[i].pid.kd = 0.0f;
 8003fd2:	493f      	ldr	r1, [pc, #252]	@ (80040d0 <main+0x1a0>)
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	440b      	add	r3, r1
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
      motors[i].setpoint = 0.0f;
 8003fe8:	4939      	ldr	r1, [pc, #228]	@ (80040d0 <main+0x1a0>)
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3301      	adds	r3, #1
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b03      	cmp	r3, #3
 8004006:	ddce      	ble.n	8003fa6 <main+0x76>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8004008:	f7fe ff7f 	bl	8002f0a <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	f00b fe56 	bl	800fcc0 <UTIL_SEQ_Run>
//    setMotor(2, compute_pid(&motors[1].pid, map_power_to_speed(motors[1].setpoint), motors[1].measured_speed, 1.0f));
//    setMotor(3, compute_pid(&motors[2].pid, map_power_to_speed(motors[2].setpoint), motors[2].measured_speed, 1.0f));
//    setMotor(4, compute_pid(&motors[3].pid, map_power_to_speed(motors[3].setpoint), motors[3].measured_speed, 1.0f));


    setMotor(1, compute_pid(&motors[0].pid, motors[0].setpoint, motors[0].measured_speed, 1.0f));
 8004014:	4b2e      	ldr	r3, [pc, #184]	@ (80040d0 <main+0x1a0>)
 8004016:	edd3 7a00 	vldr	s15, [r3]
 800401a:	4b2d      	ldr	r3, [pc, #180]	@ (80040d0 <main+0x1a0>)
 800401c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004020:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004024:	eef0 0a47 	vmov.f32	s1, s14
 8004028:	eeb0 0a67 	vmov.f32	s0, s15
 800402c:	4829      	ldr	r0, [pc, #164]	@ (80040d4 <main+0x1a4>)
 800402e:	f7fd f92b 	bl	8001288 <compute_pid>
 8004032:	4603      	mov	r3, r0
 8004034:	4619      	mov	r1, r3
 8004036:	2001      	movs	r0, #1
 8004038:	f7fd fab6 	bl	80015a8 <setMotor>
    setMotor(2, compute_pid(&motors[1].pid, motors[1].setpoint, motors[1].measured_speed, 1.0f));
 800403c:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <main+0x1a0>)
 800403e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004042:	4b23      	ldr	r3, [pc, #140]	@ (80040d0 <main+0x1a0>)
 8004044:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004048:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800404c:	eef0 0a47 	vmov.f32	s1, s14
 8004050:	eeb0 0a67 	vmov.f32	s0, s15
 8004054:	4820      	ldr	r0, [pc, #128]	@ (80040d8 <main+0x1a8>)
 8004056:	f7fd f917 	bl	8001288 <compute_pid>
 800405a:	4603      	mov	r3, r0
 800405c:	4619      	mov	r1, r3
 800405e:	2002      	movs	r0, #2
 8004060:	f7fd faa2 	bl	80015a8 <setMotor>
    setMotor(3, compute_pid(&motors[2].pid, motors[2].setpoint, motors[2].measured_speed, 1.0f));
 8004064:	4b1a      	ldr	r3, [pc, #104]	@ (80040d0 <main+0x1a0>)
 8004066:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800406a:	4b19      	ldr	r3, [pc, #100]	@ (80040d0 <main+0x1a0>)
 800406c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8004070:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004074:	eef0 0a47 	vmov.f32	s1, s14
 8004078:	eeb0 0a67 	vmov.f32	s0, s15
 800407c:	4817      	ldr	r0, [pc, #92]	@ (80040dc <main+0x1ac>)
 800407e:	f7fd f903 	bl	8001288 <compute_pid>
 8004082:	4603      	mov	r3, r0
 8004084:	4619      	mov	r1, r3
 8004086:	2003      	movs	r0, #3
 8004088:	f7fd fa8e 	bl	80015a8 <setMotor>
    setMotor(4, compute_pid(&motors[3].pid, motors[3].setpoint, lol, 1.0f));
 800408c:	4b10      	ldr	r3, [pc, #64]	@ (80040d0 <main+0x1a0>)
 800408e:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8004092:	4b13      	ldr	r3, [pc, #76]	@ (80040e0 <main+0x1b0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	ee07 3a10 	vmov	s14, r3
 800409a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800409e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80040a2:	eef0 0a47 	vmov.f32	s1, s14
 80040a6:	eeb0 0a67 	vmov.f32	s0, s15
 80040aa:	480e      	ldr	r0, [pc, #56]	@ (80040e4 <main+0x1b4>)
 80040ac:	f7fd f8ec 	bl	8001288 <compute_pid>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4619      	mov	r1, r3
 80040b4:	2004      	movs	r0, #4
 80040b6:	f7fd fa77 	bl	80015a8 <setMotor>

    printf("\r\n");
 80040ba:	480b      	ldr	r0, [pc, #44]	@ (80040e8 <main+0x1b8>)
 80040bc:	f00d fef4 	bl	8011ea8 <puts>
    MX_APPE_Process();
 80040c0:	bf00      	nop
 80040c2:	e7a1      	b.n	8004008 <main+0xd8>
 80040c4:	200004c8 	.word	0x200004c8
 80040c8:	20000688 	.word	0x20000688
 80040cc:	2000063c 	.word	0x2000063c
 80040d0:	20000268 	.word	0x20000268
 80040d4:	20000274 	.word	0x20000274
 80040d8:	2000029c 	.word	0x2000029c
 80040dc:	200002c4 	.word	0x200002c4
 80040e0:	20000838 	.word	0x20000838
 80040e4:	200002ec 	.word	0x200002ec
 80040e8:	08014ce0 	.word	0x08014ce0

080040ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b09a      	sub	sp, #104	@ 0x68
 80040f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040f2:	f107 0320 	add.w	r3, r7, #32
 80040f6:	2248      	movs	r2, #72	@ 0x48
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f00d ffd4 	bl	80120a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	609a      	str	r2, [r3, #8]
 800410a:	60da      	str	r2, [r3, #12]
 800410c:	611a      	str	r2, [r3, #16]
 800410e:	615a      	str	r2, [r3, #20]
 8004110:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004112:	f003 fb0b 	bl	800772c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8004116:	2010      	movs	r0, #16
 8004118:	f7ff fe20 	bl	8003d5c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800411c:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <SystemClock_Config+0xc0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004124:	4a21      	ldr	r2, [pc, #132]	@ (80041ac <SystemClock_Config+0xc0>)
 8004126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <SystemClock_Config+0xc0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004138:	2327      	movs	r3, #39	@ 0x27
 800413a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800413c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004142:	2301      	movs	r3, #1
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004146:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800414a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800414c:	2301      	movs	r3, #1
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004150:	2340      	movs	r3, #64	@ 0x40
 8004152:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004154:	2300      	movs	r3, #0
 8004156:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8004158:	23a0      	movs	r3, #160	@ 0xa0
 800415a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800415c:	2300      	movs	r3, #0
 800415e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004160:	f107 0320 	add.w	r3, r7, #32
 8004164:	4618      	mov	r0, r3
 8004166:	f003 fe75 	bl	8007e54 <HAL_RCC_OscConfig>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004170:	f000 fa74 	bl	800465c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004174:	236f      	movs	r3, #111	@ 0x6f
 8004176:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004178:	2300      	movs	r3, #0
 800417a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8004188:	2300      	movs	r3, #0
 800418a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	2101      	movs	r1, #1
 8004194:	4618      	mov	r0, r3
 8004196:	f004 f9d1 	bl	800853c <HAL_RCC_ClockConfig>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80041a0:	f000 fa5c 	bl	800465c <Error_Handler>
  }
}
 80041a4:	bf00      	nop
 80041a6:	3768      	adds	r7, #104	@ 0x68
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	58000400 	.word	0x58000400

080041b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b094      	sub	sp, #80	@ 0x50
 80041b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041b6:	463b      	mov	r3, r7
 80041b8:	2250      	movs	r2, #80	@ 0x50
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f00d ff73 	bl	80120a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80041c2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80041c6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80041c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041cc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80041ce:	2300      	movs	r3, #0
 80041d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041d6:	463b      	mov	r3, r7
 80041d8:	4618      	mov	r0, r3
 80041da:	f004 fdec 	bl	8008db6 <HAL_RCCEx_PeriphCLKConfig>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80041e4:	f000 fa3a 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80041e8:	bf00      	nop
 80041ea:	3750      	adds	r7, #80	@ 0x50
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <MX_I2C1_Init+0x74>)
 80041f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004268 <MX_I2C1_Init+0x78>)
 80041f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80041fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <MX_I2C1_Init+0x74>)
 80041fc:	4a1b      	ldr	r2, [pc, #108]	@ (800426c <MX_I2C1_Init+0x7c>)
 80041fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004200:	4b18      	ldr	r3, [pc, #96]	@ (8004264 <MX_I2C1_Init+0x74>)
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004206:	4b17      	ldr	r3, [pc, #92]	@ (8004264 <MX_I2C1_Init+0x74>)
 8004208:	2201      	movs	r2, #1
 800420a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800420c:	4b15      	ldr	r3, [pc, #84]	@ (8004264 <MX_I2C1_Init+0x74>)
 800420e:	2200      	movs	r2, #0
 8004210:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004212:	4b14      	ldr	r3, [pc, #80]	@ (8004264 <MX_I2C1_Init+0x74>)
 8004214:	2200      	movs	r2, #0
 8004216:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004218:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <MX_I2C1_Init+0x74>)
 800421a:	2200      	movs	r2, #0
 800421c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800421e:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <MX_I2C1_Init+0x74>)
 8004220:	2200      	movs	r2, #0
 8004222:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004224:	4b0f      	ldr	r3, [pc, #60]	@ (8004264 <MX_I2C1_Init+0x74>)
 8004226:	2200      	movs	r2, #0
 8004228:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800422a:	480e      	ldr	r0, [pc, #56]	@ (8004264 <MX_I2C1_Init+0x74>)
 800422c:	f001 ff8c 	bl	8006148 <HAL_I2C_Init>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004236:	f000 fa11 	bl	800465c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800423a:	2100      	movs	r1, #0
 800423c:	4809      	ldr	r0, [pc, #36]	@ (8004264 <MX_I2C1_Init+0x74>)
 800423e:	f003 f957 	bl	80074f0 <HAL_I2CEx_ConfigAnalogFilter>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004248:	f000 fa08 	bl	800465c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800424c:	2100      	movs	r1, #0
 800424e:	4805      	ldr	r0, [pc, #20]	@ (8004264 <MX_I2C1_Init+0x74>)
 8004250:	f003 f999 	bl	8007586 <HAL_I2CEx_ConfigDigitalFilter>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800425a:	f000 f9ff 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200004c8 	.word	0x200004c8
 8004268:	40005400 	.word	0x40005400
 800426c:	00707cbb 	.word	0x00707cbb

08004270 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8004274:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <MX_IPCC_Init+0x20>)
 8004276:	4a07      	ldr	r2, [pc, #28]	@ (8004294 <MX_IPCC_Init+0x24>)
 8004278:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800427a:	4805      	ldr	r0, [pc, #20]	@ (8004290 <MX_IPCC_Init+0x20>)
 800427c:	f003 f9d0 	bl	8007620 <HAL_IPCC_Init>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8004286:	f000 f9e9 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	200005dc 	.word	0x200005dc
 8004294:	58000c00 	.word	0x58000c00

08004298 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80042ac:	4b16      	ldr	r3, [pc, #88]	@ (8004308 <MX_RTC_Init+0x60>)
 80042ae:	4a17      	ldr	r2, [pc, #92]	@ (800430c <MX_RTC_Init+0x64>)
 80042b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042b2:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <MX_RTC_Init+0x60>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80042b8:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <MX_RTC_Init+0x60>)
 80042ba:	220f      	movs	r2, #15
 80042bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80042be:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <MX_RTC_Init+0x60>)
 80042c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80042c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80042c6:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <MX_RTC_Init+0x60>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <MX_RTC_Init+0x60>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <MX_RTC_Init+0x60>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <MX_RTC_Init+0x60>)
 80042da:	2200      	movs	r2, #0
 80042dc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80042de:	480a      	ldr	r0, [pc, #40]	@ (8004308 <MX_RTC_Init+0x60>)
 80042e0:	f004 fff0 	bl	80092c4 <HAL_RTC_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80042ea:	f000 f9b7 	bl	800465c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	4805      	ldr	r0, [pc, #20]	@ (8004308 <MX_RTC_Init+0x60>)
 80042f4:	f005 f8e6 	bl	80094c4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80042fe:	f000 f9ad 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000618 	.word	0x20000618
 800430c:	40002800 	.word	0x40002800

08004310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	@ 0x38
 8004314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	609a      	str	r2, [r3, #8]
 8004322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004324:	f107 031c 	add.w	r3, r7, #28
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004330:	463b      	mov	r3, r7
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	60da      	str	r2, [r3, #12]
 800433c:	611a      	str	r2, [r3, #16]
 800433e:	615a      	str	r2, [r3, #20]
 8004340:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004342:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <MX_TIM2_Init+0x128>)
 8004344:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004348:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 800434a:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <MX_TIM2_Init+0x128>)
 800434c:	221f      	movs	r2, #31
 800434e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004350:	4b39      	ldr	r3, [pc, #228]	@ (8004438 <MX_TIM2_Init+0x128>)
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8004356:	4b38      	ldr	r3, [pc, #224]	@ (8004438 <MX_TIM2_Init+0x128>)
 8004358:	2263      	movs	r2, #99	@ 0x63
 800435a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800435c:	4b36      	ldr	r3, [pc, #216]	@ (8004438 <MX_TIM2_Init+0x128>)
 800435e:	2200      	movs	r2, #0
 8004360:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004362:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <MX_TIM2_Init+0x128>)
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004368:	4833      	ldr	r0, [pc, #204]	@ (8004438 <MX_TIM2_Init+0x128>)
 800436a:	f005 f967 	bl	800963c <HAL_TIM_Base_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004374:	f000 f972 	bl	800465c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800437e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004382:	4619      	mov	r1, r3
 8004384:	482c      	ldr	r0, [pc, #176]	@ (8004438 <MX_TIM2_Init+0x128>)
 8004386:	f005 fd57 	bl	8009e38 <HAL_TIM_ConfigClockSource>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004390:	f000 f964 	bl	800465c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004394:	4828      	ldr	r0, [pc, #160]	@ (8004438 <MX_TIM2_Init+0x128>)
 8004396:	f005 f9f7 	bl	8009788 <HAL_TIM_PWM_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80043a0:	f000 f95c 	bl	800465c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043ac:	f107 031c 	add.w	r3, r7, #28
 80043b0:	4619      	mov	r1, r3
 80043b2:	4821      	ldr	r0, [pc, #132]	@ (8004438 <MX_TIM2_Init+0x128>)
 80043b4:	f006 f9e2 	bl	800a77c <HAL_TIMEx_MasterConfigSynchronization>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80043be:	f000 f94d 	bl	800465c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043c2:	2360      	movs	r3, #96	@ 0x60
 80043c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043d2:	463b      	mov	r3, r7
 80043d4:	2200      	movs	r2, #0
 80043d6:	4619      	mov	r1, r3
 80043d8:	4817      	ldr	r0, [pc, #92]	@ (8004438 <MX_TIM2_Init+0x128>)
 80043da:	f005 fc19 	bl	8009c10 <HAL_TIM_PWM_ConfigChannel>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80043e4:	f000 f93a 	bl	800465c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80043e8:	463b      	mov	r3, r7
 80043ea:	2204      	movs	r2, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4812      	ldr	r0, [pc, #72]	@ (8004438 <MX_TIM2_Init+0x128>)
 80043f0:	f005 fc0e 	bl	8009c10 <HAL_TIM_PWM_ConfigChannel>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80043fa:	f000 f92f 	bl	800465c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043fe:	463b      	mov	r3, r7
 8004400:	2208      	movs	r2, #8
 8004402:	4619      	mov	r1, r3
 8004404:	480c      	ldr	r0, [pc, #48]	@ (8004438 <MX_TIM2_Init+0x128>)
 8004406:	f005 fc03 	bl	8009c10 <HAL_TIM_PWM_ConfigChannel>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8004410:	f000 f924 	bl	800465c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004414:	463b      	mov	r3, r7
 8004416:	220c      	movs	r2, #12
 8004418:	4619      	mov	r1, r3
 800441a:	4807      	ldr	r0, [pc, #28]	@ (8004438 <MX_TIM2_Init+0x128>)
 800441c:	f005 fbf8 	bl	8009c10 <HAL_TIM_PWM_ConfigChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8004426:	f000 f919 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800442a:	4803      	ldr	r0, [pc, #12]	@ (8004438 <MX_TIM2_Init+0x128>)
 800442c:	f000 fb12 	bl	8004a54 <HAL_TIM_MspPostInit>

}
 8004430:	bf00      	nop
 8004432:	3738      	adds	r7, #56	@ 0x38
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	2000063c 	.word	0x2000063c

0800443c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004440:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <MX_TIM16_Init+0x44>)
 8004442:	4a10      	ldr	r2, [pc, #64]	@ (8004484 <MX_TIM16_Init+0x48>)
 8004444:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8004446:	4b0e      	ldr	r3, [pc, #56]	@ (8004480 <MX_TIM16_Init+0x44>)
 8004448:	221f      	movs	r2, #31
 800444a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800444c:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <MX_TIM16_Init+0x44>)
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8004452:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <MX_TIM16_Init+0x44>)
 8004454:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004458:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800445a:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <MX_TIM16_Init+0x44>)
 800445c:	2200      	movs	r2, #0
 800445e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004460:	4b07      	ldr	r3, [pc, #28]	@ (8004480 <MX_TIM16_Init+0x44>)
 8004462:	2200      	movs	r2, #0
 8004464:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004466:	4b06      	ldr	r3, [pc, #24]	@ (8004480 <MX_TIM16_Init+0x44>)
 8004468:	2200      	movs	r2, #0
 800446a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800446c:	4804      	ldr	r0, [pc, #16]	@ (8004480 <MX_TIM16_Init+0x44>)
 800446e:	f005 f8e5 	bl	800963c <HAL_TIM_Base_Init>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004478:	f000 f8f0 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000688 	.word	0x20000688
 8004484:	40014400 	.word	0x40014400

08004488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800448c:	4b23      	ldr	r3, [pc, #140]	@ (800451c <MX_USART1_UART_Init+0x94>)
 800448e:	4a24      	ldr	r2, [pc, #144]	@ (8004520 <MX_USART1_UART_Init+0x98>)
 8004490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004492:	4b22      	ldr	r3, [pc, #136]	@ (800451c <MX_USART1_UART_Init+0x94>)
 8004494:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800449a:	4b20      	ldr	r3, [pc, #128]	@ (800451c <MX_USART1_UART_Init+0x94>)
 800449c:	2200      	movs	r2, #0
 800449e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044a0:	4b1e      	ldr	r3, [pc, #120]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044a6:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044ac:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044ae:	220c      	movs	r2, #12
 80044b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044b2:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80044b8:	4b18      	ldr	r3, [pc, #96]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80044be:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044c0:	4b16      	ldr	r3, [pc, #88]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80044c6:	4b15      	ldr	r3, [pc, #84]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044cc:	4b13      	ldr	r3, [pc, #76]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044d2:	4812      	ldr	r0, [pc, #72]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044d4:	f006 f9f0 	bl	800a8b8 <HAL_UART_Init>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80044de:	f000 f8bd 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044e2:	2100      	movs	r1, #0
 80044e4:	480d      	ldr	r0, [pc, #52]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044e6:	f008 fa64 	bl	800c9b2 <HAL_UARTEx_SetTxFifoThreshold>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80044f0:	f000 f8b4 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044f4:	2100      	movs	r1, #0
 80044f6:	4809      	ldr	r0, [pc, #36]	@ (800451c <MX_USART1_UART_Init+0x94>)
 80044f8:	f008 fa99 	bl	800ca2e <HAL_UARTEx_SetRxFifoThreshold>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8004502:	f000 f8ab 	bl	800465c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004506:	4805      	ldr	r0, [pc, #20]	@ (800451c <MX_USART1_UART_Init+0x94>)
 8004508:	f008 fa1a 	bl	800c940 <HAL_UARTEx_DisableFifoMode>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8004512:	f000 f8a3 	bl	800465c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	200006d4 	.word	0x200006d4
 8004520:	40013800 	.word	0x40013800

08004524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004528:	2004      	movs	r0, #4
 800452a:	f7ff fc2d 	bl	8003d88 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800452e:	2001      	movs	r0, #1
 8004530:	f7ff fc2a 	bl	8003d88 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004534:	2200      	movs	r2, #0
 8004536:	2100      	movs	r1, #0
 8004538:	200b      	movs	r0, #11
 800453a:	f000 ff2e 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800453e:	200b      	movs	r0, #11
 8004540:	f000 ff45 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004544:	2200      	movs	r2, #0
 8004546:	2100      	movs	r1, #0
 8004548:	200c      	movs	r0, #12
 800454a:	f000 ff26 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800454e:	200c      	movs	r0, #12
 8004550:	f000 ff3d 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004554:	2200      	movs	r2, #0
 8004556:	2100      	movs	r1, #0
 8004558:	200d      	movs	r0, #13
 800455a:	f000 ff1e 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800455e:	200d      	movs	r0, #13
 8004560:	f000 ff35 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004564:	2200      	movs	r2, #0
 8004566:	2100      	movs	r1, #0
 8004568:	200e      	movs	r0, #14
 800456a:	f000 ff16 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800456e:	200e      	movs	r0, #14
 8004570:	f000 ff2d 	bl	80053ce <HAL_NVIC_EnableIRQ>

}
 8004574:	bf00      	nop
 8004576:	bd80      	pop	{r7, pc}

08004578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457e:	1d3b      	adds	r3, r7, #4
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800458c:	2004      	movs	r0, #4
 800458e:	f7ff fc14 	bl	8003dba <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004592:	2002      	movs	r0, #2
 8004594:	f7ff fc11 	bl	8003dba <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004598:	2001      	movs	r0, #1
 800459a:	f7ff fc0e 	bl	8003dba <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800459e:	2008      	movs	r0, #8
 80045a0:	f7ff fc0b 	bl	8003dba <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80045a4:	2200      	movs	r2, #0
 80045a6:	2120      	movs	r1, #32
 80045a8:	4829      	ldr	r0, [pc, #164]	@ (8004650 <MX_GPIO_Init+0xd8>)
 80045aa:	f001 fd79 	bl	80060a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80045ae:	2310      	movs	r3, #16
 80045b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4825      	ldr	r0, [pc, #148]	@ (8004654 <MX_GPIO_Init+0xdc>)
 80045c0:	f001 fb20 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_Coder_Pin M2_Coder_Pin M3_Coder_Pin */
  GPIO_InitStruct.Pin = M4_Coder_Pin|M2_Coder_Pin|M3_Coder_Pin;
 80045c4:	f24c 0302 	movw	r3, #49154	@ 0xc002
 80045c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80045ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	481d      	ldr	r0, [pc, #116]	@ (8004650 <MX_GPIO_Init+0xd8>)
 80045da:	f001 fb13 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_Coder_Pin */
  GPIO_InitStruct.Pin = M1_Coder_Pin;
 80045de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80045e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045ea:	2301      	movs	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(M1_Coder_GPIO_Port, &GPIO_InitStruct);
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4817      	ldr	r0, [pc, #92]	@ (8004650 <MX_GPIO_Init+0xd8>)
 80045f4:	f001 fb06 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80045f8:	2303      	movs	r3, #3
 80045fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	4619      	mov	r1, r3
 8004608:	4813      	ldr	r0, [pc, #76]	@ (8004658 <MX_GPIO_Init+0xe0>)
 800460a:	f001 fafb 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800460e:	2320      	movs	r3, #32
 8004610:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004612:	2301      	movs	r3, #1
 8004614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800461e:	1d3b      	adds	r3, r7, #4
 8004620:	4619      	mov	r1, r3
 8004622:	480b      	ldr	r0, [pc, #44]	@ (8004650 <MX_GPIO_Init+0xd8>)
 8004624:	f001 faee 	bl	8005c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004628:	2200      	movs	r2, #0
 800462a:	2100      	movs	r1, #0
 800462c:	2007      	movs	r0, #7
 800462e:	f000 feb4 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004632:	2007      	movs	r0, #7
 8004634:	f000 fecb 	bl	80053ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004638:	2200      	movs	r2, #0
 800463a:	2100      	movs	r1, #0
 800463c:	2028      	movs	r0, #40	@ 0x28
 800463e:	f000 feac 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004642:	2028      	movs	r0, #40	@ 0x28
 8004644:	f000 fec3 	bl	80053ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004648:	bf00      	nop
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	48000400 	.word	0x48000400
 8004654:	48000800 	.word	0x48000800
 8004658:	48000c00 	.word	0x48000c00

0800465c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004660:	b672      	cpsid	i
}
 8004662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <Error_Handler+0x8>

08004668 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800466c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_AHB2_GRP1_EnableClock>:
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004696:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004698:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4313      	orrs	r3, r2
 80046a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4013      	ands	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046ae:	68fb      	ldr	r3, [r7, #12]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_AHB3_GRP1_EnableClock>:
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80046c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4013      	ands	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046e0:	68fb      	ldr	r3, [r7, #12]
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <LL_APB1_GRP1_EnableClock>:
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80046f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4313      	orrs	r3, r2
 8004704:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800470a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4013      	ands	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004712:	68fb      	ldr	r3, [r7, #12]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_APB1_GRP1_DisableClock>:
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	43db      	mvns	r3, r3
 8004732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004736:	4013      	ands	r3, r2
 8004738:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_APB2_GRP1_EnableClock>:
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004752:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004754:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4313      	orrs	r3, r2
 800475c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800475e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004762:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4013      	ands	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800476a:	68fb      	ldr	r3, [r7, #12]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800477c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004780:	f7ff ff9c 	bl	80046bc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8004784:	2200      	movs	r2, #0
 8004786:	2100      	movs	r1, #0
 8004788:	202e      	movs	r0, #46	@ 0x2e
 800478a:	f000 fe06 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800478e:	202e      	movs	r0, #46	@ 0x2e
 8004790:	f000 fe1d 	bl	80053ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004794:	bf00      	nop
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b09c      	sub	sp, #112	@ 0x70
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047b0:	f107 030c 	add.w	r3, r7, #12
 80047b4:	2250      	movs	r2, #80	@ 0x50
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f00d fc75 	bl	80120a8 <memset>
  if(hi2c->Instance==I2C1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a48      	ldr	r2, [pc, #288]	@ (80048e4 <HAL_I2C_MspInit+0x14c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	f040 8089 	bne.w	80048dc <HAL_I2C_MspInit+0x144>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80047ca:	2304      	movs	r3, #4
 80047cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80047ce:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80047d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047d4:	f107 030c 	add.w	r3, r7, #12
 80047d8:	4618      	mov	r0, r3
 80047da:	f004 faec 	bl	8008db6 <HAL_RCCEx_PeriphCLKConfig>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80047e4:	f7ff ff3a 	bl	800465c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e8:	2002      	movs	r0, #2
 80047ea:	f7ff ff4e 	bl	800468a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80047f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047f4:	2312      	movs	r3, #18
 80047f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f8:	2301      	movs	r3, #1
 80047fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fc:	2300      	movs	r3, #0
 80047fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004800:	2304      	movs	r3, #4
 8004802:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004804:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004808:	4619      	mov	r1, r3
 800480a:	4837      	ldr	r0, [pc, #220]	@ (80048e8 <HAL_I2C_MspInit+0x150>)
 800480c:	f001 f9fa 	bl	8005c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004810:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004814:	f7ff ff6b 	bl	80046ee <LL_APB1_GRP1_EnableClock>

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8004818:	4b34      	ldr	r3, [pc, #208]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 800481a:	4a35      	ldr	r2, [pc, #212]	@ (80048f0 <HAL_I2C_MspInit+0x158>)
 800481c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800481e:	4b33      	ldr	r3, [pc, #204]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 8004820:	220b      	movs	r2, #11
 8004822:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004824:	4b31      	ldr	r3, [pc, #196]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 8004826:	2210      	movs	r2, #16
 8004828:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800482a:	4b30      	ldr	r3, [pc, #192]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 800482c:	2200      	movs	r2, #0
 800482e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004830:	4b2e      	ldr	r3, [pc, #184]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 8004832:	2280      	movs	r2, #128	@ 0x80
 8004834:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004836:	4b2d      	ldr	r3, [pc, #180]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 8004838:	2200      	movs	r2, #0
 800483a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800483c:	4b2b      	ldr	r3, [pc, #172]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 800483e:	2200      	movs	r2, #0
 8004840:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004842:	4b2a      	ldr	r3, [pc, #168]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 8004844:	2200      	movs	r2, #0
 8004846:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004848:	4b28      	ldr	r3, [pc, #160]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 800484a:	2200      	movs	r2, #0
 800484c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800484e:	4827      	ldr	r0, [pc, #156]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 8004850:	f000 fe02 	bl	8005458 <HAL_DMA_Init>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 800485a:	f7ff feff 	bl	800465c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a22      	ldr	r2, [pc, #136]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 8004862:	639a      	str	r2, [r3, #56]	@ 0x38
 8004864:	4a21      	ldr	r2, [pc, #132]	@ (80048ec <HAL_I2C_MspInit+0x154>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 800486a:	4b22      	ldr	r3, [pc, #136]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 800486c:	4a22      	ldr	r2, [pc, #136]	@ (80048f8 <HAL_I2C_MspInit+0x160>)
 800486e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8004870:	4b20      	ldr	r3, [pc, #128]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 8004872:	220a      	movs	r2, #10
 8004874:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004876:	4b1f      	ldr	r3, [pc, #124]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 8004878:	2200      	movs	r2, #0
 800487a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800487c:	4b1d      	ldr	r3, [pc, #116]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 800487e:	2200      	movs	r2, #0
 8004880:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004882:	4b1c      	ldr	r3, [pc, #112]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 8004884:	2280      	movs	r2, #128	@ 0x80
 8004886:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004888:	4b1a      	ldr	r3, [pc, #104]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 800488a:	2200      	movs	r2, #0
 800488c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800488e:	4b19      	ldr	r3, [pc, #100]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 8004890:	2200      	movs	r2, #0
 8004892:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004894:	4b17      	ldr	r3, [pc, #92]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800489a:	4b16      	ldr	r3, [pc, #88]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 800489c:	2200      	movs	r2, #0
 800489e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80048a0:	4814      	ldr	r0, [pc, #80]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 80048a2:	f000 fdd9 	bl	8005458 <HAL_DMA_Init>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_MspInit+0x118>
    {
      Error_Handler();
 80048ac:	f7ff fed6 	bl	800465c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a10      	ldr	r2, [pc, #64]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 80048b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048b6:	4a0f      	ldr	r2, [pc, #60]	@ (80048f4 <HAL_I2C_MspInit+0x15c>)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80048bc:	2200      	movs	r2, #0
 80048be:	2100      	movs	r1, #0
 80048c0:	201e      	movs	r0, #30
 80048c2:	f000 fd6a 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80048c6:	201e      	movs	r0, #30
 80048c8:	f000 fd81 	bl	80053ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80048cc:	2200      	movs	r2, #0
 80048ce:	2100      	movs	r1, #0
 80048d0:	201f      	movs	r0, #31
 80048d2:	f000 fd62 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80048d6:	201f      	movs	r0, #31
 80048d8:	f000 fd79 	bl	80053ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80048dc:	bf00      	nop
 80048de:	3770      	adds	r7, #112	@ 0x70
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40005400 	.word	0x40005400
 80048e8:	48000400 	.word	0x48000400
 80048ec:	2000051c 	.word	0x2000051c
 80048f0:	40020030 	.word	0x40020030
 80048f4:	2000057c 	.word	0x2000057c
 80048f8:	40020044 	.word	0x40020044

080048fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a12      	ldr	r2, [pc, #72]	@ (8004954 <HAL_I2C_MspDeInit+0x58>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d11d      	bne.n	800494a <HAL_I2C_MspDeInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800490e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004912:	f7ff ff05 	bl	8004720 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004916:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800491a:	480f      	ldr	r0, [pc, #60]	@ (8004958 <HAL_I2C_MspDeInit+0x5c>)
 800491c:	f001 fae2 	bl	8005ee4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004924:	480c      	ldr	r0, [pc, #48]	@ (8004958 <HAL_I2C_MspDeInit+0x5c>)
 8004926:	f001 fadd 	bl	8005ee4 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fe3a 	bl	80055a8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fe35 	bl	80055a8 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800493e:	201e      	movs	r0, #30
 8004940:	f000 fd53 	bl	80053ea <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004944:	201f      	movs	r0, #31
 8004946:	f000 fd50 	bl	80053ea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40005400 	.word	0x40005400
 8004958:	48000400 	.word	0x48000400

0800495c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a0d      	ldr	r2, [pc, #52]	@ (80049a0 <HAL_IPCC_MspInit+0x44>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d113      	bne.n	8004996 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800496e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004972:	f7ff fea3 	bl	80046bc <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8004976:	2200      	movs	r2, #0
 8004978:	2100      	movs	r1, #0
 800497a:	202c      	movs	r0, #44	@ 0x2c
 800497c:	f000 fd0d 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004980:	202c      	movs	r0, #44	@ 0x2c
 8004982:	f000 fd24 	bl	80053ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8004986:	2200      	movs	r2, #0
 8004988:	2100      	movs	r1, #0
 800498a:	202d      	movs	r0, #45	@ 0x2d
 800498c:	f000 fd05 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8004990:	202d      	movs	r0, #45	@ 0x2d
 8004992:	f000 fd1c 	bl	80053ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	58000c00 	.word	0x58000c00

080049a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b096      	sub	sp, #88	@ 0x58
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	2250      	movs	r2, #80	@ 0x50
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f00d fb77 	bl	80120a8 <memset>
  if(hrtc->Instance==RTC)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a12      	ldr	r2, [pc, #72]	@ (8004a08 <HAL_RTC_MspInit+0x64>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d11d      	bne.n	8004a00 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80049c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049c8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80049ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049d0:	f107 0308 	add.w	r3, r7, #8
 80049d4:	4618      	mov	r0, r3
 80049d6:	f004 f9ee 	bl	8008db6 <HAL_RCCEx_PeriphCLKConfig>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80049e0:	f7ff fe3c 	bl	800465c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80049e4:	f7ff fe40 	bl	8004668 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80049e8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80049ec:	f7ff fe7f 	bl	80046ee <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80049f0:	2200      	movs	r2, #0
 80049f2:	2100      	movs	r1, #0
 80049f4:	2003      	movs	r0, #3
 80049f6:	f000 fcd0 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80049fa:	2003      	movs	r0, #3
 80049fc:	f000 fce7 	bl	80053ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004a00:	bf00      	nop
 8004a02:	3758      	adds	r7, #88	@ 0x58
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40002800 	.word	0x40002800

08004a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1c:	d103      	bne.n	8004a26 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a1e:	2001      	movs	r0, #1
 8004a20:	f7ff fe65 	bl	80046ee <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004a24:	e010      	b.n	8004a48 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM16)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a09      	ldr	r2, [pc, #36]	@ (8004a50 <HAL_TIM_Base_MspInit+0x44>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10b      	bne.n	8004a48 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004a30:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004a34:	f7ff fe87 	bl	8004746 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	2019      	movs	r0, #25
 8004a3e:	f000 fcac 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004a42:	2019      	movs	r0, #25
 8004a44:	f000 fcc3 	bl	80053ce <HAL_NVIC_EnableIRQ>
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40014400 	.word	0x40014400

08004a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5c:	f107 030c 	add.w	r3, r7, #12
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a74:	d113      	bne.n	8004a9e <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a76:	2001      	movs	r0, #1
 8004a78:	f7ff fe07 	bl	800468a <LL_AHB2_GRP1_EnableClock>
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004a7c:	230f      	movs	r3, #15
 8004a7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a90:	f107 030c 	add.w	r3, r7, #12
 8004a94:	4619      	mov	r1, r3
 8004a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a9a:	f001 f8b3 	bl	8005c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004a9e:	bf00      	nop
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b09c      	sub	sp, #112	@ 0x70
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	2250      	movs	r2, #80	@ 0x50
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f00d faed 	bl	80120a8 <memset>
  if(huart->Instance==USART1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a43      	ldr	r2, [pc, #268]	@ (8004be0 <HAL_UART_MspInit+0x138>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d17f      	bne.n	8004bd8 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004adc:	2300      	movs	r3, #0
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f004 f966 	bl	8008db6 <HAL_RCCEx_PeriphCLKConfig>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004af0:	f7ff fdb4 	bl	800465c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004af4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004af8:	f7ff fe25 	bl	8004746 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004afc:	2002      	movs	r0, #2
 8004afe:	f7ff fdc4 	bl	800468a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004b02:	23c0      	movs	r3, #192	@ 0xc0
 8004b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b06:	2302      	movs	r3, #2
 8004b08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b12:	2307      	movs	r3, #7
 8004b14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4831      	ldr	r0, [pc, #196]	@ (8004be4 <HAL_UART_MspInit+0x13c>)
 8004b1e:	f001 f871 	bl	8005c04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8004b22:	4b31      	ldr	r3, [pc, #196]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b24:	4a31      	ldr	r2, [pc, #196]	@ (8004bec <HAL_UART_MspInit+0x144>)
 8004b26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004b28:	4b2f      	ldr	r3, [pc, #188]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b2a:	220e      	movs	r2, #14
 8004b2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b34:	4b2c      	ldr	r3, [pc, #176]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b3c:	2280      	movs	r2, #128	@ 0x80
 8004b3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b40:	4b29      	ldr	r3, [pc, #164]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b46:	4b28      	ldr	r3, [pc, #160]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004b4c:	4b26      	ldr	r3, [pc, #152]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b52:	4b25      	ldr	r3, [pc, #148]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004b58:	4823      	ldr	r0, [pc, #140]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b5a:	f000 fc7d 	bl	8005458 <HAL_DMA_Init>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8004b64:	f7ff fd7a 	bl	800465c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004b70:	4a1d      	ldr	r2, [pc, #116]	@ (8004be8 <HAL_UART_MspInit+0x140>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004b76:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004b78:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf4 <HAL_UART_MspInit+0x14c>)
 8004b7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004b7e:	220f      	movs	r2, #15
 8004b80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b82:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004b84:	2210      	movs	r2, #16
 8004b86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b88:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b8e:	4b18      	ldr	r3, [pc, #96]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004b90:	2280      	movs	r2, #128	@ 0x80
 8004b92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b94:	4b16      	ldr	r3, [pc, #88]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b9a:	4b15      	ldr	r3, [pc, #84]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004ba0:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ba6:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004bac:	4810      	ldr	r0, [pc, #64]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004bae:	f000 fc53 	bl	8005458 <HAL_DMA_Init>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8004bb8:	f7ff fd50 	bl	800465c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004bc0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf0 <HAL_UART_MspInit+0x148>)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2100      	movs	r1, #0
 8004bcc:	2024      	movs	r0, #36	@ 0x24
 8004bce:	f000 fbe4 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004bd2:	2024      	movs	r0, #36	@ 0x24
 8004bd4:	f000 fbfb 	bl	80053ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004bd8:	bf00      	nop
 8004bda:	3770      	adds	r7, #112	@ 0x70
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40013800 	.word	0x40013800
 8004be4:	48000400 	.word	0x48000400
 8004be8:	20000768 	.word	0x20000768
 8004bec:	40020008 	.word	0x40020008
 8004bf0:	200007c8 	.word	0x200007c8
 8004bf4:	4002001c 	.word	0x4002001c

08004bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <NMI_Handler+0x4>

08004c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c04:	bf00      	nop
 8004c06:	e7fd      	b.n	8004c04 <HardFault_Handler+0x4>

08004c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c0c:	bf00      	nop
 8004c0e:	e7fd      	b.n	8004c0c <MemManage_Handler+0x4>

08004c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c14:	bf00      	nop
 8004c16:	e7fd      	b.n	8004c14 <BusFault_Handler+0x4>

08004c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c1c:	bf00      	nop
 8004c1e:	e7fd      	b.n	8004c1c <UsageFault_Handler+0x4>

08004c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c32:	bf00      	nop
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c40:	bf00      	nop
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c4e:	f000 fa31 	bl	80050b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004c5a:	f7fe fd1f 	bl	800369c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M4_Coder_Pin);
 8004c66:	2002      	movs	r0, #2
 8004c68:	f001 fa32 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004c6c:	bf00      	nop
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004c74:	4802      	ldr	r0, [pc, #8]	@ (8004c80 <DMA1_Channel1_IRQHandler+0x10>)
 8004c76:	f000 fe66 	bl	8005946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000768 	.word	0x20000768

08004c84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004c88:	4802      	ldr	r0, [pc, #8]	@ (8004c94 <DMA1_Channel2_IRQHandler+0x10>)
 8004c8a:	f000 fe5c 	bl	8005946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200007c8 	.word	0x200007c8

08004c98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004c9c:	4802      	ldr	r0, [pc, #8]	@ (8004ca8 <DMA1_Channel3_IRQHandler+0x10>)
 8004c9e:	f000 fe52 	bl	8005946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	2000051c 	.word	0x2000051c

08004cac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004cb0:	4802      	ldr	r0, [pc, #8]	@ (8004cbc <DMA1_Channel4_IRQHandler+0x10>)
 8004cb2:	f000 fe48 	bl	8005946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	2000057c 	.word	0x2000057c

08004cc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004cc4:	4802      	ldr	r0, [pc, #8]	@ (8004cd0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004cc6:	f004 fe9b 	bl	8009a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000688 	.word	0x20000688

08004cd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004cd8:	4802      	ldr	r0, [pc, #8]	@ (8004ce4 <I2C1_EV_IRQHandler+0x10>)
 8004cda:	f001 fc17 	bl	800650c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004cde:	bf00      	nop
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200004c8 	.word	0x200004c8

08004ce8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004cec:	4802      	ldr	r0, [pc, #8]	@ (8004cf8 <I2C1_ER_IRQHandler+0x10>)
 8004cee:	f001 fc27 	bl	8006540 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200004c8 	.word	0x200004c8

08004cfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d00:	4802      	ldr	r0, [pc, #8]	@ (8004d0c <USART1_IRQHandler+0x10>)
 8004d02:	f005 fef5 	bl	800aaf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d06:	bf00      	nop
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200006d4 	.word	0x200006d4

08004d10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_Coder_Pin);
 8004d14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004d18:	f001 f9da 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M2_Coder_Pin);
 8004d1c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004d20:	f001 f9d6 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(M3_Coder_Pin);
 8004d24:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004d28:	f001 f9d2 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d2c:	bf00      	nop
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8004d34:	f00a fe44 	bl	800f9c0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8004d38:	bf00      	nop
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004d40:	f00a fe74 	bl	800fa2c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004d4c:	f001 f9d8 	bl	8006100 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8004d50:	bf00      	nop
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return 1;
 8004d58:	2301      	movs	r3, #1
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <_kill>:

int _kill(int pid, int sig)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d6e:	f00d fa0f 	bl	8012190 <__errno>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2216      	movs	r2, #22
 8004d76:	601a      	str	r2, [r3, #0]
  return -1;
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <_exit>:

void _exit (int status)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ffe7 	bl	8004d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <_exit+0x12>

08004d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b086      	sub	sp, #24
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e00a      	b.n	8004dc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dac:	f3af 8000 	nop.w
 8004db0:	4601      	mov	r1, r0
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	60ba      	str	r2, [r7, #8]
 8004db8:	b2ca      	uxtb	r2, r1
 8004dba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	dbf0      	blt.n	8004dac <_read+0x12>
  }

  return len;
 8004dca:	687b      	ldr	r3, [r7, #4]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004dfc:	605a      	str	r2, [r3, #4]
  return 0;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <_isatty>:

int _isatty(int file)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e14:	2301      	movs	r3, #1
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e44:	4a14      	ldr	r2, [pc, #80]	@ (8004e98 <_sbrk+0x5c>)
 8004e46:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <_sbrk+0x60>)
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e50:	4b13      	ldr	r3, [pc, #76]	@ (8004ea0 <_sbrk+0x64>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e58:	4b11      	ldr	r3, [pc, #68]	@ (8004ea0 <_sbrk+0x64>)
 8004e5a:	4a12      	ldr	r2, [pc, #72]	@ (8004ea4 <_sbrk+0x68>)
 8004e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <_sbrk+0x64>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d207      	bcs.n	8004e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e6c:	f00d f990 	bl	8012190 <__errno>
 8004e70:	4603      	mov	r3, r0
 8004e72:	220c      	movs	r2, #12
 8004e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7a:	e009      	b.n	8004e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e7c:	4b08      	ldr	r3, [pc, #32]	@ (8004ea0 <_sbrk+0x64>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e82:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <_sbrk+0x64>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4413      	add	r3, r2
 8004e8a:	4a05      	ldr	r2, [pc, #20]	@ (8004ea0 <_sbrk+0x64>)
 8004e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20030000 	.word	0x20030000
 8004e9c:	00000400 	.word	0x00000400
 8004ea0:	2000083c 	.word	0x2000083c
 8004ea4:	20000b48 	.word	0x20000b48

08004ea8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004eac:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <SystemInit+0x98>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	4a23      	ldr	r2, [pc, #140]	@ (8004f40 <SystemInit+0x98>)
 8004eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8004ed4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ee0:	4b18      	ldr	r3, [pc, #96]	@ (8004f44 <SystemInit+0x9c>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ef2:	f023 0305 	bic.w	r3, r3, #5
 8004ef6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f12:	4a0d      	ldr	r2, [pc, #52]	@ (8004f48 <SystemInit+0xa0>)
 8004f14:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8004f48 <SystemInit+0xa0>)
 8004f1c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f32:	2200      	movs	r2, #0
 8004f34:	619a      	str	r2, [r3, #24]
}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	e000ed00 	.word	0xe000ed00
 8004f44:	faf6fefb 	.word	0xfaf6fefb
 8004f48:	22041000 	.word	0x22041000

08004f4c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004f4c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f4e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f50:	3304      	adds	r3, #4

08004f52 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f52:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f54:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004f56:	d3f9      	bcc.n	8004f4c <CopyDataInit>
  bx lr
 8004f58:	4770      	bx	lr

08004f5a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004f5a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004f5c:	3004      	adds	r0, #4

08004f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004f5e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004f60:	d3fb      	bcc.n	8004f5a <FillZerobss>
  bx lr
 8004f62:	4770      	bx	lr

08004f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f64:	480c      	ldr	r0, [pc, #48]	@ (8004f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004f68:	f7ff ff9e 	bl	8004ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004f6c:	480b      	ldr	r0, [pc, #44]	@ (8004f9c <LoopForever+0x6>)
 8004f6e:	490c      	ldr	r1, [pc, #48]	@ (8004fa0 <LoopForever+0xa>)
 8004f70:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa4 <LoopForever+0xe>)
 8004f72:	2300      	movs	r3, #0
 8004f74:	f7ff ffed 	bl	8004f52 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004f78:	480b      	ldr	r0, [pc, #44]	@ (8004fa8 <LoopForever+0x12>)
 8004f7a:	490c      	ldr	r1, [pc, #48]	@ (8004fac <LoopForever+0x16>)
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb0 <LoopForever+0x1a>)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f7ff ffe7 	bl	8004f52 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004f84:	480b      	ldr	r0, [pc, #44]	@ (8004fb4 <LoopForever+0x1e>)
 8004f86:	490c      	ldr	r1, [pc, #48]	@ (8004fb8 <LoopForever+0x22>)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f7ff ffe8 	bl	8004f5e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004f8e:	f00d f905 	bl	801219c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004f92:	f7fe ffcd 	bl	8003f30 <main>

08004f96 <LoopForever>:

LoopForever:
  b LoopForever
 8004f96:	e7fe      	b.n	8004f96 <LoopForever>
  ldr   r0, =_estack
 8004f98:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004f9c:	20000008 	.word	0x20000008
 8004fa0:	20000200 	.word	0x20000200
 8004fa4:	08015448 	.word	0x08015448
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004fa8:	200301e4 	.word	0x200301e4
 8004fac:	20030a67 	.word	0x20030a67
 8004fb0:	08015686 	.word	0x08015686
  INIT_BSS _sbss, _ebss
 8004fb4:	2000024c 	.word	0x2000024c
 8004fb8:	20000b44 	.word	0x20000b44

08004fbc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004fbc:	e7fe      	b.n	8004fbc <ADC1_IRQHandler>
	...

08004fc0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004fc4:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4a04      	ldr	r2, [pc, #16]	@ (8004fdc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6053      	str	r3, [r2, #4]
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	e0042000 	.word	0xe0042000

08004fe0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004fe4:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	4a04      	ldr	r2, [pc, #16]	@ (8004ffc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004fea:	f043 0302 	orr.w	r3, r3, #2
 8004fee:	6053      	str	r3, [r2, #4]
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e0042000 	.word	0xe0042000

08005000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800500a:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <HAL_Init+0x3c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a0b      	ldr	r2, [pc, #44]	@ (800503c <HAL_Init+0x3c>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005014:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005016:	2003      	movs	r0, #3
 8005018:	f000 f9b4 	bl	8005384 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800501c:	2000      	movs	r0, #0
 800501e:	f000 f80f 	bl	8005040 <HAL_InitTick>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	71fb      	strb	r3, [r7, #7]
 800502c:	e001      	b.n	8005032 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800502e:	f7ff fba3 	bl	8004778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005032:	79fb      	ldrb	r3, [r7, #7]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	58004000 	.word	0x58004000

08005040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800504c:	4b17      	ldr	r3, [pc, #92]	@ (80050ac <HAL_InitTick+0x6c>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d024      	beq.n	800509e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005054:	f003 fc1e 	bl	8008894 <HAL_RCC_GetHCLKFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <HAL_InitTick+0x6c>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	4619      	mov	r1, r3
 8005060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005064:	fbb3 f3f1 	udiv	r3, r3, r1
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f9ca 	bl	8005406 <HAL_SYSTICK_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10f      	bne.n	8005098 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b0f      	cmp	r3, #15
 800507c:	d809      	bhi.n	8005092 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800507e:	2200      	movs	r2, #0
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	f04f 30ff 	mov.w	r0, #4294967295
 8005086:	f000 f988 	bl	800539a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800508a:	4a09      	ldr	r2, [pc, #36]	@ (80050b0 <HAL_InitTick+0x70>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	e007      	b.n	80050a2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
 8005096:	e004      	b.n	80050a2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	e001      	b.n	80050a2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	2000001c 	.word	0x2000001c
 80050b0:	20000018 	.word	0x20000018

080050b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050b8:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <HAL_IncTick+0x20>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <HAL_IncTick+0x24>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4413      	add	r3, r2
 80050c4:	4a04      	ldr	r2, [pc, #16]	@ (80050d8 <HAL_IncTick+0x24>)
 80050c6:	6013      	str	r3, [r2, #0]
}
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000001c 	.word	0x2000001c
 80050d8:	20000840 	.word	0x20000840

080050dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return uwTick;
 80050e0:	4b03      	ldr	r3, [pc, #12]	@ (80050f0 <HAL_GetTick+0x14>)
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20000840 	.word	0x20000840

080050f4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80050f8:	4b03      	ldr	r3, [pc, #12]	@ (8005108 <HAL_GetTickPrio+0x14>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000018 	.word	0x20000018

0800510c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8005110:	f7ff ff56 	bl	8004fc0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800511c:	f7ff ff60 	bl	8004fe0 <LL_DBGMCU_EnableDBGStopMode>
}
 8005120:	bf00      	nop
 8005122:	bd80      	pop	{r7, pc}

08005124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <__NVIC_SetPriorityGrouping+0x44>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005140:	4013      	ands	r3, r2
 8005142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800514c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005156:	4a04      	ldr	r2, [pc, #16]	@ (8005168 <__NVIC_SetPriorityGrouping+0x44>)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	60d3      	str	r3, [r2, #12]
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005170:	4b04      	ldr	r3, [pc, #16]	@ (8005184 <__NVIC_GetPriorityGrouping+0x18>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	f003 0307 	and.w	r3, r3, #7
}
 800517a:	4618      	mov	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	e000ed00 	.word	0xe000ed00

08005188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	2b00      	cmp	r3, #0
 8005198:	db0b      	blt.n	80051b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	f003 021f 	and.w	r2, r3, #31
 80051a0:	4907      	ldr	r1, [pc, #28]	@ (80051c0 <__NVIC_EnableIRQ+0x38>)
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2001      	movs	r0, #1
 80051aa:	fa00 f202 	lsl.w	r2, r0, r2
 80051ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	e000e100 	.word	0xe000e100

080051c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	db12      	blt.n	80051fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	f003 021f 	and.w	r2, r3, #31
 80051dc:	490a      	ldr	r1, [pc, #40]	@ (8005208 <__NVIC_DisableIRQ+0x44>)
 80051de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2001      	movs	r0, #1
 80051e6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ea:	3320      	adds	r3, #32
 80051ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80051f0:	f3bf 8f4f 	dsb	sy
}
 80051f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051f6:	f3bf 8f6f 	isb	sy
}
 80051fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	e000e100 	.word	0xe000e100

0800520c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521a:	2b00      	cmp	r3, #0
 800521c:	db0c      	blt.n	8005238 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	f003 021f 	and.w	r2, r3, #31
 8005224:	4907      	ldr	r1, [pc, #28]	@ (8005244 <__NVIC_SetPendingIRQ+0x38>)
 8005226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2001      	movs	r0, #1
 800522e:	fa00 f202 	lsl.w	r2, r0, r2
 8005232:	3340      	adds	r3, #64	@ 0x40
 8005234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	e000e100 	.word	0xe000e100

08005248 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005256:	2b00      	cmp	r3, #0
 8005258:	db0c      	blt.n	8005274 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	f003 021f 	and.w	r2, r3, #31
 8005260:	4907      	ldr	r1, [pc, #28]	@ (8005280 <__NVIC_ClearPendingIRQ+0x38>)
 8005262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2001      	movs	r0, #1
 800526a:	fa00 f202 	lsl.w	r2, r0, r2
 800526e:	3360      	adds	r3, #96	@ 0x60
 8005270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	e000e100 	.word	0xe000e100

08005284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	6039      	str	r1, [r7, #0]
 800528e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005294:	2b00      	cmp	r3, #0
 8005296:	db0a      	blt.n	80052ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	490c      	ldr	r1, [pc, #48]	@ (80052d0 <__NVIC_SetPriority+0x4c>)
 800529e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a2:	0112      	lsls	r2, r2, #4
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	440b      	add	r3, r1
 80052a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052ac:	e00a      	b.n	80052c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	4908      	ldr	r1, [pc, #32]	@ (80052d4 <__NVIC_SetPriority+0x50>)
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	3b04      	subs	r3, #4
 80052bc:	0112      	lsls	r2, r2, #4
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	440b      	add	r3, r1
 80052c2:	761a      	strb	r2, [r3, #24]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	e000e100 	.word	0xe000e100
 80052d4:	e000ed00 	.word	0xe000ed00

080052d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d8:	b480      	push	{r7}
 80052da:	b089      	sub	sp, #36	@ 0x24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f1c3 0307 	rsb	r3, r3, #7
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	bf28      	it	cs
 80052f6:	2304      	movcs	r3, #4
 80052f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3304      	adds	r3, #4
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d902      	bls.n	8005308 <NVIC_EncodePriority+0x30>
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3b03      	subs	r3, #3
 8005306:	e000      	b.n	800530a <NVIC_EncodePriority+0x32>
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800530c:	f04f 32ff 	mov.w	r2, #4294967295
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	43da      	mvns	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	401a      	ands	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005320:	f04f 31ff 	mov.w	r1, #4294967295
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	43d9      	mvns	r1, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005330:	4313      	orrs	r3, r2
         );
}
 8005332:	4618      	mov	r0, r3
 8005334:	3724      	adds	r7, #36	@ 0x24
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3b01      	subs	r3, #1
 800534c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005350:	d301      	bcc.n	8005356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005352:	2301      	movs	r3, #1
 8005354:	e00f      	b.n	8005376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005356:	4a0a      	ldr	r2, [pc, #40]	@ (8005380 <SysTick_Config+0x40>)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3b01      	subs	r3, #1
 800535c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800535e:	210f      	movs	r1, #15
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	f7ff ff8e 	bl	8005284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005368:	4b05      	ldr	r3, [pc, #20]	@ (8005380 <SysTick_Config+0x40>)
 800536a:	2200      	movs	r2, #0
 800536c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800536e:	4b04      	ldr	r3, [pc, #16]	@ (8005380 <SysTick_Config+0x40>)
 8005370:	2207      	movs	r2, #7
 8005372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	e000e010 	.word	0xe000e010

08005384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fec9 	bl	8005124 <__NVIC_SetPriorityGrouping>
}
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	4603      	mov	r3, r0
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053a8:	f7ff fee0 	bl	800516c <__NVIC_GetPriorityGrouping>
 80053ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	6978      	ldr	r0, [r7, #20]
 80053b4:	f7ff ff90 	bl	80052d8 <NVIC_EncodePriority>
 80053b8:	4602      	mov	r2, r0
 80053ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff ff5f 	bl	8005284 <__NVIC_SetPriority>
}
 80053c6:	bf00      	nop
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff fed3 	bl	8005188 <__NVIC_EnableIRQ>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4603      	mov	r3, r0
 80053f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80053f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fee3 	bl	80051c4 <__NVIC_DisableIRQ>
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ff96 	bl	8005340 <SysTick_Config>
 8005414:	4603      	mov	r3, r0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	4603      	mov	r3, r0
 8005426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff feed 	bl	800520c <__NVIC_SetPendingIRQ>
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	4603      	mov	r3, r0
 8005442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fefd 	bl	8005248 <__NVIC_ClearPendingIRQ>
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e08e      	b.n	8005588 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	4b47      	ldr	r3, [pc, #284]	@ (8005590 <HAL_DMA_Init+0x138>)
 8005472:	429a      	cmp	r2, r3
 8005474:	d80f      	bhi.n	8005496 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	4b45      	ldr	r3, [pc, #276]	@ (8005594 <HAL_DMA_Init+0x13c>)
 800547e:	4413      	add	r3, r2
 8005480:	4a45      	ldr	r2, [pc, #276]	@ (8005598 <HAL_DMA_Init+0x140>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	009a      	lsls	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a42      	ldr	r2, [pc, #264]	@ (800559c <HAL_DMA_Init+0x144>)
 8005492:	641a      	str	r2, [r3, #64]	@ 0x40
 8005494:	e00e      	b.n	80054b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	4b40      	ldr	r3, [pc, #256]	@ (80055a0 <HAL_DMA_Init+0x148>)
 800549e:	4413      	add	r3, r2
 80054a0:	4a3d      	ldr	r2, [pc, #244]	@ (8005598 <HAL_DMA_Init+0x140>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	009a      	lsls	r2, r3, #2
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a3c      	ldr	r2, [pc, #240]	@ (80055a4 <HAL_DMA_Init+0x14c>)
 80054b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80054ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80054d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb18 	bl	8005b3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005514:	d102      	bne.n	800551c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005524:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005528:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005532:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d010      	beq.n	800555e <HAL_DMA_Init+0x106>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d80c      	bhi.n	800555e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fb37 	bl	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	e008      	b.n	8005570 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40020407 	.word	0x40020407
 8005594:	bffdfff8 	.word	0xbffdfff8
 8005598:	cccccccd 	.word	0xcccccccd
 800559c:	40020000 	.word	0x40020000
 80055a0:	bffdfbf8 	.word	0xbffdfbf8
 80055a4:	40020400 	.word	0x40020400

080055a8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e07b      	b.n	80056b2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b3a      	ldr	r3, [pc, #232]	@ (80056bc <HAL_DMA_DeInit+0x114>)
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d80f      	bhi.n	80055f6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	4b38      	ldr	r3, [pc, #224]	@ (80056c0 <HAL_DMA_DeInit+0x118>)
 80055de:	4413      	add	r3, r2
 80055e0:	4a38      	ldr	r2, [pc, #224]	@ (80056c4 <HAL_DMA_DeInit+0x11c>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	009a      	lsls	r2, r3, #2
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a35      	ldr	r2, [pc, #212]	@ (80056c8 <HAL_DMA_DeInit+0x120>)
 80055f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80055f4:	e00e      	b.n	8005614 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	4b33      	ldr	r3, [pc, #204]	@ (80056cc <HAL_DMA_DeInit+0x124>)
 80055fe:	4413      	add	r3, r2
 8005600:	4a30      	ldr	r2, [pc, #192]	@ (80056c4 <HAL_DMA_DeInit+0x11c>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	009a      	lsls	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2f      	ldr	r2, [pc, #188]	@ (80056d0 <HAL_DMA_DeInit+0x128>)
 8005612:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005620:	f003 021c 	and.w	r2, r3, #28
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f202 	lsl.w	r2, r1, r2
 800562e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa83 	bl	8005b3c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005646:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00f      	beq.n	8005670 <HAL_DMA_DeInit+0xc8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b04      	cmp	r3, #4
 8005656:	d80b      	bhi.n	8005670 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 faad 	bl	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800566e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40020407 	.word	0x40020407
 80056c0:	bffdfff8 	.word	0xbffdfff8
 80056c4:	cccccccd 	.word	0xcccccccd
 80056c8:	40020000 	.word	0x40020000
 80056cc:	bffdfbf8 	.word	0xbffdfbf8
 80056d0:	40020400 	.word	0x40020400

080056d4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_DMA_Start_IT+0x20>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e066      	b.n	80057c2 <HAL_DMA_Start_IT+0xee>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d155      	bne.n	80057b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f9c7 	bl	8005ac0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005736:	2b00      	cmp	r3, #0
 8005738:	d008      	beq.n	800574c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 020e 	orr.w	r2, r2, #14
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	e00f      	b.n	800576c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0204 	bic.w	r2, r2, #4
 800575a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 020a 	orr.w	r2, r2, #10
 800576a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005788:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578e:	2b00      	cmp	r3, #0
 8005790:	d007      	beq.n	80057a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e005      	b.n	80057c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057bc:	2302      	movs	r3, #2
 80057be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e04f      	b.n	800587c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d008      	beq.n	80057fa <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2204      	movs	r2, #4
 80057ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e040      	b.n	800587c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 020e 	bic.w	r2, r2, #14
 8005808:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005818:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582e:	f003 021c 	and.w	r2, r3, #28
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	2101      	movs	r1, #1
 8005838:	fa01 f202 	lsl.w	r2, r1, r2
 800583c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005846:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00c      	beq.n	800586a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800585e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005868:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d005      	beq.n	80058ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2204      	movs	r2, #4
 80058a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
 80058aa:	e047      	b.n	800593c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 020e 	bic.w	r2, r2, #14
 80058ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e0:	f003 021c 	and.w	r2, r3, #28
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	2101      	movs	r1, #1
 80058ea:	fa01 f202 	lsl.w	r2, r1, r2
 80058ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005910:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800591a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
    }
  }
  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	f003 031c 	and.w	r3, r3, #28
 8005966:	2204      	movs	r2, #4
 8005968:	409a      	lsls	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d026      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x7a>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d021      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d107      	bne.n	800599a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0204 	bic.w	r2, r2, #4
 8005998:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	f003 021c 	and.w	r2, r3, #28
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	2104      	movs	r1, #4
 80059a8:	fa01 f202 	lsl.w	r2, r1, r2
 80059ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d071      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80059be:	e06c      	b.n	8005a9a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c4:	f003 031c 	and.w	r3, r3, #28
 80059c8:	2202      	movs	r2, #2
 80059ca:	409a      	lsls	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02e      	beq.n	8005a32 <HAL_DMA_IRQHandler+0xec>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d029      	beq.n	8005a32 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10b      	bne.n	8005a04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 020a 	bic.w	r2, r2, #10
 80059fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a08:	f003 021c 	and.w	r2, r3, #28
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	2102      	movs	r1, #2
 8005a12:	fa01 f202 	lsl.w	r2, r1, r2
 8005a16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d038      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005a30:	e033      	b.n	8005a9a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a36:	f003 031c 	and.w	r3, r3, #28
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d02a      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x156>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d025      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 020e 	bic.w	r2, r2, #14
 8005a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a64:	f003 021c 	and.w	r2, r3, #28
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
}
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ab2:	b2db      	uxtb	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ad6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ae8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aee:	f003 021c 	and.w	r2, r3, #28
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	2101      	movs	r1, #1
 8005af8:	fa01 f202 	lsl.w	r2, r1, r2
 8005afc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d108      	bne.n	8005b20 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b1e:	e007      	b.n	8005b30 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d80a      	bhi.n	8005b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b54:	089b      	lsrs	r3, r3, #2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b5c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6493      	str	r3, [r2, #72]	@ 0x48
 8005b64:	e007      	b.n	8005b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	009a      	lsls	r2, r3, #2
 8005b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005b70:	4413      	add	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	3b08      	subs	r3, #8
 8005b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005b8c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	2201      	movs	r2, #1
 8005b96:	409a      	lsls	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40020407 	.word	0x40020407
 8005bac:	4002081c 	.word	0x4002081c
 8005bb0:	cccccccd 	.word	0xcccccccd
 8005bb4:	40020880 	.word	0x40020880

08005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a09      	ldr	r2, [pc, #36]	@ (8005c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005bdc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2201      	movs	r2, #1
 8005be8:	409a      	lsls	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	1000823f 	.word	0x1000823f
 8005c00:	40020940 	.word	0x40020940

08005c04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c12:	e14c      	b.n	8005eae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	2101      	movs	r1, #1
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	4013      	ands	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 813e 	beq.w	8005ea8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d005      	beq.n	8005c44 <HAL_GPIO_Init+0x40>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d130      	bne.n	8005ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	2203      	movs	r2, #3
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4013      	ands	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	f003 0201 	and.w	r2, r3, #1
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d017      	beq.n	8005ce2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d123      	bne.n	8005d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	08da      	lsrs	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3208      	adds	r2, #8
 8005cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	220f      	movs	r2, #15
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	08da      	lsrs	r2, r3, #3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3208      	adds	r2, #8
 8005d30:	6939      	ldr	r1, [r7, #16]
 8005d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	2203      	movs	r2, #3
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	43db      	mvns	r3, r3
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 0203 	and.w	r2, r3, #3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8098 	beq.w	8005ea8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005d78:	4a54      	ldr	r2, [pc, #336]	@ (8005ecc <HAL_GPIO_Init+0x2c8>)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	089b      	lsrs	r3, r3, #2
 8005d7e:	3302      	adds	r3, #2
 8005d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	220f      	movs	r2, #15
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005da2:	d019      	beq.n	8005dd8 <HAL_GPIO_Init+0x1d4>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a4a      	ldr	r2, [pc, #296]	@ (8005ed0 <HAL_GPIO_Init+0x2cc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d013      	beq.n	8005dd4 <HAL_GPIO_Init+0x1d0>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a49      	ldr	r2, [pc, #292]	@ (8005ed4 <HAL_GPIO_Init+0x2d0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00d      	beq.n	8005dd0 <HAL_GPIO_Init+0x1cc>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a48      	ldr	r2, [pc, #288]	@ (8005ed8 <HAL_GPIO_Init+0x2d4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d007      	beq.n	8005dcc <HAL_GPIO_Init+0x1c8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a47      	ldr	r2, [pc, #284]	@ (8005edc <HAL_GPIO_Init+0x2d8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d101      	bne.n	8005dc8 <HAL_GPIO_Init+0x1c4>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	e008      	b.n	8005dda <HAL_GPIO_Init+0x1d6>
 8005dc8:	2307      	movs	r3, #7
 8005dca:	e006      	b.n	8005dda <HAL_GPIO_Init+0x1d6>
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e004      	b.n	8005dda <HAL_GPIO_Init+0x1d6>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e002      	b.n	8005dda <HAL_GPIO_Init+0x1d6>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <HAL_GPIO_Init+0x1d6>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	f002 0203 	and.w	r2, r2, #3
 8005de0:	0092      	lsls	r2, r2, #2
 8005de2:	4093      	lsls	r3, r2
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005dea:	4938      	ldr	r1, [pc, #224]	@ (8005ecc <HAL_GPIO_Init+0x2c8>)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	3302      	adds	r3, #2
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005df8:	4b39      	ldr	r3, [pc, #228]	@ (8005ee0 <HAL_GPIO_Init+0x2dc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	43db      	mvns	r3, r3
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4013      	ands	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ee0 <HAL_GPIO_Init+0x2dc>)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e22:	4b2f      	ldr	r3, [pc, #188]	@ (8005ee0 <HAL_GPIO_Init+0x2dc>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	43db      	mvns	r3, r3
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e46:	4a26      	ldr	r2, [pc, #152]	@ (8005ee0 <HAL_GPIO_Init+0x2dc>)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e4c:	4b24      	ldr	r3, [pc, #144]	@ (8005ee0 <HAL_GPIO_Init+0x2dc>)
 8005e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	43db      	mvns	r3, r3
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee0 <HAL_GPIO_Init+0x2dc>)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8005e7a:	4b19      	ldr	r3, [pc, #100]	@ (8005ee0 <HAL_GPIO_Init+0x2dc>)
 8005e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8005ee0 <HAL_GPIO_Init+0x2dc>)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f47f aeab 	bne.w	8005c14 <HAL_GPIO_Init+0x10>
  }
}
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	48000400 	.word	0x48000400
 8005ed4:	48000800 	.word	0x48000800
 8005ed8:	48000c00 	.word	0x48000c00
 8005edc:	48001000 	.word	0x48001000
 8005ee0:	58000800 	.word	0x58000800

08005ee4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005ef2:	e0bb      	b.n	800606c <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	4013      	ands	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80ae 	beq.w	8006066 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005f0a:	4a5f      	ldr	r2, [pc, #380]	@ (8006088 <HAL_GPIO_DeInit+0x1a4>)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	3302      	adds	r3, #2
 8005f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	220f      	movs	r2, #15
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f32:	d019      	beq.n	8005f68 <HAL_GPIO_DeInit+0x84>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a55      	ldr	r2, [pc, #340]	@ (800608c <HAL_GPIO_DeInit+0x1a8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d013      	beq.n	8005f64 <HAL_GPIO_DeInit+0x80>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a54      	ldr	r2, [pc, #336]	@ (8006090 <HAL_GPIO_DeInit+0x1ac>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00d      	beq.n	8005f60 <HAL_GPIO_DeInit+0x7c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a53      	ldr	r2, [pc, #332]	@ (8006094 <HAL_GPIO_DeInit+0x1b0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d007      	beq.n	8005f5c <HAL_GPIO_DeInit+0x78>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a52      	ldr	r2, [pc, #328]	@ (8006098 <HAL_GPIO_DeInit+0x1b4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d101      	bne.n	8005f58 <HAL_GPIO_DeInit+0x74>
 8005f54:	2304      	movs	r3, #4
 8005f56:	e008      	b.n	8005f6a <HAL_GPIO_DeInit+0x86>
 8005f58:	2307      	movs	r3, #7
 8005f5a:	e006      	b.n	8005f6a <HAL_GPIO_DeInit+0x86>
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e004      	b.n	8005f6a <HAL_GPIO_DeInit+0x86>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e002      	b.n	8005f6a <HAL_GPIO_DeInit+0x86>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <HAL_GPIO_DeInit+0x86>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	f002 0203 	and.w	r2, r2, #3
 8005f70:	0092      	lsls	r2, r2, #2
 8005f72:	4093      	lsls	r3, r2
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d136      	bne.n	8005fe8 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005f7a:	4b48      	ldr	r3, [pc, #288]	@ (800609c <HAL_GPIO_DeInit+0x1b8>)
 8005f7c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	43db      	mvns	r3, r3
 8005f84:	4945      	ldr	r1, [pc, #276]	@ (800609c <HAL_GPIO_DeInit+0x1b8>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005f8c:	4b43      	ldr	r3, [pc, #268]	@ (800609c <HAL_GPIO_DeInit+0x1b8>)
 8005f8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	4941      	ldr	r1, [pc, #260]	@ (800609c <HAL_GPIO_DeInit+0x1b8>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800609c <HAL_GPIO_DeInit+0x1b8>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	493d      	ldr	r1, [pc, #244]	@ (800609c <HAL_GPIO_DeInit+0x1b8>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005fac:	4b3b      	ldr	r3, [pc, #236]	@ (800609c <HAL_GPIO_DeInit+0x1b8>)
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	4939      	ldr	r1, [pc, #228]	@ (800609c <HAL_GPIO_DeInit+0x1b8>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	220f      	movs	r2, #15
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005fca:	4a2f      	ldr	r2, [pc, #188]	@ (8006088 <HAL_GPIO_DeInit+0x1a4>)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	089b      	lsrs	r3, r3, #2
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	43da      	mvns	r2, r3
 8005fda:	482b      	ldr	r0, [pc, #172]	@ (8006088 <HAL_GPIO_DeInit+0x1a4>)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	089b      	lsrs	r3, r3, #2
 8005fe0:	400a      	ands	r2, r1
 8005fe2:	3302      	adds	r3, #2
 8005fe4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2103      	movs	r1, #3
 8005ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	08da      	lsrs	r2, r3, #3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3208      	adds	r2, #8
 8006004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	220f      	movs	r2, #15
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43db      	mvns	r3, r3
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	08d2      	lsrs	r2, r2, #3
 800601c:	4019      	ands	r1, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3208      	adds	r2, #8
 8006022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	2103      	movs	r1, #3
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	2101      	movs	r1, #1
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	fa01 f303 	lsl.w	r3, r1, r3
 8006048:	43db      	mvns	r3, r3
 800604a:	401a      	ands	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	2103      	movs	r1, #3
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	401a      	ands	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	3301      	adds	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	f47f af3d 	bne.w	8005ef4 <HAL_GPIO_DeInit+0x10>
  }
}
 800607a:	bf00      	nop
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40010000 	.word	0x40010000
 800608c:	48000400 	.word	0x48000400
 8006090:	48000800 	.word	0x48000800
 8006094:	48000c00 	.word	0x48000c00
 8006098:	48001000 	.word	0x48001000
 800609c:	58000800 	.word	0x58000800

080060a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	807b      	strh	r3, [r7, #2]
 80060ac:	4613      	mov	r3, r2
 80060ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060b0:	787b      	ldrb	r3, [r7, #1]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060b6:	887a      	ldrh	r2, [r7, #2]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060bc:	e002      	b.n	80060c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060be:	887a      	ldrh	r2, [r7, #2]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80060da:	4b08      	ldr	r3, [pc, #32]	@ (80060fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d006      	beq.n	80060f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060e6:	4a05      	ldr	r2, [pc, #20]	@ (80060fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fd fe7c 	bl	8003dec <HAL_GPIO_EXTI_Callback>
  }
}
 80060f4:	bf00      	nop
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	58000800 	.word	0x58000800

08006100 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006106:	4b0a      	ldr	r3, [pc, #40]	@ (8006130 <HAL_HSEM_IRQHandler+0x30>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800610c:	4b08      	ldr	r3, [pc, #32]	@ (8006130 <HAL_HSEM_IRQHandler+0x30>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	43db      	mvns	r3, r3
 8006114:	4906      	ldr	r1, [pc, #24]	@ (8006130 <HAL_HSEM_IRQHandler+0x30>)
 8006116:	4013      	ands	r3, r2
 8006118:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800611a:	4a05      	ldr	r2, [pc, #20]	@ (8006130 <HAL_HSEM_IRQHandler+0x30>)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f807 	bl	8006134 <HAL_HSEM_FreeCallback>
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	58001500 	.word	0x58001500

08006134 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e08d      	b.n	8006276 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fe fb12 	bl	8004798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2224      	movs	r2, #36	@ 0x24
 8006178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006198:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d107      	bne.n	80061c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061be:	609a      	str	r2, [r3, #8]
 80061c0:	e006      	b.n	80061d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80061ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d108      	bne.n	80061ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	e007      	b.n	80061fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800621c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69d9      	ldr	r1, [r3, #28]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e021      	b.n	80062d4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2224      	movs	r2, #36	@ 0x24
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fe fb27 	bl	80048fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	461a      	mov	r2, r3
 80062e8:	460b      	mov	r3, r1
 80062ea:	817b      	strh	r3, [r7, #10]
 80062ec:	4613      	mov	r3, r2
 80062ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	f040 80fd 	bne.w	80064f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_I2C_Master_Transmit+0x30>
 8006308:	2302      	movs	r3, #2
 800630a:	e0f6      	b.n	80064fa <HAL_I2C_Master_Transmit+0x21e>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006314:	f7fe fee2 	bl	80050dc <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	2319      	movs	r3, #25
 8006320:	2201      	movs	r2, #1
 8006322:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fe8f 	bl	800704a <I2C_WaitOnFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e0e1      	b.n	80064fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2221      	movs	r2, #33	@ 0x21
 800633a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2210      	movs	r2, #16
 8006342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	893a      	ldrh	r2, [r7, #8]
 8006356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006362:	b29b      	uxth	r3, r3
 8006364:	2bff      	cmp	r3, #255	@ 0xff
 8006366:	d906      	bls.n	8006376 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	22ff      	movs	r2, #255	@ 0xff
 800636c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800636e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e007      	b.n	8006386 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006380:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006384:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638a:	2b00      	cmp	r3, #0
 800638c:	d024      	beq.n	80063d8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	3301      	adds	r3, #1
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	8979      	ldrh	r1, [r7, #10]
 80063ca:	4b4e      	ldr	r3, [pc, #312]	@ (8006504 <HAL_I2C_Master_Transmit+0x228>)
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fffd 	bl	80073d0 <I2C_TransferConfig>
 80063d6:	e066      	b.n	80064a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	8979      	ldrh	r1, [r7, #10]
 80063e0:	4b48      	ldr	r3, [pc, #288]	@ (8006504 <HAL_I2C_Master_Transmit+0x228>)
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fff2 	bl	80073d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80063ec:	e05b      	b.n	80064a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	6a39      	ldr	r1, [r7, #32]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fe82 	bl	80070fc <I2C_WaitOnTXISFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e07b      	b.n	80064fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006406:	781a      	ldrb	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d034      	beq.n	80064a6 <HAL_I2C_Master_Transmit+0x1ca>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006440:	2b00      	cmp	r3, #0
 8006442:	d130      	bne.n	80064a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	2200      	movs	r2, #0
 800644c:	2180      	movs	r1, #128	@ 0x80
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fdfb 	bl	800704a <I2C_WaitOnFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e04d      	b.n	80064fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006462:	b29b      	uxth	r3, r3
 8006464:	2bff      	cmp	r3, #255	@ 0xff
 8006466:	d90e      	bls.n	8006486 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	22ff      	movs	r2, #255	@ 0xff
 800646c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006472:	b2da      	uxtb	r2, r3
 8006474:	8979      	ldrh	r1, [r7, #10]
 8006476:	2300      	movs	r3, #0
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 ffa6 	bl	80073d0 <I2C_TransferConfig>
 8006484:	e00f      	b.n	80064a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006494:	b2da      	uxtb	r2, r3
 8006496:	8979      	ldrh	r1, [r7, #10]
 8006498:	2300      	movs	r3, #0
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 ff95 	bl	80073d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d19e      	bne.n	80063ee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	6a39      	ldr	r1, [r7, #32]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fe68 	bl	800718a <I2C_WaitOnSTOPFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e01a      	b.n	80064fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2220      	movs	r2, #32
 80064ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <HAL_I2C_Master_Transmit+0x22c>)
 80064d8:	400b      	ands	r3, r1
 80064da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	80002000 	.word	0x80002000
 8006508:	fe00e800 	.word	0xfe00e800

0800650c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
  }
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00f      	beq.n	8006582 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006570:	f043 0201 	orr.w	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006580:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00f      	beq.n	80065ac <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659a:	f043 0208 	orr.w	r2, r3, #8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00f      	beq.n	80065d6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c4:	f043 0202 	orr.w	r2, r3, #2
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065d4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065da:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 030b 	and.w	r3, r3, #11
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fbd5 	bl	8006d98 <I2C_ITError>
  }
}
 80065ee:	bf00      	nop
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	70fb      	strb	r3, [r7, #3]
 800662a:	4613      	mov	r3, r2
 800662c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <I2C_Slave_ISR_IT+0x24>
 8006696:	2302      	movs	r3, #2
 8006698:	e0e2      	b.n	8006860 <I2C_Slave_ISR_IT+0x1ea>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80066b6:	6939      	ldr	r1, [r7, #16]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f9b5 	bl	8006a28 <I2C_ITSlaveCplt>
 80066be:	e0ca      	b.n	8006856 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d04b      	beq.n	8006762 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d046      	beq.n	8006762 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d128      	bne.n	8006730 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b28      	cmp	r3, #40	@ 0x28
 80066e8:	d108      	bne.n	80066fc <I2C_Slave_ISR_IT+0x86>
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066f0:	d104      	bne.n	80066fc <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80066f2:	6939      	ldr	r1, [r7, #16]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fafb 	bl	8006cf0 <I2C_ITListenCplt>
 80066fa:	e031      	b.n	8006760 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b29      	cmp	r3, #41	@ 0x29
 8006706:	d10e      	bne.n	8006726 <I2C_Slave_ISR_IT+0xb0>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800670e:	d00a      	beq.n	8006726 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2210      	movs	r2, #16
 8006716:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 fc54 	bl	8006fc6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f926 	bl	8006970 <I2C_ITSlaveSeqCplt>
 8006724:	e01c      	b.n	8006760 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2210      	movs	r2, #16
 800672c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800672e:	e08f      	b.n	8006850 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2210      	movs	r2, #16
 8006736:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673c:	f043 0204 	orr.w	r2, r3, #4
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <I2C_Slave_ISR_IT+0xdc>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006750:	d17e      	bne.n	8006850 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006756:	4619      	mov	r1, r3
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 fb1d 	bl	8006d98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800675e:	e077      	b.n	8006850 <I2C_Slave_ISR_IT+0x1da>
 8006760:	e076      	b.n	8006850 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d02f      	beq.n	80067cc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006772:	2b00      	cmp	r3, #0
 8006774:	d02a      	beq.n	80067cc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d018      	beq.n	80067b2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d14b      	bne.n	8006854 <I2C_Slave_ISR_IT+0x1de>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067c2:	d047      	beq.n	8006854 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f8d3 	bl	8006970 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80067ca:	e043      	b.n	8006854 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d004      	beq.n	80067ea <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80067e0:	6939      	ldr	r1, [r7, #16]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 f840 	bl	8006868 <I2C_ITAddrCplt>
 80067e8:	e035      	b.n	8006856 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d030      	beq.n	8006856 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d02b      	beq.n	8006856 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d018      	beq.n	800683a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006838:	e00d      	b.n	8006856 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006840:	d002      	beq.n	8006848 <I2C_Slave_ISR_IT+0x1d2>
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f891 	bl	8006970 <I2C_ITSlaveSeqCplt>
 800684e:	e002      	b.n	8006856 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006850:	bf00      	nop
 8006852:	e000      	b.n	8006856 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006854:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800687e:	2b28      	cmp	r3, #40	@ 0x28
 8006880:	d16a      	bne.n	8006958 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	0c1b      	lsrs	r3, r3, #16
 800688a:	b2db      	uxtb	r3, r3
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	0c1b      	lsrs	r3, r3, #16
 800689a:	b29b      	uxth	r3, r3
 800689c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80068a0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80068bc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d138      	bne.n	8006938 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80068c6:	897b      	ldrh	r3, [r7, #10]
 80068c8:	09db      	lsrs	r3, r3, #7
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	89bb      	ldrh	r3, [r7, #12]
 80068ce:	4053      	eors	r3, r2
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f003 0306 	and.w	r3, r3, #6
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d11c      	bne.n	8006914 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80068da:	897b      	ldrh	r3, [r7, #10]
 80068dc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d13b      	bne.n	8006968 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2208      	movs	r2, #8
 80068fc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006906:	89ba      	ldrh	r2, [r7, #12]
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff fe86 	bl	800661e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006912:	e029      	b.n	8006968 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006914:	893b      	ldrh	r3, [r7, #8]
 8006916:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006918:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fd89 	bl	8007434 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800692a:	89ba      	ldrh	r2, [r7, #12]
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fe74 	bl	800661e <HAL_I2C_AddrCallback>
}
 8006936:	e017      	b.n	8006968 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006938:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fd79 	bl	8007434 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800694a:	89ba      	ldrh	r2, [r7, #12]
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff fe64 	bl	800661e <HAL_I2C_AddrCallback>
}
 8006956:	e007      	b.n	8006968 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2208      	movs	r2, #8
 800695e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	e00c      	b.n	80069be <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d007      	beq.n	80069be <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069bc:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b29      	cmp	r3, #41	@ 0x29
 80069c8:	d112      	bne.n	80069f0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2228      	movs	r2, #40	@ 0x28
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2221      	movs	r2, #33	@ 0x21
 80069d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069d8:	2101      	movs	r1, #1
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fd2a 	bl	8007434 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fe04 	bl	80065f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80069ee:	e017      	b.n	8006a20 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80069fa:	d111      	bne.n	8006a20 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2228      	movs	r2, #40	@ 0x28
 8006a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2222      	movs	r2, #34	@ 0x22
 8006a08:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fd11 	bl	8007434 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff fdf5 	bl	800660a <HAL_I2C_SlaveRxCpltCallback>
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a4a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2220      	movs	r2, #32
 8006a52:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	2b21      	cmp	r3, #33	@ 0x21
 8006a58:	d002      	beq.n	8006a60 <I2C_ITSlaveCplt+0x38>
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	2b29      	cmp	r3, #41	@ 0x29
 8006a5e:	d108      	bne.n	8006a72 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006a60:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fce5 	bl	8007434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2221      	movs	r2, #33	@ 0x21
 8006a6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a70:	e019      	b.n	8006aa6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a72:	7afb      	ldrb	r3, [r7, #11]
 8006a74:	2b22      	cmp	r3, #34	@ 0x22
 8006a76:	d002      	beq.n	8006a7e <I2C_ITSlaveCplt+0x56>
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a7c:	d108      	bne.n	8006a90 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006a7e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fcd6 	bl	8007434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2222      	movs	r2, #34	@ 0x22
 8006a8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a8e:	e00a      	b.n	8006aa6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	2b28      	cmp	r3, #40	@ 0x28
 8006a94:	d107      	bne.n	8006aa6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006a96:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fcca 	bl	8007434 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ab4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6859      	ldr	r1, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4b89      	ldr	r3, [pc, #548]	@ (8006ce8 <I2C_ITSlaveCplt+0x2c0>)
 8006ac2:	400b      	ands	r3, r1
 8006ac4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa7d 	bl	8006fc6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d013      	beq.n	8006afe <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ae4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01f      	beq.n	8006b2e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006afc:	e017      	b.n	8006b2e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d012      	beq.n	8006b2e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b16:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d006      	beq.n	8006b2e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d020      	beq.n	8006b7a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0304 	bic.w	r3, r3, #4
 8006b3e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00c      	beq.n	8006b7a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b88:	f043 0204 	orr.w	r2, r3, #4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d049      	beq.n	8006c2e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d044      	beq.n	8006c2e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d128      	bne.n	8006c00 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b28      	cmp	r3, #40	@ 0x28
 8006bb8:	d108      	bne.n	8006bcc <I2C_ITSlaveCplt+0x1a4>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bc0:	d104      	bne.n	8006bcc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006bc2:	6979      	ldr	r1, [r7, #20]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f893 	bl	8006cf0 <I2C_ITListenCplt>
 8006bca:	e030      	b.n	8006c2e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b29      	cmp	r3, #41	@ 0x29
 8006bd6:	d10e      	bne.n	8006bf6 <I2C_ITSlaveCplt+0x1ce>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bde:	d00a      	beq.n	8006bf6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2210      	movs	r2, #16
 8006be6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f9ec 	bl	8006fc6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff febe 	bl	8006970 <I2C_ITSlaveSeqCplt>
 8006bf4:	e01b      	b.n	8006c2e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2210      	movs	r2, #16
 8006bfc:	61da      	str	r2, [r3, #28]
 8006bfe:	e016      	b.n	8006c2e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2210      	movs	r2, #16
 8006c06:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0c:	f043 0204 	orr.w	r2, r3, #4
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <I2C_ITSlaveCplt+0x1fa>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c20:	d105      	bne.n	8006c2e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8b5 	bl	8006d98 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d010      	beq.n	8006c66 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8a4 	bl	8006d98 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b28      	cmp	r3, #40	@ 0x28
 8006c5a:	d141      	bne.n	8006ce0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006c5c:	6979      	ldr	r1, [r7, #20]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f846 	bl	8006cf0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c64:	e03c      	b.n	8006ce0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c6e:	d014      	beq.n	8006c9a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fe7d 	bl	8006970 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a1c      	ldr	r2, [pc, #112]	@ (8006cec <I2C_ITSlaveCplt+0x2c4>)
 8006c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fcd1 	bl	800663a <HAL_I2C_ListenCpltCallback>
}
 8006c98:	e022      	b.n	8006ce0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b22      	cmp	r3, #34	@ 0x22
 8006ca4:	d10e      	bne.n	8006cc4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff fca4 	bl	800660a <HAL_I2C_SlaveRxCpltCallback>
}
 8006cc2:	e00d      	b.n	8006ce0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fc8b 	bl	80065f6 <HAL_I2C_SlaveTxCpltCallback>
}
 8006ce0:	bf00      	nop
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	fe00e800 	.word	0xfe00e800
 8006cec:	ffff0000 	.word	0xffff0000

08006cf0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a25      	ldr	r2, [pc, #148]	@ (8006d94 <I2C_ITListenCplt+0xa4>)
 8006cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d022      	beq.n	8006d6c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d012      	beq.n	8006d6c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d64:	f043 0204 	orr.w	r2, r3, #4
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006d6c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fb5f 	bl	8007434 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fc57 	bl	800663a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	ffff0000 	.word	0xffff0000

08006d98 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a6d      	ldr	r2, [pc, #436]	@ (8006f6c <I2C_ITError+0x1d4>)
 8006db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	2b28      	cmp	r3, #40	@ 0x28
 8006dce:	d005      	beq.n	8006ddc <I2C_ITError+0x44>
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b29      	cmp	r3, #41	@ 0x29
 8006dd4:	d002      	beq.n	8006ddc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dda:	d10b      	bne.n	8006df4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ddc:	2103      	movs	r1, #3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fb28 	bl	8007434 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2228      	movs	r2, #40	@ 0x28
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a60      	ldr	r2, [pc, #384]	@ (8006f70 <I2C_ITError+0x1d8>)
 8006df0:	635a      	str	r2, [r3, #52]	@ 0x34
 8006df2:	e030      	b.n	8006e56 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006df4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fb1b 	bl	8007434 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f8e1 	bl	8006fc6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b60      	cmp	r3, #96	@ 0x60
 8006e0e:	d01f      	beq.n	8006e50 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d114      	bne.n	8006e50 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	f003 0310 	and.w	r3, r3, #16
 8006e30:	2b10      	cmp	r3, #16
 8006e32:	d109      	bne.n	8006e48 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2210      	movs	r2, #16
 8006e3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e40:	f043 0204 	orr.w	r2, r3, #4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d039      	beq.n	8006ed8 <I2C_ITError+0x140>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b11      	cmp	r3, #17
 8006e68:	d002      	beq.n	8006e70 <I2C_ITError+0xd8>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b21      	cmp	r3, #33	@ 0x21
 8006e6e:	d133      	bne.n	8006ed8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e7e:	d107      	bne.n	8006e90 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fe05 	bl	8005aa4 <HAL_DMA_GetState>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d017      	beq.n	8006ed0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea4:	4a33      	ldr	r2, [pc, #204]	@ (8006f74 <I2C_ITError+0x1dc>)
 8006ea6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe fce7 	bl	8005888 <HAL_DMA_Abort_IT>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d04d      	beq.n	8006f5c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006eca:	4610      	mov	r0, r2
 8006ecc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ece:	e045      	b.n	8006f5c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f851 	bl	8006f78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ed6:	e041      	b.n	8006f5c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d039      	beq.n	8006f54 <I2C_ITError+0x1bc>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b12      	cmp	r3, #18
 8006ee4:	d002      	beq.n	8006eec <I2C_ITError+0x154>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b22      	cmp	r3, #34	@ 0x22
 8006eea:	d133      	bne.n	8006f54 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ef6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006efa:	d107      	bne.n	8006f0c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f0a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fdc7 	bl	8005aa4 <HAL_DMA_GetState>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d017      	beq.n	8006f4c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f20:	4a14      	ldr	r2, [pc, #80]	@ (8006f74 <I2C_ITError+0x1dc>)
 8006f22:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fca9 	bl	8005888 <HAL_DMA_Abort_IT>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d011      	beq.n	8006f60 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f46:	4610      	mov	r0, r2
 8006f48:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f4a:	e009      	b.n	8006f60 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f813 	bl	8006f78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f52:	e005      	b.n	8006f60 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f80f 	bl	8006f78 <I2C_TreatErrorCallback>
  }
}
 8006f5a:	e002      	b.n	8006f62 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f5c:	bf00      	nop
 8006f5e:	e000      	b.n	8006f62 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f60:	bf00      	nop
}
 8006f62:	bf00      	nop
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	ffff0000 	.word	0xffff0000
 8006f70:	08006677 	.word	0x08006677
 8006f74:	0800700f 	.word	0x0800700f

08006f78 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b60      	cmp	r3, #96	@ 0x60
 8006f8a:	d10e      	bne.n	8006faa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff fb5d 	bl	8006662 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fa8:	e009      	b.n	8006fbe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fb48 	bl	800664e <HAL_I2C_ErrorCallback>
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d103      	bne.n	8006fe4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d007      	beq.n	8007002 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0201 	orr.w	r2, r2, #1
 8007000:	619a      	str	r2, [r3, #24]
  }
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007028:	2200      	movs	r2, #0
 800702a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007038:	2200      	movs	r2, #0
 800703a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7ff ff9b 	bl	8006f78 <I2C_TreatErrorCallback>
}
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	603b      	str	r3, [r7, #0]
 8007056:	4613      	mov	r3, r2
 8007058:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800705a:	e03b      	b.n	80070d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f8d5 	bl	8007210 <I2C_IsErrorOccurred>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e041      	b.n	80070f4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d02d      	beq.n	80070d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007078:	f7fe f830 	bl	80050dc <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d302      	bcc.n	800708e <I2C_WaitOnFlagUntilTimeout+0x44>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d122      	bne.n	80070d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699a      	ldr	r2, [r3, #24]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4013      	ands	r3, r2
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	429a      	cmp	r2, r3
 800709c:	bf0c      	ite	eq
 800709e:	2301      	moveq	r3, #1
 80070a0:	2300      	movne	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d113      	bne.n	80070d4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b0:	f043 0220 	orr.w	r2, r3, #32
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e00f      	b.n	80070f4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4013      	ands	r3, r2
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	bf0c      	ite	eq
 80070e4:	2301      	moveq	r3, #1
 80070e6:	2300      	movne	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	79fb      	ldrb	r3, [r7, #7]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d0b4      	beq.n	800705c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007108:	e033      	b.n	8007172 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f87e 	bl	8007210 <I2C_IsErrorOccurred>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e031      	b.n	8007182 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d025      	beq.n	8007172 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007126:	f7fd ffd9 	bl	80050dc <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d11a      	bne.n	8007172 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b02      	cmp	r3, #2
 8007148:	d013      	beq.n	8007172 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714e:	f043 0220 	orr.w	r2, r3, #32
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2220      	movs	r2, #32
 800715a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e007      	b.n	8007182 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b02      	cmp	r3, #2
 800717e:	d1c4      	bne.n	800710a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007196:	e02f      	b.n	80071f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f837 	bl	8007210 <I2C_IsErrorOccurred>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e02d      	b.n	8007208 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ac:	f7fd ff96 	bl	80050dc <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d302      	bcc.n	80071c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d11a      	bne.n	80071f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d013      	beq.n	80071f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d4:	f043 0220 	orr.w	r2, r3, #32
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e007      	b.n	8007208 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b20      	cmp	r3, #32
 8007204:	d1c8      	bne.n	8007198 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	@ 0x28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b00      	cmp	r3, #0
 800723a:	d068      	beq.n	800730e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2210      	movs	r2, #16
 8007242:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007244:	e049      	b.n	80072da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d045      	beq.n	80072da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800724e:	f7fd ff45 	bl	80050dc <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	429a      	cmp	r2, r3
 800725c:	d302      	bcc.n	8007264 <I2C_IsErrorOccurred+0x54>
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d13a      	bne.n	80072da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800726e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007276:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007286:	d121      	bne.n	80072cc <I2C_IsErrorOccurred+0xbc>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800728e:	d01d      	beq.n	80072cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007290:	7cfb      	ldrb	r3, [r7, #19]
 8007292:	2b20      	cmp	r3, #32
 8007294:	d01a      	beq.n	80072cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072a6:	f7fd ff19 	bl	80050dc <HAL_GetTick>
 80072aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ac:	e00e      	b.n	80072cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072ae:	f7fd ff15 	bl	80050dc <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b19      	cmp	r3, #25
 80072ba:	d907      	bls.n	80072cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	f043 0320 	orr.w	r3, r3, #32
 80072c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80072ca:	e006      	b.n	80072da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d1e9      	bne.n	80072ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d003      	beq.n	80072f0 <I2C_IsErrorOccurred+0xe0>
 80072e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0aa      	beq.n	8007246 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80072f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2220      	movs	r2, #32
 80072fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	f043 0304 	orr.w	r3, r3, #4
 8007306:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00b      	beq.n	8007338 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	f043 0308 	orr.w	r3, r3, #8
 8007348:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007352:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	f043 0302 	orr.w	r3, r3, #2
 800736a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007374:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800737c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01c      	beq.n	80073be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f7ff fe1e 	bl	8006fc6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6859      	ldr	r1, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <I2C_IsErrorOccurred+0x1bc>)
 8007396:	400b      	ands	r3, r1
 8007398:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	431a      	orrs	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80073be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3728      	adds	r7, #40	@ 0x28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	fe00e800 	.word	0xfe00e800

080073d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	817b      	strh	r3, [r7, #10]
 80073de:	4613      	mov	r3, r2
 80073e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073e2:	897b      	ldrh	r3, [r7, #10]
 80073e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073e8:	7a7b      	ldrb	r3, [r7, #9]
 80073ea:	041b      	lsls	r3, r3, #16
 80073ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	0d5b      	lsrs	r3, r3, #21
 800740a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800740e:	4b08      	ldr	r3, [pc, #32]	@ (8007430 <I2C_TransferConfig+0x60>)
 8007410:	430b      	orrs	r3, r1
 8007412:	43db      	mvns	r3, r3
 8007414:	ea02 0103 	and.w	r1, r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	03ff63ff 	.word	0x03ff63ff

08007434 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007444:	887b      	ldrh	r3, [r7, #2]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00f      	beq.n	800746e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007454:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007462:	2b28      	cmp	r3, #40	@ 0x28
 8007464:	d003      	beq.n	800746e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800746c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800746e:	887b      	ldrh	r3, [r7, #2]
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00f      	beq.n	8007498 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800747e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800748c:	2b28      	cmp	r3, #40	@ 0x28
 800748e:	d003      	beq.n	8007498 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007496:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007498:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800749c:	2b00      	cmp	r3, #0
 800749e:	da03      	bge.n	80074a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80074a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80074a8:	887b      	ldrh	r3, [r7, #2]
 80074aa:	2b10      	cmp	r3, #16
 80074ac:	d103      	bne.n	80074b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80074b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80074b6:	887b      	ldrh	r3, [r7, #2]
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d103      	bne.n	80074c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f043 0320 	orr.w	r3, r3, #32
 80074c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80074c4:	887b      	ldrh	r3, [r7, #2]
 80074c6:	2b40      	cmp	r3, #64	@ 0x40
 80074c8:	d103      	bne.n	80074d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6819      	ldr	r1, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	43da      	mvns	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	400a      	ands	r2, r1
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b20      	cmp	r3, #32
 8007504:	d138      	bne.n	8007578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007510:	2302      	movs	r3, #2
 8007512:	e032      	b.n	800757a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2224      	movs	r2, #36	@ 0x24
 8007520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0201 	bic.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6819      	ldr	r1, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	e000      	b.n	800757a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007578:	2302      	movs	r3, #2
  }
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b20      	cmp	r3, #32
 800759a:	d139      	bne.n	8007610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d101      	bne.n	80075aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075a6:	2302      	movs	r3, #2
 80075a8:	e033      	b.n	8007612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2224      	movs	r2, #36	@ 0x24
 80075b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0201 	bic.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80075d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	e000      	b.n	8007612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007610:	2302      	movs	r3, #2
  }
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
	...

08007620 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01e      	beq.n	8007670 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8007632:	4b13      	ldr	r3, [pc, #76]	@ (8007680 <HAL_IPCC_Init+0x60>)
 8007634:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fd f98a 	bl	800495c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8007648:	68b8      	ldr	r0, [r7, #8]
 800764a:	f000 f85b 	bl	8007704 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f82c 	bl	80076b8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800766e:	e001      	b.n	8007674 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	58000c00 	.word	0x58000c00

08007684 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4613      	mov	r3, r2
 8007690:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	4613      	mov	r3, r2
 80076aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	e00f      	b.n	80076e6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	4a0b      	ldr	r2, [pc, #44]	@ (80076fc <IPCC_SetDefaultCallbacks+0x44>)
 80076d0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3306      	adds	r3, #6
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	4a08      	ldr	r2, [pc, #32]	@ (8007700 <IPCC_SetDefaultCallbacks+0x48>)
 80076de:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b05      	cmp	r3, #5
 80076ea:	d9ec      	bls.n	80076c6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80076ec:	bf00      	nop
 80076ee:	bf00      	nop
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	08007685 	.word	0x08007685
 8007700:	0800769f 	.word	0x0800769f

08007704 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8007718:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	223f      	movs	r2, #63	@ 0x3f
 800771e:	609a      	str	r2, [r3, #8]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007730:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a04      	ldr	r2, [pc, #16]	@ (8007748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800773a:	6013      	str	r3, [r2, #0]
}
 800773c:	bf00      	nop
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	58000400 	.word	0x58000400

0800774c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007750:	4b04      	ldr	r3, [pc, #16]	@ (8007764 <HAL_PWREx_GetVoltageRange+0x18>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	58000400 	.word	0x58000400

08007768 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007768:	b480      	push	{r7}
 800776a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800776c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800777a:	d101      	bne.n	8007780 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800777c:	2301      	movs	r3, #1
 800777e:	e000      	b.n	8007782 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <LL_RCC_HSE_Enable>:
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800779a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800779e:	6013      	str	r3, [r2, #0]
}
 80077a0:	bf00      	nop
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <LL_RCC_HSE_Disable>:
{
 80077aa:	b480      	push	{r7}
 80077ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80077ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077bc:	6013      	str	r3, [r2, #0]
}
 80077be:	bf00      	nop
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <LL_RCC_HSE_IsReady>:
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80077cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077da:	d101      	bne.n	80077e0 <LL_RCC_HSE_IsReady+0x18>
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <LL_RCC_HSE_IsReady+0x1a>
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <LL_RCC_HSI_Enable>:
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80077f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <LL_RCC_HSI_Disable>:
{
 800780a:	b480      	push	{r7}
 800780c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800780e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800781c:	6013      	str	r3, [r2, #0]
}
 800781e:	bf00      	nop
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <LL_RCC_HSI_IsReady>:
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800782c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800783a:	d101      	bne.n	8007840 <LL_RCC_HSI_IsReady+0x18>
 800783c:	2301      	movs	r3, #1
 800783e:	e000      	b.n	8007842 <LL_RCC_HSI_IsReady+0x1a>
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <LL_RCC_HSI_SetCalibTrimming>:
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	061b      	lsls	r3, r3, #24
 8007862:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007866:	4313      	orrs	r3, r2
 8007868:	604b      	str	r3, [r1, #4]
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <LL_RCC_HSI48_Enable>:
{
 8007876:	b480      	push	{r7}
 8007878:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800787a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800787e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800788e:	bf00      	nop
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <LL_RCC_HSI48_Disable>:
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800789c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <LL_RCC_HSI48_IsReady>:
{
 80078ba:	b480      	push	{r7}
 80078bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80078be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d101      	bne.n	80078d2 <LL_RCC_HSI48_IsReady+0x18>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <LL_RCC_HSI48_IsReady+0x1a>
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <LL_RCC_LSE_Enable>:
{
 80078de:	b480      	push	{r7}
 80078e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80078e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078ee:	f043 0301 	orr.w	r3, r3, #1
 80078f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80078f6:	bf00      	nop
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <LL_RCC_LSE_Disable>:
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007910:	f023 0301 	bic.w	r3, r3, #1
 8007914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007918:	bf00      	nop
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <LL_RCC_LSE_EnableBypass>:
{
 8007922:	b480      	push	{r7}
 8007924:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800792a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800792e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007932:	f043 0304 	orr.w	r3, r3, #4
 8007936:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800793a:	bf00      	nop
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <LL_RCC_LSE_DisableBypass>:
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800794c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007950:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007954:	f023 0304 	bic.w	r3, r3, #4
 8007958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800795c:	bf00      	nop
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <LL_RCC_LSE_IsReady>:
{
 8007966:	b480      	push	{r7}
 8007968:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800796a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800796e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b02      	cmp	r3, #2
 8007978:	d101      	bne.n	800797e <LL_RCC_LSE_IsReady+0x18>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <LL_RCC_LSE_IsReady+0x1a>
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <LL_RCC_LSI1_Enable>:
{
 800798a:	b480      	push	{r7}
 800798c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800798e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007996:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80079a2:	bf00      	nop
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <LL_RCC_LSI1_Disable>:
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80079b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <LL_RCC_LSI1_IsReady>:
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80079d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d101      	bne.n	80079e6 <LL_RCC_LSI1_IsReady+0x18>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <LL_RCC_LSI1_IsReady+0x1a>
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <LL_RCC_LSI2_Enable>:
{
 80079f2:	b480      	push	{r7}
 80079f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80079f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a02:	f043 0304 	orr.w	r3, r3, #4
 8007a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007a0a:	bf00      	nop
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <LL_RCC_LSI2_Disable>:
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a24:	f023 0304 	bic.w	r3, r3, #4
 8007a28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007a2c:	bf00      	nop
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <LL_RCC_LSI2_IsReady>:
{
 8007a36:	b480      	push	{r7}
 8007a38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b08      	cmp	r3, #8
 8007a48:	d101      	bne.n	8007a4e <LL_RCC_LSI2_IsReady+0x18>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e000      	b.n	8007a50 <LL_RCC_LSI2_IsReady+0x1a>
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <LL_RCC_LSI2_SetTrimming>:
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	021b      	lsls	r3, r3, #8
 8007a72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <LL_RCC_MSI_Enable>:
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a96:	f043 0301 	orr.w	r3, r3, #1
 8007a9a:	6013      	str	r3, [r2, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <LL_RCC_MSI_Disable>:
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ab4:	f023 0301 	bic.w	r3, r3, #1
 8007ab8:	6013      	str	r3, [r2, #0]
}
 8007aba:	bf00      	nop
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <LL_RCC_MSI_IsReady>:
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d101      	bne.n	8007ada <LL_RCC_MSI_IsReady+0x16>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <LL_RCC_MSI_IsReady+0x18>
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <LL_RCC_MSI_SetRange>:
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007af8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	600b      	str	r3, [r1, #0]
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <LL_RCC_MSI_GetRange>:
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b1e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2bb0      	cmp	r3, #176	@ 0xb0
 8007b24:	d901      	bls.n	8007b2a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007b26:	23b0      	movs	r3, #176	@ 0xb0
 8007b28:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007b2a:	687b      	ldr	r3, [r7, #4]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b52:	4313      	orrs	r3, r2
 8007b54:	604b      	str	r3, [r1, #4]
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <LL_RCC_SetSysClkSource>:
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f023 0203 	bic.w	r2, r3, #3
 8007b74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	608b      	str	r3, [r1, #8]
}
 8007b7e:	bf00      	nop
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <LL_RCC_GetSysClkSource>:
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f003 030c 	and.w	r3, r3, #12
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <LL_RCC_SetAHBPrescaler>:
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	608b      	str	r3, [r1, #8]
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <LL_C2_RCC_SetAHBPrescaler>:
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007bda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <LL_RCC_SetAHB4Prescaler>:
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007c06:	f023 020f 	bic.w	r2, r3, #15
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	091b      	lsrs	r3, r3, #4
 8007c0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <LL_RCC_SetAPB1Prescaler>:
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	608b      	str	r3, [r1, #8]
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <LL_RCC_SetAPB2Prescaler>:
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007c5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	608b      	str	r3, [r1, #8]
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <LL_RCC_GetAHBPrescaler>:
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <LL_RCC_GetAHB4Prescaler>:
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c94:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <LL_RCC_GetAPB1Prescaler>:
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <LL_RCC_GetAPB2Prescaler>:
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cea:	6013      	str	r3, [r2, #0]
}
 8007cec:	bf00      	nop
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d08:	6013      	str	r3, [r2, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d26:	d101      	bne.n	8007d2c <LL_RCC_PLL_IsReady+0x18>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <LL_RCC_PLL_IsReady+0x1a>
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	0a1b      	lsrs	r3, r3, #8
 8007d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007d52:	b480      	push	{r7}
 8007d54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007d82:	b480      	push	{r7}
 8007d84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0303 	and.w	r3, r3, #3
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dac:	d101      	bne.n	8007db2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e000      	b.n	8007db4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dd2:	d101      	bne.n	8007dd8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e000      	b.n	8007dda <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df8:	d101      	bne.n	8007dfe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e1c:	d101      	bne.n	8007e22 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e40:	d101      	bne.n	8007e46 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e54:	b590      	push	{r4, r7, lr}
 8007e56:	b08d      	sub	sp, #52	@ 0x34
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e363      	b.n	800852e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 808d 	beq.w	8007f8e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e74:	f7ff fe89 	bl	8007b8a <LL_RCC_GetSysClkSource>
 8007e78:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e7a:	f7ff ff82 	bl	8007d82 <LL_RCC_PLL_GetMainSource>
 8007e7e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_RCC_OscConfig+0x3e>
 8007e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e88:	2b0c      	cmp	r3, #12
 8007e8a:	d147      	bne.n	8007f1c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d144      	bne.n	8007f1c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e347      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007ea2:	f7ff fe34 	bl	8007b0e <LL_RCC_MSI_GetRange>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	429c      	cmp	r4, r3
 8007eaa:	d914      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fd2f 	bl	8008914 <RCC_SetFlashLatencyFromMSIRange>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e336      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff fe0e 	bl	8007ae6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fe32 	bl	8007b38 <LL_RCC_MSI_SetCalibTrimming>
 8007ed4:	e013      	b.n	8007efe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fe03 	bl	8007ae6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff fe27 	bl	8007b38 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fd10 	bl	8008914 <RCC_SetFlashLatencyFromMSIRange>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e317      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007efe:	f000 fcc9 	bl	8008894 <HAL_RCC_GetHCLKFreq>
 8007f02:	4603      	mov	r3, r0
 8007f04:	4aa4      	ldr	r2, [pc, #656]	@ (8008198 <HAL_RCC_OscConfig+0x344>)
 8007f06:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f08:	4ba4      	ldr	r3, [pc, #656]	@ (800819c <HAL_RCC_OscConfig+0x348>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fd f897 	bl	8005040 <HAL_InitTick>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d039      	beq.n	8007f8c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e308      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	69db      	ldr	r3, [r3, #28]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01e      	beq.n	8007f62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007f24:	f7ff fdb0 	bl	8007a88 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007f28:	f7fd f8d8 	bl	80050dc <HAL_GetTick>
 8007f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f30:	f7fd f8d4 	bl	80050dc <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e2f5      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007f42:	f7ff fdbf 	bl	8007ac4 <LL_RCC_MSI_IsReady>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0f1      	beq.n	8007f30 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff fdc8 	bl	8007ae6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff fdec 	bl	8007b38 <LL_RCC_MSI_SetCalibTrimming>
 8007f60:	e015      	b.n	8007f8e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007f62:	f7ff fda0 	bl	8007aa6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007f66:	f7fd f8b9 	bl	80050dc <HAL_GetTick>
 8007f6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007f6c:	e008      	b.n	8007f80 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f6e:	f7fd f8b5 	bl	80050dc <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e2d6      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007f80:	f7ff fda0 	bl	8007ac4 <LL_RCC_MSI_IsReady>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1f1      	bne.n	8007f6e <HAL_RCC_OscConfig+0x11a>
 8007f8a:	e000      	b.n	8007f8e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007f8c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d047      	beq.n	800802a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f9a:	f7ff fdf6 	bl	8007b8a <LL_RCC_GetSysClkSource>
 8007f9e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fa0:	f7ff feef 	bl	8007d82 <LL_RCC_PLL_GetMainSource>
 8007fa4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d005      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x164>
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	2b0c      	cmp	r3, #12
 8007fb0:	d108      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d105      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d134      	bne.n	800802a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e2b4      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x180>
 8007fce:	f7ff fbdd 	bl	800778c <LL_RCC_HSE_Enable>
 8007fd2:	e001      	b.n	8007fd8 <HAL_RCC_OscConfig+0x184>
 8007fd4:	f7ff fbe9 	bl	80077aa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d012      	beq.n	8008006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe0:	f7fd f87c 	bl	80050dc <HAL_GetTick>
 8007fe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fe8:	f7fd f878 	bl	80050dc <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b64      	cmp	r3, #100	@ 0x64
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e299      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007ffa:	f7ff fbe5 	bl	80077c8 <LL_RCC_HSE_IsReady>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0f1      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x194>
 8008004:	e011      	b.n	800802a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008006:	f7fd f869 	bl	80050dc <HAL_GetTick>
 800800a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800800c:	e008      	b.n	8008020 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800800e:	f7fd f865 	bl	80050dc <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b64      	cmp	r3, #100	@ 0x64
 800801a:	d901      	bls.n	8008020 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e286      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008020:	f7ff fbd2 	bl	80077c8 <LL_RCC_HSE_IsReady>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1f1      	bne.n	800800e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d04c      	beq.n	80080d0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008036:	f7ff fda8 	bl	8007b8a <LL_RCC_GetSysClkSource>
 800803a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800803c:	f7ff fea1 	bl	8007d82 <LL_RCC_PLL_GetMainSource>
 8008040:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b04      	cmp	r3, #4
 8008046:	d005      	beq.n	8008054 <HAL_RCC_OscConfig+0x200>
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	2b0c      	cmp	r3, #12
 800804c:	d10e      	bne.n	800806c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d10b      	bne.n	800806c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e266      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff fbf1 	bl	800784c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800806a:	e031      	b.n	80080d0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d019      	beq.n	80080a8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008074:	f7ff fbba 	bl	80077ec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008078:	f7fd f830 	bl	80050dc <HAL_GetTick>
 800807c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008080:	f7fd f82c 	bl	80050dc <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e24d      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008092:	f7ff fbc9 	bl	8007828 <LL_RCC_HSI_IsReady>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0f1      	beq.n	8008080 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff fbd3 	bl	800784c <LL_RCC_HSI_SetCalibTrimming>
 80080a6:	e013      	b.n	80080d0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080a8:	f7ff fbaf 	bl	800780a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ac:	f7fd f816 	bl	80050dc <HAL_GetTick>
 80080b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80080b2:	e008      	b.n	80080c6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080b4:	f7fd f812 	bl	80050dc <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e233      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80080c6:	f7ff fbaf 	bl	8007828 <LL_RCC_HSI_IsReady>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f1      	bne.n	80080b4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d106      	bne.n	80080ea <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 80a3 	beq.w	8008230 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d076      	beq.n	80081e0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0310 	and.w	r3, r3, #16
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d046      	beq.n	800818c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80080fe:	f7ff fc66 	bl	80079ce <LL_RCC_LSI1_IsReady>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d113      	bne.n	8008130 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008108:	f7ff fc3f 	bl	800798a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800810c:	f7fc ffe6 	bl	80050dc <HAL_GetTick>
 8008110:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008112:	e008      	b.n	8008126 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008114:	f7fc ffe2 	bl	80050dc <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e203      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008126:	f7ff fc52 	bl	80079ce <LL_RCC_LSI1_IsReady>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0f1      	beq.n	8008114 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008130:	f7ff fc5f 	bl	80079f2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008134:	f7fc ffd2 	bl	80050dc <HAL_GetTick>
 8008138:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800813c:	f7fc ffce 	bl	80050dc <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b03      	cmp	r3, #3
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e1ef      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800814e:	f7ff fc72 	bl	8007a36 <LL_RCC_LSI2_IsReady>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d0f1      	beq.n	800813c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fc7c 	bl	8007a5a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008162:	f7ff fc23 	bl	80079ac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008166:	f7fc ffb9 	bl	80050dc <HAL_GetTick>
 800816a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800816e:	f7fc ffb5 	bl	80050dc <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e1d6      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008180:	f7ff fc25 	bl	80079ce <LL_RCC_LSI1_IsReady>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f1      	bne.n	800816e <HAL_RCC_OscConfig+0x31a>
 800818a:	e051      	b.n	8008230 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800818c:	f7ff fbfd 	bl	800798a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008190:	f7fc ffa4 	bl	80050dc <HAL_GetTick>
 8008194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008196:	e00c      	b.n	80081b2 <HAL_RCC_OscConfig+0x35e>
 8008198:	20000014 	.word	0x20000014
 800819c:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80081a0:	f7fc ff9c 	bl	80050dc <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e1bd      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80081b2:	f7ff fc0c 	bl	80079ce <LL_RCC_LSI1_IsReady>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d0f1      	beq.n	80081a0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80081bc:	f7ff fc2a 	bl	8007a14 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80081c0:	e008      	b.n	80081d4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80081c2:	f7fc ff8b 	bl	80050dc <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d901      	bls.n	80081d4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e1ac      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80081d4:	f7ff fc2f 	bl	8007a36 <LL_RCC_LSI2_IsReady>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f1      	bne.n	80081c2 <HAL_RCC_OscConfig+0x36e>
 80081de:	e027      	b.n	8008230 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80081e0:	f7ff fc18 	bl	8007a14 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e4:	f7fc ff7a 	bl	80050dc <HAL_GetTick>
 80081e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80081ea:	e008      	b.n	80081fe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80081ec:	f7fc ff76 	bl	80050dc <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e197      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80081fe:	f7ff fc1a 	bl	8007a36 <LL_RCC_LSI2_IsReady>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f1      	bne.n	80081ec <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008208:	f7ff fbd0 	bl	80079ac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800820c:	f7fc ff66 	bl	80050dc <HAL_GetTick>
 8008210:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008214:	f7fc ff62 	bl	80050dc <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e183      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008226:	f7ff fbd2 	bl	80079ce <LL_RCC_LSI1_IsReady>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f1      	bne.n	8008214 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0304 	and.w	r3, r3, #4
 8008238:	2b00      	cmp	r3, #0
 800823a:	d05b      	beq.n	80082f4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800823c:	4ba7      	ldr	r3, [pc, #668]	@ (80084dc <HAL_RCC_OscConfig+0x688>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008244:	2b00      	cmp	r3, #0
 8008246:	d114      	bne.n	8008272 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008248:	f7ff fa70 	bl	800772c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800824c:	f7fc ff46 	bl	80050dc <HAL_GetTick>
 8008250:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008252:	e008      	b.n	8008266 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008254:	f7fc ff42 	bl	80050dc <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	2b02      	cmp	r3, #2
 8008260:	d901      	bls.n	8008266 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e163      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008266:	4b9d      	ldr	r3, [pc, #628]	@ (80084dc <HAL_RCC_OscConfig+0x688>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0f0      	beq.n	8008254 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d102      	bne.n	8008280 <HAL_RCC_OscConfig+0x42c>
 800827a:	f7ff fb30 	bl	80078de <LL_RCC_LSE_Enable>
 800827e:	e00c      	b.n	800829a <HAL_RCC_OscConfig+0x446>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	2b05      	cmp	r3, #5
 8008286:	d104      	bne.n	8008292 <HAL_RCC_OscConfig+0x43e>
 8008288:	f7ff fb4b 	bl	8007922 <LL_RCC_LSE_EnableBypass>
 800828c:	f7ff fb27 	bl	80078de <LL_RCC_LSE_Enable>
 8008290:	e003      	b.n	800829a <HAL_RCC_OscConfig+0x446>
 8008292:	f7ff fb35 	bl	8007900 <LL_RCC_LSE_Disable>
 8008296:	f7ff fb55 	bl	8007944 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d014      	beq.n	80082cc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a2:	f7fc ff1b 	bl	80050dc <HAL_GetTick>
 80082a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80082a8:	e00a      	b.n	80082c0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082aa:	f7fc ff17 	bl	80050dc <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e136      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80082c0:	f7ff fb51 	bl	8007966 <LL_RCC_LSE_IsReady>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0ef      	beq.n	80082aa <HAL_RCC_OscConfig+0x456>
 80082ca:	e013      	b.n	80082f4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082cc:	f7fc ff06 	bl	80050dc <HAL_GetTick>
 80082d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80082d2:	e00a      	b.n	80082ea <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082d4:	f7fc ff02 	bl	80050dc <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e121      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80082ea:	f7ff fb3c 	bl	8007966 <LL_RCC_LSE_IsReady>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1ef      	bne.n	80082d4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d02c      	beq.n	800835a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008304:	2b00      	cmp	r3, #0
 8008306:	d014      	beq.n	8008332 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008308:	f7ff fab5 	bl	8007876 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800830c:	f7fc fee6 	bl	80050dc <HAL_GetTick>
 8008310:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008314:	f7fc fee2 	bl	80050dc <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e103      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008326:	f7ff fac8 	bl	80078ba <LL_RCC_HSI48_IsReady>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0f1      	beq.n	8008314 <HAL_RCC_OscConfig+0x4c0>
 8008330:	e013      	b.n	800835a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008332:	f7ff fab1 	bl	8007898 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008336:	f7fc fed1 	bl	80050dc <HAL_GetTick>
 800833a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800833c:	e008      	b.n	8008350 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800833e:	f7fc fecd 	bl	80050dc <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e0ee      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008350:	f7ff fab3 	bl	80078ba <LL_RCC_HSI48_IsReady>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1f1      	bne.n	800833e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 80e4 	beq.w	800852c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008364:	f7ff fc11 	bl	8007b8a <LL_RCC_GetSysClkSource>
 8008368:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800836a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008376:	2b02      	cmp	r3, #2
 8008378:	f040 80b4 	bne.w	80084e4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f003 0203 	and.w	r2, r3, #3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008386:	429a      	cmp	r2, r3
 8008388:	d123      	bne.n	80083d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008394:	429a      	cmp	r2, r3
 8008396:	d11c      	bne.n	80083d2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d114      	bne.n	80083d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d10d      	bne.n	80083d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d106      	bne.n	80083d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d05d      	beq.n	800848e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b0c      	cmp	r3, #12
 80083d6:	d058      	beq.n	800848a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80083d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e0a1      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80083ea:	f7ff fc84 	bl	8007cf6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80083ee:	f7fc fe75 	bl	80050dc <HAL_GetTick>
 80083f2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083f4:	e008      	b.n	8008408 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083f6:	f7fc fe71 	bl	80050dc <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d901      	bls.n	8008408 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e092      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1ef      	bne.n	80083f6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	4b30      	ldr	r3, [pc, #192]	@ (80084e0 <HAL_RCC_OscConfig+0x68c>)
 800841e:	4013      	ands	r3, r2
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008428:	4311      	orrs	r1, r2
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800842e:	0212      	lsls	r2, r2, #8
 8008430:	4311      	orrs	r1, r2
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008436:	4311      	orrs	r1, r2
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800843c:	4311      	orrs	r1, r2
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008442:	430a      	orrs	r2, r1
 8008444:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008448:	4313      	orrs	r3, r2
 800844a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800844c:	f7ff fc44 	bl	8007cd8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800845a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800845e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008460:	f7fc fe3c 	bl	80050dc <HAL_GetTick>
 8008464:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008468:	f7fc fe38 	bl	80050dc <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e059      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800847a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0ef      	beq.n	8008468 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008488:	e050      	b.n	800852c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e04f      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800848e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d147      	bne.n	800852c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800849c:	f7ff fc1c 	bl	8007cd8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084b0:	f7fc fe14 	bl	80050dc <HAL_GetTick>
 80084b4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084b8:	f7fc fe10 	bl	80050dc <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e031      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0ef      	beq.n	80084b8 <HAL_RCC_OscConfig+0x664>
 80084d8:	e028      	b.n	800852c <HAL_RCC_OscConfig+0x6d8>
 80084da:	bf00      	nop
 80084dc:	58000400 	.word	0x58000400
 80084e0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	2b0c      	cmp	r3, #12
 80084e8:	d01e      	beq.n	8008528 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ea:	f7ff fc04 	bl	8007cf6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ee:	f7fc fdf5 	bl	80050dc <HAL_GetTick>
 80084f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084f6:	f7fc fdf1 	bl	80050dc <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e012      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1ef      	bne.n	80084f6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008520:	4b05      	ldr	r3, [pc, #20]	@ (8008538 <HAL_RCC_OscConfig+0x6e4>)
 8008522:	4013      	ands	r3, r2
 8008524:	60cb      	str	r3, [r1, #12]
 8008526:	e001      	b.n	800852c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e000      	b.n	800852e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3734      	adds	r7, #52	@ 0x34
 8008532:	46bd      	mov	sp, r7
 8008534:	bd90      	pop	{r4, r7, pc}
 8008536:	bf00      	nop
 8008538:	eefefffc 	.word	0xeefefffc

0800853c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e12d      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008550:	4b98      	ldr	r3, [pc, #608]	@ (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0307 	and.w	r3, r3, #7
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d91b      	bls.n	8008596 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855e:	4b95      	ldr	r3, [pc, #596]	@ (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f023 0207 	bic.w	r2, r3, #7
 8008566:	4993      	ldr	r1, [pc, #588]	@ (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	4313      	orrs	r3, r2
 800856c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800856e:	f7fc fdb5 	bl	80050dc <HAL_GetTick>
 8008572:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008574:	e008      	b.n	8008588 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008576:	f7fc fdb1 	bl	80050dc <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	2b02      	cmp	r3, #2
 8008582:	d901      	bls.n	8008588 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e111      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008588:	4b8a      	ldr	r3, [pc, #552]	@ (80087b4 <HAL_RCC_ClockConfig+0x278>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d1ef      	bne.n	8008576 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d016      	beq.n	80085d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fafb 	bl	8007ba2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80085ac:	f7fc fd96 	bl	80050dc <HAL_GetTick>
 80085b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80085b2:	e008      	b.n	80085c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80085b4:	f7fc fd92 	bl	80050dc <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d901      	bls.n	80085c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e0f2      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80085c6:	f7ff fbe8 	bl	8007d9a <LL_RCC_IsActiveFlag_HPRE>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0f1      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d016      	beq.n	800860a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff faf2 	bl	8007bca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80085e6:	f7fc fd79 	bl	80050dc <HAL_GetTick>
 80085ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80085ec:	e008      	b.n	8008600 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80085ee:	f7fc fd75 	bl	80050dc <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e0d5      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008600:	f7ff fbdd 	bl	8007dbe <LL_RCC_IsActiveFlag_C2HPRE>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0f1      	beq.n	80085ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008612:	2b00      	cmp	r3, #0
 8008614:	d016      	beq.n	8008644 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff faeb 	bl	8007bf6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008620:	f7fc fd5c 	bl	80050dc <HAL_GetTick>
 8008624:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008626:	e008      	b.n	800863a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008628:	f7fc fd58 	bl	80050dc <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b02      	cmp	r3, #2
 8008634:	d901      	bls.n	800863a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e0b8      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800863a:	f7ff fbd3 	bl	8007de4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d0f1      	beq.n	8008628 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d016      	beq.n	800867e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff fae5 	bl	8007c24 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800865a:	f7fc fd3f 	bl	80050dc <HAL_GetTick>
 800865e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008660:	e008      	b.n	8008674 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008662:	f7fc fd3b 	bl	80050dc <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e09b      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008674:	f7ff fbc9 	bl	8007e0a <LL_RCC_IsActiveFlag_PPRE1>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0f1      	beq.n	8008662 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d017      	beq.n	80086ba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fadb 	bl	8007c4c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008696:	f7fc fd21 	bl	80050dc <HAL_GetTick>
 800869a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800869c:	e008      	b.n	80086b0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800869e:	f7fc fd1d 	bl	80050dc <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d901      	bls.n	80086b0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e07d      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80086b0:	f7ff fbbd 	bl	8007e2e <LL_RCC_IsActiveFlag_PPRE2>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0f1      	beq.n	800869e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d043      	beq.n	800874e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d106      	bne.n	80086dc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80086ce:	f7ff f87b 	bl	80077c8 <LL_RCC_HSE_IsReady>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11e      	bne.n	8008716 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e067      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d106      	bne.n	80086f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80086e4:	f7ff fb16 	bl	8007d14 <LL_RCC_PLL_IsReady>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d113      	bne.n	8008716 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e05c      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80086fa:	f7ff f9e3 	bl	8007ac4 <LL_RCC_MSI_IsReady>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d108      	bne.n	8008716 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e051      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008708:	f7ff f88e 	bl	8007828 <LL_RCC_HSI_IsReady>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e04a      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff fa21 	bl	8007b62 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008720:	f7fc fcdc 	bl	80050dc <HAL_GetTick>
 8008724:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008726:	e00a      	b.n	800873e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008728:	f7fc fcd8 	bl	80050dc <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008736:	4293      	cmp	r3, r2
 8008738:	d901      	bls.n	800873e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e036      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800873e:	f7ff fa24 	bl	8007b8a <LL_RCC_GetSysClkSource>
 8008742:	4602      	mov	r2, r0
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	429a      	cmp	r2, r3
 800874c:	d1ec      	bne.n	8008728 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800874e:	4b19      	ldr	r3, [pc, #100]	@ (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d21b      	bcs.n	8008794 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800875c:	4b15      	ldr	r3, [pc, #84]	@ (80087b4 <HAL_RCC_ClockConfig+0x278>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f023 0207 	bic.w	r2, r3, #7
 8008764:	4913      	ldr	r1, [pc, #76]	@ (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	4313      	orrs	r3, r2
 800876a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800876c:	f7fc fcb6 	bl	80050dc <HAL_GetTick>
 8008770:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008772:	e008      	b.n	8008786 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008774:	f7fc fcb2 	bl	80050dc <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b02      	cmp	r3, #2
 8008780:	d901      	bls.n	8008786 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e012      	b.n	80087ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008786:	4b0b      	ldr	r3, [pc, #44]	@ (80087b4 <HAL_RCC_ClockConfig+0x278>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0307 	and.w	r3, r3, #7
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d1ef      	bne.n	8008774 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008794:	f000 f87e 	bl	8008894 <HAL_RCC_GetHCLKFreq>
 8008798:	4603      	mov	r3, r0
 800879a:	4a07      	ldr	r2, [pc, #28]	@ (80087b8 <HAL_RCC_ClockConfig+0x27c>)
 800879c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800879e:	f7fc fca9 	bl	80050f4 <HAL_GetTickPrio>
 80087a2:	4603      	mov	r3, r0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fc fc4b 	bl	8005040 <HAL_InitTick>
 80087aa:	4603      	mov	r3, r0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	58004000 	.word	0x58004000
 80087b8:	20000014 	.word	0x20000014

080087bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087bc:	b590      	push	{r4, r7, lr}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087c2:	f7ff f9e2 	bl	8007b8a <LL_RCC_GetSysClkSource>
 80087c6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10a      	bne.n	80087e4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80087ce:	f7ff f99e 	bl	8007b0e <LL_RCC_MSI_GetRange>
 80087d2:	4603      	mov	r3, r0
 80087d4:	091b      	lsrs	r3, r3, #4
 80087d6:	f003 030f 	and.w	r3, r3, #15
 80087da:	4a2b      	ldr	r2, [pc, #172]	@ (8008888 <HAL_RCC_GetSysClockFreq+0xcc>)
 80087dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e0:	60fb      	str	r3, [r7, #12]
 80087e2:	e04b      	b.n	800887c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d102      	bne.n	80087f0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80087ea:	4b28      	ldr	r3, [pc, #160]	@ (800888c <HAL_RCC_GetSysClockFreq+0xd0>)
 80087ec:	60fb      	str	r3, [r7, #12]
 80087ee:	e045      	b.n	800887c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b08      	cmp	r3, #8
 80087f4:	d10a      	bne.n	800880c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80087f6:	f7fe ffb7 	bl	8007768 <LL_RCC_HSE_IsEnabledDiv2>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d102      	bne.n	8008806 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008800:	4b22      	ldr	r3, [pc, #136]	@ (800888c <HAL_RCC_GetSysClockFreq+0xd0>)
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	e03a      	b.n	800887c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008806:	4b22      	ldr	r3, [pc, #136]	@ (8008890 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008808:	60fb      	str	r3, [r7, #12]
 800880a:	e037      	b.n	800887c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800880c:	f7ff fab9 	bl	8007d82 <LL_RCC_PLL_GetMainSource>
 8008810:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d003      	beq.n	8008820 <HAL_RCC_GetSysClockFreq+0x64>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b03      	cmp	r3, #3
 800881c:	d003      	beq.n	8008826 <HAL_RCC_GetSysClockFreq+0x6a>
 800881e:	e00d      	b.n	800883c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008820:	4b1a      	ldr	r3, [pc, #104]	@ (800888c <HAL_RCC_GetSysClockFreq+0xd0>)
 8008822:	60bb      	str	r3, [r7, #8]
        break;
 8008824:	e015      	b.n	8008852 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008826:	f7fe ff9f 	bl	8007768 <LL_RCC_HSE_IsEnabledDiv2>
 800882a:	4603      	mov	r3, r0
 800882c:	2b01      	cmp	r3, #1
 800882e:	d102      	bne.n	8008836 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008830:	4b16      	ldr	r3, [pc, #88]	@ (800888c <HAL_RCC_GetSysClockFreq+0xd0>)
 8008832:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008834:	e00d      	b.n	8008852 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008836:	4b16      	ldr	r3, [pc, #88]	@ (8008890 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008838:	60bb      	str	r3, [r7, #8]
        break;
 800883a:	e00a      	b.n	8008852 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800883c:	f7ff f967 	bl	8007b0e <LL_RCC_MSI_GetRange>
 8008840:	4603      	mov	r3, r0
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	4a0f      	ldr	r2, [pc, #60]	@ (8008888 <HAL_RCC_GetSysClockFreq+0xcc>)
 800884a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884e:	60bb      	str	r3, [r7, #8]
        break;
 8008850:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008852:	f7ff fa71 	bl	8007d38 <LL_RCC_PLL_GetN>
 8008856:	4602      	mov	r2, r0
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	fb03 f402 	mul.w	r4, r3, r2
 800885e:	f7ff fa84 	bl	8007d6a <LL_RCC_PLL_GetDivider>
 8008862:	4603      	mov	r3, r0
 8008864:	091b      	lsrs	r3, r3, #4
 8008866:	3301      	adds	r3, #1
 8008868:	fbb4 f4f3 	udiv	r4, r4, r3
 800886c:	f7ff fa71 	bl	8007d52 <LL_RCC_PLL_GetR>
 8008870:	4603      	mov	r3, r0
 8008872:	0f5b      	lsrs	r3, r3, #29
 8008874:	3301      	adds	r3, #1
 8008876:	fbb4 f3f3 	udiv	r3, r4, r3
 800887a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800887c:	68fb      	ldr	r3, [r7, #12]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	bd90      	pop	{r4, r7, pc}
 8008886:	bf00      	nop
 8008888:	08014f68 	.word	0x08014f68
 800888c:	00f42400 	.word	0x00f42400
 8008890:	01e84800 	.word	0x01e84800

08008894 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008894:	b598      	push	{r3, r4, r7, lr}
 8008896:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008898:	f7ff ff90 	bl	80087bc <HAL_RCC_GetSysClockFreq>
 800889c:	4604      	mov	r4, r0
 800889e:	f7ff f9e9 	bl	8007c74 <LL_RCC_GetAHBPrescaler>
 80088a2:	4603      	mov	r3, r0
 80088a4:	091b      	lsrs	r3, r3, #4
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	4a03      	ldr	r2, [pc, #12]	@ (80088b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80088ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	bd98      	pop	{r3, r4, r7, pc}
 80088b8:	08014f08 	.word	0x08014f08

080088bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088bc:	b598      	push	{r3, r4, r7, lr}
 80088be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80088c0:	f7ff ffe8 	bl	8008894 <HAL_RCC_GetHCLKFreq>
 80088c4:	4604      	mov	r4, r0
 80088c6:	f7ff f9ef 	bl	8007ca8 <LL_RCC_GetAPB1Prescaler>
 80088ca:	4603      	mov	r3, r0
 80088cc:	0a1b      	lsrs	r3, r3, #8
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	4a04      	ldr	r2, [pc, #16]	@ (80088e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80088d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d8:	f003 031f 	and.w	r3, r3, #31
 80088dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	bd98      	pop	{r3, r4, r7, pc}
 80088e4:	08014f48 	.word	0x08014f48

080088e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088e8:	b598      	push	{r3, r4, r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80088ec:	f7ff ffd2 	bl	8008894 <HAL_RCC_GetHCLKFreq>
 80088f0:	4604      	mov	r4, r0
 80088f2:	f7ff f9e5 	bl	8007cc0 <LL_RCC_GetAPB2Prescaler>
 80088f6:	4603      	mov	r3, r0
 80088f8:	0adb      	lsrs	r3, r3, #11
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	4a04      	ldr	r2, [pc, #16]	@ (8008910 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008904:	f003 031f 	and.w	r3, r3, #31
 8008908:	fa24 f303 	lsr.w	r3, r4, r3
}
 800890c:	4618      	mov	r0, r3
 800890e:	bd98      	pop	{r3, r4, r7, pc}
 8008910:	08014f48 	.word	0x08014f48

08008914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2bb0      	cmp	r3, #176	@ 0xb0
 8008920:	d903      	bls.n	800892a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008922:	4b15      	ldr	r3, [pc, #84]	@ (8008978 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e007      	b.n	800893a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	091b      	lsrs	r3, r3, #4
 800892e:	f003 030f 	and.w	r3, r3, #15
 8008932:	4a11      	ldr	r2, [pc, #68]	@ (8008978 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008938:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800893a:	f7ff f9a7 	bl	8007c8c <LL_RCC_GetAHB4Prescaler>
 800893e:	4603      	mov	r3, r0
 8008940:	091b      	lsrs	r3, r3, #4
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	4a0d      	ldr	r2, [pc, #52]	@ (800897c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008952:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4a0a      	ldr	r2, [pc, #40]	@ (8008980 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008958:	fba2 2303 	umull	r2, r3, r2, r3
 800895c:	0c9c      	lsrs	r4, r3, #18
 800895e:	f7fe fef5 	bl	800774c <HAL_PWREx_GetVoltageRange>
 8008962:	4603      	mov	r3, r0
 8008964:	4619      	mov	r1, r3
 8008966:	4620      	mov	r0, r4
 8008968:	f000 f80c 	bl	8008984 <RCC_SetFlashLatency>
 800896c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	bd90      	pop	{r4, r7, pc}
 8008976:	bf00      	nop
 8008978:	08014f68 	.word	0x08014f68
 800897c:	08014f08 	.word	0x08014f08
 8008980:	431bde83 	.word	0x431bde83

08008984 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008984:	b590      	push	{r4, r7, lr}
 8008986:	b093      	sub	sp, #76	@ 0x4c
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800898e:	4b37      	ldr	r3, [pc, #220]	@ (8008a6c <RCC_SetFlashLatency+0xe8>)
 8008990:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8008994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800899a:	4a35      	ldr	r2, [pc, #212]	@ (8008a70 <RCC_SetFlashLatency+0xec>)
 800899c:	f107 031c 	add.w	r3, r7, #28
 80089a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80089a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80089a6:	4b33      	ldr	r3, [pc, #204]	@ (8008a74 <RCC_SetFlashLatency+0xf0>)
 80089a8:	f107 040c 	add.w	r4, r7, #12
 80089ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80089b2:	2300      	movs	r3, #0
 80089b4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089bc:	d11a      	bne.n	80089f4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80089be:	2300      	movs	r3, #0
 80089c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80089c2:	e013      	b.n	80089ec <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80089c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	3348      	adds	r3, #72	@ 0x48
 80089ca:	443b      	add	r3, r7
 80089cc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d807      	bhi.n	80089e6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80089d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	3348      	adds	r3, #72	@ 0x48
 80089dc:	443b      	add	r3, r7
 80089de:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80089e2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80089e4:	e020      	b.n	8008a28 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80089e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089e8:	3301      	adds	r3, #1
 80089ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80089ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d9e8      	bls.n	80089c4 <RCC_SetFlashLatency+0x40>
 80089f2:	e019      	b.n	8008a28 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80089f4:	2300      	movs	r3, #0
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f8:	e013      	b.n	8008a22 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80089fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	3348      	adds	r3, #72	@ 0x48
 8008a00:	443b      	add	r3, r7
 8008a02:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d807      	bhi.n	8008a1c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	3348      	adds	r3, #72	@ 0x48
 8008a12:	443b      	add	r3, r7
 8008a14:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008a18:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008a1a:	e005      	b.n	8008a28 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a1e:	3301      	adds	r3, #1
 8008a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d9e8      	bls.n	80089fa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008a28:	4b13      	ldr	r3, [pc, #76]	@ (8008a78 <RCC_SetFlashLatency+0xf4>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f023 0207 	bic.w	r2, r3, #7
 8008a30:	4911      	ldr	r1, [pc, #68]	@ (8008a78 <RCC_SetFlashLatency+0xf4>)
 8008a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a34:	4313      	orrs	r3, r2
 8008a36:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a38:	f7fc fb50 	bl	80050dc <HAL_GetTick>
 8008a3c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008a3e:	e008      	b.n	8008a52 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008a40:	f7fc fb4c 	bl	80050dc <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d901      	bls.n	8008a52 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e007      	b.n	8008a62 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008a52:	4b09      	ldr	r3, [pc, #36]	@ (8008a78 <RCC_SetFlashLatency+0xf4>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d1ef      	bne.n	8008a40 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	374c      	adds	r7, #76	@ 0x4c
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd90      	pop	{r4, r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	08014ce4 	.word	0x08014ce4
 8008a70:	08014cf4 	.word	0x08014cf4
 8008a74:	08014d00 	.word	0x08014d00
 8008a78:	58004000 	.word	0x58004000

08008a7c <LL_RCC_LSE_IsEnabled>:
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <LL_RCC_LSE_IsEnabled+0x18>
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <LL_RCC_LSE_IsEnabled+0x1a>
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <LL_RCC_LSE_IsReady>:
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aac:	f003 0302 	and.w	r3, r3, #2
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d101      	bne.n	8008ab8 <LL_RCC_LSE_IsReady+0x18>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e000      	b.n	8008aba <LL_RCC_LSE_IsReady+0x1a>
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <LL_RCC_SetRFWKPClockSource>:
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ad4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <LL_RCC_SetSMPSClockSource>:
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afe:	f023 0203 	bic.w	r2, r3, #3
 8008b02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <LL_RCC_SetSMPSPrescaler>:
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008b2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <LL_RCC_SetUSARTClockSource>:
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b50:	f023 0203 	bic.w	r2, r3, #3
 8008b54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <LL_RCC_SetLPUARTClockSource>:
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b7c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <LL_RCC_SetI2CClockSource>:
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	091b      	lsrs	r3, r3, #4
 8008bac:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8008bb0:	43db      	mvns	r3, r3
 8008bb2:	401a      	ands	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	011b      	lsls	r3, r3, #4
 8008bb8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8008bbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <LL_RCC_SetLPTIMClockSource>:
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bde:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	0c1b      	lsrs	r3, r3, #16
 8008be6:	041b      	lsls	r3, r3, #16
 8008be8:	43db      	mvns	r3, r3
 8008bea:	401a      	ands	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	041b      	lsls	r3, r3, #16
 8008bf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <LL_RCC_SetSAIClockSource>:
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008c1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <LL_RCC_SetRNGClockSource>:
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c42:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008c46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <LL_RCC_SetCLK48ClockSource>:
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008c72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008c7e:	bf00      	nop
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <LL_RCC_SetUSBClockSource>:
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff ffe3 	bl	8008c5e <LL_RCC_SetCLK48ClockSource>
}
 8008c98:	bf00      	nop
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <LL_RCC_SetADCClockSource>:
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cb0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008cb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <LL_RCC_SetRTCClockSource>:
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <LL_RCC_GetRTCClockSource>:
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <LL_RCC_ForceBackupDomainReset>:
{
 8008d12:	b480      	push	{r7}
 8008d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008d2a:	bf00      	nop
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008d4c:	bf00      	nop
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <LL_RCC_PLLSAI1_Enable>:
{
 8008d56:	b480      	push	{r7}
 8008d58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d68:	6013      	str	r3, [r2, #0]
}
 8008d6a:	bf00      	nop
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <LL_RCC_PLLSAI1_Disable>:
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d86:	6013      	str	r3, [r2, #0]
}
 8008d88:	bf00      	nop
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <LL_RCC_PLLSAI1_IsReady>:
{
 8008d92:	b480      	push	{r7}
 8008d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008da0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008da4:	d101      	bne.n	8008daa <LL_RCC_PLLSAI1_IsReady+0x18>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b088      	sub	sp, #32
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d034      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008dda:	d021      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008ddc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008de0:	d81b      	bhi.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008de2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008de6:	d01d      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008de8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008dec:	d815      	bhi.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008df2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008df6:	d110      	bne.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e06:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008e08:	e00d      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 f947 	bl	80090a2 <RCCEx_PLLSAI1_ConfigNP>
 8008e14:	4603      	mov	r3, r0
 8008e16:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008e18:	e005      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	77fb      	strb	r3, [r7, #31]
        break;
 8008e1e:	e002      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008e20:	bf00      	nop
 8008e22:	e000      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e26:	7ffb      	ldrb	r3, [r7, #31]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d105      	bne.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7ff fee8 	bl	8008c06 <LL_RCC_SetSAIClockSource>
 8008e36:	e001      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e38:	7ffb      	ldrb	r3, [r7, #31]
 8008e3a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d046      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008e48:	f7ff ff56 	bl	8008cf8 <LL_RCC_GetRTCClockSource>
 8008e4c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d03c      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008e58:	f7fe fc68 	bl	800772c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d105      	bne.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff ff30 	bl	8008ccc <LL_RCC_SetRTCClockSource>
 8008e6c:	e02e      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e76:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008e78:	f7ff ff4b 	bl	8008d12 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008e7c:	f7ff ff5a 	bl	8008d34 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008e8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008e98:	f7ff fdf0 	bl	8008a7c <LL_RCC_LSE_IsEnabled>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d114      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ea2:	f7fc f91b 	bl	80050dc <HAL_GetTick>
 8008ea6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008ea8:	e00b      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eaa:	f7fc f917 	bl	80050dc <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d902      	bls.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	77fb      	strb	r3, [r7, #31]
              break;
 8008ec0:	e004      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008ec2:	f7ff fded 	bl	8008aa0 <LL_RCC_LSE_IsReady>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d1ee      	bne.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008ecc:	7ffb      	ldrb	r3, [r7, #31]
 8008ece:	77bb      	strb	r3, [r7, #30]
 8008ed0:	e001      	b.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed2:	7ffb      	ldrb	r3, [r7, #31]
 8008ed4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d004      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fe2a 	bl	8008b40 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff fe35 	bl	8008b6c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0310 	and.w	r3, r3, #16
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d004      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7ff fe5d 	bl	8008bd2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0320 	and.w	r3, r3, #32
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d004      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff fe52 	bl	8008bd2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d004      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff fe2a 	bl	8008b98 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0308 	and.w	r3, r3, #8
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d004      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff fe1f 	bl	8008b98 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d022      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fe8d 	bl	8008c8a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f78:	d107      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008f84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f88:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f92:	d10b      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3304      	adds	r3, #4
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 f8dd 	bl	8009158 <RCCEx_PLLSAI1_ConfigNQ>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008fa2:	7ffb      	ldrb	r3, [r7, #31]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008fa8:	7ffb      	ldrb	r3, [r7, #31]
 8008faa:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d02b      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fc0:	d008      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fca:	d003      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d105      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fe2a 	bl	8008c32 <LL_RCC_SetRNGClockSource>
 8008fde:	e00a      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	2000      	movs	r0, #0
 8008fec:	f7ff fe21 	bl	8008c32 <LL_RCC_SetRNGClockSource>
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f7ff fe34 	bl	8008c5e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffa:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008ffe:	d107      	bne.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800900a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800900e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009018:	2b00      	cmp	r3, #0
 800901a:	d022      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff fe3d 	bl	8008ca0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800902e:	d107      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800903a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800903e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009048:	d10b      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3304      	adds	r3, #4
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f8dd 	bl	800920e <RCCEx_PLLSAI1_ConfigNR>
 8009054:	4603      	mov	r3, r0
 8009056:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009058:	7ffb      	ldrb	r3, [r7, #31]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800905e:	7ffb      	ldrb	r3, [r7, #31]
 8009060:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d004      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff fd26 	bl	8008ac4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d009      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009088:	4618      	mov	r0, r3
 800908a:	f7ff fd45 	bl	8008b18 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff fd2c 	bl	8008af0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009098:	7fbb      	ldrb	r3, [r7, #30]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3720      	adds	r7, #32
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80090ae:	f7ff fe61 	bl	8008d74 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80090b2:	f7fc f813 	bl	80050dc <HAL_GetTick>
 80090b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80090b8:	e009      	b.n	80090ce <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80090ba:	f7fc f80f 	bl	80050dc <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d902      	bls.n	80090ce <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	73fb      	strb	r3, [r7, #15]
      break;
 80090cc:	e004      	b.n	80090d8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80090ce:	f7ff fe60 	bl	8008d92 <LL_RCC_PLLSAI1_IsReady>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1f0      	bne.n	80090ba <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d137      	bne.n	800914e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80090de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	021b      	lsls	r3, r3, #8
 80090ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80090f2:	4313      	orrs	r3, r2
 80090f4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80090f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009108:	4313      	orrs	r3, r2
 800910a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800910c:	f7ff fe23 	bl	8008d56 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009110:	f7fb ffe4 	bl	80050dc <HAL_GetTick>
 8009114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009116:	e009      	b.n	800912c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009118:	f7fb ffe0 	bl	80050dc <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d902      	bls.n	800912c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	73fb      	strb	r3, [r7, #15]
        break;
 800912a:	e004      	b.n	8009136 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800912c:	f7ff fe31 	bl	8008d92 <LL_RCC_PLLSAI1_IsReady>
 8009130:	4603      	mov	r3, r0
 8009132:	2b01      	cmp	r3, #1
 8009134:	d1f0      	bne.n	8009118 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d108      	bne.n	800914e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800913c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009140:	691a      	ldr	r2, [r3, #16]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800914a:	4313      	orrs	r3, r2
 800914c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800914e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009164:	f7ff fe06 	bl	8008d74 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009168:	f7fb ffb8 	bl	80050dc <HAL_GetTick>
 800916c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800916e:	e009      	b.n	8009184 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009170:	f7fb ffb4 	bl	80050dc <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b02      	cmp	r3, #2
 800917c:	d902      	bls.n	8009184 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	73fb      	strb	r3, [r7, #15]
      break;
 8009182:	e004      	b.n	800918e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009184:	f7ff fe05 	bl	8008d92 <LL_RCC_PLLSAI1_IsReady>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1f0      	bne.n	8009170 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d137      	bne.n	8009204 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	021b      	lsls	r3, r3, #8
 80091a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091a8:	4313      	orrs	r3, r2
 80091aa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80091ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091be:	4313      	orrs	r3, r2
 80091c0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80091c2:	f7ff fdc8 	bl	8008d56 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c6:	f7fb ff89 	bl	80050dc <HAL_GetTick>
 80091ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80091cc:	e009      	b.n	80091e2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80091ce:	f7fb ff85 	bl	80050dc <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d902      	bls.n	80091e2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	73fb      	strb	r3, [r7, #15]
        break;
 80091e0:	e004      	b.n	80091ec <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80091e2:	f7ff fdd6 	bl	8008d92 <LL_RCC_PLLSAI1_IsReady>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d1f0      	bne.n	80091ce <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d108      	bne.n	8009204 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80091f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091f6:	691a      	ldr	r2, [r3, #16]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009200:	4313      	orrs	r3, r2
 8009202:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800921a:	f7ff fdab 	bl	8008d74 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800921e:	f7fb ff5d 	bl	80050dc <HAL_GetTick>
 8009222:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009224:	e009      	b.n	800923a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009226:	f7fb ff59 	bl	80050dc <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b02      	cmp	r3, #2
 8009232:	d902      	bls.n	800923a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	73fb      	strb	r3, [r7, #15]
      break;
 8009238:	e004      	b.n	8009244 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800923a:	f7ff fdaa 	bl	8008d92 <LL_RCC_PLLSAI1_IsReady>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1f0      	bne.n	8009226 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009244:	7bfb      	ldrb	r3, [r7, #15]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d137      	bne.n	80092ba <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800924a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	021b      	lsls	r3, r3, #8
 800925a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800925e:	4313      	orrs	r3, r2
 8009260:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009274:	4313      	orrs	r3, r2
 8009276:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009278:	f7ff fd6d 	bl	8008d56 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800927c:	f7fb ff2e 	bl	80050dc <HAL_GetTick>
 8009280:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009282:	e009      	b.n	8009298 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009284:	f7fb ff2a 	bl	80050dc <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d902      	bls.n	8009298 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	73fb      	strb	r3, [r7, #15]
        break;
 8009296:	e004      	b.n	80092a2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009298:	f7ff fd7b 	bl	8008d92 <LL_RCC_PLLSAI1_IsReady>
 800929c:	4603      	mov	r3, r0
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d1f0      	bne.n	8009284 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d108      	bne.n	80092ba <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80092a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092ac:	691a      	ldr	r2, [r3, #16]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092b6:	4313      	orrs	r3, r2
 80092b8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e09f      	b.n	8009416 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d106      	bne.n	80092f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7fb fb5a 	bl	80049a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80092f8:	4b49      	ldr	r3, [pc, #292]	@ (8009420 <HAL_RTC_Init+0x15c>)
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b10      	cmp	r3, #16
 8009302:	d07e      	beq.n	8009402 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	22ca      	movs	r2, #202	@ 0xca
 800930a:	625a      	str	r2, [r3, #36]	@ 0x24
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2253      	movs	r2, #83	@ 0x53
 8009312:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f8ab 	bl	8009470 <RTC_EnterInitMode>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	22ff      	movs	r2, #255	@ 0xff
 8009326:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2204      	movs	r2, #4
 800932c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	73fb      	strb	r3, [r7, #15]
 8009334:	e067      	b.n	8009406 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	6812      	ldr	r2, [r2, #0]
 8009340:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009348:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6899      	ldr	r1, [r3, #8]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	430a      	orrs	r2, r1
 8009366:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	68d2      	ldr	r2, [r2, #12]
 8009370:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6919      	ldr	r1, [r3, #16]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	041a      	lsls	r2, r3, #16
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68da      	ldr	r2, [r3, #12]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009394:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f022 0203 	bic.w	r2, r2, #3
 80093a4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	69da      	ldr	r2, [r3, #28]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	431a      	orrs	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d113      	bne.n	80093f4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f829 	bl	8009424 <HAL_RTC_WaitForSynchro>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00d      	beq.n	80093f4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	22ff      	movs	r2, #255	@ 0xff
 80093de:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2204      	movs	r2, #4
 80093e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e010      	b.n	8009416 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	22ff      	movs	r2, #255	@ 0xff
 80093fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
 8009400:	e001      	b.n	8009406 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d103      	bne.n	8009414 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	40002800 	.word	0x40002800

08009424 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800943a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800943c:	f7fb fe4e 	bl	80050dc <HAL_GetTick>
 8009440:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009442:	e009      	b.n	8009458 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009444:	f7fb fe4a 	bl	80050dc <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009452:	d901      	bls.n	8009458 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e007      	b.n	8009468 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0ee      	beq.n	8009444 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009482:	2b00      	cmp	r3, #0
 8009484:	d119      	bne.n	80094ba <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f04f 32ff 	mov.w	r2, #4294967295
 800948e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009490:	f7fb fe24 	bl	80050dc <HAL_GetTick>
 8009494:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009496:	e009      	b.n	80094ac <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009498:	f7fb fe20 	bl	80050dc <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094a6:	d901      	bls.n	80094ac <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e007      	b.n	80094bc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0ee      	beq.n	8009498 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80094da:	2302      	movs	r3, #2
 80094dc:	e0a8      	b.n	8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2202      	movs	r2, #2
 80094ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	22ca      	movs	r2, #202	@ 0xca
 80094f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2253      	movs	r2, #83	@ 0x53
 80094fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009508:	2b00      	cmp	r3, #0
 800950a:	d020      	beq.n	800954e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800950c:	f7fb fde6 	bl	80050dc <HAL_GetTick>
 8009510:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009512:	e015      	b.n	8009540 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009514:	f7fb fde2 	bl	80050dc <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009522:	d90d      	bls.n	8009540 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	22ff      	movs	r2, #255	@ 0xff
 800952a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2203      	movs	r2, #3
 8009530:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e077      	b.n	8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f003 0304 	and.w	r3, r3, #4
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e2      	bne.n	8009514 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800955c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	b2da      	uxtb	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800956e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009570:	f7fb fdb4 	bl	80050dc <HAL_GetTick>
 8009574:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009576:	e015      	b.n	80095a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009578:	f7fb fdb0 	bl	80050dc <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009586:	d90d      	bls.n	80095a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	22ff      	movs	r2, #255	@ 0xff
 800958e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2203      	movs	r2, #3
 8009594:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e045      	b.n	8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0e2      	beq.n	8009578 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0207 	bic.w	r2, r2, #7
 80095c8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6899      	ldr	r1, [r3, #8]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80095da:	4b17      	ldr	r3, [pc, #92]	@ (8009638 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80095dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095e0:	4a15      	ldr	r2, [pc, #84]	@ (8009638 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80095e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095e6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80095ea:	4b13      	ldr	r3, [pc, #76]	@ (8009638 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a12      	ldr	r2, [pc, #72]	@ (8009638 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80095f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095f4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009604:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009614:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	22ff      	movs	r2, #255	@ 0xff
 800961c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	58000800 	.word	0x58000800

0800963c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e049      	b.n	80096e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d106      	bne.n	8009668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7fb f9d2 	bl	8004a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3304      	adds	r3, #4
 8009678:	4619      	mov	r1, r3
 800967a:	4610      	mov	r0, r2
 800967c:	f000 fcce 	bl	800a01c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d001      	beq.n	8009704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e036      	b.n	8009772 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2202      	movs	r2, #2
 8009708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0201 	orr.w	r2, r2, #1
 800971a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a17      	ldr	r2, [pc, #92]	@ (8009780 <HAL_TIM_Base_Start_IT+0x94>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d004      	beq.n	8009730 <HAL_TIM_Base_Start_IT+0x44>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800972e:	d115      	bne.n	800975c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689a      	ldr	r2, [r3, #8]
 8009736:	4b13      	ldr	r3, [pc, #76]	@ (8009784 <HAL_TIM_Base_Start_IT+0x98>)
 8009738:	4013      	ands	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b06      	cmp	r3, #6
 8009740:	d015      	beq.n	800976e <HAL_TIM_Base_Start_IT+0x82>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009748:	d011      	beq.n	800976e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f042 0201 	orr.w	r2, r2, #1
 8009758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800975a:	e008      	b.n	800976e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 0201 	orr.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	e000      	b.n	8009770 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800976e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	40012c00 	.word	0x40012c00
 8009784:	00010007 	.word	0x00010007

08009788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e049      	b.n	800982e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f841 	bl	8009836 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f000 fc28 	bl	800a01c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
	...

0800984c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d109      	bne.n	8009870 <HAL_TIM_PWM_Start+0x24>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b01      	cmp	r3, #1
 8009866:	bf14      	ite	ne
 8009868:	2301      	movne	r3, #1
 800986a:	2300      	moveq	r3, #0
 800986c:	b2db      	uxtb	r3, r3
 800986e:	e03c      	b.n	80098ea <HAL_TIM_PWM_Start+0x9e>
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2b04      	cmp	r3, #4
 8009874:	d109      	bne.n	800988a <HAL_TIM_PWM_Start+0x3e>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b01      	cmp	r3, #1
 8009880:	bf14      	ite	ne
 8009882:	2301      	movne	r3, #1
 8009884:	2300      	moveq	r3, #0
 8009886:	b2db      	uxtb	r3, r3
 8009888:	e02f      	b.n	80098ea <HAL_TIM_PWM_Start+0x9e>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b08      	cmp	r3, #8
 800988e:	d109      	bne.n	80098a4 <HAL_TIM_PWM_Start+0x58>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b01      	cmp	r3, #1
 800989a:	bf14      	ite	ne
 800989c:	2301      	movne	r3, #1
 800989e:	2300      	moveq	r3, #0
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	e022      	b.n	80098ea <HAL_TIM_PWM_Start+0x9e>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b0c      	cmp	r3, #12
 80098a8:	d109      	bne.n	80098be <HAL_TIM_PWM_Start+0x72>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	bf14      	ite	ne
 80098b6:	2301      	movne	r3, #1
 80098b8:	2300      	moveq	r3, #0
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	e015      	b.n	80098ea <HAL_TIM_PWM_Start+0x9e>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b10      	cmp	r3, #16
 80098c2:	d109      	bne.n	80098d8 <HAL_TIM_PWM_Start+0x8c>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	bf14      	ite	ne
 80098d0:	2301      	movne	r3, #1
 80098d2:	2300      	moveq	r3, #0
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	e008      	b.n	80098ea <HAL_TIM_PWM_Start+0x9e>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	bf14      	ite	ne
 80098e4:	2301      	movne	r3, #1
 80098e6:	2300      	moveq	r3, #0
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e079      	b.n	80099e6 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d104      	bne.n	8009902 <HAL_TIM_PWM_Start+0xb6>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009900:	e023      	b.n	800994a <HAL_TIM_PWM_Start+0xfe>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b04      	cmp	r3, #4
 8009906:	d104      	bne.n	8009912 <HAL_TIM_PWM_Start+0xc6>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009910:	e01b      	b.n	800994a <HAL_TIM_PWM_Start+0xfe>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b08      	cmp	r3, #8
 8009916:	d104      	bne.n	8009922 <HAL_TIM_PWM_Start+0xd6>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009920:	e013      	b.n	800994a <HAL_TIM_PWM_Start+0xfe>
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b0c      	cmp	r3, #12
 8009926:	d104      	bne.n	8009932 <HAL_TIM_PWM_Start+0xe6>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009930:	e00b      	b.n	800994a <HAL_TIM_PWM_Start+0xfe>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b10      	cmp	r3, #16
 8009936:	d104      	bne.n	8009942 <HAL_TIM_PWM_Start+0xf6>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2202      	movs	r2, #2
 800993c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009940:	e003      	b.n	800994a <HAL_TIM_PWM_Start+0xfe>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2202      	movs	r2, #2
 8009946:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2201      	movs	r2, #1
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 feec 	bl	800a730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a24      	ldr	r2, [pc, #144]	@ (80099f0 <HAL_TIM_PWM_Start+0x1a4>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d009      	beq.n	8009976 <HAL_TIM_PWM_Start+0x12a>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a23      	ldr	r2, [pc, #140]	@ (80099f4 <HAL_TIM_PWM_Start+0x1a8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d004      	beq.n	8009976 <HAL_TIM_PWM_Start+0x12a>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a21      	ldr	r2, [pc, #132]	@ (80099f8 <HAL_TIM_PWM_Start+0x1ac>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d101      	bne.n	800997a <HAL_TIM_PWM_Start+0x12e>
 8009976:	2301      	movs	r3, #1
 8009978:	e000      	b.n	800997c <HAL_TIM_PWM_Start+0x130>
 800997a:	2300      	movs	r3, #0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d007      	beq.n	8009990 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800998e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a16      	ldr	r2, [pc, #88]	@ (80099f0 <HAL_TIM_PWM_Start+0x1a4>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d004      	beq.n	80099a4 <HAL_TIM_PWM_Start+0x158>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099a2:	d115      	bne.n	80099d0 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	4b14      	ldr	r3, [pc, #80]	@ (80099fc <HAL_TIM_PWM_Start+0x1b0>)
 80099ac:	4013      	ands	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b06      	cmp	r3, #6
 80099b4:	d015      	beq.n	80099e2 <HAL_TIM_PWM_Start+0x196>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099bc:	d011      	beq.n	80099e2 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f042 0201 	orr.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ce:	e008      	b.n	80099e2 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0201 	orr.w	r2, r2, #1
 80099de:	601a      	str	r2, [r3, #0]
 80099e0:	e000      	b.n	80099e4 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	40012c00 	.word	0x40012c00
 80099f4:	40014400 	.word	0x40014400
 80099f8:	40014800 	.word	0x40014800
 80099fc:	00010007 	.word	0x00010007

08009a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f003 0302 	and.w	r3, r3, #2
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d020      	beq.n	8009a64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d01b      	beq.n	8009a64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f06f 0202 	mvn.w	r2, #2
 8009a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fac7 	bl	8009fde <HAL_TIM_IC_CaptureCallback>
 8009a50:	e005      	b.n	8009a5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fab9 	bl	8009fca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 faca 	bl	8009ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d020      	beq.n	8009ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01b      	beq.n	8009ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f06f 0204 	mvn.w	r2, #4
 8009a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2202      	movs	r2, #2
 8009a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 faa1 	bl	8009fde <HAL_TIM_IC_CaptureCallback>
 8009a9c:	e005      	b.n	8009aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fa93 	bl	8009fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 faa4 	bl	8009ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f003 0308 	and.w	r3, r3, #8
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d020      	beq.n	8009afc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f003 0308 	and.w	r3, r3, #8
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01b      	beq.n	8009afc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f06f 0208 	mvn.w	r2, #8
 8009acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2204      	movs	r2, #4
 8009ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fa7b 	bl	8009fde <HAL_TIM_IC_CaptureCallback>
 8009ae8:	e005      	b.n	8009af6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fa6d 	bl	8009fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fa7e 	bl	8009ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f003 0310 	and.w	r3, r3, #16
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d020      	beq.n	8009b48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f003 0310 	and.w	r3, r3, #16
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01b      	beq.n	8009b48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f06f 0210 	mvn.w	r2, #16
 8009b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2208      	movs	r2, #8
 8009b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa55 	bl	8009fde <HAL_TIM_IC_CaptureCallback>
 8009b34:	e005      	b.n	8009b42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa47 	bl	8009fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fa58 	bl	8009ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00c      	beq.n	8009b6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d007      	beq.n	8009b6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f06f 0201 	mvn.w	r2, #1
 8009b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7fa f97e 	bl	8003e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d104      	bne.n	8009b80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00c      	beq.n	8009b9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d007      	beq.n	8009b9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fe5b 	bl	800a850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00c      	beq.n	8009bbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d007      	beq.n	8009bbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fe53 	bl	800a864 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00c      	beq.n	8009be2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d007      	beq.n	8009be2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fa12 	bl	800a006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	f003 0320 	and.w	r3, r3, #32
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00c      	beq.n	8009c06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d007      	beq.n	8009c06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f06f 0220 	mvn.w	r2, #32
 8009bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fe1b 	bl	800a83c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c06:	bf00      	nop
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d101      	bne.n	8009c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e0ff      	b.n	8009e2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b14      	cmp	r3, #20
 8009c3a:	f200 80f0 	bhi.w	8009e1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009c99 	.word	0x08009c99
 8009c48:	08009e1f 	.word	0x08009e1f
 8009c4c:	08009e1f 	.word	0x08009e1f
 8009c50:	08009e1f 	.word	0x08009e1f
 8009c54:	08009cd9 	.word	0x08009cd9
 8009c58:	08009e1f 	.word	0x08009e1f
 8009c5c:	08009e1f 	.word	0x08009e1f
 8009c60:	08009e1f 	.word	0x08009e1f
 8009c64:	08009d1b 	.word	0x08009d1b
 8009c68:	08009e1f 	.word	0x08009e1f
 8009c6c:	08009e1f 	.word	0x08009e1f
 8009c70:	08009e1f 	.word	0x08009e1f
 8009c74:	08009d5b 	.word	0x08009d5b
 8009c78:	08009e1f 	.word	0x08009e1f
 8009c7c:	08009e1f 	.word	0x08009e1f
 8009c80:	08009e1f 	.word	0x08009e1f
 8009c84:	08009d9d 	.word	0x08009d9d
 8009c88:	08009e1f 	.word	0x08009e1f
 8009c8c:	08009e1f 	.word	0x08009e1f
 8009c90:	08009e1f 	.word	0x08009e1f
 8009c94:	08009ddd 	.word	0x08009ddd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68b9      	ldr	r1, [r7, #8]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fa2c 	bl	800a0fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699a      	ldr	r2, [r3, #24]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f042 0208 	orr.w	r2, r2, #8
 8009cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699a      	ldr	r2, [r3, #24]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f022 0204 	bic.w	r2, r2, #4
 8009cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6999      	ldr	r1, [r3, #24]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	691a      	ldr	r2, [r3, #16]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	619a      	str	r2, [r3, #24]
      break;
 8009cd6:	e0a5      	b.n	8009e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fa88 	bl	800a1f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	699a      	ldr	r2, [r3, #24]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6999      	ldr	r1, [r3, #24]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	021a      	lsls	r2, r3, #8
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	430a      	orrs	r2, r1
 8009d16:	619a      	str	r2, [r3, #24]
      break;
 8009d18:	e084      	b.n	8009e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68b9      	ldr	r1, [r7, #8]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 fae1 	bl	800a2e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69da      	ldr	r2, [r3, #28]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f042 0208 	orr.w	r2, r2, #8
 8009d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	69da      	ldr	r2, [r3, #28]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f022 0204 	bic.w	r2, r2, #4
 8009d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69d9      	ldr	r1, [r3, #28]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	691a      	ldr	r2, [r3, #16]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	430a      	orrs	r2, r1
 8009d56:	61da      	str	r2, [r3, #28]
      break;
 8009d58:	e064      	b.n	8009e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fb39 	bl	800a3d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69da      	ldr	r2, [r3, #28]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69da      	ldr	r2, [r3, #28]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	69d9      	ldr	r1, [r3, #28]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	021a      	lsls	r2, r3, #8
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	61da      	str	r2, [r3, #28]
      break;
 8009d9a:	e043      	b.n	8009e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68b9      	ldr	r1, [r7, #8]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 fb76 	bl	800a494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f042 0208 	orr.w	r2, r2, #8
 8009db6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 0204 	bic.w	r2, r2, #4
 8009dc6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	691a      	ldr	r2, [r3, #16]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009dda:	e023      	b.n	8009e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68b9      	ldr	r1, [r7, #8]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 fbae 	bl	800a544 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009df6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	021a      	lsls	r2, r3, #8
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009e1c:	e002      	b.n	8009e24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	75fb      	strb	r3, [r7, #23]
      break;
 8009e22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop

08009e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d101      	bne.n	8009e54 <HAL_TIM_ConfigClockSource+0x1c>
 8009e50:	2302      	movs	r3, #2
 8009e52:	e0b6      	b.n	8009fc2 <HAL_TIM_ConfigClockSource+0x18a>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009e72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e90:	d03e      	beq.n	8009f10 <HAL_TIM_ConfigClockSource+0xd8>
 8009e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e96:	f200 8087 	bhi.w	8009fa8 <HAL_TIM_ConfigClockSource+0x170>
 8009e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e9e:	f000 8086 	beq.w	8009fae <HAL_TIM_ConfigClockSource+0x176>
 8009ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ea6:	d87f      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x170>
 8009ea8:	2b70      	cmp	r3, #112	@ 0x70
 8009eaa:	d01a      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0xaa>
 8009eac:	2b70      	cmp	r3, #112	@ 0x70
 8009eae:	d87b      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x170>
 8009eb0:	2b60      	cmp	r3, #96	@ 0x60
 8009eb2:	d050      	beq.n	8009f56 <HAL_TIM_ConfigClockSource+0x11e>
 8009eb4:	2b60      	cmp	r3, #96	@ 0x60
 8009eb6:	d877      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x170>
 8009eb8:	2b50      	cmp	r3, #80	@ 0x50
 8009eba:	d03c      	beq.n	8009f36 <HAL_TIM_ConfigClockSource+0xfe>
 8009ebc:	2b50      	cmp	r3, #80	@ 0x50
 8009ebe:	d873      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x170>
 8009ec0:	2b40      	cmp	r3, #64	@ 0x40
 8009ec2:	d058      	beq.n	8009f76 <HAL_TIM_ConfigClockSource+0x13e>
 8009ec4:	2b40      	cmp	r3, #64	@ 0x40
 8009ec6:	d86f      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x170>
 8009ec8:	2b30      	cmp	r3, #48	@ 0x30
 8009eca:	d064      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0x15e>
 8009ecc:	2b30      	cmp	r3, #48	@ 0x30
 8009ece:	d86b      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x170>
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d060      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0x15e>
 8009ed4:	2b20      	cmp	r3, #32
 8009ed6:	d867      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x170>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d05c      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0x15e>
 8009edc:	2b10      	cmp	r3, #16
 8009ede:	d05a      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0x15e>
 8009ee0:	e062      	b.n	8009fa8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ef2:	f000 fbfd 	bl	800a6f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	609a      	str	r2, [r3, #8]
      break;
 8009f0e:	e04f      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f20:	f000 fbe6 	bl	800a6f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f32:	609a      	str	r2, [r3, #8]
      break;
 8009f34:	e03c      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f42:	461a      	mov	r2, r3
 8009f44:	f000 fb58 	bl	800a5f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2150      	movs	r1, #80	@ 0x50
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 fbb1 	bl	800a6b6 <TIM_ITRx_SetConfig>
      break;
 8009f54:	e02c      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f62:	461a      	mov	r2, r3
 8009f64:	f000 fb77 	bl	800a656 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2160      	movs	r1, #96	@ 0x60
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fba1 	bl	800a6b6 <TIM_ITRx_SetConfig>
      break;
 8009f74:	e01c      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f82:	461a      	mov	r2, r3
 8009f84:	f000 fb38 	bl	800a5f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2140      	movs	r1, #64	@ 0x40
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 fb91 	bl	800a6b6 <TIM_ITRx_SetConfig>
      break;
 8009f94:	e00c      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f000 fb88 	bl	800a6b6 <TIM_ITRx_SetConfig>
      break;
 8009fa6:	e003      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	73fb      	strb	r3, [r7, #15]
      break;
 8009fac:	e000      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ffa:	bf00      	nop
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a006:	b480      	push	{r7}
 800a008:	b083      	sub	sp, #12
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a00e:	bf00      	nop
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a30      	ldr	r2, [pc, #192]	@ (800a0f0 <TIM_Base_SetConfig+0xd4>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d003      	beq.n	800a03c <TIM_Base_SetConfig+0x20>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a03a:	d108      	bne.n	800a04e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a27      	ldr	r2, [pc, #156]	@ (800a0f0 <TIM_Base_SetConfig+0xd4>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d00b      	beq.n	800a06e <TIM_Base_SetConfig+0x52>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a05c:	d007      	beq.n	800a06e <TIM_Base_SetConfig+0x52>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a24      	ldr	r2, [pc, #144]	@ (800a0f4 <TIM_Base_SetConfig+0xd8>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d003      	beq.n	800a06e <TIM_Base_SetConfig+0x52>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a23      	ldr	r2, [pc, #140]	@ (800a0f8 <TIM_Base_SetConfig+0xdc>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d108      	bne.n	800a080 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a12      	ldr	r2, [pc, #72]	@ (800a0f0 <TIM_Base_SetConfig+0xd4>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d007      	beq.n	800a0bc <TIM_Base_SetConfig+0xa0>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a11      	ldr	r2, [pc, #68]	@ (800a0f4 <TIM_Base_SetConfig+0xd8>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_Base_SetConfig+0xa0>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a10      	ldr	r2, [pc, #64]	@ (800a0f8 <TIM_Base_SetConfig+0xdc>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d103      	bne.n	800a0c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	691a      	ldr	r2, [r3, #16]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d105      	bne.n	800a0e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f023 0201 	bic.w	r2, r3, #1
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	611a      	str	r2, [r3, #16]
  }
}
 800a0e2:	bf00      	nop
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40012c00 	.word	0x40012c00
 800a0f4:	40014400 	.word	0x40014400
 800a0f8:	40014800 	.word	0x40014800

0800a0fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b087      	sub	sp, #28
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	f023 0201 	bic.w	r2, r3, #1
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a12a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a12e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f023 0303 	bic.w	r3, r3, #3
 800a136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	4313      	orrs	r3, r2
 800a140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f023 0302 	bic.w	r3, r3, #2
 800a148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	4313      	orrs	r3, r2
 800a152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a24      	ldr	r2, [pc, #144]	@ (800a1e8 <TIM_OC1_SetConfig+0xec>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d007      	beq.n	800a16c <TIM_OC1_SetConfig+0x70>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a23      	ldr	r2, [pc, #140]	@ (800a1ec <TIM_OC1_SetConfig+0xf0>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d003      	beq.n	800a16c <TIM_OC1_SetConfig+0x70>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a22      	ldr	r2, [pc, #136]	@ (800a1f0 <TIM_OC1_SetConfig+0xf4>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d10c      	bne.n	800a186 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	f023 0308 	bic.w	r3, r3, #8
 800a172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f023 0304 	bic.w	r3, r3, #4
 800a184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a17      	ldr	r2, [pc, #92]	@ (800a1e8 <TIM_OC1_SetConfig+0xec>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d007      	beq.n	800a19e <TIM_OC1_SetConfig+0xa2>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a17      	ldr	r2, [pc, #92]	@ (800a1f0 <TIM_OC1_SetConfig+0xf4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d003      	beq.n	800a19e <TIM_OC1_SetConfig+0xa2>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a14      	ldr	r2, [pc, #80]	@ (800a1ec <TIM_OC1_SetConfig+0xf0>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d111      	bne.n	800a1c2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	621a      	str	r2, [r3, #32]
}
 800a1dc:	bf00      	nop
 800a1de:	371c      	adds	r7, #28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	40012c00 	.word	0x40012c00
 800a1ec:	40014800 	.word	0x40014800
 800a1f0:	40014400 	.word	0x40014400

0800a1f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	f023 0210 	bic.w	r2, r3, #16
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	021b      	lsls	r3, r3, #8
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f023 0320 	bic.w	r3, r3, #32
 800a242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	011b      	lsls	r3, r3, #4
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4a22      	ldr	r2, [pc, #136]	@ (800a2dc <TIM_OC2_SetConfig+0xe8>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d10d      	bne.n	800a274 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a25e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	4313      	orrs	r3, r2
 800a26a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a19      	ldr	r2, [pc, #100]	@ (800a2dc <TIM_OC2_SetConfig+0xe8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d007      	beq.n	800a28c <TIM_OC2_SetConfig+0x98>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a18      	ldr	r2, [pc, #96]	@ (800a2e0 <TIM_OC2_SetConfig+0xec>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d003      	beq.n	800a28c <TIM_OC2_SetConfig+0x98>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a17      	ldr	r2, [pc, #92]	@ (800a2e4 <TIM_OC2_SetConfig+0xf0>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d113      	bne.n	800a2b4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a29a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	621a      	str	r2, [r3, #32]
}
 800a2ce:	bf00      	nop
 800a2d0:	371c      	adds	r7, #28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	40012c00 	.word	0x40012c00
 800a2e0:	40014400 	.word	0x40014400
 800a2e4:	40014800 	.word	0x40014800

0800a2e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f023 0303 	bic.w	r3, r3, #3
 800a322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	021b      	lsls	r3, r3, #8
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	4313      	orrs	r3, r2
 800a340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a21      	ldr	r2, [pc, #132]	@ (800a3cc <TIM_OC3_SetConfig+0xe4>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d10d      	bne.n	800a366 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	021b      	lsls	r3, r3, #8
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a18      	ldr	r2, [pc, #96]	@ (800a3cc <TIM_OC3_SetConfig+0xe4>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d007      	beq.n	800a37e <TIM_OC3_SetConfig+0x96>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a17      	ldr	r2, [pc, #92]	@ (800a3d0 <TIM_OC3_SetConfig+0xe8>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d003      	beq.n	800a37e <TIM_OC3_SetConfig+0x96>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a16      	ldr	r2, [pc, #88]	@ (800a3d4 <TIM_OC3_SetConfig+0xec>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d113      	bne.n	800a3a6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	4313      	orrs	r3, r2
 800a398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	621a      	str	r2, [r3, #32]
}
 800a3c0:	bf00      	nop
 800a3c2:	371c      	adds	r7, #28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	40012c00 	.word	0x40012c00
 800a3d0:	40014400 	.word	0x40014400
 800a3d4:	40014800 	.word	0x40014800

0800a3d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a1b      	ldr	r3, [r3, #32]
 800a3ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a40a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	021b      	lsls	r3, r3, #8
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	031b      	lsls	r3, r3, #12
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	4313      	orrs	r3, r2
 800a432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a14      	ldr	r2, [pc, #80]	@ (800a488 <TIM_OC4_SetConfig+0xb0>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d007      	beq.n	800a44c <TIM_OC4_SetConfig+0x74>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a13      	ldr	r2, [pc, #76]	@ (800a48c <TIM_OC4_SetConfig+0xb4>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d003      	beq.n	800a44c <TIM_OC4_SetConfig+0x74>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a12      	ldr	r2, [pc, #72]	@ (800a490 <TIM_OC4_SetConfig+0xb8>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d109      	bne.n	800a460 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	019b      	lsls	r3, r3, #6
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	621a      	str	r2, [r3, #32]
}
 800a47a:	bf00      	nop
 800a47c:	371c      	adds	r7, #28
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	40012c00 	.word	0x40012c00
 800a48c:	40014400 	.word	0x40014400
 800a490:	40014800 	.word	0x40014800

0800a494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a4d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	041b      	lsls	r3, r3, #16
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a13      	ldr	r2, [pc, #76]	@ (800a538 <TIM_OC5_SetConfig+0xa4>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d007      	beq.n	800a4fe <TIM_OC5_SetConfig+0x6a>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a12      	ldr	r2, [pc, #72]	@ (800a53c <TIM_OC5_SetConfig+0xa8>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d003      	beq.n	800a4fe <TIM_OC5_SetConfig+0x6a>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a11      	ldr	r2, [pc, #68]	@ (800a540 <TIM_OC5_SetConfig+0xac>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d109      	bne.n	800a512 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a504:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	021b      	lsls	r3, r3, #8
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4313      	orrs	r3, r2
 800a510:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	621a      	str	r2, [r3, #32]
}
 800a52c:	bf00      	nop
 800a52e:	371c      	adds	r7, #28
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	40012c00 	.word	0x40012c00
 800a53c:	40014400 	.word	0x40014400
 800a540:	40014800 	.word	0x40014800

0800a544 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a1b      	ldr	r3, [r3, #32]
 800a558:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	021b      	lsls	r3, r3, #8
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	4313      	orrs	r3, r2
 800a582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a58a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	051b      	lsls	r3, r3, #20
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	4313      	orrs	r3, r2
 800a596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a14      	ldr	r2, [pc, #80]	@ (800a5ec <TIM_OC6_SetConfig+0xa8>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d007      	beq.n	800a5b0 <TIM_OC6_SetConfig+0x6c>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a13      	ldr	r2, [pc, #76]	@ (800a5f0 <TIM_OC6_SetConfig+0xac>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d003      	beq.n	800a5b0 <TIM_OC6_SetConfig+0x6c>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a12      	ldr	r2, [pc, #72]	@ (800a5f4 <TIM_OC6_SetConfig+0xb0>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d109      	bne.n	800a5c4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	029b      	lsls	r3, r3, #10
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	621a      	str	r2, [r3, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	40012c00 	.word	0x40012c00
 800a5f0:	40014400 	.word	0x40014400
 800a5f4:	40014800 	.word	0x40014800

0800a5f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b087      	sub	sp, #28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6a1b      	ldr	r3, [r3, #32]
 800a608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	f023 0201 	bic.w	r2, r3, #1
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	011b      	lsls	r3, r3, #4
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f023 030a 	bic.w	r3, r3, #10
 800a634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	621a      	str	r2, [r3, #32]
}
 800a64a:	bf00      	nop
 800a64c:	371c      	adds	r7, #28
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a656:	b480      	push	{r7}
 800a658:	b087      	sub	sp, #28
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	60f8      	str	r0, [r7, #12]
 800a65e:	60b9      	str	r1, [r7, #8]
 800a660:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	f023 0210 	bic.w	r2, r3, #16
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	031b      	lsls	r3, r3, #12
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	4313      	orrs	r3, r2
 800a68a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a692:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	011b      	lsls	r3, r3, #4
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	621a      	str	r2, [r3, #32]
}
 800a6aa:	bf00      	nop
 800a6ac:	371c      	adds	r7, #28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b085      	sub	sp, #20
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a6cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	f043 0307 	orr.w	r3, r3, #7
 800a6dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	609a      	str	r2, [r3, #8]
}
 800a6e4:	bf00      	nop
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a70a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	021a      	lsls	r2, r3, #8
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	431a      	orrs	r2, r3
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4313      	orrs	r3, r2
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	697a      	ldr	r2, [r7, #20]
 800a722:	609a      	str	r2, [r3, #8]
}
 800a724:	bf00      	nop
 800a726:	371c      	adds	r7, #28
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	f003 031f 	and.w	r3, r3, #31
 800a742:	2201      	movs	r2, #1
 800a744:	fa02 f303 	lsl.w	r3, r2, r3
 800a748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6a1a      	ldr	r2, [r3, #32]
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	43db      	mvns	r3, r3
 800a752:	401a      	ands	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6a1a      	ldr	r2, [r3, #32]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f003 031f 	and.w	r3, r3, #31
 800a762:	6879      	ldr	r1, [r7, #4]
 800a764:	fa01 f303 	lsl.w	r3, r1, r3
 800a768:	431a      	orrs	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	621a      	str	r2, [r3, #32]
}
 800a76e:	bf00      	nop
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
	...

0800a77c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d101      	bne.n	800a794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a790:	2302      	movs	r3, #2
 800a792:	e04a      	b.n	800a82a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2202      	movs	r2, #2
 800a7a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a1f      	ldr	r2, [pc, #124]	@ (800a838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d108      	bne.n	800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a7c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a12      	ldr	r2, [pc, #72]	@ (800a838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d004      	beq.n	800a7fe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7fc:	d10c      	bne.n	800a818 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	40012c00 	.word	0x40012c00

0800a83c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <LL_RCC_GetUSARTClockSource>:
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800a880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a884:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4013      	ands	r3, r2
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <LL_RCC_GetLPUARTClockSource>:
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a8a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4013      	ands	r3, r2
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e042      	b.n	800a950 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d106      	bne.n	800a8e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7fa f8e3 	bl	8004aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2224      	movs	r2, #36	@ 0x24
 800a8e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 0201 	bic.w	r2, r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fe7e 	bl	800b604 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fc53 	bl	800b1b4 <UART_SetConfig>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	e01b      	b.n	800a950 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689a      	ldr	r2, [r3, #8]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f042 0201 	orr.w	r2, r2, #1
 800a946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fefd 	bl	800b748 <UART_CheckIdleState>
 800a94e:	4603      	mov	r3, r0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08a      	sub	sp, #40	@ 0x28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	4613      	mov	r3, r2
 800a964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a96c:	2b20      	cmp	r3, #32
 800a96e:	d137      	bne.n	800a9e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <HAL_UART_Receive_IT+0x24>
 800a976:	88fb      	ldrh	r3, [r7, #6]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e030      	b.n	800a9e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a18      	ldr	r2, [pc, #96]	@ (800a9ec <HAL_UART_Receive_IT+0x94>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d01f      	beq.n	800a9d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d018      	beq.n	800a9d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	e853 3f00 	ldrex	r3, [r3]
 800a9aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9bc:	623b      	str	r3, [r7, #32]
 800a9be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c0:	69f9      	ldr	r1, [r7, #28]
 800a9c2:	6a3a      	ldr	r2, [r7, #32]
 800a9c4:	e841 2300 	strex	r3, r2, [r1]
 800a9c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1e6      	bne.n	800a99e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a9d0:	88fb      	ldrh	r3, [r7, #6]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	68b9      	ldr	r1, [r7, #8]
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f000 ffce 	bl	800b978 <UART_Start_Receive_IT>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	e000      	b.n	800a9e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a9e0:	2302      	movs	r3, #2
  }
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3728      	adds	r7, #40	@ 0x28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	40008000 	.word	0x40008000

0800a9f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08a      	sub	sp, #40	@ 0x28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d167      	bne.n	800aad8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <HAL_UART_Transmit_DMA+0x24>
 800aa0e:	88fb      	ldrh	r3, [r7, #6]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e060      	b.n	800aada <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	88fa      	ldrh	r2, [r7, #6]
 800aa22:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	88fa      	ldrh	r2, [r7, #6]
 800aa2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2221      	movs	r2, #33	@ 0x21
 800aa3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d028      	beq.n	800aa98 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa4a:	4a26      	ldr	r2, [pc, #152]	@ (800aae4 <HAL_UART_Transmit_DMA+0xf4>)
 800aa4c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa52:	4a25      	ldr	r2, [pc, #148]	@ (800aae8 <HAL_UART_Transmit_DMA+0xf8>)
 800aa54:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa5a:	4a24      	ldr	r2, [pc, #144]	@ (800aaec <HAL_UART_Transmit_DMA+0xfc>)
 800aa5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa62:	2200      	movs	r2, #0
 800aa64:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa6e:	4619      	mov	r1, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3328      	adds	r3, #40	@ 0x28
 800aa76:	461a      	mov	r2, r3
 800aa78:	88fb      	ldrh	r3, [r7, #6]
 800aa7a:	f7fa fe2b 	bl	80056d4 <HAL_DMA_Start_IT>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d009      	beq.n	800aa98 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2210      	movs	r2, #16
 800aa88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e020      	b.n	800aada <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2240      	movs	r2, #64	@ 0x40
 800aa9e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	e853 3f00 	ldrex	r3, [r3]
 800aaae:	613b      	str	r3, [r7, #16]
   return(result);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aab6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3308      	adds	r3, #8
 800aabe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aac0:	623a      	str	r2, [r7, #32]
 800aac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	69f9      	ldr	r1, [r7, #28]
 800aac6:	6a3a      	ldr	r2, [r7, #32]
 800aac8:	e841 2300 	strex	r3, r2, [r1]
 800aacc:	61bb      	str	r3, [r7, #24]
   return(result);
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1e5      	bne.n	800aaa0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	e000      	b.n	800aada <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aad8:	2302      	movs	r3, #2
  }
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3728      	adds	r7, #40	@ 0x28
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	0800bd0b 	.word	0x0800bd0b
 800aae8:	0800bda5 	.word	0x0800bda5
 800aaec:	0800bdc1 	.word	0x0800bdc1

0800aaf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b0ba      	sub	sp, #232	@ 0xe8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ab1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ab1e:	4013      	ands	r3, r2
 800ab20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ab24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d11b      	bne.n	800ab64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab30:	f003 0320 	and.w	r3, r3, #32
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d015      	beq.n	800ab64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab3c:	f003 0320 	and.w	r3, r3, #32
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d105      	bne.n	800ab50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 8300 	beq.w	800b15a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	4798      	blx	r3
      }
      return;
 800ab62:	e2fa      	b.n	800b15a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 8123 	beq.w	800adb4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab72:	4b8d      	ldr	r3, [pc, #564]	@ (800ada8 <HAL_UART_IRQHandler+0x2b8>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ab7e:	4b8b      	ldr	r3, [pc, #556]	@ (800adac <HAL_UART_IRQHandler+0x2bc>)
 800ab80:	4013      	ands	r3, r2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 8116 	beq.w	800adb4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab8c:	f003 0301 	and.w	r3, r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d011      	beq.n	800abb8 <HAL_UART_IRQHandler+0xc8>
 800ab94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2201      	movs	r2, #1
 800aba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abae:	f043 0201 	orr.w	r2, r3, #1
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abbc:	f003 0302 	and.w	r3, r3, #2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d011      	beq.n	800abe8 <HAL_UART_IRQHandler+0xf8>
 800abc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00b      	beq.n	800abe8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2202      	movs	r2, #2
 800abd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abde:	f043 0204 	orr.w	r2, r3, #4
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abec:	f003 0304 	and.w	r3, r3, #4
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d011      	beq.n	800ac18 <HAL_UART_IRQHandler+0x128>
 800abf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2204      	movs	r2, #4
 800ac06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac0e:	f043 0202 	orr.w	r2, r3, #2
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac1c:	f003 0308 	and.w	r3, r3, #8
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d017      	beq.n	800ac54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d105      	bne.n	800ac3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ac34:	4b5c      	ldr	r3, [pc, #368]	@ (800ada8 <HAL_UART_IRQHandler+0x2b8>)
 800ac36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00b      	beq.n	800ac54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2208      	movs	r2, #8
 800ac42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac4a:	f043 0208 	orr.w	r2, r3, #8
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d012      	beq.n	800ac86 <HAL_UART_IRQHandler+0x196>
 800ac60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00c      	beq.n	800ac86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac7c:	f043 0220 	orr.w	r2, r3, #32
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 8266 	beq.w	800b15e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac96:	f003 0320 	and.w	r3, r3, #32
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d013      	beq.n	800acc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca2:	f003 0320 	and.w	r3, r3, #32
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d105      	bne.n	800acb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800acaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d007      	beq.n	800acc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800accc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acda:	2b40      	cmp	r3, #64	@ 0x40
 800acdc:	d005      	beq.n	800acea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ace2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d054      	beq.n	800ad94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 ffa7 	bl	800bc3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acfa:	2b40      	cmp	r3, #64	@ 0x40
 800acfc:	d146      	bne.n	800ad8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ad14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ad18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3308      	adds	r3, #8
 800ad26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ad2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ad2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ad36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ad42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1d9      	bne.n	800acfe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d017      	beq.n	800ad84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad5a:	4a15      	ldr	r2, [pc, #84]	@ (800adb0 <HAL_UART_IRQHandler+0x2c0>)
 800ad5c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fa fd8f 	bl	8005888 <HAL_DMA_Abort_IT>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d019      	beq.n	800ada4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ad7e:	4610      	mov	r0, r2
 800ad80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad82:	e00f      	b.n	800ada4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f9ff 	bl	800b188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad8a:	e00b      	b.n	800ada4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f9fb 	bl	800b188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad92:	e007      	b.n	800ada4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f9f7 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ada2:	e1dc      	b.n	800b15e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ada4:	bf00      	nop
    return;
 800ada6:	e1da      	b.n	800b15e <HAL_UART_IRQHandler+0x66e>
 800ada8:	10000001 	.word	0x10000001
 800adac:	04000120 	.word	0x04000120
 800adb0:	0800be41 	.word	0x0800be41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adb8:	2b01      	cmp	r3, #1
 800adba:	f040 8170 	bne.w	800b09e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800adbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adc2:	f003 0310 	and.w	r3, r3, #16
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 8169 	beq.w	800b09e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800adcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800add0:	f003 0310 	and.w	r3, r3, #16
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 8162 	beq.w	800b09e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2210      	movs	r2, #16
 800ade0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adec:	2b40      	cmp	r3, #64	@ 0x40
 800adee:	f040 80d8 	bne.w	800afa2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80af 	beq.w	800af68 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ae10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae14:	429a      	cmp	r2, r3
 800ae16:	f080 80a7 	bcs.w	800af68 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f040 8087 	bne.w	800af46 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae44:	e853 3f00 	ldrex	r3, [r3]
 800ae48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ae4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ae62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ae6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ae7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1da      	bne.n	800ae38 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3308      	adds	r3, #8
 800ae88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae8c:	e853 3f00 	ldrex	r3, [r3]
 800ae90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae94:	f023 0301 	bic.w	r3, r3, #1
 800ae98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3308      	adds	r3, #8
 800aea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aea6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aeaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aeae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aeb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e1      	bne.n	800ae82 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3308      	adds	r3, #8
 800aec4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3308      	adds	r3, #8
 800aede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aee2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aee4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aee8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aeea:	e841 2300 	strex	r3, r2, [r1]
 800aeee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1e3      	bne.n	800aebe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af0c:	e853 3f00 	ldrex	r3, [r3]
 800af10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af14:	f023 0310 	bic.w	r3, r3, #16
 800af18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	461a      	mov	r2, r3
 800af22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af26:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1e4      	bne.n	800af04 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af40:	4618      	mov	r0, r3
 800af42:	f7fa fc42 	bl	80057ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2202      	movs	r2, #2
 800af4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af58:	b29b      	uxth	r3, r3
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f91b 	bl	800b19c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800af66:	e0fc      	b.n	800b162 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af72:	429a      	cmp	r2, r3
 800af74:	f040 80f5 	bne.w	800b162 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0320 	and.w	r3, r3, #32
 800af86:	2b20      	cmp	r3, #32
 800af88:	f040 80eb 	bne.w	800b162 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2202      	movs	r2, #2
 800af90:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f8fe 	bl	800b19c <HAL_UARTEx_RxEventCallback>
      return;
 800afa0:	e0df      	b.n	800b162 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afae:	b29b      	uxth	r3, r3
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 80d1 	beq.w	800b166 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800afc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 80cc 	beq.w	800b166 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd6:	e853 3f00 	ldrex	r3, [r3]
 800afda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afe2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	461a      	mov	r2, r3
 800afec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aff0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aff2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aff8:	e841 2300 	strex	r3, r2, [r1]
 800affc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800affe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1e4      	bne.n	800afce <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3308      	adds	r3, #8
 800b00a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00e:	e853 3f00 	ldrex	r3, [r3]
 800b012:	623b      	str	r3, [r7, #32]
   return(result);
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b01a:	f023 0301 	bic.w	r3, r3, #1
 800b01e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b02c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b030:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b034:	e841 2300 	strex	r3, r2, [r1]
 800b038:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1e1      	bne.n	800b004 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2220      	movs	r2, #32
 800b044:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	e853 3f00 	ldrex	r3, [r3]
 800b060:	60fb      	str	r3, [r7, #12]
   return(result);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f023 0310 	bic.w	r3, r3, #16
 800b068:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	461a      	mov	r2, r3
 800b072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b076:	61fb      	str	r3, [r7, #28]
 800b078:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07a:	69b9      	ldr	r1, [r7, #24]
 800b07c:	69fa      	ldr	r2, [r7, #28]
 800b07e:	e841 2300 	strex	r3, r2, [r1]
 800b082:	617b      	str	r3, [r7, #20]
   return(result);
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1e4      	bne.n	800b054 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2202      	movs	r2, #2
 800b08e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b094:	4619      	mov	r1, r3
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f880 	bl	800b19c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b09c:	e063      	b.n	800b166 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00e      	beq.n	800b0c8 <HAL_UART_IRQHandler+0x5d8>
 800b0aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b0be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f001 fc1f 	bl	800c904 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0c6:	e051      	b.n	800b16c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d014      	beq.n	800b0fe <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b0d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d105      	bne.n	800b0ec <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d008      	beq.n	800b0fe <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d03a      	beq.n	800b16a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	4798      	blx	r3
    }
    return;
 800b0fc:	e035      	b.n	800b16a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b106:	2b00      	cmp	r3, #0
 800b108:	d009      	beq.n	800b11e <HAL_UART_IRQHandler+0x62e>
 800b10a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b10e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fea8 	bl	800be6c <UART_EndTransmit_IT>
    return;
 800b11c:	e026      	b.n	800b16c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d009      	beq.n	800b13e <HAL_UART_IRQHandler+0x64e>
 800b12a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b12e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f001 fbf8 	bl	800c92c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b13c:	e016      	b.n	800b16c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b142:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b146:	2b00      	cmp	r3, #0
 800b148:	d010      	beq.n	800b16c <HAL_UART_IRQHandler+0x67c>
 800b14a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	da0c      	bge.n	800b16c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f001 fbe0 	bl	800c918 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b158:	e008      	b.n	800b16c <HAL_UART_IRQHandler+0x67c>
      return;
 800b15a:	bf00      	nop
 800b15c:	e006      	b.n	800b16c <HAL_UART_IRQHandler+0x67c>
    return;
 800b15e:	bf00      	nop
 800b160:	e004      	b.n	800b16c <HAL_UART_IRQHandler+0x67c>
      return;
 800b162:	bf00      	nop
 800b164:	e002      	b.n	800b16c <HAL_UART_IRQHandler+0x67c>
      return;
 800b166:	bf00      	nop
 800b168:	e000      	b.n	800b16c <HAL_UART_IRQHandler+0x67c>
    return;
 800b16a:	bf00      	nop
  }
}
 800b16c:	37e8      	adds	r7, #232	@ 0xe8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop

0800b174 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1b8:	b08c      	sub	sp, #48	@ 0x30
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	689a      	ldr	r2, [r3, #8]
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	69db      	ldr	r3, [r3, #28]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4baf      	ldr	r3, [pc, #700]	@ (800b4a0 <UART_SetConfig+0x2ec>)
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	6812      	ldr	r2, [r2, #0]
 800b1ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1ec:	430b      	orrs	r3, r1
 800b1ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	68da      	ldr	r2, [r3, #12]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	430a      	orrs	r2, r1
 800b204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	699b      	ldr	r3, [r3, #24]
 800b20a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4aa4      	ldr	r2, [pc, #656]	@ (800b4a4 <UART_SetConfig+0x2f0>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d004      	beq.n	800b220 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b21c:	4313      	orrs	r3, r2
 800b21e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b22a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	6812      	ldr	r2, [r2, #0]
 800b232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b234:	430b      	orrs	r3, r1
 800b236:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b23e:	f023 010f 	bic.w	r1, r3, #15
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a95      	ldr	r2, [pc, #596]	@ (800b4a8 <UART_SetConfig+0x2f4>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d125      	bne.n	800b2a4 <UART_SetConfig+0xf0>
 800b258:	2003      	movs	r0, #3
 800b25a:	f7ff fb0d 	bl	800a878 <LL_RCC_GetUSARTClockSource>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b03      	cmp	r3, #3
 800b262:	d81b      	bhi.n	800b29c <UART_SetConfig+0xe8>
 800b264:	a201      	add	r2, pc, #4	@ (adr r2, 800b26c <UART_SetConfig+0xb8>)
 800b266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26a:	bf00      	nop
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b28d 	.word	0x0800b28d
 800b274:	0800b285 	.word	0x0800b285
 800b278:	0800b295 	.word	0x0800b295
 800b27c:	2301      	movs	r3, #1
 800b27e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b282:	e042      	b.n	800b30a <UART_SetConfig+0x156>
 800b284:	2302      	movs	r3, #2
 800b286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b28a:	e03e      	b.n	800b30a <UART_SetConfig+0x156>
 800b28c:	2304      	movs	r3, #4
 800b28e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b292:	e03a      	b.n	800b30a <UART_SetConfig+0x156>
 800b294:	2308      	movs	r3, #8
 800b296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b29a:	e036      	b.n	800b30a <UART_SetConfig+0x156>
 800b29c:	2310      	movs	r3, #16
 800b29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2a2:	e032      	b.n	800b30a <UART_SetConfig+0x156>
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a7e      	ldr	r2, [pc, #504]	@ (800b4a4 <UART_SetConfig+0x2f0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d12a      	bne.n	800b304 <UART_SetConfig+0x150>
 800b2ae:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800b2b2:	f7ff faf1 	bl	800a898 <LL_RCC_GetLPUARTClockSource>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2bc:	d01a      	beq.n	800b2f4 <UART_SetConfig+0x140>
 800b2be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2c2:	d81b      	bhi.n	800b2fc <UART_SetConfig+0x148>
 800b2c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2c8:	d00c      	beq.n	800b2e4 <UART_SetConfig+0x130>
 800b2ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2ce:	d815      	bhi.n	800b2fc <UART_SetConfig+0x148>
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <UART_SetConfig+0x128>
 800b2d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2d8:	d008      	beq.n	800b2ec <UART_SetConfig+0x138>
 800b2da:	e00f      	b.n	800b2fc <UART_SetConfig+0x148>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2e2:	e012      	b.n	800b30a <UART_SetConfig+0x156>
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ea:	e00e      	b.n	800b30a <UART_SetConfig+0x156>
 800b2ec:	2304      	movs	r3, #4
 800b2ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2f2:	e00a      	b.n	800b30a <UART_SetConfig+0x156>
 800b2f4:	2308      	movs	r3, #8
 800b2f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2fa:	e006      	b.n	800b30a <UART_SetConfig+0x156>
 800b2fc:	2310      	movs	r3, #16
 800b2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b302:	e002      	b.n	800b30a <UART_SetConfig+0x156>
 800b304:	2310      	movs	r3, #16
 800b306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a65      	ldr	r2, [pc, #404]	@ (800b4a4 <UART_SetConfig+0x2f0>)
 800b310:	4293      	cmp	r3, r2
 800b312:	f040 8097 	bne.w	800b444 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b316:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b31a:	2b08      	cmp	r3, #8
 800b31c:	d823      	bhi.n	800b366 <UART_SetConfig+0x1b2>
 800b31e:	a201      	add	r2, pc, #4	@ (adr r2, 800b324 <UART_SetConfig+0x170>)
 800b320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b324:	0800b349 	.word	0x0800b349
 800b328:	0800b367 	.word	0x0800b367
 800b32c:	0800b351 	.word	0x0800b351
 800b330:	0800b367 	.word	0x0800b367
 800b334:	0800b357 	.word	0x0800b357
 800b338:	0800b367 	.word	0x0800b367
 800b33c:	0800b367 	.word	0x0800b367
 800b340:	0800b367 	.word	0x0800b367
 800b344:	0800b35f 	.word	0x0800b35f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b348:	f7fd fab8 	bl	80088bc <HAL_RCC_GetPCLK1Freq>
 800b34c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b34e:	e010      	b.n	800b372 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b350:	4b56      	ldr	r3, [pc, #344]	@ (800b4ac <UART_SetConfig+0x2f8>)
 800b352:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b354:	e00d      	b.n	800b372 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b356:	f7fd fa31 	bl	80087bc <HAL_RCC_GetSysClockFreq>
 800b35a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b35c:	e009      	b.n	800b372 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b35e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b364:	e005      	b.n	800b372 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800b366:	2300      	movs	r3, #0
 800b368:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b370:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 812b 	beq.w	800b5d0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b37e:	4a4c      	ldr	r2, [pc, #304]	@ (800b4b0 <UART_SetConfig+0x2fc>)
 800b380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b384:	461a      	mov	r2, r3
 800b386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b388:	fbb3 f3f2 	udiv	r3, r3, r2
 800b38c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	4613      	mov	r3, r2
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	4413      	add	r3, r2
 800b398:	69ba      	ldr	r2, [r7, #24]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d305      	bcc.n	800b3aa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d903      	bls.n	800b3b2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3b0:	e10e      	b.n	800b5d0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	60bb      	str	r3, [r7, #8]
 800b3b8:	60fa      	str	r2, [r7, #12]
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3be:	4a3c      	ldr	r2, [pc, #240]	@ (800b4b0 <UART_SetConfig+0x2fc>)
 800b3c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	603b      	str	r3, [r7, #0]
 800b3ca:	607a      	str	r2, [r7, #4]
 800b3cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b3d4:	f7f5 fc40 	bl	8000c58 <__aeabi_uldivmod>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4610      	mov	r0, r2
 800b3de:	4619      	mov	r1, r3
 800b3e0:	f04f 0200 	mov.w	r2, #0
 800b3e4:	f04f 0300 	mov.w	r3, #0
 800b3e8:	020b      	lsls	r3, r1, #8
 800b3ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b3ee:	0202      	lsls	r2, r0, #8
 800b3f0:	6979      	ldr	r1, [r7, #20]
 800b3f2:	6849      	ldr	r1, [r1, #4]
 800b3f4:	0849      	lsrs	r1, r1, #1
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	eb12 0804 	adds.w	r8, r2, r4
 800b400:	eb43 0905 	adc.w	r9, r3, r5
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	469a      	mov	sl, r3
 800b40c:	4693      	mov	fp, r2
 800b40e:	4652      	mov	r2, sl
 800b410:	465b      	mov	r3, fp
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f5 fc1f 	bl	8000c58 <__aeabi_uldivmod>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4613      	mov	r3, r2
 800b420:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b428:	d308      	bcc.n	800b43c <UART_SetConfig+0x288>
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b430:	d204      	bcs.n	800b43c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6a3a      	ldr	r2, [r7, #32]
 800b438:	60da      	str	r2, [r3, #12]
 800b43a:	e0c9      	b.n	800b5d0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b442:	e0c5      	b.n	800b5d0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	69db      	ldr	r3, [r3, #28]
 800b448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b44c:	d16d      	bne.n	800b52a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800b44e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b452:	3b01      	subs	r3, #1
 800b454:	2b07      	cmp	r3, #7
 800b456:	d82d      	bhi.n	800b4b4 <UART_SetConfig+0x300>
 800b458:	a201      	add	r2, pc, #4	@ (adr r2, 800b460 <UART_SetConfig+0x2ac>)
 800b45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45e:	bf00      	nop
 800b460:	0800b481 	.word	0x0800b481
 800b464:	0800b489 	.word	0x0800b489
 800b468:	0800b4b5 	.word	0x0800b4b5
 800b46c:	0800b48f 	.word	0x0800b48f
 800b470:	0800b4b5 	.word	0x0800b4b5
 800b474:	0800b4b5 	.word	0x0800b4b5
 800b478:	0800b4b5 	.word	0x0800b4b5
 800b47c:	0800b497 	.word	0x0800b497
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b480:	f7fd fa32 	bl	80088e8 <HAL_RCC_GetPCLK2Freq>
 800b484:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b486:	e01b      	b.n	800b4c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b488:	4b08      	ldr	r3, [pc, #32]	@ (800b4ac <UART_SetConfig+0x2f8>)
 800b48a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b48c:	e018      	b.n	800b4c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b48e:	f7fd f995 	bl	80087bc <HAL_RCC_GetSysClockFreq>
 800b492:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b494:	e014      	b.n	800b4c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b49a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b49c:	e010      	b.n	800b4c0 <UART_SetConfig+0x30c>
 800b49e:	bf00      	nop
 800b4a0:	cfff69f3 	.word	0xcfff69f3
 800b4a4:	40008000 	.word	0x40008000
 800b4a8:	40013800 	.word	0x40013800
 800b4ac:	00f42400 	.word	0x00f42400
 800b4b0:	08014fa8 	.word	0x08014fa8
      default:
        pclk = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b4be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 8084 	beq.w	800b5d0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4cc:	4a4b      	ldr	r2, [pc, #300]	@ (800b5fc <UART_SetConfig+0x448>)
 800b4ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4da:	005a      	lsls	r2, r3, #1
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	085b      	lsrs	r3, r3, #1
 800b4e2:	441a      	add	r2, r3
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	2b0f      	cmp	r3, #15
 800b4f2:	d916      	bls.n	800b522 <UART_SetConfig+0x36e>
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
 800b4f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4fa:	d212      	bcs.n	800b522 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	f023 030f 	bic.w	r3, r3, #15
 800b504:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	085b      	lsrs	r3, r3, #1
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	f003 0307 	and.w	r3, r3, #7
 800b510:	b29a      	uxth	r2, r3
 800b512:	8bfb      	ldrh	r3, [r7, #30]
 800b514:	4313      	orrs	r3, r2
 800b516:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	8bfa      	ldrh	r2, [r7, #30]
 800b51e:	60da      	str	r2, [r3, #12]
 800b520:	e056      	b.n	800b5d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b528:	e052      	b.n	800b5d0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b52a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b52e:	3b01      	subs	r3, #1
 800b530:	2b07      	cmp	r3, #7
 800b532:	d822      	bhi.n	800b57a <UART_SetConfig+0x3c6>
 800b534:	a201      	add	r2, pc, #4	@ (adr r2, 800b53c <UART_SetConfig+0x388>)
 800b536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53a:	bf00      	nop
 800b53c:	0800b55d 	.word	0x0800b55d
 800b540:	0800b565 	.word	0x0800b565
 800b544:	0800b57b 	.word	0x0800b57b
 800b548:	0800b56b 	.word	0x0800b56b
 800b54c:	0800b57b 	.word	0x0800b57b
 800b550:	0800b57b 	.word	0x0800b57b
 800b554:	0800b57b 	.word	0x0800b57b
 800b558:	0800b573 	.word	0x0800b573
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b55c:	f7fd f9c4 	bl	80088e8 <HAL_RCC_GetPCLK2Freq>
 800b560:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b562:	e010      	b.n	800b586 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b564:	4b26      	ldr	r3, [pc, #152]	@ (800b600 <UART_SetConfig+0x44c>)
 800b566:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b568:	e00d      	b.n	800b586 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b56a:	f7fd f927 	bl	80087bc <HAL_RCC_GetSysClockFreq>
 800b56e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b570:	e009      	b.n	800b586 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b576:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b578:	e005      	b.n	800b586 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b584:	bf00      	nop
    }

    if (pclk != 0U)
 800b586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d021      	beq.n	800b5d0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b590:	4a1a      	ldr	r2, [pc, #104]	@ (800b5fc <UART_SetConfig+0x448>)
 800b592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b596:	461a      	mov	r2, r3
 800b598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	085b      	lsrs	r3, r3, #1
 800b5a4:	441a      	add	r2, r3
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	2b0f      	cmp	r3, #15
 800b5b4:	d909      	bls.n	800b5ca <UART_SetConfig+0x416>
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5bc:	d205      	bcs.n	800b5ca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	60da      	str	r2, [r3, #12]
 800b5c8:	e002      	b.n	800b5d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b5ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3730      	adds	r7, #48	@ 0x30
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5fa:	bf00      	nop
 800b5fc:	08014fa8 	.word	0x08014fa8
 800b600:	00f42400 	.word	0x00f42400

0800b604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b610:	f003 0308 	and.w	r3, r3, #8
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00a      	beq.n	800b62e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	430a      	orrs	r2, r1
 800b64e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b654:	f003 0302 	and.w	r3, r3, #2
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00a      	beq.n	800b672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	430a      	orrs	r2, r1
 800b670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b676:	f003 0304 	and.w	r3, r3, #4
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00a      	beq.n	800b694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	430a      	orrs	r2, r1
 800b692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b698:	f003 0310 	and.w	r3, r3, #16
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00a      	beq.n	800b6b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	430a      	orrs	r2, r1
 800b6b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ba:	f003 0320 	and.w	r3, r3, #32
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00a      	beq.n	800b6d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	430a      	orrs	r2, r1
 800b6d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d01a      	beq.n	800b71a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b702:	d10a      	bne.n	800b71a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	430a      	orrs	r2, r1
 800b718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00a      	beq.n	800b73c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	430a      	orrs	r2, r1
 800b73a:	605a      	str	r2, [r3, #4]
  }
}
 800b73c:	bf00      	nop
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b098      	sub	sp, #96	@ 0x60
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b758:	f7f9 fcc0 	bl	80050dc <HAL_GetTick>
 800b75c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0308 	and.w	r3, r3, #8
 800b768:	2b08      	cmp	r3, #8
 800b76a:	d12f      	bne.n	800b7cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b76c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b774:	2200      	movs	r2, #0
 800b776:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f88e 	bl	800b89c <UART_WaitOnFlagUntilTimeout>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d022      	beq.n	800b7cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b79a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e6      	bne.n	800b786 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e063      	b.n	800b894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	d149      	bne.n	800b86e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f857 	bl	800b89c <UART_WaitOnFlagUntilTimeout>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d03c      	beq.n	800b86e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	e853 3f00 	ldrex	r3, [r3]
 800b800:	623b      	str	r3, [r7, #32]
   return(result);
 800b802:	6a3b      	ldr	r3, [r7, #32]
 800b804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b808:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b812:	633b      	str	r3, [r7, #48]	@ 0x30
 800b814:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b81a:	e841 2300 	strex	r3, r2, [r1]
 800b81e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1e6      	bne.n	800b7f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3308      	adds	r3, #8
 800b82c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	e853 3f00 	ldrex	r3, [r3]
 800b834:	60fb      	str	r3, [r7, #12]
   return(result);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f023 0301 	bic.w	r3, r3, #1
 800b83c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3308      	adds	r3, #8
 800b844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b846:	61fa      	str	r2, [r7, #28]
 800b848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84a:	69b9      	ldr	r1, [r7, #24]
 800b84c:	69fa      	ldr	r2, [r7, #28]
 800b84e:	e841 2300 	strex	r3, r2, [r1]
 800b852:	617b      	str	r3, [r7, #20]
   return(result);
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1e5      	bne.n	800b826 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2220      	movs	r2, #32
 800b85e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b86a:	2303      	movs	r3, #3
 800b86c:	e012      	b.n	800b894 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2220      	movs	r2, #32
 800b872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2220      	movs	r2, #32
 800b87a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3758      	adds	r7, #88	@ 0x58
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	603b      	str	r3, [r7, #0]
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8ac:	e04f      	b.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b4:	d04b      	beq.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8b6:	f7f9 fc11 	bl	80050dc <HAL_GetTick>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d302      	bcc.n	800b8cc <UART_WaitOnFlagUntilTimeout+0x30>
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e04e      	b.n	800b96e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f003 0304 	and.w	r3, r3, #4
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d037      	beq.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2b80      	cmp	r3, #128	@ 0x80
 800b8e2:	d034      	beq.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b40      	cmp	r3, #64	@ 0x40
 800b8e8:	d031      	beq.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	f003 0308 	and.w	r3, r3, #8
 800b8f4:	2b08      	cmp	r3, #8
 800b8f6:	d110      	bne.n	800b91a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2208      	movs	r2, #8
 800b8fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 f99c 	bl	800bc3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2208      	movs	r2, #8
 800b90a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e029      	b.n	800b96e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69db      	ldr	r3, [r3, #28]
 800b920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b928:	d111      	bne.n	800b94e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f000 f982 	bl	800bc3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2220      	movs	r2, #32
 800b93e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e00f      	b.n	800b96e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	69da      	ldr	r2, [r3, #28]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	4013      	ands	r3, r2
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	bf0c      	ite	eq
 800b95e:	2301      	moveq	r3, #1
 800b960:	2300      	movne	r3, #0
 800b962:	b2db      	uxtb	r3, r3
 800b964:	461a      	mov	r2, r3
 800b966:	79fb      	ldrb	r3, [r7, #7]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d0a0      	beq.n	800b8ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
	...

0800b978 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b978:	b480      	push	{r7}
 800b97a:	b0a3      	sub	sp, #140	@ 0x8c
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	88fa      	ldrh	r2, [r7, #6]
 800b990:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	88fa      	ldrh	r2, [r7, #6]
 800b998:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9aa:	d10e      	bne.n	800b9ca <UART_Start_Receive_IT+0x52>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d105      	bne.n	800b9c0 <UART_Start_Receive_IT+0x48>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b9ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9be:	e02d      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	22ff      	movs	r2, #255	@ 0xff
 800b9c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9c8:	e028      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10d      	bne.n	800b9ee <UART_Start_Receive_IT+0x76>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d104      	bne.n	800b9e4 <UART_Start_Receive_IT+0x6c>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	22ff      	movs	r2, #255	@ 0xff
 800b9de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9e2:	e01b      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	227f      	movs	r2, #127	@ 0x7f
 800b9e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b9ec:	e016      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9f6:	d10d      	bne.n	800ba14 <UART_Start_Receive_IT+0x9c>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d104      	bne.n	800ba0a <UART_Start_Receive_IT+0x92>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	227f      	movs	r2, #127	@ 0x7f
 800ba04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba08:	e008      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	223f      	movs	r2, #63	@ 0x3f
 800ba0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ba12:	e003      	b.n	800ba1c <UART_Start_Receive_IT+0xa4>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2222      	movs	r2, #34	@ 0x22
 800ba28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	3308      	adds	r3, #8
 800ba32:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba36:	e853 3f00 	ldrex	r3, [r3]
 800ba3a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ba3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba3e:	f043 0301 	orr.w	r3, r3, #1
 800ba42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ba50:	673a      	str	r2, [r7, #112]	@ 0x70
 800ba52:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba54:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ba56:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ba5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e3      	bne.n	800ba2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba6c:	d14f      	bne.n	800bb0e <UART_Start_Receive_IT+0x196>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ba74:	88fa      	ldrh	r2, [r7, #6]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d349      	bcc.n	800bb0e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba82:	d107      	bne.n	800ba94 <UART_Start_Receive_IT+0x11c>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d103      	bne.n	800ba94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4a47      	ldr	r2, [pc, #284]	@ (800bbac <UART_Start_Receive_IT+0x234>)
 800ba90:	675a      	str	r2, [r3, #116]	@ 0x74
 800ba92:	e002      	b.n	800ba9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4a46      	ldr	r2, [pc, #280]	@ (800bbb0 <UART_Start_Receive_IT+0x238>)
 800ba98:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d01a      	beq.n	800bad8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800baaa:	e853 3f00 	ldrex	r3, [r3]
 800baae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bab6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bac6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800baca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bacc:	e841 2300 	strex	r3, r2, [r1]
 800bad0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e4      	bne.n	800baa2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3308      	adds	r3, #8
 800bade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bae2:	e853 3f00 	ldrex	r3, [r3]
 800bae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800baee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3308      	adds	r3, #8
 800baf6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800baf8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bafa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bafe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb00:	e841 2300 	strex	r3, r2, [r1]
 800bb04:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bb06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1e5      	bne.n	800bad8 <UART_Start_Receive_IT+0x160>
 800bb0c:	e046      	b.n	800bb9c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb16:	d107      	bne.n	800bb28 <UART_Start_Receive_IT+0x1b0>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d103      	bne.n	800bb28 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4a24      	ldr	r2, [pc, #144]	@ (800bbb4 <UART_Start_Receive_IT+0x23c>)
 800bb24:	675a      	str	r2, [r3, #116]	@ 0x74
 800bb26:	e002      	b.n	800bb2e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4a23      	ldr	r2, [pc, #140]	@ (800bbb8 <UART_Start_Receive_IT+0x240>)
 800bb2c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d019      	beq.n	800bb6a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3e:	e853 3f00 	ldrex	r3, [r3]
 800bb42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb46:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800bb4a:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	461a      	mov	r2, r3
 800bb52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb54:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb56:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb5c:	e841 2300 	strex	r3, r2, [r1]
 800bb60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1e6      	bne.n	800bb36 <UART_Start_Receive_IT+0x1be>
 800bb68:	e018      	b.n	800bb9c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	e853 3f00 	ldrex	r3, [r3]
 800bb76:	613b      	str	r3, [r7, #16]
   return(result);
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	f043 0320 	orr.w	r3, r3, #32
 800bb7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	461a      	mov	r2, r3
 800bb86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb88:	623b      	str	r3, [r7, #32]
 800bb8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8c:	69f9      	ldr	r1, [r7, #28]
 800bb8e:	6a3a      	ldr	r2, [r7, #32]
 800bb90:	e841 2300 	strex	r3, r2, [r1]
 800bb94:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1e6      	bne.n	800bb6a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	378c      	adds	r7, #140	@ 0x8c
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	0800c599 	.word	0x0800c599
 800bbb0:	0800c235 	.word	0x0800c235
 800bbb4:	0800c07d 	.word	0x0800c07d
 800bbb8:	0800bec5 	.word	0x0800bec5

0800bbbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b08f      	sub	sp, #60	@ 0x3c
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	e853 3f00 	ldrex	r3, [r3]
 800bbd0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bbd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbe4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbea:	e841 2300 	strex	r3, r2, [r1]
 800bbee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1e6      	bne.n	800bbc4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3308      	adds	r3, #8
 800bbfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	e853 3f00 	ldrex	r3, [r3]
 800bc04:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bc0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3308      	adds	r3, #8
 800bc14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc16:	61ba      	str	r2, [r7, #24]
 800bc18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	6979      	ldr	r1, [r7, #20]
 800bc1c:	69ba      	ldr	r2, [r7, #24]
 800bc1e:	e841 2300 	strex	r3, r2, [r1]
 800bc22:	613b      	str	r3, [r7, #16]
   return(result);
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1e5      	bne.n	800bbf6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bc32:	bf00      	nop
 800bc34:	373c      	adds	r7, #60	@ 0x3c
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b095      	sub	sp, #84	@ 0x54
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc4e:	e853 3f00 	ldrex	r3, [r3]
 800bc52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	461a      	mov	r2, r3
 800bc62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc64:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc6c:	e841 2300 	strex	r3, r2, [r1]
 800bc70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1e6      	bne.n	800bc46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3308      	adds	r3, #8
 800bc7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	e853 3f00 	ldrex	r3, [r3]
 800bc86:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc8e:	f023 0301 	bic.w	r3, r3, #1
 800bc92:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3308      	adds	r3, #8
 800bc9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bca4:	e841 2300 	strex	r3, r2, [r1]
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1e3      	bne.n	800bc78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d118      	bne.n	800bcea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	e853 3f00 	ldrex	r3, [r3]
 800bcc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	f023 0310 	bic.w	r3, r3, #16
 800bccc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd6:	61bb      	str	r3, [r7, #24]
 800bcd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcda:	6979      	ldr	r1, [r7, #20]
 800bcdc:	69ba      	ldr	r2, [r7, #24]
 800bcde:	e841 2300 	strex	r3, r2, [r1]
 800bce2:	613b      	str	r3, [r7, #16]
   return(result);
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e6      	bne.n	800bcb8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bcfe:	bf00      	nop
 800bd00:	3754      	adds	r7, #84	@ 0x54
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b090      	sub	sp, #64	@ 0x40
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 0320 	and.w	r3, r3, #32
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d137      	bne.n	800bd96 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bd26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3308      	adds	r3, #8
 800bd34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd38:	e853 3f00 	ldrex	r3, [r3]
 800bd3c:	623b      	str	r3, [r7, #32]
   return(result);
 800bd3e:	6a3b      	ldr	r3, [r7, #32]
 800bd40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd44:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3308      	adds	r3, #8
 800bd4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd4e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd56:	e841 2300 	strex	r3, r2, [r1]
 800bd5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1e5      	bne.n	800bd2e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	e853 3f00 	ldrex	r3, [r3]
 800bd6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd76:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd80:	61fb      	str	r3, [r7, #28]
 800bd82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd84:	69b9      	ldr	r1, [r7, #24]
 800bd86:	69fa      	ldr	r2, [r7, #28]
 800bd88:	e841 2300 	strex	r3, r2, [r1]
 800bd8c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e6      	bne.n	800bd62 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd94:	e002      	b.n	800bd9c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bd96:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bd98:	f7f7 ffc2 	bl	8003d20 <HAL_UART_TxCpltCallback>
}
 800bd9c:	bf00      	nop
 800bd9e:	3740      	adds	r7, #64	@ 0x40
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f7ff f9de 	bl	800b174 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdb8:	bf00      	nop
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdcc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdd4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bddc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bde8:	2b80      	cmp	r3, #128	@ 0x80
 800bdea:	d109      	bne.n	800be00 <UART_DMAError+0x40>
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	2b21      	cmp	r3, #33	@ 0x21
 800bdf0:	d106      	bne.n	800be00 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bdfa:	6978      	ldr	r0, [r7, #20]
 800bdfc:	f7ff fede 	bl	800bbbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be0a:	2b40      	cmp	r3, #64	@ 0x40
 800be0c:	d109      	bne.n	800be22 <UART_DMAError+0x62>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2b22      	cmp	r3, #34	@ 0x22
 800be12:	d106      	bne.n	800be22 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2200      	movs	r2, #0
 800be18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800be1c:	6978      	ldr	r0, [r7, #20]
 800be1e:	f7ff ff0e 	bl	800bc3e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be28:	f043 0210 	orr.w	r2, r3, #16
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be32:	6978      	ldr	r0, [r7, #20]
 800be34:	f7ff f9a8 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be38:	bf00      	nop
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2200      	movs	r2, #0
 800be52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f7ff f992 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be64:	bf00      	nop
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b088      	sub	sp, #32
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	e853 3f00 	ldrex	r3, [r3]
 800be80:	60bb      	str	r3, [r7, #8]
   return(result);
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be88:	61fb      	str	r3, [r7, #28]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	61bb      	str	r3, [r7, #24]
 800be94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be96:	6979      	ldr	r1, [r7, #20]
 800be98:	69ba      	ldr	r2, [r7, #24]
 800be9a:	e841 2300 	strex	r3, r2, [r1]
 800be9e:	613b      	str	r3, [r7, #16]
   return(result);
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1e6      	bne.n	800be74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2220      	movs	r2, #32
 800beaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7f7 ff33 	bl	8003d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beba:	bf00      	nop
 800bebc:	3720      	adds	r7, #32
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b09c      	sub	sp, #112	@ 0x70
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bed2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bedc:	2b22      	cmp	r3, #34	@ 0x22
 800bede:	f040 80be 	bne.w	800c05e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800beec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bef0:	b2d9      	uxtb	r1, r3
 800bef2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800befc:	400a      	ands	r2, r1
 800befe:	b2d2      	uxtb	r2, r2
 800bf00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	3b01      	subs	r3, #1
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f040 80a1 	bne.w	800c06e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf34:	e853 3f00 	ldrex	r3, [r3]
 800bf38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf40:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	461a      	mov	r2, r3
 800bf48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf52:	e841 2300 	strex	r3, r2, [r1]
 800bf56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e6      	bne.n	800bf2c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3308      	adds	r3, #8
 800bf64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf70:	f023 0301 	bic.w	r3, r3, #1
 800bf74:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bf7e:	647a      	str	r2, [r7, #68]	@ 0x44
 800bf80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf86:	e841 2300 	strex	r3, r2, [r1]
 800bf8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1e5      	bne.n	800bf5e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2220      	movs	r2, #32
 800bf96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a33      	ldr	r2, [pc, #204]	@ (800c078 <UART_RxISR_8BIT+0x1b4>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d01f      	beq.n	800bff0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d018      	beq.n	800bff0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc6:	e853 3f00 	ldrex	r3, [r3]
 800bfca:	623b      	str	r3, [r7, #32]
   return(result);
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bfd2:	663b      	str	r3, [r7, #96]	@ 0x60
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfdc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfe4:	e841 2300 	strex	r3, r2, [r1]
 800bfe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1e6      	bne.n	800bfbe <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d12e      	bne.n	800c056 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	e853 3f00 	ldrex	r3, [r3]
 800c00a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f023 0310 	bic.w	r3, r3, #16
 800c012:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	461a      	mov	r2, r3
 800c01a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c01c:	61fb      	str	r3, [r7, #28]
 800c01e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	69b9      	ldr	r1, [r7, #24]
 800c022:	69fa      	ldr	r2, [r7, #28]
 800c024:	e841 2300 	strex	r3, r2, [r1]
 800c028:	617b      	str	r3, [r7, #20]
   return(result);
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e6      	bne.n	800bffe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	f003 0310 	and.w	r3, r3, #16
 800c03a:	2b10      	cmp	r3, #16
 800c03c:	d103      	bne.n	800c046 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2210      	movs	r2, #16
 800c044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c04c:	4619      	mov	r1, r3
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff f8a4 	bl	800b19c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c054:	e00b      	b.n	800c06e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7f7 fe44 	bl	8003ce4 <HAL_UART_RxCpltCallback>
}
 800c05c:	e007      	b.n	800c06e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	699a      	ldr	r2, [r3, #24]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f042 0208 	orr.w	r2, r2, #8
 800c06c:	619a      	str	r2, [r3, #24]
}
 800c06e:	bf00      	nop
 800c070:	3770      	adds	r7, #112	@ 0x70
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	40008000 	.word	0x40008000

0800c07c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b09c      	sub	sp, #112	@ 0x70
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c08a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c094:	2b22      	cmp	r3, #34	@ 0x22
 800c096:	f040 80be 	bne.w	800c216 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c0aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c0ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0be:	1c9a      	adds	r2, r3, #2
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f040 80a1 	bne.w	800c226 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c0f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c102:	657b      	str	r3, [r7, #84]	@ 0x54
 800c104:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c106:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c108:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c10a:	e841 2300 	strex	r3, r2, [r1]
 800c10e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1e6      	bne.n	800c0e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3308      	adds	r3, #8
 800c11c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c128:	f023 0301 	bic.w	r3, r3, #1
 800c12c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3308      	adds	r3, #8
 800c134:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c136:	643a      	str	r2, [r7, #64]	@ 0x40
 800c138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c13c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e5      	bne.n	800c116 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2220      	movs	r2, #32
 800c14e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a33      	ldr	r2, [pc, #204]	@ (800c230 <UART_RxISR_16BIT+0x1b4>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d01f      	beq.n	800c1a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c172:	2b00      	cmp	r3, #0
 800c174:	d018      	beq.n	800c1a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	e853 3f00 	ldrex	r3, [r3]
 800c182:	61fb      	str	r3, [r7, #28]
   return(result);
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c18a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	461a      	mov	r2, r3
 800c192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c196:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c19a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c19c:	e841 2300 	strex	r3, r2, [r1]
 800c1a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1e6      	bne.n	800c176 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d12e      	bne.n	800c20e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	f023 0310 	bic.w	r3, r3, #16
 800c1ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1d4:	61bb      	str	r3, [r7, #24]
 800c1d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d8:	6979      	ldr	r1, [r7, #20]
 800c1da:	69ba      	ldr	r2, [r7, #24]
 800c1dc:	e841 2300 	strex	r3, r2, [r1]
 800c1e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1e6      	bne.n	800c1b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	69db      	ldr	r3, [r3, #28]
 800c1ee:	f003 0310 	and.w	r3, r3, #16
 800c1f2:	2b10      	cmp	r3, #16
 800c1f4:	d103      	bne.n	800c1fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2210      	movs	r2, #16
 800c1fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c204:	4619      	mov	r1, r3
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7fe ffc8 	bl	800b19c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c20c:	e00b      	b.n	800c226 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7f7 fd68 	bl	8003ce4 <HAL_UART_RxCpltCallback>
}
 800c214:	e007      	b.n	800c226 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	699a      	ldr	r2, [r3, #24]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f042 0208 	orr.w	r2, r2, #8
 800c224:	619a      	str	r2, [r3, #24]
}
 800c226:	bf00      	nop
 800c228:	3770      	adds	r7, #112	@ 0x70
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	40008000 	.word	0x40008000

0800c234 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b0ac      	sub	sp, #176	@ 0xb0
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c242:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	69db      	ldr	r3, [r3, #28]
 800c24c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c26a:	2b22      	cmp	r3, #34	@ 0x22
 800c26c:	f040 8183 	bne.w	800c576 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c276:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c27a:	e126      	b.n	800c4ca <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c282:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c286:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c28a:	b2d9      	uxtb	r1, r3
 800c28c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c290:	b2da      	uxtb	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c296:	400a      	ands	r2, r1
 800c298:	b2d2      	uxtb	r2, r2
 800c29a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2a0:	1c5a      	adds	r2, r3, #1
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	69db      	ldr	r3, [r3, #28]
 800c2be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2c6:	f003 0307 	and.w	r3, r3, #7
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d053      	beq.n	800c376 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2d2:	f003 0301 	and.w	r3, r3, #1
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d011      	beq.n	800c2fe <UART_RxISR_8BIT_FIFOEN+0xca>
 800c2da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00b      	beq.n	800c2fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2f4:	f043 0201 	orr.w	r2, r3, #1
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c302:	f003 0302 	and.w	r3, r3, #2
 800c306:	2b00      	cmp	r3, #0
 800c308:	d011      	beq.n	800c32e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c30a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00b      	beq.n	800c32e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2202      	movs	r2, #2
 800c31c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c324:	f043 0204 	orr.w	r2, r3, #4
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c32e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c332:	f003 0304 	and.w	r3, r3, #4
 800c336:	2b00      	cmp	r3, #0
 800c338:	d011      	beq.n	800c35e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c33a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00b      	beq.n	800c35e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2204      	movs	r2, #4
 800c34c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c354:	f043 0202 	orr.w	r2, r3, #2
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c364:	2b00      	cmp	r3, #0
 800c366:	d006      	beq.n	800c376 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7fe ff0d 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f040 80a3 	bne.w	800c4ca <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c38c:	e853 3f00 	ldrex	r3, [r3]
 800c390:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c3a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c3a8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3aa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c3ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c3ae:	e841 2300 	strex	r3, r2, [r1]
 800c3b2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c3b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1e4      	bne.n	800c384 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3308      	adds	r3, #8
 800c3c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3c4:	e853 3f00 	ldrex	r3, [r3]
 800c3c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c3ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3d0:	f023 0301 	bic.w	r3, r3, #1
 800c3d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3308      	adds	r3, #8
 800c3de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c3e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c3e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c3e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c3f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e1      	bne.n	800c3ba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a60      	ldr	r2, [pc, #384]	@ (800c590 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d021      	beq.n	800c458 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d01a      	beq.n	800c458 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c42a:	e853 3f00 	ldrex	r3, [r3]
 800c42e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c432:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c444:	657b      	str	r3, [r7, #84]	@ 0x54
 800c446:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c448:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c44a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c44c:	e841 2300 	strex	r3, r2, [r1]
 800c450:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1e4      	bne.n	800c422 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d130      	bne.n	800c4c2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2200      	movs	r2, #0
 800c464:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46e:	e853 3f00 	ldrex	r3, [r3]
 800c472:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c476:	f023 0310 	bic.w	r3, r3, #16
 800c47a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c488:	643b      	str	r3, [r7, #64]	@ 0x40
 800c48a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c48e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c490:	e841 2300 	strex	r3, r2, [r1]
 800c494:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1e4      	bne.n	800c466 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	f003 0310 	and.w	r3, r3, #16
 800c4a6:	2b10      	cmp	r3, #16
 800c4a8:	d103      	bne.n	800c4b2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2210      	movs	r2, #16
 800c4b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7fe fe6e 	bl	800b19c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c4c0:	e00e      	b.n	800c4e0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7f7 fc0e 	bl	8003ce4 <HAL_UART_RxCpltCallback>
        break;
 800c4c8:	e00a      	b.n	800c4e0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c4ca:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d006      	beq.n	800c4e0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800c4d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4d6:	f003 0320 	and.w	r3, r3, #32
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f47f aece 	bne.w	800c27c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c4e6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c4ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d049      	beq.n	800c586 <UART_RxISR_8BIT_FIFOEN+0x352>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c4f8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d242      	bcs.n	800c586 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3308      	adds	r3, #8
 800c506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	e853 3f00 	ldrex	r3, [r3]
 800c50e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c516:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	3308      	adds	r3, #8
 800c520:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c524:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c526:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c528:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c52a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c52c:	e841 2300 	strex	r3, r2, [r1]
 800c530:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1e3      	bne.n	800c500 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a16      	ldr	r2, [pc, #88]	@ (800c594 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800c53c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	e853 3f00 	ldrex	r3, [r3]
 800c54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	f043 0320 	orr.w	r3, r3, #32
 800c552:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	461a      	mov	r2, r3
 800c55c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c560:	61bb      	str	r3, [r7, #24]
 800c562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c564:	6979      	ldr	r1, [r7, #20]
 800c566:	69ba      	ldr	r2, [r7, #24]
 800c568:	e841 2300 	strex	r3, r2, [r1]
 800c56c:	613b      	str	r3, [r7, #16]
   return(result);
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1e4      	bne.n	800c53e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c574:	e007      	b.n	800c586 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	699a      	ldr	r2, [r3, #24]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f042 0208 	orr.w	r2, r2, #8
 800c584:	619a      	str	r2, [r3, #24]
}
 800c586:	bf00      	nop
 800c588:	37b0      	adds	r7, #176	@ 0xb0
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	40008000 	.word	0x40008000
 800c594:	0800bec5 	.word	0x0800bec5

0800c598 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b0ae      	sub	sp, #184	@ 0xb8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c5a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	69db      	ldr	r3, [r3, #28]
 800c5b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5ce:	2b22      	cmp	r3, #34	@ 0x22
 800c5d0:	f040 8187 	bne.w	800c8e2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c5da:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c5de:	e12a      	b.n	800c836 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c5f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c5f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c602:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c608:	1c9a      	adds	r2, r3, #2
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c614:	b29b      	uxth	r3, r3
 800c616:	3b01      	subs	r3, #1
 800c618:	b29a      	uxth	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	69db      	ldr	r3, [r3, #28]
 800c626:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c62a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c62e:	f003 0307 	and.w	r3, r3, #7
 800c632:	2b00      	cmp	r3, #0
 800c634:	d053      	beq.n	800c6de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c63a:	f003 0301 	and.w	r3, r3, #1
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d011      	beq.n	800c666 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00b      	beq.n	800c666 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2201      	movs	r2, #1
 800c654:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c65c:	f043 0201 	orr.w	r2, r3, #1
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d011      	beq.n	800c696 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c676:	f003 0301 	and.w	r3, r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00b      	beq.n	800c696 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2202      	movs	r2, #2
 800c684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c68c:	f043 0204 	orr.w	r2, r3, #4
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c69a:	f003 0304 	and.w	r3, r3, #4
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d011      	beq.n	800c6c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c6a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c6a6:	f003 0301 	and.w	r3, r3, #1
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2204      	movs	r2, #4
 800c6b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6bc:	f043 0202 	orr.w	r2, r3, #2
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d006      	beq.n	800c6de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7fe fd59 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f040 80a5 	bne.w	800c836 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6f4:	e853 3f00 	ldrex	r3, [r3]
 800c6f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c6fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c700:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	461a      	mov	r2, r3
 800c70a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c70e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c712:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c714:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c716:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c71a:	e841 2300 	strex	r3, r2, [r1]
 800c71e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1e2      	bne.n	800c6ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3308      	adds	r3, #8
 800c72c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c730:	e853 3f00 	ldrex	r3, [r3]
 800c734:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c73c:	f023 0301 	bic.w	r3, r3, #1
 800c740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3308      	adds	r3, #8
 800c74a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c74e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c750:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c752:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c754:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c756:	e841 2300 	strex	r3, r2, [r1]
 800c75a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c75c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1e1      	bne.n	800c726 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2220      	movs	r2, #32
 800c766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a60      	ldr	r2, [pc, #384]	@ (800c8fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d021      	beq.n	800c7c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d01a      	beq.n	800c7c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c796:	e853 3f00 	ldrex	r3, [r3]
 800c79a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c79c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c79e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c7a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c7b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c7b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c7b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c7b8:	e841 2300 	strex	r3, r2, [r1]
 800c7bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c7be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1e4      	bne.n	800c78e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d130      	bne.n	800c82e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7da:	e853 3f00 	ldrex	r3, [r3]
 800c7de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c7e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e2:	f023 0310 	bic.w	r3, r3, #16
 800c7e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c7f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c7fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7fc:	e841 2300 	strex	r3, r2, [r1]
 800c800:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1e4      	bne.n	800c7d2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b10      	cmp	r3, #16
 800c814:	d103      	bne.n	800c81e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2210      	movs	r2, #16
 800c81c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7fe fcb8 	bl	800b19c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c82c:	e00e      	b.n	800c84c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7f7 fa58 	bl	8003ce4 <HAL_UART_RxCpltCallback>
        break;
 800c834:	e00a      	b.n	800c84c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c836:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d006      	beq.n	800c84c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800c83e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c842:	f003 0320 	and.w	r3, r3, #32
 800c846:	2b00      	cmp	r3, #0
 800c848:	f47f aeca 	bne.w	800c5e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c852:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c856:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d049      	beq.n	800c8f2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c864:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c868:	429a      	cmp	r2, r3
 800c86a:	d242      	bcs.n	800c8f2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	3308      	adds	r3, #8
 800c872:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c876:	e853 3f00 	ldrex	r3, [r3]
 800c87a:	623b      	str	r3, [r7, #32]
   return(result);
 800c87c:	6a3b      	ldr	r3, [r7, #32]
 800c87e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c882:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3308      	adds	r3, #8
 800c88c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c890:	633a      	str	r2, [r7, #48]	@ 0x30
 800c892:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c894:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c898:	e841 2300 	strex	r3, r2, [r1]
 800c89c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1e3      	bne.n	800c86c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a16      	ldr	r2, [pc, #88]	@ (800c900 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800c8a8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	e853 3f00 	ldrex	r3, [r3]
 800c8b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f043 0320 	orr.w	r3, r3, #32
 800c8be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c8cc:	61fb      	str	r3, [r7, #28]
 800c8ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d0:	69b9      	ldr	r1, [r7, #24]
 800c8d2:	69fa      	ldr	r2, [r7, #28]
 800c8d4:	e841 2300 	strex	r3, r2, [r1]
 800c8d8:	617b      	str	r3, [r7, #20]
   return(result);
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1e4      	bne.n	800c8aa <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c8e0:	e007      	b.n	800c8f2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	699a      	ldr	r2, [r3, #24]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f042 0208 	orr.w	r2, r2, #8
 800c8f0:	619a      	str	r2, [r3, #24]
}
 800c8f2:	bf00      	nop
 800c8f4:	37b8      	adds	r7, #184	@ 0xb8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	40008000 	.word	0x40008000
 800c900:	0800c07d 	.word	0x0800c07d

0800c904 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d101      	bne.n	800c956 <HAL_UARTEx_DisableFifoMode+0x16>
 800c952:	2302      	movs	r3, #2
 800c954:	e027      	b.n	800c9a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2224      	movs	r2, #36	@ 0x24
 800c962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f022 0201 	bic.w	r2, r2, #1
 800c97c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c984:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2220      	movs	r2, #32
 800c998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d101      	bne.n	800c9ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	e02d      	b.n	800ca26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2224      	movs	r2, #36	@ 0x24
 800c9d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f022 0201 	bic.w	r2, r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	430a      	orrs	r2, r1
 800ca04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f850 	bl	800caac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2220      	movs	r2, #32
 800ca18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b084      	sub	sp, #16
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d101      	bne.n	800ca46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca42:	2302      	movs	r3, #2
 800ca44:	e02d      	b.n	800caa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2224      	movs	r2, #36	@ 0x24
 800ca52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f022 0201 	bic.w	r2, r2, #1
 800ca6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	430a      	orrs	r2, r1
 800ca80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f812 	bl	800caac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2220      	movs	r2, #32
 800ca94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
	...

0800caac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d108      	bne.n	800cace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cacc:	e031      	b.n	800cb32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cace:	2308      	movs	r3, #8
 800cad0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cad2:	2308      	movs	r3, #8
 800cad4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	0e5b      	lsrs	r3, r3, #25
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	f003 0307 	and.w	r3, r3, #7
 800cae4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	0f5b      	lsrs	r3, r3, #29
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	f003 0307 	and.w	r3, r3, #7
 800caf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800caf6:	7bbb      	ldrb	r3, [r7, #14]
 800caf8:	7b3a      	ldrb	r2, [r7, #12]
 800cafa:	4911      	ldr	r1, [pc, #68]	@ (800cb40 <UARTEx_SetNbDataToProcess+0x94>)
 800cafc:	5c8a      	ldrb	r2, [r1, r2]
 800cafe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb02:	7b3a      	ldrb	r2, [r7, #12]
 800cb04:	490f      	ldr	r1, [pc, #60]	@ (800cb44 <UARTEx_SetNbDataToProcess+0x98>)
 800cb06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb08:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb14:	7bfb      	ldrb	r3, [r7, #15]
 800cb16:	7b7a      	ldrb	r2, [r7, #13]
 800cb18:	4909      	ldr	r1, [pc, #36]	@ (800cb40 <UARTEx_SetNbDataToProcess+0x94>)
 800cb1a:	5c8a      	ldrb	r2, [r1, r2]
 800cb1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb20:	7b7a      	ldrb	r2, [r7, #13]
 800cb22:	4908      	ldr	r1, [pc, #32]	@ (800cb44 <UARTEx_SetNbDataToProcess+0x98>)
 800cb24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb26:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cb32:	bf00      	nop
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	08014fc0 	.word	0x08014fc0
 800cb44:	08014fc8 	.word	0x08014fc8

0800cb48 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb52:	f107 0308 	add.w	r3, r7, #8
 800cb56:	2218      	movs	r2, #24
 800cb58:	2100      	movs	r1, #0
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f001 f92d 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb60:	233f      	movs	r3, #63	@ 0x3f
 800cb62:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800cb64:	2381      	movs	r3, #129	@ 0x81
 800cb66:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cb68:	1dfb      	adds	r3, r7, #7
 800cb6a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb70:	f107 0308 	add.w	r3, r7, #8
 800cb74:	2100      	movs	r1, #0
 800cb76:	4618      	mov	r0, r3
 800cb78:	f001 fba8 	bl	800e2cc <hci_send_req>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	da01      	bge.n	800cb86 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cb82:	23ff      	movs	r3, #255	@ 0xff
 800cb84:	e000      	b.n	800cb88 <aci_gap_set_non_discoverable+0x40>
  return status;
 800cb86:	79fb      	ldrb	r3, [r7, #7]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3720      	adds	r7, #32
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800cb90:	b5b0      	push	{r4, r5, r7, lr}
 800cb92:	b0ce      	sub	sp, #312	@ 0x138
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4605      	mov	r5, r0
 800cb98:	460c      	mov	r4, r1
 800cb9a:	4610      	mov	r0, r2
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cba2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cba6:	462a      	mov	r2, r5
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cbb2:	4622      	mov	r2, r4
 800cbb4:	801a      	strh	r2, [r3, #0]
 800cbb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbba:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	801a      	strh	r2, [r3, #0]
 800cbc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbc6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cbca:	460a      	mov	r2, r1
 800cbcc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800cbce:	f107 0310 	add.w	r3, r7, #16
 800cbd2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800cbd6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cbda:	3308      	adds	r3, #8
 800cbdc:	f107 0210 	add.w	r2, r7, #16
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800cbe6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cbea:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cbee:	4413      	add	r3, r2
 800cbf0:	3309      	adds	r3, #9
 800cbf2:	f107 0210 	add.w	r2, r7, #16
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cbfc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc00:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cc04:	2200      	movs	r2, #0
 800cc06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800cc0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc12:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc16:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800cc1a:	7812      	ldrb	r2, [r2, #0]
 800cc1c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cc1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc22:	3301      	adds	r3, #1
 800cc24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800cc28:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc2c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc30:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800cc34:	8812      	ldrh	r2, [r2, #0]
 800cc36:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800cc3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc3e:	3302      	adds	r3, #2
 800cc40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800cc44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc48:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc4c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800cc50:	8812      	ldrh	r2, [r2, #0]
 800cc52:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800cc56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc5a:	3302      	adds	r3, #2
 800cc5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800cc60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc64:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc68:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800cc6c:	7812      	ldrb	r2, [r2, #0]
 800cc6e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cc70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc74:	3301      	adds	r3, #1
 800cc76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800cc7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc7e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800cc82:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cc84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc88:	3301      	adds	r3, #1
 800cc8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800cc8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc92:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cc96:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800cc98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800cca2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cca6:	3308      	adds	r3, #8
 800cca8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ccac:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f001 f872 	bl	800dd9a <Osal_MemCpy>
    index_input += Local_Name_Length;
 800ccb6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800ccba:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800ccc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ccc8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cccc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ccce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800ccd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ccdc:	3301      	adds	r3, #1
 800ccde:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cce2:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800cce6:	4618      	mov	r0, r3
 800cce8:	f001 f857 	bl	800dd9a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800ccec:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800ccf0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800ccfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccfe:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800cd02:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cd04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd08:	3302      	adds	r3, #2
 800cd0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800cd0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cd12:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800cd16:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800cd18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd1c:	3302      	adds	r3, #2
 800cd1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd26:	2218      	movs	r2, #24
 800cd28:	2100      	movs	r1, #0
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f001 f845 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd30:	233f      	movs	r3, #63	@ 0x3f
 800cd32:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800cd36:	2383      	movs	r3, #131	@ 0x83
 800cd38:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cd3c:	f107 0310 	add.w	r3, r7, #16
 800cd40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cd44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cd4c:	f107 030f 	add.w	r3, r7, #15
 800cd50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cd54:	2301      	movs	r3, #1
 800cd56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd5e:	2100      	movs	r1, #0
 800cd60:	4618      	mov	r0, r3
 800cd62:	f001 fab3 	bl	800e2cc <hci_send_req>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	da01      	bge.n	800cd70 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800cd6c:	23ff      	movs	r3, #255	@ 0xff
 800cd6e:	e004      	b.n	800cd7a <aci_gap_set_discoverable+0x1ea>
  return status;
 800cd70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cd74:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cd78:	781b      	ldrb	r3, [r3, #0]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bdb0      	pop	{r4, r5, r7, pc}

0800cd84 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b0cc      	sub	sp, #304	@ 0x130
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cd90:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cd94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800cd96:	f107 0310 	add.w	r3, r7, #16
 800cd9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cd9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cda2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800cdb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cdb4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cdb8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800cdbc:	7812      	ldrb	r2, [r2, #0]
 800cdbe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cdc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cdca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cdce:	2218      	movs	r2, #24
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 fff1 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800cdd8:	233f      	movs	r3, #63	@ 0x3f
 800cdda:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800cdde:	2385      	movs	r3, #133	@ 0x85
 800cde0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cde4:	f107 0310 	add.w	r3, r7, #16
 800cde8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cdec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cdf0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cdf4:	f107 030f 	add.w	r3, r7, #15
 800cdf8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce06:	2100      	movs	r1, #0
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f001 fa5f 	bl	800e2cc <hci_send_req>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	da01      	bge.n	800ce18 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ce14:	23ff      	movs	r3, #255	@ 0xff
 800ce16:	e004      	b.n	800ce22 <aci_gap_set_io_capability+0x9e>
  return status;
 800ce18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce1c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ce20:	781b      	ldrb	r3, [r3, #0]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ce2c:	b5b0      	push	{r4, r5, r7, lr}
 800ce2e:	b0cc      	sub	sp, #304	@ 0x130
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	4605      	mov	r5, r0
 800ce34:	460c      	mov	r4, r1
 800ce36:	4610      	mov	r0, r2
 800ce38:	4619      	mov	r1, r3
 800ce3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce3e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce42:	462a      	mov	r2, r5
 800ce44:	701a      	strb	r2, [r3, #0]
 800ce46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce4a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ce4e:	4622      	mov	r2, r4
 800ce50:	701a      	strb	r2, [r3, #0]
 800ce52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce56:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	701a      	strb	r2, [r3, #0]
 800ce5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ce66:	460a      	mov	r2, r1
 800ce68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ce6a:	f107 0310 	add.w	r3, r7, #16
 800ce6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ce72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce76:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800ce84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ce88:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ce8c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ce90:	7812      	ldrb	r2, [r2, #0]
 800ce92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce98:	3301      	adds	r3, #1
 800ce9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800ce9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cea2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cea6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ceaa:	7812      	ldrb	r2, [r2, #0]
 800ceac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ceae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800ceb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cebc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cec0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800cec4:	7812      	ldrb	r2, [r2, #0]
 800cec6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cecc:	3301      	adds	r3, #1
 800cece:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800ced2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ced6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ceda:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800cede:	7812      	ldrb	r2, [r2, #0]
 800cee0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800cee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cee6:	3301      	adds	r3, #1
 800cee8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800ceec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cef0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800cef4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cefa:	3301      	adds	r3, #1
 800cefc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800cf00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf04:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800cf08:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cf0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf0e:	3301      	adds	r3, #1
 800cf10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cf14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf18:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800cf1c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cf1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf22:	3301      	adds	r3, #1
 800cf24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800cf28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf2c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800cf30:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cf34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf38:	3304      	adds	r3, #4
 800cf3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cf3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf42:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800cf46:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cf48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf56:	2218      	movs	r2, #24
 800cf58:	2100      	movs	r1, #0
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 ff2d 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800cf60:	233f      	movs	r3, #63	@ 0x3f
 800cf62:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800cf66:	2386      	movs	r3, #134	@ 0x86
 800cf68:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cf6c:	f107 0310 	add.w	r3, r7, #16
 800cf70:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cf74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf78:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cf7c:	f107 030f 	add.w	r3, r7, #15
 800cf80:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cf84:	2301      	movs	r3, #1
 800cf86:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cf8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf8e:	2100      	movs	r1, #0
 800cf90:	4618      	mov	r0, r3
 800cf92:	f001 f99b 	bl	800e2cc <hci_send_req>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	da01      	bge.n	800cfa0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800cf9c:	23ff      	movs	r3, #255	@ 0xff
 800cf9e:	e004      	b.n	800cfaa <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800cfa0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfa4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cfa8:	781b      	ldrb	r3, [r3, #0]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bdb0      	pop	{r4, r5, r7, pc}

0800cfb4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b0cc      	sub	sp, #304	@ 0x130
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	4602      	mov	r2, r0
 800cfbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfc0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cfc4:	6019      	str	r1, [r3, #0]
 800cfc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cfce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800cfd0:	f107 0310 	add.w	r3, r7, #16
 800cfd4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cfd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfdc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cfea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cfee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cff2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cff6:	8812      	ldrh	r2, [r2, #0]
 800cff8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cffa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cffe:	3302      	adds	r3, #2
 800d000:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800d004:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d008:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d00c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d010:	6812      	ldr	r2, [r2, #0]
 800d012:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800d016:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d01a:	3304      	adds	r3, #4
 800d01c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d020:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d024:	2218      	movs	r2, #24
 800d026:	2100      	movs	r1, #0
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 fec6 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d02e:	233f      	movs	r3, #63	@ 0x3f
 800d030:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800d034:	2388      	movs	r3, #136	@ 0x88
 800d036:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d03a:	f107 0310 	add.w	r3, r7, #16
 800d03e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d042:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d046:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d04a:	f107 030f 	add.w	r3, r7, #15
 800d04e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d052:	2301      	movs	r3, #1
 800d054:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d058:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d05c:	2100      	movs	r1, #0
 800d05e:	4618      	mov	r0, r3
 800d060:	f001 f934 	bl	800e2cc <hci_send_req>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	da01      	bge.n	800d06e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800d06a:	23ff      	movs	r3, #255	@ 0xff
 800d06c:	e004      	b.n	800d078 <aci_gap_pass_key_resp+0xc4>
  return status;
 800d06e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d072:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d076:	781b      	ldrb	r3, [r3, #0]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d082:	b590      	push	{r4, r7, lr}
 800d084:	b0cd      	sub	sp, #308	@ 0x134
 800d086:	af00      	add	r7, sp, #0
 800d088:	4604      	mov	r4, r0
 800d08a:	4608      	mov	r0, r1
 800d08c:	4611      	mov	r1, r2
 800d08e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d092:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d09c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d0a0:	4622      	mov	r2, r4
 800d0a2:	701a      	strb	r2, [r3, #0]
 800d0a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0a8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	701a      	strb	r2, [r3, #0]
 800d0b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0b4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d0b8:	460a      	mov	r2, r1
 800d0ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d0bc:	f107 0310 	add.w	r3, r7, #16
 800d0c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d0c4:	f107 0308 	add.w	r3, r7, #8
 800d0c8:	2207      	movs	r2, #7
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 fe74 	bl	800ddba <Osal_MemSet>
  int index_input = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800d0d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d0e0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d0e4:	7812      	ldrb	r2, [r2, #0]
 800d0e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d0e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d0f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d0f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d0fa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d0fe:	7812      	ldrb	r2, [r2, #0]
 800d100:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d102:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d106:	3301      	adds	r3, #1
 800d108:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d10c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d110:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d114:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d118:	7812      	ldrb	r2, [r2, #0]
 800d11a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d11c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d120:	3301      	adds	r3, #1
 800d122:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d126:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d12a:	2218      	movs	r2, #24
 800d12c:	2100      	movs	r1, #0
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 fe43 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d134:	233f      	movs	r3, #63	@ 0x3f
 800d136:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800d13a:	238a      	movs	r3, #138	@ 0x8a
 800d13c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d140:	f107 0310 	add.w	r3, r7, #16
 800d144:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d148:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d14c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d150:	f107 0308 	add.w	r3, r7, #8
 800d154:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d158:	2307      	movs	r3, #7
 800d15a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d15e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d162:	2100      	movs	r1, #0
 800d164:	4618      	mov	r0, r3
 800d166:	f001 f8b1 	bl	800e2cc <hci_send_req>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	da01      	bge.n	800d174 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d170:	23ff      	movs	r3, #255	@ 0xff
 800d172:	e02e      	b.n	800d1d2 <aci_gap_init+0x150>
  if ( resp.Status )
 800d174:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d178:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d005      	beq.n	800d18e <aci_gap_init+0x10c>
    return resp.Status;
 800d182:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d186:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	e021      	b.n	800d1d2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d18e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d192:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d196:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1a0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d1a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1ac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1b0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d1ba:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d1bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1c0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1c4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d1ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd90      	pop	{r4, r7, pc}

0800d1dc <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b0cc      	sub	sp, #304	@ 0x130
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1e8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d1ec:	6019      	str	r1, [r3, #0]
 800d1ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1f2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d1f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d1f8:	f107 0310 	add.w	r3, r7, #16
 800d1fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d200:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d204:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d208:	2200      	movs	r2, #0
 800d20a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d212:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d216:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d21a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d21e:	7812      	ldrb	r2, [r2, #0]
 800d220:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d222:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d226:	3301      	adds	r3, #1
 800d228:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d22c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d230:	1c58      	adds	r0, r3, #1
 800d232:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d236:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d23a:	781a      	ldrb	r2, [r3, #0]
 800d23c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d240:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d244:	6819      	ldr	r1, [r3, #0]
 800d246:	f000 fda8 	bl	800dd9a <Osal_MemCpy>
  index_input += AdvDataLen;
 800d24a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d24e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d258:	4413      	add	r3, r2
 800d25a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d25e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d262:	2218      	movs	r2, #24
 800d264:	2100      	movs	r1, #0
 800d266:	4618      	mov	r0, r3
 800d268:	f000 fda7 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d26c:	233f      	movs	r3, #63	@ 0x3f
 800d26e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800d272:	238e      	movs	r3, #142	@ 0x8e
 800d274:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d278:	f107 0310 	add.w	r3, r7, #16
 800d27c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d280:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d284:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d288:	f107 030f 	add.w	r3, r7, #15
 800d28c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d290:	2301      	movs	r3, #1
 800d292:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d29a:	2100      	movs	r1, #0
 800d29c:	4618      	mov	r0, r3
 800d29e:	f001 f815 	bl	800e2cc <hci_send_req>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	da01      	bge.n	800d2ac <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d2a8:	23ff      	movs	r3, #255	@ 0xff
 800d2aa:	e004      	b.n	800d2b6 <aci_gap_update_adv_data+0xda>
  return status;
 800d2ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d2b4:	781b      	ldrb	r3, [r3, #0]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b088      	sub	sp, #32
 800d2c4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d2ca:	f107 0308 	add.w	r3, r7, #8
 800d2ce:	2218      	movs	r2, #24
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 fd71 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d2d8:	233f      	movs	r3, #63	@ 0x3f
 800d2da:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d2dc:	2392      	movs	r3, #146	@ 0x92
 800d2de:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d2e0:	1dfb      	adds	r3, r7, #7
 800d2e2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2e8:	f107 0308 	add.w	r3, r7, #8
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 ffec 	bl	800e2cc <hci_send_req>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	da01      	bge.n	800d2fe <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d2fa:	23ff      	movs	r3, #255	@ 0xff
 800d2fc:	e000      	b.n	800d300 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d2fe:	79fb      	ldrb	r3, [r7, #7]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3720      	adds	r7, #32
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b0cc      	sub	sp, #304	@ 0x130
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	4602      	mov	r2, r0
 800d310:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d314:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d318:	801a      	strh	r2, [r3, #0]
 800d31a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d31e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d322:	460a      	mov	r2, r1
 800d324:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d326:	f107 0310 	add.w	r3, r7, #16
 800d32a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d32e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d332:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d336:	2200      	movs	r2, #0
 800d338:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d340:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d344:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d348:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d34c:	8812      	ldrh	r2, [r2, #0]
 800d34e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d350:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d354:	3302      	adds	r3, #2
 800d356:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d35a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d35e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d362:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d366:	7812      	ldrb	r2, [r2, #0]
 800d368:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d36a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d36e:	3301      	adds	r3, #1
 800d370:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d374:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d378:	2218      	movs	r2, #24
 800d37a:	2100      	movs	r1, #0
 800d37c:	4618      	mov	r0, r3
 800d37e:	f000 fd1c 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d382:	233f      	movs	r3, #63	@ 0x3f
 800d384:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800d388:	23a5      	movs	r3, #165	@ 0xa5
 800d38a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d38e:	f107 0310 	add.w	r3, r7, #16
 800d392:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d396:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d39a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d39e:	f107 030f 	add.w	r3, r7, #15
 800d3a2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 ff8a 	bl	800e2cc <hci_send_req>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	da01      	bge.n	800d3c2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800d3be:	23ff      	movs	r3, #255	@ 0xff
 800d3c0:	e004      	b.n	800d3cc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800d3c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d3ca:	781b      	ldrb	r3, [r3, #0]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b088      	sub	sp, #32
 800d3da:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3e0:	f107 0308 	add.w	r3, r7, #8
 800d3e4:	2218      	movs	r2, #24
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f000 fce6 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3ee:	233f      	movs	r3, #63	@ 0x3f
 800d3f0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d3f2:	f240 1301 	movw	r3, #257	@ 0x101
 800d3f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d3f8:	1dfb      	adds	r3, r7, #7
 800d3fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d400:	f107 0308 	add.w	r3, r7, #8
 800d404:	2100      	movs	r1, #0
 800d406:	4618      	mov	r0, r3
 800d408:	f000 ff60 	bl	800e2cc <hci_send_req>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	da01      	bge.n	800d416 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d412:	23ff      	movs	r3, #255	@ 0xff
 800d414:	e000      	b.n	800d418 <aci_gatt_init+0x42>
  return status;
 800d416:	79fb      	ldrb	r3, [r7, #7]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3720      	adds	r7, #32
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d420:	b590      	push	{r4, r7, lr}
 800d422:	b0cf      	sub	sp, #316	@ 0x13c
 800d424:	af00      	add	r7, sp, #0
 800d426:	4604      	mov	r4, r0
 800d428:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800d42c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d430:	6001      	str	r1, [r0, #0]
 800d432:	4610      	mov	r0, r2
 800d434:	4619      	mov	r1, r3
 800d436:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d43a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d43e:	4622      	mov	r2, r4
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d446:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d44a:	4602      	mov	r2, r0
 800d44c:	701a      	strb	r2, [r3, #0]
 800d44e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d452:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d456:	460a      	mov	r2, r1
 800d458:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d45a:	f107 0310 	add.w	r3, r7, #16
 800d45e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d462:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d466:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d00a      	beq.n	800d486 <aci_gatt_add_service+0x66>
 800d470:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d474:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d101      	bne.n	800d482 <aci_gatt_add_service+0x62>
 800d47e:	2311      	movs	r3, #17
 800d480:	e002      	b.n	800d488 <aci_gatt_add_service+0x68>
 800d482:	2301      	movs	r3, #1
 800d484:	e000      	b.n	800d488 <aci_gatt_add_service+0x68>
 800d486:	2303      	movs	r3, #3
 800d488:	f107 0210 	add.w	r2, r7, #16
 800d48c:	4413      	add	r3, r2
 800d48e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d492:	f107 030c 	add.w	r3, r7, #12
 800d496:	2203      	movs	r2, #3
 800d498:	2100      	movs	r1, #0
 800d49a:	4618      	mov	r0, r3
 800d49c:	f000 fc8d 	bl	800ddba <Osal_MemSet>
  int index_input = 0;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d4a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d4aa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d4ae:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d4b2:	7812      	ldrb	r2, [r2, #0]
 800d4b4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d4b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d4c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d4c4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d002      	beq.n	800d4d4 <aci_gatt_add_service+0xb4>
 800d4ce:	2b02      	cmp	r3, #2
 800d4d0:	d004      	beq.n	800d4dc <aci_gatt_add_service+0xbc>
 800d4d2:	e007      	b.n	800d4e4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d4d4:	2302      	movs	r3, #2
 800d4d6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d4da:	e005      	b.n	800d4e8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d4dc:	2310      	movs	r3, #16
 800d4de:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d4e2:	e001      	b.n	800d4e8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d4e4:	2397      	movs	r3, #151	@ 0x97
 800d4e6:	e06c      	b.n	800d5c2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d4e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d4ec:	1c58      	adds	r0, r3, #1
 800d4ee:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800d4f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d4f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d4fa:	6819      	ldr	r1, [r3, #0]
 800d4fc:	f000 fc4d 	bl	800dd9a <Osal_MemCpy>
    index_input += size;
 800d500:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800d504:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d508:	4413      	add	r3, r2
 800d50a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800d50e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d512:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d516:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d51a:	7812      	ldrb	r2, [r2, #0]
 800d51c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d51e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d522:	3301      	adds	r3, #1
 800d524:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d528:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d52c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d530:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d534:	7812      	ldrb	r2, [r2, #0]
 800d536:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d538:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d53c:	3301      	adds	r3, #1
 800d53e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d542:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d546:	2218      	movs	r2, #24
 800d548:	2100      	movs	r1, #0
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 fc35 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d550:	233f      	movs	r3, #63	@ 0x3f
 800d552:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800d556:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800d55a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d55e:	f107 0310 	add.w	r3, r7, #16
 800d562:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d566:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d56a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d56e:	f107 030c 	add.w	r3, r7, #12
 800d572:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d576:	2303      	movs	r3, #3
 800d578:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d57c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d580:	2100      	movs	r1, #0
 800d582:	4618      	mov	r0, r3
 800d584:	f000 fea2 	bl	800e2cc <hci_send_req>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	da01      	bge.n	800d592 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d58e:	23ff      	movs	r3, #255	@ 0xff
 800d590:	e017      	b.n	800d5c2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d592:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d596:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d005      	beq.n	800d5ac <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d5a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	e00a      	b.n	800d5c2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d5ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d5be:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd90      	pop	{r4, r7, pc}

0800d5cc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d5cc:	b590      	push	{r4, r7, lr}
 800d5ce:	b0d1      	sub	sp, #324	@ 0x144
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	4608      	mov	r0, r1
 800d5d6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d5da:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d5de:	600a      	str	r2, [r1, #0]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d5e6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d5ea:	4622      	mov	r2, r4
 800d5ec:	801a      	strh	r2, [r3, #0]
 800d5ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d5f2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	701a      	strb	r2, [r3, #0]
 800d5fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d5fe:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800d602:	460a      	mov	r2, r1
 800d604:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d606:	f107 0318 	add.w	r3, r7, #24
 800d60a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d60e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d612:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d00a      	beq.n	800d632 <aci_gatt_add_char+0x66>
 800d61c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d620:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b02      	cmp	r3, #2
 800d628:	d101      	bne.n	800d62e <aci_gatt_add_char+0x62>
 800d62a:	2313      	movs	r3, #19
 800d62c:	e002      	b.n	800d634 <aci_gatt_add_char+0x68>
 800d62e:	2303      	movs	r3, #3
 800d630:	e000      	b.n	800d634 <aci_gatt_add_char+0x68>
 800d632:	2305      	movs	r3, #5
 800d634:	f107 0218 	add.w	r2, r7, #24
 800d638:	4413      	add	r3, r2
 800d63a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d63e:	f107 0314 	add.w	r3, r7, #20
 800d642:	2203      	movs	r2, #3
 800d644:	2100      	movs	r1, #0
 800d646:	4618      	mov	r0, r3
 800d648:	f000 fbb7 	bl	800ddba <Osal_MemSet>
  int index_input = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800d652:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d656:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d65a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d65e:	8812      	ldrh	r2, [r2, #0]
 800d660:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d662:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d666:	3302      	adds	r3, #2
 800d668:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d66c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d670:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d674:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d678:	7812      	ldrb	r2, [r2, #0]
 800d67a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d67c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d680:	3301      	adds	r3, #1
 800d682:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d686:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d68a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	2b01      	cmp	r3, #1
 800d692:	d002      	beq.n	800d69a <aci_gatt_add_char+0xce>
 800d694:	2b02      	cmp	r3, #2
 800d696:	d004      	beq.n	800d6a2 <aci_gatt_add_char+0xd6>
 800d698:	e007      	b.n	800d6aa <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d69a:	2302      	movs	r3, #2
 800d69c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d6a0:	e005      	b.n	800d6ae <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d6a2:	2310      	movs	r3, #16
 800d6a4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d6a8:	e001      	b.n	800d6ae <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d6aa:	2397      	movs	r3, #151	@ 0x97
 800d6ac:	e091      	b.n	800d7d2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d6ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d6b2:	1cd8      	adds	r0, r3, #3
 800d6b4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800d6b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6bc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d6c0:	6819      	ldr	r1, [r3, #0]
 800d6c2:	f000 fb6a 	bl	800dd9a <Osal_MemCpy>
    index_input += size;
 800d6c6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d6ca:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d6ce:	4413      	add	r3, r2
 800d6d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d6d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d6d8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d6dc:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800d6e0:	8812      	ldrh	r2, [r2, #0]
 800d6e2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d6e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d6e8:	3302      	adds	r3, #2
 800d6ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d6ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d6f2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d6f6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d6f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d702:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d706:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d70a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d70c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d710:	3301      	adds	r3, #1
 800d712:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d716:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d71a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d71e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d720:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d724:	3301      	adds	r3, #1
 800d726:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d72a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d72e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d732:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d734:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d738:	3301      	adds	r3, #1
 800d73a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d73e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d742:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d746:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d748:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d74c:	3301      	adds	r3, #1
 800d74e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d752:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d756:	2218      	movs	r2, #24
 800d758:	2100      	movs	r1, #0
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 fb2d 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d760:	233f      	movs	r3, #63	@ 0x3f
 800d762:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d766:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d76a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800d76e:	f107 0318 	add.w	r3, r7, #24
 800d772:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800d776:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d77a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800d77e:	f107 0314 	add.w	r3, r7, #20
 800d782:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800d786:	2303      	movs	r3, #3
 800d788:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d78c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d790:	2100      	movs	r1, #0
 800d792:	4618      	mov	r0, r3
 800d794:	f000 fd9a 	bl	800e2cc <hci_send_req>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	da01      	bge.n	800d7a2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d79e:	23ff      	movs	r3, #255	@ 0xff
 800d7a0:	e017      	b.n	800d7d2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d7a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d005      	beq.n	800d7bc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d7b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	e00a      	b.n	800d7d2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d7bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800d7ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d7d0:	2300      	movs	r3, #0
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd90      	pop	{r4, r7, pc}

0800d7dc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d7dc:	b5b0      	push	{r4, r5, r7, lr}
 800d7de:	b0cc      	sub	sp, #304	@ 0x130
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	4605      	mov	r5, r0
 800d7e4:	460c      	mov	r4, r1
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d7ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d7f2:	462a      	mov	r2, r5
 800d7f4:	801a      	strh	r2, [r3, #0]
 800d7f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d7fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7fe:	4622      	mov	r2, r4
 800d800:	801a      	strh	r2, [r3, #0]
 800d802:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d806:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800d80a:	4602      	mov	r2, r0
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d812:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d816:	460a      	mov	r2, r1
 800d818:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d81a:	f107 0310 	add.w	r3, r7, #16
 800d81e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d822:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d826:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d82a:	2200      	movs	r2, #0
 800d82c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d82e:	2300      	movs	r3, #0
 800d830:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800d834:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d838:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d83c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d840:	8812      	ldrh	r2, [r2, #0]
 800d842:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d848:	3302      	adds	r3, #2
 800d84a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800d84e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d852:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d856:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d85a:	8812      	ldrh	r2, [r2, #0]
 800d85c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d85e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d862:	3302      	adds	r3, #2
 800d864:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800d868:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d86c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d870:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800d874:	7812      	ldrb	r2, [r2, #0]
 800d876:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d87c:	3301      	adds	r3, #1
 800d87e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d882:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d886:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d88a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800d88e:	7812      	ldrb	r2, [r2, #0]
 800d890:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d892:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d896:	3301      	adds	r3, #1
 800d898:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d89c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8a0:	1d98      	adds	r0, r3, #6
 800d8a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8a6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d8b2:	f000 fa72 	bl	800dd9a <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d8b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8ba:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d8c4:	4413      	add	r3, r2
 800d8c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d8ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d8ce:	2218      	movs	r2, #24
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 fa71 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d8d8:	233f      	movs	r3, #63	@ 0x3f
 800d8da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800d8de:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800d8e2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d8e6:	f107 0310 	add.w	r3, r7, #16
 800d8ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d8ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d8f6:	f107 030f 	add.w	r3, r7, #15
 800d8fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d8fe:	2301      	movs	r3, #1
 800d900:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d904:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d908:	2100      	movs	r1, #0
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 fcde 	bl	800e2cc <hci_send_req>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	da01      	bge.n	800d91a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d916:	23ff      	movs	r3, #255	@ 0xff
 800d918:	e004      	b.n	800d924 <aci_gatt_update_char_value+0x148>
  return status;
 800d91a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d91e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d922:	781b      	ldrb	r3, [r3, #0]
}
 800d924:	4618      	mov	r0, r3
 800d926:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bdb0      	pop	{r4, r5, r7, pc}

0800d92e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b0cc      	sub	sp, #304	@ 0x130
 800d932:	af00      	add	r7, sp, #0
 800d934:	4602      	mov	r2, r0
 800d936:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d93a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d93e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800d940:	f107 0310 	add.w	r3, r7, #16
 800d944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d948:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d94c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d950:	2200      	movs	r2, #0
 800d952:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d954:	2300      	movs	r3, #0
 800d956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d95a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d95e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d962:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d966:	8812      	ldrh	r2, [r2, #0]
 800d968:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d96a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d96e:	3302      	adds	r3, #2
 800d970:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d974:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d978:	2218      	movs	r2, #24
 800d97a:	2100      	movs	r1, #0
 800d97c:	4618      	mov	r0, r3
 800d97e:	f000 fa1c 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800d982:	233f      	movs	r3, #63	@ 0x3f
 800d984:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800d988:	f240 1325 	movw	r3, #293	@ 0x125
 800d98c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d990:	f107 0310 	add.w	r3, r7, #16
 800d994:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d998:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d99c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d9a0:	f107 030f 	add.w	r3, r7, #15
 800d9a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d9ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 fc89 	bl	800e2cc <hci_send_req>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	da01      	bge.n	800d9c4 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800d9c0:	23ff      	movs	r3, #255	@ 0xff
 800d9c2:	e004      	b.n	800d9ce <aci_gatt_confirm_indication+0xa0>
  return status;
 800d9c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d9cc:	781b      	ldrb	r3, [r3, #0]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b0cc      	sub	sp, #304	@ 0x130
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d9e6:	601a      	str	r2, [r3, #0]
 800d9e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9ec:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	701a      	strb	r2, [r3, #0]
 800d9f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9f8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d9fc:	460a      	mov	r2, r1
 800d9fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800da00:	f107 0310 	add.w	r3, r7, #16
 800da04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800da08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da10:	2200      	movs	r2, #0
 800da12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800da1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da22:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800da26:	7812      	ldrb	r2, [r2, #0]
 800da28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800da2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da2e:	3301      	adds	r3, #1
 800da30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800da34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da3c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800da40:	7812      	ldrb	r2, [r2, #0]
 800da42:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800da44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da48:	3301      	adds	r3, #1
 800da4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800da4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da52:	1c98      	adds	r0, r3, #2
 800da54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da58:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800da5c:	781a      	ldrb	r2, [r3, #0]
 800da5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800da66:	6819      	ldr	r1, [r3, #0]
 800da68:	f000 f997 	bl	800dd9a <Osal_MemCpy>
  index_input += Length;
 800da6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da70:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800da7a:	4413      	add	r3, r2
 800da7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800da80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da84:	2218      	movs	r2, #24
 800da86:	2100      	movs	r1, #0
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 f996 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800da8e:	233f      	movs	r3, #63	@ 0x3f
 800da90:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800da94:	230c      	movs	r3, #12
 800da96:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800da9a:	f107 0310 	add.w	r3, r7, #16
 800da9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800daa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800daa6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800daaa:	f107 030f 	add.w	r3, r7, #15
 800daae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dab2:	2301      	movs	r3, #1
 800dab4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dab8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dabc:	2100      	movs	r1, #0
 800dabe:	4618      	mov	r0, r3
 800dac0:	f000 fc04 	bl	800e2cc <hci_send_req>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	da01      	bge.n	800dace <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800daca:	23ff      	movs	r3, #255	@ 0xff
 800dacc:	e004      	b.n	800dad8 <aci_hal_write_config_data+0x100>
  return status;
 800dace:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dad2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dad6:	781b      	ldrb	r3, [r3, #0]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b0cc      	sub	sp, #304	@ 0x130
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	4602      	mov	r2, r0
 800daea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800daee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800daf2:	701a      	strb	r2, [r3, #0]
 800daf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800daf8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dafc:	460a      	mov	r2, r1
 800dafe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800db00:	f107 0310 	add.w	r3, r7, #16
 800db04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800db08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800db10:	2200      	movs	r2, #0
 800db12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800db14:	2300      	movs	r3, #0
 800db16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800db1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db22:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800db26:	7812      	ldrb	r2, [r2, #0]
 800db28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800db2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db2e:	3301      	adds	r3, #1
 800db30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800db34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db3c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800db40:	7812      	ldrb	r2, [r2, #0]
 800db42:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800db44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db48:	3301      	adds	r3, #1
 800db4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db52:	2218      	movs	r2, #24
 800db54:	2100      	movs	r1, #0
 800db56:	4618      	mov	r0, r3
 800db58:	f000 f92f 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800db5c:	233f      	movs	r3, #63	@ 0x3f
 800db5e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800db62:	230f      	movs	r3, #15
 800db64:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800db68:	f107 0310 	add.w	r3, r7, #16
 800db6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800db70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800db78:	f107 030f 	add.w	r3, r7, #15
 800db7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800db80:	2301      	movs	r3, #1
 800db82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db8a:	2100      	movs	r1, #0
 800db8c:	4618      	mov	r0, r3
 800db8e:	f000 fb9d 	bl	800e2cc <hci_send_req>
 800db92:	4603      	mov	r3, r0
 800db94:	2b00      	cmp	r3, #0
 800db96:	da01      	bge.n	800db9c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800db98:	23ff      	movs	r3, #255	@ 0xff
 800db9a:	e004      	b.n	800dba6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800db9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dba0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dba4:	781b      	ldrb	r3, [r3, #0]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b0cc      	sub	sp, #304	@ 0x130
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbbc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dbc0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800dbc2:	f107 0310 	add.w	r3, r7, #16
 800dbc6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dbca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800dbdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dbe0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dbe4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dbe8:	8812      	ldrh	r2, [r2, #0]
 800dbea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dbec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbf0:	3302      	adds	r3, #2
 800dbf2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dbf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbfa:	2218      	movs	r2, #24
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 f8db 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc04:	233f      	movs	r3, #63	@ 0x3f
 800dc06:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800dc0a:	2318      	movs	r3, #24
 800dc0c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dc10:	f107 0310 	add.w	r3, r7, #16
 800dc14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dc18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc1c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dc20:	f107 030f 	add.w	r3, r7, #15
 800dc24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc32:	2100      	movs	r1, #0
 800dc34:	4618      	mov	r0, r3
 800dc36:	f000 fb49 	bl	800e2cc <hci_send_req>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	da01      	bge.n	800dc44 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800dc40:	23ff      	movs	r3, #255	@ 0xff
 800dc42:	e004      	b.n	800dc4e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800dc44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc48:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc4c:	781b      	ldrb	r3, [r3, #0]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b088      	sub	sp, #32
 800dc5c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc62:	f107 0308 	add.w	r3, r7, #8
 800dc66:	2218      	movs	r2, #24
 800dc68:	2100      	movs	r1, #0
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 f8a5 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x03;
 800dc70:	2303      	movs	r3, #3
 800dc72:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800dc74:	2303      	movs	r3, #3
 800dc76:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dc78:	1dfb      	adds	r3, r7, #7
 800dc7a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc80:	f107 0308 	add.w	r3, r7, #8
 800dc84:	2100      	movs	r1, #0
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 fb20 	bl	800e2cc <hci_send_req>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	da01      	bge.n	800dc96 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800dc92:	23ff      	movs	r3, #255	@ 0xff
 800dc94:	e000      	b.n	800dc98 <hci_reset+0x40>
  return status;
 800dc96:	79fb      	ldrb	r3, [r7, #7]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3720      	adds	r7, #32
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800dca0:	b590      	push	{r4, r7, lr}
 800dca2:	b0cd      	sub	sp, #308	@ 0x134
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	4604      	mov	r4, r0
 800dca8:	4608      	mov	r0, r1
 800dcaa:	4611      	mov	r1, r2
 800dcac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcb0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dcb4:	4622      	mov	r2, r4
 800dcb6:	701a      	strb	r2, [r3, #0]
 800dcb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcbc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	701a      	strb	r2, [r3, #0]
 800dcc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcc8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800dccc:	460a      	mov	r2, r1
 800dcce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800dcd0:	f107 0310 	add.w	r3, r7, #16
 800dcd4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dcd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcdc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dce4:	2300      	movs	r3, #0
 800dce6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800dcea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dcee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dcf2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dcf6:	7812      	ldrb	r2, [r2, #0]
 800dcf8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dcfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dcfe:	3301      	adds	r3, #1
 800dd00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800dd04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd0c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dd10:	7812      	ldrb	r2, [r2, #0]
 800dd12:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dd14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd18:	3301      	adds	r3, #1
 800dd1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800dd1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd26:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800dd2a:	7812      	ldrb	r2, [r2, #0]
 800dd2c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dd2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd32:	3301      	adds	r3, #1
 800dd34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd3c:	2218      	movs	r2, #24
 800dd3e:	2100      	movs	r1, #0
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 f83a 	bl	800ddba <Osal_MemSet>
  rq.ogf = 0x08;
 800dd46:	2308      	movs	r3, #8
 800dd48:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800dd4c:	2331      	movs	r3, #49	@ 0x31
 800dd4e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dd52:	f107 0310 	add.w	r3, r7, #16
 800dd56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dd5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dd62:	f107 030f 	add.w	r3, r7, #15
 800dd66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd74:	2100      	movs	r1, #0
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 faa8 	bl	800e2cc <hci_send_req>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	da01      	bge.n	800dd86 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800dd82:	23ff      	movs	r3, #255	@ 0xff
 800dd84:	e004      	b.n	800dd90 <hci_le_set_default_phy+0xf0>
  return status;
 800dd86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd8a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd8e:	781b      	ldrb	r3, [r3, #0]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd90      	pop	{r4, r7, pc}

0800dd9a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b084      	sub	sp, #16
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	60f8      	str	r0, [r7, #12]
 800dda2:	60b9      	str	r1, [r7, #8]
 800dda4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	68b9      	ldr	r1, [r7, #8]
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f004 fa1d 	bl	80121ea <memcpy>
 800ddb0:	4603      	mov	r3, r0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	60f8      	str	r0, [r7, #12]
 800ddc2:	60b9      	str	r1, [r7, #8]
 800ddc4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	68b9      	ldr	r1, [r7, #8]
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f004 f96c 	bl	80120a8 <memset>
 800ddd0:	4603      	mov	r3, r0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ddda:	b480      	push	{r7}
 800dddc:	af00      	add	r7, sp, #0
  return;
 800ddde:	bf00      	nop
}
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800dde8:	b480      	push	{r7}
 800ddea:	af00      	add	r7, sp, #0
  return;
 800ddec:	bf00      	nop
}
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr

0800ddf6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	af00      	add	r7, sp, #0
  return;
 800ddfa:	bf00      	nop
}
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800de04:	b480      	push	{r7}
 800de06:	af00      	add	r7, sp, #0
  return;
 800de08:	bf00      	nop
}
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800de12:	b480      	push	{r7}
 800de14:	af00      	add	r7, sp, #0
  return;
 800de16:	bf00      	nop
}
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800de20:	b480      	push	{r7}
 800de22:	af00      	add	r7, sp, #0
  return;
 800de24:	bf00      	nop
}
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr

0800de2e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800de2e:	b480      	push	{r7}
 800de30:	af00      	add	r7, sp, #0
  return;
 800de32:	bf00      	nop
}
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800de3c:	b480      	push	{r7}
 800de3e:	af00      	add	r7, sp, #0
  return;
 800de40:	bf00      	nop
}
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800de4a:	b480      	push	{r7}
 800de4c:	af00      	add	r7, sp, #0
  return;
 800de4e:	bf00      	nop
}
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800de58:	b480      	push	{r7}
 800de5a:	af00      	add	r7, sp, #0
  return;
 800de5c:	bf00      	nop
}
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr

0800de66 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800de66:	b480      	push	{r7}
 800de68:	af00      	add	r7, sp, #0
  return;
 800de6a:	bf00      	nop
}
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800de74:	b480      	push	{r7}
 800de76:	af00      	add	r7, sp, #0
  return;
 800de78:	bf00      	nop
}
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800de82:	b480      	push	{r7}
 800de84:	af00      	add	r7, sp, #0
  return;
 800de86:	bf00      	nop
}
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800de90:	b480      	push	{r7}
 800de92:	af00      	add	r7, sp, #0
  return;
 800de94:	bf00      	nop
}
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800de9e:	b480      	push	{r7}
 800dea0:	af00      	add	r7, sp, #0
  return;
 800dea2:	bf00      	nop
}
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800deac:	b480      	push	{r7}
 800deae:	af00      	add	r7, sp, #0
  return;
 800deb0:	bf00      	nop
}
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr

0800deba <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800deba:	b480      	push	{r7}
 800debc:	af00      	add	r7, sp, #0
  return;
 800debe:	bf00      	nop
}
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800decc:	4b04      	ldr	r3, [pc, #16]	@ (800dee0 <SVCCTL_Init+0x18>)
 800dece:	2200      	movs	r2, #0
 800ded0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ded2:	4b04      	ldr	r3, [pc, #16]	@ (800dee4 <SVCCTL_Init+0x1c>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ded8:	f000 f806 	bl	800dee8 <SVCCTL_SvcInit>

  return;
 800dedc:	bf00      	nop
}
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	20000200 	.word	0x20000200
 800dee4:	20000220 	.word	0x20000220

0800dee8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	af00      	add	r7, sp, #0
  BAS_Init();
 800deec:	f7ff ff75 	bl	800ddda <BAS_Init>

  BLS_Init();
 800def0:	f7ff ff7a 	bl	800dde8 <BLS_Init>

  CRS_STM_Init();
 800def4:	f7ff ff7f 	bl	800ddf6 <CRS_STM_Init>

  DIS_Init();
 800def8:	f7ff ff84 	bl	800de04 <DIS_Init>

  EDS_STM_Init();
 800defc:	f7ff ff89 	bl	800de12 <EDS_STM_Init>

  HIDS_Init();
 800df00:	f7ff ff8e 	bl	800de20 <HIDS_Init>

  HRS_Init();
 800df04:	f7ff ff93 	bl	800de2e <HRS_Init>

  HTS_Init();
 800df08:	f7ff ff98 	bl	800de3c <HTS_Init>

  IAS_Init();
 800df0c:	f7ff ff9d 	bl	800de4a <IAS_Init>

  LLS_Init();
 800df10:	f7ff ffa2 	bl	800de58 <LLS_Init>

  TPS_Init();
 800df14:	f7ff ffa7 	bl	800de66 <TPS_Init>

  MOTENV_STM_Init();
 800df18:	f7ff ffac 	bl	800de74 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800df1c:	f7ff ffb1 	bl	800de82 <P2PS_STM_Init>

  ZDD_STM_Init();
 800df20:	f7ff ffb6 	bl	800de90 <ZDD_STM_Init>

  OTAS_STM_Init();
 800df24:	f7ff ffbb 	bl	800de9e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800df28:	f7ff ffc7 	bl	800deba <BVOPUS_STM_Init>

  MESH_Init();
 800df2c:	f7ff ffbe 	bl	800deac <MESH_Init>

  SVCCTL_InitCustomSvc();
 800df30:	f001 fbc6 	bl	800f6c0 <SVCCTL_InitCustomSvc>
  
  return;
 800df34:	bf00      	nop
}
 800df36:	bd80      	pop	{r7, pc}

0800df38 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800df40:	4b09      	ldr	r3, [pc, #36]	@ (800df68 <SVCCTL_RegisterSvcHandler+0x30>)
 800df42:	7f1b      	ldrb	r3, [r3, #28]
 800df44:	4619      	mov	r1, r3
 800df46:	4a08      	ldr	r2, [pc, #32]	@ (800df68 <SVCCTL_RegisterSvcHandler+0x30>)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800df4e:	4b06      	ldr	r3, [pc, #24]	@ (800df68 <SVCCTL_RegisterSvcHandler+0x30>)
 800df50:	7f1b      	ldrb	r3, [r3, #28]
 800df52:	3301      	adds	r3, #1
 800df54:	b2da      	uxtb	r2, r3
 800df56:	4b04      	ldr	r3, [pc, #16]	@ (800df68 <SVCCTL_RegisterSvcHandler+0x30>)
 800df58:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800df5a:	bf00      	nop
}
 800df5c:	370c      	adds	r7, #12
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	20000200 	.word	0x20000200

0800df6c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b086      	sub	sp, #24
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	3301      	adds	r3, #1
 800df78:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800df7a:	2300      	movs	r3, #0
 800df7c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	2bff      	cmp	r3, #255	@ 0xff
 800df84:	d125      	bne.n	800dfd2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	3302      	adds	r3, #2
 800df8a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	881b      	ldrh	r3, [r3, #0]
 800df90:	b29b      	uxth	r3, r3
 800df92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800df96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800df9a:	d118      	bne.n	800dfce <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800df9c:	2300      	movs	r3, #0
 800df9e:	757b      	strb	r3, [r7, #21]
 800dfa0:	e00d      	b.n	800dfbe <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800dfa2:	7d7b      	ldrb	r3, [r7, #21]
 800dfa4:	4a1a      	ldr	r2, [pc, #104]	@ (800e010 <SVCCTL_UserEvtRx+0xa4>)
 800dfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	4798      	blx	r3
 800dfae:	4603      	mov	r3, r0
 800dfb0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800dfb2:	7dfb      	ldrb	r3, [r7, #23]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d108      	bne.n	800dfca <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800dfb8:	7d7b      	ldrb	r3, [r7, #21]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	757b      	strb	r3, [r7, #21]
 800dfbe:	4b14      	ldr	r3, [pc, #80]	@ (800e010 <SVCCTL_UserEvtRx+0xa4>)
 800dfc0:	7f1b      	ldrb	r3, [r3, #28]
 800dfc2:	7d7a      	ldrb	r2, [r7, #21]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d3ec      	bcc.n	800dfa2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800dfc8:	e002      	b.n	800dfd0 <SVCCTL_UserEvtRx+0x64>
              break;
 800dfca:	bf00      	nop
          break;
 800dfcc:	e000      	b.n	800dfd0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800dfce:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800dfd0:	e000      	b.n	800dfd4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800dfd2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800dfd4:	7dfb      	ldrb	r3, [r7, #23]
 800dfd6:	2b02      	cmp	r3, #2
 800dfd8:	d00f      	beq.n	800dffa <SVCCTL_UserEvtRx+0x8e>
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	dc10      	bgt.n	800e000 <SVCCTL_UserEvtRx+0x94>
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d002      	beq.n	800dfe8 <SVCCTL_UserEvtRx+0x7c>
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d006      	beq.n	800dff4 <SVCCTL_UserEvtRx+0x88>
 800dfe6:	e00b      	b.n	800e000 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fffb 	bl	800efe4 <SVCCTL_App_Notification>
 800dfee:	4603      	mov	r3, r0
 800dff0:	75bb      	strb	r3, [r7, #22]
      break;
 800dff2:	e008      	b.n	800e006 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800dff4:	2301      	movs	r3, #1
 800dff6:	75bb      	strb	r3, [r7, #22]
      break;
 800dff8:	e005      	b.n	800e006 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800dffa:	2300      	movs	r3, #0
 800dffc:	75bb      	strb	r3, [r7, #22]
      break;
 800dffe:	e002      	b.n	800e006 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e000:	2301      	movs	r3, #1
 800e002:	75bb      	strb	r3, [r7, #22]
      break;
 800e004:	bf00      	nop
  }

  return (return_status);
 800e006:	7dbb      	ldrb	r3, [r7, #22]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3718      	adds	r7, #24
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	20000200 	.word	0x20000200

0800e014 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b088      	sub	sp, #32
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e01c:	f107 030c 	add.w	r3, r7, #12
 800e020:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	212e      	movs	r1, #46	@ 0x2e
 800e02c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800e030:	f000 fae8 	bl	800e604 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	330b      	adds	r3, #11
 800e038:	78db      	ldrb	r3, [r3, #3]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3720      	adds	r7, #32
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b088      	sub	sp, #32
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e04a:	f107 030c 	add.w	r3, r7, #12
 800e04e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	210f      	movs	r1, #15
 800e05a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800e05e:	f000 fad1 	bl	800e604 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	330b      	adds	r3, #11
 800e066:	78db      	ldrb	r3, [r3, #3]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3720      	adds	r7, #32
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b088      	sub	sp, #32
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e078:	f107 030c 	add.w	r3, r7, #12
 800e07c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	2110      	movs	r1, #16
 800e084:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800e088:	f000 fabc 	bl	800e604 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	330b      	adds	r3, #11
 800e090:	78db      	ldrb	r3, [r3, #3]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3720      	adds	r7, #32
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
	...

0800e09c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e09c:	b480      	push	{r7}
 800e09e:	b08b      	sub	sp, #44	@ 0x2c
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e0c4:	4b4a      	ldr	r3, [pc, #296]	@ (800e1f0 <SHCI_GetWirelessFwInfo+0x154>)
 800e0c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0cc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e0d6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a44      	ldr	r2, [pc, #272]	@ (800e1f4 <SHCI_GetWirelessFwInfo+0x158>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d10f      	bne.n	800e108 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	695b      	ldr	r3, [r3, #20]
 800e0ec:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	69db      	ldr	r3, [r3, #28]
 800e0f8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	691b      	ldr	r3, [r3, #16]
 800e104:	617b      	str	r3, [r7, #20]
 800e106:	e01a      	b.n	800e13e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e110:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e114:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	691b      	ldr	r3, [r3, #16]
 800e11c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	695b      	ldr	r3, [r3, #20]
 800e124:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	699b      	ldr	r3, [r3, #24]
 800e12c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e140:	0e1b      	lsrs	r3, r3, #24
 800e142:	b2da      	uxtb	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14a:	0c1b      	lsrs	r3, r3, #16
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e154:	0a1b      	lsrs	r3, r3, #8
 800e156:	b2da      	uxtb	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15e:	091b      	lsrs	r3, r3, #4
 800e160:	b2db      	uxtb	r3, r3
 800e162:	f003 030f 	and.w	r3, r3, #15
 800e166:	b2da      	uxtb	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	f003 030f 	and.w	r3, r3, #15
 800e174:	b2da      	uxtb	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e17a:	6a3b      	ldr	r3, [r7, #32]
 800e17c:	0e1b      	lsrs	r3, r3, #24
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	0c1b      	lsrs	r3, r3, #16
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e18e:	6a3b      	ldr	r3, [r7, #32]
 800e190:	0a1b      	lsrs	r3, r3, #8
 800e192:	b2da      	uxtb	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e198:	6a3b      	ldr	r3, [r7, #32]
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	0e1b      	lsrs	r3, r3, #24
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	0c1b      	lsrs	r3, r3, #16
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	0a1b      	lsrs	r3, r3, #8
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	0e1b      	lsrs	r3, r3, #24
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	0c1b      	lsrs	r3, r3, #16
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e1e2:	2300      	movs	r3, #0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	372c      	adds	r7, #44	@ 0x2c
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr
 800e1f0:	58004000 	.word	0x58004000
 800e1f4:	a94656b9 	.word	0xa94656b9

0800e1f8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	4a08      	ldr	r2, [pc, #32]	@ (800e228 <hci_init+0x30>)
 800e208:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e20a:	4a08      	ldr	r2, [pc, #32]	@ (800e22c <hci_init+0x34>)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e210:	4806      	ldr	r0, [pc, #24]	@ (800e22c <hci_init+0x34>)
 800e212:	f000 f979 	bl	800e508 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f000 f8da 	bl	800e3d4 <TlInit>

  return;
 800e220:	bf00      	nop
}
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	2000086c 	.word	0x2000086c
 800e22c:	20000844 	.word	0x20000844

0800e230 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e236:	4822      	ldr	r0, [pc, #136]	@ (800e2c0 <hci_user_evt_proc+0x90>)
 800e238:	f000 fda8 	bl	800ed8c <LST_is_empty>
 800e23c:	4603      	mov	r3, r0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d12b      	bne.n	800e29a <hci_user_evt_proc+0x6a>
 800e242:	4b20      	ldr	r3, [pc, #128]	@ (800e2c4 <hci_user_evt_proc+0x94>)
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d027      	beq.n	800e29a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e24a:	f107 030c 	add.w	r3, r7, #12
 800e24e:	4619      	mov	r1, r3
 800e250:	481b      	ldr	r0, [pc, #108]	@ (800e2c0 <hci_user_evt_proc+0x90>)
 800e252:	f000 fe2a 	bl	800eeaa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e256:	4b1c      	ldr	r3, [pc, #112]	@ (800e2c8 <hci_user_evt_proc+0x98>)
 800e258:	69db      	ldr	r3, [r3, #28]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00c      	beq.n	800e278 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e262:	2301      	movs	r3, #1
 800e264:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e266:	4b18      	ldr	r3, [pc, #96]	@ (800e2c8 <hci_user_evt_proc+0x98>)
 800e268:	69db      	ldr	r3, [r3, #28]
 800e26a:	1d3a      	adds	r2, r7, #4
 800e26c:	4610      	mov	r0, r2
 800e26e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e270:	793a      	ldrb	r2, [r7, #4]
 800e272:	4b14      	ldr	r3, [pc, #80]	@ (800e2c4 <hci_user_evt_proc+0x94>)
 800e274:	701a      	strb	r2, [r3, #0]
 800e276:	e002      	b.n	800e27e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e278:	4b12      	ldr	r3, [pc, #72]	@ (800e2c4 <hci_user_evt_proc+0x94>)
 800e27a:	2201      	movs	r2, #1
 800e27c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e27e:	4b11      	ldr	r3, [pc, #68]	@ (800e2c4 <hci_user_evt_proc+0x94>)
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d004      	beq.n	800e290 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	4618      	mov	r0, r3
 800e28a:	f000 fc0d 	bl	800eaa8 <TL_MM_EvtDone>
 800e28e:	e004      	b.n	800e29a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	4619      	mov	r1, r3
 800e294:	480a      	ldr	r0, [pc, #40]	@ (800e2c0 <hci_user_evt_proc+0x90>)
 800e296:	f000 fd9b 	bl	800edd0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e29a:	4809      	ldr	r0, [pc, #36]	@ (800e2c0 <hci_user_evt_proc+0x90>)
 800e29c:	f000 fd76 	bl	800ed8c <LST_is_empty>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d107      	bne.n	800e2b6 <hci_user_evt_proc+0x86>
 800e2a6:	4b07      	ldr	r3, [pc, #28]	@ (800e2c4 <hci_user_evt_proc+0x94>)
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d003      	beq.n	800e2b6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e2ae:	4804      	ldr	r0, [pc, #16]	@ (800e2c0 <hci_user_evt_proc+0x90>)
 800e2b0:	f001 f8be 	bl	800f430 <hci_notify_asynch_evt>
  }


  return;
 800e2b4:	bf00      	nop
 800e2b6:	bf00      	nop
}
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	20000228 	.word	0x20000228
 800e2c4:	20000234 	.word	0x20000234
 800e2c8:	20000844 	.word	0x20000844

0800e2cc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b088      	sub	sp, #32
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e2d8:	2000      	movs	r0, #0
 800e2da:	f000 f8d1 	bl	800e480 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	885b      	ldrh	r3, [r3, #2]
 800e2e6:	b21b      	sxth	r3, r3
 800e2e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2ec:	b21a      	sxth	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	881b      	ldrh	r3, [r3, #0]
 800e2f2:	029b      	lsls	r3, r3, #10
 800e2f4:	b21b      	sxth	r3, r3
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	b21b      	sxth	r3, r3
 800e2fa:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e2fc:	4b33      	ldr	r3, [pc, #204]	@ (800e3cc <hci_send_req+0x100>)
 800e2fe:	2201      	movs	r2, #1
 800e300:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	b2d9      	uxtb	r1, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	689a      	ldr	r2, [r3, #8]
 800e30c:	8bbb      	ldrh	r3, [r7, #28]
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 f890 	bl	800e434 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e314:	e04e      	b.n	800e3b4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e316:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e31a:	f001 f8a0 	bl	800f45e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e31e:	e043      	b.n	800e3a8 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e320:	f107 030c 	add.w	r3, r7, #12
 800e324:	4619      	mov	r1, r3
 800e326:	482a      	ldr	r0, [pc, #168]	@ (800e3d0 <hci_send_req+0x104>)
 800e328:	f000 fdbf 	bl	800eeaa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	7a5b      	ldrb	r3, [r3, #9]
 800e330:	2b0f      	cmp	r3, #15
 800e332:	d114      	bne.n	800e35e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	330b      	adds	r3, #11
 800e338:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	885b      	ldrh	r3, [r3, #2]
 800e33e:	b29b      	uxth	r3, r3
 800e340:	8bba      	ldrh	r2, [r7, #28]
 800e342:	429a      	cmp	r2, r3
 800e344:	d104      	bne.n	800e350 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	693a      	ldr	r2, [r7, #16]
 800e34c:	7812      	ldrb	r2, [r2, #0]
 800e34e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	785b      	ldrb	r3, [r3, #1]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d027      	beq.n	800e3a8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e358:	2301      	movs	r3, #1
 800e35a:	77fb      	strb	r3, [r7, #31]
 800e35c:	e024      	b.n	800e3a8 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	330b      	adds	r3, #11
 800e362:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	8bba      	ldrh	r2, [r7, #28]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d114      	bne.n	800e39c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	7a9b      	ldrb	r3, [r3, #10]
 800e376:	3b03      	subs	r3, #3
 800e378:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	695a      	ldr	r2, [r3, #20]
 800e37e:	7dfb      	ldrb	r3, [r7, #23]
 800e380:	429a      	cmp	r2, r3
 800e382:	bfa8      	it	ge
 800e384:	461a      	movge	r2, r3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6918      	ldr	r0, [r3, #16]
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	1cd9      	adds	r1, r3, #3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	695b      	ldr	r3, [r3, #20]
 800e396:	461a      	mov	r2, r3
 800e398:	f003 ff27 	bl	80121ea <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d001      	beq.n	800e3a8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e3a8:	4809      	ldr	r0, [pc, #36]	@ (800e3d0 <hci_send_req+0x104>)
 800e3aa:	f000 fcef 	bl	800ed8c <LST_is_empty>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d0b5      	beq.n	800e320 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e3b4:	7ffb      	ldrb	r3, [r7, #31]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d0ad      	beq.n	800e316 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e3ba:	2001      	movs	r0, #1
 800e3bc:	f000 f860 	bl	800e480 <NotifyCmdStatus>

  return 0;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3720      	adds	r7, #32
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	20000870 	.word	0x20000870
 800e3d0:	20000864 	.word	0x20000864

0800e3d4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b086      	sub	sp, #24
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e3dc:	480f      	ldr	r0, [pc, #60]	@ (800e41c <TlInit+0x48>)
 800e3de:	f000 fcc5 	bl	800ed6c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e3e2:	4a0f      	ldr	r2, [pc, #60]	@ (800e420 <TlInit+0x4c>)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e3e8:	480e      	ldr	r0, [pc, #56]	@ (800e424 <TlInit+0x50>)
 800e3ea:	f000 fcbf 	bl	800ed6c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e428 <TlInit+0x54>)
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e3f4:	4b0d      	ldr	r3, [pc, #52]	@ (800e42c <TlInit+0x58>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00a      	beq.n	800e412 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e400:	4b0b      	ldr	r3, [pc, #44]	@ (800e430 <TlInit+0x5c>)
 800e402:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e404:	4b09      	ldr	r3, [pc, #36]	@ (800e42c <TlInit+0x58>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f107 0208 	add.w	r2, r7, #8
 800e40c:	4610      	mov	r0, r2
 800e40e:	4798      	blx	r3
  }

  return;
 800e410:	bf00      	nop
 800e412:	bf00      	nop
}
 800e414:	3718      	adds	r7, #24
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	20000864 	.word	0x20000864
 800e420:	20000230 	.word	0x20000230
 800e424:	20000228 	.word	0x20000228
 800e428:	20000234 	.word	0x20000234
 800e42c:	20000844 	.word	0x20000844
 800e430:	0800e4c1 	.word	0x0800e4c1

0800e434 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	4603      	mov	r3, r0
 800e43c:	603a      	str	r2, [r7, #0]
 800e43e:	80fb      	strh	r3, [r7, #6]
 800e440:	460b      	mov	r3, r1
 800e442:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e444:	4b0c      	ldr	r3, [pc, #48]	@ (800e478 <SendCmd+0x44>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	88fa      	ldrh	r2, [r7, #6]
 800e44a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e44e:	4b0a      	ldr	r3, [pc, #40]	@ (800e478 <SendCmd+0x44>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	797a      	ldrb	r2, [r7, #5]
 800e454:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e456:	4b08      	ldr	r3, [pc, #32]	@ (800e478 <SendCmd+0x44>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	330c      	adds	r3, #12
 800e45c:	797a      	ldrb	r2, [r7, #5]
 800e45e:	6839      	ldr	r1, [r7, #0]
 800e460:	4618      	mov	r0, r3
 800e462:	f003 fec2 	bl	80121ea <memcpy>

  hciContext.io.Send(0,0);
 800e466:	4b05      	ldr	r3, [pc, #20]	@ (800e47c <SendCmd+0x48>)
 800e468:	691b      	ldr	r3, [r3, #16]
 800e46a:	2100      	movs	r1, #0
 800e46c:	2000      	movs	r0, #0
 800e46e:	4798      	blx	r3

  return;
 800e470:	bf00      	nop
}
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20000230 	.word	0x20000230
 800e47c:	20000844 	.word	0x20000844

0800e480 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	4603      	mov	r3, r0
 800e488:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e48a:	79fb      	ldrb	r3, [r7, #7]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d108      	bne.n	800e4a2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e490:	4b0a      	ldr	r3, [pc, #40]	@ (800e4bc <NotifyCmdStatus+0x3c>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00d      	beq.n	800e4b4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e498:	4b08      	ldr	r3, [pc, #32]	@ (800e4bc <NotifyCmdStatus+0x3c>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2000      	movs	r0, #0
 800e49e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e4a0:	e008      	b.n	800e4b4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e4a2:	4b06      	ldr	r3, [pc, #24]	@ (800e4bc <NotifyCmdStatus+0x3c>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d004      	beq.n	800e4b4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e4aa:	4b04      	ldr	r3, [pc, #16]	@ (800e4bc <NotifyCmdStatus+0x3c>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2001      	movs	r0, #1
 800e4b0:	4798      	blx	r3
  return;
 800e4b2:	bf00      	nop
 800e4b4:	bf00      	nop
}
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	2000086c 	.word	0x2000086c

0800e4c0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	7a5b      	ldrb	r3, [r3, #9]
 800e4cc:	2b0f      	cmp	r3, #15
 800e4ce:	d003      	beq.n	800e4d8 <TlEvtReceived+0x18>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	7a5b      	ldrb	r3, [r3, #9]
 800e4d4:	2b0e      	cmp	r3, #14
 800e4d6:	d107      	bne.n	800e4e8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e4d8:	6879      	ldr	r1, [r7, #4]
 800e4da:	4809      	ldr	r0, [pc, #36]	@ (800e500 <TlEvtReceived+0x40>)
 800e4dc:	f000 fc9e 	bl	800ee1c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	f000 ffb1 	bl	800f448 <hci_cmd_resp_release>
 800e4e6:	e006      	b.n	800e4f6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e4e8:	6879      	ldr	r1, [r7, #4]
 800e4ea:	4806      	ldr	r0, [pc, #24]	@ (800e504 <TlEvtReceived+0x44>)
 800e4ec:	f000 fc96 	bl	800ee1c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e4f0:	4804      	ldr	r0, [pc, #16]	@ (800e504 <TlEvtReceived+0x44>)
 800e4f2:	f000 ff9d 	bl	800f430 <hci_notify_asynch_evt>
  }

  return;
 800e4f6:	bf00      	nop
}
 800e4f8:	3708      	adds	r7, #8
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	20000864 	.word	0x20000864
 800e504:	20000228 	.word	0x20000228

0800e508 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	4a05      	ldr	r2, [pc, #20]	@ (800e528 <hci_register_io_bus+0x20>)
 800e514:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4a04      	ldr	r2, [pc, #16]	@ (800e52c <hci_register_io_bus+0x24>)
 800e51a:	611a      	str	r2, [r3, #16]

  return;
 800e51c:	bf00      	nop
}
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	0800e821 	.word	0x0800e821
 800e52c:	0800e889 	.word	0x0800e889

0800e530 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	4a08      	ldr	r2, [pc, #32]	@ (800e560 <shci_init+0x30>)
 800e540:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e542:	4a08      	ldr	r2, [pc, #32]	@ (800e564 <shci_init+0x34>)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e548:	4806      	ldr	r0, [pc, #24]	@ (800e564 <shci_init+0x34>)
 800e54a:	f000 f915 	bl	800e778 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4618      	mov	r0, r3
 800e554:	f000 f898 	bl	800e688 <TlInit>

  return;
 800e558:	bf00      	nop
}
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	20000894 	.word	0x20000894
 800e564:	20000874 	.word	0x20000874

0800e568 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e56e:	4822      	ldr	r0, [pc, #136]	@ (800e5f8 <shci_user_evt_proc+0x90>)
 800e570:	f000 fc0c 	bl	800ed8c <LST_is_empty>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d12b      	bne.n	800e5d2 <shci_user_evt_proc+0x6a>
 800e57a:	4b20      	ldr	r3, [pc, #128]	@ (800e5fc <shci_user_evt_proc+0x94>)
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d027      	beq.n	800e5d2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e582:	f107 030c 	add.w	r3, r7, #12
 800e586:	4619      	mov	r1, r3
 800e588:	481b      	ldr	r0, [pc, #108]	@ (800e5f8 <shci_user_evt_proc+0x90>)
 800e58a:	f000 fc8e 	bl	800eeaa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e58e:	4b1c      	ldr	r3, [pc, #112]	@ (800e600 <shci_user_evt_proc+0x98>)
 800e590:	69db      	ldr	r3, [r3, #28]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00c      	beq.n	800e5b0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e59a:	2301      	movs	r3, #1
 800e59c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e59e:	4b18      	ldr	r3, [pc, #96]	@ (800e600 <shci_user_evt_proc+0x98>)
 800e5a0:	69db      	ldr	r3, [r3, #28]
 800e5a2:	1d3a      	adds	r2, r7, #4
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e5a8:	793a      	ldrb	r2, [r7, #4]
 800e5aa:	4b14      	ldr	r3, [pc, #80]	@ (800e5fc <shci_user_evt_proc+0x94>)
 800e5ac:	701a      	strb	r2, [r3, #0]
 800e5ae:	e002      	b.n	800e5b6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e5b0:	4b12      	ldr	r3, [pc, #72]	@ (800e5fc <shci_user_evt_proc+0x94>)
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e5b6:	4b11      	ldr	r3, [pc, #68]	@ (800e5fc <shci_user_evt_proc+0x94>)
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d004      	beq.n	800e5c8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 fa71 	bl	800eaa8 <TL_MM_EvtDone>
 800e5c6:	e004      	b.n	800e5d2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	480a      	ldr	r0, [pc, #40]	@ (800e5f8 <shci_user_evt_proc+0x90>)
 800e5ce:	f000 fbff 	bl	800edd0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e5d2:	4809      	ldr	r0, [pc, #36]	@ (800e5f8 <shci_user_evt_proc+0x90>)
 800e5d4:	f000 fbda 	bl	800ed8c <LST_is_empty>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d107      	bne.n	800e5ee <shci_user_evt_proc+0x86>
 800e5de:	4b07      	ldr	r3, [pc, #28]	@ (800e5fc <shci_user_evt_proc+0x94>)
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d003      	beq.n	800e5ee <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e5e6:	4804      	ldr	r0, [pc, #16]	@ (800e5f8 <shci_user_evt_proc+0x90>)
 800e5e8:	f7f4 fcab 	bl	8002f42 <shci_notify_asynch_evt>
  }


  return;
 800e5ec:	bf00      	nop
 800e5ee:	bf00      	nop
}
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	20000238 	.word	0x20000238
 800e5fc:	20000248 	.word	0x20000248
 800e600:	20000874 	.word	0x20000874

0800e604 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60ba      	str	r2, [r7, #8]
 800e60c:	607b      	str	r3, [r7, #4]
 800e60e:	4603      	mov	r3, r0
 800e610:	81fb      	strh	r3, [r7, #14]
 800e612:	460b      	mov	r3, r1
 800e614:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e616:	2000      	movs	r0, #0
 800e618:	f000 f868 	bl	800e6ec <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e61c:	4b17      	ldr	r3, [pc, #92]	@ (800e67c <shci_send+0x78>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	89fa      	ldrh	r2, [r7, #14]
 800e622:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e626:	4b15      	ldr	r3, [pc, #84]	@ (800e67c <shci_send+0x78>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	7b7a      	ldrb	r2, [r7, #13]
 800e62c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e62e:	4b13      	ldr	r3, [pc, #76]	@ (800e67c <shci_send+0x78>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	330c      	adds	r3, #12
 800e634:	7b7a      	ldrb	r2, [r7, #13]
 800e636:	68b9      	ldr	r1, [r7, #8]
 800e638:	4618      	mov	r0, r3
 800e63a:	f003 fdd6 	bl	80121ea <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e63e:	4b10      	ldr	r3, [pc, #64]	@ (800e680 <shci_send+0x7c>)
 800e640:	2201      	movs	r2, #1
 800e642:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e644:	4b0f      	ldr	r3, [pc, #60]	@ (800e684 <shci_send+0x80>)
 800e646:	691b      	ldr	r3, [r3, #16]
 800e648:	2100      	movs	r1, #0
 800e64a:	2000      	movs	r0, #0
 800e64c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e64e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e652:	f7f4 fc8d 	bl	8002f70 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f103 0008 	add.w	r0, r3, #8
 800e65c:	4b07      	ldr	r3, [pc, #28]	@ (800e67c <shci_send+0x78>)
 800e65e:	6819      	ldr	r1, [r3, #0]
 800e660:	4b06      	ldr	r3, [pc, #24]	@ (800e67c <shci_send+0x78>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	789b      	ldrb	r3, [r3, #2]
 800e666:	3303      	adds	r3, #3
 800e668:	461a      	mov	r2, r3
 800e66a:	f003 fdbe 	bl	80121ea <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e66e:	2001      	movs	r0, #1
 800e670:	f000 f83c 	bl	800e6ec <Cmd_SetStatus>

  return;
 800e674:	bf00      	nop
}
 800e676:	3710      	adds	r7, #16
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	20000244 	.word	0x20000244
 800e680:	20000898 	.word	0x20000898
 800e684:	20000874 	.word	0x20000874

0800e688 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e690:	4a10      	ldr	r2, [pc, #64]	@ (800e6d4 <TlInit+0x4c>)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e696:	4810      	ldr	r0, [pc, #64]	@ (800e6d8 <TlInit+0x50>)
 800e698:	f000 fb68 	bl	800ed6c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e69c:	2001      	movs	r0, #1
 800e69e:	f000 f825 	bl	800e6ec <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e6a2:	4b0e      	ldr	r3, [pc, #56]	@ (800e6dc <TlInit+0x54>)
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e6a8:	4b0d      	ldr	r3, [pc, #52]	@ (800e6e0 <TlInit+0x58>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00c      	beq.n	800e6ca <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e6b4:	4b0b      	ldr	r3, [pc, #44]	@ (800e6e4 <TlInit+0x5c>)
 800e6b6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e6e8 <TlInit+0x60>)
 800e6ba:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e6bc:	4b08      	ldr	r3, [pc, #32]	@ (800e6e0 <TlInit+0x58>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f107 020c 	add.w	r2, r7, #12
 800e6c4:	4610      	mov	r0, r2
 800e6c6:	4798      	blx	r3
  }

  return;
 800e6c8:	bf00      	nop
 800e6ca:	bf00      	nop
}
 800e6cc:	3718      	adds	r7, #24
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20000244 	.word	0x20000244
 800e6d8:	20000238 	.word	0x20000238
 800e6dc:	20000248 	.word	0x20000248
 800e6e0:	20000874 	.word	0x20000874
 800e6e4:	0800e73d 	.word	0x0800e73d
 800e6e8:	0800e755 	.word	0x0800e755

0800e6ec <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e6f6:	79fb      	ldrb	r3, [r7, #7]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10b      	bne.n	800e714 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e6fc:	4b0d      	ldr	r3, [pc, #52]	@ (800e734 <Cmd_SetStatus+0x48>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d003      	beq.n	800e70c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e704:	4b0b      	ldr	r3, [pc, #44]	@ (800e734 <Cmd_SetStatus+0x48>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2000      	movs	r0, #0
 800e70a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e70c:	4b0a      	ldr	r3, [pc, #40]	@ (800e738 <Cmd_SetStatus+0x4c>)
 800e70e:	2200      	movs	r2, #0
 800e710:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e712:	e00b      	b.n	800e72c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e714:	4b08      	ldr	r3, [pc, #32]	@ (800e738 <Cmd_SetStatus+0x4c>)
 800e716:	2201      	movs	r2, #1
 800e718:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e71a:	4b06      	ldr	r3, [pc, #24]	@ (800e734 <Cmd_SetStatus+0x48>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d004      	beq.n	800e72c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e722:	4b04      	ldr	r3, [pc, #16]	@ (800e734 <Cmd_SetStatus+0x48>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2001      	movs	r0, #1
 800e728:	4798      	blx	r3
  return;
 800e72a:	bf00      	nop
 800e72c:	bf00      	nop
}
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	20000894 	.word	0x20000894
 800e738:	20000240 	.word	0x20000240

0800e73c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e744:	2000      	movs	r0, #0
 800e746:	f7f4 fc08 	bl	8002f5a <shci_cmd_resp_release>

  return;
 800e74a:	bf00      	nop
}
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
	...

0800e754 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e75c:	6879      	ldr	r1, [r7, #4]
 800e75e:	4805      	ldr	r0, [pc, #20]	@ (800e774 <TlUserEvtReceived+0x20>)
 800e760:	f000 fb5c 	bl	800ee1c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e764:	4803      	ldr	r0, [pc, #12]	@ (800e774 <TlUserEvtReceived+0x20>)
 800e766:	f7f4 fbec 	bl	8002f42 <shci_notify_asynch_evt>

  return;
 800e76a:	bf00      	nop
}
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	20000238 	.word	0x20000238

0800e778 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4a05      	ldr	r2, [pc, #20]	@ (800e798 <shci_register_io_bus+0x20>)
 800e784:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4a04      	ldr	r2, [pc, #16]	@ (800e79c <shci_register_io_bus+0x24>)
 800e78a:	611a      	str	r2, [r3, #16]

  return;
 800e78c:	bf00      	nop
}
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr
 800e798:	0800e935 	.word	0x0800e935
 800e79c:	0800e989 	.word	0x0800e989

0800e7a0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e7a4:	f001 f978 	bl	800fa98 <HW_IPCC_Enable>

  return;
 800e7a8:	bf00      	nop
}
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <TL_Init>:


void TL_Init( void )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e7b0:	4b10      	ldr	r3, [pc, #64]	@ (800e7f4 <TL_Init+0x48>)
 800e7b2:	4a11      	ldr	r2, [pc, #68]	@ (800e7f8 <TL_Init+0x4c>)
 800e7b4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e7b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e7f4 <TL_Init+0x48>)
 800e7b8:	4a10      	ldr	r2, [pc, #64]	@ (800e7fc <TL_Init+0x50>)
 800e7ba:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e7f4 <TL_Init+0x48>)
 800e7be:	4a10      	ldr	r2, [pc, #64]	@ (800e800 <TL_Init+0x54>)
 800e7c0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e7c2:	4b0c      	ldr	r3, [pc, #48]	@ (800e7f4 <TL_Init+0x48>)
 800e7c4:	4a0f      	ldr	r2, [pc, #60]	@ (800e804 <TL_Init+0x58>)
 800e7c6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e7c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f4 <TL_Init+0x48>)
 800e7ca:	4a0f      	ldr	r2, [pc, #60]	@ (800e808 <TL_Init+0x5c>)
 800e7cc:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e7ce:	4b09      	ldr	r3, [pc, #36]	@ (800e7f4 <TL_Init+0x48>)
 800e7d0:	4a0e      	ldr	r2, [pc, #56]	@ (800e80c <TL_Init+0x60>)
 800e7d2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e7d4:	4b07      	ldr	r3, [pc, #28]	@ (800e7f4 <TL_Init+0x48>)
 800e7d6:	4a0e      	ldr	r2, [pc, #56]	@ (800e810 <TL_Init+0x64>)
 800e7d8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e7da:	4b06      	ldr	r3, [pc, #24]	@ (800e7f4 <TL_Init+0x48>)
 800e7dc:	4a0d      	ldr	r2, [pc, #52]	@ (800e814 <TL_Init+0x68>)
 800e7de:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e7e0:	4b04      	ldr	r3, [pc, #16]	@ (800e7f4 <TL_Init+0x48>)
 800e7e2:	4a0d      	ldr	r2, [pc, #52]	@ (800e818 <TL_Init+0x6c>)
 800e7e4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e7e6:	4b03      	ldr	r3, [pc, #12]	@ (800e7f4 <TL_Init+0x48>)
 800e7e8:	4a0c      	ldr	r2, [pc, #48]	@ (800e81c <TL_Init+0x70>)
 800e7ea:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e7ec:	f001 f968 	bl	800fac0 <HW_IPCC_Init>

  return;
 800e7f0:	bf00      	nop
}
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	20030000 	.word	0x20030000
 800e7f8:	20030028 	.word	0x20030028
 800e7fc:	20030048 	.word	0x20030048
 800e800:	20030058 	.word	0x20030058
 800e804:	20030068 	.word	0x20030068
 800e808:	20030070 	.word	0x20030070
 800e80c:	20030078 	.word	0x20030078
 800e810:	20030080 	.word	0x20030080
 800e814:	2003009c 	.word	0x2003009c
 800e818:	200300a0 	.word	0x200300a0
 800e81c:	200300ac 	.word	0x200300ac

0800e820 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e82c:	4811      	ldr	r0, [pc, #68]	@ (800e874 <TL_BLE_Init+0x54>)
 800e82e:	f000 fa9d 	bl	800ed6c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e832:	4b11      	ldr	r3, [pc, #68]	@ (800e878 <TL_BLE_Init+0x58>)
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	689a      	ldr	r2, [r3, #8]
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	68da      	ldr	r2, [r3, #12]
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	4a0c      	ldr	r2, [pc, #48]	@ (800e87c <TL_BLE_Init+0x5c>)
 800e84c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	4a08      	ldr	r2, [pc, #32]	@ (800e874 <TL_BLE_Init+0x54>)
 800e852:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e854:	f001 f94a 	bl	800faec <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4a08      	ldr	r2, [pc, #32]	@ (800e880 <TL_BLE_Init+0x60>)
 800e85e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	4a07      	ldr	r2, [pc, #28]	@ (800e884 <TL_BLE_Init+0x64>)
 800e866:	6013      	str	r3, [r2, #0]

  return 0;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	200300c8 	.word	0x200300c8
 800e878:	20030000 	.word	0x20030000
 800e87c:	20030a58 	.word	0x20030a58
 800e880:	200008a4 	.word	0x200008a4
 800e884:	200008a8 	.word	0x200008a8

0800e888 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e894:	4b09      	ldr	r3, [pc, #36]	@ (800e8bc <TL_BLE_SendCmd+0x34>)
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2201      	movs	r2, #1
 800e89c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e89e:	4b07      	ldr	r3, [pc, #28]	@ (800e8bc <TL_BLE_SendCmd+0x34>)
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	2001      	movs	r0, #1
 800e8a8:	f000 f96c 	bl	800eb84 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e8ac:	f001 f928 	bl	800fb00 <HW_IPCC_BLE_SendCmd>

  return 0;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20030000 	.word	0x20030000

0800e8c0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e8c6:	e01c      	b.n	800e902 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e8c8:	1d3b      	adds	r3, r7, #4
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	4812      	ldr	r0, [pc, #72]	@ (800e918 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e8ce:	f000 faec 	bl	800eeaa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	7a5b      	ldrb	r3, [r3, #9]
 800e8d6:	2b0f      	cmp	r3, #15
 800e8d8:	d003      	beq.n	800e8e2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	7a5b      	ldrb	r3, [r3, #9]
 800e8de:	2b0e      	cmp	r3, #14
 800e8e0:	d105      	bne.n	800e8ee <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	2002      	movs	r0, #2
 800e8e8:	f000 f94c 	bl	800eb84 <OutputDbgTrace>
 800e8ec:	e004      	b.n	800e8f8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	2003      	movs	r0, #3
 800e8f4:	f000 f946 	bl	800eb84 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e8f8:	4b08      	ldr	r3, [pc, #32]	@ (800e91c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	4610      	mov	r0, r2
 800e900:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e902:	4805      	ldr	r0, [pc, #20]	@ (800e918 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e904:	f000 fa42 	bl	800ed8c <LST_is_empty>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d0dc      	beq.n	800e8c8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e90e:	bf00      	nop
}
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	200300c8 	.word	0x200300c8
 800e91c:	200008a4 	.word	0x200008a4

0800e920 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e924:	4b02      	ldr	r3, [pc, #8]	@ (800e930 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4798      	blx	r3

  return;
 800e92a:	bf00      	nop
}
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	200008a8 	.word	0x200008a8

0800e934 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e940:	480d      	ldr	r0, [pc, #52]	@ (800e978 <TL_SYS_Init+0x44>)
 800e942:	f000 fa13 	bl	800ed6c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e946:	4b0d      	ldr	r3, [pc, #52]	@ (800e97c <TL_SYS_Init+0x48>)
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	689a      	ldr	r2, [r3, #8]
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	4a08      	ldr	r2, [pc, #32]	@ (800e978 <TL_SYS_Init+0x44>)
 800e958:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e95a:	f001 f8f3 	bl	800fb44 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a07      	ldr	r2, [pc, #28]	@ (800e980 <TL_SYS_Init+0x4c>)
 800e964:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	4a06      	ldr	r2, [pc, #24]	@ (800e984 <TL_SYS_Init+0x50>)
 800e96c:	6013      	str	r3, [r2, #0]

  return 0;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	200300d0 	.word	0x200300d0
 800e97c:	20030000 	.word	0x20030000
 800e980:	200008ac 	.word	0x200008ac
 800e984:	200008b0 	.word	0x200008b0

0800e988 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	460b      	mov	r3, r1
 800e992:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e994:	4b09      	ldr	r3, [pc, #36]	@ (800e9bc <TL_SYS_SendCmd+0x34>)
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2210      	movs	r2, #16
 800e99c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e99e:	4b07      	ldr	r3, [pc, #28]	@ (800e9bc <TL_SYS_SendCmd+0x34>)
 800e9a0:	68db      	ldr	r3, [r3, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	2004      	movs	r0, #4
 800e9a8:	f000 f8ec 	bl	800eb84 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e9ac:	f001 f8d4 	bl	800fb58 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20030000 	.word	0x20030000

0800e9c0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e9c4:	4b07      	ldr	r3, [pc, #28]	@ (800e9e4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	2005      	movs	r0, #5
 800e9ce:	f000 f8d9 	bl	800eb84 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e9d2:	4b05      	ldr	r3, [pc, #20]	@ (800e9e8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a03      	ldr	r2, [pc, #12]	@ (800e9e4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e9d8:	68d2      	ldr	r2, [r2, #12]
 800e9da:	6812      	ldr	r2, [r2, #0]
 800e9dc:	4610      	mov	r0, r2
 800e9de:	4798      	blx	r3

  return;
 800e9e0:	bf00      	nop
}
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	20030000 	.word	0x20030000
 800e9e8:	200008ac 	.word	0x200008ac

0800e9ec <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e9f2:	e00e      	b.n	800ea12 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e9f4:	1d3b      	adds	r3, r7, #4
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	480b      	ldr	r0, [pc, #44]	@ (800ea28 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e9fa:	f000 fa56 	bl	800eeaa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	4619      	mov	r1, r3
 800ea02:	2006      	movs	r0, #6
 800ea04:	f000 f8be 	bl	800eb84 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ea08:	4b08      	ldr	r3, [pc, #32]	@ (800ea2c <HW_IPCC_SYS_EvtNot+0x40>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	4610      	mov	r0, r2
 800ea10:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ea12:	4805      	ldr	r0, [pc, #20]	@ (800ea28 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ea14:	f000 f9ba 	bl	800ed8c <LST_is_empty>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d0ea      	beq.n	800e9f4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ea1e:	bf00      	nop
}
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	200300d0 	.word	0x200300d0
 800ea2c:	200008b0 	.word	0x200008b0

0800ea30 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ea38:	4817      	ldr	r0, [pc, #92]	@ (800ea98 <TL_MM_Init+0x68>)
 800ea3a:	f000 f997 	bl	800ed6c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ea3e:	4817      	ldr	r0, [pc, #92]	@ (800ea9c <TL_MM_Init+0x6c>)
 800ea40:	f000 f994 	bl	800ed6c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ea44:	4b16      	ldr	r3, [pc, #88]	@ (800eaa0 <TL_MM_Init+0x70>)
 800ea46:	691b      	ldr	r3, [r3, #16]
 800ea48:	4a16      	ldr	r2, [pc, #88]	@ (800eaa4 <TL_MM_Init+0x74>)
 800ea4a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ea4c:	4b15      	ldr	r3, [pc, #84]	@ (800eaa4 <TL_MM_Init+0x74>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	6892      	ldr	r2, [r2, #8]
 800ea54:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ea56:	4b13      	ldr	r3, [pc, #76]	@ (800eaa4 <TL_MM_Init+0x74>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	68d2      	ldr	r2, [r2, #12]
 800ea5e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ea60:	4b10      	ldr	r3, [pc, #64]	@ (800eaa4 <TL_MM_Init+0x74>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a0c      	ldr	r2, [pc, #48]	@ (800ea98 <TL_MM_Init+0x68>)
 800ea66:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ea68:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa4 <TL_MM_Init+0x74>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	6812      	ldr	r2, [r2, #0]
 800ea70:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ea72:	4b0c      	ldr	r3, [pc, #48]	@ (800eaa4 <TL_MM_Init+0x74>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	6852      	ldr	r2, [r2, #4]
 800ea7a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ea7c:	4b09      	ldr	r3, [pc, #36]	@ (800eaa4 <TL_MM_Init+0x74>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	6912      	ldr	r2, [r2, #16]
 800ea84:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ea86:	4b07      	ldr	r3, [pc, #28]	@ (800eaa4 <TL_MM_Init+0x74>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	6952      	ldr	r2, [r2, #20]
 800ea8e:	619a      	str	r2, [r3, #24]

  return;
 800ea90:	bf00      	nop
}
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	200300b8 	.word	0x200300b8
 800ea9c:	2000089c 	.word	0x2000089c
 800eaa0:	20030000 	.word	0x20030000
 800eaa4:	200008b4 	.word	0x200008b4

0800eaa8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800eab0:	6879      	ldr	r1, [r7, #4]
 800eab2:	4807      	ldr	r0, [pc, #28]	@ (800ead0 <TL_MM_EvtDone+0x28>)
 800eab4:	f000 f9b2 	bl	800ee1c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	2000      	movs	r0, #0
 800eabc:	f000 f862 	bl	800eb84 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800eac0:	4804      	ldr	r0, [pc, #16]	@ (800ead4 <TL_MM_EvtDone+0x2c>)
 800eac2:	f001 f86f 	bl	800fba4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800eac6:	bf00      	nop
}
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	2000089c 	.word	0x2000089c
 800ead4:	0800ead9 	.word	0x0800ead9

0800ead8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eade:	e00c      	b.n	800eafa <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800eae0:	1d3b      	adds	r3, r7, #4
 800eae2:	4619      	mov	r1, r3
 800eae4:	480a      	ldr	r0, [pc, #40]	@ (800eb10 <SendFreeBuf+0x38>)
 800eae6:	f000 f9e0 	bl	800eeaa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800eaea:	4b0a      	ldr	r3, [pc, #40]	@ (800eb14 <SendFreeBuf+0x3c>)
 800eaec:	691b      	ldr	r3, [r3, #16]
 800eaee:	691b      	ldr	r3, [r3, #16]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	4611      	mov	r1, r2
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f000 f991 	bl	800ee1c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eafa:	4805      	ldr	r0, [pc, #20]	@ (800eb10 <SendFreeBuf+0x38>)
 800eafc:	f000 f946 	bl	800ed8c <LST_is_empty>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d0ec      	beq.n	800eae0 <SendFreeBuf+0x8>
  }

  return;
 800eb06:	bf00      	nop
}
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	2000089c 	.word	0x2000089c
 800eb14:	20030000 	.word	0x20030000

0800eb18 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800eb1c:	4805      	ldr	r0, [pc, #20]	@ (800eb34 <TL_TRACES_Init+0x1c>)
 800eb1e:	f000 f925 	bl	800ed6c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800eb22:	4b05      	ldr	r3, [pc, #20]	@ (800eb38 <TL_TRACES_Init+0x20>)
 800eb24:	695b      	ldr	r3, [r3, #20]
 800eb26:	4a03      	ldr	r2, [pc, #12]	@ (800eb34 <TL_TRACES_Init+0x1c>)
 800eb28:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800eb2a:	f001 f871 	bl	800fc10 <HW_IPCC_TRACES_Init>

  return;
 800eb2e:	bf00      	nop
}
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	200300c0 	.word	0x200300c0
 800eb38:	20030000 	.word	0x20030000

0800eb3c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eb42:	e008      	b.n	800eb56 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800eb44:	1d3b      	adds	r3, r7, #4
 800eb46:	4619      	mov	r1, r3
 800eb48:	4808      	ldr	r0, [pc, #32]	@ (800eb6c <HW_IPCC_TRACES_EvtNot+0x30>)
 800eb4a:	f000 f9ae 	bl	800eeaa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4618      	mov	r0, r3
 800eb52:	f000 f80d 	bl	800eb70 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eb56:	4805      	ldr	r0, [pc, #20]	@ (800eb6c <HW_IPCC_TRACES_EvtNot+0x30>)
 800eb58:	f000 f918 	bl	800ed8c <LST_is_empty>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d0f0      	beq.n	800eb44 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800eb62:	bf00      	nop
}
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	200300c0 	.word	0x200300c0

0800eb70 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b085      	sub	sp, #20
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	6039      	str	r1, [r7, #0]
 800eb8e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	2b06      	cmp	r3, #6
 800eb94:	d845      	bhi.n	800ec22 <OutputDbgTrace+0x9e>
 800eb96:	a201      	add	r2, pc, #4	@ (adr r2, 800eb9c <OutputDbgTrace+0x18>)
 800eb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9c:	0800ebb9 	.word	0x0800ebb9
 800eba0:	0800ebdd 	.word	0x0800ebdd
 800eba4:	0800ebe3 	.word	0x0800ebe3
 800eba8:	0800ebf7 	.word	0x0800ebf7
 800ebac:	0800ec03 	.word	0x0800ec03
 800ebb0:	0800ec09 	.word	0x0800ec09
 800ebb4:	0800ec17 	.word	0x0800ec17
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	7a5b      	ldrb	r3, [r3, #9]
 800ebc0:	2bff      	cmp	r3, #255	@ 0xff
 800ebc2:	d005      	beq.n	800ebd0 <OutputDbgTrace+0x4c>
 800ebc4:	2bff      	cmp	r3, #255	@ 0xff
 800ebc6:	dc05      	bgt.n	800ebd4 <OutputDbgTrace+0x50>
 800ebc8:	2b0e      	cmp	r3, #14
 800ebca:	d005      	beq.n	800ebd8 <OutputDbgTrace+0x54>
 800ebcc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ebce:	e001      	b.n	800ebd4 <OutputDbgTrace+0x50>
          break;
 800ebd0:	bf00      	nop
 800ebd2:	e027      	b.n	800ec24 <OutputDbgTrace+0xa0>
          break;
 800ebd4:	bf00      	nop
 800ebd6:	e025      	b.n	800ec24 <OutputDbgTrace+0xa0>
          break;
 800ebd8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ebda:	e023      	b.n	800ec24 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ebe0:	e020      	b.n	800ec24 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	7a5b      	ldrb	r3, [r3, #9]
 800ebea:	2b0e      	cmp	r3, #14
 800ebec:	d001      	beq.n	800ebf2 <OutputDbgTrace+0x6e>
 800ebee:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ebf0:	e000      	b.n	800ebf4 <OutputDbgTrace+0x70>
          break;
 800ebf2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ebf4:	e016      	b.n	800ec24 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	7a5b      	ldrb	r3, [r3, #9]
 800ebfe:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec00:	e010      	b.n	800ec24 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ec06:	e00d      	b.n	800ec24 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	7a5b      	ldrb	r3, [r3, #9]
 800ec10:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ec12:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec14:	e006      	b.n	800ec24 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	7a5b      	ldrb	r3, [r3, #9]
 800ec1e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec20:	e000      	b.n	800ec24 <OutputDbgTrace+0xa0>

    default:
      break;
 800ec22:	bf00      	nop
  }

  return;
 800ec24:	bf00      	nop
}
 800ec26:	3714      	adds	r7, #20
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b085      	sub	sp, #20
 800ec34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec36:	f3ef 8310 	mrs	r3, PRIMASK
 800ec3a:	607b      	str	r3, [r7, #4]
  return(result);
 800ec3c:	687b      	ldr	r3, [r7, #4]
    DbgTracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }

#else
  BACKUP_PRIMASK();
 800ec3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec40:	b672      	cpsid	i
}
 800ec42:	bf00      	nop

  DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  DbgTracePeripheralReady = SET;
 800ec44:	4b07      	ldr	r3, [pc, #28]	@ (800ec64 <DbgTrace_TxCpltCallback+0x34>)
 800ec46:	2201      	movs	r2, #1
 800ec48:	701a      	strb	r2, [r3, #0]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	f383 8810 	msr	PRIMASK, r3
}
 800ec54:	bf00      	nop

  RESTORE_PRIMASK();
#endif
}
 800ec56:	bf00      	nop
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	2000001d 	.word	0x2000001d

0800ec68 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	af00      	add	r7, sp, #0
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ec6c:	f7f3 ff4f 	bl	8002b0e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
#endif 
#endif
  return;
 800ec70:	bf00      	nop
}
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	68b9      	ldr	r1, [r7, #8]
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f000 f805 	bl	800ec94 <DbgTraceWrite>
 800ec8a:	4603      	mov	r3, r0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b088      	sub	sp, #32
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800eca0:	2300      	movs	r3, #0
 800eca2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eca4:	f3ef 8310 	mrs	r3, PRIMASK
 800eca8:	617b      	str	r3, [r7, #20]
  return(result);
 800ecaa:	697b      	ldr	r3, [r7, #20]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ecac:	61bb      	str	r3, [r7, #24]

  /* Ignore flushes */
  if ( handle == -1 )
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb4:	d102      	bne.n	800ecbc <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	61fb      	str	r3, [r7, #28]
 800ecba:	e026      	b.n	800ed0a <DbgTraceWrite+0x76>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d006      	beq.n	800ecd0 <DbgTraceWrite+0x3c>
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d003      	beq.n	800ecd0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ecc8:	f04f 33ff 	mov.w	r3, #4294967295
 800eccc:	61fb      	str	r3, [r7, #28]
 800ecce:	e01c      	b.n	800ed0a <DbgTraceWrite+0x76>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d019      	beq.n	800ed0a <DbgTraceWrite+0x76>
  {
    chars_written = bufSize;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecda:	b672      	cpsid	i
}
 800ecdc:	bf00      	nop
    {
      RESTORE_PRIMASK();
    }
#else
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    DbgTracePeripheralReady = RESET;
 800ecde:	4b0d      	ldr	r3, [pc, #52]	@ (800ed14 <DbgTraceWrite+0x80>)
 800ece0:	2200      	movs	r2, #0
 800ece2:	701a      	strb	r2, [r3, #0]
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	f383 8810 	msr	PRIMASK, r3
}
 800ecee:	bf00      	nop
    RESTORE_PRIMASK();

    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	4a08      	ldr	r2, [pc, #32]	@ (800ed18 <DbgTraceWrite+0x84>)
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	68b8      	ldr	r0, [r7, #8]
 800ecfa:	f7f3 ff0e 	bl	8002b1a <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
 800ecfe:	bf00      	nop
 800ed00:	4b04      	ldr	r3, [pc, #16]	@ (800ed14 <DbgTraceWrite+0x80>)
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d0fa      	beq.n	800ed00 <DbgTraceWrite+0x6c>
#endif
    /* CS END */
  }
  return ( chars_written );
 800ed0a:	69fb      	ldr	r3, [r7, #28]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3720      	adds	r7, #32
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}
 800ed14:	2000001d 	.word	0x2000001d
 800ed18:	0800ec31 	.word	0x0800ec31

0800ed1c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ed26:	4b0f      	ldr	r3, [pc, #60]	@ (800ed64 <OTP_Read+0x48>)
 800ed28:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ed2a:	e002      	b.n	800ed32 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3b08      	subs	r3, #8
 800ed30:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	3307      	adds	r3, #7
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	79fa      	ldrb	r2, [r7, #7]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d003      	beq.n	800ed46 <OTP_Read+0x2a>
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	4a09      	ldr	r2, [pc, #36]	@ (800ed68 <OTP_Read+0x4c>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d1f2      	bne.n	800ed2c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	3307      	adds	r3, #7
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	79fa      	ldrb	r2, [r7, #7]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d001      	beq.n	800ed56 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ed52:	2300      	movs	r3, #0
 800ed54:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ed56:	68fb      	ldr	r3, [r7, #12]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3714      	adds	r7, #20
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr
 800ed64:	1fff73f8 	.word	0x1fff73f8
 800ed68:	1fff7000 	.word	0x1fff7000

0800ed6c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	605a      	str	r2, [r3, #4]
}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b087      	sub	sp, #28
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed94:	f3ef 8310 	mrs	r3, PRIMASK
 800ed98:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ed9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed9e:	b672      	cpsid	i
}
 800eda0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d102      	bne.n	800edb2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800edac:	2301      	movs	r3, #1
 800edae:	75fb      	strb	r3, [r7, #23]
 800edb0:	e001      	b.n	800edb6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800edb2:	2300      	movs	r3, #0
 800edb4:	75fb      	strb	r3, [r7, #23]
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	f383 8810 	msr	PRIMASK, r3
}
 800edc0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800edc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	371c      	adds	r7, #28
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b087      	sub	sp, #28
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edda:	f3ef 8310 	mrs	r3, PRIMASK
 800edde:	60fb      	str	r3, [r7, #12]
  return(result);
 800ede0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ede2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ede4:	b672      	cpsid	i
}
 800ede6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	683a      	ldr	r2, [r7, #0]
 800edfa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	683a      	ldr	r2, [r7, #0]
 800ee02:	605a      	str	r2, [r3, #4]
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	f383 8810 	msr	PRIMASK, r3
}
 800ee0e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee10:	bf00      	nop
 800ee12:	371c      	adds	r7, #28
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b087      	sub	sp, #28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee26:	f3ef 8310 	mrs	r3, PRIMASK
 800ee2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee30:	b672      	cpsid	i
}
 800ee32:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	685a      	ldr	r2, [r3, #4]
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	683a      	ldr	r2, [r7, #0]
 800ee46:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	683a      	ldr	r2, [r7, #0]
 800ee4e:	601a      	str	r2, [r3, #0]
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	f383 8810 	msr	PRIMASK, r3
}
 800ee5a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee5c:	bf00      	nop
 800ee5e:	371c      	adds	r7, #28
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b087      	sub	sp, #28
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee70:	f3ef 8310 	mrs	r3, PRIMASK
 800ee74:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee76:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee7a:	b672      	cpsid	i
}
 800ee7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	6812      	ldr	r2, [r2, #0]
 800ee86:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	6852      	ldr	r2, [r2, #4]
 800ee90:	605a      	str	r2, [r3, #4]
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	f383 8810 	msr	PRIMASK, r3
}
 800ee9c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee9e:	bf00      	nop
 800eea0:	371c      	adds	r7, #28
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr

0800eeaa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b086      	sub	sp, #24
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
 800eeb2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeb4:	f3ef 8310 	mrs	r3, PRIMASK
 800eeb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800eeba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800eebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eebe:	b672      	cpsid	i
}
 800eec0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4618      	mov	r0, r3
 800eed0:	f7ff ffca 	bl	800ee68 <LST_remove_node>
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	f383 8810 	msr	PRIMASK, r3
}
 800eede:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800eee0:	bf00      	nop
 800eee2:	3718      	adds	r7, #24
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800eee8:	b480      	push	{r7}
 800eeea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800eeec:	4b03      	ldr	r3, [pc, #12]	@ (800eefc <LL_FLASH_GetUDN+0x14>)
 800eeee:	681b      	ldr	r3, [r3, #0]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	1fff7580 	.word	0x1fff7580

0800ef00 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800ef00:	b480      	push	{r7}
 800ef02:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800ef04:	4b03      	ldr	r3, [pc, #12]	@ (800ef14 <LL_FLASH_GetDeviceID+0x14>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	b2db      	uxtb	r3, r3
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr
 800ef14:	1fff7584 	.word	0x1fff7584

0800ef18 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800ef1c:	4b03      	ldr	r3, [pc, #12]	@ (800ef2c <LL_FLASH_GetSTCompanyID+0x14>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	0a1b      	lsrs	r3, r3, #8
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr
 800ef2c:	1fff7584 	.word	0x1fff7584

0800ef30 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800ef30:	b5b0      	push	{r4, r5, r7, lr}
 800ef32:	b090      	sub	sp, #64	@ 0x40
 800ef34:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ef36:	2392      	movs	r3, #146	@ 0x92
 800ef38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ef3c:	4b25      	ldr	r3, [pc, #148]	@ (800efd4 <APP_BLE_Init+0xa4>)
 800ef3e:	1d3c      	adds	r4, r7, #4
 800ef40:	461d      	mov	r5, r3
 800ef42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ef52:	c403      	stmia	r4!, {r0, r1}
 800ef54:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ef56:	f000 f913 	bl	800f180 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ef5a:	2101      	movs	r1, #1
 800ef5c:	2002      	movs	r0, #2
 800ef5e:	f000 fe7f 	bl	800fc60 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ef62:	4a1d      	ldr	r2, [pc, #116]	@ (800efd8 <APP_BLE_Init+0xa8>)
 800ef64:	2100      	movs	r1, #0
 800ef66:	2002      	movs	r0, #2
 800ef68:	f000 ffa6 	bl	800feb8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ef6c:	1d3b      	adds	r3, r7, #4
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff f850 	bl	800e014 <SHCI_C2_BLE_Init>
 800ef74:	4603      	mov	r3, r0
 800ef76:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800ef7a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ef82:	f7f5 fb6b 	bl	800465c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ef86:	f000 f911 	bl	800f1ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ef8a:	f7fe ff9d 	bl	800dec8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ef8e:	4b13      	ldr	r3, [pc, #76]	@ (800efdc <APP_BLE_Init+0xac>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ef96:	4b11      	ldr	r3, [pc, #68]	@ (800efdc <APP_BLE_Init+0xac>)
 800ef98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef9c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ef9e:	4a10      	ldr	r2, [pc, #64]	@ (800efe0 <APP_BLE_Init+0xb0>)
 800efa0:	2100      	movs	r1, #0
 800efa2:	2001      	movs	r0, #1
 800efa4:	f000 ff88 	bl	800feb8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800efa8:	2006      	movs	r0, #6
 800efaa:	f7fe fe01 	bl	800dbb0 <aci_hal_set_radio_activity_mask>
 800efae:	4603      	mov	r3, r0
 800efb0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800efb4:	f000 fac5 	bl	800f542 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800efb8:	4b08      	ldr	r3, [pc, #32]	@ (800efdc <APP_BLE_Init+0xac>)
 800efba:	2200      	movs	r2, #0
 800efbc:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800efbe:	4b07      	ldr	r3, [pc, #28]	@ (800efdc <APP_BLE_Init+0xac>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800efc4:	2001      	movs	r0, #1
 800efc6:	f000 f9a5 	bl	800f314 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800efca:	bf00      	nop
}
 800efcc:	3740      	adds	r7, #64	@ 0x40
 800efce:	46bd      	mov	sp, r7
 800efd0:	bdb0      	pop	{r4, r5, r7, pc}
 800efd2:	bf00      	nop
 800efd4:	08014d10 	.word	0x08014d10
 800efd8:	0800e231 	.word	0x0800e231
 800efdc:	200008c0 	.word	0x200008c0
 800efe0:	0800f3fd 	.word	0x0800f3fd

0800efe4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08a      	sub	sp, #40	@ 0x28
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800efec:	2392      	movs	r3, #146	@ 0x92
 800efee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3301      	adds	r3, #1
 800eff6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800eff8:	6a3b      	ldr	r3, [r7, #32]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	2bff      	cmp	r3, #255	@ 0xff
 800effe:	d053      	beq.n	800f0a8 <SVCCTL_App_Notification+0xc4>
 800f000:	2bff      	cmp	r3, #255	@ 0xff
 800f002:	f300 80af 	bgt.w	800f164 <SVCCTL_App_Notification+0x180>
 800f006:	2b05      	cmp	r3, #5
 800f008:	d002      	beq.n	800f010 <SVCCTL_App_Notification+0x2c>
 800f00a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f00c:	d020      	beq.n	800f050 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800f00e:	e0a9      	b.n	800f164 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	3302      	adds	r3, #2
 800f014:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	4b55      	ldr	r3, [pc, #340]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f020:	8adb      	ldrh	r3, [r3, #22]
 800f022:	429a      	cmp	r2, r3
 800f024:	d106      	bne.n	800f034 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f026:	4b53      	ldr	r3, [pc, #332]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f028:	2200      	movs	r2, #0
 800f02a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f02c:	4b51      	ldr	r3, [pc, #324]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f02e:	2200      	movs	r2, #0
 800f030:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800f034:	2001      	movs	r0, #1
 800f036:	f000 f96d 	bl	800f314 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800f03a:	4b4f      	ldr	r3, [pc, #316]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f03c:	2201      	movs	r2, #1
 800f03e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f040:	4b4c      	ldr	r3, [pc, #304]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f042:	8ada      	ldrh	r2, [r3, #22]
 800f044:	4b4c      	ldr	r3, [pc, #304]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f046:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800f048:	484b      	ldr	r0, [pc, #300]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f04a:	f000 fa66 	bl	800f51a <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800f04e:	e08c      	b.n	800f16a <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800f050:	6a3b      	ldr	r3, [r7, #32]
 800f052:	3302      	adds	r3, #2
 800f054:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d001      	beq.n	800f062 <SVCCTL_App_Notification+0x7e>
 800f05e:	2b03      	cmp	r3, #3
          break;
 800f060:	e021      	b.n	800f0a6 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	3301      	adds	r3, #1
 800f066:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800f068:	4b42      	ldr	r3, [pc, #264]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f06a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f06e:	2b04      	cmp	r3, #4
 800f070:	d104      	bne.n	800f07c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800f072:	4b40      	ldr	r3, [pc, #256]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f074:	2206      	movs	r2, #6
 800f076:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800f07a:	e003      	b.n	800f084 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800f07c:	4b3d      	ldr	r3, [pc, #244]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f07e:	2205      	movs	r2, #5
 800f080:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	4b39      	ldr	r3, [pc, #228]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f08e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800f090:	4b39      	ldr	r3, [pc, #228]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f092:	2200      	movs	r2, #0
 800f094:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f096:	4b37      	ldr	r3, [pc, #220]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f098:	8ada      	ldrh	r2, [r3, #22]
 800f09a:	4b37      	ldr	r3, [pc, #220]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f09c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800f09e:	4836      	ldr	r0, [pc, #216]	@ (800f178 <SVCCTL_App_Notification+0x194>)
 800f0a0:	f000 fa3b 	bl	800f51a <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800f0a4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800f0a6:	e060      	b.n	800f16a <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800f0a8:	6a3b      	ldr	r3, [r7, #32]
 800f0aa:	3302      	adds	r3, #2
 800f0ac:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d047      	beq.n	800f14c <SVCCTL_App_Notification+0x168>
 800f0bc:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	dc51      	bgt.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0c8:	d046      	beq.n	800f158 <SVCCTL_App_Notification+0x174>
 800f0ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f0ce:	dc4b      	bgt.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0d0:	2b04      	cmp	r3, #4
 800f0d2:	d043      	beq.n	800f15c <SVCCTL_App_Notification+0x178>
 800f0d4:	2b04      	cmp	r3, #4
 800f0d6:	db47      	blt.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0d8:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	dc43      	bgt.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0e4:	dd40      	ble.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0e6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800f0ea:	2b09      	cmp	r3, #9
 800f0ec:	d83c      	bhi.n	800f168 <SVCCTL_App_Notification+0x184>
 800f0ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f0f4 <SVCCTL_App_Notification+0x110>)
 800f0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f4:	0800f145 	.word	0x0800f145
 800f0f8:	0800f11d 	.word	0x0800f11d
 800f0fc:	0800f169 	.word	0x0800f169
 800f100:	0800f169 	.word	0x0800f169
 800f104:	0800f169 	.word	0x0800f169
 800f108:	0800f169 	.word	0x0800f169
 800f10c:	0800f161 	.word	0x0800f161
 800f110:	0800f169 	.word	0x0800f169
 800f114:	0800f131 	.word	0x0800f131
 800f118:	0800f161 	.word	0x0800f161
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800f11c:	4b15      	ldr	r3, [pc, #84]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f11e:	8adb      	ldrh	r3, [r3, #22]
 800f120:	4916      	ldr	r1, [pc, #88]	@ (800f17c <SVCCTL_App_Notification+0x198>)
 800f122:	4618      	mov	r0, r3
 800f124:	f7fd ff46 	bl	800cfb4 <aci_gap_pass_key_resp>
 800f128:	4603      	mov	r3, r0
 800f12a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800f12e:	e018      	b.n	800f162 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800f130:	4b10      	ldr	r3, [pc, #64]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f132:	8adb      	ldrh	r3, [r3, #22]
 800f134:	2101      	movs	r1, #1
 800f136:	4618      	mov	r0, r3
 800f138:	f7fe f8e6 	bl	800d308 <aci_gap_numeric_comparison_value_confirm_yesno>
 800f13c:	4603      	mov	r3, r0
 800f13e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800f142:	e00e      	b.n	800f162 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	3302      	adds	r3, #2
 800f148:	61bb      	str	r3, [r7, #24]
          break;
 800f14a:	e00a      	b.n	800f162 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800f14c:	4b09      	ldr	r3, [pc, #36]	@ (800f174 <SVCCTL_App_Notification+0x190>)
 800f14e:	8adb      	ldrh	r3, [r3, #22]
 800f150:	4618      	mov	r0, r3
 800f152:	f7fe fbec 	bl	800d92e <aci_gatt_confirm_indication>
        break;
 800f156:	e004      	b.n	800f162 <SVCCTL_App_Notification+0x17e>
          break;
 800f158:	bf00      	nop
 800f15a:	e005      	b.n	800f168 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800f15c:	bf00      	nop
 800f15e:	e003      	b.n	800f168 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800f160:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f162:	e001      	b.n	800f168 <SVCCTL_App_Notification+0x184>
      break;
 800f164:	bf00      	nop
 800f166:	e000      	b.n	800f16a <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f168:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f16a:	2301      	movs	r3, #1
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3728      	adds	r7, #40	@ 0x28
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	200008c0 	.word	0x200008c0
 800f178:	20000944 	.word	0x20000944
 800f17c:	0001b207 	.word	0x0001b207

0800f180 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f186:	4b06      	ldr	r3, [pc, #24]	@ (800f1a0 <Ble_Tl_Init+0x20>)
 800f188:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f18a:	4b06      	ldr	r3, [pc, #24]	@ (800f1a4 <Ble_Tl_Init+0x24>)
 800f18c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f18e:	463b      	mov	r3, r7
 800f190:	4619      	mov	r1, r3
 800f192:	4805      	ldr	r0, [pc, #20]	@ (800f1a8 <Ble_Tl_Init+0x28>)
 800f194:	f7ff f830 	bl	800e1f8 <hci_init>

  return;
 800f198:	bf00      	nop
}
 800f19a:	3708      	adds	r7, #8
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	200300d8 	.word	0x200300d8
 800f1a4:	0800f4ad 	.word	0x0800f4ad
 800f1a8:	0800f475 	.word	0x0800f475

0800f1ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800f1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ae:	b08d      	sub	sp, #52	@ 0x34
 800f1b0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f1b6:	2392      	movs	r3, #146	@ 0x92
 800f1b8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800f1ba:	f7fe fd4d 	bl	800dc58 <hci_reset>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800f1c2:	f000 f8d7 	bl	800f374 <BleGetBdAddress>
 800f1c6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800f1c8:	693a      	ldr	r2, [r7, #16]
 800f1ca:	2106      	movs	r1, #6
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	f7fe fc03 	bl	800d9d8 <aci_hal_write_config_data>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800f1d6:	4a4a      	ldr	r2, [pc, #296]	@ (800f300 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800f1d8:	2110      	movs	r1, #16
 800f1da:	2018      	movs	r0, #24
 800f1dc:	f7fe fbfc 	bl	800d9d8 <aci_hal_write_config_data>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800f1e4:	4a47      	ldr	r2, [pc, #284]	@ (800f304 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800f1e6:	2110      	movs	r1, #16
 800f1e8:	2008      	movs	r0, #8
 800f1ea:	f7fe fbf5 	bl	800d9d8 <aci_hal_write_config_data>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800f1f2:	2118      	movs	r1, #24
 800f1f4:	2001      	movs	r0, #1
 800f1f6:	f7fe fc74 	bl	800dae2 <aci_hal_set_tx_power_level>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800f1fe:	f7fe f8ea 	bl	800d3d6 <aci_gatt_init>
 800f202:	4603      	mov	r3, r0
 800f204:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800f206:	2300      	movs	r3, #0
 800f208:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
 800f20c:	f043 0301 	orr.w	r3, r3, #1
 800f210:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800f212:	7bfb      	ldrb	r3, [r7, #15]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d01f      	beq.n	800f258 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800f218:	4b3b      	ldr	r3, [pc, #236]	@ (800f308 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800f21a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800f21c:	1dba      	adds	r2, r7, #6
 800f21e:	7bf8      	ldrb	r0, [r7, #15]
 800f220:	1cbb      	adds	r3, r7, #2
 800f222:	9301      	str	r3, [sp, #4]
 800f224:	1d3b      	adds	r3, r7, #4
 800f226:	9300      	str	r3, [sp, #0]
 800f228:	4613      	mov	r3, r2
 800f22a:	2208      	movs	r2, #8
 800f22c:	2100      	movs	r1, #0
 800f22e:	f7fd ff28 	bl	800d082 <aci_gap_init>
 800f232:	4603      	mov	r3, r0
 800f234:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800f236:	88fc      	ldrh	r4, [r7, #6]
 800f238:	88bd      	ldrh	r5, [r7, #4]
 800f23a:	68b8      	ldr	r0, [r7, #8]
 800f23c:	f7f1 f800 	bl	8000240 <strlen>
 800f240:	4603      	mov	r3, r0
 800f242:	b2da      	uxtb	r2, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	4613      	mov	r3, r2
 800f24a:	2200      	movs	r2, #0
 800f24c:	4629      	mov	r1, r5
 800f24e:	4620      	mov	r0, r4
 800f250:	f7fe fac4 	bl	800d7dc <aci_gatt_update_char_value>
 800f254:	4603      	mov	r3, r0
 800f256:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800f258:	88f8      	ldrh	r0, [r7, #6]
 800f25a:	8879      	ldrh	r1, [r7, #2]
 800f25c:	463b      	mov	r3, r7
 800f25e:	9300      	str	r3, [sp, #0]
 800f260:	2302      	movs	r3, #2
 800f262:	2200      	movs	r2, #0
 800f264:	f7fe faba 	bl	800d7dc <aci_gatt_update_char_value>
 800f268:	4603      	mov	r3, r0
 800f26a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800f26c:	2202      	movs	r2, #2
 800f26e:	2102      	movs	r1, #2
 800f270:	2000      	movs	r0, #0
 800f272:	f7fe fd15 	bl	800dca0 <hci_le_set_default_phy>
 800f276:	4603      	mov	r3, r0
 800f278:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800f27a:	4b24      	ldr	r3, [pc, #144]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f27c:	2201      	movs	r2, #1
 800f27e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800f280:	4b22      	ldr	r3, [pc, #136]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	4618      	mov	r0, r3
 800f286:	f7fd fd7d 	bl	800cd84 <aci_gap_set_io_capability>
 800f28a:	4603      	mov	r3, r0
 800f28c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800f28e:	4b1f      	ldr	r3, [pc, #124]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f290:	2201      	movs	r2, #1
 800f292:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800f294:	4b1d      	ldr	r3, [pc, #116]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f296:	2208      	movs	r2, #8
 800f298:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800f29a:	4b1c      	ldr	r3, [pc, #112]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f29c:	2210      	movs	r2, #16
 800f29e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800f2a0:	4b1a      	ldr	r3, [pc, #104]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800f2a6:	4b19      	ldr	r3, [pc, #100]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2a8:	4a19      	ldr	r2, [pc, #100]	@ (800f310 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800f2aa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800f2ac:	4b17      	ldr	r3, [pc, #92]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800f2b2:	4b16      	ldr	r3, [pc, #88]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2b4:	789c      	ldrb	r4, [r3, #2]
 800f2b6:	4b15      	ldr	r3, [pc, #84]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2b8:	785d      	ldrb	r5, [r3, #1]
 800f2ba:	4b14      	ldr	r3, [pc, #80]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2bc:	791b      	ldrb	r3, [r3, #4]
 800f2be:	4a13      	ldr	r2, [pc, #76]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2c0:	7952      	ldrb	r2, [r2, #5]
 800f2c2:	4912      	ldr	r1, [pc, #72]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2c4:	78c9      	ldrb	r1, [r1, #3]
 800f2c6:	4811      	ldr	r0, [pc, #68]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2c8:	6880      	ldr	r0, [r0, #8]
 800f2ca:	2600      	movs	r6, #0
 800f2cc:	9604      	str	r6, [sp, #16]
 800f2ce:	9003      	str	r0, [sp, #12]
 800f2d0:	9102      	str	r1, [sp, #8]
 800f2d2:	9201      	str	r2, [sp, #4]
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	2201      	movs	r2, #1
 800f2da:	4629      	mov	r1, r5
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f7fd fda5 	bl	800ce2c <aci_gap_set_authentication_requirement>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800f2e6:	4b09      	ldr	r3, [pc, #36]	@ (800f30c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800f2e8:	789b      	ldrb	r3, [r3, #2]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d003      	beq.n	800f2f6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800f2ee:	f7fd ffe7 	bl	800d2c0 <aci_gap_configure_filter_accept_list>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800f2f6:	bf00      	nop
 800f2f8:	371c      	adds	r7, #28
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2fe:	bf00      	nop
 800f300:	08014fd8 	.word	0x08014fd8
 800f304:	08014fe8 	.word	0x08014fe8
 800f308:	08014d4c 	.word	0x08014d4c
 800f30c:	200008c0 	.word	0x200008c0
 800f310:	0001b207 	.word	0x0001b207

0800f314 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b08c      	sub	sp, #48	@ 0x30
 800f318:	af08      	add	r7, sp, #32
 800f31a:	4603      	mov	r3, r0
 800f31c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f31e:	2392      	movs	r3, #146	@ 0x92
 800f320:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800f322:	4a12      	ldr	r2, [pc, #72]	@ (800f36c <Adv_Request+0x58>)
 800f324:	79fb      	ldrb	r3, [r7, #7]
 800f326:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800f32a:	2300      	movs	r3, #0
 800f32c:	9306      	str	r3, [sp, #24]
 800f32e:	2300      	movs	r3, #0
 800f330:	9305      	str	r3, [sp, #20]
 800f332:	2300      	movs	r3, #0
 800f334:	9304      	str	r3, [sp, #16]
 800f336:	2300      	movs	r3, #0
 800f338:	9303      	str	r3, [sp, #12]
 800f33a:	2300      	movs	r3, #0
 800f33c:	9302      	str	r3, [sp, #8]
 800f33e:	2300      	movs	r3, #0
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	2300      	movs	r3, #0
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	2300      	movs	r3, #0
 800f348:	22a0      	movs	r2, #160	@ 0xa0
 800f34a:	2180      	movs	r1, #128	@ 0x80
 800f34c:	2000      	movs	r0, #0
 800f34e:	f7fd fc1f 	bl	800cb90 <aci_gap_set_discoverable>
 800f352:	4603      	mov	r3, r0
 800f354:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800f356:	4906      	ldr	r1, [pc, #24]	@ (800f370 <Adv_Request+0x5c>)
 800f358:	200e      	movs	r0, #14
 800f35a:	f7fd ff3f 	bl	800d1dc <aci_gap_update_adv_data>
 800f35e:	4603      	mov	r3, r0
 800f360:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800f362:	bf00      	nop
}
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	200008c0 	.word	0x200008c0
 800f370:	20000020 	.word	0x20000020

0800f374 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b086      	sub	sp, #24
 800f378:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800f37a:	f7ff fdb5 	bl	800eee8 <LL_FLASH_GetUDN>
 800f37e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f386:	d023      	beq.n	800f3d0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800f388:	f7ff fdc6 	bl	800ef18 <LL_FLASH_GetSTCompanyID>
 800f38c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800f38e:	f7ff fdb7 	bl	800ef00 <LL_FLASH_GetDeviceID>
 800f392:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	b2da      	uxtb	r2, r3
 800f398:	4b16      	ldr	r3, [pc, #88]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f39a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	0a1b      	lsrs	r3, r3, #8
 800f3a0:	b2da      	uxtb	r2, r3
 800f3a2:	4b14      	ldr	r3, [pc, #80]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3a4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	4b12      	ldr	r3, [pc, #72]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3ac:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	b2da      	uxtb	r2, r3
 800f3b2:	4b10      	ldr	r3, [pc, #64]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3b4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	0a1b      	lsrs	r3, r3, #8
 800f3ba:	b2da      	uxtb	r2, r3
 800f3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3be:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	0c1b      	lsrs	r3, r3, #16
 800f3c4:	b2da      	uxtb	r2, r3
 800f3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3c8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800f3ca:	4b0a      	ldr	r3, [pc, #40]	@ (800f3f4 <BleGetBdAddress+0x80>)
 800f3cc:	617b      	str	r3, [r7, #20]
 800f3ce:	e00b      	b.n	800f3e8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	f7ff fca3 	bl	800ed1c <OTP_Read>
 800f3d6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	617b      	str	r3, [r7, #20]
 800f3e2:	e001      	b.n	800f3e8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800f3e4:	4b04      	ldr	r3, [pc, #16]	@ (800f3f8 <BleGetBdAddress+0x84>)
 800f3e6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800f3e8:	697b      	ldr	r3, [r7, #20]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	200008b8 	.word	0x200008b8
 800f3f8:	08014fd0 	.word	0x08014fd0

0800f3fc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800f402:	4b0a      	ldr	r3, [pc, #40]	@ (800f42c <Adv_Cancel+0x30>)
 800f404:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f408:	2b05      	cmp	r3, #5
 800f40a:	d00a      	beq.n	800f422 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f40c:	2392      	movs	r3, #146	@ 0x92
 800f40e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800f410:	f7fd fb9a 	bl	800cb48 <aci_gap_set_non_discoverable>
 800f414:	4603      	mov	r3, r0
 800f416:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f418:	4b04      	ldr	r3, [pc, #16]	@ (800f42c <Adv_Cancel+0x30>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800f420:	bf00      	nop
 800f422:	bf00      	nop
}
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	200008c0 	.word	0x200008c0

0800f430 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800f438:	2100      	movs	r1, #0
 800f43a:	2002      	movs	r0, #2
 800f43c:	f000 fd5e 	bl	800fefc <UTIL_SEQ_SetTask>

  return;
 800f440:	bf00      	nop
}
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f450:	2001      	movs	r0, #1
 800f452:	f000 fdbf 	bl	800ffd4 <UTIL_SEQ_SetEvt>

  return;
 800f456:	bf00      	nop
}
 800f458:	3708      	adds	r7, #8
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800f45e:	b580      	push	{r7, lr}
 800f460:	b082      	sub	sp, #8
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800f466:	2001      	movs	r0, #1
 800f468:	f000 fdd4 	bl	8010014 <UTIL_SEQ_WaitEvt>

  return;
 800f46c:	bf00      	nop
}
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	3308      	adds	r3, #8
 800f486:	4618      	mov	r0, r3
 800f488:	f7fe fd70 	bl	800df6c <SVCCTL_UserEvtRx>
 800f48c:	4603      	mov	r3, r0
 800f48e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800f490:	7afb      	ldrb	r3, [r7, #11]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d003      	beq.n	800f49e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2201      	movs	r2, #1
 800f49a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800f49c:	e003      	b.n	800f4a6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	701a      	strb	r2, [r3, #0]
  return;
 800f4a4:	bf00      	nop
}
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800f4b6:	79fb      	ldrb	r3, [r7, #7]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d002      	beq.n	800f4c2 <BLE_StatusNot+0x16>
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d006      	beq.n	800f4ce <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800f4c0:	e00b      	b.n	800f4da <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f000 fd44 	bl	800ff54 <UTIL_SEQ_PauseTask>
      break;
 800f4cc:	e005      	b.n	800f4da <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800f4ce:	2303      	movs	r3, #3
 800f4d0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f000 fd5e 	bl	800ff94 <UTIL_SEQ_ResumeTask>
      break;
 800f4d8:	bf00      	nop
  }

  return;
 800f4da:	bf00      	nop
}
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800f4e2:	b480      	push	{r7}
 800f4e4:	b083      	sub	sp, #12
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	2b02      	cmp	r3, #2
 800f4f0:	d006      	beq.n	800f500 <Custom_STM_App_Notification+0x1e>
 800f4f2:	2b02      	cmp	r3, #2
 800f4f4:	dc06      	bgt.n	800f504 <Custom_STM_App_Notification+0x22>
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d006      	beq.n	800f508 <Custom_STM_App_Notification+0x26>
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d006      	beq.n	800f50c <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800f4fe:	e001      	b.n	800f504 <Custom_STM_App_Notification+0x22>
      break;
 800f500:	bf00      	nop
 800f502:	e004      	b.n	800f50e <Custom_STM_App_Notification+0x2c>
      break;
 800f504:	bf00      	nop
 800f506:	e002      	b.n	800f50e <Custom_STM_App_Notification+0x2c>
      break;
 800f508:	bf00      	nop
 800f50a:	e000      	b.n	800f50e <Custom_STM_App_Notification+0x2c>
      break;
 800f50c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800f50e:	bf00      	nop
}
 800f510:	370c      	adds	r7, #12
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr

0800f51a <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800f51a:	b480      	push	{r7}
 800f51c:	b083      	sub	sp, #12
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d002      	beq.n	800f530 <Custom_APP_Notification+0x16>
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	d002      	beq.n	800f534 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800f52e:	e002      	b.n	800f536 <Custom_APP_Notification+0x1c>
      break;
 800f530:	bf00      	nop
 800f532:	e000      	b.n	800f536 <Custom_APP_Notification+0x1c>
      break;
 800f534:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800f536:	bf00      	nop
}
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800f542:	b480      	push	{r7}
 800f544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800f546:	bf00      	nop
}
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08e      	sub	sp, #56	@ 0x38
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800f558:	2300      	movs	r3, #0
 800f55a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	3301      	adds	r3, #1
 800f562:	62fb      	str	r3, [r7, #44]	@ 0x2c

  switch (event_pckt->evt)
 800f564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	2bff      	cmp	r3, #255	@ 0xff
 800f56a:	f040 8097 	bne.w	800f69c <Custom_STM_Event_Handler+0x14c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800f56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f570:	3302      	adds	r3, #2
 800f572:	62bb      	str	r3, [r7, #40]	@ 0x28
      switch (blecore_evt->ecode)
 800f574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f576:	881b      	ldrh	r3, [r3, #0]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800f57e:	2b1a      	cmp	r3, #26
 800f580:	f200 808a 	bhi.w	800f698 <Custom_STM_Event_Handler+0x148>
 800f584:	a201      	add	r2, pc, #4	@ (adr r2, 800f58c <Custom_STM_Event_Handler+0x3c>)
 800f586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f58a:	bf00      	nop
 800f58c:	0800f5f9 	.word	0x0800f5f9
 800f590:	0800f699 	.word	0x0800f699
 800f594:	0800f699 	.word	0x0800f699
 800f598:	0800f699 	.word	0x0800f699
 800f59c:	0800f699 	.word	0x0800f699
 800f5a0:	0800f699 	.word	0x0800f699
 800f5a4:	0800f699 	.word	0x0800f699
 800f5a8:	0800f699 	.word	0x0800f699
 800f5ac:	0800f699 	.word	0x0800f699
 800f5b0:	0800f699 	.word	0x0800f699
 800f5b4:	0800f699 	.word	0x0800f699
 800f5b8:	0800f699 	.word	0x0800f699
 800f5bc:	0800f699 	.word	0x0800f699
 800f5c0:	0800f699 	.word	0x0800f699
 800f5c4:	0800f699 	.word	0x0800f699
 800f5c8:	0800f699 	.word	0x0800f699
 800f5cc:	0800f699 	.word	0x0800f699
 800f5d0:	0800f699 	.word	0x0800f699
 800f5d4:	0800f699 	.word	0x0800f699
 800f5d8:	0800f699 	.word	0x0800f699
 800f5dc:	0800f699 	.word	0x0800f699
 800f5e0:	0800f699 	.word	0x0800f699
 800f5e4:	0800f699 	.word	0x0800f699
 800f5e8:	0800f699 	.word	0x0800f699
 800f5ec:	0800f699 	.word	0x0800f699
 800f5f0:	0800f699 	.word	0x0800f699
 800f5f4:	0800f67b 	.word	0x0800f67b
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800f5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fa:	3302      	adds	r3, #2
 800f5fc:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800f5fe:	6a3b      	ldr	r3, [r7, #32]
 800f600:	885b      	ldrh	r3, [r3, #2]
 800f602:	b29b      	uxth	r3, r3
 800f604:	461a      	mov	r2, r3
 800f606:	4b29      	ldr	r3, [pc, #164]	@ (800f6ac <Custom_STM_Event_Handler+0x15c>)
 800f608:	885b      	ldrh	r3, [r3, #2]
 800f60a:	3301      	adds	r3, #1
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d102      	bne.n	800f616 <Custom_STM_Event_Handler+0xc6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800f610:	2301      	movs	r3, #1
 800f612:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          APP_DBG_MSG(">> BLE Write Detected!\n");
		  APP_DBG_MSG(">> Received Data (%d bytes): ", attribute_modified->Attr_Data_Length);

		  for (int i = 0; i < attribute_modified->Attr_Data_Length; i++) {
 800f616:	2300      	movs	r3, #0
 800f618:	633b      	str	r3, [r7, #48]	@ 0x30
 800f61a:	e002      	b.n	800f622 <Custom_STM_Event_Handler+0xd2>
 800f61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f61e:	3301      	adds	r3, #1
 800f620:	633b      	str	r3, [r7, #48]	@ 0x30
 800f622:	6a3b      	ldr	r3, [r7, #32]
 800f624:	88db      	ldrh	r3, [r3, #6]
 800f626:	b29b      	uxth	r3, r3
 800f628:	461a      	mov	r2, r3
 800f62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f62c:	4293      	cmp	r3, r2
 800f62e:	dbf5      	blt.n	800f61c <Custom_STM_Event_Handler+0xcc>
			  APP_DBG_MSG("%02X ", attribute_modified->Attr_Data[i]);
		  }
		  APP_DBG_MSG("\n");

		  if (check_command(attribute_modified->Attr_Data)) {
 800f630:	6a3b      	ldr	r3, [r7, #32]
 800f632:	3308      	adds	r3, #8
 800f634:	4618      	mov	r0, r3
 800f636:	f7f1 fcbd 	bl	8000fb4 <check_command>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d003      	beq.n	800f648 <Custom_STM_Event_Handler+0xf8>
				printf(">> Command detected!\n");
 800f640:	481b      	ldr	r0, [pc, #108]	@ (800f6b0 <Custom_STM_Event_Handler+0x160>)
 800f642:	f002 fc31 	bl	8011ea8 <puts>
 800f646:	e002      	b.n	800f64e <Custom_STM_Event_Handler+0xfe>
			} else {
				printf(">> Command not detected!\n");
 800f648:	481a      	ldr	r0, [pc, #104]	@ (800f6b4 <Custom_STM_Event_Handler+0x164>)
 800f64a:	f002 fc2d 	bl	8011ea8 <puts>
			}

		  if (BLE_ProcessCommand(attribute_modified->Attr_Data, attribute_modified->Attr_Data_Length))
 800f64e:	6a3b      	ldr	r3, [r7, #32]
 800f650:	f103 0208 	add.w	r2, r3, #8
 800f654:	6a3b      	ldr	r3, [r7, #32]
 800f656:	88db      	ldrh	r3, [r3, #6]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	4619      	mov	r1, r3
 800f65e:	4610      	mov	r0, r2
 800f660:	f7f1 fcba 	bl	8000fd8 <BLE_ProcessCommand>
 800f664:	4603      	mov	r3, r0
 800f666:	2b00      	cmp	r3, #0
 800f668:	d003      	beq.n	800f672 <Custom_STM_Event_Handler+0x122>
		          {
		              printf(">> Action déclenchée suite à la commande\n");
 800f66a:	4813      	ldr	r0, [pc, #76]	@ (800f6b8 <Custom_STM_Event_Handler+0x168>)
 800f66c:	f002 fc1c 	bl	8011ea8 <puts>
				printf(">> Aucune action déclenchée\n");
			}


          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800f670:	e013      	b.n	800f69a <Custom_STM_Event_Handler+0x14a>
				printf(">> Aucune action déclenchée\n");
 800f672:	4812      	ldr	r0, [pc, #72]	@ (800f6bc <Custom_STM_Event_Handler+0x16c>)
 800f674:	f002 fc18 	bl	8011ea8 <puts>
          break;
 800f678:	e00f      	b.n	800f69a <Custom_STM_Event_Handler+0x14a>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800f67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f67c:	3302      	adds	r3, #2
 800f67e:	627b      	str	r3, [r7, #36]	@ 0x24
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800f680:	2302      	movs	r3, #2
 800f682:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800f684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f686:	881b      	ldrh	r3, [r3, #0]
 800f688:	b29b      	uxth	r3, r3
 800f68a:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 800f68c:	f107 030c 	add.w	r3, r7, #12
 800f690:	4618      	mov	r0, r3
 800f692:	f7ff ff26 	bl	800f4e2 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800f696:	e000      	b.n	800f69a <Custom_STM_Event_Handler+0x14a>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800f698:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f69a:	e000      	b.n	800f69e <Custom_STM_Event_Handler+0x14e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800f69c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800f69e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3738      	adds	r7, #56	@ 0x38
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20000948 	.word	0x20000948
 800f6b0:	08014d58 	.word	0x08014d58
 800f6b4:	08014d70 	.word	0x08014d70
 800f6b8:	08014d8c 	.word	0x08014d8c
 800f6bc:	08014db8 	.word	0x08014db8

0800f6c0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b08c      	sub	sp, #48	@ 0x30
 800f6c4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f6c6:	2392      	movs	r3, #146	@ 0x92
 800f6c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800f6ca:	4834      	ldr	r0, [pc, #208]	@ (800f79c <SVCCTL_InitCustomSvc+0xdc>)
 800f6cc:	f7fe fc34 	bl	800df38 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800f6d0:	2303      	movs	r3, #3
 800f6d2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MY_CUSTOM_SVC_UUID(uuid.Char_UUID_128);
 800f6d4:	238f      	movs	r3, #143	@ 0x8f
 800f6d6:	713b      	strb	r3, [r7, #4]
 800f6d8:	23e5      	movs	r3, #229	@ 0xe5
 800f6da:	717b      	strb	r3, [r7, #5]
 800f6dc:	23b3      	movs	r3, #179	@ 0xb3
 800f6de:	71bb      	strb	r3, [r7, #6]
 800f6e0:	23d5      	movs	r3, #213	@ 0xd5
 800f6e2:	71fb      	strb	r3, [r7, #7]
 800f6e4:	232e      	movs	r3, #46	@ 0x2e
 800f6e6:	723b      	strb	r3, [r7, #8]
 800f6e8:	237f      	movs	r3, #127	@ 0x7f
 800f6ea:	727b      	strb	r3, [r7, #9]
 800f6ec:	234a      	movs	r3, #74	@ 0x4a
 800f6ee:	72bb      	strb	r3, [r7, #10]
 800f6f0:	2398      	movs	r3, #152	@ 0x98
 800f6f2:	72fb      	strb	r3, [r7, #11]
 800f6f4:	232a      	movs	r3, #42	@ 0x2a
 800f6f6:	733b      	strb	r3, [r7, #12]
 800f6f8:	2348      	movs	r3, #72	@ 0x48
 800f6fa:	737b      	strb	r3, [r7, #13]
 800f6fc:	237a      	movs	r3, #122	@ 0x7a
 800f6fe:	73bb      	strb	r3, [r7, #14]
 800f700:	23cc      	movs	r3, #204	@ 0xcc
 800f702:	73fb      	strb	r3, [r7, #15]
 800f704:	2300      	movs	r3, #0
 800f706:	743b      	strb	r3, [r7, #16]
 800f708:	2300      	movs	r3, #0
 800f70a:	747b      	strb	r3, [r7, #17]
 800f70c:	2300      	movs	r3, #0
 800f70e:	74bb      	strb	r3, [r7, #18]
 800f710:	2300      	movs	r3, #0
 800f712:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800f714:	7dbb      	ldrb	r3, [r7, #22]
 800f716:	1d39      	adds	r1, r7, #4
 800f718:	4a21      	ldr	r2, [pc, #132]	@ (800f7a0 <SVCCTL_InitCustomSvc+0xe0>)
 800f71a:	9200      	str	r2, [sp, #0]
 800f71c:	2201      	movs	r2, #1
 800f71e:	2002      	movs	r0, #2
 800f720:	f7fd fe7e 	bl	800d420 <aci_gatt_add_service>
 800f724:	4603      	mov	r3, r0
 800f726:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  MY_CHAR
   */
  COPY_MY_CHAR_UUID(uuid.Char_UUID_128);
 800f728:	2319      	movs	r3, #25
 800f72a:	713b      	strb	r3, [r7, #4]
 800f72c:	23ed      	movs	r3, #237	@ 0xed
 800f72e:	717b      	strb	r3, [r7, #5]
 800f730:	2382      	movs	r3, #130	@ 0x82
 800f732:	71bb      	strb	r3, [r7, #6]
 800f734:	23ae      	movs	r3, #174	@ 0xae
 800f736:	71fb      	strb	r3, [r7, #7]
 800f738:	23ed      	movs	r3, #237	@ 0xed
 800f73a:	723b      	strb	r3, [r7, #8]
 800f73c:	2321      	movs	r3, #33	@ 0x21
 800f73e:	727b      	strb	r3, [r7, #9]
 800f740:	234c      	movs	r3, #76	@ 0x4c
 800f742:	72bb      	strb	r3, [r7, #10]
 800f744:	239d      	movs	r3, #157	@ 0x9d
 800f746:	72fb      	strb	r3, [r7, #11]
 800f748:	2341      	movs	r3, #65	@ 0x41
 800f74a:	733b      	strb	r3, [r7, #12]
 800f74c:	2345      	movs	r3, #69	@ 0x45
 800f74e:	737b      	strb	r3, [r7, #13]
 800f750:	2322      	movs	r3, #34	@ 0x22
 800f752:	73bb      	strb	r3, [r7, #14]
 800f754:	238e      	movs	r3, #142	@ 0x8e
 800f756:	73fb      	strb	r3, [r7, #15]
 800f758:	2300      	movs	r3, #0
 800f75a:	743b      	strb	r3, [r7, #16]
 800f75c:	2300      	movs	r3, #0
 800f75e:	747b      	strb	r3, [r7, #17]
 800f760:	2300      	movs	r3, #0
 800f762:	74bb      	strb	r3, [r7, #18]
 800f764:	2300      	movs	r3, #0
 800f766:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_Custom_SvcHdle,
 800f768:	4b0d      	ldr	r3, [pc, #52]	@ (800f7a0 <SVCCTL_InitCustomSvc+0xe0>)
 800f76a:	8818      	ldrh	r0, [r3, #0]
 800f76c:	4b0d      	ldr	r3, [pc, #52]	@ (800f7a4 <SVCCTL_InitCustomSvc+0xe4>)
 800f76e:	881b      	ldrh	r3, [r3, #0]
 800f770:	1d3a      	adds	r2, r7, #4
 800f772:	490d      	ldr	r1, [pc, #52]	@ (800f7a8 <SVCCTL_InitCustomSvc+0xe8>)
 800f774:	9105      	str	r1, [sp, #20]
 800f776:	2101      	movs	r1, #1
 800f778:	9104      	str	r1, [sp, #16]
 800f77a:	2110      	movs	r1, #16
 800f77c:	9103      	str	r1, [sp, #12]
 800f77e:	2101      	movs	r1, #1
 800f780:	9102      	str	r1, [sp, #8]
 800f782:	2100      	movs	r1, #0
 800f784:	9101      	str	r1, [sp, #4]
 800f786:	210a      	movs	r1, #10
 800f788:	9100      	str	r1, [sp, #0]
 800f78a:	2102      	movs	r1, #2
 800f78c:	f7fd ff1e 	bl	800d5cc <aci_gatt_add_char>
 800f790:	4603      	mov	r3, r0
 800f792:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800f794:	bf00      	nop
}
 800f796:	3718      	adds	r7, #24
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	0800f551 	.word	0x0800f551
 800f7a0:	20000948 	.word	0x20000948
 800f7a4:	2000002e 	.word	0x2000002e
 800f7a8:	2000094a 	.word	0x2000094a

0800f7ac <LL_PWR_EnableBootC2>:
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f7b0:	4b05      	ldr	r3, [pc, #20]	@ (800f7c8 <LL_PWR_EnableBootC2+0x1c>)
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	4a04      	ldr	r2, [pc, #16]	@ (800f7c8 <LL_PWR_EnableBootC2+0x1c>)
 800f7b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f7ba:	60d3      	str	r3, [r2, #12]
}
 800f7bc:	bf00      	nop
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop
 800f7c8:	58000400 	.word	0x58000400

0800f7cc <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b083      	sub	sp, #12
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f7d4:	4b06      	ldr	r3, [pc, #24]	@ (800f7f0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f7d6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800f7da:	4905      	ldr	r1, [pc, #20]	@ (800f7f0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800f7e4:	bf00      	nop
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr
 800f7f0:	58000800 	.word	0x58000800

0800f7f4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f7fc:	4b05      	ldr	r3, [pc, #20]	@ (800f814 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f7fe:	6a1a      	ldr	r2, [r3, #32]
 800f800:	4904      	ldr	r1, [pc, #16]	@ (800f814 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4313      	orrs	r3, r2
 800f806:	620b      	str	r3, [r1, #32]
}
 800f808:	bf00      	nop
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr
 800f814:	58000800 	.word	0x58000800

0800f818 <LL_AHB3_GRP1_EnableClock>:
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f824:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f826:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4313      	orrs	r3, r2
 800f82e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4013      	ands	r3, r2
 800f83a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f83c:	68fb      	ldr	r3, [r7, #12]
}
 800f83e:	bf00      	nop
 800f840:	3714      	adds	r7, #20
 800f842:	46bd      	mov	sp, r7
 800f844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f848:	4770      	bx	lr

0800f84a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f84a:	b480      	push	{r7}
 800f84c:	b085      	sub	sp, #20
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f856:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f85a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4313      	orrs	r3, r2
 800f862:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f86a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4013      	ands	r3, r2
 800f872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f874:	68fb      	ldr	r3, [r7, #12]
}
 800f876:	bf00      	nop
 800f878:	3714      	adds	r7, #20
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800f882:	b480      	push	{r7}
 800f884:	b083      	sub	sp, #12
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	601a      	str	r2, [r3, #0]
}
 800f896:	bf00      	nop
 800f898:	370c      	adds	r7, #12
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr

0800f8a2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800f8a2:	b480      	push	{r7}
 800f8a4:	b083      	sub	sp, #12
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f043 0201 	orr.w	r2, r3, #1
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	601a      	str	r2, [r3, #0]
}
 800f8b6:	bf00      	nop
 800f8b8:	370c      	adds	r7, #12
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr

0800f8c2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f8c2:	b480      	push	{r7}
 800f8c4:	b083      	sub	sp, #12
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
 800f8ca:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	685a      	ldr	r2, [r3, #4]
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	041b      	lsls	r3, r3, #16
 800f8d4:	43db      	mvns	r3, r3
 800f8d6:	401a      	ands	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	605a      	str	r2, [r3, #4]
}
 800f8dc:	bf00      	nop
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	685a      	ldr	r2, [r3, #4]
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	041b      	lsls	r3, r3, #16
 800f8fa:	431a      	orrs	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	605a      	str	r2, [r3, #4]
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	43db      	mvns	r3, r3
 800f91e:	401a      	ands	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	605a      	str	r2, [r3, #4]
}
 800f924:	bf00      	nop
 800f926:	370c      	adds	r7, #12
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr

0800f930 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	683a      	ldr	r2, [r7, #0]
 800f93e:	609a      	str	r2, [r3, #8]
}
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	041a      	lsls	r2, r3, #16
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	609a      	str	r2, [r3, #8]
}
 800f95e:	bf00      	nop
 800f960:	370c      	adds	r7, #12
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f96a:	b480      	push	{r7}
 800f96c:	b083      	sub	sp, #12
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
 800f972:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	68da      	ldr	r2, [r3, #12]
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	4013      	ands	r3, r2
 800f97c:	683a      	ldr	r2, [r7, #0]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d101      	bne.n	800f986 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800f982:	2301      	movs	r3, #1
 800f984:	e000      	b.n	800f988 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800f986:	2300      	movs	r3, #0
}
 800f988:	4618      	mov	r0, r3
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	69da      	ldr	r2, [r3, #28]
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	4013      	ands	r3, r2
 800f9a6:	683a      	ldr	r2, [r7, #0]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d101      	bne.n	800f9b0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e000      	b.n	800f9b2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	370c      	adds	r7, #12
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
	...

0800f9c0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800f9c4:	2102      	movs	r1, #2
 800f9c6:	4818      	ldr	r0, [pc, #96]	@ (800fa28 <HW_IPCC_Rx_Handler+0x68>)
 800f9c8:	f7ff ffe4 	bl	800f994 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d008      	beq.n	800f9e4 <HW_IPCC_Rx_Handler+0x24>
 800f9d2:	4b15      	ldr	r3, [pc, #84]	@ (800fa28 <HW_IPCC_Rx_Handler+0x68>)
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	f003 0302 	and.w	r3, r3, #2
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d102      	bne.n	800f9e4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800f9de:	f000 f8d5 	bl	800fb8c <HW_IPCC_SYS_EvtHandler>
 800f9e2:	e01e      	b.n	800fa22 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	4810      	ldr	r0, [pc, #64]	@ (800fa28 <HW_IPCC_Rx_Handler+0x68>)
 800f9e8:	f7ff ffd4 	bl	800f994 <LL_C2_IPCC_IsActiveFlag_CHx>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d008      	beq.n	800fa04 <HW_IPCC_Rx_Handler+0x44>
 800f9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800fa28 <HW_IPCC_Rx_Handler+0x68>)
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	f003 0301 	and.w	r3, r3, #1
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d102      	bne.n	800fa04 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800f9fe:	f000 f889 	bl	800fb14 <HW_IPCC_BLE_EvtHandler>
 800fa02:	e00e      	b.n	800fa22 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800fa04:	2108      	movs	r1, #8
 800fa06:	4808      	ldr	r0, [pc, #32]	@ (800fa28 <HW_IPCC_Rx_Handler+0x68>)
 800fa08:	f7ff ffc4 	bl	800f994 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d008      	beq.n	800fa24 <HW_IPCC_Rx_Handler+0x64>
 800fa12:	4b05      	ldr	r3, [pc, #20]	@ (800fa28 <HW_IPCC_Rx_Handler+0x68>)
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	f003 0308 	and.w	r3, r3, #8
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d102      	bne.n	800fa24 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800fa1e:	f000 f901 	bl	800fc24 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800fa22:	bf00      	nop
 800fa24:	bf00      	nop
}
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	58000c00 	.word	0x58000c00

0800fa2c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800fa30:	2102      	movs	r1, #2
 800fa32:	4818      	ldr	r0, [pc, #96]	@ (800fa94 <HW_IPCC_Tx_Handler+0x68>)
 800fa34:	f7ff ff99 	bl	800f96a <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d108      	bne.n	800fa50 <HW_IPCC_Tx_Handler+0x24>
 800fa3e:	4b15      	ldr	r3, [pc, #84]	@ (800fa94 <HW_IPCC_Tx_Handler+0x68>)
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d102      	bne.n	800fa50 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fa4a:	f000 f893 	bl	800fb74 <HW_IPCC_SYS_CmdEvtHandler>
 800fa4e:	e01e      	b.n	800fa8e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800fa50:	2108      	movs	r1, #8
 800fa52:	4810      	ldr	r0, [pc, #64]	@ (800fa94 <HW_IPCC_Tx_Handler+0x68>)
 800fa54:	f7ff ff89 	bl	800f96a <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d108      	bne.n	800fa70 <HW_IPCC_Tx_Handler+0x44>
 800fa5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa94 <HW_IPCC_Tx_Handler+0x68>)
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d102      	bne.n	800fa70 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800fa6a:	f000 f8bd 	bl	800fbe8 <HW_IPCC_MM_FreeBufHandler>
 800fa6e:	e00e      	b.n	800fa8e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800fa70:	2120      	movs	r1, #32
 800fa72:	4808      	ldr	r0, [pc, #32]	@ (800fa94 <HW_IPCC_Tx_Handler+0x68>)
 800fa74:	f7ff ff79 	bl	800f96a <LL_C1_IPCC_IsActiveFlag_CHx>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d108      	bne.n	800fa90 <HW_IPCC_Tx_Handler+0x64>
 800fa7e:	4b05      	ldr	r3, [pc, #20]	@ (800fa94 <HW_IPCC_Tx_Handler+0x68>)
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d102      	bne.n	800fa90 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800fa8a:	f000 f84f 	bl	800fb2c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800fa8e:	bf00      	nop
 800fa90:	bf00      	nop
}
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	58000c00 	.word	0x58000c00

0800fa98 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800fa9c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800faa0:	f7ff fed3 	bl	800f84a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800faa4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800faa8:	f7ff fea4 	bl	800f7f4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800faac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fab0:	f7ff fe8c 	bl	800f7cc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800fab4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800fab6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800fab8:	f7ff fe78 	bl	800f7ac <LL_PWR_EnableBootC2>

  return;
 800fabc:	bf00      	nop
}
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800fac4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800fac8:	f7ff fea6 	bl	800f818 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800facc:	4806      	ldr	r0, [pc, #24]	@ (800fae8 <HW_IPCC_Init+0x28>)
 800face:	f7ff fee8 	bl	800f8a2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800fad2:	4805      	ldr	r0, [pc, #20]	@ (800fae8 <HW_IPCC_Init+0x28>)
 800fad4:	f7ff fed5 	bl	800f882 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800fad8:	202c      	movs	r0, #44	@ 0x2c
 800fada:	f7f5 fc78 	bl	80053ce <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800fade:	202d      	movs	r0, #45	@ 0x2d
 800fae0:	f7f5 fc75 	bl	80053ce <HAL_NVIC_EnableIRQ>

  return;
 800fae4:	bf00      	nop
}
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	58000c00 	.word	0x58000c00

0800faec <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800faec:	b580      	push	{r7, lr}
 800faee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800faf0:	2101      	movs	r1, #1
 800faf2:	4802      	ldr	r0, [pc, #8]	@ (800fafc <HW_IPCC_BLE_Init+0x10>)
 800faf4:	f7ff ff0a 	bl	800f90c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800faf8:	bf00      	nop
}
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	58000c00 	.word	0x58000c00

0800fb00 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800fb04:	2101      	movs	r1, #1
 800fb06:	4802      	ldr	r0, [pc, #8]	@ (800fb10 <HW_IPCC_BLE_SendCmd+0x10>)
 800fb08:	f7ff ff20 	bl	800f94c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fb0c:	bf00      	nop
}
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	58000c00 	.word	0x58000c00

0800fb14 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800fb18:	f7fe fed2 	bl	800e8c0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800fb1c:	2101      	movs	r1, #1
 800fb1e:	4802      	ldr	r0, [pc, #8]	@ (800fb28 <HW_IPCC_BLE_EvtHandler+0x14>)
 800fb20:	f7ff ff06 	bl	800f930 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fb24:	bf00      	nop
}
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	58000c00 	.word	0x58000c00

0800fb2c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800fb30:	2120      	movs	r1, #32
 800fb32:	4803      	ldr	r0, [pc, #12]	@ (800fb40 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800fb34:	f7ff fed8 	bl	800f8e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800fb38:	f7fe fef2 	bl	800e920 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800fb3c:	bf00      	nop
}
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	58000c00 	.word	0x58000c00

0800fb44 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fb48:	2102      	movs	r1, #2
 800fb4a:	4802      	ldr	r0, [pc, #8]	@ (800fb54 <HW_IPCC_SYS_Init+0x10>)
 800fb4c:	f7ff fede 	bl	800f90c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fb50:	bf00      	nop
}
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	58000c00 	.word	0x58000c00

0800fb58 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb5c:	2102      	movs	r1, #2
 800fb5e:	4804      	ldr	r0, [pc, #16]	@ (800fb70 <HW_IPCC_SYS_SendCmd+0x18>)
 800fb60:	f7ff fef4 	bl	800f94c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb64:	2102      	movs	r1, #2
 800fb66:	4802      	ldr	r0, [pc, #8]	@ (800fb70 <HW_IPCC_SYS_SendCmd+0x18>)
 800fb68:	f7ff feab 	bl	800f8c2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800fb6c:	bf00      	nop
}
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	58000c00 	.word	0x58000c00

0800fb74 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fb78:	2102      	movs	r1, #2
 800fb7a:	4803      	ldr	r0, [pc, #12]	@ (800fb88 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800fb7c:	f7ff feb4 	bl	800f8e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800fb80:	f7fe ff1e 	bl	800e9c0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800fb84:	bf00      	nop
}
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	58000c00 	.word	0x58000c00

0800fb8c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800fb90:	f7fe ff2c 	bl	800e9ec <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fb94:	2102      	movs	r1, #2
 800fb96:	4802      	ldr	r0, [pc, #8]	@ (800fba0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800fb98:	f7ff feca 	bl	800f930 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fb9c:	bf00      	nop
}
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	58000c00 	.word	0x58000c00

0800fba4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800fbac:	2108      	movs	r1, #8
 800fbae:	480c      	ldr	r0, [pc, #48]	@ (800fbe0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fbb0:	f7ff fedb 	bl	800f96a <LL_C1_IPCC_IsActiveFlag_CHx>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d007      	beq.n	800fbca <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800fbba:	4a0a      	ldr	r2, [pc, #40]	@ (800fbe4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fbc0:	2108      	movs	r1, #8
 800fbc2:	4807      	ldr	r0, [pc, #28]	@ (800fbe0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fbc4:	f7ff fe7d 	bl	800f8c2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800fbc8:	e006      	b.n	800fbd8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fbce:	2108      	movs	r1, #8
 800fbd0:	4803      	ldr	r0, [pc, #12]	@ (800fbe0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fbd2:	f7ff febb 	bl	800f94c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800fbd6:	bf00      	nop
}
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	58000c00 	.word	0x58000c00
 800fbe4:	2000094c 	.word	0x2000094c

0800fbe8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fbec:	2108      	movs	r1, #8
 800fbee:	4806      	ldr	r0, [pc, #24]	@ (800fc08 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fbf0:	f7ff fe7a 	bl	800f8e8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800fbf4:	4b05      	ldr	r3, [pc, #20]	@ (800fc0c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fbfa:	2108      	movs	r1, #8
 800fbfc:	4802      	ldr	r0, [pc, #8]	@ (800fc08 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fbfe:	f7ff fea5 	bl	800f94c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fc02:	bf00      	nop
}
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	58000c00 	.word	0x58000c00
 800fc0c:	2000094c 	.word	0x2000094c

0800fc10 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fc14:	2108      	movs	r1, #8
 800fc16:	4802      	ldr	r0, [pc, #8]	@ (800fc20 <HW_IPCC_TRACES_Init+0x10>)
 800fc18:	f7ff fe78 	bl	800f90c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fc1c:	bf00      	nop
}
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	58000c00 	.word	0x58000c00

0800fc24 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800fc28:	f7fe ff88 	bl	800eb3c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fc2c:	2108      	movs	r1, #8
 800fc2e:	4802      	ldr	r0, [pc, #8]	@ (800fc38 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800fc30:	f7ff fe7e 	bl	800f930 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fc34:	bf00      	nop
}
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	58000c00 	.word	0x58000c00

0800fc3c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800fc40:	4b05      	ldr	r3, [pc, #20]	@ (800fc58 <UTIL_LPM_Init+0x1c>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800fc46:	4b05      	ldr	r3, [pc, #20]	@ (800fc5c <UTIL_LPM_Init+0x20>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800fc4c:	bf00      	nop
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr
 800fc56:	bf00      	nop
 800fc58:	20000950 	.word	0x20000950
 800fc5c:	20000954 	.word	0x20000954

0800fc60 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800fc60:	b480      	push	{r7}
 800fc62:	b087      	sub	sp, #28
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	460b      	mov	r3, r1
 800fc6a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc6c:	f3ef 8310 	mrs	r3, PRIMASK
 800fc70:	613b      	str	r3, [r7, #16]
  return(result);
 800fc72:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800fc74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc76:	b672      	cpsid	i
}
 800fc78:	bf00      	nop
  
  switch(state)
 800fc7a:	78fb      	ldrb	r3, [r7, #3]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d008      	beq.n	800fc92 <UTIL_LPM_SetOffMode+0x32>
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d10e      	bne.n	800fca2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800fc84:	4b0d      	ldr	r3, [pc, #52]	@ (800fcbc <UTIL_LPM_SetOffMode+0x5c>)
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	4a0b      	ldr	r2, [pc, #44]	@ (800fcbc <UTIL_LPM_SetOffMode+0x5c>)
 800fc8e:	6013      	str	r3, [r2, #0]
      break;
 800fc90:	e008      	b.n	800fca4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	43da      	mvns	r2, r3
 800fc96:	4b09      	ldr	r3, [pc, #36]	@ (800fcbc <UTIL_LPM_SetOffMode+0x5c>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4013      	ands	r3, r2
 800fc9c:	4a07      	ldr	r2, [pc, #28]	@ (800fcbc <UTIL_LPM_SetOffMode+0x5c>)
 800fc9e:	6013      	str	r3, [r2, #0]
      break;
 800fca0:	e000      	b.n	800fca4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800fca2:	bf00      	nop
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f383 8810 	msr	PRIMASK, r3
}
 800fcae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800fcb0:	bf00      	nop
 800fcb2:	371c      	adds	r7, #28
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr
 800fcbc:	20000954 	.word	0x20000954

0800fcc0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b090      	sub	sp, #64	@ 0x40
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800fcc8:	4b73      	ldr	r3, [pc, #460]	@ (800fe98 <UTIL_SEQ_Run+0x1d8>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800fcce:	4b72      	ldr	r3, [pc, #456]	@ (800fe98 <UTIL_SEQ_Run+0x1d8>)
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4013      	ands	r3, r2
 800fcd6:	4a70      	ldr	r2, [pc, #448]	@ (800fe98 <UTIL_SEQ_Run+0x1d8>)
 800fcd8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800fcda:	4b70      	ldr	r3, [pc, #448]	@ (800fe9c <UTIL_SEQ_Run+0x1dc>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800fce0:	4b6f      	ldr	r3, [pc, #444]	@ (800fea0 <UTIL_SEQ_Run+0x1e0>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800fce6:	4b6f      	ldr	r3, [pc, #444]	@ (800fea4 <UTIL_SEQ_Run+0x1e4>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800fcec:	4b6e      	ldr	r3, [pc, #440]	@ (800fea8 <UTIL_SEQ_Run+0x1e8>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800fcf2:	e08d      	b.n	800fe10 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800fcf8:	e002      	b.n	800fd00 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800fcfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800fd00:	4a6a      	ldr	r2, [pc, #424]	@ (800feac <UTIL_SEQ_Run+0x1ec>)
 800fd02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800fd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0a:	401a      	ands	r2, r3
 800fd0c:	4b62      	ldr	r3, [pc, #392]	@ (800fe98 <UTIL_SEQ_Run+0x1d8>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4013      	ands	r3, r2
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d0f1      	beq.n	800fcfa <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800fd16:	4a65      	ldr	r2, [pc, #404]	@ (800feac <UTIL_SEQ_Run+0x1ec>)
 800fd18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd1a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd20:	401a      	ands	r2, r3
 800fd22:	4b5d      	ldr	r3, [pc, #372]	@ (800fe98 <UTIL_SEQ_Run+0x1d8>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	4013      	ands	r3, r2
 800fd28:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800fd2a:	4a60      	ldr	r2, [pc, #384]	@ (800feac <UTIL_SEQ_Run+0x1ec>)
 800fd2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd2e:	00db      	lsls	r3, r3, #3
 800fd30:	4413      	add	r3, r2
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd36:	4013      	ands	r3, r2
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d106      	bne.n	800fd4a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800fd3c:	4a5b      	ldr	r2, [pc, #364]	@ (800feac <UTIL_SEQ_Run+0x1ec>)
 800fd3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd40:	00db      	lsls	r3, r3, #3
 800fd42:	4413      	add	r3, r2
 800fd44:	f04f 32ff 	mov.w	r2, #4294967295
 800fd48:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800fd4a:	4a58      	ldr	r2, [pc, #352]	@ (800feac <UTIL_SEQ_Run+0x1ec>)
 800fd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd4e:	00db      	lsls	r3, r3, #3
 800fd50:	4413      	add	r3, r2
 800fd52:	685a      	ldr	r2, [r3, #4]
 800fd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd56:	4013      	ands	r3, r2
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f000 f9b3 	bl	80100c4 <SEQ_BitPosition>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	461a      	mov	r2, r3
 800fd62:	4b53      	ldr	r3, [pc, #332]	@ (800feb0 <UTIL_SEQ_Run+0x1f0>)
 800fd64:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800fd66:	4a51      	ldr	r2, [pc, #324]	@ (800feac <UTIL_SEQ_Run+0x1ec>)
 800fd68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	4413      	add	r3, r2
 800fd6e:	685a      	ldr	r2, [r3, #4]
 800fd70:	4b4f      	ldr	r3, [pc, #316]	@ (800feb0 <UTIL_SEQ_Run+0x1f0>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2101      	movs	r1, #1
 800fd76:	fa01 f303 	lsl.w	r3, r1, r3
 800fd7a:	43db      	mvns	r3, r3
 800fd7c:	401a      	ands	r2, r3
 800fd7e:	494b      	ldr	r1, [pc, #300]	@ (800feac <UTIL_SEQ_Run+0x1ec>)
 800fd80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd82:	00db      	lsls	r3, r3, #3
 800fd84:	440b      	add	r3, r1
 800fd86:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd88:	f3ef 8310 	mrs	r3, PRIMASK
 800fd8c:	61bb      	str	r3, [r7, #24]
  return(result);
 800fd8e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800fd90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd92:	b672      	cpsid	i
}
 800fd94:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800fd96:	4b46      	ldr	r3, [pc, #280]	@ (800feb0 <UTIL_SEQ_Run+0x1f0>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2201      	movs	r2, #1
 800fd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800fda0:	43da      	mvns	r2, r3
 800fda2:	4b3e      	ldr	r3, [pc, #248]	@ (800fe9c <UTIL_SEQ_Run+0x1dc>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4013      	ands	r3, r2
 800fda8:	4a3c      	ldr	r2, [pc, #240]	@ (800fe9c <UTIL_SEQ_Run+0x1dc>)
 800fdaa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800fdac:	2302      	movs	r3, #2
 800fdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdb0:	e013      	b.n	800fdda <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800fdb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdb4:	3b01      	subs	r3, #1
 800fdb6:	4a3d      	ldr	r2, [pc, #244]	@ (800feac <UTIL_SEQ_Run+0x1ec>)
 800fdb8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800fdbc:	4b3c      	ldr	r3, [pc, #240]	@ (800feb0 <UTIL_SEQ_Run+0x1f0>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	fa02 f303 	lsl.w	r3, r2, r3
 800fdc6:	43da      	mvns	r2, r3
 800fdc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdca:	3b01      	subs	r3, #1
 800fdcc:	400a      	ands	r2, r1
 800fdce:	4937      	ldr	r1, [pc, #220]	@ (800feac <UTIL_SEQ_Run+0x1ec>)
 800fdd0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800fdd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d1e8      	bne.n	800fdb2 <UTIL_SEQ_Run+0xf2>
 800fde0:	6a3b      	ldr	r3, [r7, #32]
 800fde2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	f383 8810 	msr	PRIMASK, r3
}
 800fdea:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800fdec:	4b30      	ldr	r3, [pc, #192]	@ (800feb0 <UTIL_SEQ_Run+0x1f0>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4a30      	ldr	r2, [pc, #192]	@ (800feb4 <UTIL_SEQ_Run+0x1f4>)
 800fdf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdf6:	4798      	blx	r3

    local_taskset = TaskSet;
 800fdf8:	4b28      	ldr	r3, [pc, #160]	@ (800fe9c <UTIL_SEQ_Run+0x1dc>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800fdfe:	4b28      	ldr	r3, [pc, #160]	@ (800fea0 <UTIL_SEQ_Run+0x1e0>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800fe04:	4b27      	ldr	r3, [pc, #156]	@ (800fea4 <UTIL_SEQ_Run+0x1e4>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800fe0a:	4b27      	ldr	r3, [pc, #156]	@ (800fea8 <UTIL_SEQ_Run+0x1e8>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800fe10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe14:	401a      	ands	r2, r3
 800fe16:	4b20      	ldr	r3, [pc, #128]	@ (800fe98 <UTIL_SEQ_Run+0x1d8>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d005      	beq.n	800fe2c <UTIL_SEQ_Run+0x16c>
 800fe20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fe22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe24:	4013      	ands	r3, r2
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f43f af64 	beq.w	800fcf4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800fe2c:	4b20      	ldr	r3, [pc, #128]	@ (800feb0 <UTIL_SEQ_Run+0x1f0>)
 800fe2e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe32:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800fe34:	f000 f938 	bl	80100a8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe38:	f3ef 8310 	mrs	r3, PRIMASK
 800fe3c:	613b      	str	r3, [r7, #16]
  return(result);
 800fe3e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800fe40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe42:	b672      	cpsid	i
}
 800fe44:	bf00      	nop
  local_taskset = TaskSet;
 800fe46:	4b15      	ldr	r3, [pc, #84]	@ (800fe9c <UTIL_SEQ_Run+0x1dc>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800fe4c:	4b14      	ldr	r3, [pc, #80]	@ (800fea0 <UTIL_SEQ_Run+0x1e0>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800fe52:	4b14      	ldr	r3, [pc, #80]	@ (800fea4 <UTIL_SEQ_Run+0x1e4>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800fe58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5c:	401a      	ands	r2, r3
 800fe5e:	4b0e      	ldr	r3, [pc, #56]	@ (800fe98 <UTIL_SEQ_Run+0x1d8>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4013      	ands	r3, r2
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d107      	bne.n	800fe78 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800fe68:	4b0f      	ldr	r3, [pc, #60]	@ (800fea8 <UTIL_SEQ_Run+0x1e8>)
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe6e:	4013      	ands	r3, r2
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d101      	bne.n	800fe78 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800fe74:	f7f3 f851 	bl	8002f1a <UTIL_SEQ_Idle>
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f383 8810 	msr	PRIMASK, r3
}
 800fe82:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800fe84:	f000 f917 	bl	80100b6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800fe88:	4a03      	ldr	r2, [pc, #12]	@ (800fe98 <UTIL_SEQ_Run+0x1d8>)
 800fe8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe8c:	6013      	str	r3, [r2, #0]

  return;
 800fe8e:	bf00      	nop
}
 800fe90:	3740      	adds	r7, #64	@ 0x40
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	20000034 	.word	0x20000034
 800fe9c:	20000958 	.word	0x20000958
 800fea0:	2000095c 	.word	0x2000095c
 800fea4:	20000030 	.word	0x20000030
 800fea8:	20000960 	.word	0x20000960
 800feac:	200009e8 	.word	0x200009e8
 800feb0:	20000964 	.word	0x20000964
 800feb4:	20000968 	.word	0x20000968

0800feb8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b088      	sub	sp, #32
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fec4:	f3ef 8310 	mrs	r3, PRIMASK
 800fec8:	617b      	str	r3, [r7, #20]
  return(result);
 800feca:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800fecc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800fece:	b672      	cpsid	i
}
 800fed0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800fed2:	68f8      	ldr	r0, [r7, #12]
 800fed4:	f000 f8f6 	bl	80100c4 <SEQ_BitPosition>
 800fed8:	4603      	mov	r3, r0
 800feda:	4619      	mov	r1, r3
 800fedc:	4a06      	ldr	r2, [pc, #24]	@ (800fef8 <UTIL_SEQ_RegTask+0x40>)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	f383 8810 	msr	PRIMASK, r3
}
 800feee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800fef0:	bf00      	nop
}
 800fef2:	3720      	adds	r7, #32
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	20000968 	.word	0x20000968

0800fefc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800fefc:	b480      	push	{r7}
 800fefe:	b087      	sub	sp, #28
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff06:	f3ef 8310 	mrs	r3, PRIMASK
 800ff0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ff0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff10:	b672      	cpsid	i
}
 800ff12:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ff14:	4b0d      	ldr	r3, [pc, #52]	@ (800ff4c <UTIL_SEQ_SetTask+0x50>)
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	4a0b      	ldr	r2, [pc, #44]	@ (800ff4c <UTIL_SEQ_SetTask+0x50>)
 800ff1e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ff20:	4a0b      	ldr	r2, [pc, #44]	@ (800ff50 <UTIL_SEQ_SetTask+0x54>)
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	431a      	orrs	r2, r3
 800ff2c:	4908      	ldr	r1, [pc, #32]	@ (800ff50 <UTIL_SEQ_SetTask+0x54>)
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	f383 8810 	msr	PRIMASK, r3
}
 800ff3e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ff40:	bf00      	nop
}
 800ff42:	371c      	adds	r7, #28
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	20000958 	.word	0x20000958
 800ff50:	200009e8 	.word	0x200009e8

0800ff54 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ff54:	b480      	push	{r7}
 800ff56:	b087      	sub	sp, #28
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ff60:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff62:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ff64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff66:	b672      	cpsid	i
}
 800ff68:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	43da      	mvns	r2, r3
 800ff6e:	4b08      	ldr	r3, [pc, #32]	@ (800ff90 <UTIL_SEQ_PauseTask+0x3c>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4013      	ands	r3, r2
 800ff74:	4a06      	ldr	r2, [pc, #24]	@ (800ff90 <UTIL_SEQ_PauseTask+0x3c>)
 800ff76:	6013      	str	r3, [r2, #0]
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	f383 8810 	msr	PRIMASK, r3
}
 800ff82:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ff84:	bf00      	nop
}
 800ff86:	371c      	adds	r7, #28
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	20000030 	.word	0x20000030

0800ff94 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ff94:	b480      	push	{r7}
 800ff96:	b087      	sub	sp, #28
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff9c:	f3ef 8310 	mrs	r3, PRIMASK
 800ffa0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ffa2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ffa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ffa6:	b672      	cpsid	i
}
 800ffa8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ffaa:	4b09      	ldr	r3, [pc, #36]	@ (800ffd0 <UTIL_SEQ_ResumeTask+0x3c>)
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	4a07      	ldr	r2, [pc, #28]	@ (800ffd0 <UTIL_SEQ_ResumeTask+0x3c>)
 800ffb4:	6013      	str	r3, [r2, #0]
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	f383 8810 	msr	PRIMASK, r3
}
 800ffc0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ffc2:	bf00      	nop
}
 800ffc4:	371c      	adds	r7, #28
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	20000030 	.word	0x20000030

0800ffd4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b087      	sub	sp, #28
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffdc:	f3ef 8310 	mrs	r3, PRIMASK
 800ffe0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ffe4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ffe6:	b672      	cpsid	i
}
 800ffe8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ffea:	4b09      	ldr	r3, [pc, #36]	@ (8010010 <UTIL_SEQ_SetEvt+0x3c>)
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	4313      	orrs	r3, r2
 800fff2:	4a07      	ldr	r2, [pc, #28]	@ (8010010 <UTIL_SEQ_SetEvt+0x3c>)
 800fff4:	6013      	str	r3, [r2, #0]
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	f383 8810 	msr	PRIMASK, r3
}
 8010000:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010002:	bf00      	nop
}
 8010004:	371c      	adds	r7, #28
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	2000095c 	.word	0x2000095c

08010014 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b088      	sub	sp, #32
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801001c:	4b1f      	ldr	r3, [pc, #124]	@ (801009c <UTIL_SEQ_WaitEvt+0x88>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8010022:	4b1e      	ldr	r3, [pc, #120]	@ (801009c <UTIL_SEQ_WaitEvt+0x88>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801002a:	d102      	bne.n	8010032 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801002c:	2300      	movs	r3, #0
 801002e:	61fb      	str	r3, [r7, #28]
 8010030:	e005      	b.n	801003e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8010032:	4b1a      	ldr	r3, [pc, #104]	@ (801009c <UTIL_SEQ_WaitEvt+0x88>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	2201      	movs	r2, #1
 8010038:	fa02 f303 	lsl.w	r3, r2, r3
 801003c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801003e:	4b18      	ldr	r3, [pc, #96]	@ (80100a0 <UTIL_SEQ_WaitEvt+0x8c>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8010044:	4a16      	ldr	r2, [pc, #88]	@ (80100a0 <UTIL_SEQ_WaitEvt+0x8c>)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801004a:	e003      	b.n	8010054 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801004c:	6879      	ldr	r1, [r7, #4]
 801004e:	69f8      	ldr	r0, [r7, #28]
 8010050:	f7f2 ff6a 	bl	8002f28 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8010054:	4b13      	ldr	r3, [pc, #76]	@ (80100a4 <UTIL_SEQ_WaitEvt+0x90>)
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	4013      	ands	r3, r2
 801005c:	2b00      	cmp	r3, #0
 801005e:	d0f5      	beq.n	801004c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8010060:	4a0e      	ldr	r2, [pc, #56]	@ (801009c <UTIL_SEQ_WaitEvt+0x88>)
 8010062:	69bb      	ldr	r3, [r7, #24]
 8010064:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010066:	f3ef 8310 	mrs	r3, PRIMASK
 801006a:	60bb      	str	r3, [r7, #8]
  return(result);
 801006c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801006e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010070:	b672      	cpsid	i
}
 8010072:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	43da      	mvns	r2, r3
 8010078:	4b0a      	ldr	r3, [pc, #40]	@ (80100a4 <UTIL_SEQ_WaitEvt+0x90>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4013      	ands	r3, r2
 801007e:	4a09      	ldr	r2, [pc, #36]	@ (80100a4 <UTIL_SEQ_WaitEvt+0x90>)
 8010080:	6013      	str	r3, [r2, #0]
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f383 8810 	msr	PRIMASK, r3
}
 801008c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801008e:	4a04      	ldr	r2, [pc, #16]	@ (80100a0 <UTIL_SEQ_WaitEvt+0x8c>)
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	6013      	str	r3, [r2, #0]
  return;
 8010094:	bf00      	nop
}
 8010096:	3720      	adds	r7, #32
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	20000964 	.word	0x20000964
 80100a0:	20000960 	.word	0x20000960
 80100a4:	2000095c 	.word	0x2000095c

080100a8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80100a8:	b480      	push	{r7}
 80100aa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80100ac:	bf00      	nop
}
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr

080100b6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80100b6:	b480      	push	{r7}
 80100b8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80100ba:	bf00      	nop
}
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80100cc:	2300      	movs	r3, #0
 80100ce:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100da:	d204      	bcs.n	80100e6 <SEQ_BitPosition+0x22>
 80100dc:	2310      	movs	r3, #16
 80100de:	73fb      	strb	r3, [r7, #15]
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	041b      	lsls	r3, r3, #16
 80100e4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80100ec:	d205      	bcs.n	80100fa <SEQ_BitPosition+0x36>
 80100ee:	7bfb      	ldrb	r3, [r7, #15]
 80100f0:	3308      	adds	r3, #8
 80100f2:	73fb      	strb	r3, [r7, #15]
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	021b      	lsls	r3, r3, #8
 80100f8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010100:	d205      	bcs.n	801010e <SEQ_BitPosition+0x4a>
 8010102:	7bfb      	ldrb	r3, [r7, #15]
 8010104:	3304      	adds	r3, #4
 8010106:	73fb      	strb	r3, [r7, #15]
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	011b      	lsls	r3, r3, #4
 801010c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	0f1b      	lsrs	r3, r3, #28
 8010112:	4a07      	ldr	r2, [pc, #28]	@ (8010130 <SEQ_BitPosition+0x6c>)
 8010114:	5cd2      	ldrb	r2, [r2, r3]
 8010116:	7bfb      	ldrb	r3, [r7, #15]
 8010118:	4413      	add	r3, r2
 801011a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801011c:	7bfb      	ldrb	r3, [r7, #15]
 801011e:	f1c3 031f 	rsb	r3, r3, #31
 8010122:	b2db      	uxtb	r3, r3
}
 8010124:	4618      	mov	r0, r3
 8010126:	3714      	adds	r7, #20
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr
 8010130:	08014ff8 	.word	0x08014ff8

08010134 <_calloc_r>:
 8010134:	b570      	push	{r4, r5, r6, lr}
 8010136:	fba1 5402 	umull	r5, r4, r1, r2
 801013a:	b93c      	cbnz	r4, 801014c <_calloc_r+0x18>
 801013c:	4629      	mov	r1, r5
 801013e:	f000 f83f 	bl	80101c0 <_malloc_r>
 8010142:	4606      	mov	r6, r0
 8010144:	b928      	cbnz	r0, 8010152 <_calloc_r+0x1e>
 8010146:	2600      	movs	r6, #0
 8010148:	4630      	mov	r0, r6
 801014a:	bd70      	pop	{r4, r5, r6, pc}
 801014c:	220c      	movs	r2, #12
 801014e:	6002      	str	r2, [r0, #0]
 8010150:	e7f9      	b.n	8010146 <_calloc_r+0x12>
 8010152:	462a      	mov	r2, r5
 8010154:	4621      	mov	r1, r4
 8010156:	f001 ffa7 	bl	80120a8 <memset>
 801015a:	e7f5      	b.n	8010148 <_calloc_r+0x14>

0801015c <malloc>:
 801015c:	4b02      	ldr	r3, [pc, #8]	@ (8010168 <malloc+0xc>)
 801015e:	4601      	mov	r1, r0
 8010160:	6818      	ldr	r0, [r3, #0]
 8010162:	f000 b82d 	b.w	80101c0 <_malloc_r>
 8010166:	bf00      	nop
 8010168:	200001b0 	.word	0x200001b0

0801016c <free>:
 801016c:	4b02      	ldr	r3, [pc, #8]	@ (8010178 <free+0xc>)
 801016e:	4601      	mov	r1, r0
 8010170:	6818      	ldr	r0, [r3, #0]
 8010172:	f002 bea5 	b.w	8012ec0 <_free_r>
 8010176:	bf00      	nop
 8010178:	200001b0 	.word	0x200001b0

0801017c <sbrk_aligned>:
 801017c:	b570      	push	{r4, r5, r6, lr}
 801017e:	4e0f      	ldr	r6, [pc, #60]	@ (80101bc <sbrk_aligned+0x40>)
 8010180:	460c      	mov	r4, r1
 8010182:	6831      	ldr	r1, [r6, #0]
 8010184:	4605      	mov	r5, r0
 8010186:	b911      	cbnz	r1, 801018e <sbrk_aligned+0x12>
 8010188:	f001 ffe0 	bl	801214c <_sbrk_r>
 801018c:	6030      	str	r0, [r6, #0]
 801018e:	4621      	mov	r1, r4
 8010190:	4628      	mov	r0, r5
 8010192:	f001 ffdb 	bl	801214c <_sbrk_r>
 8010196:	1c43      	adds	r3, r0, #1
 8010198:	d103      	bne.n	80101a2 <sbrk_aligned+0x26>
 801019a:	f04f 34ff 	mov.w	r4, #4294967295
 801019e:	4620      	mov	r0, r4
 80101a0:	bd70      	pop	{r4, r5, r6, pc}
 80101a2:	1cc4      	adds	r4, r0, #3
 80101a4:	f024 0403 	bic.w	r4, r4, #3
 80101a8:	42a0      	cmp	r0, r4
 80101aa:	d0f8      	beq.n	801019e <sbrk_aligned+0x22>
 80101ac:	1a21      	subs	r1, r4, r0
 80101ae:	4628      	mov	r0, r5
 80101b0:	f001 ffcc 	bl	801214c <_sbrk_r>
 80101b4:	3001      	adds	r0, #1
 80101b6:	d1f2      	bne.n	801019e <sbrk_aligned+0x22>
 80101b8:	e7ef      	b.n	801019a <sbrk_aligned+0x1e>
 80101ba:	bf00      	nop
 80101bc:	200009f8 	.word	0x200009f8

080101c0 <_malloc_r>:
 80101c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101c4:	1ccd      	adds	r5, r1, #3
 80101c6:	f025 0503 	bic.w	r5, r5, #3
 80101ca:	3508      	adds	r5, #8
 80101cc:	2d0c      	cmp	r5, #12
 80101ce:	bf38      	it	cc
 80101d0:	250c      	movcc	r5, #12
 80101d2:	2d00      	cmp	r5, #0
 80101d4:	4606      	mov	r6, r0
 80101d6:	db01      	blt.n	80101dc <_malloc_r+0x1c>
 80101d8:	42a9      	cmp	r1, r5
 80101da:	d904      	bls.n	80101e6 <_malloc_r+0x26>
 80101dc:	230c      	movs	r3, #12
 80101de:	6033      	str	r3, [r6, #0]
 80101e0:	2000      	movs	r0, #0
 80101e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80102bc <_malloc_r+0xfc>
 80101ea:	f000 f869 	bl	80102c0 <__malloc_lock>
 80101ee:	f8d8 3000 	ldr.w	r3, [r8]
 80101f2:	461c      	mov	r4, r3
 80101f4:	bb44      	cbnz	r4, 8010248 <_malloc_r+0x88>
 80101f6:	4629      	mov	r1, r5
 80101f8:	4630      	mov	r0, r6
 80101fa:	f7ff ffbf 	bl	801017c <sbrk_aligned>
 80101fe:	1c43      	adds	r3, r0, #1
 8010200:	4604      	mov	r4, r0
 8010202:	d158      	bne.n	80102b6 <_malloc_r+0xf6>
 8010204:	f8d8 4000 	ldr.w	r4, [r8]
 8010208:	4627      	mov	r7, r4
 801020a:	2f00      	cmp	r7, #0
 801020c:	d143      	bne.n	8010296 <_malloc_r+0xd6>
 801020e:	2c00      	cmp	r4, #0
 8010210:	d04b      	beq.n	80102aa <_malloc_r+0xea>
 8010212:	6823      	ldr	r3, [r4, #0]
 8010214:	4639      	mov	r1, r7
 8010216:	4630      	mov	r0, r6
 8010218:	eb04 0903 	add.w	r9, r4, r3
 801021c:	f001 ff96 	bl	801214c <_sbrk_r>
 8010220:	4581      	cmp	r9, r0
 8010222:	d142      	bne.n	80102aa <_malloc_r+0xea>
 8010224:	6821      	ldr	r1, [r4, #0]
 8010226:	1a6d      	subs	r5, r5, r1
 8010228:	4629      	mov	r1, r5
 801022a:	4630      	mov	r0, r6
 801022c:	f7ff ffa6 	bl	801017c <sbrk_aligned>
 8010230:	3001      	adds	r0, #1
 8010232:	d03a      	beq.n	80102aa <_malloc_r+0xea>
 8010234:	6823      	ldr	r3, [r4, #0]
 8010236:	442b      	add	r3, r5
 8010238:	6023      	str	r3, [r4, #0]
 801023a:	f8d8 3000 	ldr.w	r3, [r8]
 801023e:	685a      	ldr	r2, [r3, #4]
 8010240:	bb62      	cbnz	r2, 801029c <_malloc_r+0xdc>
 8010242:	f8c8 7000 	str.w	r7, [r8]
 8010246:	e00f      	b.n	8010268 <_malloc_r+0xa8>
 8010248:	6822      	ldr	r2, [r4, #0]
 801024a:	1b52      	subs	r2, r2, r5
 801024c:	d420      	bmi.n	8010290 <_malloc_r+0xd0>
 801024e:	2a0b      	cmp	r2, #11
 8010250:	d917      	bls.n	8010282 <_malloc_r+0xc2>
 8010252:	1961      	adds	r1, r4, r5
 8010254:	42a3      	cmp	r3, r4
 8010256:	6025      	str	r5, [r4, #0]
 8010258:	bf18      	it	ne
 801025a:	6059      	strne	r1, [r3, #4]
 801025c:	6863      	ldr	r3, [r4, #4]
 801025e:	bf08      	it	eq
 8010260:	f8c8 1000 	streq.w	r1, [r8]
 8010264:	5162      	str	r2, [r4, r5]
 8010266:	604b      	str	r3, [r1, #4]
 8010268:	4630      	mov	r0, r6
 801026a:	f000 f82f 	bl	80102cc <__malloc_unlock>
 801026e:	f104 000b 	add.w	r0, r4, #11
 8010272:	1d23      	adds	r3, r4, #4
 8010274:	f020 0007 	bic.w	r0, r0, #7
 8010278:	1ac2      	subs	r2, r0, r3
 801027a:	bf1c      	itt	ne
 801027c:	1a1b      	subne	r3, r3, r0
 801027e:	50a3      	strne	r3, [r4, r2]
 8010280:	e7af      	b.n	80101e2 <_malloc_r+0x22>
 8010282:	6862      	ldr	r2, [r4, #4]
 8010284:	42a3      	cmp	r3, r4
 8010286:	bf0c      	ite	eq
 8010288:	f8c8 2000 	streq.w	r2, [r8]
 801028c:	605a      	strne	r2, [r3, #4]
 801028e:	e7eb      	b.n	8010268 <_malloc_r+0xa8>
 8010290:	4623      	mov	r3, r4
 8010292:	6864      	ldr	r4, [r4, #4]
 8010294:	e7ae      	b.n	80101f4 <_malloc_r+0x34>
 8010296:	463c      	mov	r4, r7
 8010298:	687f      	ldr	r7, [r7, #4]
 801029a:	e7b6      	b.n	801020a <_malloc_r+0x4a>
 801029c:	461a      	mov	r2, r3
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	42a3      	cmp	r3, r4
 80102a2:	d1fb      	bne.n	801029c <_malloc_r+0xdc>
 80102a4:	2300      	movs	r3, #0
 80102a6:	6053      	str	r3, [r2, #4]
 80102a8:	e7de      	b.n	8010268 <_malloc_r+0xa8>
 80102aa:	230c      	movs	r3, #12
 80102ac:	6033      	str	r3, [r6, #0]
 80102ae:	4630      	mov	r0, r6
 80102b0:	f000 f80c 	bl	80102cc <__malloc_unlock>
 80102b4:	e794      	b.n	80101e0 <_malloc_r+0x20>
 80102b6:	6005      	str	r5, [r0, #0]
 80102b8:	e7d6      	b.n	8010268 <_malloc_r+0xa8>
 80102ba:	bf00      	nop
 80102bc:	200009fc 	.word	0x200009fc

080102c0 <__malloc_lock>:
 80102c0:	4801      	ldr	r0, [pc, #4]	@ (80102c8 <__malloc_lock+0x8>)
 80102c2:	f001 bf90 	b.w	80121e6 <__retarget_lock_acquire_recursive>
 80102c6:	bf00      	nop
 80102c8:	20000b40 	.word	0x20000b40

080102cc <__malloc_unlock>:
 80102cc:	4801      	ldr	r0, [pc, #4]	@ (80102d4 <__malloc_unlock+0x8>)
 80102ce:	f001 bf8b 	b.w	80121e8 <__retarget_lock_release_recursive>
 80102d2:	bf00      	nop
 80102d4:	20000b40 	.word	0x20000b40

080102d8 <realloc>:
 80102d8:	4b02      	ldr	r3, [pc, #8]	@ (80102e4 <realloc+0xc>)
 80102da:	460a      	mov	r2, r1
 80102dc:	4601      	mov	r1, r0
 80102de:	6818      	ldr	r0, [r3, #0]
 80102e0:	f000 b802 	b.w	80102e8 <_realloc_r>
 80102e4:	200001b0 	.word	0x200001b0

080102e8 <_realloc_r>:
 80102e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ec:	4680      	mov	r8, r0
 80102ee:	4615      	mov	r5, r2
 80102f0:	460c      	mov	r4, r1
 80102f2:	b921      	cbnz	r1, 80102fe <_realloc_r+0x16>
 80102f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102f8:	4611      	mov	r1, r2
 80102fa:	f7ff bf61 	b.w	80101c0 <_malloc_r>
 80102fe:	b92a      	cbnz	r2, 801030c <_realloc_r+0x24>
 8010300:	f002 fdde 	bl	8012ec0 <_free_r>
 8010304:	2400      	movs	r4, #0
 8010306:	4620      	mov	r0, r4
 8010308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801030c:	f003 fe20 	bl	8013f50 <_malloc_usable_size_r>
 8010310:	4285      	cmp	r5, r0
 8010312:	4606      	mov	r6, r0
 8010314:	d802      	bhi.n	801031c <_realloc_r+0x34>
 8010316:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801031a:	d8f4      	bhi.n	8010306 <_realloc_r+0x1e>
 801031c:	4629      	mov	r1, r5
 801031e:	4640      	mov	r0, r8
 8010320:	f7ff ff4e 	bl	80101c0 <_malloc_r>
 8010324:	4607      	mov	r7, r0
 8010326:	2800      	cmp	r0, #0
 8010328:	d0ec      	beq.n	8010304 <_realloc_r+0x1c>
 801032a:	42b5      	cmp	r5, r6
 801032c:	462a      	mov	r2, r5
 801032e:	4621      	mov	r1, r4
 8010330:	bf28      	it	cs
 8010332:	4632      	movcs	r2, r6
 8010334:	f001 ff59 	bl	80121ea <memcpy>
 8010338:	4621      	mov	r1, r4
 801033a:	4640      	mov	r0, r8
 801033c:	f002 fdc0 	bl	8012ec0 <_free_r>
 8010340:	463c      	mov	r4, r7
 8010342:	e7e0      	b.n	8010306 <_realloc_r+0x1e>

08010344 <sulp>:
 8010344:	b570      	push	{r4, r5, r6, lr}
 8010346:	4604      	mov	r4, r0
 8010348:	460d      	mov	r5, r1
 801034a:	ec45 4b10 	vmov	d0, r4, r5
 801034e:	4616      	mov	r6, r2
 8010350:	f003 fcc0 	bl	8013cd4 <__ulp>
 8010354:	ec51 0b10 	vmov	r0, r1, d0
 8010358:	b17e      	cbz	r6, 801037a <sulp+0x36>
 801035a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801035e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010362:	2b00      	cmp	r3, #0
 8010364:	dd09      	ble.n	801037a <sulp+0x36>
 8010366:	051b      	lsls	r3, r3, #20
 8010368:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801036c:	2400      	movs	r4, #0
 801036e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010372:	4622      	mov	r2, r4
 8010374:	462b      	mov	r3, r5
 8010376:	f7f0 f927 	bl	80005c8 <__aeabi_dmul>
 801037a:	ec41 0b10 	vmov	d0, r0, r1
 801037e:	bd70      	pop	{r4, r5, r6, pc}

08010380 <_strtod_l>:
 8010380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010384:	b09f      	sub	sp, #124	@ 0x7c
 8010386:	460c      	mov	r4, r1
 8010388:	9217      	str	r2, [sp, #92]	@ 0x5c
 801038a:	2200      	movs	r2, #0
 801038c:	921a      	str	r2, [sp, #104]	@ 0x68
 801038e:	9005      	str	r0, [sp, #20]
 8010390:	f04f 0a00 	mov.w	sl, #0
 8010394:	f04f 0b00 	mov.w	fp, #0
 8010398:	460a      	mov	r2, r1
 801039a:	9219      	str	r2, [sp, #100]	@ 0x64
 801039c:	7811      	ldrb	r1, [r2, #0]
 801039e:	292b      	cmp	r1, #43	@ 0x2b
 80103a0:	d04a      	beq.n	8010438 <_strtod_l+0xb8>
 80103a2:	d838      	bhi.n	8010416 <_strtod_l+0x96>
 80103a4:	290d      	cmp	r1, #13
 80103a6:	d832      	bhi.n	801040e <_strtod_l+0x8e>
 80103a8:	2908      	cmp	r1, #8
 80103aa:	d832      	bhi.n	8010412 <_strtod_l+0x92>
 80103ac:	2900      	cmp	r1, #0
 80103ae:	d03b      	beq.n	8010428 <_strtod_l+0xa8>
 80103b0:	2200      	movs	r2, #0
 80103b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80103b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80103b6:	782a      	ldrb	r2, [r5, #0]
 80103b8:	2a30      	cmp	r2, #48	@ 0x30
 80103ba:	f040 80b3 	bne.w	8010524 <_strtod_l+0x1a4>
 80103be:	786a      	ldrb	r2, [r5, #1]
 80103c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80103c4:	2a58      	cmp	r2, #88	@ 0x58
 80103c6:	d16e      	bne.n	80104a6 <_strtod_l+0x126>
 80103c8:	9302      	str	r3, [sp, #8]
 80103ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103cc:	9301      	str	r3, [sp, #4]
 80103ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	4a8e      	ldr	r2, [pc, #568]	@ (801060c <_strtod_l+0x28c>)
 80103d4:	9805      	ldr	r0, [sp, #20]
 80103d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80103d8:	a919      	add	r1, sp, #100	@ 0x64
 80103da:	f002 fe23 	bl	8013024 <__gethex>
 80103de:	f010 060f 	ands.w	r6, r0, #15
 80103e2:	4604      	mov	r4, r0
 80103e4:	d005      	beq.n	80103f2 <_strtod_l+0x72>
 80103e6:	2e06      	cmp	r6, #6
 80103e8:	d128      	bne.n	801043c <_strtod_l+0xbc>
 80103ea:	3501      	adds	r5, #1
 80103ec:	2300      	movs	r3, #0
 80103ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80103f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f040 858e 	bne.w	8010f16 <_strtod_l+0xb96>
 80103fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103fc:	b1cb      	cbz	r3, 8010432 <_strtod_l+0xb2>
 80103fe:	4652      	mov	r2, sl
 8010400:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010404:	ec43 2b10 	vmov	d0, r2, r3
 8010408:	b01f      	add	sp, #124	@ 0x7c
 801040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040e:	2920      	cmp	r1, #32
 8010410:	d1ce      	bne.n	80103b0 <_strtod_l+0x30>
 8010412:	3201      	adds	r2, #1
 8010414:	e7c1      	b.n	801039a <_strtod_l+0x1a>
 8010416:	292d      	cmp	r1, #45	@ 0x2d
 8010418:	d1ca      	bne.n	80103b0 <_strtod_l+0x30>
 801041a:	2101      	movs	r1, #1
 801041c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801041e:	1c51      	adds	r1, r2, #1
 8010420:	9119      	str	r1, [sp, #100]	@ 0x64
 8010422:	7852      	ldrb	r2, [r2, #1]
 8010424:	2a00      	cmp	r2, #0
 8010426:	d1c5      	bne.n	80103b4 <_strtod_l+0x34>
 8010428:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801042a:	9419      	str	r4, [sp, #100]	@ 0x64
 801042c:	2b00      	cmp	r3, #0
 801042e:	f040 8570 	bne.w	8010f12 <_strtod_l+0xb92>
 8010432:	4652      	mov	r2, sl
 8010434:	465b      	mov	r3, fp
 8010436:	e7e5      	b.n	8010404 <_strtod_l+0x84>
 8010438:	2100      	movs	r1, #0
 801043a:	e7ef      	b.n	801041c <_strtod_l+0x9c>
 801043c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801043e:	b13a      	cbz	r2, 8010450 <_strtod_l+0xd0>
 8010440:	2135      	movs	r1, #53	@ 0x35
 8010442:	a81c      	add	r0, sp, #112	@ 0x70
 8010444:	f003 fd40 	bl	8013ec8 <__copybits>
 8010448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801044a:	9805      	ldr	r0, [sp, #20]
 801044c:	f003 f90e 	bl	801366c <_Bfree>
 8010450:	3e01      	subs	r6, #1
 8010452:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010454:	2e04      	cmp	r6, #4
 8010456:	d806      	bhi.n	8010466 <_strtod_l+0xe6>
 8010458:	e8df f006 	tbb	[pc, r6]
 801045c:	201d0314 	.word	0x201d0314
 8010460:	14          	.byte	0x14
 8010461:	00          	.byte	0x00
 8010462:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010466:	05e1      	lsls	r1, r4, #23
 8010468:	bf48      	it	mi
 801046a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801046e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010472:	0d1b      	lsrs	r3, r3, #20
 8010474:	051b      	lsls	r3, r3, #20
 8010476:	2b00      	cmp	r3, #0
 8010478:	d1bb      	bne.n	80103f2 <_strtod_l+0x72>
 801047a:	f001 fe89 	bl	8012190 <__errno>
 801047e:	2322      	movs	r3, #34	@ 0x22
 8010480:	6003      	str	r3, [r0, #0]
 8010482:	e7b6      	b.n	80103f2 <_strtod_l+0x72>
 8010484:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010488:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801048c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010490:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010494:	e7e7      	b.n	8010466 <_strtod_l+0xe6>
 8010496:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8010614 <_strtod_l+0x294>
 801049a:	e7e4      	b.n	8010466 <_strtod_l+0xe6>
 801049c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80104a0:	f04f 3aff 	mov.w	sl, #4294967295
 80104a4:	e7df      	b.n	8010466 <_strtod_l+0xe6>
 80104a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104a8:	1c5a      	adds	r2, r3, #1
 80104aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80104ac:	785b      	ldrb	r3, [r3, #1]
 80104ae:	2b30      	cmp	r3, #48	@ 0x30
 80104b0:	d0f9      	beq.n	80104a6 <_strtod_l+0x126>
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d09d      	beq.n	80103f2 <_strtod_l+0x72>
 80104b6:	2301      	movs	r3, #1
 80104b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80104ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80104be:	2300      	movs	r3, #0
 80104c0:	9308      	str	r3, [sp, #32]
 80104c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80104c4:	461f      	mov	r7, r3
 80104c6:	220a      	movs	r2, #10
 80104c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80104ca:	7805      	ldrb	r5, [r0, #0]
 80104cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80104d0:	b2d9      	uxtb	r1, r3
 80104d2:	2909      	cmp	r1, #9
 80104d4:	d928      	bls.n	8010528 <_strtod_l+0x1a8>
 80104d6:	494e      	ldr	r1, [pc, #312]	@ (8010610 <_strtod_l+0x290>)
 80104d8:	2201      	movs	r2, #1
 80104da:	f001 fded 	bl	80120b8 <strncmp>
 80104de:	2800      	cmp	r0, #0
 80104e0:	d032      	beq.n	8010548 <_strtod_l+0x1c8>
 80104e2:	2000      	movs	r0, #0
 80104e4:	462a      	mov	r2, r5
 80104e6:	4681      	mov	r9, r0
 80104e8:	463d      	mov	r5, r7
 80104ea:	4603      	mov	r3, r0
 80104ec:	2a65      	cmp	r2, #101	@ 0x65
 80104ee:	d001      	beq.n	80104f4 <_strtod_l+0x174>
 80104f0:	2a45      	cmp	r2, #69	@ 0x45
 80104f2:	d114      	bne.n	801051e <_strtod_l+0x19e>
 80104f4:	b91d      	cbnz	r5, 80104fe <_strtod_l+0x17e>
 80104f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104f8:	4302      	orrs	r2, r0
 80104fa:	d095      	beq.n	8010428 <_strtod_l+0xa8>
 80104fc:	2500      	movs	r5, #0
 80104fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010500:	1c62      	adds	r2, r4, #1
 8010502:	9219      	str	r2, [sp, #100]	@ 0x64
 8010504:	7862      	ldrb	r2, [r4, #1]
 8010506:	2a2b      	cmp	r2, #43	@ 0x2b
 8010508:	d077      	beq.n	80105fa <_strtod_l+0x27a>
 801050a:	2a2d      	cmp	r2, #45	@ 0x2d
 801050c:	d07b      	beq.n	8010606 <_strtod_l+0x286>
 801050e:	f04f 0c00 	mov.w	ip, #0
 8010512:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010516:	2909      	cmp	r1, #9
 8010518:	f240 8082 	bls.w	8010620 <_strtod_l+0x2a0>
 801051c:	9419      	str	r4, [sp, #100]	@ 0x64
 801051e:	f04f 0800 	mov.w	r8, #0
 8010522:	e0a2      	b.n	801066a <_strtod_l+0x2ea>
 8010524:	2300      	movs	r3, #0
 8010526:	e7c7      	b.n	80104b8 <_strtod_l+0x138>
 8010528:	2f08      	cmp	r7, #8
 801052a:	bfd5      	itete	le
 801052c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801052e:	9908      	ldrgt	r1, [sp, #32]
 8010530:	fb02 3301 	mlale	r3, r2, r1, r3
 8010534:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010538:	f100 0001 	add.w	r0, r0, #1
 801053c:	bfd4      	ite	le
 801053e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010540:	9308      	strgt	r3, [sp, #32]
 8010542:	3701      	adds	r7, #1
 8010544:	9019      	str	r0, [sp, #100]	@ 0x64
 8010546:	e7bf      	b.n	80104c8 <_strtod_l+0x148>
 8010548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801054a:	1c5a      	adds	r2, r3, #1
 801054c:	9219      	str	r2, [sp, #100]	@ 0x64
 801054e:	785a      	ldrb	r2, [r3, #1]
 8010550:	b37f      	cbz	r7, 80105b2 <_strtod_l+0x232>
 8010552:	4681      	mov	r9, r0
 8010554:	463d      	mov	r5, r7
 8010556:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801055a:	2b09      	cmp	r3, #9
 801055c:	d912      	bls.n	8010584 <_strtod_l+0x204>
 801055e:	2301      	movs	r3, #1
 8010560:	e7c4      	b.n	80104ec <_strtod_l+0x16c>
 8010562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010564:	1c5a      	adds	r2, r3, #1
 8010566:	9219      	str	r2, [sp, #100]	@ 0x64
 8010568:	785a      	ldrb	r2, [r3, #1]
 801056a:	3001      	adds	r0, #1
 801056c:	2a30      	cmp	r2, #48	@ 0x30
 801056e:	d0f8      	beq.n	8010562 <_strtod_l+0x1e2>
 8010570:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010574:	2b08      	cmp	r3, #8
 8010576:	f200 84d3 	bhi.w	8010f20 <_strtod_l+0xba0>
 801057a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801057c:	930c      	str	r3, [sp, #48]	@ 0x30
 801057e:	4681      	mov	r9, r0
 8010580:	2000      	movs	r0, #0
 8010582:	4605      	mov	r5, r0
 8010584:	3a30      	subs	r2, #48	@ 0x30
 8010586:	f100 0301 	add.w	r3, r0, #1
 801058a:	d02a      	beq.n	80105e2 <_strtod_l+0x262>
 801058c:	4499      	add	r9, r3
 801058e:	eb00 0c05 	add.w	ip, r0, r5
 8010592:	462b      	mov	r3, r5
 8010594:	210a      	movs	r1, #10
 8010596:	4563      	cmp	r3, ip
 8010598:	d10d      	bne.n	80105b6 <_strtod_l+0x236>
 801059a:	1c69      	adds	r1, r5, #1
 801059c:	4401      	add	r1, r0
 801059e:	4428      	add	r0, r5
 80105a0:	2808      	cmp	r0, #8
 80105a2:	dc16      	bgt.n	80105d2 <_strtod_l+0x252>
 80105a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80105a6:	230a      	movs	r3, #10
 80105a8:	fb03 2300 	mla	r3, r3, r0, r2
 80105ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80105ae:	2300      	movs	r3, #0
 80105b0:	e018      	b.n	80105e4 <_strtod_l+0x264>
 80105b2:	4638      	mov	r0, r7
 80105b4:	e7da      	b.n	801056c <_strtod_l+0x1ec>
 80105b6:	2b08      	cmp	r3, #8
 80105b8:	f103 0301 	add.w	r3, r3, #1
 80105bc:	dc03      	bgt.n	80105c6 <_strtod_l+0x246>
 80105be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80105c0:	434e      	muls	r6, r1
 80105c2:	960a      	str	r6, [sp, #40]	@ 0x28
 80105c4:	e7e7      	b.n	8010596 <_strtod_l+0x216>
 80105c6:	2b10      	cmp	r3, #16
 80105c8:	bfde      	ittt	le
 80105ca:	9e08      	ldrle	r6, [sp, #32]
 80105cc:	434e      	mulle	r6, r1
 80105ce:	9608      	strle	r6, [sp, #32]
 80105d0:	e7e1      	b.n	8010596 <_strtod_l+0x216>
 80105d2:	280f      	cmp	r0, #15
 80105d4:	dceb      	bgt.n	80105ae <_strtod_l+0x22e>
 80105d6:	9808      	ldr	r0, [sp, #32]
 80105d8:	230a      	movs	r3, #10
 80105da:	fb03 2300 	mla	r3, r3, r0, r2
 80105de:	9308      	str	r3, [sp, #32]
 80105e0:	e7e5      	b.n	80105ae <_strtod_l+0x22e>
 80105e2:	4629      	mov	r1, r5
 80105e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80105e6:	1c50      	adds	r0, r2, #1
 80105e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80105ea:	7852      	ldrb	r2, [r2, #1]
 80105ec:	4618      	mov	r0, r3
 80105ee:	460d      	mov	r5, r1
 80105f0:	e7b1      	b.n	8010556 <_strtod_l+0x1d6>
 80105f2:	f04f 0900 	mov.w	r9, #0
 80105f6:	2301      	movs	r3, #1
 80105f8:	e77d      	b.n	80104f6 <_strtod_l+0x176>
 80105fa:	f04f 0c00 	mov.w	ip, #0
 80105fe:	1ca2      	adds	r2, r4, #2
 8010600:	9219      	str	r2, [sp, #100]	@ 0x64
 8010602:	78a2      	ldrb	r2, [r4, #2]
 8010604:	e785      	b.n	8010512 <_strtod_l+0x192>
 8010606:	f04f 0c01 	mov.w	ip, #1
 801060a:	e7f8      	b.n	80105fe <_strtod_l+0x27e>
 801060c:	08015020 	.word	0x08015020
 8010610:	08015008 	.word	0x08015008
 8010614:	7ff00000 	.word	0x7ff00000
 8010618:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801061a:	1c51      	adds	r1, r2, #1
 801061c:	9119      	str	r1, [sp, #100]	@ 0x64
 801061e:	7852      	ldrb	r2, [r2, #1]
 8010620:	2a30      	cmp	r2, #48	@ 0x30
 8010622:	d0f9      	beq.n	8010618 <_strtod_l+0x298>
 8010624:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010628:	2908      	cmp	r1, #8
 801062a:	f63f af78 	bhi.w	801051e <_strtod_l+0x19e>
 801062e:	3a30      	subs	r2, #48	@ 0x30
 8010630:	920e      	str	r2, [sp, #56]	@ 0x38
 8010632:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010634:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010636:	f04f 080a 	mov.w	r8, #10
 801063a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801063c:	1c56      	adds	r6, r2, #1
 801063e:	9619      	str	r6, [sp, #100]	@ 0x64
 8010640:	7852      	ldrb	r2, [r2, #1]
 8010642:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010646:	f1be 0f09 	cmp.w	lr, #9
 801064a:	d939      	bls.n	80106c0 <_strtod_l+0x340>
 801064c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801064e:	1a76      	subs	r6, r6, r1
 8010650:	2e08      	cmp	r6, #8
 8010652:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010656:	dc03      	bgt.n	8010660 <_strtod_l+0x2e0>
 8010658:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801065a:	4588      	cmp	r8, r1
 801065c:	bfa8      	it	ge
 801065e:	4688      	movge	r8, r1
 8010660:	f1bc 0f00 	cmp.w	ip, #0
 8010664:	d001      	beq.n	801066a <_strtod_l+0x2ea>
 8010666:	f1c8 0800 	rsb	r8, r8, #0
 801066a:	2d00      	cmp	r5, #0
 801066c:	d14e      	bne.n	801070c <_strtod_l+0x38c>
 801066e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010670:	4308      	orrs	r0, r1
 8010672:	f47f aebe 	bne.w	80103f2 <_strtod_l+0x72>
 8010676:	2b00      	cmp	r3, #0
 8010678:	f47f aed6 	bne.w	8010428 <_strtod_l+0xa8>
 801067c:	2a69      	cmp	r2, #105	@ 0x69
 801067e:	d028      	beq.n	80106d2 <_strtod_l+0x352>
 8010680:	dc25      	bgt.n	80106ce <_strtod_l+0x34e>
 8010682:	2a49      	cmp	r2, #73	@ 0x49
 8010684:	d025      	beq.n	80106d2 <_strtod_l+0x352>
 8010686:	2a4e      	cmp	r2, #78	@ 0x4e
 8010688:	f47f aece 	bne.w	8010428 <_strtod_l+0xa8>
 801068c:	499b      	ldr	r1, [pc, #620]	@ (80108fc <_strtod_l+0x57c>)
 801068e:	a819      	add	r0, sp, #100	@ 0x64
 8010690:	f002 feea 	bl	8013468 <__match>
 8010694:	2800      	cmp	r0, #0
 8010696:	f43f aec7 	beq.w	8010428 <_strtod_l+0xa8>
 801069a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	2b28      	cmp	r3, #40	@ 0x28
 80106a0:	d12e      	bne.n	8010700 <_strtod_l+0x380>
 80106a2:	4997      	ldr	r1, [pc, #604]	@ (8010900 <_strtod_l+0x580>)
 80106a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80106a6:	a819      	add	r0, sp, #100	@ 0x64
 80106a8:	f002 fef2 	bl	8013490 <__hexnan>
 80106ac:	2805      	cmp	r0, #5
 80106ae:	d127      	bne.n	8010700 <_strtod_l+0x380>
 80106b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80106b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80106b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80106ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80106be:	e698      	b.n	80103f2 <_strtod_l+0x72>
 80106c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80106c2:	fb08 2101 	mla	r1, r8, r1, r2
 80106c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80106ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80106cc:	e7b5      	b.n	801063a <_strtod_l+0x2ba>
 80106ce:	2a6e      	cmp	r2, #110	@ 0x6e
 80106d0:	e7da      	b.n	8010688 <_strtod_l+0x308>
 80106d2:	498c      	ldr	r1, [pc, #560]	@ (8010904 <_strtod_l+0x584>)
 80106d4:	a819      	add	r0, sp, #100	@ 0x64
 80106d6:	f002 fec7 	bl	8013468 <__match>
 80106da:	2800      	cmp	r0, #0
 80106dc:	f43f aea4 	beq.w	8010428 <_strtod_l+0xa8>
 80106e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106e2:	4989      	ldr	r1, [pc, #548]	@ (8010908 <_strtod_l+0x588>)
 80106e4:	3b01      	subs	r3, #1
 80106e6:	a819      	add	r0, sp, #100	@ 0x64
 80106e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80106ea:	f002 febd 	bl	8013468 <__match>
 80106ee:	b910      	cbnz	r0, 80106f6 <_strtod_l+0x376>
 80106f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106f2:	3301      	adds	r3, #1
 80106f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80106f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010918 <_strtod_l+0x598>
 80106fa:	f04f 0a00 	mov.w	sl, #0
 80106fe:	e678      	b.n	80103f2 <_strtod_l+0x72>
 8010700:	4882      	ldr	r0, [pc, #520]	@ (801090c <_strtod_l+0x58c>)
 8010702:	f001 fd81 	bl	8012208 <nan>
 8010706:	ec5b ab10 	vmov	sl, fp, d0
 801070a:	e672      	b.n	80103f2 <_strtod_l+0x72>
 801070c:	eba8 0309 	sub.w	r3, r8, r9
 8010710:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010712:	9309      	str	r3, [sp, #36]	@ 0x24
 8010714:	2f00      	cmp	r7, #0
 8010716:	bf08      	it	eq
 8010718:	462f      	moveq	r7, r5
 801071a:	2d10      	cmp	r5, #16
 801071c:	462c      	mov	r4, r5
 801071e:	bfa8      	it	ge
 8010720:	2410      	movge	r4, #16
 8010722:	f7ef fed7 	bl	80004d4 <__aeabi_ui2d>
 8010726:	2d09      	cmp	r5, #9
 8010728:	4682      	mov	sl, r0
 801072a:	468b      	mov	fp, r1
 801072c:	dc13      	bgt.n	8010756 <_strtod_l+0x3d6>
 801072e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010730:	2b00      	cmp	r3, #0
 8010732:	f43f ae5e 	beq.w	80103f2 <_strtod_l+0x72>
 8010736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010738:	dd78      	ble.n	801082c <_strtod_l+0x4ac>
 801073a:	2b16      	cmp	r3, #22
 801073c:	dc5f      	bgt.n	80107fe <_strtod_l+0x47e>
 801073e:	4974      	ldr	r1, [pc, #464]	@ (8010910 <_strtod_l+0x590>)
 8010740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010748:	4652      	mov	r2, sl
 801074a:	465b      	mov	r3, fp
 801074c:	f7ef ff3c 	bl	80005c8 <__aeabi_dmul>
 8010750:	4682      	mov	sl, r0
 8010752:	468b      	mov	fp, r1
 8010754:	e64d      	b.n	80103f2 <_strtod_l+0x72>
 8010756:	4b6e      	ldr	r3, [pc, #440]	@ (8010910 <_strtod_l+0x590>)
 8010758:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801075c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010760:	f7ef ff32 	bl	80005c8 <__aeabi_dmul>
 8010764:	4682      	mov	sl, r0
 8010766:	9808      	ldr	r0, [sp, #32]
 8010768:	468b      	mov	fp, r1
 801076a:	f7ef feb3 	bl	80004d4 <__aeabi_ui2d>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	4650      	mov	r0, sl
 8010774:	4659      	mov	r1, fp
 8010776:	f7ef fd71 	bl	800025c <__adddf3>
 801077a:	2d0f      	cmp	r5, #15
 801077c:	4682      	mov	sl, r0
 801077e:	468b      	mov	fp, r1
 8010780:	ddd5      	ble.n	801072e <_strtod_l+0x3ae>
 8010782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010784:	1b2c      	subs	r4, r5, r4
 8010786:	441c      	add	r4, r3
 8010788:	2c00      	cmp	r4, #0
 801078a:	f340 8096 	ble.w	80108ba <_strtod_l+0x53a>
 801078e:	f014 030f 	ands.w	r3, r4, #15
 8010792:	d00a      	beq.n	80107aa <_strtod_l+0x42a>
 8010794:	495e      	ldr	r1, [pc, #376]	@ (8010910 <_strtod_l+0x590>)
 8010796:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801079a:	4652      	mov	r2, sl
 801079c:	465b      	mov	r3, fp
 801079e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107a2:	f7ef ff11 	bl	80005c8 <__aeabi_dmul>
 80107a6:	4682      	mov	sl, r0
 80107a8:	468b      	mov	fp, r1
 80107aa:	f034 040f 	bics.w	r4, r4, #15
 80107ae:	d073      	beq.n	8010898 <_strtod_l+0x518>
 80107b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80107b4:	dd48      	ble.n	8010848 <_strtod_l+0x4c8>
 80107b6:	2400      	movs	r4, #0
 80107b8:	46a0      	mov	r8, r4
 80107ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80107bc:	46a1      	mov	r9, r4
 80107be:	9a05      	ldr	r2, [sp, #20]
 80107c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010918 <_strtod_l+0x598>
 80107c4:	2322      	movs	r3, #34	@ 0x22
 80107c6:	6013      	str	r3, [r2, #0]
 80107c8:	f04f 0a00 	mov.w	sl, #0
 80107cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f43f ae0f 	beq.w	80103f2 <_strtod_l+0x72>
 80107d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80107d6:	9805      	ldr	r0, [sp, #20]
 80107d8:	f002 ff48 	bl	801366c <_Bfree>
 80107dc:	9805      	ldr	r0, [sp, #20]
 80107de:	4649      	mov	r1, r9
 80107e0:	f002 ff44 	bl	801366c <_Bfree>
 80107e4:	9805      	ldr	r0, [sp, #20]
 80107e6:	4641      	mov	r1, r8
 80107e8:	f002 ff40 	bl	801366c <_Bfree>
 80107ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80107ee:	9805      	ldr	r0, [sp, #20]
 80107f0:	f002 ff3c 	bl	801366c <_Bfree>
 80107f4:	9805      	ldr	r0, [sp, #20]
 80107f6:	4621      	mov	r1, r4
 80107f8:	f002 ff38 	bl	801366c <_Bfree>
 80107fc:	e5f9      	b.n	80103f2 <_strtod_l+0x72>
 80107fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010800:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010804:	4293      	cmp	r3, r2
 8010806:	dbbc      	blt.n	8010782 <_strtod_l+0x402>
 8010808:	4c41      	ldr	r4, [pc, #260]	@ (8010910 <_strtod_l+0x590>)
 801080a:	f1c5 050f 	rsb	r5, r5, #15
 801080e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010812:	4652      	mov	r2, sl
 8010814:	465b      	mov	r3, fp
 8010816:	e9d1 0100 	ldrd	r0, r1, [r1]
 801081a:	f7ef fed5 	bl	80005c8 <__aeabi_dmul>
 801081e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010820:	1b5d      	subs	r5, r3, r5
 8010822:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010826:	e9d4 2300 	ldrd	r2, r3, [r4]
 801082a:	e78f      	b.n	801074c <_strtod_l+0x3cc>
 801082c:	3316      	adds	r3, #22
 801082e:	dba8      	blt.n	8010782 <_strtod_l+0x402>
 8010830:	4b37      	ldr	r3, [pc, #220]	@ (8010910 <_strtod_l+0x590>)
 8010832:	eba9 0808 	sub.w	r8, r9, r8
 8010836:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801083a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801083e:	4650      	mov	r0, sl
 8010840:	4659      	mov	r1, fp
 8010842:	f7ef ffeb 	bl	800081c <__aeabi_ddiv>
 8010846:	e783      	b.n	8010750 <_strtod_l+0x3d0>
 8010848:	4b32      	ldr	r3, [pc, #200]	@ (8010914 <_strtod_l+0x594>)
 801084a:	9308      	str	r3, [sp, #32]
 801084c:	2300      	movs	r3, #0
 801084e:	1124      	asrs	r4, r4, #4
 8010850:	4650      	mov	r0, sl
 8010852:	4659      	mov	r1, fp
 8010854:	461e      	mov	r6, r3
 8010856:	2c01      	cmp	r4, #1
 8010858:	dc21      	bgt.n	801089e <_strtod_l+0x51e>
 801085a:	b10b      	cbz	r3, 8010860 <_strtod_l+0x4e0>
 801085c:	4682      	mov	sl, r0
 801085e:	468b      	mov	fp, r1
 8010860:	492c      	ldr	r1, [pc, #176]	@ (8010914 <_strtod_l+0x594>)
 8010862:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010866:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801086a:	4652      	mov	r2, sl
 801086c:	465b      	mov	r3, fp
 801086e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010872:	f7ef fea9 	bl	80005c8 <__aeabi_dmul>
 8010876:	4b28      	ldr	r3, [pc, #160]	@ (8010918 <_strtod_l+0x598>)
 8010878:	460a      	mov	r2, r1
 801087a:	400b      	ands	r3, r1
 801087c:	4927      	ldr	r1, [pc, #156]	@ (801091c <_strtod_l+0x59c>)
 801087e:	428b      	cmp	r3, r1
 8010880:	4682      	mov	sl, r0
 8010882:	d898      	bhi.n	80107b6 <_strtod_l+0x436>
 8010884:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010888:	428b      	cmp	r3, r1
 801088a:	bf86      	itte	hi
 801088c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010920 <_strtod_l+0x5a0>
 8010890:	f04f 3aff 	movhi.w	sl, #4294967295
 8010894:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010898:	2300      	movs	r3, #0
 801089a:	9308      	str	r3, [sp, #32]
 801089c:	e07a      	b.n	8010994 <_strtod_l+0x614>
 801089e:	07e2      	lsls	r2, r4, #31
 80108a0:	d505      	bpl.n	80108ae <_strtod_l+0x52e>
 80108a2:	9b08      	ldr	r3, [sp, #32]
 80108a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a8:	f7ef fe8e 	bl	80005c8 <__aeabi_dmul>
 80108ac:	2301      	movs	r3, #1
 80108ae:	9a08      	ldr	r2, [sp, #32]
 80108b0:	3208      	adds	r2, #8
 80108b2:	3601      	adds	r6, #1
 80108b4:	1064      	asrs	r4, r4, #1
 80108b6:	9208      	str	r2, [sp, #32]
 80108b8:	e7cd      	b.n	8010856 <_strtod_l+0x4d6>
 80108ba:	d0ed      	beq.n	8010898 <_strtod_l+0x518>
 80108bc:	4264      	negs	r4, r4
 80108be:	f014 020f 	ands.w	r2, r4, #15
 80108c2:	d00a      	beq.n	80108da <_strtod_l+0x55a>
 80108c4:	4b12      	ldr	r3, [pc, #72]	@ (8010910 <_strtod_l+0x590>)
 80108c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108ca:	4650      	mov	r0, sl
 80108cc:	4659      	mov	r1, fp
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	f7ef ffa3 	bl	800081c <__aeabi_ddiv>
 80108d6:	4682      	mov	sl, r0
 80108d8:	468b      	mov	fp, r1
 80108da:	1124      	asrs	r4, r4, #4
 80108dc:	d0dc      	beq.n	8010898 <_strtod_l+0x518>
 80108de:	2c1f      	cmp	r4, #31
 80108e0:	dd20      	ble.n	8010924 <_strtod_l+0x5a4>
 80108e2:	2400      	movs	r4, #0
 80108e4:	46a0      	mov	r8, r4
 80108e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80108e8:	46a1      	mov	r9, r4
 80108ea:	9a05      	ldr	r2, [sp, #20]
 80108ec:	2322      	movs	r3, #34	@ 0x22
 80108ee:	f04f 0a00 	mov.w	sl, #0
 80108f2:	f04f 0b00 	mov.w	fp, #0
 80108f6:	6013      	str	r3, [r2, #0]
 80108f8:	e768      	b.n	80107cc <_strtod_l+0x44c>
 80108fa:	bf00      	nop
 80108fc:	0801516e 	.word	0x0801516e
 8010900:	0801500c 	.word	0x0801500c
 8010904:	08015166 	.word	0x08015166
 8010908:	080151a5 	.word	0x080151a5
 801090c:	08015434 	.word	0x08015434
 8010910:	08015320 	.word	0x08015320
 8010914:	080152f8 	.word	0x080152f8
 8010918:	7ff00000 	.word	0x7ff00000
 801091c:	7ca00000 	.word	0x7ca00000
 8010920:	7fefffff 	.word	0x7fefffff
 8010924:	f014 0310 	ands.w	r3, r4, #16
 8010928:	bf18      	it	ne
 801092a:	236a      	movne	r3, #106	@ 0x6a
 801092c:	4ea9      	ldr	r6, [pc, #676]	@ (8010bd4 <_strtod_l+0x854>)
 801092e:	9308      	str	r3, [sp, #32]
 8010930:	4650      	mov	r0, sl
 8010932:	4659      	mov	r1, fp
 8010934:	2300      	movs	r3, #0
 8010936:	07e2      	lsls	r2, r4, #31
 8010938:	d504      	bpl.n	8010944 <_strtod_l+0x5c4>
 801093a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801093e:	f7ef fe43 	bl	80005c8 <__aeabi_dmul>
 8010942:	2301      	movs	r3, #1
 8010944:	1064      	asrs	r4, r4, #1
 8010946:	f106 0608 	add.w	r6, r6, #8
 801094a:	d1f4      	bne.n	8010936 <_strtod_l+0x5b6>
 801094c:	b10b      	cbz	r3, 8010952 <_strtod_l+0x5d2>
 801094e:	4682      	mov	sl, r0
 8010950:	468b      	mov	fp, r1
 8010952:	9b08      	ldr	r3, [sp, #32]
 8010954:	b1b3      	cbz	r3, 8010984 <_strtod_l+0x604>
 8010956:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801095a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801095e:	2b00      	cmp	r3, #0
 8010960:	4659      	mov	r1, fp
 8010962:	dd0f      	ble.n	8010984 <_strtod_l+0x604>
 8010964:	2b1f      	cmp	r3, #31
 8010966:	dd55      	ble.n	8010a14 <_strtod_l+0x694>
 8010968:	2b34      	cmp	r3, #52	@ 0x34
 801096a:	bfde      	ittt	le
 801096c:	f04f 33ff 	movle.w	r3, #4294967295
 8010970:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010974:	4093      	lslle	r3, r2
 8010976:	f04f 0a00 	mov.w	sl, #0
 801097a:	bfcc      	ite	gt
 801097c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010980:	ea03 0b01 	andle.w	fp, r3, r1
 8010984:	2200      	movs	r2, #0
 8010986:	2300      	movs	r3, #0
 8010988:	4650      	mov	r0, sl
 801098a:	4659      	mov	r1, fp
 801098c:	f7f0 f884 	bl	8000a98 <__aeabi_dcmpeq>
 8010990:	2800      	cmp	r0, #0
 8010992:	d1a6      	bne.n	80108e2 <_strtod_l+0x562>
 8010994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010996:	9300      	str	r3, [sp, #0]
 8010998:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801099a:	9805      	ldr	r0, [sp, #20]
 801099c:	462b      	mov	r3, r5
 801099e:	463a      	mov	r2, r7
 80109a0:	f002 fecc 	bl	801373c <__s2b>
 80109a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80109a6:	2800      	cmp	r0, #0
 80109a8:	f43f af05 	beq.w	80107b6 <_strtod_l+0x436>
 80109ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109ae:	2a00      	cmp	r2, #0
 80109b0:	eba9 0308 	sub.w	r3, r9, r8
 80109b4:	bfa8      	it	ge
 80109b6:	2300      	movge	r3, #0
 80109b8:	9312      	str	r3, [sp, #72]	@ 0x48
 80109ba:	2400      	movs	r4, #0
 80109bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80109c0:	9316      	str	r3, [sp, #88]	@ 0x58
 80109c2:	46a0      	mov	r8, r4
 80109c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109c6:	9805      	ldr	r0, [sp, #20]
 80109c8:	6859      	ldr	r1, [r3, #4]
 80109ca:	f002 fe0f 	bl	80135ec <_Balloc>
 80109ce:	4681      	mov	r9, r0
 80109d0:	2800      	cmp	r0, #0
 80109d2:	f43f aef4 	beq.w	80107be <_strtod_l+0x43e>
 80109d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109d8:	691a      	ldr	r2, [r3, #16]
 80109da:	3202      	adds	r2, #2
 80109dc:	f103 010c 	add.w	r1, r3, #12
 80109e0:	0092      	lsls	r2, r2, #2
 80109e2:	300c      	adds	r0, #12
 80109e4:	f001 fc01 	bl	80121ea <memcpy>
 80109e8:	ec4b ab10 	vmov	d0, sl, fp
 80109ec:	9805      	ldr	r0, [sp, #20]
 80109ee:	aa1c      	add	r2, sp, #112	@ 0x70
 80109f0:	a91b      	add	r1, sp, #108	@ 0x6c
 80109f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80109f6:	f003 f9dd 	bl	8013db4 <__d2b>
 80109fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80109fc:	2800      	cmp	r0, #0
 80109fe:	f43f aede 	beq.w	80107be <_strtod_l+0x43e>
 8010a02:	9805      	ldr	r0, [sp, #20]
 8010a04:	2101      	movs	r1, #1
 8010a06:	f002 ff2f 	bl	8013868 <__i2b>
 8010a0a:	4680      	mov	r8, r0
 8010a0c:	b948      	cbnz	r0, 8010a22 <_strtod_l+0x6a2>
 8010a0e:	f04f 0800 	mov.w	r8, #0
 8010a12:	e6d4      	b.n	80107be <_strtod_l+0x43e>
 8010a14:	f04f 32ff 	mov.w	r2, #4294967295
 8010a18:	fa02 f303 	lsl.w	r3, r2, r3
 8010a1c:	ea03 0a0a 	and.w	sl, r3, sl
 8010a20:	e7b0      	b.n	8010984 <_strtod_l+0x604>
 8010a22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010a24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010a26:	2d00      	cmp	r5, #0
 8010a28:	bfab      	itete	ge
 8010a2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010a2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010a2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010a30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010a32:	bfac      	ite	ge
 8010a34:	18ef      	addge	r7, r5, r3
 8010a36:	1b5e      	sublt	r6, r3, r5
 8010a38:	9b08      	ldr	r3, [sp, #32]
 8010a3a:	1aed      	subs	r5, r5, r3
 8010a3c:	4415      	add	r5, r2
 8010a3e:	4b66      	ldr	r3, [pc, #408]	@ (8010bd8 <_strtod_l+0x858>)
 8010a40:	3d01      	subs	r5, #1
 8010a42:	429d      	cmp	r5, r3
 8010a44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010a48:	da50      	bge.n	8010aec <_strtod_l+0x76c>
 8010a4a:	1b5b      	subs	r3, r3, r5
 8010a4c:	2b1f      	cmp	r3, #31
 8010a4e:	eba2 0203 	sub.w	r2, r2, r3
 8010a52:	f04f 0101 	mov.w	r1, #1
 8010a56:	dc3d      	bgt.n	8010ad4 <_strtod_l+0x754>
 8010a58:	fa01 f303 	lsl.w	r3, r1, r3
 8010a5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010a5e:	2300      	movs	r3, #0
 8010a60:	9310      	str	r3, [sp, #64]	@ 0x40
 8010a62:	18bd      	adds	r5, r7, r2
 8010a64:	9b08      	ldr	r3, [sp, #32]
 8010a66:	42af      	cmp	r7, r5
 8010a68:	4416      	add	r6, r2
 8010a6a:	441e      	add	r6, r3
 8010a6c:	463b      	mov	r3, r7
 8010a6e:	bfa8      	it	ge
 8010a70:	462b      	movge	r3, r5
 8010a72:	42b3      	cmp	r3, r6
 8010a74:	bfa8      	it	ge
 8010a76:	4633      	movge	r3, r6
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	bfc2      	ittt	gt
 8010a7c:	1aed      	subgt	r5, r5, r3
 8010a7e:	1af6      	subgt	r6, r6, r3
 8010a80:	1aff      	subgt	r7, r7, r3
 8010a82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	dd16      	ble.n	8010ab6 <_strtod_l+0x736>
 8010a88:	4641      	mov	r1, r8
 8010a8a:	9805      	ldr	r0, [sp, #20]
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	f002 ffab 	bl	80139e8 <__pow5mult>
 8010a92:	4680      	mov	r8, r0
 8010a94:	2800      	cmp	r0, #0
 8010a96:	d0ba      	beq.n	8010a0e <_strtod_l+0x68e>
 8010a98:	4601      	mov	r1, r0
 8010a9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010a9c:	9805      	ldr	r0, [sp, #20]
 8010a9e:	f002 fef9 	bl	8013894 <__multiply>
 8010aa2:	900e      	str	r0, [sp, #56]	@ 0x38
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	f43f ae8a 	beq.w	80107be <_strtod_l+0x43e>
 8010aaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010aac:	9805      	ldr	r0, [sp, #20]
 8010aae:	f002 fddd 	bl	801366c <_Bfree>
 8010ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ab4:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ab6:	2d00      	cmp	r5, #0
 8010ab8:	dc1d      	bgt.n	8010af6 <_strtod_l+0x776>
 8010aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	dd23      	ble.n	8010b08 <_strtod_l+0x788>
 8010ac0:	4649      	mov	r1, r9
 8010ac2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010ac4:	9805      	ldr	r0, [sp, #20]
 8010ac6:	f002 ff8f 	bl	80139e8 <__pow5mult>
 8010aca:	4681      	mov	r9, r0
 8010acc:	b9e0      	cbnz	r0, 8010b08 <_strtod_l+0x788>
 8010ace:	f04f 0900 	mov.w	r9, #0
 8010ad2:	e674      	b.n	80107be <_strtod_l+0x43e>
 8010ad4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010ad8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010adc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010ae0:	35e2      	adds	r5, #226	@ 0xe2
 8010ae2:	fa01 f305 	lsl.w	r3, r1, r5
 8010ae6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ae8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010aea:	e7ba      	b.n	8010a62 <_strtod_l+0x6e2>
 8010aec:	2300      	movs	r3, #0
 8010aee:	9310      	str	r3, [sp, #64]	@ 0x40
 8010af0:	2301      	movs	r3, #1
 8010af2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010af4:	e7b5      	b.n	8010a62 <_strtod_l+0x6e2>
 8010af6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010af8:	9805      	ldr	r0, [sp, #20]
 8010afa:	462a      	mov	r2, r5
 8010afc:	f002 ffce 	bl	8013a9c <__lshift>
 8010b00:	901a      	str	r0, [sp, #104]	@ 0x68
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d1d9      	bne.n	8010aba <_strtod_l+0x73a>
 8010b06:	e65a      	b.n	80107be <_strtod_l+0x43e>
 8010b08:	2e00      	cmp	r6, #0
 8010b0a:	dd07      	ble.n	8010b1c <_strtod_l+0x79c>
 8010b0c:	4649      	mov	r1, r9
 8010b0e:	9805      	ldr	r0, [sp, #20]
 8010b10:	4632      	mov	r2, r6
 8010b12:	f002 ffc3 	bl	8013a9c <__lshift>
 8010b16:	4681      	mov	r9, r0
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	d0d8      	beq.n	8010ace <_strtod_l+0x74e>
 8010b1c:	2f00      	cmp	r7, #0
 8010b1e:	dd08      	ble.n	8010b32 <_strtod_l+0x7b2>
 8010b20:	4641      	mov	r1, r8
 8010b22:	9805      	ldr	r0, [sp, #20]
 8010b24:	463a      	mov	r2, r7
 8010b26:	f002 ffb9 	bl	8013a9c <__lshift>
 8010b2a:	4680      	mov	r8, r0
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	f43f ae46 	beq.w	80107be <_strtod_l+0x43e>
 8010b32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010b34:	9805      	ldr	r0, [sp, #20]
 8010b36:	464a      	mov	r2, r9
 8010b38:	f003 f838 	bl	8013bac <__mdiff>
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	f43f ae3d 	beq.w	80107be <_strtod_l+0x43e>
 8010b44:	68c3      	ldr	r3, [r0, #12]
 8010b46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b48:	2300      	movs	r3, #0
 8010b4a:	60c3      	str	r3, [r0, #12]
 8010b4c:	4641      	mov	r1, r8
 8010b4e:	f003 f811 	bl	8013b74 <__mcmp>
 8010b52:	2800      	cmp	r0, #0
 8010b54:	da46      	bge.n	8010be4 <_strtod_l+0x864>
 8010b56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b58:	ea53 030a 	orrs.w	r3, r3, sl
 8010b5c:	d16c      	bne.n	8010c38 <_strtod_l+0x8b8>
 8010b5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d168      	bne.n	8010c38 <_strtod_l+0x8b8>
 8010b66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010b6a:	0d1b      	lsrs	r3, r3, #20
 8010b6c:	051b      	lsls	r3, r3, #20
 8010b6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010b72:	d961      	bls.n	8010c38 <_strtod_l+0x8b8>
 8010b74:	6963      	ldr	r3, [r4, #20]
 8010b76:	b913      	cbnz	r3, 8010b7e <_strtod_l+0x7fe>
 8010b78:	6923      	ldr	r3, [r4, #16]
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	dd5c      	ble.n	8010c38 <_strtod_l+0x8b8>
 8010b7e:	4621      	mov	r1, r4
 8010b80:	2201      	movs	r2, #1
 8010b82:	9805      	ldr	r0, [sp, #20]
 8010b84:	f002 ff8a 	bl	8013a9c <__lshift>
 8010b88:	4641      	mov	r1, r8
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	f002 fff2 	bl	8013b74 <__mcmp>
 8010b90:	2800      	cmp	r0, #0
 8010b92:	dd51      	ble.n	8010c38 <_strtod_l+0x8b8>
 8010b94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010b98:	9a08      	ldr	r2, [sp, #32]
 8010b9a:	0d1b      	lsrs	r3, r3, #20
 8010b9c:	051b      	lsls	r3, r3, #20
 8010b9e:	2a00      	cmp	r2, #0
 8010ba0:	d06b      	beq.n	8010c7a <_strtod_l+0x8fa>
 8010ba2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010ba6:	d868      	bhi.n	8010c7a <_strtod_l+0x8fa>
 8010ba8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010bac:	f67f ae9d 	bls.w	80108ea <_strtod_l+0x56a>
 8010bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8010bdc <_strtod_l+0x85c>)
 8010bb2:	4650      	mov	r0, sl
 8010bb4:	4659      	mov	r1, fp
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f7ef fd06 	bl	80005c8 <__aeabi_dmul>
 8010bbc:	4b08      	ldr	r3, [pc, #32]	@ (8010be0 <_strtod_l+0x860>)
 8010bbe:	400b      	ands	r3, r1
 8010bc0:	4682      	mov	sl, r0
 8010bc2:	468b      	mov	fp, r1
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f47f ae05 	bne.w	80107d4 <_strtod_l+0x454>
 8010bca:	9a05      	ldr	r2, [sp, #20]
 8010bcc:	2322      	movs	r3, #34	@ 0x22
 8010bce:	6013      	str	r3, [r2, #0]
 8010bd0:	e600      	b.n	80107d4 <_strtod_l+0x454>
 8010bd2:	bf00      	nop
 8010bd4:	08015038 	.word	0x08015038
 8010bd8:	fffffc02 	.word	0xfffffc02
 8010bdc:	39500000 	.word	0x39500000
 8010be0:	7ff00000 	.word	0x7ff00000
 8010be4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010be8:	d165      	bne.n	8010cb6 <_strtod_l+0x936>
 8010bea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bf0:	b35a      	cbz	r2, 8010c4a <_strtod_l+0x8ca>
 8010bf2:	4a9f      	ldr	r2, [pc, #636]	@ (8010e70 <_strtod_l+0xaf0>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d12b      	bne.n	8010c50 <_strtod_l+0x8d0>
 8010bf8:	9b08      	ldr	r3, [sp, #32]
 8010bfa:	4651      	mov	r1, sl
 8010bfc:	b303      	cbz	r3, 8010c40 <_strtod_l+0x8c0>
 8010bfe:	4b9d      	ldr	r3, [pc, #628]	@ (8010e74 <_strtod_l+0xaf4>)
 8010c00:	465a      	mov	r2, fp
 8010c02:	4013      	ands	r3, r2
 8010c04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010c08:	f04f 32ff 	mov.w	r2, #4294967295
 8010c0c:	d81b      	bhi.n	8010c46 <_strtod_l+0x8c6>
 8010c0e:	0d1b      	lsrs	r3, r3, #20
 8010c10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010c14:	fa02 f303 	lsl.w	r3, r2, r3
 8010c18:	4299      	cmp	r1, r3
 8010c1a:	d119      	bne.n	8010c50 <_strtod_l+0x8d0>
 8010c1c:	4b96      	ldr	r3, [pc, #600]	@ (8010e78 <_strtod_l+0xaf8>)
 8010c1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d102      	bne.n	8010c2a <_strtod_l+0x8aa>
 8010c24:	3101      	adds	r1, #1
 8010c26:	f43f adca 	beq.w	80107be <_strtod_l+0x43e>
 8010c2a:	4b92      	ldr	r3, [pc, #584]	@ (8010e74 <_strtod_l+0xaf4>)
 8010c2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c2e:	401a      	ands	r2, r3
 8010c30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010c34:	f04f 0a00 	mov.w	sl, #0
 8010c38:	9b08      	ldr	r3, [sp, #32]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1b8      	bne.n	8010bb0 <_strtod_l+0x830>
 8010c3e:	e5c9      	b.n	80107d4 <_strtod_l+0x454>
 8010c40:	f04f 33ff 	mov.w	r3, #4294967295
 8010c44:	e7e8      	b.n	8010c18 <_strtod_l+0x898>
 8010c46:	4613      	mov	r3, r2
 8010c48:	e7e6      	b.n	8010c18 <_strtod_l+0x898>
 8010c4a:	ea53 030a 	orrs.w	r3, r3, sl
 8010c4e:	d0a1      	beq.n	8010b94 <_strtod_l+0x814>
 8010c50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010c52:	b1db      	cbz	r3, 8010c8c <_strtod_l+0x90c>
 8010c54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c56:	4213      	tst	r3, r2
 8010c58:	d0ee      	beq.n	8010c38 <_strtod_l+0x8b8>
 8010c5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c5c:	9a08      	ldr	r2, [sp, #32]
 8010c5e:	4650      	mov	r0, sl
 8010c60:	4659      	mov	r1, fp
 8010c62:	b1bb      	cbz	r3, 8010c94 <_strtod_l+0x914>
 8010c64:	f7ff fb6e 	bl	8010344 <sulp>
 8010c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c6c:	ec53 2b10 	vmov	r2, r3, d0
 8010c70:	f7ef faf4 	bl	800025c <__adddf3>
 8010c74:	4682      	mov	sl, r0
 8010c76:	468b      	mov	fp, r1
 8010c78:	e7de      	b.n	8010c38 <_strtod_l+0x8b8>
 8010c7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010c7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010c82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010c86:	f04f 3aff 	mov.w	sl, #4294967295
 8010c8a:	e7d5      	b.n	8010c38 <_strtod_l+0x8b8>
 8010c8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010c8e:	ea13 0f0a 	tst.w	r3, sl
 8010c92:	e7e1      	b.n	8010c58 <_strtod_l+0x8d8>
 8010c94:	f7ff fb56 	bl	8010344 <sulp>
 8010c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c9c:	ec53 2b10 	vmov	r2, r3, d0
 8010ca0:	f7ef fada 	bl	8000258 <__aeabi_dsub>
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	4682      	mov	sl, r0
 8010caa:	468b      	mov	fp, r1
 8010cac:	f7ef fef4 	bl	8000a98 <__aeabi_dcmpeq>
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	d0c1      	beq.n	8010c38 <_strtod_l+0x8b8>
 8010cb4:	e619      	b.n	80108ea <_strtod_l+0x56a>
 8010cb6:	4641      	mov	r1, r8
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f003 f8d3 	bl	8013e64 <__ratio>
 8010cbe:	ec57 6b10 	vmov	r6, r7, d0
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010cc8:	4630      	mov	r0, r6
 8010cca:	4639      	mov	r1, r7
 8010ccc:	f7ef fef8 	bl	8000ac0 <__aeabi_dcmple>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d06f      	beq.n	8010db4 <_strtod_l+0xa34>
 8010cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d17a      	bne.n	8010dd0 <_strtod_l+0xa50>
 8010cda:	f1ba 0f00 	cmp.w	sl, #0
 8010cde:	d158      	bne.n	8010d92 <_strtod_l+0xa12>
 8010ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d15a      	bne.n	8010da0 <_strtod_l+0xa20>
 8010cea:	4b64      	ldr	r3, [pc, #400]	@ (8010e7c <_strtod_l+0xafc>)
 8010cec:	2200      	movs	r2, #0
 8010cee:	4630      	mov	r0, r6
 8010cf0:	4639      	mov	r1, r7
 8010cf2:	f7ef fedb 	bl	8000aac <__aeabi_dcmplt>
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d159      	bne.n	8010dae <_strtod_l+0xa2e>
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	4639      	mov	r1, r7
 8010cfe:	4b60      	ldr	r3, [pc, #384]	@ (8010e80 <_strtod_l+0xb00>)
 8010d00:	2200      	movs	r2, #0
 8010d02:	f7ef fc61 	bl	80005c8 <__aeabi_dmul>
 8010d06:	4606      	mov	r6, r0
 8010d08:	460f      	mov	r7, r1
 8010d0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010d0e:	9606      	str	r6, [sp, #24]
 8010d10:	9307      	str	r3, [sp, #28]
 8010d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d16:	4d57      	ldr	r5, [pc, #348]	@ (8010e74 <_strtod_l+0xaf4>)
 8010d18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d1e:	401d      	ands	r5, r3
 8010d20:	4b58      	ldr	r3, [pc, #352]	@ (8010e84 <_strtod_l+0xb04>)
 8010d22:	429d      	cmp	r5, r3
 8010d24:	f040 80b2 	bne.w	8010e8c <_strtod_l+0xb0c>
 8010d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010d2e:	ec4b ab10 	vmov	d0, sl, fp
 8010d32:	f002 ffcf 	bl	8013cd4 <__ulp>
 8010d36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010d3a:	ec51 0b10 	vmov	r0, r1, d0
 8010d3e:	f7ef fc43 	bl	80005c8 <__aeabi_dmul>
 8010d42:	4652      	mov	r2, sl
 8010d44:	465b      	mov	r3, fp
 8010d46:	f7ef fa89 	bl	800025c <__adddf3>
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	4949      	ldr	r1, [pc, #292]	@ (8010e74 <_strtod_l+0xaf4>)
 8010d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8010e88 <_strtod_l+0xb08>)
 8010d50:	4019      	ands	r1, r3
 8010d52:	4291      	cmp	r1, r2
 8010d54:	4682      	mov	sl, r0
 8010d56:	d942      	bls.n	8010dde <_strtod_l+0xa5e>
 8010d58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010d5a:	4b47      	ldr	r3, [pc, #284]	@ (8010e78 <_strtod_l+0xaf8>)
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d103      	bne.n	8010d68 <_strtod_l+0x9e8>
 8010d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d62:	3301      	adds	r3, #1
 8010d64:	f43f ad2b 	beq.w	80107be <_strtod_l+0x43e>
 8010d68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010e78 <_strtod_l+0xaf8>
 8010d6c:	f04f 3aff 	mov.w	sl, #4294967295
 8010d70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d72:	9805      	ldr	r0, [sp, #20]
 8010d74:	f002 fc7a 	bl	801366c <_Bfree>
 8010d78:	9805      	ldr	r0, [sp, #20]
 8010d7a:	4649      	mov	r1, r9
 8010d7c:	f002 fc76 	bl	801366c <_Bfree>
 8010d80:	9805      	ldr	r0, [sp, #20]
 8010d82:	4641      	mov	r1, r8
 8010d84:	f002 fc72 	bl	801366c <_Bfree>
 8010d88:	9805      	ldr	r0, [sp, #20]
 8010d8a:	4621      	mov	r1, r4
 8010d8c:	f002 fc6e 	bl	801366c <_Bfree>
 8010d90:	e618      	b.n	80109c4 <_strtod_l+0x644>
 8010d92:	f1ba 0f01 	cmp.w	sl, #1
 8010d96:	d103      	bne.n	8010da0 <_strtod_l+0xa20>
 8010d98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f43f ada5 	beq.w	80108ea <_strtod_l+0x56a>
 8010da0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010e50 <_strtod_l+0xad0>
 8010da4:	4f35      	ldr	r7, [pc, #212]	@ (8010e7c <_strtod_l+0xafc>)
 8010da6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010daa:	2600      	movs	r6, #0
 8010dac:	e7b1      	b.n	8010d12 <_strtod_l+0x992>
 8010dae:	4f34      	ldr	r7, [pc, #208]	@ (8010e80 <_strtod_l+0xb00>)
 8010db0:	2600      	movs	r6, #0
 8010db2:	e7aa      	b.n	8010d0a <_strtod_l+0x98a>
 8010db4:	4b32      	ldr	r3, [pc, #200]	@ (8010e80 <_strtod_l+0xb00>)
 8010db6:	4630      	mov	r0, r6
 8010db8:	4639      	mov	r1, r7
 8010dba:	2200      	movs	r2, #0
 8010dbc:	f7ef fc04 	bl	80005c8 <__aeabi_dmul>
 8010dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dc2:	4606      	mov	r6, r0
 8010dc4:	460f      	mov	r7, r1
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d09f      	beq.n	8010d0a <_strtod_l+0x98a>
 8010dca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010dce:	e7a0      	b.n	8010d12 <_strtod_l+0x992>
 8010dd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010e58 <_strtod_l+0xad8>
 8010dd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010dd8:	ec57 6b17 	vmov	r6, r7, d7
 8010ddc:	e799      	b.n	8010d12 <_strtod_l+0x992>
 8010dde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010de2:	9b08      	ldr	r3, [sp, #32]
 8010de4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d1c1      	bne.n	8010d70 <_strtod_l+0x9f0>
 8010dec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010df0:	0d1b      	lsrs	r3, r3, #20
 8010df2:	051b      	lsls	r3, r3, #20
 8010df4:	429d      	cmp	r5, r3
 8010df6:	d1bb      	bne.n	8010d70 <_strtod_l+0x9f0>
 8010df8:	4630      	mov	r0, r6
 8010dfa:	4639      	mov	r1, r7
 8010dfc:	f7ef ff44 	bl	8000c88 <__aeabi_d2lz>
 8010e00:	f7ef fbb4 	bl	800056c <__aeabi_l2d>
 8010e04:	4602      	mov	r2, r0
 8010e06:	460b      	mov	r3, r1
 8010e08:	4630      	mov	r0, r6
 8010e0a:	4639      	mov	r1, r7
 8010e0c:	f7ef fa24 	bl	8000258 <__aeabi_dsub>
 8010e10:	460b      	mov	r3, r1
 8010e12:	4602      	mov	r2, r0
 8010e14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010e18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e1e:	ea46 060a 	orr.w	r6, r6, sl
 8010e22:	431e      	orrs	r6, r3
 8010e24:	d06f      	beq.n	8010f06 <_strtod_l+0xb86>
 8010e26:	a30e      	add	r3, pc, #56	@ (adr r3, 8010e60 <_strtod_l+0xae0>)
 8010e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2c:	f7ef fe3e 	bl	8000aac <__aeabi_dcmplt>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	f47f accf 	bne.w	80107d4 <_strtod_l+0x454>
 8010e36:	a30c      	add	r3, pc, #48	@ (adr r3, 8010e68 <_strtod_l+0xae8>)
 8010e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e40:	f7ef fe52 	bl	8000ae8 <__aeabi_dcmpgt>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d093      	beq.n	8010d70 <_strtod_l+0x9f0>
 8010e48:	e4c4      	b.n	80107d4 <_strtod_l+0x454>
 8010e4a:	bf00      	nop
 8010e4c:	f3af 8000 	nop.w
 8010e50:	00000000 	.word	0x00000000
 8010e54:	bff00000 	.word	0xbff00000
 8010e58:	00000000 	.word	0x00000000
 8010e5c:	3ff00000 	.word	0x3ff00000
 8010e60:	94a03595 	.word	0x94a03595
 8010e64:	3fdfffff 	.word	0x3fdfffff
 8010e68:	35afe535 	.word	0x35afe535
 8010e6c:	3fe00000 	.word	0x3fe00000
 8010e70:	000fffff 	.word	0x000fffff
 8010e74:	7ff00000 	.word	0x7ff00000
 8010e78:	7fefffff 	.word	0x7fefffff
 8010e7c:	3ff00000 	.word	0x3ff00000
 8010e80:	3fe00000 	.word	0x3fe00000
 8010e84:	7fe00000 	.word	0x7fe00000
 8010e88:	7c9fffff 	.word	0x7c9fffff
 8010e8c:	9b08      	ldr	r3, [sp, #32]
 8010e8e:	b323      	cbz	r3, 8010eda <_strtod_l+0xb5a>
 8010e90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010e94:	d821      	bhi.n	8010eda <_strtod_l+0xb5a>
 8010e96:	a328      	add	r3, pc, #160	@ (adr r3, 8010f38 <_strtod_l+0xbb8>)
 8010e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	4639      	mov	r1, r7
 8010ea0:	f7ef fe0e 	bl	8000ac0 <__aeabi_dcmple>
 8010ea4:	b1a0      	cbz	r0, 8010ed0 <_strtod_l+0xb50>
 8010ea6:	4639      	mov	r1, r7
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	f7ef fe65 	bl	8000b78 <__aeabi_d2uiz>
 8010eae:	2801      	cmp	r0, #1
 8010eb0:	bf38      	it	cc
 8010eb2:	2001      	movcc	r0, #1
 8010eb4:	f7ef fb0e 	bl	80004d4 <__aeabi_ui2d>
 8010eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010eba:	4606      	mov	r6, r0
 8010ebc:	460f      	mov	r7, r1
 8010ebe:	b9fb      	cbnz	r3, 8010f00 <_strtod_l+0xb80>
 8010ec0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010ec4:	9014      	str	r0, [sp, #80]	@ 0x50
 8010ec6:	9315      	str	r3, [sp, #84]	@ 0x54
 8010ec8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010ecc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010ed0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010ed2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010ed6:	1b5b      	subs	r3, r3, r5
 8010ed8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010eda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010ede:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010ee2:	f002 fef7 	bl	8013cd4 <__ulp>
 8010ee6:	4650      	mov	r0, sl
 8010ee8:	ec53 2b10 	vmov	r2, r3, d0
 8010eec:	4659      	mov	r1, fp
 8010eee:	f7ef fb6b 	bl	80005c8 <__aeabi_dmul>
 8010ef2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010ef6:	f7ef f9b1 	bl	800025c <__adddf3>
 8010efa:	4682      	mov	sl, r0
 8010efc:	468b      	mov	fp, r1
 8010efe:	e770      	b.n	8010de2 <_strtod_l+0xa62>
 8010f00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010f04:	e7e0      	b.n	8010ec8 <_strtod_l+0xb48>
 8010f06:	a30e      	add	r3, pc, #56	@ (adr r3, 8010f40 <_strtod_l+0xbc0>)
 8010f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0c:	f7ef fdce 	bl	8000aac <__aeabi_dcmplt>
 8010f10:	e798      	b.n	8010e44 <_strtod_l+0xac4>
 8010f12:	2300      	movs	r3, #0
 8010f14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010f18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f1a:	6013      	str	r3, [r2, #0]
 8010f1c:	f7ff ba6d 	b.w	80103fa <_strtod_l+0x7a>
 8010f20:	2a65      	cmp	r2, #101	@ 0x65
 8010f22:	f43f ab66 	beq.w	80105f2 <_strtod_l+0x272>
 8010f26:	2a45      	cmp	r2, #69	@ 0x45
 8010f28:	f43f ab63 	beq.w	80105f2 <_strtod_l+0x272>
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	f7ff bb9e 	b.w	801066e <_strtod_l+0x2ee>
 8010f32:	bf00      	nop
 8010f34:	f3af 8000 	nop.w
 8010f38:	ffc00000 	.word	0xffc00000
 8010f3c:	41dfffff 	.word	0x41dfffff
 8010f40:	94a03595 	.word	0x94a03595
 8010f44:	3fcfffff 	.word	0x3fcfffff

08010f48 <_strtod_r>:
 8010f48:	4b01      	ldr	r3, [pc, #4]	@ (8010f50 <_strtod_r+0x8>)
 8010f4a:	f7ff ba19 	b.w	8010380 <_strtod_l>
 8010f4e:	bf00      	nop
 8010f50:	20000044 	.word	0x20000044

08010f54 <strtod>:
 8010f54:	460a      	mov	r2, r1
 8010f56:	4601      	mov	r1, r0
 8010f58:	4802      	ldr	r0, [pc, #8]	@ (8010f64 <strtod+0x10>)
 8010f5a:	4b03      	ldr	r3, [pc, #12]	@ (8010f68 <strtod+0x14>)
 8010f5c:	6800      	ldr	r0, [r0, #0]
 8010f5e:	f7ff ba0f 	b.w	8010380 <_strtod_l>
 8010f62:	bf00      	nop
 8010f64:	200001b0 	.word	0x200001b0
 8010f68:	20000044 	.word	0x20000044

08010f6c <__cvt>:
 8010f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f70:	ec57 6b10 	vmov	r6, r7, d0
 8010f74:	2f00      	cmp	r7, #0
 8010f76:	460c      	mov	r4, r1
 8010f78:	4619      	mov	r1, r3
 8010f7a:	463b      	mov	r3, r7
 8010f7c:	bfbb      	ittet	lt
 8010f7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010f82:	461f      	movlt	r7, r3
 8010f84:	2300      	movge	r3, #0
 8010f86:	232d      	movlt	r3, #45	@ 0x2d
 8010f88:	700b      	strb	r3, [r1, #0]
 8010f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010f90:	4691      	mov	r9, r2
 8010f92:	f023 0820 	bic.w	r8, r3, #32
 8010f96:	bfbc      	itt	lt
 8010f98:	4632      	movlt	r2, r6
 8010f9a:	4616      	movlt	r6, r2
 8010f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010fa0:	d005      	beq.n	8010fae <__cvt+0x42>
 8010fa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010fa6:	d100      	bne.n	8010faa <__cvt+0x3e>
 8010fa8:	3401      	adds	r4, #1
 8010faa:	2102      	movs	r1, #2
 8010fac:	e000      	b.n	8010fb0 <__cvt+0x44>
 8010fae:	2103      	movs	r1, #3
 8010fb0:	ab03      	add	r3, sp, #12
 8010fb2:	9301      	str	r3, [sp, #4]
 8010fb4:	ab02      	add	r3, sp, #8
 8010fb6:	9300      	str	r3, [sp, #0]
 8010fb8:	ec47 6b10 	vmov	d0, r6, r7
 8010fbc:	4653      	mov	r3, sl
 8010fbe:	4622      	mov	r2, r4
 8010fc0:	f001 f9ba 	bl	8012338 <_dtoa_r>
 8010fc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010fc8:	4605      	mov	r5, r0
 8010fca:	d119      	bne.n	8011000 <__cvt+0x94>
 8010fcc:	f019 0f01 	tst.w	r9, #1
 8010fd0:	d00e      	beq.n	8010ff0 <__cvt+0x84>
 8010fd2:	eb00 0904 	add.w	r9, r0, r4
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	2300      	movs	r3, #0
 8010fda:	4630      	mov	r0, r6
 8010fdc:	4639      	mov	r1, r7
 8010fde:	f7ef fd5b 	bl	8000a98 <__aeabi_dcmpeq>
 8010fe2:	b108      	cbz	r0, 8010fe8 <__cvt+0x7c>
 8010fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8010fe8:	2230      	movs	r2, #48	@ 0x30
 8010fea:	9b03      	ldr	r3, [sp, #12]
 8010fec:	454b      	cmp	r3, r9
 8010fee:	d31e      	bcc.n	801102e <__cvt+0xc2>
 8010ff0:	9b03      	ldr	r3, [sp, #12]
 8010ff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ff4:	1b5b      	subs	r3, r3, r5
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	6013      	str	r3, [r2, #0]
 8010ffa:	b004      	add	sp, #16
 8010ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011004:	eb00 0904 	add.w	r9, r0, r4
 8011008:	d1e5      	bne.n	8010fd6 <__cvt+0x6a>
 801100a:	7803      	ldrb	r3, [r0, #0]
 801100c:	2b30      	cmp	r3, #48	@ 0x30
 801100e:	d10a      	bne.n	8011026 <__cvt+0xba>
 8011010:	2200      	movs	r2, #0
 8011012:	2300      	movs	r3, #0
 8011014:	4630      	mov	r0, r6
 8011016:	4639      	mov	r1, r7
 8011018:	f7ef fd3e 	bl	8000a98 <__aeabi_dcmpeq>
 801101c:	b918      	cbnz	r0, 8011026 <__cvt+0xba>
 801101e:	f1c4 0401 	rsb	r4, r4, #1
 8011022:	f8ca 4000 	str.w	r4, [sl]
 8011026:	f8da 3000 	ldr.w	r3, [sl]
 801102a:	4499      	add	r9, r3
 801102c:	e7d3      	b.n	8010fd6 <__cvt+0x6a>
 801102e:	1c59      	adds	r1, r3, #1
 8011030:	9103      	str	r1, [sp, #12]
 8011032:	701a      	strb	r2, [r3, #0]
 8011034:	e7d9      	b.n	8010fea <__cvt+0x7e>

08011036 <__exponent>:
 8011036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011038:	2900      	cmp	r1, #0
 801103a:	bfba      	itte	lt
 801103c:	4249      	neglt	r1, r1
 801103e:	232d      	movlt	r3, #45	@ 0x2d
 8011040:	232b      	movge	r3, #43	@ 0x2b
 8011042:	2909      	cmp	r1, #9
 8011044:	7002      	strb	r2, [r0, #0]
 8011046:	7043      	strb	r3, [r0, #1]
 8011048:	dd29      	ble.n	801109e <__exponent+0x68>
 801104a:	f10d 0307 	add.w	r3, sp, #7
 801104e:	461d      	mov	r5, r3
 8011050:	270a      	movs	r7, #10
 8011052:	461a      	mov	r2, r3
 8011054:	fbb1 f6f7 	udiv	r6, r1, r7
 8011058:	fb07 1416 	mls	r4, r7, r6, r1
 801105c:	3430      	adds	r4, #48	@ 0x30
 801105e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011062:	460c      	mov	r4, r1
 8011064:	2c63      	cmp	r4, #99	@ 0x63
 8011066:	f103 33ff 	add.w	r3, r3, #4294967295
 801106a:	4631      	mov	r1, r6
 801106c:	dcf1      	bgt.n	8011052 <__exponent+0x1c>
 801106e:	3130      	adds	r1, #48	@ 0x30
 8011070:	1e94      	subs	r4, r2, #2
 8011072:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011076:	1c41      	adds	r1, r0, #1
 8011078:	4623      	mov	r3, r4
 801107a:	42ab      	cmp	r3, r5
 801107c:	d30a      	bcc.n	8011094 <__exponent+0x5e>
 801107e:	f10d 0309 	add.w	r3, sp, #9
 8011082:	1a9b      	subs	r3, r3, r2
 8011084:	42ac      	cmp	r4, r5
 8011086:	bf88      	it	hi
 8011088:	2300      	movhi	r3, #0
 801108a:	3302      	adds	r3, #2
 801108c:	4403      	add	r3, r0
 801108e:	1a18      	subs	r0, r3, r0
 8011090:	b003      	add	sp, #12
 8011092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011094:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011098:	f801 6f01 	strb.w	r6, [r1, #1]!
 801109c:	e7ed      	b.n	801107a <__exponent+0x44>
 801109e:	2330      	movs	r3, #48	@ 0x30
 80110a0:	3130      	adds	r1, #48	@ 0x30
 80110a2:	7083      	strb	r3, [r0, #2]
 80110a4:	70c1      	strb	r1, [r0, #3]
 80110a6:	1d03      	adds	r3, r0, #4
 80110a8:	e7f1      	b.n	801108e <__exponent+0x58>
	...

080110ac <_printf_float>:
 80110ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b0:	b08d      	sub	sp, #52	@ 0x34
 80110b2:	460c      	mov	r4, r1
 80110b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80110b8:	4616      	mov	r6, r2
 80110ba:	461f      	mov	r7, r3
 80110bc:	4605      	mov	r5, r0
 80110be:	f001 f80d 	bl	80120dc <_localeconv_r>
 80110c2:	6803      	ldr	r3, [r0, #0]
 80110c4:	9304      	str	r3, [sp, #16]
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7ef f8ba 	bl	8000240 <strlen>
 80110cc:	2300      	movs	r3, #0
 80110ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80110d0:	f8d8 3000 	ldr.w	r3, [r8]
 80110d4:	9005      	str	r0, [sp, #20]
 80110d6:	3307      	adds	r3, #7
 80110d8:	f023 0307 	bic.w	r3, r3, #7
 80110dc:	f103 0208 	add.w	r2, r3, #8
 80110e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80110e4:	f8d4 b000 	ldr.w	fp, [r4]
 80110e8:	f8c8 2000 	str.w	r2, [r8]
 80110ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80110f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80110f4:	9307      	str	r3, [sp, #28]
 80110f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80110fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80110fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011102:	4b9c      	ldr	r3, [pc, #624]	@ (8011374 <_printf_float+0x2c8>)
 8011104:	f04f 32ff 	mov.w	r2, #4294967295
 8011108:	f7ef fcf8 	bl	8000afc <__aeabi_dcmpun>
 801110c:	bb70      	cbnz	r0, 801116c <_printf_float+0xc0>
 801110e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011112:	4b98      	ldr	r3, [pc, #608]	@ (8011374 <_printf_float+0x2c8>)
 8011114:	f04f 32ff 	mov.w	r2, #4294967295
 8011118:	f7ef fcd2 	bl	8000ac0 <__aeabi_dcmple>
 801111c:	bb30      	cbnz	r0, 801116c <_printf_float+0xc0>
 801111e:	2200      	movs	r2, #0
 8011120:	2300      	movs	r3, #0
 8011122:	4640      	mov	r0, r8
 8011124:	4649      	mov	r1, r9
 8011126:	f7ef fcc1 	bl	8000aac <__aeabi_dcmplt>
 801112a:	b110      	cbz	r0, 8011132 <_printf_float+0x86>
 801112c:	232d      	movs	r3, #45	@ 0x2d
 801112e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011132:	4a91      	ldr	r2, [pc, #580]	@ (8011378 <_printf_float+0x2cc>)
 8011134:	4b91      	ldr	r3, [pc, #580]	@ (801137c <_printf_float+0x2d0>)
 8011136:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801113a:	bf94      	ite	ls
 801113c:	4690      	movls	r8, r2
 801113e:	4698      	movhi	r8, r3
 8011140:	2303      	movs	r3, #3
 8011142:	6123      	str	r3, [r4, #16]
 8011144:	f02b 0304 	bic.w	r3, fp, #4
 8011148:	6023      	str	r3, [r4, #0]
 801114a:	f04f 0900 	mov.w	r9, #0
 801114e:	9700      	str	r7, [sp, #0]
 8011150:	4633      	mov	r3, r6
 8011152:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011154:	4621      	mov	r1, r4
 8011156:	4628      	mov	r0, r5
 8011158:	f000 f9d2 	bl	8011500 <_printf_common>
 801115c:	3001      	adds	r0, #1
 801115e:	f040 808d 	bne.w	801127c <_printf_float+0x1d0>
 8011162:	f04f 30ff 	mov.w	r0, #4294967295
 8011166:	b00d      	add	sp, #52	@ 0x34
 8011168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801116c:	4642      	mov	r2, r8
 801116e:	464b      	mov	r3, r9
 8011170:	4640      	mov	r0, r8
 8011172:	4649      	mov	r1, r9
 8011174:	f7ef fcc2 	bl	8000afc <__aeabi_dcmpun>
 8011178:	b140      	cbz	r0, 801118c <_printf_float+0xe0>
 801117a:	464b      	mov	r3, r9
 801117c:	2b00      	cmp	r3, #0
 801117e:	bfbc      	itt	lt
 8011180:	232d      	movlt	r3, #45	@ 0x2d
 8011182:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011186:	4a7e      	ldr	r2, [pc, #504]	@ (8011380 <_printf_float+0x2d4>)
 8011188:	4b7e      	ldr	r3, [pc, #504]	@ (8011384 <_printf_float+0x2d8>)
 801118a:	e7d4      	b.n	8011136 <_printf_float+0x8a>
 801118c:	6863      	ldr	r3, [r4, #4]
 801118e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011192:	9206      	str	r2, [sp, #24]
 8011194:	1c5a      	adds	r2, r3, #1
 8011196:	d13b      	bne.n	8011210 <_printf_float+0x164>
 8011198:	2306      	movs	r3, #6
 801119a:	6063      	str	r3, [r4, #4]
 801119c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80111a0:	2300      	movs	r3, #0
 80111a2:	6022      	str	r2, [r4, #0]
 80111a4:	9303      	str	r3, [sp, #12]
 80111a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80111a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80111ac:	ab09      	add	r3, sp, #36	@ 0x24
 80111ae:	9300      	str	r3, [sp, #0]
 80111b0:	6861      	ldr	r1, [r4, #4]
 80111b2:	ec49 8b10 	vmov	d0, r8, r9
 80111b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80111ba:	4628      	mov	r0, r5
 80111bc:	f7ff fed6 	bl	8010f6c <__cvt>
 80111c0:	9b06      	ldr	r3, [sp, #24]
 80111c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80111c4:	2b47      	cmp	r3, #71	@ 0x47
 80111c6:	4680      	mov	r8, r0
 80111c8:	d129      	bne.n	801121e <_printf_float+0x172>
 80111ca:	1cc8      	adds	r0, r1, #3
 80111cc:	db02      	blt.n	80111d4 <_printf_float+0x128>
 80111ce:	6863      	ldr	r3, [r4, #4]
 80111d0:	4299      	cmp	r1, r3
 80111d2:	dd41      	ble.n	8011258 <_printf_float+0x1ac>
 80111d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80111d8:	fa5f fa8a 	uxtb.w	sl, sl
 80111dc:	3901      	subs	r1, #1
 80111de:	4652      	mov	r2, sl
 80111e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80111e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80111e6:	f7ff ff26 	bl	8011036 <__exponent>
 80111ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80111ec:	1813      	adds	r3, r2, r0
 80111ee:	2a01      	cmp	r2, #1
 80111f0:	4681      	mov	r9, r0
 80111f2:	6123      	str	r3, [r4, #16]
 80111f4:	dc02      	bgt.n	80111fc <_printf_float+0x150>
 80111f6:	6822      	ldr	r2, [r4, #0]
 80111f8:	07d2      	lsls	r2, r2, #31
 80111fa:	d501      	bpl.n	8011200 <_printf_float+0x154>
 80111fc:	3301      	adds	r3, #1
 80111fe:	6123      	str	r3, [r4, #16]
 8011200:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011204:	2b00      	cmp	r3, #0
 8011206:	d0a2      	beq.n	801114e <_printf_float+0xa2>
 8011208:	232d      	movs	r3, #45	@ 0x2d
 801120a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801120e:	e79e      	b.n	801114e <_printf_float+0xa2>
 8011210:	9a06      	ldr	r2, [sp, #24]
 8011212:	2a47      	cmp	r2, #71	@ 0x47
 8011214:	d1c2      	bne.n	801119c <_printf_float+0xf0>
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1c0      	bne.n	801119c <_printf_float+0xf0>
 801121a:	2301      	movs	r3, #1
 801121c:	e7bd      	b.n	801119a <_printf_float+0xee>
 801121e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011222:	d9db      	bls.n	80111dc <_printf_float+0x130>
 8011224:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011228:	d118      	bne.n	801125c <_printf_float+0x1b0>
 801122a:	2900      	cmp	r1, #0
 801122c:	6863      	ldr	r3, [r4, #4]
 801122e:	dd0b      	ble.n	8011248 <_printf_float+0x19c>
 8011230:	6121      	str	r1, [r4, #16]
 8011232:	b913      	cbnz	r3, 801123a <_printf_float+0x18e>
 8011234:	6822      	ldr	r2, [r4, #0]
 8011236:	07d0      	lsls	r0, r2, #31
 8011238:	d502      	bpl.n	8011240 <_printf_float+0x194>
 801123a:	3301      	adds	r3, #1
 801123c:	440b      	add	r3, r1
 801123e:	6123      	str	r3, [r4, #16]
 8011240:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011242:	f04f 0900 	mov.w	r9, #0
 8011246:	e7db      	b.n	8011200 <_printf_float+0x154>
 8011248:	b913      	cbnz	r3, 8011250 <_printf_float+0x1a4>
 801124a:	6822      	ldr	r2, [r4, #0]
 801124c:	07d2      	lsls	r2, r2, #31
 801124e:	d501      	bpl.n	8011254 <_printf_float+0x1a8>
 8011250:	3302      	adds	r3, #2
 8011252:	e7f4      	b.n	801123e <_printf_float+0x192>
 8011254:	2301      	movs	r3, #1
 8011256:	e7f2      	b.n	801123e <_printf_float+0x192>
 8011258:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801125c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801125e:	4299      	cmp	r1, r3
 8011260:	db05      	blt.n	801126e <_printf_float+0x1c2>
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	6121      	str	r1, [r4, #16]
 8011266:	07d8      	lsls	r0, r3, #31
 8011268:	d5ea      	bpl.n	8011240 <_printf_float+0x194>
 801126a:	1c4b      	adds	r3, r1, #1
 801126c:	e7e7      	b.n	801123e <_printf_float+0x192>
 801126e:	2900      	cmp	r1, #0
 8011270:	bfd4      	ite	le
 8011272:	f1c1 0202 	rsble	r2, r1, #2
 8011276:	2201      	movgt	r2, #1
 8011278:	4413      	add	r3, r2
 801127a:	e7e0      	b.n	801123e <_printf_float+0x192>
 801127c:	6823      	ldr	r3, [r4, #0]
 801127e:	055a      	lsls	r2, r3, #21
 8011280:	d407      	bmi.n	8011292 <_printf_float+0x1e6>
 8011282:	6923      	ldr	r3, [r4, #16]
 8011284:	4642      	mov	r2, r8
 8011286:	4631      	mov	r1, r6
 8011288:	4628      	mov	r0, r5
 801128a:	47b8      	blx	r7
 801128c:	3001      	adds	r0, #1
 801128e:	d12b      	bne.n	80112e8 <_printf_float+0x23c>
 8011290:	e767      	b.n	8011162 <_printf_float+0xb6>
 8011292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011296:	f240 80dd 	bls.w	8011454 <_printf_float+0x3a8>
 801129a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801129e:	2200      	movs	r2, #0
 80112a0:	2300      	movs	r3, #0
 80112a2:	f7ef fbf9 	bl	8000a98 <__aeabi_dcmpeq>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d033      	beq.n	8011312 <_printf_float+0x266>
 80112aa:	4a37      	ldr	r2, [pc, #220]	@ (8011388 <_printf_float+0x2dc>)
 80112ac:	2301      	movs	r3, #1
 80112ae:	4631      	mov	r1, r6
 80112b0:	4628      	mov	r0, r5
 80112b2:	47b8      	blx	r7
 80112b4:	3001      	adds	r0, #1
 80112b6:	f43f af54 	beq.w	8011162 <_printf_float+0xb6>
 80112ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80112be:	4543      	cmp	r3, r8
 80112c0:	db02      	blt.n	80112c8 <_printf_float+0x21c>
 80112c2:	6823      	ldr	r3, [r4, #0]
 80112c4:	07d8      	lsls	r0, r3, #31
 80112c6:	d50f      	bpl.n	80112e8 <_printf_float+0x23c>
 80112c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112cc:	4631      	mov	r1, r6
 80112ce:	4628      	mov	r0, r5
 80112d0:	47b8      	blx	r7
 80112d2:	3001      	adds	r0, #1
 80112d4:	f43f af45 	beq.w	8011162 <_printf_float+0xb6>
 80112d8:	f04f 0900 	mov.w	r9, #0
 80112dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80112e0:	f104 0a1a 	add.w	sl, r4, #26
 80112e4:	45c8      	cmp	r8, r9
 80112e6:	dc09      	bgt.n	80112fc <_printf_float+0x250>
 80112e8:	6823      	ldr	r3, [r4, #0]
 80112ea:	079b      	lsls	r3, r3, #30
 80112ec:	f100 8103 	bmi.w	80114f6 <_printf_float+0x44a>
 80112f0:	68e0      	ldr	r0, [r4, #12]
 80112f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112f4:	4298      	cmp	r0, r3
 80112f6:	bfb8      	it	lt
 80112f8:	4618      	movlt	r0, r3
 80112fa:	e734      	b.n	8011166 <_printf_float+0xba>
 80112fc:	2301      	movs	r3, #1
 80112fe:	4652      	mov	r2, sl
 8011300:	4631      	mov	r1, r6
 8011302:	4628      	mov	r0, r5
 8011304:	47b8      	blx	r7
 8011306:	3001      	adds	r0, #1
 8011308:	f43f af2b 	beq.w	8011162 <_printf_float+0xb6>
 801130c:	f109 0901 	add.w	r9, r9, #1
 8011310:	e7e8      	b.n	80112e4 <_printf_float+0x238>
 8011312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011314:	2b00      	cmp	r3, #0
 8011316:	dc39      	bgt.n	801138c <_printf_float+0x2e0>
 8011318:	4a1b      	ldr	r2, [pc, #108]	@ (8011388 <_printf_float+0x2dc>)
 801131a:	2301      	movs	r3, #1
 801131c:	4631      	mov	r1, r6
 801131e:	4628      	mov	r0, r5
 8011320:	47b8      	blx	r7
 8011322:	3001      	adds	r0, #1
 8011324:	f43f af1d 	beq.w	8011162 <_printf_float+0xb6>
 8011328:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801132c:	ea59 0303 	orrs.w	r3, r9, r3
 8011330:	d102      	bne.n	8011338 <_printf_float+0x28c>
 8011332:	6823      	ldr	r3, [r4, #0]
 8011334:	07d9      	lsls	r1, r3, #31
 8011336:	d5d7      	bpl.n	80112e8 <_printf_float+0x23c>
 8011338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801133c:	4631      	mov	r1, r6
 801133e:	4628      	mov	r0, r5
 8011340:	47b8      	blx	r7
 8011342:	3001      	adds	r0, #1
 8011344:	f43f af0d 	beq.w	8011162 <_printf_float+0xb6>
 8011348:	f04f 0a00 	mov.w	sl, #0
 801134c:	f104 0b1a 	add.w	fp, r4, #26
 8011350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011352:	425b      	negs	r3, r3
 8011354:	4553      	cmp	r3, sl
 8011356:	dc01      	bgt.n	801135c <_printf_float+0x2b0>
 8011358:	464b      	mov	r3, r9
 801135a:	e793      	b.n	8011284 <_printf_float+0x1d8>
 801135c:	2301      	movs	r3, #1
 801135e:	465a      	mov	r2, fp
 8011360:	4631      	mov	r1, r6
 8011362:	4628      	mov	r0, r5
 8011364:	47b8      	blx	r7
 8011366:	3001      	adds	r0, #1
 8011368:	f43f aefb 	beq.w	8011162 <_printf_float+0xb6>
 801136c:	f10a 0a01 	add.w	sl, sl, #1
 8011370:	e7ee      	b.n	8011350 <_printf_float+0x2a4>
 8011372:	bf00      	nop
 8011374:	7fefffff 	.word	0x7fefffff
 8011378:	08015161 	.word	0x08015161
 801137c:	08015165 	.word	0x08015165
 8011380:	08015169 	.word	0x08015169
 8011384:	0801516d 	.word	0x0801516d
 8011388:	08015171 	.word	0x08015171
 801138c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801138e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011392:	4553      	cmp	r3, sl
 8011394:	bfa8      	it	ge
 8011396:	4653      	movge	r3, sl
 8011398:	2b00      	cmp	r3, #0
 801139a:	4699      	mov	r9, r3
 801139c:	dc36      	bgt.n	801140c <_printf_float+0x360>
 801139e:	f04f 0b00 	mov.w	fp, #0
 80113a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113a6:	f104 021a 	add.w	r2, r4, #26
 80113aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80113ac:	9306      	str	r3, [sp, #24]
 80113ae:	eba3 0309 	sub.w	r3, r3, r9
 80113b2:	455b      	cmp	r3, fp
 80113b4:	dc31      	bgt.n	801141a <_printf_float+0x36e>
 80113b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113b8:	459a      	cmp	sl, r3
 80113ba:	dc3a      	bgt.n	8011432 <_printf_float+0x386>
 80113bc:	6823      	ldr	r3, [r4, #0]
 80113be:	07da      	lsls	r2, r3, #31
 80113c0:	d437      	bmi.n	8011432 <_printf_float+0x386>
 80113c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113c4:	ebaa 0903 	sub.w	r9, sl, r3
 80113c8:	9b06      	ldr	r3, [sp, #24]
 80113ca:	ebaa 0303 	sub.w	r3, sl, r3
 80113ce:	4599      	cmp	r9, r3
 80113d0:	bfa8      	it	ge
 80113d2:	4699      	movge	r9, r3
 80113d4:	f1b9 0f00 	cmp.w	r9, #0
 80113d8:	dc33      	bgt.n	8011442 <_printf_float+0x396>
 80113da:	f04f 0800 	mov.w	r8, #0
 80113de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113e2:	f104 0b1a 	add.w	fp, r4, #26
 80113e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113e8:	ebaa 0303 	sub.w	r3, sl, r3
 80113ec:	eba3 0309 	sub.w	r3, r3, r9
 80113f0:	4543      	cmp	r3, r8
 80113f2:	f77f af79 	ble.w	80112e8 <_printf_float+0x23c>
 80113f6:	2301      	movs	r3, #1
 80113f8:	465a      	mov	r2, fp
 80113fa:	4631      	mov	r1, r6
 80113fc:	4628      	mov	r0, r5
 80113fe:	47b8      	blx	r7
 8011400:	3001      	adds	r0, #1
 8011402:	f43f aeae 	beq.w	8011162 <_printf_float+0xb6>
 8011406:	f108 0801 	add.w	r8, r8, #1
 801140a:	e7ec      	b.n	80113e6 <_printf_float+0x33a>
 801140c:	4642      	mov	r2, r8
 801140e:	4631      	mov	r1, r6
 8011410:	4628      	mov	r0, r5
 8011412:	47b8      	blx	r7
 8011414:	3001      	adds	r0, #1
 8011416:	d1c2      	bne.n	801139e <_printf_float+0x2f2>
 8011418:	e6a3      	b.n	8011162 <_printf_float+0xb6>
 801141a:	2301      	movs	r3, #1
 801141c:	4631      	mov	r1, r6
 801141e:	4628      	mov	r0, r5
 8011420:	9206      	str	r2, [sp, #24]
 8011422:	47b8      	blx	r7
 8011424:	3001      	adds	r0, #1
 8011426:	f43f ae9c 	beq.w	8011162 <_printf_float+0xb6>
 801142a:	9a06      	ldr	r2, [sp, #24]
 801142c:	f10b 0b01 	add.w	fp, fp, #1
 8011430:	e7bb      	b.n	80113aa <_printf_float+0x2fe>
 8011432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011436:	4631      	mov	r1, r6
 8011438:	4628      	mov	r0, r5
 801143a:	47b8      	blx	r7
 801143c:	3001      	adds	r0, #1
 801143e:	d1c0      	bne.n	80113c2 <_printf_float+0x316>
 8011440:	e68f      	b.n	8011162 <_printf_float+0xb6>
 8011442:	9a06      	ldr	r2, [sp, #24]
 8011444:	464b      	mov	r3, r9
 8011446:	4442      	add	r2, r8
 8011448:	4631      	mov	r1, r6
 801144a:	4628      	mov	r0, r5
 801144c:	47b8      	blx	r7
 801144e:	3001      	adds	r0, #1
 8011450:	d1c3      	bne.n	80113da <_printf_float+0x32e>
 8011452:	e686      	b.n	8011162 <_printf_float+0xb6>
 8011454:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011458:	f1ba 0f01 	cmp.w	sl, #1
 801145c:	dc01      	bgt.n	8011462 <_printf_float+0x3b6>
 801145e:	07db      	lsls	r3, r3, #31
 8011460:	d536      	bpl.n	80114d0 <_printf_float+0x424>
 8011462:	2301      	movs	r3, #1
 8011464:	4642      	mov	r2, r8
 8011466:	4631      	mov	r1, r6
 8011468:	4628      	mov	r0, r5
 801146a:	47b8      	blx	r7
 801146c:	3001      	adds	r0, #1
 801146e:	f43f ae78 	beq.w	8011162 <_printf_float+0xb6>
 8011472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011476:	4631      	mov	r1, r6
 8011478:	4628      	mov	r0, r5
 801147a:	47b8      	blx	r7
 801147c:	3001      	adds	r0, #1
 801147e:	f43f ae70 	beq.w	8011162 <_printf_float+0xb6>
 8011482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011486:	2200      	movs	r2, #0
 8011488:	2300      	movs	r3, #0
 801148a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801148e:	f7ef fb03 	bl	8000a98 <__aeabi_dcmpeq>
 8011492:	b9c0      	cbnz	r0, 80114c6 <_printf_float+0x41a>
 8011494:	4653      	mov	r3, sl
 8011496:	f108 0201 	add.w	r2, r8, #1
 801149a:	4631      	mov	r1, r6
 801149c:	4628      	mov	r0, r5
 801149e:	47b8      	blx	r7
 80114a0:	3001      	adds	r0, #1
 80114a2:	d10c      	bne.n	80114be <_printf_float+0x412>
 80114a4:	e65d      	b.n	8011162 <_printf_float+0xb6>
 80114a6:	2301      	movs	r3, #1
 80114a8:	465a      	mov	r2, fp
 80114aa:	4631      	mov	r1, r6
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b8      	blx	r7
 80114b0:	3001      	adds	r0, #1
 80114b2:	f43f ae56 	beq.w	8011162 <_printf_float+0xb6>
 80114b6:	f108 0801 	add.w	r8, r8, #1
 80114ba:	45d0      	cmp	r8, sl
 80114bc:	dbf3      	blt.n	80114a6 <_printf_float+0x3fa>
 80114be:	464b      	mov	r3, r9
 80114c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80114c4:	e6df      	b.n	8011286 <_printf_float+0x1da>
 80114c6:	f04f 0800 	mov.w	r8, #0
 80114ca:	f104 0b1a 	add.w	fp, r4, #26
 80114ce:	e7f4      	b.n	80114ba <_printf_float+0x40e>
 80114d0:	2301      	movs	r3, #1
 80114d2:	4642      	mov	r2, r8
 80114d4:	e7e1      	b.n	801149a <_printf_float+0x3ee>
 80114d6:	2301      	movs	r3, #1
 80114d8:	464a      	mov	r2, r9
 80114da:	4631      	mov	r1, r6
 80114dc:	4628      	mov	r0, r5
 80114de:	47b8      	blx	r7
 80114e0:	3001      	adds	r0, #1
 80114e2:	f43f ae3e 	beq.w	8011162 <_printf_float+0xb6>
 80114e6:	f108 0801 	add.w	r8, r8, #1
 80114ea:	68e3      	ldr	r3, [r4, #12]
 80114ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80114ee:	1a5b      	subs	r3, r3, r1
 80114f0:	4543      	cmp	r3, r8
 80114f2:	dcf0      	bgt.n	80114d6 <_printf_float+0x42a>
 80114f4:	e6fc      	b.n	80112f0 <_printf_float+0x244>
 80114f6:	f04f 0800 	mov.w	r8, #0
 80114fa:	f104 0919 	add.w	r9, r4, #25
 80114fe:	e7f4      	b.n	80114ea <_printf_float+0x43e>

08011500 <_printf_common>:
 8011500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011504:	4616      	mov	r6, r2
 8011506:	4698      	mov	r8, r3
 8011508:	688a      	ldr	r2, [r1, #8]
 801150a:	690b      	ldr	r3, [r1, #16]
 801150c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011510:	4293      	cmp	r3, r2
 8011512:	bfb8      	it	lt
 8011514:	4613      	movlt	r3, r2
 8011516:	6033      	str	r3, [r6, #0]
 8011518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801151c:	4607      	mov	r7, r0
 801151e:	460c      	mov	r4, r1
 8011520:	b10a      	cbz	r2, 8011526 <_printf_common+0x26>
 8011522:	3301      	adds	r3, #1
 8011524:	6033      	str	r3, [r6, #0]
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	0699      	lsls	r1, r3, #26
 801152a:	bf42      	ittt	mi
 801152c:	6833      	ldrmi	r3, [r6, #0]
 801152e:	3302      	addmi	r3, #2
 8011530:	6033      	strmi	r3, [r6, #0]
 8011532:	6825      	ldr	r5, [r4, #0]
 8011534:	f015 0506 	ands.w	r5, r5, #6
 8011538:	d106      	bne.n	8011548 <_printf_common+0x48>
 801153a:	f104 0a19 	add.w	sl, r4, #25
 801153e:	68e3      	ldr	r3, [r4, #12]
 8011540:	6832      	ldr	r2, [r6, #0]
 8011542:	1a9b      	subs	r3, r3, r2
 8011544:	42ab      	cmp	r3, r5
 8011546:	dc26      	bgt.n	8011596 <_printf_common+0x96>
 8011548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801154c:	6822      	ldr	r2, [r4, #0]
 801154e:	3b00      	subs	r3, #0
 8011550:	bf18      	it	ne
 8011552:	2301      	movne	r3, #1
 8011554:	0692      	lsls	r2, r2, #26
 8011556:	d42b      	bmi.n	80115b0 <_printf_common+0xb0>
 8011558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801155c:	4641      	mov	r1, r8
 801155e:	4638      	mov	r0, r7
 8011560:	47c8      	blx	r9
 8011562:	3001      	adds	r0, #1
 8011564:	d01e      	beq.n	80115a4 <_printf_common+0xa4>
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	6922      	ldr	r2, [r4, #16]
 801156a:	f003 0306 	and.w	r3, r3, #6
 801156e:	2b04      	cmp	r3, #4
 8011570:	bf02      	ittt	eq
 8011572:	68e5      	ldreq	r5, [r4, #12]
 8011574:	6833      	ldreq	r3, [r6, #0]
 8011576:	1aed      	subeq	r5, r5, r3
 8011578:	68a3      	ldr	r3, [r4, #8]
 801157a:	bf0c      	ite	eq
 801157c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011580:	2500      	movne	r5, #0
 8011582:	4293      	cmp	r3, r2
 8011584:	bfc4      	itt	gt
 8011586:	1a9b      	subgt	r3, r3, r2
 8011588:	18ed      	addgt	r5, r5, r3
 801158a:	2600      	movs	r6, #0
 801158c:	341a      	adds	r4, #26
 801158e:	42b5      	cmp	r5, r6
 8011590:	d11a      	bne.n	80115c8 <_printf_common+0xc8>
 8011592:	2000      	movs	r0, #0
 8011594:	e008      	b.n	80115a8 <_printf_common+0xa8>
 8011596:	2301      	movs	r3, #1
 8011598:	4652      	mov	r2, sl
 801159a:	4641      	mov	r1, r8
 801159c:	4638      	mov	r0, r7
 801159e:	47c8      	blx	r9
 80115a0:	3001      	adds	r0, #1
 80115a2:	d103      	bne.n	80115ac <_printf_common+0xac>
 80115a4:	f04f 30ff 	mov.w	r0, #4294967295
 80115a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ac:	3501      	adds	r5, #1
 80115ae:	e7c6      	b.n	801153e <_printf_common+0x3e>
 80115b0:	18e1      	adds	r1, r4, r3
 80115b2:	1c5a      	adds	r2, r3, #1
 80115b4:	2030      	movs	r0, #48	@ 0x30
 80115b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80115ba:	4422      	add	r2, r4
 80115bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80115c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80115c4:	3302      	adds	r3, #2
 80115c6:	e7c7      	b.n	8011558 <_printf_common+0x58>
 80115c8:	2301      	movs	r3, #1
 80115ca:	4622      	mov	r2, r4
 80115cc:	4641      	mov	r1, r8
 80115ce:	4638      	mov	r0, r7
 80115d0:	47c8      	blx	r9
 80115d2:	3001      	adds	r0, #1
 80115d4:	d0e6      	beq.n	80115a4 <_printf_common+0xa4>
 80115d6:	3601      	adds	r6, #1
 80115d8:	e7d9      	b.n	801158e <_printf_common+0x8e>
	...

080115dc <_printf_i>:
 80115dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115e0:	7e0f      	ldrb	r7, [r1, #24]
 80115e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80115e4:	2f78      	cmp	r7, #120	@ 0x78
 80115e6:	4691      	mov	r9, r2
 80115e8:	4680      	mov	r8, r0
 80115ea:	460c      	mov	r4, r1
 80115ec:	469a      	mov	sl, r3
 80115ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80115f2:	d807      	bhi.n	8011604 <_printf_i+0x28>
 80115f4:	2f62      	cmp	r7, #98	@ 0x62
 80115f6:	d80a      	bhi.n	801160e <_printf_i+0x32>
 80115f8:	2f00      	cmp	r7, #0
 80115fa:	f000 80d2 	beq.w	80117a2 <_printf_i+0x1c6>
 80115fe:	2f58      	cmp	r7, #88	@ 0x58
 8011600:	f000 80b9 	beq.w	8011776 <_printf_i+0x19a>
 8011604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801160c:	e03a      	b.n	8011684 <_printf_i+0xa8>
 801160e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011612:	2b15      	cmp	r3, #21
 8011614:	d8f6      	bhi.n	8011604 <_printf_i+0x28>
 8011616:	a101      	add	r1, pc, #4	@ (adr r1, 801161c <_printf_i+0x40>)
 8011618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801161c:	08011675 	.word	0x08011675
 8011620:	08011689 	.word	0x08011689
 8011624:	08011605 	.word	0x08011605
 8011628:	08011605 	.word	0x08011605
 801162c:	08011605 	.word	0x08011605
 8011630:	08011605 	.word	0x08011605
 8011634:	08011689 	.word	0x08011689
 8011638:	08011605 	.word	0x08011605
 801163c:	08011605 	.word	0x08011605
 8011640:	08011605 	.word	0x08011605
 8011644:	08011605 	.word	0x08011605
 8011648:	08011789 	.word	0x08011789
 801164c:	080116b3 	.word	0x080116b3
 8011650:	08011743 	.word	0x08011743
 8011654:	08011605 	.word	0x08011605
 8011658:	08011605 	.word	0x08011605
 801165c:	080117ab 	.word	0x080117ab
 8011660:	08011605 	.word	0x08011605
 8011664:	080116b3 	.word	0x080116b3
 8011668:	08011605 	.word	0x08011605
 801166c:	08011605 	.word	0x08011605
 8011670:	0801174b 	.word	0x0801174b
 8011674:	6833      	ldr	r3, [r6, #0]
 8011676:	1d1a      	adds	r2, r3, #4
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	6032      	str	r2, [r6, #0]
 801167c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011684:	2301      	movs	r3, #1
 8011686:	e09d      	b.n	80117c4 <_printf_i+0x1e8>
 8011688:	6833      	ldr	r3, [r6, #0]
 801168a:	6820      	ldr	r0, [r4, #0]
 801168c:	1d19      	adds	r1, r3, #4
 801168e:	6031      	str	r1, [r6, #0]
 8011690:	0606      	lsls	r6, r0, #24
 8011692:	d501      	bpl.n	8011698 <_printf_i+0xbc>
 8011694:	681d      	ldr	r5, [r3, #0]
 8011696:	e003      	b.n	80116a0 <_printf_i+0xc4>
 8011698:	0645      	lsls	r5, r0, #25
 801169a:	d5fb      	bpl.n	8011694 <_printf_i+0xb8>
 801169c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80116a0:	2d00      	cmp	r5, #0
 80116a2:	da03      	bge.n	80116ac <_printf_i+0xd0>
 80116a4:	232d      	movs	r3, #45	@ 0x2d
 80116a6:	426d      	negs	r5, r5
 80116a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116ac:	4859      	ldr	r0, [pc, #356]	@ (8011814 <_printf_i+0x238>)
 80116ae:	230a      	movs	r3, #10
 80116b0:	e011      	b.n	80116d6 <_printf_i+0xfa>
 80116b2:	6821      	ldr	r1, [r4, #0]
 80116b4:	6833      	ldr	r3, [r6, #0]
 80116b6:	0608      	lsls	r0, r1, #24
 80116b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80116bc:	d402      	bmi.n	80116c4 <_printf_i+0xe8>
 80116be:	0649      	lsls	r1, r1, #25
 80116c0:	bf48      	it	mi
 80116c2:	b2ad      	uxthmi	r5, r5
 80116c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80116c6:	4853      	ldr	r0, [pc, #332]	@ (8011814 <_printf_i+0x238>)
 80116c8:	6033      	str	r3, [r6, #0]
 80116ca:	bf14      	ite	ne
 80116cc:	230a      	movne	r3, #10
 80116ce:	2308      	moveq	r3, #8
 80116d0:	2100      	movs	r1, #0
 80116d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80116d6:	6866      	ldr	r6, [r4, #4]
 80116d8:	60a6      	str	r6, [r4, #8]
 80116da:	2e00      	cmp	r6, #0
 80116dc:	bfa2      	ittt	ge
 80116de:	6821      	ldrge	r1, [r4, #0]
 80116e0:	f021 0104 	bicge.w	r1, r1, #4
 80116e4:	6021      	strge	r1, [r4, #0]
 80116e6:	b90d      	cbnz	r5, 80116ec <_printf_i+0x110>
 80116e8:	2e00      	cmp	r6, #0
 80116ea:	d04b      	beq.n	8011784 <_printf_i+0x1a8>
 80116ec:	4616      	mov	r6, r2
 80116ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80116f2:	fb03 5711 	mls	r7, r3, r1, r5
 80116f6:	5dc7      	ldrb	r7, [r0, r7]
 80116f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80116fc:	462f      	mov	r7, r5
 80116fe:	42bb      	cmp	r3, r7
 8011700:	460d      	mov	r5, r1
 8011702:	d9f4      	bls.n	80116ee <_printf_i+0x112>
 8011704:	2b08      	cmp	r3, #8
 8011706:	d10b      	bne.n	8011720 <_printf_i+0x144>
 8011708:	6823      	ldr	r3, [r4, #0]
 801170a:	07df      	lsls	r7, r3, #31
 801170c:	d508      	bpl.n	8011720 <_printf_i+0x144>
 801170e:	6923      	ldr	r3, [r4, #16]
 8011710:	6861      	ldr	r1, [r4, #4]
 8011712:	4299      	cmp	r1, r3
 8011714:	bfde      	ittt	le
 8011716:	2330      	movle	r3, #48	@ 0x30
 8011718:	f806 3c01 	strble.w	r3, [r6, #-1]
 801171c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011720:	1b92      	subs	r2, r2, r6
 8011722:	6122      	str	r2, [r4, #16]
 8011724:	f8cd a000 	str.w	sl, [sp]
 8011728:	464b      	mov	r3, r9
 801172a:	aa03      	add	r2, sp, #12
 801172c:	4621      	mov	r1, r4
 801172e:	4640      	mov	r0, r8
 8011730:	f7ff fee6 	bl	8011500 <_printf_common>
 8011734:	3001      	adds	r0, #1
 8011736:	d14a      	bne.n	80117ce <_printf_i+0x1f2>
 8011738:	f04f 30ff 	mov.w	r0, #4294967295
 801173c:	b004      	add	sp, #16
 801173e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011742:	6823      	ldr	r3, [r4, #0]
 8011744:	f043 0320 	orr.w	r3, r3, #32
 8011748:	6023      	str	r3, [r4, #0]
 801174a:	4833      	ldr	r0, [pc, #204]	@ (8011818 <_printf_i+0x23c>)
 801174c:	2778      	movs	r7, #120	@ 0x78
 801174e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	6831      	ldr	r1, [r6, #0]
 8011756:	061f      	lsls	r7, r3, #24
 8011758:	f851 5b04 	ldr.w	r5, [r1], #4
 801175c:	d402      	bmi.n	8011764 <_printf_i+0x188>
 801175e:	065f      	lsls	r7, r3, #25
 8011760:	bf48      	it	mi
 8011762:	b2ad      	uxthmi	r5, r5
 8011764:	6031      	str	r1, [r6, #0]
 8011766:	07d9      	lsls	r1, r3, #31
 8011768:	bf44      	itt	mi
 801176a:	f043 0320 	orrmi.w	r3, r3, #32
 801176e:	6023      	strmi	r3, [r4, #0]
 8011770:	b11d      	cbz	r5, 801177a <_printf_i+0x19e>
 8011772:	2310      	movs	r3, #16
 8011774:	e7ac      	b.n	80116d0 <_printf_i+0xf4>
 8011776:	4827      	ldr	r0, [pc, #156]	@ (8011814 <_printf_i+0x238>)
 8011778:	e7e9      	b.n	801174e <_printf_i+0x172>
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	f023 0320 	bic.w	r3, r3, #32
 8011780:	6023      	str	r3, [r4, #0]
 8011782:	e7f6      	b.n	8011772 <_printf_i+0x196>
 8011784:	4616      	mov	r6, r2
 8011786:	e7bd      	b.n	8011704 <_printf_i+0x128>
 8011788:	6833      	ldr	r3, [r6, #0]
 801178a:	6825      	ldr	r5, [r4, #0]
 801178c:	6961      	ldr	r1, [r4, #20]
 801178e:	1d18      	adds	r0, r3, #4
 8011790:	6030      	str	r0, [r6, #0]
 8011792:	062e      	lsls	r6, r5, #24
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	d501      	bpl.n	801179c <_printf_i+0x1c0>
 8011798:	6019      	str	r1, [r3, #0]
 801179a:	e002      	b.n	80117a2 <_printf_i+0x1c6>
 801179c:	0668      	lsls	r0, r5, #25
 801179e:	d5fb      	bpl.n	8011798 <_printf_i+0x1bc>
 80117a0:	8019      	strh	r1, [r3, #0]
 80117a2:	2300      	movs	r3, #0
 80117a4:	6123      	str	r3, [r4, #16]
 80117a6:	4616      	mov	r6, r2
 80117a8:	e7bc      	b.n	8011724 <_printf_i+0x148>
 80117aa:	6833      	ldr	r3, [r6, #0]
 80117ac:	1d1a      	adds	r2, r3, #4
 80117ae:	6032      	str	r2, [r6, #0]
 80117b0:	681e      	ldr	r6, [r3, #0]
 80117b2:	6862      	ldr	r2, [r4, #4]
 80117b4:	2100      	movs	r1, #0
 80117b6:	4630      	mov	r0, r6
 80117b8:	f7ee fcf2 	bl	80001a0 <memchr>
 80117bc:	b108      	cbz	r0, 80117c2 <_printf_i+0x1e6>
 80117be:	1b80      	subs	r0, r0, r6
 80117c0:	6060      	str	r0, [r4, #4]
 80117c2:	6863      	ldr	r3, [r4, #4]
 80117c4:	6123      	str	r3, [r4, #16]
 80117c6:	2300      	movs	r3, #0
 80117c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117cc:	e7aa      	b.n	8011724 <_printf_i+0x148>
 80117ce:	6923      	ldr	r3, [r4, #16]
 80117d0:	4632      	mov	r2, r6
 80117d2:	4649      	mov	r1, r9
 80117d4:	4640      	mov	r0, r8
 80117d6:	47d0      	blx	sl
 80117d8:	3001      	adds	r0, #1
 80117da:	d0ad      	beq.n	8011738 <_printf_i+0x15c>
 80117dc:	6823      	ldr	r3, [r4, #0]
 80117de:	079b      	lsls	r3, r3, #30
 80117e0:	d413      	bmi.n	801180a <_printf_i+0x22e>
 80117e2:	68e0      	ldr	r0, [r4, #12]
 80117e4:	9b03      	ldr	r3, [sp, #12]
 80117e6:	4298      	cmp	r0, r3
 80117e8:	bfb8      	it	lt
 80117ea:	4618      	movlt	r0, r3
 80117ec:	e7a6      	b.n	801173c <_printf_i+0x160>
 80117ee:	2301      	movs	r3, #1
 80117f0:	4632      	mov	r2, r6
 80117f2:	4649      	mov	r1, r9
 80117f4:	4640      	mov	r0, r8
 80117f6:	47d0      	blx	sl
 80117f8:	3001      	adds	r0, #1
 80117fa:	d09d      	beq.n	8011738 <_printf_i+0x15c>
 80117fc:	3501      	adds	r5, #1
 80117fe:	68e3      	ldr	r3, [r4, #12]
 8011800:	9903      	ldr	r1, [sp, #12]
 8011802:	1a5b      	subs	r3, r3, r1
 8011804:	42ab      	cmp	r3, r5
 8011806:	dcf2      	bgt.n	80117ee <_printf_i+0x212>
 8011808:	e7eb      	b.n	80117e2 <_printf_i+0x206>
 801180a:	2500      	movs	r5, #0
 801180c:	f104 0619 	add.w	r6, r4, #25
 8011810:	e7f5      	b.n	80117fe <_printf_i+0x222>
 8011812:	bf00      	nop
 8011814:	08015173 	.word	0x08015173
 8011818:	08015184 	.word	0x08015184

0801181c <_scanf_float>:
 801181c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011820:	b087      	sub	sp, #28
 8011822:	4617      	mov	r7, r2
 8011824:	9303      	str	r3, [sp, #12]
 8011826:	688b      	ldr	r3, [r1, #8]
 8011828:	1e5a      	subs	r2, r3, #1
 801182a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801182e:	bf81      	itttt	hi
 8011830:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011834:	eb03 0b05 	addhi.w	fp, r3, r5
 8011838:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801183c:	608b      	strhi	r3, [r1, #8]
 801183e:	680b      	ldr	r3, [r1, #0]
 8011840:	460a      	mov	r2, r1
 8011842:	f04f 0500 	mov.w	r5, #0
 8011846:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801184a:	f842 3b1c 	str.w	r3, [r2], #28
 801184e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011852:	4680      	mov	r8, r0
 8011854:	460c      	mov	r4, r1
 8011856:	bf98      	it	ls
 8011858:	f04f 0b00 	movls.w	fp, #0
 801185c:	9201      	str	r2, [sp, #4]
 801185e:	4616      	mov	r6, r2
 8011860:	46aa      	mov	sl, r5
 8011862:	46a9      	mov	r9, r5
 8011864:	9502      	str	r5, [sp, #8]
 8011866:	68a2      	ldr	r2, [r4, #8]
 8011868:	b152      	cbz	r2, 8011880 <_scanf_float+0x64>
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	2b4e      	cmp	r3, #78	@ 0x4e
 8011870:	d864      	bhi.n	801193c <_scanf_float+0x120>
 8011872:	2b40      	cmp	r3, #64	@ 0x40
 8011874:	d83c      	bhi.n	80118f0 <_scanf_float+0xd4>
 8011876:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801187a:	b2c8      	uxtb	r0, r1
 801187c:	280e      	cmp	r0, #14
 801187e:	d93a      	bls.n	80118f6 <_scanf_float+0xda>
 8011880:	f1b9 0f00 	cmp.w	r9, #0
 8011884:	d003      	beq.n	801188e <_scanf_float+0x72>
 8011886:	6823      	ldr	r3, [r4, #0]
 8011888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801188c:	6023      	str	r3, [r4, #0]
 801188e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011892:	f1ba 0f01 	cmp.w	sl, #1
 8011896:	f200 8117 	bhi.w	8011ac8 <_scanf_float+0x2ac>
 801189a:	9b01      	ldr	r3, [sp, #4]
 801189c:	429e      	cmp	r6, r3
 801189e:	f200 8108 	bhi.w	8011ab2 <_scanf_float+0x296>
 80118a2:	2001      	movs	r0, #1
 80118a4:	b007      	add	sp, #28
 80118a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80118ae:	2a0d      	cmp	r2, #13
 80118b0:	d8e6      	bhi.n	8011880 <_scanf_float+0x64>
 80118b2:	a101      	add	r1, pc, #4	@ (adr r1, 80118b8 <_scanf_float+0x9c>)
 80118b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80118b8:	080119ff 	.word	0x080119ff
 80118bc:	08011881 	.word	0x08011881
 80118c0:	08011881 	.word	0x08011881
 80118c4:	08011881 	.word	0x08011881
 80118c8:	08011a5f 	.word	0x08011a5f
 80118cc:	08011a37 	.word	0x08011a37
 80118d0:	08011881 	.word	0x08011881
 80118d4:	08011881 	.word	0x08011881
 80118d8:	08011a0d 	.word	0x08011a0d
 80118dc:	08011881 	.word	0x08011881
 80118e0:	08011881 	.word	0x08011881
 80118e4:	08011881 	.word	0x08011881
 80118e8:	08011881 	.word	0x08011881
 80118ec:	080119c5 	.word	0x080119c5
 80118f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80118f4:	e7db      	b.n	80118ae <_scanf_float+0x92>
 80118f6:	290e      	cmp	r1, #14
 80118f8:	d8c2      	bhi.n	8011880 <_scanf_float+0x64>
 80118fa:	a001      	add	r0, pc, #4	@ (adr r0, 8011900 <_scanf_float+0xe4>)
 80118fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011900:	080119b5 	.word	0x080119b5
 8011904:	08011881 	.word	0x08011881
 8011908:	080119b5 	.word	0x080119b5
 801190c:	08011a4b 	.word	0x08011a4b
 8011910:	08011881 	.word	0x08011881
 8011914:	0801195d 	.word	0x0801195d
 8011918:	0801199b 	.word	0x0801199b
 801191c:	0801199b 	.word	0x0801199b
 8011920:	0801199b 	.word	0x0801199b
 8011924:	0801199b 	.word	0x0801199b
 8011928:	0801199b 	.word	0x0801199b
 801192c:	0801199b 	.word	0x0801199b
 8011930:	0801199b 	.word	0x0801199b
 8011934:	0801199b 	.word	0x0801199b
 8011938:	0801199b 	.word	0x0801199b
 801193c:	2b6e      	cmp	r3, #110	@ 0x6e
 801193e:	d809      	bhi.n	8011954 <_scanf_float+0x138>
 8011940:	2b60      	cmp	r3, #96	@ 0x60
 8011942:	d8b2      	bhi.n	80118aa <_scanf_float+0x8e>
 8011944:	2b54      	cmp	r3, #84	@ 0x54
 8011946:	d07b      	beq.n	8011a40 <_scanf_float+0x224>
 8011948:	2b59      	cmp	r3, #89	@ 0x59
 801194a:	d199      	bne.n	8011880 <_scanf_float+0x64>
 801194c:	2d07      	cmp	r5, #7
 801194e:	d197      	bne.n	8011880 <_scanf_float+0x64>
 8011950:	2508      	movs	r5, #8
 8011952:	e02c      	b.n	80119ae <_scanf_float+0x192>
 8011954:	2b74      	cmp	r3, #116	@ 0x74
 8011956:	d073      	beq.n	8011a40 <_scanf_float+0x224>
 8011958:	2b79      	cmp	r3, #121	@ 0x79
 801195a:	e7f6      	b.n	801194a <_scanf_float+0x12e>
 801195c:	6821      	ldr	r1, [r4, #0]
 801195e:	05c8      	lsls	r0, r1, #23
 8011960:	d51b      	bpl.n	801199a <_scanf_float+0x17e>
 8011962:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011966:	6021      	str	r1, [r4, #0]
 8011968:	f109 0901 	add.w	r9, r9, #1
 801196c:	f1bb 0f00 	cmp.w	fp, #0
 8011970:	d003      	beq.n	801197a <_scanf_float+0x15e>
 8011972:	3201      	adds	r2, #1
 8011974:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011978:	60a2      	str	r2, [r4, #8]
 801197a:	68a3      	ldr	r3, [r4, #8]
 801197c:	3b01      	subs	r3, #1
 801197e:	60a3      	str	r3, [r4, #8]
 8011980:	6923      	ldr	r3, [r4, #16]
 8011982:	3301      	adds	r3, #1
 8011984:	6123      	str	r3, [r4, #16]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	3b01      	subs	r3, #1
 801198a:	2b00      	cmp	r3, #0
 801198c:	607b      	str	r3, [r7, #4]
 801198e:	f340 8087 	ble.w	8011aa0 <_scanf_float+0x284>
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	3301      	adds	r3, #1
 8011996:	603b      	str	r3, [r7, #0]
 8011998:	e765      	b.n	8011866 <_scanf_float+0x4a>
 801199a:	eb1a 0105 	adds.w	r1, sl, r5
 801199e:	f47f af6f 	bne.w	8011880 <_scanf_float+0x64>
 80119a2:	6822      	ldr	r2, [r4, #0]
 80119a4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80119a8:	6022      	str	r2, [r4, #0]
 80119aa:	460d      	mov	r5, r1
 80119ac:	468a      	mov	sl, r1
 80119ae:	f806 3b01 	strb.w	r3, [r6], #1
 80119b2:	e7e2      	b.n	801197a <_scanf_float+0x15e>
 80119b4:	6822      	ldr	r2, [r4, #0]
 80119b6:	0610      	lsls	r0, r2, #24
 80119b8:	f57f af62 	bpl.w	8011880 <_scanf_float+0x64>
 80119bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80119c0:	6022      	str	r2, [r4, #0]
 80119c2:	e7f4      	b.n	80119ae <_scanf_float+0x192>
 80119c4:	f1ba 0f00 	cmp.w	sl, #0
 80119c8:	d10e      	bne.n	80119e8 <_scanf_float+0x1cc>
 80119ca:	f1b9 0f00 	cmp.w	r9, #0
 80119ce:	d10e      	bne.n	80119ee <_scanf_float+0x1d2>
 80119d0:	6822      	ldr	r2, [r4, #0]
 80119d2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80119d6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80119da:	d108      	bne.n	80119ee <_scanf_float+0x1d2>
 80119dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80119e0:	6022      	str	r2, [r4, #0]
 80119e2:	f04f 0a01 	mov.w	sl, #1
 80119e6:	e7e2      	b.n	80119ae <_scanf_float+0x192>
 80119e8:	f1ba 0f02 	cmp.w	sl, #2
 80119ec:	d055      	beq.n	8011a9a <_scanf_float+0x27e>
 80119ee:	2d01      	cmp	r5, #1
 80119f0:	d002      	beq.n	80119f8 <_scanf_float+0x1dc>
 80119f2:	2d04      	cmp	r5, #4
 80119f4:	f47f af44 	bne.w	8011880 <_scanf_float+0x64>
 80119f8:	3501      	adds	r5, #1
 80119fa:	b2ed      	uxtb	r5, r5
 80119fc:	e7d7      	b.n	80119ae <_scanf_float+0x192>
 80119fe:	f1ba 0f01 	cmp.w	sl, #1
 8011a02:	f47f af3d 	bne.w	8011880 <_scanf_float+0x64>
 8011a06:	f04f 0a02 	mov.w	sl, #2
 8011a0a:	e7d0      	b.n	80119ae <_scanf_float+0x192>
 8011a0c:	b97d      	cbnz	r5, 8011a2e <_scanf_float+0x212>
 8011a0e:	f1b9 0f00 	cmp.w	r9, #0
 8011a12:	f47f af38 	bne.w	8011886 <_scanf_float+0x6a>
 8011a16:	6822      	ldr	r2, [r4, #0]
 8011a18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011a1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011a20:	f040 8108 	bne.w	8011c34 <_scanf_float+0x418>
 8011a24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011a28:	6022      	str	r2, [r4, #0]
 8011a2a:	2501      	movs	r5, #1
 8011a2c:	e7bf      	b.n	80119ae <_scanf_float+0x192>
 8011a2e:	2d03      	cmp	r5, #3
 8011a30:	d0e2      	beq.n	80119f8 <_scanf_float+0x1dc>
 8011a32:	2d05      	cmp	r5, #5
 8011a34:	e7de      	b.n	80119f4 <_scanf_float+0x1d8>
 8011a36:	2d02      	cmp	r5, #2
 8011a38:	f47f af22 	bne.w	8011880 <_scanf_float+0x64>
 8011a3c:	2503      	movs	r5, #3
 8011a3e:	e7b6      	b.n	80119ae <_scanf_float+0x192>
 8011a40:	2d06      	cmp	r5, #6
 8011a42:	f47f af1d 	bne.w	8011880 <_scanf_float+0x64>
 8011a46:	2507      	movs	r5, #7
 8011a48:	e7b1      	b.n	80119ae <_scanf_float+0x192>
 8011a4a:	6822      	ldr	r2, [r4, #0]
 8011a4c:	0591      	lsls	r1, r2, #22
 8011a4e:	f57f af17 	bpl.w	8011880 <_scanf_float+0x64>
 8011a52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011a56:	6022      	str	r2, [r4, #0]
 8011a58:	f8cd 9008 	str.w	r9, [sp, #8]
 8011a5c:	e7a7      	b.n	80119ae <_scanf_float+0x192>
 8011a5e:	6822      	ldr	r2, [r4, #0]
 8011a60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011a64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011a68:	d006      	beq.n	8011a78 <_scanf_float+0x25c>
 8011a6a:	0550      	lsls	r0, r2, #21
 8011a6c:	f57f af08 	bpl.w	8011880 <_scanf_float+0x64>
 8011a70:	f1b9 0f00 	cmp.w	r9, #0
 8011a74:	f000 80de 	beq.w	8011c34 <_scanf_float+0x418>
 8011a78:	0591      	lsls	r1, r2, #22
 8011a7a:	bf58      	it	pl
 8011a7c:	9902      	ldrpl	r1, [sp, #8]
 8011a7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011a82:	bf58      	it	pl
 8011a84:	eba9 0101 	subpl.w	r1, r9, r1
 8011a88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011a8c:	bf58      	it	pl
 8011a8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011a92:	6022      	str	r2, [r4, #0]
 8011a94:	f04f 0900 	mov.w	r9, #0
 8011a98:	e789      	b.n	80119ae <_scanf_float+0x192>
 8011a9a:	f04f 0a03 	mov.w	sl, #3
 8011a9e:	e786      	b.n	80119ae <_scanf_float+0x192>
 8011aa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	4640      	mov	r0, r8
 8011aa8:	4798      	blx	r3
 8011aaa:	2800      	cmp	r0, #0
 8011aac:	f43f aedb 	beq.w	8011866 <_scanf_float+0x4a>
 8011ab0:	e6e6      	b.n	8011880 <_scanf_float+0x64>
 8011ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011aba:	463a      	mov	r2, r7
 8011abc:	4640      	mov	r0, r8
 8011abe:	4798      	blx	r3
 8011ac0:	6923      	ldr	r3, [r4, #16]
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	6123      	str	r3, [r4, #16]
 8011ac6:	e6e8      	b.n	801189a <_scanf_float+0x7e>
 8011ac8:	1e6b      	subs	r3, r5, #1
 8011aca:	2b06      	cmp	r3, #6
 8011acc:	d824      	bhi.n	8011b18 <_scanf_float+0x2fc>
 8011ace:	2d02      	cmp	r5, #2
 8011ad0:	d836      	bhi.n	8011b40 <_scanf_float+0x324>
 8011ad2:	9b01      	ldr	r3, [sp, #4]
 8011ad4:	429e      	cmp	r6, r3
 8011ad6:	f67f aee4 	bls.w	80118a2 <_scanf_float+0x86>
 8011ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011ae2:	463a      	mov	r2, r7
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	4798      	blx	r3
 8011ae8:	6923      	ldr	r3, [r4, #16]
 8011aea:	3b01      	subs	r3, #1
 8011aec:	6123      	str	r3, [r4, #16]
 8011aee:	e7f0      	b.n	8011ad2 <_scanf_float+0x2b6>
 8011af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011af4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011af8:	463a      	mov	r2, r7
 8011afa:	4640      	mov	r0, r8
 8011afc:	4798      	blx	r3
 8011afe:	6923      	ldr	r3, [r4, #16]
 8011b00:	3b01      	subs	r3, #1
 8011b02:	6123      	str	r3, [r4, #16]
 8011b04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b08:	fa5f fa8a 	uxtb.w	sl, sl
 8011b0c:	f1ba 0f02 	cmp.w	sl, #2
 8011b10:	d1ee      	bne.n	8011af0 <_scanf_float+0x2d4>
 8011b12:	3d03      	subs	r5, #3
 8011b14:	b2ed      	uxtb	r5, r5
 8011b16:	1b76      	subs	r6, r6, r5
 8011b18:	6823      	ldr	r3, [r4, #0]
 8011b1a:	05da      	lsls	r2, r3, #23
 8011b1c:	d530      	bpl.n	8011b80 <_scanf_float+0x364>
 8011b1e:	055b      	lsls	r3, r3, #21
 8011b20:	d511      	bpl.n	8011b46 <_scanf_float+0x32a>
 8011b22:	9b01      	ldr	r3, [sp, #4]
 8011b24:	429e      	cmp	r6, r3
 8011b26:	f67f aebc 	bls.w	80118a2 <_scanf_float+0x86>
 8011b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b32:	463a      	mov	r2, r7
 8011b34:	4640      	mov	r0, r8
 8011b36:	4798      	blx	r3
 8011b38:	6923      	ldr	r3, [r4, #16]
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	6123      	str	r3, [r4, #16]
 8011b3e:	e7f0      	b.n	8011b22 <_scanf_float+0x306>
 8011b40:	46aa      	mov	sl, r5
 8011b42:	46b3      	mov	fp, r6
 8011b44:	e7de      	b.n	8011b04 <_scanf_float+0x2e8>
 8011b46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011b4a:	6923      	ldr	r3, [r4, #16]
 8011b4c:	2965      	cmp	r1, #101	@ 0x65
 8011b4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b52:	f106 35ff 	add.w	r5, r6, #4294967295
 8011b56:	6123      	str	r3, [r4, #16]
 8011b58:	d00c      	beq.n	8011b74 <_scanf_float+0x358>
 8011b5a:	2945      	cmp	r1, #69	@ 0x45
 8011b5c:	d00a      	beq.n	8011b74 <_scanf_float+0x358>
 8011b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b62:	463a      	mov	r2, r7
 8011b64:	4640      	mov	r0, r8
 8011b66:	4798      	blx	r3
 8011b68:	6923      	ldr	r3, [r4, #16]
 8011b6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011b6e:	3b01      	subs	r3, #1
 8011b70:	1eb5      	subs	r5, r6, #2
 8011b72:	6123      	str	r3, [r4, #16]
 8011b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b78:	463a      	mov	r2, r7
 8011b7a:	4640      	mov	r0, r8
 8011b7c:	4798      	blx	r3
 8011b7e:	462e      	mov	r6, r5
 8011b80:	6822      	ldr	r2, [r4, #0]
 8011b82:	f012 0210 	ands.w	r2, r2, #16
 8011b86:	d001      	beq.n	8011b8c <_scanf_float+0x370>
 8011b88:	2000      	movs	r0, #0
 8011b8a:	e68b      	b.n	80118a4 <_scanf_float+0x88>
 8011b8c:	7032      	strb	r2, [r6, #0]
 8011b8e:	6823      	ldr	r3, [r4, #0]
 8011b90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011b98:	d11c      	bne.n	8011bd4 <_scanf_float+0x3b8>
 8011b9a:	9b02      	ldr	r3, [sp, #8]
 8011b9c:	454b      	cmp	r3, r9
 8011b9e:	eba3 0209 	sub.w	r2, r3, r9
 8011ba2:	d123      	bne.n	8011bec <_scanf_float+0x3d0>
 8011ba4:	9901      	ldr	r1, [sp, #4]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	4640      	mov	r0, r8
 8011baa:	f7ff f9cd 	bl	8010f48 <_strtod_r>
 8011bae:	9b03      	ldr	r3, [sp, #12]
 8011bb0:	6821      	ldr	r1, [r4, #0]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	f011 0f02 	tst.w	r1, #2
 8011bb8:	ec57 6b10 	vmov	r6, r7, d0
 8011bbc:	f103 0204 	add.w	r2, r3, #4
 8011bc0:	d01f      	beq.n	8011c02 <_scanf_float+0x3e6>
 8011bc2:	9903      	ldr	r1, [sp, #12]
 8011bc4:	600a      	str	r2, [r1, #0]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	e9c3 6700 	strd	r6, r7, [r3]
 8011bcc:	68e3      	ldr	r3, [r4, #12]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	60e3      	str	r3, [r4, #12]
 8011bd2:	e7d9      	b.n	8011b88 <_scanf_float+0x36c>
 8011bd4:	9b04      	ldr	r3, [sp, #16]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d0e4      	beq.n	8011ba4 <_scanf_float+0x388>
 8011bda:	9905      	ldr	r1, [sp, #20]
 8011bdc:	230a      	movs	r3, #10
 8011bde:	3101      	adds	r1, #1
 8011be0:	4640      	mov	r0, r8
 8011be2:	f002 fa37 	bl	8014054 <_strtol_r>
 8011be6:	9b04      	ldr	r3, [sp, #16]
 8011be8:	9e05      	ldr	r6, [sp, #20]
 8011bea:	1ac2      	subs	r2, r0, r3
 8011bec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011bf0:	429e      	cmp	r6, r3
 8011bf2:	bf28      	it	cs
 8011bf4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011bf8:	4910      	ldr	r1, [pc, #64]	@ (8011c3c <_scanf_float+0x420>)
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f000 f95c 	bl	8011eb8 <siprintf>
 8011c00:	e7d0      	b.n	8011ba4 <_scanf_float+0x388>
 8011c02:	f011 0f04 	tst.w	r1, #4
 8011c06:	9903      	ldr	r1, [sp, #12]
 8011c08:	600a      	str	r2, [r1, #0]
 8011c0a:	d1dc      	bne.n	8011bc6 <_scanf_float+0x3aa>
 8011c0c:	681d      	ldr	r5, [r3, #0]
 8011c0e:	4632      	mov	r2, r6
 8011c10:	463b      	mov	r3, r7
 8011c12:	4630      	mov	r0, r6
 8011c14:	4639      	mov	r1, r7
 8011c16:	f7ee ff71 	bl	8000afc <__aeabi_dcmpun>
 8011c1a:	b128      	cbz	r0, 8011c28 <_scanf_float+0x40c>
 8011c1c:	4808      	ldr	r0, [pc, #32]	@ (8011c40 <_scanf_float+0x424>)
 8011c1e:	f000 fafb 	bl	8012218 <nanf>
 8011c22:	ed85 0a00 	vstr	s0, [r5]
 8011c26:	e7d1      	b.n	8011bcc <_scanf_float+0x3b0>
 8011c28:	4630      	mov	r0, r6
 8011c2a:	4639      	mov	r1, r7
 8011c2c:	f7ee ffc4 	bl	8000bb8 <__aeabi_d2f>
 8011c30:	6028      	str	r0, [r5, #0]
 8011c32:	e7cb      	b.n	8011bcc <_scanf_float+0x3b0>
 8011c34:	f04f 0900 	mov.w	r9, #0
 8011c38:	e629      	b.n	801188e <_scanf_float+0x72>
 8011c3a:	bf00      	nop
 8011c3c:	08015195 	.word	0x08015195
 8011c40:	08015434 	.word	0x08015434

08011c44 <std>:
 8011c44:	2300      	movs	r3, #0
 8011c46:	b510      	push	{r4, lr}
 8011c48:	4604      	mov	r4, r0
 8011c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8011c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c52:	6083      	str	r3, [r0, #8]
 8011c54:	8181      	strh	r1, [r0, #12]
 8011c56:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c58:	81c2      	strh	r2, [r0, #14]
 8011c5a:	6183      	str	r3, [r0, #24]
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	2208      	movs	r2, #8
 8011c60:	305c      	adds	r0, #92	@ 0x5c
 8011c62:	f000 fa21 	bl	80120a8 <memset>
 8011c66:	4b0d      	ldr	r3, [pc, #52]	@ (8011c9c <std+0x58>)
 8011c68:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011ca0 <std+0x5c>)
 8011c6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8011ca4 <std+0x60>)
 8011c70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011c72:	4b0d      	ldr	r3, [pc, #52]	@ (8011ca8 <std+0x64>)
 8011c74:	6323      	str	r3, [r4, #48]	@ 0x30
 8011c76:	4b0d      	ldr	r3, [pc, #52]	@ (8011cac <std+0x68>)
 8011c78:	6224      	str	r4, [r4, #32]
 8011c7a:	429c      	cmp	r4, r3
 8011c7c:	d006      	beq.n	8011c8c <std+0x48>
 8011c7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011c82:	4294      	cmp	r4, r2
 8011c84:	d002      	beq.n	8011c8c <std+0x48>
 8011c86:	33d0      	adds	r3, #208	@ 0xd0
 8011c88:	429c      	cmp	r4, r3
 8011c8a:	d105      	bne.n	8011c98 <std+0x54>
 8011c8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c94:	f000 baa6 	b.w	80121e4 <__retarget_lock_init_recursive>
 8011c98:	bd10      	pop	{r4, pc}
 8011c9a:	bf00      	nop
 8011c9c:	08011ef9 	.word	0x08011ef9
 8011ca0:	08011f1b 	.word	0x08011f1b
 8011ca4:	08011f53 	.word	0x08011f53
 8011ca8:	08011f77 	.word	0x08011f77
 8011cac:	20000a00 	.word	0x20000a00

08011cb0 <stdio_exit_handler>:
 8011cb0:	4a02      	ldr	r2, [pc, #8]	@ (8011cbc <stdio_exit_handler+0xc>)
 8011cb2:	4903      	ldr	r1, [pc, #12]	@ (8011cc0 <stdio_exit_handler+0x10>)
 8011cb4:	4803      	ldr	r0, [pc, #12]	@ (8011cc4 <stdio_exit_handler+0x14>)
 8011cb6:	f000 b869 	b.w	8011d8c <_fwalk_sglue>
 8011cba:	bf00      	nop
 8011cbc:	20000038 	.word	0x20000038
 8011cc0:	080146ad 	.word	0x080146ad
 8011cc4:	200001b4 	.word	0x200001b4

08011cc8 <cleanup_stdio>:
 8011cc8:	6841      	ldr	r1, [r0, #4]
 8011cca:	4b0c      	ldr	r3, [pc, #48]	@ (8011cfc <cleanup_stdio+0x34>)
 8011ccc:	4299      	cmp	r1, r3
 8011cce:	b510      	push	{r4, lr}
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	d001      	beq.n	8011cd8 <cleanup_stdio+0x10>
 8011cd4:	f002 fcea 	bl	80146ac <_fflush_r>
 8011cd8:	68a1      	ldr	r1, [r4, #8]
 8011cda:	4b09      	ldr	r3, [pc, #36]	@ (8011d00 <cleanup_stdio+0x38>)
 8011cdc:	4299      	cmp	r1, r3
 8011cde:	d002      	beq.n	8011ce6 <cleanup_stdio+0x1e>
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f002 fce3 	bl	80146ac <_fflush_r>
 8011ce6:	68e1      	ldr	r1, [r4, #12]
 8011ce8:	4b06      	ldr	r3, [pc, #24]	@ (8011d04 <cleanup_stdio+0x3c>)
 8011cea:	4299      	cmp	r1, r3
 8011cec:	d004      	beq.n	8011cf8 <cleanup_stdio+0x30>
 8011cee:	4620      	mov	r0, r4
 8011cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cf4:	f002 bcda 	b.w	80146ac <_fflush_r>
 8011cf8:	bd10      	pop	{r4, pc}
 8011cfa:	bf00      	nop
 8011cfc:	20000a00 	.word	0x20000a00
 8011d00:	20000a68 	.word	0x20000a68
 8011d04:	20000ad0 	.word	0x20000ad0

08011d08 <global_stdio_init.part.0>:
 8011d08:	b510      	push	{r4, lr}
 8011d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8011d38 <global_stdio_init.part.0+0x30>)
 8011d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8011d3c <global_stdio_init.part.0+0x34>)
 8011d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8011d40 <global_stdio_init.part.0+0x38>)
 8011d10:	601a      	str	r2, [r3, #0]
 8011d12:	4620      	mov	r0, r4
 8011d14:	2200      	movs	r2, #0
 8011d16:	2104      	movs	r1, #4
 8011d18:	f7ff ff94 	bl	8011c44 <std>
 8011d1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011d20:	2201      	movs	r2, #1
 8011d22:	2109      	movs	r1, #9
 8011d24:	f7ff ff8e 	bl	8011c44 <std>
 8011d28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011d2c:	2202      	movs	r2, #2
 8011d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d32:	2112      	movs	r1, #18
 8011d34:	f7ff bf86 	b.w	8011c44 <std>
 8011d38:	20000b38 	.word	0x20000b38
 8011d3c:	20000a00 	.word	0x20000a00
 8011d40:	08011cb1 	.word	0x08011cb1

08011d44 <__sfp_lock_acquire>:
 8011d44:	4801      	ldr	r0, [pc, #4]	@ (8011d4c <__sfp_lock_acquire+0x8>)
 8011d46:	f000 ba4e 	b.w	80121e6 <__retarget_lock_acquire_recursive>
 8011d4a:	bf00      	nop
 8011d4c:	20000b41 	.word	0x20000b41

08011d50 <__sfp_lock_release>:
 8011d50:	4801      	ldr	r0, [pc, #4]	@ (8011d58 <__sfp_lock_release+0x8>)
 8011d52:	f000 ba49 	b.w	80121e8 <__retarget_lock_release_recursive>
 8011d56:	bf00      	nop
 8011d58:	20000b41 	.word	0x20000b41

08011d5c <__sinit>:
 8011d5c:	b510      	push	{r4, lr}
 8011d5e:	4604      	mov	r4, r0
 8011d60:	f7ff fff0 	bl	8011d44 <__sfp_lock_acquire>
 8011d64:	6a23      	ldr	r3, [r4, #32]
 8011d66:	b11b      	cbz	r3, 8011d70 <__sinit+0x14>
 8011d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d6c:	f7ff bff0 	b.w	8011d50 <__sfp_lock_release>
 8011d70:	4b04      	ldr	r3, [pc, #16]	@ (8011d84 <__sinit+0x28>)
 8011d72:	6223      	str	r3, [r4, #32]
 8011d74:	4b04      	ldr	r3, [pc, #16]	@ (8011d88 <__sinit+0x2c>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1f5      	bne.n	8011d68 <__sinit+0xc>
 8011d7c:	f7ff ffc4 	bl	8011d08 <global_stdio_init.part.0>
 8011d80:	e7f2      	b.n	8011d68 <__sinit+0xc>
 8011d82:	bf00      	nop
 8011d84:	08011cc9 	.word	0x08011cc9
 8011d88:	20000b38 	.word	0x20000b38

08011d8c <_fwalk_sglue>:
 8011d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d90:	4607      	mov	r7, r0
 8011d92:	4688      	mov	r8, r1
 8011d94:	4614      	mov	r4, r2
 8011d96:	2600      	movs	r6, #0
 8011d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8011da0:	d505      	bpl.n	8011dae <_fwalk_sglue+0x22>
 8011da2:	6824      	ldr	r4, [r4, #0]
 8011da4:	2c00      	cmp	r4, #0
 8011da6:	d1f7      	bne.n	8011d98 <_fwalk_sglue+0xc>
 8011da8:	4630      	mov	r0, r6
 8011daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dae:	89ab      	ldrh	r3, [r5, #12]
 8011db0:	2b01      	cmp	r3, #1
 8011db2:	d907      	bls.n	8011dc4 <_fwalk_sglue+0x38>
 8011db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011db8:	3301      	adds	r3, #1
 8011dba:	d003      	beq.n	8011dc4 <_fwalk_sglue+0x38>
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	47c0      	blx	r8
 8011dc2:	4306      	orrs	r6, r0
 8011dc4:	3568      	adds	r5, #104	@ 0x68
 8011dc6:	e7e9      	b.n	8011d9c <_fwalk_sglue+0x10>

08011dc8 <iprintf>:
 8011dc8:	b40f      	push	{r0, r1, r2, r3}
 8011dca:	b507      	push	{r0, r1, r2, lr}
 8011dcc:	4906      	ldr	r1, [pc, #24]	@ (8011de8 <iprintf+0x20>)
 8011dce:	ab04      	add	r3, sp, #16
 8011dd0:	6808      	ldr	r0, [r1, #0]
 8011dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dd6:	6881      	ldr	r1, [r0, #8]
 8011dd8:	9301      	str	r3, [sp, #4]
 8011dda:	f002 facb 	bl	8014374 <_vfiprintf_r>
 8011dde:	b003      	add	sp, #12
 8011de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011de4:	b004      	add	sp, #16
 8011de6:	4770      	bx	lr
 8011de8:	200001b0 	.word	0x200001b0

08011dec <putchar>:
 8011dec:	4b02      	ldr	r3, [pc, #8]	@ (8011df8 <putchar+0xc>)
 8011dee:	4601      	mov	r1, r0
 8011df0:	6818      	ldr	r0, [r3, #0]
 8011df2:	6882      	ldr	r2, [r0, #8]
 8011df4:	f002 bce4 	b.w	80147c0 <_putc_r>
 8011df8:	200001b0 	.word	0x200001b0

08011dfc <_puts_r>:
 8011dfc:	6a03      	ldr	r3, [r0, #32]
 8011dfe:	b570      	push	{r4, r5, r6, lr}
 8011e00:	6884      	ldr	r4, [r0, #8]
 8011e02:	4605      	mov	r5, r0
 8011e04:	460e      	mov	r6, r1
 8011e06:	b90b      	cbnz	r3, 8011e0c <_puts_r+0x10>
 8011e08:	f7ff ffa8 	bl	8011d5c <__sinit>
 8011e0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e0e:	07db      	lsls	r3, r3, #31
 8011e10:	d405      	bmi.n	8011e1e <_puts_r+0x22>
 8011e12:	89a3      	ldrh	r3, [r4, #12]
 8011e14:	0598      	lsls	r0, r3, #22
 8011e16:	d402      	bmi.n	8011e1e <_puts_r+0x22>
 8011e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e1a:	f000 f9e4 	bl	80121e6 <__retarget_lock_acquire_recursive>
 8011e1e:	89a3      	ldrh	r3, [r4, #12]
 8011e20:	0719      	lsls	r1, r3, #28
 8011e22:	d502      	bpl.n	8011e2a <_puts_r+0x2e>
 8011e24:	6923      	ldr	r3, [r4, #16]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d135      	bne.n	8011e96 <_puts_r+0x9a>
 8011e2a:	4621      	mov	r1, r4
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	f000 f8e5 	bl	8011ffc <__swsetup_r>
 8011e32:	b380      	cbz	r0, 8011e96 <_puts_r+0x9a>
 8011e34:	f04f 35ff 	mov.w	r5, #4294967295
 8011e38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e3a:	07da      	lsls	r2, r3, #31
 8011e3c:	d405      	bmi.n	8011e4a <_puts_r+0x4e>
 8011e3e:	89a3      	ldrh	r3, [r4, #12]
 8011e40:	059b      	lsls	r3, r3, #22
 8011e42:	d402      	bmi.n	8011e4a <_puts_r+0x4e>
 8011e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e46:	f000 f9cf 	bl	80121e8 <__retarget_lock_release_recursive>
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	bd70      	pop	{r4, r5, r6, pc}
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	da04      	bge.n	8011e5c <_puts_r+0x60>
 8011e52:	69a2      	ldr	r2, [r4, #24]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	dc17      	bgt.n	8011e88 <_puts_r+0x8c>
 8011e58:	290a      	cmp	r1, #10
 8011e5a:	d015      	beq.n	8011e88 <_puts_r+0x8c>
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	1c5a      	adds	r2, r3, #1
 8011e60:	6022      	str	r2, [r4, #0]
 8011e62:	7019      	strb	r1, [r3, #0]
 8011e64:	68a3      	ldr	r3, [r4, #8]
 8011e66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e6a:	3b01      	subs	r3, #1
 8011e6c:	60a3      	str	r3, [r4, #8]
 8011e6e:	2900      	cmp	r1, #0
 8011e70:	d1ed      	bne.n	8011e4e <_puts_r+0x52>
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	da11      	bge.n	8011e9a <_puts_r+0x9e>
 8011e76:	4622      	mov	r2, r4
 8011e78:	210a      	movs	r1, #10
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	f000 f87f 	bl	8011f7e <__swbuf_r>
 8011e80:	3001      	adds	r0, #1
 8011e82:	d0d7      	beq.n	8011e34 <_puts_r+0x38>
 8011e84:	250a      	movs	r5, #10
 8011e86:	e7d7      	b.n	8011e38 <_puts_r+0x3c>
 8011e88:	4622      	mov	r2, r4
 8011e8a:	4628      	mov	r0, r5
 8011e8c:	f000 f877 	bl	8011f7e <__swbuf_r>
 8011e90:	3001      	adds	r0, #1
 8011e92:	d1e7      	bne.n	8011e64 <_puts_r+0x68>
 8011e94:	e7ce      	b.n	8011e34 <_puts_r+0x38>
 8011e96:	3e01      	subs	r6, #1
 8011e98:	e7e4      	b.n	8011e64 <_puts_r+0x68>
 8011e9a:	6823      	ldr	r3, [r4, #0]
 8011e9c:	1c5a      	adds	r2, r3, #1
 8011e9e:	6022      	str	r2, [r4, #0]
 8011ea0:	220a      	movs	r2, #10
 8011ea2:	701a      	strb	r2, [r3, #0]
 8011ea4:	e7ee      	b.n	8011e84 <_puts_r+0x88>
	...

08011ea8 <puts>:
 8011ea8:	4b02      	ldr	r3, [pc, #8]	@ (8011eb4 <puts+0xc>)
 8011eaa:	4601      	mov	r1, r0
 8011eac:	6818      	ldr	r0, [r3, #0]
 8011eae:	f7ff bfa5 	b.w	8011dfc <_puts_r>
 8011eb2:	bf00      	nop
 8011eb4:	200001b0 	.word	0x200001b0

08011eb8 <siprintf>:
 8011eb8:	b40e      	push	{r1, r2, r3}
 8011eba:	b500      	push	{lr}
 8011ebc:	b09c      	sub	sp, #112	@ 0x70
 8011ebe:	ab1d      	add	r3, sp, #116	@ 0x74
 8011ec0:	9002      	str	r0, [sp, #8]
 8011ec2:	9006      	str	r0, [sp, #24]
 8011ec4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011ec8:	4809      	ldr	r0, [pc, #36]	@ (8011ef0 <siprintf+0x38>)
 8011eca:	9107      	str	r1, [sp, #28]
 8011ecc:	9104      	str	r1, [sp, #16]
 8011ece:	4909      	ldr	r1, [pc, #36]	@ (8011ef4 <siprintf+0x3c>)
 8011ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ed4:	9105      	str	r1, [sp, #20]
 8011ed6:	6800      	ldr	r0, [r0, #0]
 8011ed8:	9301      	str	r3, [sp, #4]
 8011eda:	a902      	add	r1, sp, #8
 8011edc:	f002 f924 	bl	8014128 <_svfiprintf_r>
 8011ee0:	9b02      	ldr	r3, [sp, #8]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	701a      	strb	r2, [r3, #0]
 8011ee6:	b01c      	add	sp, #112	@ 0x70
 8011ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011eec:	b003      	add	sp, #12
 8011eee:	4770      	bx	lr
 8011ef0:	200001b0 	.word	0x200001b0
 8011ef4:	ffff0208 	.word	0xffff0208

08011ef8 <__sread>:
 8011ef8:	b510      	push	{r4, lr}
 8011efa:	460c      	mov	r4, r1
 8011efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f00:	f000 f912 	bl	8012128 <_read_r>
 8011f04:	2800      	cmp	r0, #0
 8011f06:	bfab      	itete	ge
 8011f08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8011f0c:	181b      	addge	r3, r3, r0
 8011f0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011f12:	bfac      	ite	ge
 8011f14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011f16:	81a3      	strhlt	r3, [r4, #12]
 8011f18:	bd10      	pop	{r4, pc}

08011f1a <__swrite>:
 8011f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f1e:	461f      	mov	r7, r3
 8011f20:	898b      	ldrh	r3, [r1, #12]
 8011f22:	05db      	lsls	r3, r3, #23
 8011f24:	4605      	mov	r5, r0
 8011f26:	460c      	mov	r4, r1
 8011f28:	4616      	mov	r6, r2
 8011f2a:	d505      	bpl.n	8011f38 <__swrite+0x1e>
 8011f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f30:	2302      	movs	r3, #2
 8011f32:	2200      	movs	r2, #0
 8011f34:	f000 f8e6 	bl	8012104 <_lseek_r>
 8011f38:	89a3      	ldrh	r3, [r4, #12]
 8011f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011f42:	81a3      	strh	r3, [r4, #12]
 8011f44:	4632      	mov	r2, r6
 8011f46:	463b      	mov	r3, r7
 8011f48:	4628      	mov	r0, r5
 8011f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4e:	f000 b90d 	b.w	801216c <_write_r>

08011f52 <__sseek>:
 8011f52:	b510      	push	{r4, lr}
 8011f54:	460c      	mov	r4, r1
 8011f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f5a:	f000 f8d3 	bl	8012104 <_lseek_r>
 8011f5e:	1c43      	adds	r3, r0, #1
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	bf15      	itete	ne
 8011f64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011f66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011f6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011f6e:	81a3      	strheq	r3, [r4, #12]
 8011f70:	bf18      	it	ne
 8011f72:	81a3      	strhne	r3, [r4, #12]
 8011f74:	bd10      	pop	{r4, pc}

08011f76 <__sclose>:
 8011f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f7a:	f000 b8b3 	b.w	80120e4 <_close_r>

08011f7e <__swbuf_r>:
 8011f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f80:	460e      	mov	r6, r1
 8011f82:	4614      	mov	r4, r2
 8011f84:	4605      	mov	r5, r0
 8011f86:	b118      	cbz	r0, 8011f90 <__swbuf_r+0x12>
 8011f88:	6a03      	ldr	r3, [r0, #32]
 8011f8a:	b90b      	cbnz	r3, 8011f90 <__swbuf_r+0x12>
 8011f8c:	f7ff fee6 	bl	8011d5c <__sinit>
 8011f90:	69a3      	ldr	r3, [r4, #24]
 8011f92:	60a3      	str	r3, [r4, #8]
 8011f94:	89a3      	ldrh	r3, [r4, #12]
 8011f96:	071a      	lsls	r2, r3, #28
 8011f98:	d501      	bpl.n	8011f9e <__swbuf_r+0x20>
 8011f9a:	6923      	ldr	r3, [r4, #16]
 8011f9c:	b943      	cbnz	r3, 8011fb0 <__swbuf_r+0x32>
 8011f9e:	4621      	mov	r1, r4
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	f000 f82b 	bl	8011ffc <__swsetup_r>
 8011fa6:	b118      	cbz	r0, 8011fb0 <__swbuf_r+0x32>
 8011fa8:	f04f 37ff 	mov.w	r7, #4294967295
 8011fac:	4638      	mov	r0, r7
 8011fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fb0:	6823      	ldr	r3, [r4, #0]
 8011fb2:	6922      	ldr	r2, [r4, #16]
 8011fb4:	1a98      	subs	r0, r3, r2
 8011fb6:	6963      	ldr	r3, [r4, #20]
 8011fb8:	b2f6      	uxtb	r6, r6
 8011fba:	4283      	cmp	r3, r0
 8011fbc:	4637      	mov	r7, r6
 8011fbe:	dc05      	bgt.n	8011fcc <__swbuf_r+0x4e>
 8011fc0:	4621      	mov	r1, r4
 8011fc2:	4628      	mov	r0, r5
 8011fc4:	f002 fb72 	bl	80146ac <_fflush_r>
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	d1ed      	bne.n	8011fa8 <__swbuf_r+0x2a>
 8011fcc:	68a3      	ldr	r3, [r4, #8]
 8011fce:	3b01      	subs	r3, #1
 8011fd0:	60a3      	str	r3, [r4, #8]
 8011fd2:	6823      	ldr	r3, [r4, #0]
 8011fd4:	1c5a      	adds	r2, r3, #1
 8011fd6:	6022      	str	r2, [r4, #0]
 8011fd8:	701e      	strb	r6, [r3, #0]
 8011fda:	6962      	ldr	r2, [r4, #20]
 8011fdc:	1c43      	adds	r3, r0, #1
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d004      	beq.n	8011fec <__swbuf_r+0x6e>
 8011fe2:	89a3      	ldrh	r3, [r4, #12]
 8011fe4:	07db      	lsls	r3, r3, #31
 8011fe6:	d5e1      	bpl.n	8011fac <__swbuf_r+0x2e>
 8011fe8:	2e0a      	cmp	r6, #10
 8011fea:	d1df      	bne.n	8011fac <__swbuf_r+0x2e>
 8011fec:	4621      	mov	r1, r4
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f002 fb5c 	bl	80146ac <_fflush_r>
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	d0d9      	beq.n	8011fac <__swbuf_r+0x2e>
 8011ff8:	e7d6      	b.n	8011fa8 <__swbuf_r+0x2a>
	...

08011ffc <__swsetup_r>:
 8011ffc:	b538      	push	{r3, r4, r5, lr}
 8011ffe:	4b29      	ldr	r3, [pc, #164]	@ (80120a4 <__swsetup_r+0xa8>)
 8012000:	4605      	mov	r5, r0
 8012002:	6818      	ldr	r0, [r3, #0]
 8012004:	460c      	mov	r4, r1
 8012006:	b118      	cbz	r0, 8012010 <__swsetup_r+0x14>
 8012008:	6a03      	ldr	r3, [r0, #32]
 801200a:	b90b      	cbnz	r3, 8012010 <__swsetup_r+0x14>
 801200c:	f7ff fea6 	bl	8011d5c <__sinit>
 8012010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012014:	0719      	lsls	r1, r3, #28
 8012016:	d422      	bmi.n	801205e <__swsetup_r+0x62>
 8012018:	06da      	lsls	r2, r3, #27
 801201a:	d407      	bmi.n	801202c <__swsetup_r+0x30>
 801201c:	2209      	movs	r2, #9
 801201e:	602a      	str	r2, [r5, #0]
 8012020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012024:	81a3      	strh	r3, [r4, #12]
 8012026:	f04f 30ff 	mov.w	r0, #4294967295
 801202a:	e033      	b.n	8012094 <__swsetup_r+0x98>
 801202c:	0758      	lsls	r0, r3, #29
 801202e:	d512      	bpl.n	8012056 <__swsetup_r+0x5a>
 8012030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012032:	b141      	cbz	r1, 8012046 <__swsetup_r+0x4a>
 8012034:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012038:	4299      	cmp	r1, r3
 801203a:	d002      	beq.n	8012042 <__swsetup_r+0x46>
 801203c:	4628      	mov	r0, r5
 801203e:	f000 ff3f 	bl	8012ec0 <_free_r>
 8012042:	2300      	movs	r3, #0
 8012044:	6363      	str	r3, [r4, #52]	@ 0x34
 8012046:	89a3      	ldrh	r3, [r4, #12]
 8012048:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801204c:	81a3      	strh	r3, [r4, #12]
 801204e:	2300      	movs	r3, #0
 8012050:	6063      	str	r3, [r4, #4]
 8012052:	6923      	ldr	r3, [r4, #16]
 8012054:	6023      	str	r3, [r4, #0]
 8012056:	89a3      	ldrh	r3, [r4, #12]
 8012058:	f043 0308 	orr.w	r3, r3, #8
 801205c:	81a3      	strh	r3, [r4, #12]
 801205e:	6923      	ldr	r3, [r4, #16]
 8012060:	b94b      	cbnz	r3, 8012076 <__swsetup_r+0x7a>
 8012062:	89a3      	ldrh	r3, [r4, #12]
 8012064:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801206c:	d003      	beq.n	8012076 <__swsetup_r+0x7a>
 801206e:	4621      	mov	r1, r4
 8012070:	4628      	mov	r0, r5
 8012072:	f002 fb69 	bl	8014748 <__smakebuf_r>
 8012076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801207a:	f013 0201 	ands.w	r2, r3, #1
 801207e:	d00a      	beq.n	8012096 <__swsetup_r+0x9a>
 8012080:	2200      	movs	r2, #0
 8012082:	60a2      	str	r2, [r4, #8]
 8012084:	6962      	ldr	r2, [r4, #20]
 8012086:	4252      	negs	r2, r2
 8012088:	61a2      	str	r2, [r4, #24]
 801208a:	6922      	ldr	r2, [r4, #16]
 801208c:	b942      	cbnz	r2, 80120a0 <__swsetup_r+0xa4>
 801208e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012092:	d1c5      	bne.n	8012020 <__swsetup_r+0x24>
 8012094:	bd38      	pop	{r3, r4, r5, pc}
 8012096:	0799      	lsls	r1, r3, #30
 8012098:	bf58      	it	pl
 801209a:	6962      	ldrpl	r2, [r4, #20]
 801209c:	60a2      	str	r2, [r4, #8]
 801209e:	e7f4      	b.n	801208a <__swsetup_r+0x8e>
 80120a0:	2000      	movs	r0, #0
 80120a2:	e7f7      	b.n	8012094 <__swsetup_r+0x98>
 80120a4:	200001b0 	.word	0x200001b0

080120a8 <memset>:
 80120a8:	4402      	add	r2, r0
 80120aa:	4603      	mov	r3, r0
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d100      	bne.n	80120b2 <memset+0xa>
 80120b0:	4770      	bx	lr
 80120b2:	f803 1b01 	strb.w	r1, [r3], #1
 80120b6:	e7f9      	b.n	80120ac <memset+0x4>

080120b8 <strncmp>:
 80120b8:	b510      	push	{r4, lr}
 80120ba:	b16a      	cbz	r2, 80120d8 <strncmp+0x20>
 80120bc:	3901      	subs	r1, #1
 80120be:	1884      	adds	r4, r0, r2
 80120c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d103      	bne.n	80120d4 <strncmp+0x1c>
 80120cc:	42a0      	cmp	r0, r4
 80120ce:	d001      	beq.n	80120d4 <strncmp+0x1c>
 80120d0:	2a00      	cmp	r2, #0
 80120d2:	d1f5      	bne.n	80120c0 <strncmp+0x8>
 80120d4:	1ad0      	subs	r0, r2, r3
 80120d6:	bd10      	pop	{r4, pc}
 80120d8:	4610      	mov	r0, r2
 80120da:	e7fc      	b.n	80120d6 <strncmp+0x1e>

080120dc <_localeconv_r>:
 80120dc:	4800      	ldr	r0, [pc, #0]	@ (80120e0 <_localeconv_r+0x4>)
 80120de:	4770      	bx	lr
 80120e0:	20000134 	.word	0x20000134

080120e4 <_close_r>:
 80120e4:	b538      	push	{r3, r4, r5, lr}
 80120e6:	4d06      	ldr	r5, [pc, #24]	@ (8012100 <_close_r+0x1c>)
 80120e8:	2300      	movs	r3, #0
 80120ea:	4604      	mov	r4, r0
 80120ec:	4608      	mov	r0, r1
 80120ee:	602b      	str	r3, [r5, #0]
 80120f0:	f7f2 fe70 	bl	8004dd4 <_close>
 80120f4:	1c43      	adds	r3, r0, #1
 80120f6:	d102      	bne.n	80120fe <_close_r+0x1a>
 80120f8:	682b      	ldr	r3, [r5, #0]
 80120fa:	b103      	cbz	r3, 80120fe <_close_r+0x1a>
 80120fc:	6023      	str	r3, [r4, #0]
 80120fe:	bd38      	pop	{r3, r4, r5, pc}
 8012100:	20000b3c 	.word	0x20000b3c

08012104 <_lseek_r>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	4d07      	ldr	r5, [pc, #28]	@ (8012124 <_lseek_r+0x20>)
 8012108:	4604      	mov	r4, r0
 801210a:	4608      	mov	r0, r1
 801210c:	4611      	mov	r1, r2
 801210e:	2200      	movs	r2, #0
 8012110:	602a      	str	r2, [r5, #0]
 8012112:	461a      	mov	r2, r3
 8012114:	f7f2 fe85 	bl	8004e22 <_lseek>
 8012118:	1c43      	adds	r3, r0, #1
 801211a:	d102      	bne.n	8012122 <_lseek_r+0x1e>
 801211c:	682b      	ldr	r3, [r5, #0]
 801211e:	b103      	cbz	r3, 8012122 <_lseek_r+0x1e>
 8012120:	6023      	str	r3, [r4, #0]
 8012122:	bd38      	pop	{r3, r4, r5, pc}
 8012124:	20000b3c 	.word	0x20000b3c

08012128 <_read_r>:
 8012128:	b538      	push	{r3, r4, r5, lr}
 801212a:	4d07      	ldr	r5, [pc, #28]	@ (8012148 <_read_r+0x20>)
 801212c:	4604      	mov	r4, r0
 801212e:	4608      	mov	r0, r1
 8012130:	4611      	mov	r1, r2
 8012132:	2200      	movs	r2, #0
 8012134:	602a      	str	r2, [r5, #0]
 8012136:	461a      	mov	r2, r3
 8012138:	f7f2 fe2f 	bl	8004d9a <_read>
 801213c:	1c43      	adds	r3, r0, #1
 801213e:	d102      	bne.n	8012146 <_read_r+0x1e>
 8012140:	682b      	ldr	r3, [r5, #0]
 8012142:	b103      	cbz	r3, 8012146 <_read_r+0x1e>
 8012144:	6023      	str	r3, [r4, #0]
 8012146:	bd38      	pop	{r3, r4, r5, pc}
 8012148:	20000b3c 	.word	0x20000b3c

0801214c <_sbrk_r>:
 801214c:	b538      	push	{r3, r4, r5, lr}
 801214e:	4d06      	ldr	r5, [pc, #24]	@ (8012168 <_sbrk_r+0x1c>)
 8012150:	2300      	movs	r3, #0
 8012152:	4604      	mov	r4, r0
 8012154:	4608      	mov	r0, r1
 8012156:	602b      	str	r3, [r5, #0]
 8012158:	f7f2 fe70 	bl	8004e3c <_sbrk>
 801215c:	1c43      	adds	r3, r0, #1
 801215e:	d102      	bne.n	8012166 <_sbrk_r+0x1a>
 8012160:	682b      	ldr	r3, [r5, #0]
 8012162:	b103      	cbz	r3, 8012166 <_sbrk_r+0x1a>
 8012164:	6023      	str	r3, [r4, #0]
 8012166:	bd38      	pop	{r3, r4, r5, pc}
 8012168:	20000b3c 	.word	0x20000b3c

0801216c <_write_r>:
 801216c:	b538      	push	{r3, r4, r5, lr}
 801216e:	4d07      	ldr	r5, [pc, #28]	@ (801218c <_write_r+0x20>)
 8012170:	4604      	mov	r4, r0
 8012172:	4608      	mov	r0, r1
 8012174:	4611      	mov	r1, r2
 8012176:	2200      	movs	r2, #0
 8012178:	602a      	str	r2, [r5, #0]
 801217a:	461a      	mov	r2, r3
 801217c:	f7fc fd7a 	bl	800ec74 <_write>
 8012180:	1c43      	adds	r3, r0, #1
 8012182:	d102      	bne.n	801218a <_write_r+0x1e>
 8012184:	682b      	ldr	r3, [r5, #0]
 8012186:	b103      	cbz	r3, 801218a <_write_r+0x1e>
 8012188:	6023      	str	r3, [r4, #0]
 801218a:	bd38      	pop	{r3, r4, r5, pc}
 801218c:	20000b3c 	.word	0x20000b3c

08012190 <__errno>:
 8012190:	4b01      	ldr	r3, [pc, #4]	@ (8012198 <__errno+0x8>)
 8012192:	6818      	ldr	r0, [r3, #0]
 8012194:	4770      	bx	lr
 8012196:	bf00      	nop
 8012198:	200001b0 	.word	0x200001b0

0801219c <__libc_init_array>:
 801219c:	b570      	push	{r4, r5, r6, lr}
 801219e:	4d0d      	ldr	r5, [pc, #52]	@ (80121d4 <__libc_init_array+0x38>)
 80121a0:	4c0d      	ldr	r4, [pc, #52]	@ (80121d8 <__libc_init_array+0x3c>)
 80121a2:	1b64      	subs	r4, r4, r5
 80121a4:	10a4      	asrs	r4, r4, #2
 80121a6:	2600      	movs	r6, #0
 80121a8:	42a6      	cmp	r6, r4
 80121aa:	d109      	bne.n	80121c0 <__libc_init_array+0x24>
 80121ac:	4d0b      	ldr	r5, [pc, #44]	@ (80121dc <__libc_init_array+0x40>)
 80121ae:	4c0c      	ldr	r4, [pc, #48]	@ (80121e0 <__libc_init_array+0x44>)
 80121b0:	f002 fbf2 	bl	8014998 <_init>
 80121b4:	1b64      	subs	r4, r4, r5
 80121b6:	10a4      	asrs	r4, r4, #2
 80121b8:	2600      	movs	r6, #0
 80121ba:	42a6      	cmp	r6, r4
 80121bc:	d105      	bne.n	80121ca <__libc_init_array+0x2e>
 80121be:	bd70      	pop	{r4, r5, r6, pc}
 80121c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80121c4:	4798      	blx	r3
 80121c6:	3601      	adds	r6, #1
 80121c8:	e7ee      	b.n	80121a8 <__libc_init_array+0xc>
 80121ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80121ce:	4798      	blx	r3
 80121d0:	3601      	adds	r6, #1
 80121d2:	e7f2      	b.n	80121ba <__libc_init_array+0x1e>
 80121d4:	08015440 	.word	0x08015440
 80121d8:	08015440 	.word	0x08015440
 80121dc:	08015440 	.word	0x08015440
 80121e0:	08015444 	.word	0x08015444

080121e4 <__retarget_lock_init_recursive>:
 80121e4:	4770      	bx	lr

080121e6 <__retarget_lock_acquire_recursive>:
 80121e6:	4770      	bx	lr

080121e8 <__retarget_lock_release_recursive>:
 80121e8:	4770      	bx	lr

080121ea <memcpy>:
 80121ea:	440a      	add	r2, r1
 80121ec:	4291      	cmp	r1, r2
 80121ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80121f2:	d100      	bne.n	80121f6 <memcpy+0xc>
 80121f4:	4770      	bx	lr
 80121f6:	b510      	push	{r4, lr}
 80121f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012200:	4291      	cmp	r1, r2
 8012202:	d1f9      	bne.n	80121f8 <memcpy+0xe>
 8012204:	bd10      	pop	{r4, pc}
	...

08012208 <nan>:
 8012208:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012210 <nan+0x8>
 801220c:	4770      	bx	lr
 801220e:	bf00      	nop
 8012210:	00000000 	.word	0x00000000
 8012214:	7ff80000 	.word	0x7ff80000

08012218 <nanf>:
 8012218:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012220 <nanf+0x8>
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	7fc00000 	.word	0x7fc00000

08012224 <quorem>:
 8012224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012228:	6903      	ldr	r3, [r0, #16]
 801222a:	690c      	ldr	r4, [r1, #16]
 801222c:	42a3      	cmp	r3, r4
 801222e:	4607      	mov	r7, r0
 8012230:	db7e      	blt.n	8012330 <quorem+0x10c>
 8012232:	3c01      	subs	r4, #1
 8012234:	f101 0814 	add.w	r8, r1, #20
 8012238:	00a3      	lsls	r3, r4, #2
 801223a:	f100 0514 	add.w	r5, r0, #20
 801223e:	9300      	str	r3, [sp, #0]
 8012240:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012244:	9301      	str	r3, [sp, #4]
 8012246:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801224a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801224e:	3301      	adds	r3, #1
 8012250:	429a      	cmp	r2, r3
 8012252:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012256:	fbb2 f6f3 	udiv	r6, r2, r3
 801225a:	d32e      	bcc.n	80122ba <quorem+0x96>
 801225c:	f04f 0a00 	mov.w	sl, #0
 8012260:	46c4      	mov	ip, r8
 8012262:	46ae      	mov	lr, r5
 8012264:	46d3      	mov	fp, sl
 8012266:	f85c 3b04 	ldr.w	r3, [ip], #4
 801226a:	b298      	uxth	r0, r3
 801226c:	fb06 a000 	mla	r0, r6, r0, sl
 8012270:	0c02      	lsrs	r2, r0, #16
 8012272:	0c1b      	lsrs	r3, r3, #16
 8012274:	fb06 2303 	mla	r3, r6, r3, r2
 8012278:	f8de 2000 	ldr.w	r2, [lr]
 801227c:	b280      	uxth	r0, r0
 801227e:	b292      	uxth	r2, r2
 8012280:	1a12      	subs	r2, r2, r0
 8012282:	445a      	add	r2, fp
 8012284:	f8de 0000 	ldr.w	r0, [lr]
 8012288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801228c:	b29b      	uxth	r3, r3
 801228e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012292:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012296:	b292      	uxth	r2, r2
 8012298:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801229c:	45e1      	cmp	r9, ip
 801229e:	f84e 2b04 	str.w	r2, [lr], #4
 80122a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80122a6:	d2de      	bcs.n	8012266 <quorem+0x42>
 80122a8:	9b00      	ldr	r3, [sp, #0]
 80122aa:	58eb      	ldr	r3, [r5, r3]
 80122ac:	b92b      	cbnz	r3, 80122ba <quorem+0x96>
 80122ae:	9b01      	ldr	r3, [sp, #4]
 80122b0:	3b04      	subs	r3, #4
 80122b2:	429d      	cmp	r5, r3
 80122b4:	461a      	mov	r2, r3
 80122b6:	d32f      	bcc.n	8012318 <quorem+0xf4>
 80122b8:	613c      	str	r4, [r7, #16]
 80122ba:	4638      	mov	r0, r7
 80122bc:	f001 fc5a 	bl	8013b74 <__mcmp>
 80122c0:	2800      	cmp	r0, #0
 80122c2:	db25      	blt.n	8012310 <quorem+0xec>
 80122c4:	4629      	mov	r1, r5
 80122c6:	2000      	movs	r0, #0
 80122c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80122cc:	f8d1 c000 	ldr.w	ip, [r1]
 80122d0:	fa1f fe82 	uxth.w	lr, r2
 80122d4:	fa1f f38c 	uxth.w	r3, ip
 80122d8:	eba3 030e 	sub.w	r3, r3, lr
 80122dc:	4403      	add	r3, r0
 80122de:	0c12      	lsrs	r2, r2, #16
 80122e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80122e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122ee:	45c1      	cmp	r9, r8
 80122f0:	f841 3b04 	str.w	r3, [r1], #4
 80122f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80122f8:	d2e6      	bcs.n	80122c8 <quorem+0xa4>
 80122fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012302:	b922      	cbnz	r2, 801230e <quorem+0xea>
 8012304:	3b04      	subs	r3, #4
 8012306:	429d      	cmp	r5, r3
 8012308:	461a      	mov	r2, r3
 801230a:	d30b      	bcc.n	8012324 <quorem+0x100>
 801230c:	613c      	str	r4, [r7, #16]
 801230e:	3601      	adds	r6, #1
 8012310:	4630      	mov	r0, r6
 8012312:	b003      	add	sp, #12
 8012314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012318:	6812      	ldr	r2, [r2, #0]
 801231a:	3b04      	subs	r3, #4
 801231c:	2a00      	cmp	r2, #0
 801231e:	d1cb      	bne.n	80122b8 <quorem+0x94>
 8012320:	3c01      	subs	r4, #1
 8012322:	e7c6      	b.n	80122b2 <quorem+0x8e>
 8012324:	6812      	ldr	r2, [r2, #0]
 8012326:	3b04      	subs	r3, #4
 8012328:	2a00      	cmp	r2, #0
 801232a:	d1ef      	bne.n	801230c <quorem+0xe8>
 801232c:	3c01      	subs	r4, #1
 801232e:	e7ea      	b.n	8012306 <quorem+0xe2>
 8012330:	2000      	movs	r0, #0
 8012332:	e7ee      	b.n	8012312 <quorem+0xee>
 8012334:	0000      	movs	r0, r0
	...

08012338 <_dtoa_r>:
 8012338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801233c:	69c7      	ldr	r7, [r0, #28]
 801233e:	b099      	sub	sp, #100	@ 0x64
 8012340:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012344:	ec55 4b10 	vmov	r4, r5, d0
 8012348:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801234a:	9109      	str	r1, [sp, #36]	@ 0x24
 801234c:	4683      	mov	fp, r0
 801234e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012350:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012352:	b97f      	cbnz	r7, 8012374 <_dtoa_r+0x3c>
 8012354:	2010      	movs	r0, #16
 8012356:	f7fd ff01 	bl	801015c <malloc>
 801235a:	4602      	mov	r2, r0
 801235c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012360:	b920      	cbnz	r0, 801236c <_dtoa_r+0x34>
 8012362:	4ba7      	ldr	r3, [pc, #668]	@ (8012600 <_dtoa_r+0x2c8>)
 8012364:	21ef      	movs	r1, #239	@ 0xef
 8012366:	48a7      	ldr	r0, [pc, #668]	@ (8012604 <_dtoa_r+0x2cc>)
 8012368:	f002 fa9a 	bl	80148a0 <__assert_func>
 801236c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012370:	6007      	str	r7, [r0, #0]
 8012372:	60c7      	str	r7, [r0, #12]
 8012374:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012378:	6819      	ldr	r1, [r3, #0]
 801237a:	b159      	cbz	r1, 8012394 <_dtoa_r+0x5c>
 801237c:	685a      	ldr	r2, [r3, #4]
 801237e:	604a      	str	r2, [r1, #4]
 8012380:	2301      	movs	r3, #1
 8012382:	4093      	lsls	r3, r2
 8012384:	608b      	str	r3, [r1, #8]
 8012386:	4658      	mov	r0, fp
 8012388:	f001 f970 	bl	801366c <_Bfree>
 801238c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012390:	2200      	movs	r2, #0
 8012392:	601a      	str	r2, [r3, #0]
 8012394:	1e2b      	subs	r3, r5, #0
 8012396:	bfb9      	ittee	lt
 8012398:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801239c:	9303      	strlt	r3, [sp, #12]
 801239e:	2300      	movge	r3, #0
 80123a0:	6033      	strge	r3, [r6, #0]
 80123a2:	9f03      	ldr	r7, [sp, #12]
 80123a4:	4b98      	ldr	r3, [pc, #608]	@ (8012608 <_dtoa_r+0x2d0>)
 80123a6:	bfbc      	itt	lt
 80123a8:	2201      	movlt	r2, #1
 80123aa:	6032      	strlt	r2, [r6, #0]
 80123ac:	43bb      	bics	r3, r7
 80123ae:	d112      	bne.n	80123d6 <_dtoa_r+0x9e>
 80123b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80123b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80123b6:	6013      	str	r3, [r2, #0]
 80123b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80123bc:	4323      	orrs	r3, r4
 80123be:	f000 854d 	beq.w	8012e5c <_dtoa_r+0xb24>
 80123c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80123c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801261c <_dtoa_r+0x2e4>
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	f000 854f 	beq.w	8012e6c <_dtoa_r+0xb34>
 80123ce:	f10a 0303 	add.w	r3, sl, #3
 80123d2:	f000 bd49 	b.w	8012e68 <_dtoa_r+0xb30>
 80123d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123da:	2200      	movs	r2, #0
 80123dc:	ec51 0b17 	vmov	r0, r1, d7
 80123e0:	2300      	movs	r3, #0
 80123e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80123e6:	f7ee fb57 	bl	8000a98 <__aeabi_dcmpeq>
 80123ea:	4680      	mov	r8, r0
 80123ec:	b158      	cbz	r0, 8012406 <_dtoa_r+0xce>
 80123ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80123f0:	2301      	movs	r3, #1
 80123f2:	6013      	str	r3, [r2, #0]
 80123f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80123f6:	b113      	cbz	r3, 80123fe <_dtoa_r+0xc6>
 80123f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80123fa:	4b84      	ldr	r3, [pc, #528]	@ (801260c <_dtoa_r+0x2d4>)
 80123fc:	6013      	str	r3, [r2, #0]
 80123fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012620 <_dtoa_r+0x2e8>
 8012402:	f000 bd33 	b.w	8012e6c <_dtoa_r+0xb34>
 8012406:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801240a:	aa16      	add	r2, sp, #88	@ 0x58
 801240c:	a917      	add	r1, sp, #92	@ 0x5c
 801240e:	4658      	mov	r0, fp
 8012410:	f001 fcd0 	bl	8013db4 <__d2b>
 8012414:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012418:	4681      	mov	r9, r0
 801241a:	2e00      	cmp	r6, #0
 801241c:	d077      	beq.n	801250e <_dtoa_r+0x1d6>
 801241e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012420:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801242c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012430:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012434:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012438:	4619      	mov	r1, r3
 801243a:	2200      	movs	r2, #0
 801243c:	4b74      	ldr	r3, [pc, #464]	@ (8012610 <_dtoa_r+0x2d8>)
 801243e:	f7ed ff0b 	bl	8000258 <__aeabi_dsub>
 8012442:	a369      	add	r3, pc, #420	@ (adr r3, 80125e8 <_dtoa_r+0x2b0>)
 8012444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012448:	f7ee f8be 	bl	80005c8 <__aeabi_dmul>
 801244c:	a368      	add	r3, pc, #416	@ (adr r3, 80125f0 <_dtoa_r+0x2b8>)
 801244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012452:	f7ed ff03 	bl	800025c <__adddf3>
 8012456:	4604      	mov	r4, r0
 8012458:	4630      	mov	r0, r6
 801245a:	460d      	mov	r5, r1
 801245c:	f7ee f84a 	bl	80004f4 <__aeabi_i2d>
 8012460:	a365      	add	r3, pc, #404	@ (adr r3, 80125f8 <_dtoa_r+0x2c0>)
 8012462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012466:	f7ee f8af 	bl	80005c8 <__aeabi_dmul>
 801246a:	4602      	mov	r2, r0
 801246c:	460b      	mov	r3, r1
 801246e:	4620      	mov	r0, r4
 8012470:	4629      	mov	r1, r5
 8012472:	f7ed fef3 	bl	800025c <__adddf3>
 8012476:	4604      	mov	r4, r0
 8012478:	460d      	mov	r5, r1
 801247a:	f7ee fb55 	bl	8000b28 <__aeabi_d2iz>
 801247e:	2200      	movs	r2, #0
 8012480:	4607      	mov	r7, r0
 8012482:	2300      	movs	r3, #0
 8012484:	4620      	mov	r0, r4
 8012486:	4629      	mov	r1, r5
 8012488:	f7ee fb10 	bl	8000aac <__aeabi_dcmplt>
 801248c:	b140      	cbz	r0, 80124a0 <_dtoa_r+0x168>
 801248e:	4638      	mov	r0, r7
 8012490:	f7ee f830 	bl	80004f4 <__aeabi_i2d>
 8012494:	4622      	mov	r2, r4
 8012496:	462b      	mov	r3, r5
 8012498:	f7ee fafe 	bl	8000a98 <__aeabi_dcmpeq>
 801249c:	b900      	cbnz	r0, 80124a0 <_dtoa_r+0x168>
 801249e:	3f01      	subs	r7, #1
 80124a0:	2f16      	cmp	r7, #22
 80124a2:	d851      	bhi.n	8012548 <_dtoa_r+0x210>
 80124a4:	4b5b      	ldr	r3, [pc, #364]	@ (8012614 <_dtoa_r+0x2dc>)
 80124a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80124aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80124b2:	f7ee fafb 	bl	8000aac <__aeabi_dcmplt>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d048      	beq.n	801254c <_dtoa_r+0x214>
 80124ba:	3f01      	subs	r7, #1
 80124bc:	2300      	movs	r3, #0
 80124be:	9312      	str	r3, [sp, #72]	@ 0x48
 80124c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80124c2:	1b9b      	subs	r3, r3, r6
 80124c4:	1e5a      	subs	r2, r3, #1
 80124c6:	bf44      	itt	mi
 80124c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80124cc:	2300      	movmi	r3, #0
 80124ce:	9208      	str	r2, [sp, #32]
 80124d0:	bf54      	ite	pl
 80124d2:	f04f 0800 	movpl.w	r8, #0
 80124d6:	9308      	strmi	r3, [sp, #32]
 80124d8:	2f00      	cmp	r7, #0
 80124da:	db39      	blt.n	8012550 <_dtoa_r+0x218>
 80124dc:	9b08      	ldr	r3, [sp, #32]
 80124de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80124e0:	443b      	add	r3, r7
 80124e2:	9308      	str	r3, [sp, #32]
 80124e4:	2300      	movs	r3, #0
 80124e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80124e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124ea:	2b09      	cmp	r3, #9
 80124ec:	d864      	bhi.n	80125b8 <_dtoa_r+0x280>
 80124ee:	2b05      	cmp	r3, #5
 80124f0:	bfc4      	itt	gt
 80124f2:	3b04      	subgt	r3, #4
 80124f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80124f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124f8:	f1a3 0302 	sub.w	r3, r3, #2
 80124fc:	bfcc      	ite	gt
 80124fe:	2400      	movgt	r4, #0
 8012500:	2401      	movle	r4, #1
 8012502:	2b03      	cmp	r3, #3
 8012504:	d863      	bhi.n	80125ce <_dtoa_r+0x296>
 8012506:	e8df f003 	tbb	[pc, r3]
 801250a:	372a      	.short	0x372a
 801250c:	5535      	.short	0x5535
 801250e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012512:	441e      	add	r6, r3
 8012514:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012518:	2b20      	cmp	r3, #32
 801251a:	bfc1      	itttt	gt
 801251c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012520:	409f      	lslgt	r7, r3
 8012522:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012526:	fa24 f303 	lsrgt.w	r3, r4, r3
 801252a:	bfd6      	itet	le
 801252c:	f1c3 0320 	rsble	r3, r3, #32
 8012530:	ea47 0003 	orrgt.w	r0, r7, r3
 8012534:	fa04 f003 	lslle.w	r0, r4, r3
 8012538:	f7ed ffcc 	bl	80004d4 <__aeabi_ui2d>
 801253c:	2201      	movs	r2, #1
 801253e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012542:	3e01      	subs	r6, #1
 8012544:	9214      	str	r2, [sp, #80]	@ 0x50
 8012546:	e777      	b.n	8012438 <_dtoa_r+0x100>
 8012548:	2301      	movs	r3, #1
 801254a:	e7b8      	b.n	80124be <_dtoa_r+0x186>
 801254c:	9012      	str	r0, [sp, #72]	@ 0x48
 801254e:	e7b7      	b.n	80124c0 <_dtoa_r+0x188>
 8012550:	427b      	negs	r3, r7
 8012552:	930a      	str	r3, [sp, #40]	@ 0x28
 8012554:	2300      	movs	r3, #0
 8012556:	eba8 0807 	sub.w	r8, r8, r7
 801255a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801255c:	e7c4      	b.n	80124e8 <_dtoa_r+0x1b0>
 801255e:	2300      	movs	r3, #0
 8012560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012564:	2b00      	cmp	r3, #0
 8012566:	dc35      	bgt.n	80125d4 <_dtoa_r+0x29c>
 8012568:	2301      	movs	r3, #1
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	9307      	str	r3, [sp, #28]
 801256e:	461a      	mov	r2, r3
 8012570:	920e      	str	r2, [sp, #56]	@ 0x38
 8012572:	e00b      	b.n	801258c <_dtoa_r+0x254>
 8012574:	2301      	movs	r3, #1
 8012576:	e7f3      	b.n	8012560 <_dtoa_r+0x228>
 8012578:	2300      	movs	r3, #0
 801257a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801257c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801257e:	18fb      	adds	r3, r7, r3
 8012580:	9300      	str	r3, [sp, #0]
 8012582:	3301      	adds	r3, #1
 8012584:	2b01      	cmp	r3, #1
 8012586:	9307      	str	r3, [sp, #28]
 8012588:	bfb8      	it	lt
 801258a:	2301      	movlt	r3, #1
 801258c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012590:	2100      	movs	r1, #0
 8012592:	2204      	movs	r2, #4
 8012594:	f102 0514 	add.w	r5, r2, #20
 8012598:	429d      	cmp	r5, r3
 801259a:	d91f      	bls.n	80125dc <_dtoa_r+0x2a4>
 801259c:	6041      	str	r1, [r0, #4]
 801259e:	4658      	mov	r0, fp
 80125a0:	f001 f824 	bl	80135ec <_Balloc>
 80125a4:	4682      	mov	sl, r0
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d13c      	bne.n	8012624 <_dtoa_r+0x2ec>
 80125aa:	4b1b      	ldr	r3, [pc, #108]	@ (8012618 <_dtoa_r+0x2e0>)
 80125ac:	4602      	mov	r2, r0
 80125ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80125b2:	e6d8      	b.n	8012366 <_dtoa_r+0x2e>
 80125b4:	2301      	movs	r3, #1
 80125b6:	e7e0      	b.n	801257a <_dtoa_r+0x242>
 80125b8:	2401      	movs	r4, #1
 80125ba:	2300      	movs	r3, #0
 80125bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80125be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80125c0:	f04f 33ff 	mov.w	r3, #4294967295
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	9307      	str	r3, [sp, #28]
 80125c8:	2200      	movs	r2, #0
 80125ca:	2312      	movs	r3, #18
 80125cc:	e7d0      	b.n	8012570 <_dtoa_r+0x238>
 80125ce:	2301      	movs	r3, #1
 80125d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125d2:	e7f5      	b.n	80125c0 <_dtoa_r+0x288>
 80125d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	9307      	str	r3, [sp, #28]
 80125da:	e7d7      	b.n	801258c <_dtoa_r+0x254>
 80125dc:	3101      	adds	r1, #1
 80125de:	0052      	lsls	r2, r2, #1
 80125e0:	e7d8      	b.n	8012594 <_dtoa_r+0x25c>
 80125e2:	bf00      	nop
 80125e4:	f3af 8000 	nop.w
 80125e8:	636f4361 	.word	0x636f4361
 80125ec:	3fd287a7 	.word	0x3fd287a7
 80125f0:	8b60c8b3 	.word	0x8b60c8b3
 80125f4:	3fc68a28 	.word	0x3fc68a28
 80125f8:	509f79fb 	.word	0x509f79fb
 80125fc:	3fd34413 	.word	0x3fd34413
 8012600:	080151af 	.word	0x080151af
 8012604:	080151c6 	.word	0x080151c6
 8012608:	7ff00000 	.word	0x7ff00000
 801260c:	08015172 	.word	0x08015172
 8012610:	3ff80000 	.word	0x3ff80000
 8012614:	08015320 	.word	0x08015320
 8012618:	0801521e 	.word	0x0801521e
 801261c:	080151ab 	.word	0x080151ab
 8012620:	08015171 	.word	0x08015171
 8012624:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012628:	6018      	str	r0, [r3, #0]
 801262a:	9b07      	ldr	r3, [sp, #28]
 801262c:	2b0e      	cmp	r3, #14
 801262e:	f200 80a4 	bhi.w	801277a <_dtoa_r+0x442>
 8012632:	2c00      	cmp	r4, #0
 8012634:	f000 80a1 	beq.w	801277a <_dtoa_r+0x442>
 8012638:	2f00      	cmp	r7, #0
 801263a:	dd33      	ble.n	80126a4 <_dtoa_r+0x36c>
 801263c:	4bad      	ldr	r3, [pc, #692]	@ (80128f4 <_dtoa_r+0x5bc>)
 801263e:	f007 020f 	and.w	r2, r7, #15
 8012642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012646:	ed93 7b00 	vldr	d7, [r3]
 801264a:	05f8      	lsls	r0, r7, #23
 801264c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012650:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012654:	d516      	bpl.n	8012684 <_dtoa_r+0x34c>
 8012656:	4ba8      	ldr	r3, [pc, #672]	@ (80128f8 <_dtoa_r+0x5c0>)
 8012658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801265c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012660:	f7ee f8dc 	bl	800081c <__aeabi_ddiv>
 8012664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012668:	f004 040f 	and.w	r4, r4, #15
 801266c:	2603      	movs	r6, #3
 801266e:	4da2      	ldr	r5, [pc, #648]	@ (80128f8 <_dtoa_r+0x5c0>)
 8012670:	b954      	cbnz	r4, 8012688 <_dtoa_r+0x350>
 8012672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801267a:	f7ee f8cf 	bl	800081c <__aeabi_ddiv>
 801267e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012682:	e028      	b.n	80126d6 <_dtoa_r+0x39e>
 8012684:	2602      	movs	r6, #2
 8012686:	e7f2      	b.n	801266e <_dtoa_r+0x336>
 8012688:	07e1      	lsls	r1, r4, #31
 801268a:	d508      	bpl.n	801269e <_dtoa_r+0x366>
 801268c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012690:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012694:	f7ed ff98 	bl	80005c8 <__aeabi_dmul>
 8012698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801269c:	3601      	adds	r6, #1
 801269e:	1064      	asrs	r4, r4, #1
 80126a0:	3508      	adds	r5, #8
 80126a2:	e7e5      	b.n	8012670 <_dtoa_r+0x338>
 80126a4:	f000 80d2 	beq.w	801284c <_dtoa_r+0x514>
 80126a8:	427c      	negs	r4, r7
 80126aa:	4b92      	ldr	r3, [pc, #584]	@ (80128f4 <_dtoa_r+0x5bc>)
 80126ac:	4d92      	ldr	r5, [pc, #584]	@ (80128f8 <_dtoa_r+0x5c0>)
 80126ae:	f004 020f 	and.w	r2, r4, #15
 80126b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80126be:	f7ed ff83 	bl	80005c8 <__aeabi_dmul>
 80126c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126c6:	1124      	asrs	r4, r4, #4
 80126c8:	2300      	movs	r3, #0
 80126ca:	2602      	movs	r6, #2
 80126cc:	2c00      	cmp	r4, #0
 80126ce:	f040 80b2 	bne.w	8012836 <_dtoa_r+0x4fe>
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d1d3      	bne.n	801267e <_dtoa_r+0x346>
 80126d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80126d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f000 80b7 	beq.w	8012850 <_dtoa_r+0x518>
 80126e2:	4b86      	ldr	r3, [pc, #536]	@ (80128fc <_dtoa_r+0x5c4>)
 80126e4:	2200      	movs	r2, #0
 80126e6:	4620      	mov	r0, r4
 80126e8:	4629      	mov	r1, r5
 80126ea:	f7ee f9df 	bl	8000aac <__aeabi_dcmplt>
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f000 80ae 	beq.w	8012850 <_dtoa_r+0x518>
 80126f4:	9b07      	ldr	r3, [sp, #28]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f000 80aa 	beq.w	8012850 <_dtoa_r+0x518>
 80126fc:	9b00      	ldr	r3, [sp, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	dd37      	ble.n	8012772 <_dtoa_r+0x43a>
 8012702:	1e7b      	subs	r3, r7, #1
 8012704:	9304      	str	r3, [sp, #16]
 8012706:	4620      	mov	r0, r4
 8012708:	4b7d      	ldr	r3, [pc, #500]	@ (8012900 <_dtoa_r+0x5c8>)
 801270a:	2200      	movs	r2, #0
 801270c:	4629      	mov	r1, r5
 801270e:	f7ed ff5b 	bl	80005c8 <__aeabi_dmul>
 8012712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012716:	9c00      	ldr	r4, [sp, #0]
 8012718:	3601      	adds	r6, #1
 801271a:	4630      	mov	r0, r6
 801271c:	f7ed feea 	bl	80004f4 <__aeabi_i2d>
 8012720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012724:	f7ed ff50 	bl	80005c8 <__aeabi_dmul>
 8012728:	4b76      	ldr	r3, [pc, #472]	@ (8012904 <_dtoa_r+0x5cc>)
 801272a:	2200      	movs	r2, #0
 801272c:	f7ed fd96 	bl	800025c <__adddf3>
 8012730:	4605      	mov	r5, r0
 8012732:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012736:	2c00      	cmp	r4, #0
 8012738:	f040 808d 	bne.w	8012856 <_dtoa_r+0x51e>
 801273c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012740:	4b71      	ldr	r3, [pc, #452]	@ (8012908 <_dtoa_r+0x5d0>)
 8012742:	2200      	movs	r2, #0
 8012744:	f7ed fd88 	bl	8000258 <__aeabi_dsub>
 8012748:	4602      	mov	r2, r0
 801274a:	460b      	mov	r3, r1
 801274c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012750:	462a      	mov	r2, r5
 8012752:	4633      	mov	r3, r6
 8012754:	f7ee f9c8 	bl	8000ae8 <__aeabi_dcmpgt>
 8012758:	2800      	cmp	r0, #0
 801275a:	f040 828b 	bne.w	8012c74 <_dtoa_r+0x93c>
 801275e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012762:	462a      	mov	r2, r5
 8012764:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012768:	f7ee f9a0 	bl	8000aac <__aeabi_dcmplt>
 801276c:	2800      	cmp	r0, #0
 801276e:	f040 8128 	bne.w	80129c2 <_dtoa_r+0x68a>
 8012772:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012776:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801277a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801277c:	2b00      	cmp	r3, #0
 801277e:	f2c0 815a 	blt.w	8012a36 <_dtoa_r+0x6fe>
 8012782:	2f0e      	cmp	r7, #14
 8012784:	f300 8157 	bgt.w	8012a36 <_dtoa_r+0x6fe>
 8012788:	4b5a      	ldr	r3, [pc, #360]	@ (80128f4 <_dtoa_r+0x5bc>)
 801278a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801278e:	ed93 7b00 	vldr	d7, [r3]
 8012792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012794:	2b00      	cmp	r3, #0
 8012796:	ed8d 7b00 	vstr	d7, [sp]
 801279a:	da03      	bge.n	80127a4 <_dtoa_r+0x46c>
 801279c:	9b07      	ldr	r3, [sp, #28]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	f340 8101 	ble.w	80129a6 <_dtoa_r+0x66e>
 80127a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80127a8:	4656      	mov	r6, sl
 80127aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127ae:	4620      	mov	r0, r4
 80127b0:	4629      	mov	r1, r5
 80127b2:	f7ee f833 	bl	800081c <__aeabi_ddiv>
 80127b6:	f7ee f9b7 	bl	8000b28 <__aeabi_d2iz>
 80127ba:	4680      	mov	r8, r0
 80127bc:	f7ed fe9a 	bl	80004f4 <__aeabi_i2d>
 80127c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127c4:	f7ed ff00 	bl	80005c8 <__aeabi_dmul>
 80127c8:	4602      	mov	r2, r0
 80127ca:	460b      	mov	r3, r1
 80127cc:	4620      	mov	r0, r4
 80127ce:	4629      	mov	r1, r5
 80127d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80127d4:	f7ed fd40 	bl	8000258 <__aeabi_dsub>
 80127d8:	f806 4b01 	strb.w	r4, [r6], #1
 80127dc:	9d07      	ldr	r5, [sp, #28]
 80127de:	eba6 040a 	sub.w	r4, r6, sl
 80127e2:	42a5      	cmp	r5, r4
 80127e4:	4602      	mov	r2, r0
 80127e6:	460b      	mov	r3, r1
 80127e8:	f040 8117 	bne.w	8012a1a <_dtoa_r+0x6e2>
 80127ec:	f7ed fd36 	bl	800025c <__adddf3>
 80127f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127f4:	4604      	mov	r4, r0
 80127f6:	460d      	mov	r5, r1
 80127f8:	f7ee f976 	bl	8000ae8 <__aeabi_dcmpgt>
 80127fc:	2800      	cmp	r0, #0
 80127fe:	f040 80f9 	bne.w	80129f4 <_dtoa_r+0x6bc>
 8012802:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012806:	4620      	mov	r0, r4
 8012808:	4629      	mov	r1, r5
 801280a:	f7ee f945 	bl	8000a98 <__aeabi_dcmpeq>
 801280e:	b118      	cbz	r0, 8012818 <_dtoa_r+0x4e0>
 8012810:	f018 0f01 	tst.w	r8, #1
 8012814:	f040 80ee 	bne.w	80129f4 <_dtoa_r+0x6bc>
 8012818:	4649      	mov	r1, r9
 801281a:	4658      	mov	r0, fp
 801281c:	f000 ff26 	bl	801366c <_Bfree>
 8012820:	2300      	movs	r3, #0
 8012822:	7033      	strb	r3, [r6, #0]
 8012824:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012826:	3701      	adds	r7, #1
 8012828:	601f      	str	r7, [r3, #0]
 801282a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801282c:	2b00      	cmp	r3, #0
 801282e:	f000 831d 	beq.w	8012e6c <_dtoa_r+0xb34>
 8012832:	601e      	str	r6, [r3, #0]
 8012834:	e31a      	b.n	8012e6c <_dtoa_r+0xb34>
 8012836:	07e2      	lsls	r2, r4, #31
 8012838:	d505      	bpl.n	8012846 <_dtoa_r+0x50e>
 801283a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801283e:	f7ed fec3 	bl	80005c8 <__aeabi_dmul>
 8012842:	3601      	adds	r6, #1
 8012844:	2301      	movs	r3, #1
 8012846:	1064      	asrs	r4, r4, #1
 8012848:	3508      	adds	r5, #8
 801284a:	e73f      	b.n	80126cc <_dtoa_r+0x394>
 801284c:	2602      	movs	r6, #2
 801284e:	e742      	b.n	80126d6 <_dtoa_r+0x39e>
 8012850:	9c07      	ldr	r4, [sp, #28]
 8012852:	9704      	str	r7, [sp, #16]
 8012854:	e761      	b.n	801271a <_dtoa_r+0x3e2>
 8012856:	4b27      	ldr	r3, [pc, #156]	@ (80128f4 <_dtoa_r+0x5bc>)
 8012858:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801285a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801285e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012862:	4454      	add	r4, sl
 8012864:	2900      	cmp	r1, #0
 8012866:	d053      	beq.n	8012910 <_dtoa_r+0x5d8>
 8012868:	4928      	ldr	r1, [pc, #160]	@ (801290c <_dtoa_r+0x5d4>)
 801286a:	2000      	movs	r0, #0
 801286c:	f7ed ffd6 	bl	800081c <__aeabi_ddiv>
 8012870:	4633      	mov	r3, r6
 8012872:	462a      	mov	r2, r5
 8012874:	f7ed fcf0 	bl	8000258 <__aeabi_dsub>
 8012878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801287c:	4656      	mov	r6, sl
 801287e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012882:	f7ee f951 	bl	8000b28 <__aeabi_d2iz>
 8012886:	4605      	mov	r5, r0
 8012888:	f7ed fe34 	bl	80004f4 <__aeabi_i2d>
 801288c:	4602      	mov	r2, r0
 801288e:	460b      	mov	r3, r1
 8012890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012894:	f7ed fce0 	bl	8000258 <__aeabi_dsub>
 8012898:	3530      	adds	r5, #48	@ 0x30
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80128a2:	f806 5b01 	strb.w	r5, [r6], #1
 80128a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80128aa:	f7ee f8ff 	bl	8000aac <__aeabi_dcmplt>
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d171      	bne.n	8012996 <_dtoa_r+0x65e>
 80128b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128b6:	4911      	ldr	r1, [pc, #68]	@ (80128fc <_dtoa_r+0x5c4>)
 80128b8:	2000      	movs	r0, #0
 80128ba:	f7ed fccd 	bl	8000258 <__aeabi_dsub>
 80128be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80128c2:	f7ee f8f3 	bl	8000aac <__aeabi_dcmplt>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	f040 8095 	bne.w	80129f6 <_dtoa_r+0x6be>
 80128cc:	42a6      	cmp	r6, r4
 80128ce:	f43f af50 	beq.w	8012772 <_dtoa_r+0x43a>
 80128d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80128d6:	4b0a      	ldr	r3, [pc, #40]	@ (8012900 <_dtoa_r+0x5c8>)
 80128d8:	2200      	movs	r2, #0
 80128da:	f7ed fe75 	bl	80005c8 <__aeabi_dmul>
 80128de:	4b08      	ldr	r3, [pc, #32]	@ (8012900 <_dtoa_r+0x5c8>)
 80128e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80128e4:	2200      	movs	r2, #0
 80128e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128ea:	f7ed fe6d 	bl	80005c8 <__aeabi_dmul>
 80128ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128f2:	e7c4      	b.n	801287e <_dtoa_r+0x546>
 80128f4:	08015320 	.word	0x08015320
 80128f8:	080152f8 	.word	0x080152f8
 80128fc:	3ff00000 	.word	0x3ff00000
 8012900:	40240000 	.word	0x40240000
 8012904:	401c0000 	.word	0x401c0000
 8012908:	40140000 	.word	0x40140000
 801290c:	3fe00000 	.word	0x3fe00000
 8012910:	4631      	mov	r1, r6
 8012912:	4628      	mov	r0, r5
 8012914:	f7ed fe58 	bl	80005c8 <__aeabi_dmul>
 8012918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801291c:	9415      	str	r4, [sp, #84]	@ 0x54
 801291e:	4656      	mov	r6, sl
 8012920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012924:	f7ee f900 	bl	8000b28 <__aeabi_d2iz>
 8012928:	4605      	mov	r5, r0
 801292a:	f7ed fde3 	bl	80004f4 <__aeabi_i2d>
 801292e:	4602      	mov	r2, r0
 8012930:	460b      	mov	r3, r1
 8012932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012936:	f7ed fc8f 	bl	8000258 <__aeabi_dsub>
 801293a:	3530      	adds	r5, #48	@ 0x30
 801293c:	f806 5b01 	strb.w	r5, [r6], #1
 8012940:	4602      	mov	r2, r0
 8012942:	460b      	mov	r3, r1
 8012944:	42a6      	cmp	r6, r4
 8012946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801294a:	f04f 0200 	mov.w	r2, #0
 801294e:	d124      	bne.n	801299a <_dtoa_r+0x662>
 8012950:	4bac      	ldr	r3, [pc, #688]	@ (8012c04 <_dtoa_r+0x8cc>)
 8012952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012956:	f7ed fc81 	bl	800025c <__adddf3>
 801295a:	4602      	mov	r2, r0
 801295c:	460b      	mov	r3, r1
 801295e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012962:	f7ee f8c1 	bl	8000ae8 <__aeabi_dcmpgt>
 8012966:	2800      	cmp	r0, #0
 8012968:	d145      	bne.n	80129f6 <_dtoa_r+0x6be>
 801296a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801296e:	49a5      	ldr	r1, [pc, #660]	@ (8012c04 <_dtoa_r+0x8cc>)
 8012970:	2000      	movs	r0, #0
 8012972:	f7ed fc71 	bl	8000258 <__aeabi_dsub>
 8012976:	4602      	mov	r2, r0
 8012978:	460b      	mov	r3, r1
 801297a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801297e:	f7ee f895 	bl	8000aac <__aeabi_dcmplt>
 8012982:	2800      	cmp	r0, #0
 8012984:	f43f aef5 	beq.w	8012772 <_dtoa_r+0x43a>
 8012988:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801298a:	1e73      	subs	r3, r6, #1
 801298c:	9315      	str	r3, [sp, #84]	@ 0x54
 801298e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012992:	2b30      	cmp	r3, #48	@ 0x30
 8012994:	d0f8      	beq.n	8012988 <_dtoa_r+0x650>
 8012996:	9f04      	ldr	r7, [sp, #16]
 8012998:	e73e      	b.n	8012818 <_dtoa_r+0x4e0>
 801299a:	4b9b      	ldr	r3, [pc, #620]	@ (8012c08 <_dtoa_r+0x8d0>)
 801299c:	f7ed fe14 	bl	80005c8 <__aeabi_dmul>
 80129a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129a4:	e7bc      	b.n	8012920 <_dtoa_r+0x5e8>
 80129a6:	d10c      	bne.n	80129c2 <_dtoa_r+0x68a>
 80129a8:	4b98      	ldr	r3, [pc, #608]	@ (8012c0c <_dtoa_r+0x8d4>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129b0:	f7ed fe0a 	bl	80005c8 <__aeabi_dmul>
 80129b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129b8:	f7ee f88c 	bl	8000ad4 <__aeabi_dcmpge>
 80129bc:	2800      	cmp	r0, #0
 80129be:	f000 8157 	beq.w	8012c70 <_dtoa_r+0x938>
 80129c2:	2400      	movs	r4, #0
 80129c4:	4625      	mov	r5, r4
 80129c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129c8:	43db      	mvns	r3, r3
 80129ca:	9304      	str	r3, [sp, #16]
 80129cc:	4656      	mov	r6, sl
 80129ce:	2700      	movs	r7, #0
 80129d0:	4621      	mov	r1, r4
 80129d2:	4658      	mov	r0, fp
 80129d4:	f000 fe4a 	bl	801366c <_Bfree>
 80129d8:	2d00      	cmp	r5, #0
 80129da:	d0dc      	beq.n	8012996 <_dtoa_r+0x65e>
 80129dc:	b12f      	cbz	r7, 80129ea <_dtoa_r+0x6b2>
 80129de:	42af      	cmp	r7, r5
 80129e0:	d003      	beq.n	80129ea <_dtoa_r+0x6b2>
 80129e2:	4639      	mov	r1, r7
 80129e4:	4658      	mov	r0, fp
 80129e6:	f000 fe41 	bl	801366c <_Bfree>
 80129ea:	4629      	mov	r1, r5
 80129ec:	4658      	mov	r0, fp
 80129ee:	f000 fe3d 	bl	801366c <_Bfree>
 80129f2:	e7d0      	b.n	8012996 <_dtoa_r+0x65e>
 80129f4:	9704      	str	r7, [sp, #16]
 80129f6:	4633      	mov	r3, r6
 80129f8:	461e      	mov	r6, r3
 80129fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80129fe:	2a39      	cmp	r2, #57	@ 0x39
 8012a00:	d107      	bne.n	8012a12 <_dtoa_r+0x6da>
 8012a02:	459a      	cmp	sl, r3
 8012a04:	d1f8      	bne.n	80129f8 <_dtoa_r+0x6c0>
 8012a06:	9a04      	ldr	r2, [sp, #16]
 8012a08:	3201      	adds	r2, #1
 8012a0a:	9204      	str	r2, [sp, #16]
 8012a0c:	2230      	movs	r2, #48	@ 0x30
 8012a0e:	f88a 2000 	strb.w	r2, [sl]
 8012a12:	781a      	ldrb	r2, [r3, #0]
 8012a14:	3201      	adds	r2, #1
 8012a16:	701a      	strb	r2, [r3, #0]
 8012a18:	e7bd      	b.n	8012996 <_dtoa_r+0x65e>
 8012a1a:	4b7b      	ldr	r3, [pc, #492]	@ (8012c08 <_dtoa_r+0x8d0>)
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	f7ed fdd3 	bl	80005c8 <__aeabi_dmul>
 8012a22:	2200      	movs	r2, #0
 8012a24:	2300      	movs	r3, #0
 8012a26:	4604      	mov	r4, r0
 8012a28:	460d      	mov	r5, r1
 8012a2a:	f7ee f835 	bl	8000a98 <__aeabi_dcmpeq>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	f43f aebb 	beq.w	80127aa <_dtoa_r+0x472>
 8012a34:	e6f0      	b.n	8012818 <_dtoa_r+0x4e0>
 8012a36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012a38:	2a00      	cmp	r2, #0
 8012a3a:	f000 80db 	beq.w	8012bf4 <_dtoa_r+0x8bc>
 8012a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a40:	2a01      	cmp	r2, #1
 8012a42:	f300 80bf 	bgt.w	8012bc4 <_dtoa_r+0x88c>
 8012a46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012a48:	2a00      	cmp	r2, #0
 8012a4a:	f000 80b7 	beq.w	8012bbc <_dtoa_r+0x884>
 8012a4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012a52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012a54:	4646      	mov	r6, r8
 8012a56:	9a08      	ldr	r2, [sp, #32]
 8012a58:	2101      	movs	r1, #1
 8012a5a:	441a      	add	r2, r3
 8012a5c:	4658      	mov	r0, fp
 8012a5e:	4498      	add	r8, r3
 8012a60:	9208      	str	r2, [sp, #32]
 8012a62:	f000 ff01 	bl	8013868 <__i2b>
 8012a66:	4605      	mov	r5, r0
 8012a68:	b15e      	cbz	r6, 8012a82 <_dtoa_r+0x74a>
 8012a6a:	9b08      	ldr	r3, [sp, #32]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	dd08      	ble.n	8012a82 <_dtoa_r+0x74a>
 8012a70:	42b3      	cmp	r3, r6
 8012a72:	9a08      	ldr	r2, [sp, #32]
 8012a74:	bfa8      	it	ge
 8012a76:	4633      	movge	r3, r6
 8012a78:	eba8 0803 	sub.w	r8, r8, r3
 8012a7c:	1af6      	subs	r6, r6, r3
 8012a7e:	1ad3      	subs	r3, r2, r3
 8012a80:	9308      	str	r3, [sp, #32]
 8012a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a84:	b1f3      	cbz	r3, 8012ac4 <_dtoa_r+0x78c>
 8012a86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f000 80b7 	beq.w	8012bfc <_dtoa_r+0x8c4>
 8012a8e:	b18c      	cbz	r4, 8012ab4 <_dtoa_r+0x77c>
 8012a90:	4629      	mov	r1, r5
 8012a92:	4622      	mov	r2, r4
 8012a94:	4658      	mov	r0, fp
 8012a96:	f000 ffa7 	bl	80139e8 <__pow5mult>
 8012a9a:	464a      	mov	r2, r9
 8012a9c:	4601      	mov	r1, r0
 8012a9e:	4605      	mov	r5, r0
 8012aa0:	4658      	mov	r0, fp
 8012aa2:	f000 fef7 	bl	8013894 <__multiply>
 8012aa6:	4649      	mov	r1, r9
 8012aa8:	9004      	str	r0, [sp, #16]
 8012aaa:	4658      	mov	r0, fp
 8012aac:	f000 fdde 	bl	801366c <_Bfree>
 8012ab0:	9b04      	ldr	r3, [sp, #16]
 8012ab2:	4699      	mov	r9, r3
 8012ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ab6:	1b1a      	subs	r2, r3, r4
 8012ab8:	d004      	beq.n	8012ac4 <_dtoa_r+0x78c>
 8012aba:	4649      	mov	r1, r9
 8012abc:	4658      	mov	r0, fp
 8012abe:	f000 ff93 	bl	80139e8 <__pow5mult>
 8012ac2:	4681      	mov	r9, r0
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	4658      	mov	r0, fp
 8012ac8:	f000 fece 	bl	8013868 <__i2b>
 8012acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ace:	4604      	mov	r4, r0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 81cf 	beq.w	8012e74 <_dtoa_r+0xb3c>
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	4601      	mov	r1, r0
 8012ada:	4658      	mov	r0, fp
 8012adc:	f000 ff84 	bl	80139e8 <__pow5mult>
 8012ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	f300 8095 	bgt.w	8012c14 <_dtoa_r+0x8dc>
 8012aea:	9b02      	ldr	r3, [sp, #8]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f040 8087 	bne.w	8012c00 <_dtoa_r+0x8c8>
 8012af2:	9b03      	ldr	r3, [sp, #12]
 8012af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f040 8089 	bne.w	8012c10 <_dtoa_r+0x8d8>
 8012afe:	9b03      	ldr	r3, [sp, #12]
 8012b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b04:	0d1b      	lsrs	r3, r3, #20
 8012b06:	051b      	lsls	r3, r3, #20
 8012b08:	b12b      	cbz	r3, 8012b16 <_dtoa_r+0x7de>
 8012b0a:	9b08      	ldr	r3, [sp, #32]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	9308      	str	r3, [sp, #32]
 8012b10:	f108 0801 	add.w	r8, r8, #1
 8012b14:	2301      	movs	r3, #1
 8012b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 81b0 	beq.w	8012e80 <_dtoa_r+0xb48>
 8012b20:	6923      	ldr	r3, [r4, #16]
 8012b22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b26:	6918      	ldr	r0, [r3, #16]
 8012b28:	f000 fe52 	bl	80137d0 <__hi0bits>
 8012b2c:	f1c0 0020 	rsb	r0, r0, #32
 8012b30:	9b08      	ldr	r3, [sp, #32]
 8012b32:	4418      	add	r0, r3
 8012b34:	f010 001f 	ands.w	r0, r0, #31
 8012b38:	d077      	beq.n	8012c2a <_dtoa_r+0x8f2>
 8012b3a:	f1c0 0320 	rsb	r3, r0, #32
 8012b3e:	2b04      	cmp	r3, #4
 8012b40:	dd6b      	ble.n	8012c1a <_dtoa_r+0x8e2>
 8012b42:	9b08      	ldr	r3, [sp, #32]
 8012b44:	f1c0 001c 	rsb	r0, r0, #28
 8012b48:	4403      	add	r3, r0
 8012b4a:	4480      	add	r8, r0
 8012b4c:	4406      	add	r6, r0
 8012b4e:	9308      	str	r3, [sp, #32]
 8012b50:	f1b8 0f00 	cmp.w	r8, #0
 8012b54:	dd05      	ble.n	8012b62 <_dtoa_r+0x82a>
 8012b56:	4649      	mov	r1, r9
 8012b58:	4642      	mov	r2, r8
 8012b5a:	4658      	mov	r0, fp
 8012b5c:	f000 ff9e 	bl	8013a9c <__lshift>
 8012b60:	4681      	mov	r9, r0
 8012b62:	9b08      	ldr	r3, [sp, #32]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	dd05      	ble.n	8012b74 <_dtoa_r+0x83c>
 8012b68:	4621      	mov	r1, r4
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	4658      	mov	r0, fp
 8012b6e:	f000 ff95 	bl	8013a9c <__lshift>
 8012b72:	4604      	mov	r4, r0
 8012b74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d059      	beq.n	8012c2e <_dtoa_r+0x8f6>
 8012b7a:	4621      	mov	r1, r4
 8012b7c:	4648      	mov	r0, r9
 8012b7e:	f000 fff9 	bl	8013b74 <__mcmp>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	da53      	bge.n	8012c2e <_dtoa_r+0x8f6>
 8012b86:	1e7b      	subs	r3, r7, #1
 8012b88:	9304      	str	r3, [sp, #16]
 8012b8a:	4649      	mov	r1, r9
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	220a      	movs	r2, #10
 8012b90:	4658      	mov	r0, fp
 8012b92:	f000 fd8d 	bl	80136b0 <__multadd>
 8012b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b98:	4681      	mov	r9, r0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f000 8172 	beq.w	8012e84 <_dtoa_r+0xb4c>
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	4629      	mov	r1, r5
 8012ba4:	220a      	movs	r2, #10
 8012ba6:	4658      	mov	r0, fp
 8012ba8:	f000 fd82 	bl	80136b0 <__multadd>
 8012bac:	9b00      	ldr	r3, [sp, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	4605      	mov	r5, r0
 8012bb2:	dc67      	bgt.n	8012c84 <_dtoa_r+0x94c>
 8012bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bb6:	2b02      	cmp	r3, #2
 8012bb8:	dc41      	bgt.n	8012c3e <_dtoa_r+0x906>
 8012bba:	e063      	b.n	8012c84 <_dtoa_r+0x94c>
 8012bbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012bbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012bc2:	e746      	b.n	8012a52 <_dtoa_r+0x71a>
 8012bc4:	9b07      	ldr	r3, [sp, #28]
 8012bc6:	1e5c      	subs	r4, r3, #1
 8012bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bca:	42a3      	cmp	r3, r4
 8012bcc:	bfbf      	itttt	lt
 8012bce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012bd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012bd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012bd4:	1ae3      	sublt	r3, r4, r3
 8012bd6:	bfb4      	ite	lt
 8012bd8:	18d2      	addlt	r2, r2, r3
 8012bda:	1b1c      	subge	r4, r3, r4
 8012bdc:	9b07      	ldr	r3, [sp, #28]
 8012bde:	bfbc      	itt	lt
 8012be0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012be2:	2400      	movlt	r4, #0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	bfb5      	itete	lt
 8012be8:	eba8 0603 	sublt.w	r6, r8, r3
 8012bec:	9b07      	ldrge	r3, [sp, #28]
 8012bee:	2300      	movlt	r3, #0
 8012bf0:	4646      	movge	r6, r8
 8012bf2:	e730      	b.n	8012a56 <_dtoa_r+0x71e>
 8012bf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012bf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012bf8:	4646      	mov	r6, r8
 8012bfa:	e735      	b.n	8012a68 <_dtoa_r+0x730>
 8012bfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012bfe:	e75c      	b.n	8012aba <_dtoa_r+0x782>
 8012c00:	2300      	movs	r3, #0
 8012c02:	e788      	b.n	8012b16 <_dtoa_r+0x7de>
 8012c04:	3fe00000 	.word	0x3fe00000
 8012c08:	40240000 	.word	0x40240000
 8012c0c:	40140000 	.word	0x40140000
 8012c10:	9b02      	ldr	r3, [sp, #8]
 8012c12:	e780      	b.n	8012b16 <_dtoa_r+0x7de>
 8012c14:	2300      	movs	r3, #0
 8012c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c18:	e782      	b.n	8012b20 <_dtoa_r+0x7e8>
 8012c1a:	d099      	beq.n	8012b50 <_dtoa_r+0x818>
 8012c1c:	9a08      	ldr	r2, [sp, #32]
 8012c1e:	331c      	adds	r3, #28
 8012c20:	441a      	add	r2, r3
 8012c22:	4498      	add	r8, r3
 8012c24:	441e      	add	r6, r3
 8012c26:	9208      	str	r2, [sp, #32]
 8012c28:	e792      	b.n	8012b50 <_dtoa_r+0x818>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	e7f6      	b.n	8012c1c <_dtoa_r+0x8e4>
 8012c2e:	9b07      	ldr	r3, [sp, #28]
 8012c30:	9704      	str	r7, [sp, #16]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	dc20      	bgt.n	8012c78 <_dtoa_r+0x940>
 8012c36:	9300      	str	r3, [sp, #0]
 8012c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c3a:	2b02      	cmp	r3, #2
 8012c3c:	dd1e      	ble.n	8012c7c <_dtoa_r+0x944>
 8012c3e:	9b00      	ldr	r3, [sp, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f47f aec0 	bne.w	80129c6 <_dtoa_r+0x68e>
 8012c46:	4621      	mov	r1, r4
 8012c48:	2205      	movs	r2, #5
 8012c4a:	4658      	mov	r0, fp
 8012c4c:	f000 fd30 	bl	80136b0 <__multadd>
 8012c50:	4601      	mov	r1, r0
 8012c52:	4604      	mov	r4, r0
 8012c54:	4648      	mov	r0, r9
 8012c56:	f000 ff8d 	bl	8013b74 <__mcmp>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	f77f aeb3 	ble.w	80129c6 <_dtoa_r+0x68e>
 8012c60:	4656      	mov	r6, sl
 8012c62:	2331      	movs	r3, #49	@ 0x31
 8012c64:	f806 3b01 	strb.w	r3, [r6], #1
 8012c68:	9b04      	ldr	r3, [sp, #16]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	9304      	str	r3, [sp, #16]
 8012c6e:	e6ae      	b.n	80129ce <_dtoa_r+0x696>
 8012c70:	9c07      	ldr	r4, [sp, #28]
 8012c72:	9704      	str	r7, [sp, #16]
 8012c74:	4625      	mov	r5, r4
 8012c76:	e7f3      	b.n	8012c60 <_dtoa_r+0x928>
 8012c78:	9b07      	ldr	r3, [sp, #28]
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	f000 8104 	beq.w	8012e8c <_dtoa_r+0xb54>
 8012c84:	2e00      	cmp	r6, #0
 8012c86:	dd05      	ble.n	8012c94 <_dtoa_r+0x95c>
 8012c88:	4629      	mov	r1, r5
 8012c8a:	4632      	mov	r2, r6
 8012c8c:	4658      	mov	r0, fp
 8012c8e:	f000 ff05 	bl	8013a9c <__lshift>
 8012c92:	4605      	mov	r5, r0
 8012c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d05a      	beq.n	8012d50 <_dtoa_r+0xa18>
 8012c9a:	6869      	ldr	r1, [r5, #4]
 8012c9c:	4658      	mov	r0, fp
 8012c9e:	f000 fca5 	bl	80135ec <_Balloc>
 8012ca2:	4606      	mov	r6, r0
 8012ca4:	b928      	cbnz	r0, 8012cb2 <_dtoa_r+0x97a>
 8012ca6:	4b84      	ldr	r3, [pc, #528]	@ (8012eb8 <_dtoa_r+0xb80>)
 8012ca8:	4602      	mov	r2, r0
 8012caa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012cae:	f7ff bb5a 	b.w	8012366 <_dtoa_r+0x2e>
 8012cb2:	692a      	ldr	r2, [r5, #16]
 8012cb4:	3202      	adds	r2, #2
 8012cb6:	0092      	lsls	r2, r2, #2
 8012cb8:	f105 010c 	add.w	r1, r5, #12
 8012cbc:	300c      	adds	r0, #12
 8012cbe:	f7ff fa94 	bl	80121ea <memcpy>
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	4631      	mov	r1, r6
 8012cc6:	4658      	mov	r0, fp
 8012cc8:	f000 fee8 	bl	8013a9c <__lshift>
 8012ccc:	f10a 0301 	add.w	r3, sl, #1
 8012cd0:	9307      	str	r3, [sp, #28]
 8012cd2:	9b00      	ldr	r3, [sp, #0]
 8012cd4:	4453      	add	r3, sl
 8012cd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012cd8:	9b02      	ldr	r3, [sp, #8]
 8012cda:	f003 0301 	and.w	r3, r3, #1
 8012cde:	462f      	mov	r7, r5
 8012ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ce2:	4605      	mov	r5, r0
 8012ce4:	9b07      	ldr	r3, [sp, #28]
 8012ce6:	4621      	mov	r1, r4
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	4648      	mov	r0, r9
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	f7ff fa99 	bl	8012224 <quorem>
 8012cf2:	4639      	mov	r1, r7
 8012cf4:	9002      	str	r0, [sp, #8]
 8012cf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012cfa:	4648      	mov	r0, r9
 8012cfc:	f000 ff3a 	bl	8013b74 <__mcmp>
 8012d00:	462a      	mov	r2, r5
 8012d02:	9008      	str	r0, [sp, #32]
 8012d04:	4621      	mov	r1, r4
 8012d06:	4658      	mov	r0, fp
 8012d08:	f000 ff50 	bl	8013bac <__mdiff>
 8012d0c:	68c2      	ldr	r2, [r0, #12]
 8012d0e:	4606      	mov	r6, r0
 8012d10:	bb02      	cbnz	r2, 8012d54 <_dtoa_r+0xa1c>
 8012d12:	4601      	mov	r1, r0
 8012d14:	4648      	mov	r0, r9
 8012d16:	f000 ff2d 	bl	8013b74 <__mcmp>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	4631      	mov	r1, r6
 8012d1e:	4658      	mov	r0, fp
 8012d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d22:	f000 fca3 	bl	801366c <_Bfree>
 8012d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d2a:	9e07      	ldr	r6, [sp, #28]
 8012d2c:	ea43 0102 	orr.w	r1, r3, r2
 8012d30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d32:	4319      	orrs	r1, r3
 8012d34:	d110      	bne.n	8012d58 <_dtoa_r+0xa20>
 8012d36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012d3a:	d029      	beq.n	8012d90 <_dtoa_r+0xa58>
 8012d3c:	9b08      	ldr	r3, [sp, #32]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	dd02      	ble.n	8012d48 <_dtoa_r+0xa10>
 8012d42:	9b02      	ldr	r3, [sp, #8]
 8012d44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012d48:	9b00      	ldr	r3, [sp, #0]
 8012d4a:	f883 8000 	strb.w	r8, [r3]
 8012d4e:	e63f      	b.n	80129d0 <_dtoa_r+0x698>
 8012d50:	4628      	mov	r0, r5
 8012d52:	e7bb      	b.n	8012ccc <_dtoa_r+0x994>
 8012d54:	2201      	movs	r2, #1
 8012d56:	e7e1      	b.n	8012d1c <_dtoa_r+0x9e4>
 8012d58:	9b08      	ldr	r3, [sp, #32]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	db04      	blt.n	8012d68 <_dtoa_r+0xa30>
 8012d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012d60:	430b      	orrs	r3, r1
 8012d62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012d64:	430b      	orrs	r3, r1
 8012d66:	d120      	bne.n	8012daa <_dtoa_r+0xa72>
 8012d68:	2a00      	cmp	r2, #0
 8012d6a:	dded      	ble.n	8012d48 <_dtoa_r+0xa10>
 8012d6c:	4649      	mov	r1, r9
 8012d6e:	2201      	movs	r2, #1
 8012d70:	4658      	mov	r0, fp
 8012d72:	f000 fe93 	bl	8013a9c <__lshift>
 8012d76:	4621      	mov	r1, r4
 8012d78:	4681      	mov	r9, r0
 8012d7a:	f000 fefb 	bl	8013b74 <__mcmp>
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	dc03      	bgt.n	8012d8a <_dtoa_r+0xa52>
 8012d82:	d1e1      	bne.n	8012d48 <_dtoa_r+0xa10>
 8012d84:	f018 0f01 	tst.w	r8, #1
 8012d88:	d0de      	beq.n	8012d48 <_dtoa_r+0xa10>
 8012d8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012d8e:	d1d8      	bne.n	8012d42 <_dtoa_r+0xa0a>
 8012d90:	9a00      	ldr	r2, [sp, #0]
 8012d92:	2339      	movs	r3, #57	@ 0x39
 8012d94:	7013      	strb	r3, [r2, #0]
 8012d96:	4633      	mov	r3, r6
 8012d98:	461e      	mov	r6, r3
 8012d9a:	3b01      	subs	r3, #1
 8012d9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012da0:	2a39      	cmp	r2, #57	@ 0x39
 8012da2:	d052      	beq.n	8012e4a <_dtoa_r+0xb12>
 8012da4:	3201      	adds	r2, #1
 8012da6:	701a      	strb	r2, [r3, #0]
 8012da8:	e612      	b.n	80129d0 <_dtoa_r+0x698>
 8012daa:	2a00      	cmp	r2, #0
 8012dac:	dd07      	ble.n	8012dbe <_dtoa_r+0xa86>
 8012dae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012db2:	d0ed      	beq.n	8012d90 <_dtoa_r+0xa58>
 8012db4:	9a00      	ldr	r2, [sp, #0]
 8012db6:	f108 0301 	add.w	r3, r8, #1
 8012dba:	7013      	strb	r3, [r2, #0]
 8012dbc:	e608      	b.n	80129d0 <_dtoa_r+0x698>
 8012dbe:	9b07      	ldr	r3, [sp, #28]
 8012dc0:	9a07      	ldr	r2, [sp, #28]
 8012dc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d028      	beq.n	8012e1e <_dtoa_r+0xae6>
 8012dcc:	4649      	mov	r1, r9
 8012dce:	2300      	movs	r3, #0
 8012dd0:	220a      	movs	r2, #10
 8012dd2:	4658      	mov	r0, fp
 8012dd4:	f000 fc6c 	bl	80136b0 <__multadd>
 8012dd8:	42af      	cmp	r7, r5
 8012dda:	4681      	mov	r9, r0
 8012ddc:	f04f 0300 	mov.w	r3, #0
 8012de0:	f04f 020a 	mov.w	r2, #10
 8012de4:	4639      	mov	r1, r7
 8012de6:	4658      	mov	r0, fp
 8012de8:	d107      	bne.n	8012dfa <_dtoa_r+0xac2>
 8012dea:	f000 fc61 	bl	80136b0 <__multadd>
 8012dee:	4607      	mov	r7, r0
 8012df0:	4605      	mov	r5, r0
 8012df2:	9b07      	ldr	r3, [sp, #28]
 8012df4:	3301      	adds	r3, #1
 8012df6:	9307      	str	r3, [sp, #28]
 8012df8:	e774      	b.n	8012ce4 <_dtoa_r+0x9ac>
 8012dfa:	f000 fc59 	bl	80136b0 <__multadd>
 8012dfe:	4629      	mov	r1, r5
 8012e00:	4607      	mov	r7, r0
 8012e02:	2300      	movs	r3, #0
 8012e04:	220a      	movs	r2, #10
 8012e06:	4658      	mov	r0, fp
 8012e08:	f000 fc52 	bl	80136b0 <__multadd>
 8012e0c:	4605      	mov	r5, r0
 8012e0e:	e7f0      	b.n	8012df2 <_dtoa_r+0xaba>
 8012e10:	9b00      	ldr	r3, [sp, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	bfcc      	ite	gt
 8012e16:	461e      	movgt	r6, r3
 8012e18:	2601      	movle	r6, #1
 8012e1a:	4456      	add	r6, sl
 8012e1c:	2700      	movs	r7, #0
 8012e1e:	4649      	mov	r1, r9
 8012e20:	2201      	movs	r2, #1
 8012e22:	4658      	mov	r0, fp
 8012e24:	f000 fe3a 	bl	8013a9c <__lshift>
 8012e28:	4621      	mov	r1, r4
 8012e2a:	4681      	mov	r9, r0
 8012e2c:	f000 fea2 	bl	8013b74 <__mcmp>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	dcb0      	bgt.n	8012d96 <_dtoa_r+0xa5e>
 8012e34:	d102      	bne.n	8012e3c <_dtoa_r+0xb04>
 8012e36:	f018 0f01 	tst.w	r8, #1
 8012e3a:	d1ac      	bne.n	8012d96 <_dtoa_r+0xa5e>
 8012e3c:	4633      	mov	r3, r6
 8012e3e:	461e      	mov	r6, r3
 8012e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e44:	2a30      	cmp	r2, #48	@ 0x30
 8012e46:	d0fa      	beq.n	8012e3e <_dtoa_r+0xb06>
 8012e48:	e5c2      	b.n	80129d0 <_dtoa_r+0x698>
 8012e4a:	459a      	cmp	sl, r3
 8012e4c:	d1a4      	bne.n	8012d98 <_dtoa_r+0xa60>
 8012e4e:	9b04      	ldr	r3, [sp, #16]
 8012e50:	3301      	adds	r3, #1
 8012e52:	9304      	str	r3, [sp, #16]
 8012e54:	2331      	movs	r3, #49	@ 0x31
 8012e56:	f88a 3000 	strb.w	r3, [sl]
 8012e5a:	e5b9      	b.n	80129d0 <_dtoa_r+0x698>
 8012e5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012e5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012ebc <_dtoa_r+0xb84>
 8012e62:	b11b      	cbz	r3, 8012e6c <_dtoa_r+0xb34>
 8012e64:	f10a 0308 	add.w	r3, sl, #8
 8012e68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012e6a:	6013      	str	r3, [r2, #0]
 8012e6c:	4650      	mov	r0, sl
 8012e6e:	b019      	add	sp, #100	@ 0x64
 8012e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	f77f ae37 	ble.w	8012aea <_dtoa_r+0x7b2>
 8012e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e80:	2001      	movs	r0, #1
 8012e82:	e655      	b.n	8012b30 <_dtoa_r+0x7f8>
 8012e84:	9b00      	ldr	r3, [sp, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	f77f aed6 	ble.w	8012c38 <_dtoa_r+0x900>
 8012e8c:	4656      	mov	r6, sl
 8012e8e:	4621      	mov	r1, r4
 8012e90:	4648      	mov	r0, r9
 8012e92:	f7ff f9c7 	bl	8012224 <quorem>
 8012e96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012e9a:	f806 8b01 	strb.w	r8, [r6], #1
 8012e9e:	9b00      	ldr	r3, [sp, #0]
 8012ea0:	eba6 020a 	sub.w	r2, r6, sl
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	ddb3      	ble.n	8012e10 <_dtoa_r+0xad8>
 8012ea8:	4649      	mov	r1, r9
 8012eaa:	2300      	movs	r3, #0
 8012eac:	220a      	movs	r2, #10
 8012eae:	4658      	mov	r0, fp
 8012eb0:	f000 fbfe 	bl	80136b0 <__multadd>
 8012eb4:	4681      	mov	r9, r0
 8012eb6:	e7ea      	b.n	8012e8e <_dtoa_r+0xb56>
 8012eb8:	0801521e 	.word	0x0801521e
 8012ebc:	080151a2 	.word	0x080151a2

08012ec0 <_free_r>:
 8012ec0:	b538      	push	{r3, r4, r5, lr}
 8012ec2:	4605      	mov	r5, r0
 8012ec4:	2900      	cmp	r1, #0
 8012ec6:	d041      	beq.n	8012f4c <_free_r+0x8c>
 8012ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ecc:	1f0c      	subs	r4, r1, #4
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	bfb8      	it	lt
 8012ed2:	18e4      	addlt	r4, r4, r3
 8012ed4:	f7fd f9f4 	bl	80102c0 <__malloc_lock>
 8012ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8012f50 <_free_r+0x90>)
 8012eda:	6813      	ldr	r3, [r2, #0]
 8012edc:	b933      	cbnz	r3, 8012eec <_free_r+0x2c>
 8012ede:	6063      	str	r3, [r4, #4]
 8012ee0:	6014      	str	r4, [r2, #0]
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ee8:	f7fd b9f0 	b.w	80102cc <__malloc_unlock>
 8012eec:	42a3      	cmp	r3, r4
 8012eee:	d908      	bls.n	8012f02 <_free_r+0x42>
 8012ef0:	6820      	ldr	r0, [r4, #0]
 8012ef2:	1821      	adds	r1, r4, r0
 8012ef4:	428b      	cmp	r3, r1
 8012ef6:	bf01      	itttt	eq
 8012ef8:	6819      	ldreq	r1, [r3, #0]
 8012efa:	685b      	ldreq	r3, [r3, #4]
 8012efc:	1809      	addeq	r1, r1, r0
 8012efe:	6021      	streq	r1, [r4, #0]
 8012f00:	e7ed      	b.n	8012ede <_free_r+0x1e>
 8012f02:	461a      	mov	r2, r3
 8012f04:	685b      	ldr	r3, [r3, #4]
 8012f06:	b10b      	cbz	r3, 8012f0c <_free_r+0x4c>
 8012f08:	42a3      	cmp	r3, r4
 8012f0a:	d9fa      	bls.n	8012f02 <_free_r+0x42>
 8012f0c:	6811      	ldr	r1, [r2, #0]
 8012f0e:	1850      	adds	r0, r2, r1
 8012f10:	42a0      	cmp	r0, r4
 8012f12:	d10b      	bne.n	8012f2c <_free_r+0x6c>
 8012f14:	6820      	ldr	r0, [r4, #0]
 8012f16:	4401      	add	r1, r0
 8012f18:	1850      	adds	r0, r2, r1
 8012f1a:	4283      	cmp	r3, r0
 8012f1c:	6011      	str	r1, [r2, #0]
 8012f1e:	d1e0      	bne.n	8012ee2 <_free_r+0x22>
 8012f20:	6818      	ldr	r0, [r3, #0]
 8012f22:	685b      	ldr	r3, [r3, #4]
 8012f24:	6053      	str	r3, [r2, #4]
 8012f26:	4408      	add	r0, r1
 8012f28:	6010      	str	r0, [r2, #0]
 8012f2a:	e7da      	b.n	8012ee2 <_free_r+0x22>
 8012f2c:	d902      	bls.n	8012f34 <_free_r+0x74>
 8012f2e:	230c      	movs	r3, #12
 8012f30:	602b      	str	r3, [r5, #0]
 8012f32:	e7d6      	b.n	8012ee2 <_free_r+0x22>
 8012f34:	6820      	ldr	r0, [r4, #0]
 8012f36:	1821      	adds	r1, r4, r0
 8012f38:	428b      	cmp	r3, r1
 8012f3a:	bf04      	itt	eq
 8012f3c:	6819      	ldreq	r1, [r3, #0]
 8012f3e:	685b      	ldreq	r3, [r3, #4]
 8012f40:	6063      	str	r3, [r4, #4]
 8012f42:	bf04      	itt	eq
 8012f44:	1809      	addeq	r1, r1, r0
 8012f46:	6021      	streq	r1, [r4, #0]
 8012f48:	6054      	str	r4, [r2, #4]
 8012f4a:	e7ca      	b.n	8012ee2 <_free_r+0x22>
 8012f4c:	bd38      	pop	{r3, r4, r5, pc}
 8012f4e:	bf00      	nop
 8012f50:	200009fc 	.word	0x200009fc

08012f54 <rshift>:
 8012f54:	6903      	ldr	r3, [r0, #16]
 8012f56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012f5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012f62:	f100 0414 	add.w	r4, r0, #20
 8012f66:	dd45      	ble.n	8012ff4 <rshift+0xa0>
 8012f68:	f011 011f 	ands.w	r1, r1, #31
 8012f6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012f70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012f74:	d10c      	bne.n	8012f90 <rshift+0x3c>
 8012f76:	f100 0710 	add.w	r7, r0, #16
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	42b1      	cmp	r1, r6
 8012f7e:	d334      	bcc.n	8012fea <rshift+0x96>
 8012f80:	1a9b      	subs	r3, r3, r2
 8012f82:	009b      	lsls	r3, r3, #2
 8012f84:	1eea      	subs	r2, r5, #3
 8012f86:	4296      	cmp	r6, r2
 8012f88:	bf38      	it	cc
 8012f8a:	2300      	movcc	r3, #0
 8012f8c:	4423      	add	r3, r4
 8012f8e:	e015      	b.n	8012fbc <rshift+0x68>
 8012f90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012f94:	f1c1 0820 	rsb	r8, r1, #32
 8012f98:	40cf      	lsrs	r7, r1
 8012f9a:	f105 0e04 	add.w	lr, r5, #4
 8012f9e:	46a1      	mov	r9, r4
 8012fa0:	4576      	cmp	r6, lr
 8012fa2:	46f4      	mov	ip, lr
 8012fa4:	d815      	bhi.n	8012fd2 <rshift+0x7e>
 8012fa6:	1a9a      	subs	r2, r3, r2
 8012fa8:	0092      	lsls	r2, r2, #2
 8012faa:	3a04      	subs	r2, #4
 8012fac:	3501      	adds	r5, #1
 8012fae:	42ae      	cmp	r6, r5
 8012fb0:	bf38      	it	cc
 8012fb2:	2200      	movcc	r2, #0
 8012fb4:	18a3      	adds	r3, r4, r2
 8012fb6:	50a7      	str	r7, [r4, r2]
 8012fb8:	b107      	cbz	r7, 8012fbc <rshift+0x68>
 8012fba:	3304      	adds	r3, #4
 8012fbc:	1b1a      	subs	r2, r3, r4
 8012fbe:	42a3      	cmp	r3, r4
 8012fc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012fc4:	bf08      	it	eq
 8012fc6:	2300      	moveq	r3, #0
 8012fc8:	6102      	str	r2, [r0, #16]
 8012fca:	bf08      	it	eq
 8012fcc:	6143      	streq	r3, [r0, #20]
 8012fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fd2:	f8dc c000 	ldr.w	ip, [ip]
 8012fd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8012fda:	ea4c 0707 	orr.w	r7, ip, r7
 8012fde:	f849 7b04 	str.w	r7, [r9], #4
 8012fe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012fe6:	40cf      	lsrs	r7, r1
 8012fe8:	e7da      	b.n	8012fa0 <rshift+0x4c>
 8012fea:	f851 cb04 	ldr.w	ip, [r1], #4
 8012fee:	f847 cf04 	str.w	ip, [r7, #4]!
 8012ff2:	e7c3      	b.n	8012f7c <rshift+0x28>
 8012ff4:	4623      	mov	r3, r4
 8012ff6:	e7e1      	b.n	8012fbc <rshift+0x68>

08012ff8 <__hexdig_fun>:
 8012ff8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012ffc:	2b09      	cmp	r3, #9
 8012ffe:	d802      	bhi.n	8013006 <__hexdig_fun+0xe>
 8013000:	3820      	subs	r0, #32
 8013002:	b2c0      	uxtb	r0, r0
 8013004:	4770      	bx	lr
 8013006:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801300a:	2b05      	cmp	r3, #5
 801300c:	d801      	bhi.n	8013012 <__hexdig_fun+0x1a>
 801300e:	3847      	subs	r0, #71	@ 0x47
 8013010:	e7f7      	b.n	8013002 <__hexdig_fun+0xa>
 8013012:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013016:	2b05      	cmp	r3, #5
 8013018:	d801      	bhi.n	801301e <__hexdig_fun+0x26>
 801301a:	3827      	subs	r0, #39	@ 0x27
 801301c:	e7f1      	b.n	8013002 <__hexdig_fun+0xa>
 801301e:	2000      	movs	r0, #0
 8013020:	4770      	bx	lr
	...

08013024 <__gethex>:
 8013024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013028:	b085      	sub	sp, #20
 801302a:	468a      	mov	sl, r1
 801302c:	9302      	str	r3, [sp, #8]
 801302e:	680b      	ldr	r3, [r1, #0]
 8013030:	9001      	str	r0, [sp, #4]
 8013032:	4690      	mov	r8, r2
 8013034:	1c9c      	adds	r4, r3, #2
 8013036:	46a1      	mov	r9, r4
 8013038:	f814 0b01 	ldrb.w	r0, [r4], #1
 801303c:	2830      	cmp	r0, #48	@ 0x30
 801303e:	d0fa      	beq.n	8013036 <__gethex+0x12>
 8013040:	eba9 0303 	sub.w	r3, r9, r3
 8013044:	f1a3 0b02 	sub.w	fp, r3, #2
 8013048:	f7ff ffd6 	bl	8012ff8 <__hexdig_fun>
 801304c:	4605      	mov	r5, r0
 801304e:	2800      	cmp	r0, #0
 8013050:	d168      	bne.n	8013124 <__gethex+0x100>
 8013052:	49a0      	ldr	r1, [pc, #640]	@ (80132d4 <__gethex+0x2b0>)
 8013054:	2201      	movs	r2, #1
 8013056:	4648      	mov	r0, r9
 8013058:	f7ff f82e 	bl	80120b8 <strncmp>
 801305c:	4607      	mov	r7, r0
 801305e:	2800      	cmp	r0, #0
 8013060:	d167      	bne.n	8013132 <__gethex+0x10e>
 8013062:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013066:	4626      	mov	r6, r4
 8013068:	f7ff ffc6 	bl	8012ff8 <__hexdig_fun>
 801306c:	2800      	cmp	r0, #0
 801306e:	d062      	beq.n	8013136 <__gethex+0x112>
 8013070:	4623      	mov	r3, r4
 8013072:	7818      	ldrb	r0, [r3, #0]
 8013074:	2830      	cmp	r0, #48	@ 0x30
 8013076:	4699      	mov	r9, r3
 8013078:	f103 0301 	add.w	r3, r3, #1
 801307c:	d0f9      	beq.n	8013072 <__gethex+0x4e>
 801307e:	f7ff ffbb 	bl	8012ff8 <__hexdig_fun>
 8013082:	fab0 f580 	clz	r5, r0
 8013086:	096d      	lsrs	r5, r5, #5
 8013088:	f04f 0b01 	mov.w	fp, #1
 801308c:	464a      	mov	r2, r9
 801308e:	4616      	mov	r6, r2
 8013090:	3201      	adds	r2, #1
 8013092:	7830      	ldrb	r0, [r6, #0]
 8013094:	f7ff ffb0 	bl	8012ff8 <__hexdig_fun>
 8013098:	2800      	cmp	r0, #0
 801309a:	d1f8      	bne.n	801308e <__gethex+0x6a>
 801309c:	498d      	ldr	r1, [pc, #564]	@ (80132d4 <__gethex+0x2b0>)
 801309e:	2201      	movs	r2, #1
 80130a0:	4630      	mov	r0, r6
 80130a2:	f7ff f809 	bl	80120b8 <strncmp>
 80130a6:	2800      	cmp	r0, #0
 80130a8:	d13f      	bne.n	801312a <__gethex+0x106>
 80130aa:	b944      	cbnz	r4, 80130be <__gethex+0x9a>
 80130ac:	1c74      	adds	r4, r6, #1
 80130ae:	4622      	mov	r2, r4
 80130b0:	4616      	mov	r6, r2
 80130b2:	3201      	adds	r2, #1
 80130b4:	7830      	ldrb	r0, [r6, #0]
 80130b6:	f7ff ff9f 	bl	8012ff8 <__hexdig_fun>
 80130ba:	2800      	cmp	r0, #0
 80130bc:	d1f8      	bne.n	80130b0 <__gethex+0x8c>
 80130be:	1ba4      	subs	r4, r4, r6
 80130c0:	00a7      	lsls	r7, r4, #2
 80130c2:	7833      	ldrb	r3, [r6, #0]
 80130c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80130c8:	2b50      	cmp	r3, #80	@ 0x50
 80130ca:	d13e      	bne.n	801314a <__gethex+0x126>
 80130cc:	7873      	ldrb	r3, [r6, #1]
 80130ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80130d0:	d033      	beq.n	801313a <__gethex+0x116>
 80130d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80130d4:	d034      	beq.n	8013140 <__gethex+0x11c>
 80130d6:	1c71      	adds	r1, r6, #1
 80130d8:	2400      	movs	r4, #0
 80130da:	7808      	ldrb	r0, [r1, #0]
 80130dc:	f7ff ff8c 	bl	8012ff8 <__hexdig_fun>
 80130e0:	1e43      	subs	r3, r0, #1
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	2b18      	cmp	r3, #24
 80130e6:	d830      	bhi.n	801314a <__gethex+0x126>
 80130e8:	f1a0 0210 	sub.w	r2, r0, #16
 80130ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80130f0:	f7ff ff82 	bl	8012ff8 <__hexdig_fun>
 80130f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80130f8:	fa5f fc8c 	uxtb.w	ip, ip
 80130fc:	f1bc 0f18 	cmp.w	ip, #24
 8013100:	f04f 030a 	mov.w	r3, #10
 8013104:	d91e      	bls.n	8013144 <__gethex+0x120>
 8013106:	b104      	cbz	r4, 801310a <__gethex+0xe6>
 8013108:	4252      	negs	r2, r2
 801310a:	4417      	add	r7, r2
 801310c:	f8ca 1000 	str.w	r1, [sl]
 8013110:	b1ed      	cbz	r5, 801314e <__gethex+0x12a>
 8013112:	f1bb 0f00 	cmp.w	fp, #0
 8013116:	bf0c      	ite	eq
 8013118:	2506      	moveq	r5, #6
 801311a:	2500      	movne	r5, #0
 801311c:	4628      	mov	r0, r5
 801311e:	b005      	add	sp, #20
 8013120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013124:	2500      	movs	r5, #0
 8013126:	462c      	mov	r4, r5
 8013128:	e7b0      	b.n	801308c <__gethex+0x68>
 801312a:	2c00      	cmp	r4, #0
 801312c:	d1c7      	bne.n	80130be <__gethex+0x9a>
 801312e:	4627      	mov	r7, r4
 8013130:	e7c7      	b.n	80130c2 <__gethex+0x9e>
 8013132:	464e      	mov	r6, r9
 8013134:	462f      	mov	r7, r5
 8013136:	2501      	movs	r5, #1
 8013138:	e7c3      	b.n	80130c2 <__gethex+0x9e>
 801313a:	2400      	movs	r4, #0
 801313c:	1cb1      	adds	r1, r6, #2
 801313e:	e7cc      	b.n	80130da <__gethex+0xb6>
 8013140:	2401      	movs	r4, #1
 8013142:	e7fb      	b.n	801313c <__gethex+0x118>
 8013144:	fb03 0002 	mla	r0, r3, r2, r0
 8013148:	e7ce      	b.n	80130e8 <__gethex+0xc4>
 801314a:	4631      	mov	r1, r6
 801314c:	e7de      	b.n	801310c <__gethex+0xe8>
 801314e:	eba6 0309 	sub.w	r3, r6, r9
 8013152:	3b01      	subs	r3, #1
 8013154:	4629      	mov	r1, r5
 8013156:	2b07      	cmp	r3, #7
 8013158:	dc0a      	bgt.n	8013170 <__gethex+0x14c>
 801315a:	9801      	ldr	r0, [sp, #4]
 801315c:	f000 fa46 	bl	80135ec <_Balloc>
 8013160:	4604      	mov	r4, r0
 8013162:	b940      	cbnz	r0, 8013176 <__gethex+0x152>
 8013164:	4b5c      	ldr	r3, [pc, #368]	@ (80132d8 <__gethex+0x2b4>)
 8013166:	4602      	mov	r2, r0
 8013168:	21e4      	movs	r1, #228	@ 0xe4
 801316a:	485c      	ldr	r0, [pc, #368]	@ (80132dc <__gethex+0x2b8>)
 801316c:	f001 fb98 	bl	80148a0 <__assert_func>
 8013170:	3101      	adds	r1, #1
 8013172:	105b      	asrs	r3, r3, #1
 8013174:	e7ef      	b.n	8013156 <__gethex+0x132>
 8013176:	f100 0a14 	add.w	sl, r0, #20
 801317a:	2300      	movs	r3, #0
 801317c:	4655      	mov	r5, sl
 801317e:	469b      	mov	fp, r3
 8013180:	45b1      	cmp	r9, r6
 8013182:	d337      	bcc.n	80131f4 <__gethex+0x1d0>
 8013184:	f845 bb04 	str.w	fp, [r5], #4
 8013188:	eba5 050a 	sub.w	r5, r5, sl
 801318c:	10ad      	asrs	r5, r5, #2
 801318e:	6125      	str	r5, [r4, #16]
 8013190:	4658      	mov	r0, fp
 8013192:	f000 fb1d 	bl	80137d0 <__hi0bits>
 8013196:	016d      	lsls	r5, r5, #5
 8013198:	f8d8 6000 	ldr.w	r6, [r8]
 801319c:	1a2d      	subs	r5, r5, r0
 801319e:	42b5      	cmp	r5, r6
 80131a0:	dd54      	ble.n	801324c <__gethex+0x228>
 80131a2:	1bad      	subs	r5, r5, r6
 80131a4:	4629      	mov	r1, r5
 80131a6:	4620      	mov	r0, r4
 80131a8:	f000 feb1 	bl	8013f0e <__any_on>
 80131ac:	4681      	mov	r9, r0
 80131ae:	b178      	cbz	r0, 80131d0 <__gethex+0x1ac>
 80131b0:	1e6b      	subs	r3, r5, #1
 80131b2:	1159      	asrs	r1, r3, #5
 80131b4:	f003 021f 	and.w	r2, r3, #31
 80131b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80131bc:	f04f 0901 	mov.w	r9, #1
 80131c0:	fa09 f202 	lsl.w	r2, r9, r2
 80131c4:	420a      	tst	r2, r1
 80131c6:	d003      	beq.n	80131d0 <__gethex+0x1ac>
 80131c8:	454b      	cmp	r3, r9
 80131ca:	dc36      	bgt.n	801323a <__gethex+0x216>
 80131cc:	f04f 0902 	mov.w	r9, #2
 80131d0:	4629      	mov	r1, r5
 80131d2:	4620      	mov	r0, r4
 80131d4:	f7ff febe 	bl	8012f54 <rshift>
 80131d8:	442f      	add	r7, r5
 80131da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131de:	42bb      	cmp	r3, r7
 80131e0:	da42      	bge.n	8013268 <__gethex+0x244>
 80131e2:	9801      	ldr	r0, [sp, #4]
 80131e4:	4621      	mov	r1, r4
 80131e6:	f000 fa41 	bl	801366c <_Bfree>
 80131ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131ec:	2300      	movs	r3, #0
 80131ee:	6013      	str	r3, [r2, #0]
 80131f0:	25a3      	movs	r5, #163	@ 0xa3
 80131f2:	e793      	b.n	801311c <__gethex+0xf8>
 80131f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80131f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80131fa:	d012      	beq.n	8013222 <__gethex+0x1fe>
 80131fc:	2b20      	cmp	r3, #32
 80131fe:	d104      	bne.n	801320a <__gethex+0x1e6>
 8013200:	f845 bb04 	str.w	fp, [r5], #4
 8013204:	f04f 0b00 	mov.w	fp, #0
 8013208:	465b      	mov	r3, fp
 801320a:	7830      	ldrb	r0, [r6, #0]
 801320c:	9303      	str	r3, [sp, #12]
 801320e:	f7ff fef3 	bl	8012ff8 <__hexdig_fun>
 8013212:	9b03      	ldr	r3, [sp, #12]
 8013214:	f000 000f 	and.w	r0, r0, #15
 8013218:	4098      	lsls	r0, r3
 801321a:	ea4b 0b00 	orr.w	fp, fp, r0
 801321e:	3304      	adds	r3, #4
 8013220:	e7ae      	b.n	8013180 <__gethex+0x15c>
 8013222:	45b1      	cmp	r9, r6
 8013224:	d8ea      	bhi.n	80131fc <__gethex+0x1d8>
 8013226:	492b      	ldr	r1, [pc, #172]	@ (80132d4 <__gethex+0x2b0>)
 8013228:	9303      	str	r3, [sp, #12]
 801322a:	2201      	movs	r2, #1
 801322c:	4630      	mov	r0, r6
 801322e:	f7fe ff43 	bl	80120b8 <strncmp>
 8013232:	9b03      	ldr	r3, [sp, #12]
 8013234:	2800      	cmp	r0, #0
 8013236:	d1e1      	bne.n	80131fc <__gethex+0x1d8>
 8013238:	e7a2      	b.n	8013180 <__gethex+0x15c>
 801323a:	1ea9      	subs	r1, r5, #2
 801323c:	4620      	mov	r0, r4
 801323e:	f000 fe66 	bl	8013f0e <__any_on>
 8013242:	2800      	cmp	r0, #0
 8013244:	d0c2      	beq.n	80131cc <__gethex+0x1a8>
 8013246:	f04f 0903 	mov.w	r9, #3
 801324a:	e7c1      	b.n	80131d0 <__gethex+0x1ac>
 801324c:	da09      	bge.n	8013262 <__gethex+0x23e>
 801324e:	1b75      	subs	r5, r6, r5
 8013250:	4621      	mov	r1, r4
 8013252:	9801      	ldr	r0, [sp, #4]
 8013254:	462a      	mov	r2, r5
 8013256:	f000 fc21 	bl	8013a9c <__lshift>
 801325a:	1b7f      	subs	r7, r7, r5
 801325c:	4604      	mov	r4, r0
 801325e:	f100 0a14 	add.w	sl, r0, #20
 8013262:	f04f 0900 	mov.w	r9, #0
 8013266:	e7b8      	b.n	80131da <__gethex+0x1b6>
 8013268:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801326c:	42bd      	cmp	r5, r7
 801326e:	dd6f      	ble.n	8013350 <__gethex+0x32c>
 8013270:	1bed      	subs	r5, r5, r7
 8013272:	42ae      	cmp	r6, r5
 8013274:	dc34      	bgt.n	80132e0 <__gethex+0x2bc>
 8013276:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801327a:	2b02      	cmp	r3, #2
 801327c:	d022      	beq.n	80132c4 <__gethex+0x2a0>
 801327e:	2b03      	cmp	r3, #3
 8013280:	d024      	beq.n	80132cc <__gethex+0x2a8>
 8013282:	2b01      	cmp	r3, #1
 8013284:	d115      	bne.n	80132b2 <__gethex+0x28e>
 8013286:	42ae      	cmp	r6, r5
 8013288:	d113      	bne.n	80132b2 <__gethex+0x28e>
 801328a:	2e01      	cmp	r6, #1
 801328c:	d10b      	bne.n	80132a6 <__gethex+0x282>
 801328e:	9a02      	ldr	r2, [sp, #8]
 8013290:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013294:	6013      	str	r3, [r2, #0]
 8013296:	2301      	movs	r3, #1
 8013298:	6123      	str	r3, [r4, #16]
 801329a:	f8ca 3000 	str.w	r3, [sl]
 801329e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80132a0:	2562      	movs	r5, #98	@ 0x62
 80132a2:	601c      	str	r4, [r3, #0]
 80132a4:	e73a      	b.n	801311c <__gethex+0xf8>
 80132a6:	1e71      	subs	r1, r6, #1
 80132a8:	4620      	mov	r0, r4
 80132aa:	f000 fe30 	bl	8013f0e <__any_on>
 80132ae:	2800      	cmp	r0, #0
 80132b0:	d1ed      	bne.n	801328e <__gethex+0x26a>
 80132b2:	9801      	ldr	r0, [sp, #4]
 80132b4:	4621      	mov	r1, r4
 80132b6:	f000 f9d9 	bl	801366c <_Bfree>
 80132ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132bc:	2300      	movs	r3, #0
 80132be:	6013      	str	r3, [r2, #0]
 80132c0:	2550      	movs	r5, #80	@ 0x50
 80132c2:	e72b      	b.n	801311c <__gethex+0xf8>
 80132c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d1f3      	bne.n	80132b2 <__gethex+0x28e>
 80132ca:	e7e0      	b.n	801328e <__gethex+0x26a>
 80132cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1dd      	bne.n	801328e <__gethex+0x26a>
 80132d2:	e7ee      	b.n	80132b2 <__gethex+0x28e>
 80132d4:	08015008 	.word	0x08015008
 80132d8:	0801521e 	.word	0x0801521e
 80132dc:	0801522f 	.word	0x0801522f
 80132e0:	1e6f      	subs	r7, r5, #1
 80132e2:	f1b9 0f00 	cmp.w	r9, #0
 80132e6:	d130      	bne.n	801334a <__gethex+0x326>
 80132e8:	b127      	cbz	r7, 80132f4 <__gethex+0x2d0>
 80132ea:	4639      	mov	r1, r7
 80132ec:	4620      	mov	r0, r4
 80132ee:	f000 fe0e 	bl	8013f0e <__any_on>
 80132f2:	4681      	mov	r9, r0
 80132f4:	117a      	asrs	r2, r7, #5
 80132f6:	2301      	movs	r3, #1
 80132f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80132fc:	f007 071f 	and.w	r7, r7, #31
 8013300:	40bb      	lsls	r3, r7
 8013302:	4213      	tst	r3, r2
 8013304:	4629      	mov	r1, r5
 8013306:	4620      	mov	r0, r4
 8013308:	bf18      	it	ne
 801330a:	f049 0902 	orrne.w	r9, r9, #2
 801330e:	f7ff fe21 	bl	8012f54 <rshift>
 8013312:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013316:	1b76      	subs	r6, r6, r5
 8013318:	2502      	movs	r5, #2
 801331a:	f1b9 0f00 	cmp.w	r9, #0
 801331e:	d047      	beq.n	80133b0 <__gethex+0x38c>
 8013320:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013324:	2b02      	cmp	r3, #2
 8013326:	d015      	beq.n	8013354 <__gethex+0x330>
 8013328:	2b03      	cmp	r3, #3
 801332a:	d017      	beq.n	801335c <__gethex+0x338>
 801332c:	2b01      	cmp	r3, #1
 801332e:	d109      	bne.n	8013344 <__gethex+0x320>
 8013330:	f019 0f02 	tst.w	r9, #2
 8013334:	d006      	beq.n	8013344 <__gethex+0x320>
 8013336:	f8da 3000 	ldr.w	r3, [sl]
 801333a:	ea49 0903 	orr.w	r9, r9, r3
 801333e:	f019 0f01 	tst.w	r9, #1
 8013342:	d10e      	bne.n	8013362 <__gethex+0x33e>
 8013344:	f045 0510 	orr.w	r5, r5, #16
 8013348:	e032      	b.n	80133b0 <__gethex+0x38c>
 801334a:	f04f 0901 	mov.w	r9, #1
 801334e:	e7d1      	b.n	80132f4 <__gethex+0x2d0>
 8013350:	2501      	movs	r5, #1
 8013352:	e7e2      	b.n	801331a <__gethex+0x2f6>
 8013354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013356:	f1c3 0301 	rsb	r3, r3, #1
 801335a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801335c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801335e:	2b00      	cmp	r3, #0
 8013360:	d0f0      	beq.n	8013344 <__gethex+0x320>
 8013362:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013366:	f104 0314 	add.w	r3, r4, #20
 801336a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801336e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013372:	f04f 0c00 	mov.w	ip, #0
 8013376:	4618      	mov	r0, r3
 8013378:	f853 2b04 	ldr.w	r2, [r3], #4
 801337c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013380:	d01b      	beq.n	80133ba <__gethex+0x396>
 8013382:	3201      	adds	r2, #1
 8013384:	6002      	str	r2, [r0, #0]
 8013386:	2d02      	cmp	r5, #2
 8013388:	f104 0314 	add.w	r3, r4, #20
 801338c:	d13c      	bne.n	8013408 <__gethex+0x3e4>
 801338e:	f8d8 2000 	ldr.w	r2, [r8]
 8013392:	3a01      	subs	r2, #1
 8013394:	42b2      	cmp	r2, r6
 8013396:	d109      	bne.n	80133ac <__gethex+0x388>
 8013398:	1171      	asrs	r1, r6, #5
 801339a:	2201      	movs	r2, #1
 801339c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80133a0:	f006 061f 	and.w	r6, r6, #31
 80133a4:	fa02 f606 	lsl.w	r6, r2, r6
 80133a8:	421e      	tst	r6, r3
 80133aa:	d13a      	bne.n	8013422 <__gethex+0x3fe>
 80133ac:	f045 0520 	orr.w	r5, r5, #32
 80133b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133b2:	601c      	str	r4, [r3, #0]
 80133b4:	9b02      	ldr	r3, [sp, #8]
 80133b6:	601f      	str	r7, [r3, #0]
 80133b8:	e6b0      	b.n	801311c <__gethex+0xf8>
 80133ba:	4299      	cmp	r1, r3
 80133bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80133c0:	d8d9      	bhi.n	8013376 <__gethex+0x352>
 80133c2:	68a3      	ldr	r3, [r4, #8]
 80133c4:	459b      	cmp	fp, r3
 80133c6:	db17      	blt.n	80133f8 <__gethex+0x3d4>
 80133c8:	6861      	ldr	r1, [r4, #4]
 80133ca:	9801      	ldr	r0, [sp, #4]
 80133cc:	3101      	adds	r1, #1
 80133ce:	f000 f90d 	bl	80135ec <_Balloc>
 80133d2:	4681      	mov	r9, r0
 80133d4:	b918      	cbnz	r0, 80133de <__gethex+0x3ba>
 80133d6:	4b1a      	ldr	r3, [pc, #104]	@ (8013440 <__gethex+0x41c>)
 80133d8:	4602      	mov	r2, r0
 80133da:	2184      	movs	r1, #132	@ 0x84
 80133dc:	e6c5      	b.n	801316a <__gethex+0x146>
 80133de:	6922      	ldr	r2, [r4, #16]
 80133e0:	3202      	adds	r2, #2
 80133e2:	f104 010c 	add.w	r1, r4, #12
 80133e6:	0092      	lsls	r2, r2, #2
 80133e8:	300c      	adds	r0, #12
 80133ea:	f7fe fefe 	bl	80121ea <memcpy>
 80133ee:	4621      	mov	r1, r4
 80133f0:	9801      	ldr	r0, [sp, #4]
 80133f2:	f000 f93b 	bl	801366c <_Bfree>
 80133f6:	464c      	mov	r4, r9
 80133f8:	6923      	ldr	r3, [r4, #16]
 80133fa:	1c5a      	adds	r2, r3, #1
 80133fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013400:	6122      	str	r2, [r4, #16]
 8013402:	2201      	movs	r2, #1
 8013404:	615a      	str	r2, [r3, #20]
 8013406:	e7be      	b.n	8013386 <__gethex+0x362>
 8013408:	6922      	ldr	r2, [r4, #16]
 801340a:	455a      	cmp	r2, fp
 801340c:	dd0b      	ble.n	8013426 <__gethex+0x402>
 801340e:	2101      	movs	r1, #1
 8013410:	4620      	mov	r0, r4
 8013412:	f7ff fd9f 	bl	8012f54 <rshift>
 8013416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801341a:	3701      	adds	r7, #1
 801341c:	42bb      	cmp	r3, r7
 801341e:	f6ff aee0 	blt.w	80131e2 <__gethex+0x1be>
 8013422:	2501      	movs	r5, #1
 8013424:	e7c2      	b.n	80133ac <__gethex+0x388>
 8013426:	f016 061f 	ands.w	r6, r6, #31
 801342a:	d0fa      	beq.n	8013422 <__gethex+0x3fe>
 801342c:	4453      	add	r3, sl
 801342e:	f1c6 0620 	rsb	r6, r6, #32
 8013432:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013436:	f000 f9cb 	bl	80137d0 <__hi0bits>
 801343a:	42b0      	cmp	r0, r6
 801343c:	dbe7      	blt.n	801340e <__gethex+0x3ea>
 801343e:	e7f0      	b.n	8013422 <__gethex+0x3fe>
 8013440:	0801521e 	.word	0x0801521e

08013444 <L_shift>:
 8013444:	f1c2 0208 	rsb	r2, r2, #8
 8013448:	0092      	lsls	r2, r2, #2
 801344a:	b570      	push	{r4, r5, r6, lr}
 801344c:	f1c2 0620 	rsb	r6, r2, #32
 8013450:	6843      	ldr	r3, [r0, #4]
 8013452:	6804      	ldr	r4, [r0, #0]
 8013454:	fa03 f506 	lsl.w	r5, r3, r6
 8013458:	432c      	orrs	r4, r5
 801345a:	40d3      	lsrs	r3, r2
 801345c:	6004      	str	r4, [r0, #0]
 801345e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013462:	4288      	cmp	r0, r1
 8013464:	d3f4      	bcc.n	8013450 <L_shift+0xc>
 8013466:	bd70      	pop	{r4, r5, r6, pc}

08013468 <__match>:
 8013468:	b530      	push	{r4, r5, lr}
 801346a:	6803      	ldr	r3, [r0, #0]
 801346c:	3301      	adds	r3, #1
 801346e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013472:	b914      	cbnz	r4, 801347a <__match+0x12>
 8013474:	6003      	str	r3, [r0, #0]
 8013476:	2001      	movs	r0, #1
 8013478:	bd30      	pop	{r4, r5, pc}
 801347a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801347e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013482:	2d19      	cmp	r5, #25
 8013484:	bf98      	it	ls
 8013486:	3220      	addls	r2, #32
 8013488:	42a2      	cmp	r2, r4
 801348a:	d0f0      	beq.n	801346e <__match+0x6>
 801348c:	2000      	movs	r0, #0
 801348e:	e7f3      	b.n	8013478 <__match+0x10>

08013490 <__hexnan>:
 8013490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013494:	680b      	ldr	r3, [r1, #0]
 8013496:	6801      	ldr	r1, [r0, #0]
 8013498:	115e      	asrs	r6, r3, #5
 801349a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801349e:	f013 031f 	ands.w	r3, r3, #31
 80134a2:	b087      	sub	sp, #28
 80134a4:	bf18      	it	ne
 80134a6:	3604      	addne	r6, #4
 80134a8:	2500      	movs	r5, #0
 80134aa:	1f37      	subs	r7, r6, #4
 80134ac:	4682      	mov	sl, r0
 80134ae:	4690      	mov	r8, r2
 80134b0:	9301      	str	r3, [sp, #4]
 80134b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80134b6:	46b9      	mov	r9, r7
 80134b8:	463c      	mov	r4, r7
 80134ba:	9502      	str	r5, [sp, #8]
 80134bc:	46ab      	mov	fp, r5
 80134be:	784a      	ldrb	r2, [r1, #1]
 80134c0:	1c4b      	adds	r3, r1, #1
 80134c2:	9303      	str	r3, [sp, #12]
 80134c4:	b342      	cbz	r2, 8013518 <__hexnan+0x88>
 80134c6:	4610      	mov	r0, r2
 80134c8:	9105      	str	r1, [sp, #20]
 80134ca:	9204      	str	r2, [sp, #16]
 80134cc:	f7ff fd94 	bl	8012ff8 <__hexdig_fun>
 80134d0:	2800      	cmp	r0, #0
 80134d2:	d151      	bne.n	8013578 <__hexnan+0xe8>
 80134d4:	9a04      	ldr	r2, [sp, #16]
 80134d6:	9905      	ldr	r1, [sp, #20]
 80134d8:	2a20      	cmp	r2, #32
 80134da:	d818      	bhi.n	801350e <__hexnan+0x7e>
 80134dc:	9b02      	ldr	r3, [sp, #8]
 80134de:	459b      	cmp	fp, r3
 80134e0:	dd13      	ble.n	801350a <__hexnan+0x7a>
 80134e2:	454c      	cmp	r4, r9
 80134e4:	d206      	bcs.n	80134f4 <__hexnan+0x64>
 80134e6:	2d07      	cmp	r5, #7
 80134e8:	dc04      	bgt.n	80134f4 <__hexnan+0x64>
 80134ea:	462a      	mov	r2, r5
 80134ec:	4649      	mov	r1, r9
 80134ee:	4620      	mov	r0, r4
 80134f0:	f7ff ffa8 	bl	8013444 <L_shift>
 80134f4:	4544      	cmp	r4, r8
 80134f6:	d952      	bls.n	801359e <__hexnan+0x10e>
 80134f8:	2300      	movs	r3, #0
 80134fa:	f1a4 0904 	sub.w	r9, r4, #4
 80134fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8013502:	f8cd b008 	str.w	fp, [sp, #8]
 8013506:	464c      	mov	r4, r9
 8013508:	461d      	mov	r5, r3
 801350a:	9903      	ldr	r1, [sp, #12]
 801350c:	e7d7      	b.n	80134be <__hexnan+0x2e>
 801350e:	2a29      	cmp	r2, #41	@ 0x29
 8013510:	d157      	bne.n	80135c2 <__hexnan+0x132>
 8013512:	3102      	adds	r1, #2
 8013514:	f8ca 1000 	str.w	r1, [sl]
 8013518:	f1bb 0f00 	cmp.w	fp, #0
 801351c:	d051      	beq.n	80135c2 <__hexnan+0x132>
 801351e:	454c      	cmp	r4, r9
 8013520:	d206      	bcs.n	8013530 <__hexnan+0xa0>
 8013522:	2d07      	cmp	r5, #7
 8013524:	dc04      	bgt.n	8013530 <__hexnan+0xa0>
 8013526:	462a      	mov	r2, r5
 8013528:	4649      	mov	r1, r9
 801352a:	4620      	mov	r0, r4
 801352c:	f7ff ff8a 	bl	8013444 <L_shift>
 8013530:	4544      	cmp	r4, r8
 8013532:	d936      	bls.n	80135a2 <__hexnan+0x112>
 8013534:	f1a8 0204 	sub.w	r2, r8, #4
 8013538:	4623      	mov	r3, r4
 801353a:	f853 1b04 	ldr.w	r1, [r3], #4
 801353e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013542:	429f      	cmp	r7, r3
 8013544:	d2f9      	bcs.n	801353a <__hexnan+0xaa>
 8013546:	1b3b      	subs	r3, r7, r4
 8013548:	f023 0303 	bic.w	r3, r3, #3
 801354c:	3304      	adds	r3, #4
 801354e:	3401      	adds	r4, #1
 8013550:	3e03      	subs	r6, #3
 8013552:	42b4      	cmp	r4, r6
 8013554:	bf88      	it	hi
 8013556:	2304      	movhi	r3, #4
 8013558:	4443      	add	r3, r8
 801355a:	2200      	movs	r2, #0
 801355c:	f843 2b04 	str.w	r2, [r3], #4
 8013560:	429f      	cmp	r7, r3
 8013562:	d2fb      	bcs.n	801355c <__hexnan+0xcc>
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	b91b      	cbnz	r3, 8013570 <__hexnan+0xe0>
 8013568:	4547      	cmp	r7, r8
 801356a:	d128      	bne.n	80135be <__hexnan+0x12e>
 801356c:	2301      	movs	r3, #1
 801356e:	603b      	str	r3, [r7, #0]
 8013570:	2005      	movs	r0, #5
 8013572:	b007      	add	sp, #28
 8013574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013578:	3501      	adds	r5, #1
 801357a:	2d08      	cmp	r5, #8
 801357c:	f10b 0b01 	add.w	fp, fp, #1
 8013580:	dd06      	ble.n	8013590 <__hexnan+0x100>
 8013582:	4544      	cmp	r4, r8
 8013584:	d9c1      	bls.n	801350a <__hexnan+0x7a>
 8013586:	2300      	movs	r3, #0
 8013588:	f844 3c04 	str.w	r3, [r4, #-4]
 801358c:	2501      	movs	r5, #1
 801358e:	3c04      	subs	r4, #4
 8013590:	6822      	ldr	r2, [r4, #0]
 8013592:	f000 000f 	and.w	r0, r0, #15
 8013596:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801359a:	6020      	str	r0, [r4, #0]
 801359c:	e7b5      	b.n	801350a <__hexnan+0x7a>
 801359e:	2508      	movs	r5, #8
 80135a0:	e7b3      	b.n	801350a <__hexnan+0x7a>
 80135a2:	9b01      	ldr	r3, [sp, #4]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d0dd      	beq.n	8013564 <__hexnan+0xd4>
 80135a8:	f1c3 0320 	rsb	r3, r3, #32
 80135ac:	f04f 32ff 	mov.w	r2, #4294967295
 80135b0:	40da      	lsrs	r2, r3
 80135b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80135b6:	4013      	ands	r3, r2
 80135b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80135bc:	e7d2      	b.n	8013564 <__hexnan+0xd4>
 80135be:	3f04      	subs	r7, #4
 80135c0:	e7d0      	b.n	8013564 <__hexnan+0xd4>
 80135c2:	2004      	movs	r0, #4
 80135c4:	e7d5      	b.n	8013572 <__hexnan+0xe2>

080135c6 <__ascii_mbtowc>:
 80135c6:	b082      	sub	sp, #8
 80135c8:	b901      	cbnz	r1, 80135cc <__ascii_mbtowc+0x6>
 80135ca:	a901      	add	r1, sp, #4
 80135cc:	b142      	cbz	r2, 80135e0 <__ascii_mbtowc+0x1a>
 80135ce:	b14b      	cbz	r3, 80135e4 <__ascii_mbtowc+0x1e>
 80135d0:	7813      	ldrb	r3, [r2, #0]
 80135d2:	600b      	str	r3, [r1, #0]
 80135d4:	7812      	ldrb	r2, [r2, #0]
 80135d6:	1e10      	subs	r0, r2, #0
 80135d8:	bf18      	it	ne
 80135da:	2001      	movne	r0, #1
 80135dc:	b002      	add	sp, #8
 80135de:	4770      	bx	lr
 80135e0:	4610      	mov	r0, r2
 80135e2:	e7fb      	b.n	80135dc <__ascii_mbtowc+0x16>
 80135e4:	f06f 0001 	mvn.w	r0, #1
 80135e8:	e7f8      	b.n	80135dc <__ascii_mbtowc+0x16>
	...

080135ec <_Balloc>:
 80135ec:	b570      	push	{r4, r5, r6, lr}
 80135ee:	69c6      	ldr	r6, [r0, #28]
 80135f0:	4604      	mov	r4, r0
 80135f2:	460d      	mov	r5, r1
 80135f4:	b976      	cbnz	r6, 8013614 <_Balloc+0x28>
 80135f6:	2010      	movs	r0, #16
 80135f8:	f7fc fdb0 	bl	801015c <malloc>
 80135fc:	4602      	mov	r2, r0
 80135fe:	61e0      	str	r0, [r4, #28]
 8013600:	b920      	cbnz	r0, 801360c <_Balloc+0x20>
 8013602:	4b18      	ldr	r3, [pc, #96]	@ (8013664 <_Balloc+0x78>)
 8013604:	4818      	ldr	r0, [pc, #96]	@ (8013668 <_Balloc+0x7c>)
 8013606:	216b      	movs	r1, #107	@ 0x6b
 8013608:	f001 f94a 	bl	80148a0 <__assert_func>
 801360c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013610:	6006      	str	r6, [r0, #0]
 8013612:	60c6      	str	r6, [r0, #12]
 8013614:	69e6      	ldr	r6, [r4, #28]
 8013616:	68f3      	ldr	r3, [r6, #12]
 8013618:	b183      	cbz	r3, 801363c <_Balloc+0x50>
 801361a:	69e3      	ldr	r3, [r4, #28]
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013622:	b9b8      	cbnz	r0, 8013654 <_Balloc+0x68>
 8013624:	2101      	movs	r1, #1
 8013626:	fa01 f605 	lsl.w	r6, r1, r5
 801362a:	1d72      	adds	r2, r6, #5
 801362c:	0092      	lsls	r2, r2, #2
 801362e:	4620      	mov	r0, r4
 8013630:	f7fc fd80 	bl	8010134 <_calloc_r>
 8013634:	b160      	cbz	r0, 8013650 <_Balloc+0x64>
 8013636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801363a:	e00e      	b.n	801365a <_Balloc+0x6e>
 801363c:	2221      	movs	r2, #33	@ 0x21
 801363e:	2104      	movs	r1, #4
 8013640:	4620      	mov	r0, r4
 8013642:	f7fc fd77 	bl	8010134 <_calloc_r>
 8013646:	69e3      	ldr	r3, [r4, #28]
 8013648:	60f0      	str	r0, [r6, #12]
 801364a:	68db      	ldr	r3, [r3, #12]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d1e4      	bne.n	801361a <_Balloc+0x2e>
 8013650:	2000      	movs	r0, #0
 8013652:	bd70      	pop	{r4, r5, r6, pc}
 8013654:	6802      	ldr	r2, [r0, #0]
 8013656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801365a:	2300      	movs	r3, #0
 801365c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013660:	e7f7      	b.n	8013652 <_Balloc+0x66>
 8013662:	bf00      	nop
 8013664:	080151af 	.word	0x080151af
 8013668:	0801528f 	.word	0x0801528f

0801366c <_Bfree>:
 801366c:	b570      	push	{r4, r5, r6, lr}
 801366e:	69c6      	ldr	r6, [r0, #28]
 8013670:	4605      	mov	r5, r0
 8013672:	460c      	mov	r4, r1
 8013674:	b976      	cbnz	r6, 8013694 <_Bfree+0x28>
 8013676:	2010      	movs	r0, #16
 8013678:	f7fc fd70 	bl	801015c <malloc>
 801367c:	4602      	mov	r2, r0
 801367e:	61e8      	str	r0, [r5, #28]
 8013680:	b920      	cbnz	r0, 801368c <_Bfree+0x20>
 8013682:	4b09      	ldr	r3, [pc, #36]	@ (80136a8 <_Bfree+0x3c>)
 8013684:	4809      	ldr	r0, [pc, #36]	@ (80136ac <_Bfree+0x40>)
 8013686:	218f      	movs	r1, #143	@ 0x8f
 8013688:	f001 f90a 	bl	80148a0 <__assert_func>
 801368c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013690:	6006      	str	r6, [r0, #0]
 8013692:	60c6      	str	r6, [r0, #12]
 8013694:	b13c      	cbz	r4, 80136a6 <_Bfree+0x3a>
 8013696:	69eb      	ldr	r3, [r5, #28]
 8013698:	6862      	ldr	r2, [r4, #4]
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80136a0:	6021      	str	r1, [r4, #0]
 80136a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80136a6:	bd70      	pop	{r4, r5, r6, pc}
 80136a8:	080151af 	.word	0x080151af
 80136ac:	0801528f 	.word	0x0801528f

080136b0 <__multadd>:
 80136b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136b4:	690d      	ldr	r5, [r1, #16]
 80136b6:	4607      	mov	r7, r0
 80136b8:	460c      	mov	r4, r1
 80136ba:	461e      	mov	r6, r3
 80136bc:	f101 0c14 	add.w	ip, r1, #20
 80136c0:	2000      	movs	r0, #0
 80136c2:	f8dc 3000 	ldr.w	r3, [ip]
 80136c6:	b299      	uxth	r1, r3
 80136c8:	fb02 6101 	mla	r1, r2, r1, r6
 80136cc:	0c1e      	lsrs	r6, r3, #16
 80136ce:	0c0b      	lsrs	r3, r1, #16
 80136d0:	fb02 3306 	mla	r3, r2, r6, r3
 80136d4:	b289      	uxth	r1, r1
 80136d6:	3001      	adds	r0, #1
 80136d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80136dc:	4285      	cmp	r5, r0
 80136de:	f84c 1b04 	str.w	r1, [ip], #4
 80136e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80136e6:	dcec      	bgt.n	80136c2 <__multadd+0x12>
 80136e8:	b30e      	cbz	r6, 801372e <__multadd+0x7e>
 80136ea:	68a3      	ldr	r3, [r4, #8]
 80136ec:	42ab      	cmp	r3, r5
 80136ee:	dc19      	bgt.n	8013724 <__multadd+0x74>
 80136f0:	6861      	ldr	r1, [r4, #4]
 80136f2:	4638      	mov	r0, r7
 80136f4:	3101      	adds	r1, #1
 80136f6:	f7ff ff79 	bl	80135ec <_Balloc>
 80136fa:	4680      	mov	r8, r0
 80136fc:	b928      	cbnz	r0, 801370a <__multadd+0x5a>
 80136fe:	4602      	mov	r2, r0
 8013700:	4b0c      	ldr	r3, [pc, #48]	@ (8013734 <__multadd+0x84>)
 8013702:	480d      	ldr	r0, [pc, #52]	@ (8013738 <__multadd+0x88>)
 8013704:	21ba      	movs	r1, #186	@ 0xba
 8013706:	f001 f8cb 	bl	80148a0 <__assert_func>
 801370a:	6922      	ldr	r2, [r4, #16]
 801370c:	3202      	adds	r2, #2
 801370e:	f104 010c 	add.w	r1, r4, #12
 8013712:	0092      	lsls	r2, r2, #2
 8013714:	300c      	adds	r0, #12
 8013716:	f7fe fd68 	bl	80121ea <memcpy>
 801371a:	4621      	mov	r1, r4
 801371c:	4638      	mov	r0, r7
 801371e:	f7ff ffa5 	bl	801366c <_Bfree>
 8013722:	4644      	mov	r4, r8
 8013724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013728:	3501      	adds	r5, #1
 801372a:	615e      	str	r6, [r3, #20]
 801372c:	6125      	str	r5, [r4, #16]
 801372e:	4620      	mov	r0, r4
 8013730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013734:	0801521e 	.word	0x0801521e
 8013738:	0801528f 	.word	0x0801528f

0801373c <__s2b>:
 801373c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013740:	460c      	mov	r4, r1
 8013742:	4615      	mov	r5, r2
 8013744:	461f      	mov	r7, r3
 8013746:	2209      	movs	r2, #9
 8013748:	3308      	adds	r3, #8
 801374a:	4606      	mov	r6, r0
 801374c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013750:	2100      	movs	r1, #0
 8013752:	2201      	movs	r2, #1
 8013754:	429a      	cmp	r2, r3
 8013756:	db09      	blt.n	801376c <__s2b+0x30>
 8013758:	4630      	mov	r0, r6
 801375a:	f7ff ff47 	bl	80135ec <_Balloc>
 801375e:	b940      	cbnz	r0, 8013772 <__s2b+0x36>
 8013760:	4602      	mov	r2, r0
 8013762:	4b19      	ldr	r3, [pc, #100]	@ (80137c8 <__s2b+0x8c>)
 8013764:	4819      	ldr	r0, [pc, #100]	@ (80137cc <__s2b+0x90>)
 8013766:	21d3      	movs	r1, #211	@ 0xd3
 8013768:	f001 f89a 	bl	80148a0 <__assert_func>
 801376c:	0052      	lsls	r2, r2, #1
 801376e:	3101      	adds	r1, #1
 8013770:	e7f0      	b.n	8013754 <__s2b+0x18>
 8013772:	9b08      	ldr	r3, [sp, #32]
 8013774:	6143      	str	r3, [r0, #20]
 8013776:	2d09      	cmp	r5, #9
 8013778:	f04f 0301 	mov.w	r3, #1
 801377c:	6103      	str	r3, [r0, #16]
 801377e:	dd16      	ble.n	80137ae <__s2b+0x72>
 8013780:	f104 0909 	add.w	r9, r4, #9
 8013784:	46c8      	mov	r8, r9
 8013786:	442c      	add	r4, r5
 8013788:	f818 3b01 	ldrb.w	r3, [r8], #1
 801378c:	4601      	mov	r1, r0
 801378e:	3b30      	subs	r3, #48	@ 0x30
 8013790:	220a      	movs	r2, #10
 8013792:	4630      	mov	r0, r6
 8013794:	f7ff ff8c 	bl	80136b0 <__multadd>
 8013798:	45a0      	cmp	r8, r4
 801379a:	d1f5      	bne.n	8013788 <__s2b+0x4c>
 801379c:	f1a5 0408 	sub.w	r4, r5, #8
 80137a0:	444c      	add	r4, r9
 80137a2:	1b2d      	subs	r5, r5, r4
 80137a4:	1963      	adds	r3, r4, r5
 80137a6:	42bb      	cmp	r3, r7
 80137a8:	db04      	blt.n	80137b4 <__s2b+0x78>
 80137aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ae:	340a      	adds	r4, #10
 80137b0:	2509      	movs	r5, #9
 80137b2:	e7f6      	b.n	80137a2 <__s2b+0x66>
 80137b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80137b8:	4601      	mov	r1, r0
 80137ba:	3b30      	subs	r3, #48	@ 0x30
 80137bc:	220a      	movs	r2, #10
 80137be:	4630      	mov	r0, r6
 80137c0:	f7ff ff76 	bl	80136b0 <__multadd>
 80137c4:	e7ee      	b.n	80137a4 <__s2b+0x68>
 80137c6:	bf00      	nop
 80137c8:	0801521e 	.word	0x0801521e
 80137cc:	0801528f 	.word	0x0801528f

080137d0 <__hi0bits>:
 80137d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80137d4:	4603      	mov	r3, r0
 80137d6:	bf36      	itet	cc
 80137d8:	0403      	lslcc	r3, r0, #16
 80137da:	2000      	movcs	r0, #0
 80137dc:	2010      	movcc	r0, #16
 80137de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80137e2:	bf3c      	itt	cc
 80137e4:	021b      	lslcc	r3, r3, #8
 80137e6:	3008      	addcc	r0, #8
 80137e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80137ec:	bf3c      	itt	cc
 80137ee:	011b      	lslcc	r3, r3, #4
 80137f0:	3004      	addcc	r0, #4
 80137f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80137f6:	bf3c      	itt	cc
 80137f8:	009b      	lslcc	r3, r3, #2
 80137fa:	3002      	addcc	r0, #2
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	db05      	blt.n	801380c <__hi0bits+0x3c>
 8013800:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013804:	f100 0001 	add.w	r0, r0, #1
 8013808:	bf08      	it	eq
 801380a:	2020      	moveq	r0, #32
 801380c:	4770      	bx	lr

0801380e <__lo0bits>:
 801380e:	6803      	ldr	r3, [r0, #0]
 8013810:	4602      	mov	r2, r0
 8013812:	f013 0007 	ands.w	r0, r3, #7
 8013816:	d00b      	beq.n	8013830 <__lo0bits+0x22>
 8013818:	07d9      	lsls	r1, r3, #31
 801381a:	d421      	bmi.n	8013860 <__lo0bits+0x52>
 801381c:	0798      	lsls	r0, r3, #30
 801381e:	bf49      	itett	mi
 8013820:	085b      	lsrmi	r3, r3, #1
 8013822:	089b      	lsrpl	r3, r3, #2
 8013824:	2001      	movmi	r0, #1
 8013826:	6013      	strmi	r3, [r2, #0]
 8013828:	bf5c      	itt	pl
 801382a:	6013      	strpl	r3, [r2, #0]
 801382c:	2002      	movpl	r0, #2
 801382e:	4770      	bx	lr
 8013830:	b299      	uxth	r1, r3
 8013832:	b909      	cbnz	r1, 8013838 <__lo0bits+0x2a>
 8013834:	0c1b      	lsrs	r3, r3, #16
 8013836:	2010      	movs	r0, #16
 8013838:	b2d9      	uxtb	r1, r3
 801383a:	b909      	cbnz	r1, 8013840 <__lo0bits+0x32>
 801383c:	3008      	adds	r0, #8
 801383e:	0a1b      	lsrs	r3, r3, #8
 8013840:	0719      	lsls	r1, r3, #28
 8013842:	bf04      	itt	eq
 8013844:	091b      	lsreq	r3, r3, #4
 8013846:	3004      	addeq	r0, #4
 8013848:	0799      	lsls	r1, r3, #30
 801384a:	bf04      	itt	eq
 801384c:	089b      	lsreq	r3, r3, #2
 801384e:	3002      	addeq	r0, #2
 8013850:	07d9      	lsls	r1, r3, #31
 8013852:	d403      	bmi.n	801385c <__lo0bits+0x4e>
 8013854:	085b      	lsrs	r3, r3, #1
 8013856:	f100 0001 	add.w	r0, r0, #1
 801385a:	d003      	beq.n	8013864 <__lo0bits+0x56>
 801385c:	6013      	str	r3, [r2, #0]
 801385e:	4770      	bx	lr
 8013860:	2000      	movs	r0, #0
 8013862:	4770      	bx	lr
 8013864:	2020      	movs	r0, #32
 8013866:	4770      	bx	lr

08013868 <__i2b>:
 8013868:	b510      	push	{r4, lr}
 801386a:	460c      	mov	r4, r1
 801386c:	2101      	movs	r1, #1
 801386e:	f7ff febd 	bl	80135ec <_Balloc>
 8013872:	4602      	mov	r2, r0
 8013874:	b928      	cbnz	r0, 8013882 <__i2b+0x1a>
 8013876:	4b05      	ldr	r3, [pc, #20]	@ (801388c <__i2b+0x24>)
 8013878:	4805      	ldr	r0, [pc, #20]	@ (8013890 <__i2b+0x28>)
 801387a:	f240 1145 	movw	r1, #325	@ 0x145
 801387e:	f001 f80f 	bl	80148a0 <__assert_func>
 8013882:	2301      	movs	r3, #1
 8013884:	6144      	str	r4, [r0, #20]
 8013886:	6103      	str	r3, [r0, #16]
 8013888:	bd10      	pop	{r4, pc}
 801388a:	bf00      	nop
 801388c:	0801521e 	.word	0x0801521e
 8013890:	0801528f 	.word	0x0801528f

08013894 <__multiply>:
 8013894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013898:	4614      	mov	r4, r2
 801389a:	690a      	ldr	r2, [r1, #16]
 801389c:	6923      	ldr	r3, [r4, #16]
 801389e:	429a      	cmp	r2, r3
 80138a0:	bfa8      	it	ge
 80138a2:	4623      	movge	r3, r4
 80138a4:	460f      	mov	r7, r1
 80138a6:	bfa4      	itt	ge
 80138a8:	460c      	movge	r4, r1
 80138aa:	461f      	movge	r7, r3
 80138ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80138b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80138b4:	68a3      	ldr	r3, [r4, #8]
 80138b6:	6861      	ldr	r1, [r4, #4]
 80138b8:	eb0a 0609 	add.w	r6, sl, r9
 80138bc:	42b3      	cmp	r3, r6
 80138be:	b085      	sub	sp, #20
 80138c0:	bfb8      	it	lt
 80138c2:	3101      	addlt	r1, #1
 80138c4:	f7ff fe92 	bl	80135ec <_Balloc>
 80138c8:	b930      	cbnz	r0, 80138d8 <__multiply+0x44>
 80138ca:	4602      	mov	r2, r0
 80138cc:	4b44      	ldr	r3, [pc, #272]	@ (80139e0 <__multiply+0x14c>)
 80138ce:	4845      	ldr	r0, [pc, #276]	@ (80139e4 <__multiply+0x150>)
 80138d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80138d4:	f000 ffe4 	bl	80148a0 <__assert_func>
 80138d8:	f100 0514 	add.w	r5, r0, #20
 80138dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80138e0:	462b      	mov	r3, r5
 80138e2:	2200      	movs	r2, #0
 80138e4:	4543      	cmp	r3, r8
 80138e6:	d321      	bcc.n	801392c <__multiply+0x98>
 80138e8:	f107 0114 	add.w	r1, r7, #20
 80138ec:	f104 0214 	add.w	r2, r4, #20
 80138f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80138f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80138f8:	9302      	str	r3, [sp, #8]
 80138fa:	1b13      	subs	r3, r2, r4
 80138fc:	3b15      	subs	r3, #21
 80138fe:	f023 0303 	bic.w	r3, r3, #3
 8013902:	3304      	adds	r3, #4
 8013904:	f104 0715 	add.w	r7, r4, #21
 8013908:	42ba      	cmp	r2, r7
 801390a:	bf38      	it	cc
 801390c:	2304      	movcc	r3, #4
 801390e:	9301      	str	r3, [sp, #4]
 8013910:	9b02      	ldr	r3, [sp, #8]
 8013912:	9103      	str	r1, [sp, #12]
 8013914:	428b      	cmp	r3, r1
 8013916:	d80c      	bhi.n	8013932 <__multiply+0x9e>
 8013918:	2e00      	cmp	r6, #0
 801391a:	dd03      	ble.n	8013924 <__multiply+0x90>
 801391c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013920:	2b00      	cmp	r3, #0
 8013922:	d05b      	beq.n	80139dc <__multiply+0x148>
 8013924:	6106      	str	r6, [r0, #16]
 8013926:	b005      	add	sp, #20
 8013928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801392c:	f843 2b04 	str.w	r2, [r3], #4
 8013930:	e7d8      	b.n	80138e4 <__multiply+0x50>
 8013932:	f8b1 a000 	ldrh.w	sl, [r1]
 8013936:	f1ba 0f00 	cmp.w	sl, #0
 801393a:	d024      	beq.n	8013986 <__multiply+0xf2>
 801393c:	f104 0e14 	add.w	lr, r4, #20
 8013940:	46a9      	mov	r9, r5
 8013942:	f04f 0c00 	mov.w	ip, #0
 8013946:	f85e 7b04 	ldr.w	r7, [lr], #4
 801394a:	f8d9 3000 	ldr.w	r3, [r9]
 801394e:	fa1f fb87 	uxth.w	fp, r7
 8013952:	b29b      	uxth	r3, r3
 8013954:	fb0a 330b 	mla	r3, sl, fp, r3
 8013958:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801395c:	f8d9 7000 	ldr.w	r7, [r9]
 8013960:	4463      	add	r3, ip
 8013962:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013966:	fb0a c70b 	mla	r7, sl, fp, ip
 801396a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801396e:	b29b      	uxth	r3, r3
 8013970:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013974:	4572      	cmp	r2, lr
 8013976:	f849 3b04 	str.w	r3, [r9], #4
 801397a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801397e:	d8e2      	bhi.n	8013946 <__multiply+0xb2>
 8013980:	9b01      	ldr	r3, [sp, #4]
 8013982:	f845 c003 	str.w	ip, [r5, r3]
 8013986:	9b03      	ldr	r3, [sp, #12]
 8013988:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801398c:	3104      	adds	r1, #4
 801398e:	f1b9 0f00 	cmp.w	r9, #0
 8013992:	d021      	beq.n	80139d8 <__multiply+0x144>
 8013994:	682b      	ldr	r3, [r5, #0]
 8013996:	f104 0c14 	add.w	ip, r4, #20
 801399a:	46ae      	mov	lr, r5
 801399c:	f04f 0a00 	mov.w	sl, #0
 80139a0:	f8bc b000 	ldrh.w	fp, [ip]
 80139a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80139a8:	fb09 770b 	mla	r7, r9, fp, r7
 80139ac:	4457      	add	r7, sl
 80139ae:	b29b      	uxth	r3, r3
 80139b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80139b4:	f84e 3b04 	str.w	r3, [lr], #4
 80139b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80139bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139c0:	f8be 3000 	ldrh.w	r3, [lr]
 80139c4:	fb09 330a 	mla	r3, r9, sl, r3
 80139c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80139cc:	4562      	cmp	r2, ip
 80139ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139d2:	d8e5      	bhi.n	80139a0 <__multiply+0x10c>
 80139d4:	9f01      	ldr	r7, [sp, #4]
 80139d6:	51eb      	str	r3, [r5, r7]
 80139d8:	3504      	adds	r5, #4
 80139da:	e799      	b.n	8013910 <__multiply+0x7c>
 80139dc:	3e01      	subs	r6, #1
 80139de:	e79b      	b.n	8013918 <__multiply+0x84>
 80139e0:	0801521e 	.word	0x0801521e
 80139e4:	0801528f 	.word	0x0801528f

080139e8 <__pow5mult>:
 80139e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139ec:	4615      	mov	r5, r2
 80139ee:	f012 0203 	ands.w	r2, r2, #3
 80139f2:	4607      	mov	r7, r0
 80139f4:	460e      	mov	r6, r1
 80139f6:	d007      	beq.n	8013a08 <__pow5mult+0x20>
 80139f8:	4c25      	ldr	r4, [pc, #148]	@ (8013a90 <__pow5mult+0xa8>)
 80139fa:	3a01      	subs	r2, #1
 80139fc:	2300      	movs	r3, #0
 80139fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a02:	f7ff fe55 	bl	80136b0 <__multadd>
 8013a06:	4606      	mov	r6, r0
 8013a08:	10ad      	asrs	r5, r5, #2
 8013a0a:	d03d      	beq.n	8013a88 <__pow5mult+0xa0>
 8013a0c:	69fc      	ldr	r4, [r7, #28]
 8013a0e:	b97c      	cbnz	r4, 8013a30 <__pow5mult+0x48>
 8013a10:	2010      	movs	r0, #16
 8013a12:	f7fc fba3 	bl	801015c <malloc>
 8013a16:	4602      	mov	r2, r0
 8013a18:	61f8      	str	r0, [r7, #28]
 8013a1a:	b928      	cbnz	r0, 8013a28 <__pow5mult+0x40>
 8013a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8013a94 <__pow5mult+0xac>)
 8013a1e:	481e      	ldr	r0, [pc, #120]	@ (8013a98 <__pow5mult+0xb0>)
 8013a20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013a24:	f000 ff3c 	bl	80148a0 <__assert_func>
 8013a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a2c:	6004      	str	r4, [r0, #0]
 8013a2e:	60c4      	str	r4, [r0, #12]
 8013a30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a38:	b94c      	cbnz	r4, 8013a4e <__pow5mult+0x66>
 8013a3a:	f240 2171 	movw	r1, #625	@ 0x271
 8013a3e:	4638      	mov	r0, r7
 8013a40:	f7ff ff12 	bl	8013868 <__i2b>
 8013a44:	2300      	movs	r3, #0
 8013a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a4a:	4604      	mov	r4, r0
 8013a4c:	6003      	str	r3, [r0, #0]
 8013a4e:	f04f 0900 	mov.w	r9, #0
 8013a52:	07eb      	lsls	r3, r5, #31
 8013a54:	d50a      	bpl.n	8013a6c <__pow5mult+0x84>
 8013a56:	4631      	mov	r1, r6
 8013a58:	4622      	mov	r2, r4
 8013a5a:	4638      	mov	r0, r7
 8013a5c:	f7ff ff1a 	bl	8013894 <__multiply>
 8013a60:	4631      	mov	r1, r6
 8013a62:	4680      	mov	r8, r0
 8013a64:	4638      	mov	r0, r7
 8013a66:	f7ff fe01 	bl	801366c <_Bfree>
 8013a6a:	4646      	mov	r6, r8
 8013a6c:	106d      	asrs	r5, r5, #1
 8013a6e:	d00b      	beq.n	8013a88 <__pow5mult+0xa0>
 8013a70:	6820      	ldr	r0, [r4, #0]
 8013a72:	b938      	cbnz	r0, 8013a84 <__pow5mult+0x9c>
 8013a74:	4622      	mov	r2, r4
 8013a76:	4621      	mov	r1, r4
 8013a78:	4638      	mov	r0, r7
 8013a7a:	f7ff ff0b 	bl	8013894 <__multiply>
 8013a7e:	6020      	str	r0, [r4, #0]
 8013a80:	f8c0 9000 	str.w	r9, [r0]
 8013a84:	4604      	mov	r4, r0
 8013a86:	e7e4      	b.n	8013a52 <__pow5mult+0x6a>
 8013a88:	4630      	mov	r0, r6
 8013a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a8e:	bf00      	nop
 8013a90:	080152e8 	.word	0x080152e8
 8013a94:	080151af 	.word	0x080151af
 8013a98:	0801528f 	.word	0x0801528f

08013a9c <__lshift>:
 8013a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aa0:	460c      	mov	r4, r1
 8013aa2:	6849      	ldr	r1, [r1, #4]
 8013aa4:	6923      	ldr	r3, [r4, #16]
 8013aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013aaa:	68a3      	ldr	r3, [r4, #8]
 8013aac:	4607      	mov	r7, r0
 8013aae:	4691      	mov	r9, r2
 8013ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ab4:	f108 0601 	add.w	r6, r8, #1
 8013ab8:	42b3      	cmp	r3, r6
 8013aba:	db0b      	blt.n	8013ad4 <__lshift+0x38>
 8013abc:	4638      	mov	r0, r7
 8013abe:	f7ff fd95 	bl	80135ec <_Balloc>
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	b948      	cbnz	r0, 8013ada <__lshift+0x3e>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	4b28      	ldr	r3, [pc, #160]	@ (8013b6c <__lshift+0xd0>)
 8013aca:	4829      	ldr	r0, [pc, #164]	@ (8013b70 <__lshift+0xd4>)
 8013acc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013ad0:	f000 fee6 	bl	80148a0 <__assert_func>
 8013ad4:	3101      	adds	r1, #1
 8013ad6:	005b      	lsls	r3, r3, #1
 8013ad8:	e7ee      	b.n	8013ab8 <__lshift+0x1c>
 8013ada:	2300      	movs	r3, #0
 8013adc:	f100 0114 	add.w	r1, r0, #20
 8013ae0:	f100 0210 	add.w	r2, r0, #16
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	4553      	cmp	r3, sl
 8013ae8:	db33      	blt.n	8013b52 <__lshift+0xb6>
 8013aea:	6920      	ldr	r0, [r4, #16]
 8013aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013af0:	f104 0314 	add.w	r3, r4, #20
 8013af4:	f019 091f 	ands.w	r9, r9, #31
 8013af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b00:	d02b      	beq.n	8013b5a <__lshift+0xbe>
 8013b02:	f1c9 0e20 	rsb	lr, r9, #32
 8013b06:	468a      	mov	sl, r1
 8013b08:	2200      	movs	r2, #0
 8013b0a:	6818      	ldr	r0, [r3, #0]
 8013b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8013b10:	4310      	orrs	r0, r2
 8013b12:	f84a 0b04 	str.w	r0, [sl], #4
 8013b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b1a:	459c      	cmp	ip, r3
 8013b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013b20:	d8f3      	bhi.n	8013b0a <__lshift+0x6e>
 8013b22:	ebac 0304 	sub.w	r3, ip, r4
 8013b26:	3b15      	subs	r3, #21
 8013b28:	f023 0303 	bic.w	r3, r3, #3
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	f104 0015 	add.w	r0, r4, #21
 8013b32:	4584      	cmp	ip, r0
 8013b34:	bf38      	it	cc
 8013b36:	2304      	movcc	r3, #4
 8013b38:	50ca      	str	r2, [r1, r3]
 8013b3a:	b10a      	cbz	r2, 8013b40 <__lshift+0xa4>
 8013b3c:	f108 0602 	add.w	r6, r8, #2
 8013b40:	3e01      	subs	r6, #1
 8013b42:	4638      	mov	r0, r7
 8013b44:	612e      	str	r6, [r5, #16]
 8013b46:	4621      	mov	r1, r4
 8013b48:	f7ff fd90 	bl	801366c <_Bfree>
 8013b4c:	4628      	mov	r0, r5
 8013b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b56:	3301      	adds	r3, #1
 8013b58:	e7c5      	b.n	8013ae6 <__lshift+0x4a>
 8013b5a:	3904      	subs	r1, #4
 8013b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b60:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b64:	459c      	cmp	ip, r3
 8013b66:	d8f9      	bhi.n	8013b5c <__lshift+0xc0>
 8013b68:	e7ea      	b.n	8013b40 <__lshift+0xa4>
 8013b6a:	bf00      	nop
 8013b6c:	0801521e 	.word	0x0801521e
 8013b70:	0801528f 	.word	0x0801528f

08013b74 <__mcmp>:
 8013b74:	690a      	ldr	r2, [r1, #16]
 8013b76:	4603      	mov	r3, r0
 8013b78:	6900      	ldr	r0, [r0, #16]
 8013b7a:	1a80      	subs	r0, r0, r2
 8013b7c:	b530      	push	{r4, r5, lr}
 8013b7e:	d10e      	bne.n	8013b9e <__mcmp+0x2a>
 8013b80:	3314      	adds	r3, #20
 8013b82:	3114      	adds	r1, #20
 8013b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013b94:	4295      	cmp	r5, r2
 8013b96:	d003      	beq.n	8013ba0 <__mcmp+0x2c>
 8013b98:	d205      	bcs.n	8013ba6 <__mcmp+0x32>
 8013b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b9e:	bd30      	pop	{r4, r5, pc}
 8013ba0:	42a3      	cmp	r3, r4
 8013ba2:	d3f3      	bcc.n	8013b8c <__mcmp+0x18>
 8013ba4:	e7fb      	b.n	8013b9e <__mcmp+0x2a>
 8013ba6:	2001      	movs	r0, #1
 8013ba8:	e7f9      	b.n	8013b9e <__mcmp+0x2a>
	...

08013bac <__mdiff>:
 8013bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb0:	4689      	mov	r9, r1
 8013bb2:	4606      	mov	r6, r0
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	4648      	mov	r0, r9
 8013bb8:	4614      	mov	r4, r2
 8013bba:	f7ff ffdb 	bl	8013b74 <__mcmp>
 8013bbe:	1e05      	subs	r5, r0, #0
 8013bc0:	d112      	bne.n	8013be8 <__mdiff+0x3c>
 8013bc2:	4629      	mov	r1, r5
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	f7ff fd11 	bl	80135ec <_Balloc>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	b928      	cbnz	r0, 8013bda <__mdiff+0x2e>
 8013bce:	4b3f      	ldr	r3, [pc, #252]	@ (8013ccc <__mdiff+0x120>)
 8013bd0:	f240 2137 	movw	r1, #567	@ 0x237
 8013bd4:	483e      	ldr	r0, [pc, #248]	@ (8013cd0 <__mdiff+0x124>)
 8013bd6:	f000 fe63 	bl	80148a0 <__assert_func>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013be0:	4610      	mov	r0, r2
 8013be2:	b003      	add	sp, #12
 8013be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be8:	bfbc      	itt	lt
 8013bea:	464b      	movlt	r3, r9
 8013bec:	46a1      	movlt	r9, r4
 8013bee:	4630      	mov	r0, r6
 8013bf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013bf4:	bfba      	itte	lt
 8013bf6:	461c      	movlt	r4, r3
 8013bf8:	2501      	movlt	r5, #1
 8013bfa:	2500      	movge	r5, #0
 8013bfc:	f7ff fcf6 	bl	80135ec <_Balloc>
 8013c00:	4602      	mov	r2, r0
 8013c02:	b918      	cbnz	r0, 8013c0c <__mdiff+0x60>
 8013c04:	4b31      	ldr	r3, [pc, #196]	@ (8013ccc <__mdiff+0x120>)
 8013c06:	f240 2145 	movw	r1, #581	@ 0x245
 8013c0a:	e7e3      	b.n	8013bd4 <__mdiff+0x28>
 8013c0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013c10:	6926      	ldr	r6, [r4, #16]
 8013c12:	60c5      	str	r5, [r0, #12]
 8013c14:	f109 0310 	add.w	r3, r9, #16
 8013c18:	f109 0514 	add.w	r5, r9, #20
 8013c1c:	f104 0e14 	add.w	lr, r4, #20
 8013c20:	f100 0b14 	add.w	fp, r0, #20
 8013c24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013c28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013c2c:	9301      	str	r3, [sp, #4]
 8013c2e:	46d9      	mov	r9, fp
 8013c30:	f04f 0c00 	mov.w	ip, #0
 8013c34:	9b01      	ldr	r3, [sp, #4]
 8013c36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013c3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013c3e:	9301      	str	r3, [sp, #4]
 8013c40:	fa1f f38a 	uxth.w	r3, sl
 8013c44:	4619      	mov	r1, r3
 8013c46:	b283      	uxth	r3, r0
 8013c48:	1acb      	subs	r3, r1, r3
 8013c4a:	0c00      	lsrs	r0, r0, #16
 8013c4c:	4463      	add	r3, ip
 8013c4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013c52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013c5c:	4576      	cmp	r6, lr
 8013c5e:	f849 3b04 	str.w	r3, [r9], #4
 8013c62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013c66:	d8e5      	bhi.n	8013c34 <__mdiff+0x88>
 8013c68:	1b33      	subs	r3, r6, r4
 8013c6a:	3b15      	subs	r3, #21
 8013c6c:	f023 0303 	bic.w	r3, r3, #3
 8013c70:	3415      	adds	r4, #21
 8013c72:	3304      	adds	r3, #4
 8013c74:	42a6      	cmp	r6, r4
 8013c76:	bf38      	it	cc
 8013c78:	2304      	movcc	r3, #4
 8013c7a:	441d      	add	r5, r3
 8013c7c:	445b      	add	r3, fp
 8013c7e:	461e      	mov	r6, r3
 8013c80:	462c      	mov	r4, r5
 8013c82:	4544      	cmp	r4, r8
 8013c84:	d30e      	bcc.n	8013ca4 <__mdiff+0xf8>
 8013c86:	f108 0103 	add.w	r1, r8, #3
 8013c8a:	1b49      	subs	r1, r1, r5
 8013c8c:	f021 0103 	bic.w	r1, r1, #3
 8013c90:	3d03      	subs	r5, #3
 8013c92:	45a8      	cmp	r8, r5
 8013c94:	bf38      	it	cc
 8013c96:	2100      	movcc	r1, #0
 8013c98:	440b      	add	r3, r1
 8013c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013c9e:	b191      	cbz	r1, 8013cc6 <__mdiff+0x11a>
 8013ca0:	6117      	str	r7, [r2, #16]
 8013ca2:	e79d      	b.n	8013be0 <__mdiff+0x34>
 8013ca4:	f854 1b04 	ldr.w	r1, [r4], #4
 8013ca8:	46e6      	mov	lr, ip
 8013caa:	0c08      	lsrs	r0, r1, #16
 8013cac:	fa1c fc81 	uxtah	ip, ip, r1
 8013cb0:	4471      	add	r1, lr
 8013cb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013cb6:	b289      	uxth	r1, r1
 8013cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013cbc:	f846 1b04 	str.w	r1, [r6], #4
 8013cc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013cc4:	e7dd      	b.n	8013c82 <__mdiff+0xd6>
 8013cc6:	3f01      	subs	r7, #1
 8013cc8:	e7e7      	b.n	8013c9a <__mdiff+0xee>
 8013cca:	bf00      	nop
 8013ccc:	0801521e 	.word	0x0801521e
 8013cd0:	0801528f 	.word	0x0801528f

08013cd4 <__ulp>:
 8013cd4:	b082      	sub	sp, #8
 8013cd6:	ed8d 0b00 	vstr	d0, [sp]
 8013cda:	9a01      	ldr	r2, [sp, #4]
 8013cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8013d1c <__ulp+0x48>)
 8013cde:	4013      	ands	r3, r2
 8013ce0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	dc08      	bgt.n	8013cfa <__ulp+0x26>
 8013ce8:	425b      	negs	r3, r3
 8013cea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013cee:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013cf2:	da04      	bge.n	8013cfe <__ulp+0x2a>
 8013cf4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013cf8:	4113      	asrs	r3, r2
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	e008      	b.n	8013d10 <__ulp+0x3c>
 8013cfe:	f1a2 0314 	sub.w	r3, r2, #20
 8013d02:	2b1e      	cmp	r3, #30
 8013d04:	bfda      	itte	le
 8013d06:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013d0a:	40da      	lsrle	r2, r3
 8013d0c:	2201      	movgt	r2, #1
 8013d0e:	2300      	movs	r3, #0
 8013d10:	4619      	mov	r1, r3
 8013d12:	4610      	mov	r0, r2
 8013d14:	ec41 0b10 	vmov	d0, r0, r1
 8013d18:	b002      	add	sp, #8
 8013d1a:	4770      	bx	lr
 8013d1c:	7ff00000 	.word	0x7ff00000

08013d20 <__b2d>:
 8013d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d24:	6906      	ldr	r6, [r0, #16]
 8013d26:	f100 0814 	add.w	r8, r0, #20
 8013d2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013d2e:	1f37      	subs	r7, r6, #4
 8013d30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013d34:	4610      	mov	r0, r2
 8013d36:	f7ff fd4b 	bl	80137d0 <__hi0bits>
 8013d3a:	f1c0 0320 	rsb	r3, r0, #32
 8013d3e:	280a      	cmp	r0, #10
 8013d40:	600b      	str	r3, [r1, #0]
 8013d42:	491b      	ldr	r1, [pc, #108]	@ (8013db0 <__b2d+0x90>)
 8013d44:	dc15      	bgt.n	8013d72 <__b2d+0x52>
 8013d46:	f1c0 0c0b 	rsb	ip, r0, #11
 8013d4a:	fa22 f30c 	lsr.w	r3, r2, ip
 8013d4e:	45b8      	cmp	r8, r7
 8013d50:	ea43 0501 	orr.w	r5, r3, r1
 8013d54:	bf34      	ite	cc
 8013d56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013d5a:	2300      	movcs	r3, #0
 8013d5c:	3015      	adds	r0, #21
 8013d5e:	fa02 f000 	lsl.w	r0, r2, r0
 8013d62:	fa23 f30c 	lsr.w	r3, r3, ip
 8013d66:	4303      	orrs	r3, r0
 8013d68:	461c      	mov	r4, r3
 8013d6a:	ec45 4b10 	vmov	d0, r4, r5
 8013d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d72:	45b8      	cmp	r8, r7
 8013d74:	bf3a      	itte	cc
 8013d76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013d7a:	f1a6 0708 	subcc.w	r7, r6, #8
 8013d7e:	2300      	movcs	r3, #0
 8013d80:	380b      	subs	r0, #11
 8013d82:	d012      	beq.n	8013daa <__b2d+0x8a>
 8013d84:	f1c0 0120 	rsb	r1, r0, #32
 8013d88:	fa23 f401 	lsr.w	r4, r3, r1
 8013d8c:	4082      	lsls	r2, r0
 8013d8e:	4322      	orrs	r2, r4
 8013d90:	4547      	cmp	r7, r8
 8013d92:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013d96:	bf8c      	ite	hi
 8013d98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013d9c:	2200      	movls	r2, #0
 8013d9e:	4083      	lsls	r3, r0
 8013da0:	40ca      	lsrs	r2, r1
 8013da2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013da6:	4313      	orrs	r3, r2
 8013da8:	e7de      	b.n	8013d68 <__b2d+0x48>
 8013daa:	ea42 0501 	orr.w	r5, r2, r1
 8013dae:	e7db      	b.n	8013d68 <__b2d+0x48>
 8013db0:	3ff00000 	.word	0x3ff00000

08013db4 <__d2b>:
 8013db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013db8:	460f      	mov	r7, r1
 8013dba:	2101      	movs	r1, #1
 8013dbc:	ec59 8b10 	vmov	r8, r9, d0
 8013dc0:	4616      	mov	r6, r2
 8013dc2:	f7ff fc13 	bl	80135ec <_Balloc>
 8013dc6:	4604      	mov	r4, r0
 8013dc8:	b930      	cbnz	r0, 8013dd8 <__d2b+0x24>
 8013dca:	4602      	mov	r2, r0
 8013dcc:	4b23      	ldr	r3, [pc, #140]	@ (8013e5c <__d2b+0xa8>)
 8013dce:	4824      	ldr	r0, [pc, #144]	@ (8013e60 <__d2b+0xac>)
 8013dd0:	f240 310f 	movw	r1, #783	@ 0x30f
 8013dd4:	f000 fd64 	bl	80148a0 <__assert_func>
 8013dd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013ddc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013de0:	b10d      	cbz	r5, 8013de6 <__d2b+0x32>
 8013de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013de6:	9301      	str	r3, [sp, #4]
 8013de8:	f1b8 0300 	subs.w	r3, r8, #0
 8013dec:	d023      	beq.n	8013e36 <__d2b+0x82>
 8013dee:	4668      	mov	r0, sp
 8013df0:	9300      	str	r3, [sp, #0]
 8013df2:	f7ff fd0c 	bl	801380e <__lo0bits>
 8013df6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013dfa:	b1d0      	cbz	r0, 8013e32 <__d2b+0x7e>
 8013dfc:	f1c0 0320 	rsb	r3, r0, #32
 8013e00:	fa02 f303 	lsl.w	r3, r2, r3
 8013e04:	430b      	orrs	r3, r1
 8013e06:	40c2      	lsrs	r2, r0
 8013e08:	6163      	str	r3, [r4, #20]
 8013e0a:	9201      	str	r2, [sp, #4]
 8013e0c:	9b01      	ldr	r3, [sp, #4]
 8013e0e:	61a3      	str	r3, [r4, #24]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	bf0c      	ite	eq
 8013e14:	2201      	moveq	r2, #1
 8013e16:	2202      	movne	r2, #2
 8013e18:	6122      	str	r2, [r4, #16]
 8013e1a:	b1a5      	cbz	r5, 8013e46 <__d2b+0x92>
 8013e1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013e20:	4405      	add	r5, r0
 8013e22:	603d      	str	r5, [r7, #0]
 8013e24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013e28:	6030      	str	r0, [r6, #0]
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	b003      	add	sp, #12
 8013e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e32:	6161      	str	r1, [r4, #20]
 8013e34:	e7ea      	b.n	8013e0c <__d2b+0x58>
 8013e36:	a801      	add	r0, sp, #4
 8013e38:	f7ff fce9 	bl	801380e <__lo0bits>
 8013e3c:	9b01      	ldr	r3, [sp, #4]
 8013e3e:	6163      	str	r3, [r4, #20]
 8013e40:	3020      	adds	r0, #32
 8013e42:	2201      	movs	r2, #1
 8013e44:	e7e8      	b.n	8013e18 <__d2b+0x64>
 8013e46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013e4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013e4e:	6038      	str	r0, [r7, #0]
 8013e50:	6918      	ldr	r0, [r3, #16]
 8013e52:	f7ff fcbd 	bl	80137d0 <__hi0bits>
 8013e56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013e5a:	e7e5      	b.n	8013e28 <__d2b+0x74>
 8013e5c:	0801521e 	.word	0x0801521e
 8013e60:	0801528f 	.word	0x0801528f

08013e64 <__ratio>:
 8013e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e68:	b085      	sub	sp, #20
 8013e6a:	e9cd 1000 	strd	r1, r0, [sp]
 8013e6e:	a902      	add	r1, sp, #8
 8013e70:	f7ff ff56 	bl	8013d20 <__b2d>
 8013e74:	9800      	ldr	r0, [sp, #0]
 8013e76:	a903      	add	r1, sp, #12
 8013e78:	ec55 4b10 	vmov	r4, r5, d0
 8013e7c:	f7ff ff50 	bl	8013d20 <__b2d>
 8013e80:	9b01      	ldr	r3, [sp, #4]
 8013e82:	6919      	ldr	r1, [r3, #16]
 8013e84:	9b00      	ldr	r3, [sp, #0]
 8013e86:	691b      	ldr	r3, [r3, #16]
 8013e88:	1ac9      	subs	r1, r1, r3
 8013e8a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013e8e:	1a9b      	subs	r3, r3, r2
 8013e90:	ec5b ab10 	vmov	sl, fp, d0
 8013e94:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	bfce      	itee	gt
 8013e9c:	462a      	movgt	r2, r5
 8013e9e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013ea2:	465a      	movle	r2, fp
 8013ea4:	462f      	mov	r7, r5
 8013ea6:	46d9      	mov	r9, fp
 8013ea8:	bfcc      	ite	gt
 8013eaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013eae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8013eb2:	464b      	mov	r3, r9
 8013eb4:	4652      	mov	r2, sl
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	4639      	mov	r1, r7
 8013eba:	f7ec fcaf 	bl	800081c <__aeabi_ddiv>
 8013ebe:	ec41 0b10 	vmov	d0, r0, r1
 8013ec2:	b005      	add	sp, #20
 8013ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ec8 <__copybits>:
 8013ec8:	3901      	subs	r1, #1
 8013eca:	b570      	push	{r4, r5, r6, lr}
 8013ecc:	1149      	asrs	r1, r1, #5
 8013ece:	6914      	ldr	r4, [r2, #16]
 8013ed0:	3101      	adds	r1, #1
 8013ed2:	f102 0314 	add.w	r3, r2, #20
 8013ed6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013eda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013ede:	1f05      	subs	r5, r0, #4
 8013ee0:	42a3      	cmp	r3, r4
 8013ee2:	d30c      	bcc.n	8013efe <__copybits+0x36>
 8013ee4:	1aa3      	subs	r3, r4, r2
 8013ee6:	3b11      	subs	r3, #17
 8013ee8:	f023 0303 	bic.w	r3, r3, #3
 8013eec:	3211      	adds	r2, #17
 8013eee:	42a2      	cmp	r2, r4
 8013ef0:	bf88      	it	hi
 8013ef2:	2300      	movhi	r3, #0
 8013ef4:	4418      	add	r0, r3
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	4288      	cmp	r0, r1
 8013efa:	d305      	bcc.n	8013f08 <__copybits+0x40>
 8013efc:	bd70      	pop	{r4, r5, r6, pc}
 8013efe:	f853 6b04 	ldr.w	r6, [r3], #4
 8013f02:	f845 6f04 	str.w	r6, [r5, #4]!
 8013f06:	e7eb      	b.n	8013ee0 <__copybits+0x18>
 8013f08:	f840 3b04 	str.w	r3, [r0], #4
 8013f0c:	e7f4      	b.n	8013ef8 <__copybits+0x30>

08013f0e <__any_on>:
 8013f0e:	f100 0214 	add.w	r2, r0, #20
 8013f12:	6900      	ldr	r0, [r0, #16]
 8013f14:	114b      	asrs	r3, r1, #5
 8013f16:	4298      	cmp	r0, r3
 8013f18:	b510      	push	{r4, lr}
 8013f1a:	db11      	blt.n	8013f40 <__any_on+0x32>
 8013f1c:	dd0a      	ble.n	8013f34 <__any_on+0x26>
 8013f1e:	f011 011f 	ands.w	r1, r1, #31
 8013f22:	d007      	beq.n	8013f34 <__any_on+0x26>
 8013f24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013f28:	fa24 f001 	lsr.w	r0, r4, r1
 8013f2c:	fa00 f101 	lsl.w	r1, r0, r1
 8013f30:	428c      	cmp	r4, r1
 8013f32:	d10b      	bne.n	8013f4c <__any_on+0x3e>
 8013f34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f38:	4293      	cmp	r3, r2
 8013f3a:	d803      	bhi.n	8013f44 <__any_on+0x36>
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	bd10      	pop	{r4, pc}
 8013f40:	4603      	mov	r3, r0
 8013f42:	e7f7      	b.n	8013f34 <__any_on+0x26>
 8013f44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013f48:	2900      	cmp	r1, #0
 8013f4a:	d0f5      	beq.n	8013f38 <__any_on+0x2a>
 8013f4c:	2001      	movs	r0, #1
 8013f4e:	e7f6      	b.n	8013f3e <__any_on+0x30>

08013f50 <_malloc_usable_size_r>:
 8013f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f54:	1f18      	subs	r0, r3, #4
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	bfbc      	itt	lt
 8013f5a:	580b      	ldrlt	r3, [r1, r0]
 8013f5c:	18c0      	addlt	r0, r0, r3
 8013f5e:	4770      	bx	lr

08013f60 <_strtol_l.constprop.0>:
 8013f60:	2b24      	cmp	r3, #36	@ 0x24
 8013f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f66:	4686      	mov	lr, r0
 8013f68:	4690      	mov	r8, r2
 8013f6a:	d801      	bhi.n	8013f70 <_strtol_l.constprop.0+0x10>
 8013f6c:	2b01      	cmp	r3, #1
 8013f6e:	d106      	bne.n	8013f7e <_strtol_l.constprop.0+0x1e>
 8013f70:	f7fe f90e 	bl	8012190 <__errno>
 8013f74:	2316      	movs	r3, #22
 8013f76:	6003      	str	r3, [r0, #0]
 8013f78:	2000      	movs	r0, #0
 8013f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f7e:	4834      	ldr	r0, [pc, #208]	@ (8014050 <_strtol_l.constprop.0+0xf0>)
 8013f80:	460d      	mov	r5, r1
 8013f82:	462a      	mov	r2, r5
 8013f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f88:	5d06      	ldrb	r6, [r0, r4]
 8013f8a:	f016 0608 	ands.w	r6, r6, #8
 8013f8e:	d1f8      	bne.n	8013f82 <_strtol_l.constprop.0+0x22>
 8013f90:	2c2d      	cmp	r4, #45	@ 0x2d
 8013f92:	d12d      	bne.n	8013ff0 <_strtol_l.constprop.0+0x90>
 8013f94:	782c      	ldrb	r4, [r5, #0]
 8013f96:	2601      	movs	r6, #1
 8013f98:	1c95      	adds	r5, r2, #2
 8013f9a:	f033 0210 	bics.w	r2, r3, #16
 8013f9e:	d109      	bne.n	8013fb4 <_strtol_l.constprop.0+0x54>
 8013fa0:	2c30      	cmp	r4, #48	@ 0x30
 8013fa2:	d12a      	bne.n	8013ffa <_strtol_l.constprop.0+0x9a>
 8013fa4:	782a      	ldrb	r2, [r5, #0]
 8013fa6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013faa:	2a58      	cmp	r2, #88	@ 0x58
 8013fac:	d125      	bne.n	8013ffa <_strtol_l.constprop.0+0x9a>
 8013fae:	786c      	ldrb	r4, [r5, #1]
 8013fb0:	2310      	movs	r3, #16
 8013fb2:	3502      	adds	r5, #2
 8013fb4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013fb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	fbbc f9f3 	udiv	r9, ip, r3
 8013fc2:	4610      	mov	r0, r2
 8013fc4:	fb03 ca19 	mls	sl, r3, r9, ip
 8013fc8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013fcc:	2f09      	cmp	r7, #9
 8013fce:	d81b      	bhi.n	8014008 <_strtol_l.constprop.0+0xa8>
 8013fd0:	463c      	mov	r4, r7
 8013fd2:	42a3      	cmp	r3, r4
 8013fd4:	dd27      	ble.n	8014026 <_strtol_l.constprop.0+0xc6>
 8013fd6:	1c57      	adds	r7, r2, #1
 8013fd8:	d007      	beq.n	8013fea <_strtol_l.constprop.0+0x8a>
 8013fda:	4581      	cmp	r9, r0
 8013fdc:	d320      	bcc.n	8014020 <_strtol_l.constprop.0+0xc0>
 8013fde:	d101      	bne.n	8013fe4 <_strtol_l.constprop.0+0x84>
 8013fe0:	45a2      	cmp	sl, r4
 8013fe2:	db1d      	blt.n	8014020 <_strtol_l.constprop.0+0xc0>
 8013fe4:	fb00 4003 	mla	r0, r0, r3, r4
 8013fe8:	2201      	movs	r2, #1
 8013fea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013fee:	e7eb      	b.n	8013fc8 <_strtol_l.constprop.0+0x68>
 8013ff0:	2c2b      	cmp	r4, #43	@ 0x2b
 8013ff2:	bf04      	itt	eq
 8013ff4:	782c      	ldrbeq	r4, [r5, #0]
 8013ff6:	1c95      	addeq	r5, r2, #2
 8013ff8:	e7cf      	b.n	8013f9a <_strtol_l.constprop.0+0x3a>
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d1da      	bne.n	8013fb4 <_strtol_l.constprop.0+0x54>
 8013ffe:	2c30      	cmp	r4, #48	@ 0x30
 8014000:	bf0c      	ite	eq
 8014002:	2308      	moveq	r3, #8
 8014004:	230a      	movne	r3, #10
 8014006:	e7d5      	b.n	8013fb4 <_strtol_l.constprop.0+0x54>
 8014008:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801400c:	2f19      	cmp	r7, #25
 801400e:	d801      	bhi.n	8014014 <_strtol_l.constprop.0+0xb4>
 8014010:	3c37      	subs	r4, #55	@ 0x37
 8014012:	e7de      	b.n	8013fd2 <_strtol_l.constprop.0+0x72>
 8014014:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014018:	2f19      	cmp	r7, #25
 801401a:	d804      	bhi.n	8014026 <_strtol_l.constprop.0+0xc6>
 801401c:	3c57      	subs	r4, #87	@ 0x57
 801401e:	e7d8      	b.n	8013fd2 <_strtol_l.constprop.0+0x72>
 8014020:	f04f 32ff 	mov.w	r2, #4294967295
 8014024:	e7e1      	b.n	8013fea <_strtol_l.constprop.0+0x8a>
 8014026:	1c53      	adds	r3, r2, #1
 8014028:	d108      	bne.n	801403c <_strtol_l.constprop.0+0xdc>
 801402a:	2322      	movs	r3, #34	@ 0x22
 801402c:	f8ce 3000 	str.w	r3, [lr]
 8014030:	4660      	mov	r0, ip
 8014032:	f1b8 0f00 	cmp.w	r8, #0
 8014036:	d0a0      	beq.n	8013f7a <_strtol_l.constprop.0+0x1a>
 8014038:	1e69      	subs	r1, r5, #1
 801403a:	e006      	b.n	801404a <_strtol_l.constprop.0+0xea>
 801403c:	b106      	cbz	r6, 8014040 <_strtol_l.constprop.0+0xe0>
 801403e:	4240      	negs	r0, r0
 8014040:	f1b8 0f00 	cmp.w	r8, #0
 8014044:	d099      	beq.n	8013f7a <_strtol_l.constprop.0+0x1a>
 8014046:	2a00      	cmp	r2, #0
 8014048:	d1f6      	bne.n	8014038 <_strtol_l.constprop.0+0xd8>
 801404a:	f8c8 1000 	str.w	r1, [r8]
 801404e:	e794      	b.n	8013f7a <_strtol_l.constprop.0+0x1a>
 8014050:	08015061 	.word	0x08015061

08014054 <_strtol_r>:
 8014054:	f7ff bf84 	b.w	8013f60 <_strtol_l.constprop.0>

08014058 <__ascii_wctomb>:
 8014058:	4603      	mov	r3, r0
 801405a:	4608      	mov	r0, r1
 801405c:	b141      	cbz	r1, 8014070 <__ascii_wctomb+0x18>
 801405e:	2aff      	cmp	r2, #255	@ 0xff
 8014060:	d904      	bls.n	801406c <__ascii_wctomb+0x14>
 8014062:	228a      	movs	r2, #138	@ 0x8a
 8014064:	601a      	str	r2, [r3, #0]
 8014066:	f04f 30ff 	mov.w	r0, #4294967295
 801406a:	4770      	bx	lr
 801406c:	700a      	strb	r2, [r1, #0]
 801406e:	2001      	movs	r0, #1
 8014070:	4770      	bx	lr

08014072 <__ssputs_r>:
 8014072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014076:	688e      	ldr	r6, [r1, #8]
 8014078:	461f      	mov	r7, r3
 801407a:	42be      	cmp	r6, r7
 801407c:	680b      	ldr	r3, [r1, #0]
 801407e:	4682      	mov	sl, r0
 8014080:	460c      	mov	r4, r1
 8014082:	4690      	mov	r8, r2
 8014084:	d82d      	bhi.n	80140e2 <__ssputs_r+0x70>
 8014086:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801408a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801408e:	d026      	beq.n	80140de <__ssputs_r+0x6c>
 8014090:	6965      	ldr	r5, [r4, #20]
 8014092:	6909      	ldr	r1, [r1, #16]
 8014094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014098:	eba3 0901 	sub.w	r9, r3, r1
 801409c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80140a0:	1c7b      	adds	r3, r7, #1
 80140a2:	444b      	add	r3, r9
 80140a4:	106d      	asrs	r5, r5, #1
 80140a6:	429d      	cmp	r5, r3
 80140a8:	bf38      	it	cc
 80140aa:	461d      	movcc	r5, r3
 80140ac:	0553      	lsls	r3, r2, #21
 80140ae:	d527      	bpl.n	8014100 <__ssputs_r+0x8e>
 80140b0:	4629      	mov	r1, r5
 80140b2:	f7fc f885 	bl	80101c0 <_malloc_r>
 80140b6:	4606      	mov	r6, r0
 80140b8:	b360      	cbz	r0, 8014114 <__ssputs_r+0xa2>
 80140ba:	6921      	ldr	r1, [r4, #16]
 80140bc:	464a      	mov	r2, r9
 80140be:	f7fe f894 	bl	80121ea <memcpy>
 80140c2:	89a3      	ldrh	r3, [r4, #12]
 80140c4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80140c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80140cc:	81a3      	strh	r3, [r4, #12]
 80140ce:	6126      	str	r6, [r4, #16]
 80140d0:	6165      	str	r5, [r4, #20]
 80140d2:	444e      	add	r6, r9
 80140d4:	eba5 0509 	sub.w	r5, r5, r9
 80140d8:	6026      	str	r6, [r4, #0]
 80140da:	60a5      	str	r5, [r4, #8]
 80140dc:	463e      	mov	r6, r7
 80140de:	42be      	cmp	r6, r7
 80140e0:	d900      	bls.n	80140e4 <__ssputs_r+0x72>
 80140e2:	463e      	mov	r6, r7
 80140e4:	6820      	ldr	r0, [r4, #0]
 80140e6:	4632      	mov	r2, r6
 80140e8:	4641      	mov	r1, r8
 80140ea:	f000 fb9d 	bl	8014828 <memmove>
 80140ee:	68a3      	ldr	r3, [r4, #8]
 80140f0:	1b9b      	subs	r3, r3, r6
 80140f2:	60a3      	str	r3, [r4, #8]
 80140f4:	6823      	ldr	r3, [r4, #0]
 80140f6:	4433      	add	r3, r6
 80140f8:	6023      	str	r3, [r4, #0]
 80140fa:	2000      	movs	r0, #0
 80140fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014100:	462a      	mov	r2, r5
 8014102:	f7fc f8f1 	bl	80102e8 <_realloc_r>
 8014106:	4606      	mov	r6, r0
 8014108:	2800      	cmp	r0, #0
 801410a:	d1e0      	bne.n	80140ce <__ssputs_r+0x5c>
 801410c:	6921      	ldr	r1, [r4, #16]
 801410e:	4650      	mov	r0, sl
 8014110:	f7fe fed6 	bl	8012ec0 <_free_r>
 8014114:	230c      	movs	r3, #12
 8014116:	f8ca 3000 	str.w	r3, [sl]
 801411a:	89a3      	ldrh	r3, [r4, #12]
 801411c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014120:	81a3      	strh	r3, [r4, #12]
 8014122:	f04f 30ff 	mov.w	r0, #4294967295
 8014126:	e7e9      	b.n	80140fc <__ssputs_r+0x8a>

08014128 <_svfiprintf_r>:
 8014128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801412c:	4698      	mov	r8, r3
 801412e:	898b      	ldrh	r3, [r1, #12]
 8014130:	061b      	lsls	r3, r3, #24
 8014132:	b09d      	sub	sp, #116	@ 0x74
 8014134:	4607      	mov	r7, r0
 8014136:	460d      	mov	r5, r1
 8014138:	4614      	mov	r4, r2
 801413a:	d510      	bpl.n	801415e <_svfiprintf_r+0x36>
 801413c:	690b      	ldr	r3, [r1, #16]
 801413e:	b973      	cbnz	r3, 801415e <_svfiprintf_r+0x36>
 8014140:	2140      	movs	r1, #64	@ 0x40
 8014142:	f7fc f83d 	bl	80101c0 <_malloc_r>
 8014146:	6028      	str	r0, [r5, #0]
 8014148:	6128      	str	r0, [r5, #16]
 801414a:	b930      	cbnz	r0, 801415a <_svfiprintf_r+0x32>
 801414c:	230c      	movs	r3, #12
 801414e:	603b      	str	r3, [r7, #0]
 8014150:	f04f 30ff 	mov.w	r0, #4294967295
 8014154:	b01d      	add	sp, #116	@ 0x74
 8014156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801415a:	2340      	movs	r3, #64	@ 0x40
 801415c:	616b      	str	r3, [r5, #20]
 801415e:	2300      	movs	r3, #0
 8014160:	9309      	str	r3, [sp, #36]	@ 0x24
 8014162:	2320      	movs	r3, #32
 8014164:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014168:	f8cd 800c 	str.w	r8, [sp, #12]
 801416c:	2330      	movs	r3, #48	@ 0x30
 801416e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801430c <_svfiprintf_r+0x1e4>
 8014172:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014176:	f04f 0901 	mov.w	r9, #1
 801417a:	4623      	mov	r3, r4
 801417c:	469a      	mov	sl, r3
 801417e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014182:	b10a      	cbz	r2, 8014188 <_svfiprintf_r+0x60>
 8014184:	2a25      	cmp	r2, #37	@ 0x25
 8014186:	d1f9      	bne.n	801417c <_svfiprintf_r+0x54>
 8014188:	ebba 0b04 	subs.w	fp, sl, r4
 801418c:	d00b      	beq.n	80141a6 <_svfiprintf_r+0x7e>
 801418e:	465b      	mov	r3, fp
 8014190:	4622      	mov	r2, r4
 8014192:	4629      	mov	r1, r5
 8014194:	4638      	mov	r0, r7
 8014196:	f7ff ff6c 	bl	8014072 <__ssputs_r>
 801419a:	3001      	adds	r0, #1
 801419c:	f000 80a7 	beq.w	80142ee <_svfiprintf_r+0x1c6>
 80141a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80141a2:	445a      	add	r2, fp
 80141a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80141a6:	f89a 3000 	ldrb.w	r3, [sl]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	f000 809f 	beq.w	80142ee <_svfiprintf_r+0x1c6>
 80141b0:	2300      	movs	r3, #0
 80141b2:	f04f 32ff 	mov.w	r2, #4294967295
 80141b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141ba:	f10a 0a01 	add.w	sl, sl, #1
 80141be:	9304      	str	r3, [sp, #16]
 80141c0:	9307      	str	r3, [sp, #28]
 80141c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80141c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80141c8:	4654      	mov	r4, sl
 80141ca:	2205      	movs	r2, #5
 80141cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141d0:	484e      	ldr	r0, [pc, #312]	@ (801430c <_svfiprintf_r+0x1e4>)
 80141d2:	f7eb ffe5 	bl	80001a0 <memchr>
 80141d6:	9a04      	ldr	r2, [sp, #16]
 80141d8:	b9d8      	cbnz	r0, 8014212 <_svfiprintf_r+0xea>
 80141da:	06d0      	lsls	r0, r2, #27
 80141dc:	bf44      	itt	mi
 80141de:	2320      	movmi	r3, #32
 80141e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141e4:	0711      	lsls	r1, r2, #28
 80141e6:	bf44      	itt	mi
 80141e8:	232b      	movmi	r3, #43	@ 0x2b
 80141ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141ee:	f89a 3000 	ldrb.w	r3, [sl]
 80141f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80141f4:	d015      	beq.n	8014222 <_svfiprintf_r+0xfa>
 80141f6:	9a07      	ldr	r2, [sp, #28]
 80141f8:	4654      	mov	r4, sl
 80141fa:	2000      	movs	r0, #0
 80141fc:	f04f 0c0a 	mov.w	ip, #10
 8014200:	4621      	mov	r1, r4
 8014202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014206:	3b30      	subs	r3, #48	@ 0x30
 8014208:	2b09      	cmp	r3, #9
 801420a:	d94b      	bls.n	80142a4 <_svfiprintf_r+0x17c>
 801420c:	b1b0      	cbz	r0, 801423c <_svfiprintf_r+0x114>
 801420e:	9207      	str	r2, [sp, #28]
 8014210:	e014      	b.n	801423c <_svfiprintf_r+0x114>
 8014212:	eba0 0308 	sub.w	r3, r0, r8
 8014216:	fa09 f303 	lsl.w	r3, r9, r3
 801421a:	4313      	orrs	r3, r2
 801421c:	9304      	str	r3, [sp, #16]
 801421e:	46a2      	mov	sl, r4
 8014220:	e7d2      	b.n	80141c8 <_svfiprintf_r+0xa0>
 8014222:	9b03      	ldr	r3, [sp, #12]
 8014224:	1d19      	adds	r1, r3, #4
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	9103      	str	r1, [sp, #12]
 801422a:	2b00      	cmp	r3, #0
 801422c:	bfbb      	ittet	lt
 801422e:	425b      	neglt	r3, r3
 8014230:	f042 0202 	orrlt.w	r2, r2, #2
 8014234:	9307      	strge	r3, [sp, #28]
 8014236:	9307      	strlt	r3, [sp, #28]
 8014238:	bfb8      	it	lt
 801423a:	9204      	strlt	r2, [sp, #16]
 801423c:	7823      	ldrb	r3, [r4, #0]
 801423e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014240:	d10a      	bne.n	8014258 <_svfiprintf_r+0x130>
 8014242:	7863      	ldrb	r3, [r4, #1]
 8014244:	2b2a      	cmp	r3, #42	@ 0x2a
 8014246:	d132      	bne.n	80142ae <_svfiprintf_r+0x186>
 8014248:	9b03      	ldr	r3, [sp, #12]
 801424a:	1d1a      	adds	r2, r3, #4
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	9203      	str	r2, [sp, #12]
 8014250:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014254:	3402      	adds	r4, #2
 8014256:	9305      	str	r3, [sp, #20]
 8014258:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801431c <_svfiprintf_r+0x1f4>
 801425c:	7821      	ldrb	r1, [r4, #0]
 801425e:	2203      	movs	r2, #3
 8014260:	4650      	mov	r0, sl
 8014262:	f7eb ff9d 	bl	80001a0 <memchr>
 8014266:	b138      	cbz	r0, 8014278 <_svfiprintf_r+0x150>
 8014268:	9b04      	ldr	r3, [sp, #16]
 801426a:	eba0 000a 	sub.w	r0, r0, sl
 801426e:	2240      	movs	r2, #64	@ 0x40
 8014270:	4082      	lsls	r2, r0
 8014272:	4313      	orrs	r3, r2
 8014274:	3401      	adds	r4, #1
 8014276:	9304      	str	r3, [sp, #16]
 8014278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801427c:	4824      	ldr	r0, [pc, #144]	@ (8014310 <_svfiprintf_r+0x1e8>)
 801427e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014282:	2206      	movs	r2, #6
 8014284:	f7eb ff8c 	bl	80001a0 <memchr>
 8014288:	2800      	cmp	r0, #0
 801428a:	d036      	beq.n	80142fa <_svfiprintf_r+0x1d2>
 801428c:	4b21      	ldr	r3, [pc, #132]	@ (8014314 <_svfiprintf_r+0x1ec>)
 801428e:	bb1b      	cbnz	r3, 80142d8 <_svfiprintf_r+0x1b0>
 8014290:	9b03      	ldr	r3, [sp, #12]
 8014292:	3307      	adds	r3, #7
 8014294:	f023 0307 	bic.w	r3, r3, #7
 8014298:	3308      	adds	r3, #8
 801429a:	9303      	str	r3, [sp, #12]
 801429c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801429e:	4433      	add	r3, r6
 80142a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80142a2:	e76a      	b.n	801417a <_svfiprintf_r+0x52>
 80142a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80142a8:	460c      	mov	r4, r1
 80142aa:	2001      	movs	r0, #1
 80142ac:	e7a8      	b.n	8014200 <_svfiprintf_r+0xd8>
 80142ae:	2300      	movs	r3, #0
 80142b0:	3401      	adds	r4, #1
 80142b2:	9305      	str	r3, [sp, #20]
 80142b4:	4619      	mov	r1, r3
 80142b6:	f04f 0c0a 	mov.w	ip, #10
 80142ba:	4620      	mov	r0, r4
 80142bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142c0:	3a30      	subs	r2, #48	@ 0x30
 80142c2:	2a09      	cmp	r2, #9
 80142c4:	d903      	bls.n	80142ce <_svfiprintf_r+0x1a6>
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d0c6      	beq.n	8014258 <_svfiprintf_r+0x130>
 80142ca:	9105      	str	r1, [sp, #20]
 80142cc:	e7c4      	b.n	8014258 <_svfiprintf_r+0x130>
 80142ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80142d2:	4604      	mov	r4, r0
 80142d4:	2301      	movs	r3, #1
 80142d6:	e7f0      	b.n	80142ba <_svfiprintf_r+0x192>
 80142d8:	ab03      	add	r3, sp, #12
 80142da:	9300      	str	r3, [sp, #0]
 80142dc:	462a      	mov	r2, r5
 80142de:	4b0e      	ldr	r3, [pc, #56]	@ (8014318 <_svfiprintf_r+0x1f0>)
 80142e0:	a904      	add	r1, sp, #16
 80142e2:	4638      	mov	r0, r7
 80142e4:	f7fc fee2 	bl	80110ac <_printf_float>
 80142e8:	1c42      	adds	r2, r0, #1
 80142ea:	4606      	mov	r6, r0
 80142ec:	d1d6      	bne.n	801429c <_svfiprintf_r+0x174>
 80142ee:	89ab      	ldrh	r3, [r5, #12]
 80142f0:	065b      	lsls	r3, r3, #25
 80142f2:	f53f af2d 	bmi.w	8014150 <_svfiprintf_r+0x28>
 80142f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80142f8:	e72c      	b.n	8014154 <_svfiprintf_r+0x2c>
 80142fa:	ab03      	add	r3, sp, #12
 80142fc:	9300      	str	r3, [sp, #0]
 80142fe:	462a      	mov	r2, r5
 8014300:	4b05      	ldr	r3, [pc, #20]	@ (8014318 <_svfiprintf_r+0x1f0>)
 8014302:	a904      	add	r1, sp, #16
 8014304:	4638      	mov	r0, r7
 8014306:	f7fd f969 	bl	80115dc <_printf_i>
 801430a:	e7ed      	b.n	80142e8 <_svfiprintf_r+0x1c0>
 801430c:	080153e8 	.word	0x080153e8
 8014310:	080153f2 	.word	0x080153f2
 8014314:	080110ad 	.word	0x080110ad
 8014318:	08014073 	.word	0x08014073
 801431c:	080153ee 	.word	0x080153ee

08014320 <__sfputc_r>:
 8014320:	6893      	ldr	r3, [r2, #8]
 8014322:	3b01      	subs	r3, #1
 8014324:	2b00      	cmp	r3, #0
 8014326:	b410      	push	{r4}
 8014328:	6093      	str	r3, [r2, #8]
 801432a:	da08      	bge.n	801433e <__sfputc_r+0x1e>
 801432c:	6994      	ldr	r4, [r2, #24]
 801432e:	42a3      	cmp	r3, r4
 8014330:	db01      	blt.n	8014336 <__sfputc_r+0x16>
 8014332:	290a      	cmp	r1, #10
 8014334:	d103      	bne.n	801433e <__sfputc_r+0x1e>
 8014336:	f85d 4b04 	ldr.w	r4, [sp], #4
 801433a:	f7fd be20 	b.w	8011f7e <__swbuf_r>
 801433e:	6813      	ldr	r3, [r2, #0]
 8014340:	1c58      	adds	r0, r3, #1
 8014342:	6010      	str	r0, [r2, #0]
 8014344:	7019      	strb	r1, [r3, #0]
 8014346:	4608      	mov	r0, r1
 8014348:	f85d 4b04 	ldr.w	r4, [sp], #4
 801434c:	4770      	bx	lr

0801434e <__sfputs_r>:
 801434e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014350:	4606      	mov	r6, r0
 8014352:	460f      	mov	r7, r1
 8014354:	4614      	mov	r4, r2
 8014356:	18d5      	adds	r5, r2, r3
 8014358:	42ac      	cmp	r4, r5
 801435a:	d101      	bne.n	8014360 <__sfputs_r+0x12>
 801435c:	2000      	movs	r0, #0
 801435e:	e007      	b.n	8014370 <__sfputs_r+0x22>
 8014360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014364:	463a      	mov	r2, r7
 8014366:	4630      	mov	r0, r6
 8014368:	f7ff ffda 	bl	8014320 <__sfputc_r>
 801436c:	1c43      	adds	r3, r0, #1
 801436e:	d1f3      	bne.n	8014358 <__sfputs_r+0xa>
 8014370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014374 <_vfiprintf_r>:
 8014374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014378:	460d      	mov	r5, r1
 801437a:	b09d      	sub	sp, #116	@ 0x74
 801437c:	4614      	mov	r4, r2
 801437e:	4698      	mov	r8, r3
 8014380:	4606      	mov	r6, r0
 8014382:	b118      	cbz	r0, 801438c <_vfiprintf_r+0x18>
 8014384:	6a03      	ldr	r3, [r0, #32]
 8014386:	b90b      	cbnz	r3, 801438c <_vfiprintf_r+0x18>
 8014388:	f7fd fce8 	bl	8011d5c <__sinit>
 801438c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801438e:	07d9      	lsls	r1, r3, #31
 8014390:	d405      	bmi.n	801439e <_vfiprintf_r+0x2a>
 8014392:	89ab      	ldrh	r3, [r5, #12]
 8014394:	059a      	lsls	r2, r3, #22
 8014396:	d402      	bmi.n	801439e <_vfiprintf_r+0x2a>
 8014398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801439a:	f7fd ff24 	bl	80121e6 <__retarget_lock_acquire_recursive>
 801439e:	89ab      	ldrh	r3, [r5, #12]
 80143a0:	071b      	lsls	r3, r3, #28
 80143a2:	d501      	bpl.n	80143a8 <_vfiprintf_r+0x34>
 80143a4:	692b      	ldr	r3, [r5, #16]
 80143a6:	b99b      	cbnz	r3, 80143d0 <_vfiprintf_r+0x5c>
 80143a8:	4629      	mov	r1, r5
 80143aa:	4630      	mov	r0, r6
 80143ac:	f7fd fe26 	bl	8011ffc <__swsetup_r>
 80143b0:	b170      	cbz	r0, 80143d0 <_vfiprintf_r+0x5c>
 80143b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143b4:	07dc      	lsls	r4, r3, #31
 80143b6:	d504      	bpl.n	80143c2 <_vfiprintf_r+0x4e>
 80143b8:	f04f 30ff 	mov.w	r0, #4294967295
 80143bc:	b01d      	add	sp, #116	@ 0x74
 80143be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c2:	89ab      	ldrh	r3, [r5, #12]
 80143c4:	0598      	lsls	r0, r3, #22
 80143c6:	d4f7      	bmi.n	80143b8 <_vfiprintf_r+0x44>
 80143c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143ca:	f7fd ff0d 	bl	80121e8 <__retarget_lock_release_recursive>
 80143ce:	e7f3      	b.n	80143b8 <_vfiprintf_r+0x44>
 80143d0:	2300      	movs	r3, #0
 80143d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80143d4:	2320      	movs	r3, #32
 80143d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80143da:	f8cd 800c 	str.w	r8, [sp, #12]
 80143de:	2330      	movs	r3, #48	@ 0x30
 80143e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014590 <_vfiprintf_r+0x21c>
 80143e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80143e8:	f04f 0901 	mov.w	r9, #1
 80143ec:	4623      	mov	r3, r4
 80143ee:	469a      	mov	sl, r3
 80143f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143f4:	b10a      	cbz	r2, 80143fa <_vfiprintf_r+0x86>
 80143f6:	2a25      	cmp	r2, #37	@ 0x25
 80143f8:	d1f9      	bne.n	80143ee <_vfiprintf_r+0x7a>
 80143fa:	ebba 0b04 	subs.w	fp, sl, r4
 80143fe:	d00b      	beq.n	8014418 <_vfiprintf_r+0xa4>
 8014400:	465b      	mov	r3, fp
 8014402:	4622      	mov	r2, r4
 8014404:	4629      	mov	r1, r5
 8014406:	4630      	mov	r0, r6
 8014408:	f7ff ffa1 	bl	801434e <__sfputs_r>
 801440c:	3001      	adds	r0, #1
 801440e:	f000 80a7 	beq.w	8014560 <_vfiprintf_r+0x1ec>
 8014412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014414:	445a      	add	r2, fp
 8014416:	9209      	str	r2, [sp, #36]	@ 0x24
 8014418:	f89a 3000 	ldrb.w	r3, [sl]
 801441c:	2b00      	cmp	r3, #0
 801441e:	f000 809f 	beq.w	8014560 <_vfiprintf_r+0x1ec>
 8014422:	2300      	movs	r3, #0
 8014424:	f04f 32ff 	mov.w	r2, #4294967295
 8014428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801442c:	f10a 0a01 	add.w	sl, sl, #1
 8014430:	9304      	str	r3, [sp, #16]
 8014432:	9307      	str	r3, [sp, #28]
 8014434:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014438:	931a      	str	r3, [sp, #104]	@ 0x68
 801443a:	4654      	mov	r4, sl
 801443c:	2205      	movs	r2, #5
 801443e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014442:	4853      	ldr	r0, [pc, #332]	@ (8014590 <_vfiprintf_r+0x21c>)
 8014444:	f7eb feac 	bl	80001a0 <memchr>
 8014448:	9a04      	ldr	r2, [sp, #16]
 801444a:	b9d8      	cbnz	r0, 8014484 <_vfiprintf_r+0x110>
 801444c:	06d1      	lsls	r1, r2, #27
 801444e:	bf44      	itt	mi
 8014450:	2320      	movmi	r3, #32
 8014452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014456:	0713      	lsls	r3, r2, #28
 8014458:	bf44      	itt	mi
 801445a:	232b      	movmi	r3, #43	@ 0x2b
 801445c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014460:	f89a 3000 	ldrb.w	r3, [sl]
 8014464:	2b2a      	cmp	r3, #42	@ 0x2a
 8014466:	d015      	beq.n	8014494 <_vfiprintf_r+0x120>
 8014468:	9a07      	ldr	r2, [sp, #28]
 801446a:	4654      	mov	r4, sl
 801446c:	2000      	movs	r0, #0
 801446e:	f04f 0c0a 	mov.w	ip, #10
 8014472:	4621      	mov	r1, r4
 8014474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014478:	3b30      	subs	r3, #48	@ 0x30
 801447a:	2b09      	cmp	r3, #9
 801447c:	d94b      	bls.n	8014516 <_vfiprintf_r+0x1a2>
 801447e:	b1b0      	cbz	r0, 80144ae <_vfiprintf_r+0x13a>
 8014480:	9207      	str	r2, [sp, #28]
 8014482:	e014      	b.n	80144ae <_vfiprintf_r+0x13a>
 8014484:	eba0 0308 	sub.w	r3, r0, r8
 8014488:	fa09 f303 	lsl.w	r3, r9, r3
 801448c:	4313      	orrs	r3, r2
 801448e:	9304      	str	r3, [sp, #16]
 8014490:	46a2      	mov	sl, r4
 8014492:	e7d2      	b.n	801443a <_vfiprintf_r+0xc6>
 8014494:	9b03      	ldr	r3, [sp, #12]
 8014496:	1d19      	adds	r1, r3, #4
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	9103      	str	r1, [sp, #12]
 801449c:	2b00      	cmp	r3, #0
 801449e:	bfbb      	ittet	lt
 80144a0:	425b      	neglt	r3, r3
 80144a2:	f042 0202 	orrlt.w	r2, r2, #2
 80144a6:	9307      	strge	r3, [sp, #28]
 80144a8:	9307      	strlt	r3, [sp, #28]
 80144aa:	bfb8      	it	lt
 80144ac:	9204      	strlt	r2, [sp, #16]
 80144ae:	7823      	ldrb	r3, [r4, #0]
 80144b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80144b2:	d10a      	bne.n	80144ca <_vfiprintf_r+0x156>
 80144b4:	7863      	ldrb	r3, [r4, #1]
 80144b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80144b8:	d132      	bne.n	8014520 <_vfiprintf_r+0x1ac>
 80144ba:	9b03      	ldr	r3, [sp, #12]
 80144bc:	1d1a      	adds	r2, r3, #4
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	9203      	str	r2, [sp, #12]
 80144c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80144c6:	3402      	adds	r4, #2
 80144c8:	9305      	str	r3, [sp, #20]
 80144ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80145a0 <_vfiprintf_r+0x22c>
 80144ce:	7821      	ldrb	r1, [r4, #0]
 80144d0:	2203      	movs	r2, #3
 80144d2:	4650      	mov	r0, sl
 80144d4:	f7eb fe64 	bl	80001a0 <memchr>
 80144d8:	b138      	cbz	r0, 80144ea <_vfiprintf_r+0x176>
 80144da:	9b04      	ldr	r3, [sp, #16]
 80144dc:	eba0 000a 	sub.w	r0, r0, sl
 80144e0:	2240      	movs	r2, #64	@ 0x40
 80144e2:	4082      	lsls	r2, r0
 80144e4:	4313      	orrs	r3, r2
 80144e6:	3401      	adds	r4, #1
 80144e8:	9304      	str	r3, [sp, #16]
 80144ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144ee:	4829      	ldr	r0, [pc, #164]	@ (8014594 <_vfiprintf_r+0x220>)
 80144f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80144f4:	2206      	movs	r2, #6
 80144f6:	f7eb fe53 	bl	80001a0 <memchr>
 80144fa:	2800      	cmp	r0, #0
 80144fc:	d03f      	beq.n	801457e <_vfiprintf_r+0x20a>
 80144fe:	4b26      	ldr	r3, [pc, #152]	@ (8014598 <_vfiprintf_r+0x224>)
 8014500:	bb1b      	cbnz	r3, 801454a <_vfiprintf_r+0x1d6>
 8014502:	9b03      	ldr	r3, [sp, #12]
 8014504:	3307      	adds	r3, #7
 8014506:	f023 0307 	bic.w	r3, r3, #7
 801450a:	3308      	adds	r3, #8
 801450c:	9303      	str	r3, [sp, #12]
 801450e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014510:	443b      	add	r3, r7
 8014512:	9309      	str	r3, [sp, #36]	@ 0x24
 8014514:	e76a      	b.n	80143ec <_vfiprintf_r+0x78>
 8014516:	fb0c 3202 	mla	r2, ip, r2, r3
 801451a:	460c      	mov	r4, r1
 801451c:	2001      	movs	r0, #1
 801451e:	e7a8      	b.n	8014472 <_vfiprintf_r+0xfe>
 8014520:	2300      	movs	r3, #0
 8014522:	3401      	adds	r4, #1
 8014524:	9305      	str	r3, [sp, #20]
 8014526:	4619      	mov	r1, r3
 8014528:	f04f 0c0a 	mov.w	ip, #10
 801452c:	4620      	mov	r0, r4
 801452e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014532:	3a30      	subs	r2, #48	@ 0x30
 8014534:	2a09      	cmp	r2, #9
 8014536:	d903      	bls.n	8014540 <_vfiprintf_r+0x1cc>
 8014538:	2b00      	cmp	r3, #0
 801453a:	d0c6      	beq.n	80144ca <_vfiprintf_r+0x156>
 801453c:	9105      	str	r1, [sp, #20]
 801453e:	e7c4      	b.n	80144ca <_vfiprintf_r+0x156>
 8014540:	fb0c 2101 	mla	r1, ip, r1, r2
 8014544:	4604      	mov	r4, r0
 8014546:	2301      	movs	r3, #1
 8014548:	e7f0      	b.n	801452c <_vfiprintf_r+0x1b8>
 801454a:	ab03      	add	r3, sp, #12
 801454c:	9300      	str	r3, [sp, #0]
 801454e:	462a      	mov	r2, r5
 8014550:	4b12      	ldr	r3, [pc, #72]	@ (801459c <_vfiprintf_r+0x228>)
 8014552:	a904      	add	r1, sp, #16
 8014554:	4630      	mov	r0, r6
 8014556:	f7fc fda9 	bl	80110ac <_printf_float>
 801455a:	4607      	mov	r7, r0
 801455c:	1c78      	adds	r0, r7, #1
 801455e:	d1d6      	bne.n	801450e <_vfiprintf_r+0x19a>
 8014560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014562:	07d9      	lsls	r1, r3, #31
 8014564:	d405      	bmi.n	8014572 <_vfiprintf_r+0x1fe>
 8014566:	89ab      	ldrh	r3, [r5, #12]
 8014568:	059a      	lsls	r2, r3, #22
 801456a:	d402      	bmi.n	8014572 <_vfiprintf_r+0x1fe>
 801456c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801456e:	f7fd fe3b 	bl	80121e8 <__retarget_lock_release_recursive>
 8014572:	89ab      	ldrh	r3, [r5, #12]
 8014574:	065b      	lsls	r3, r3, #25
 8014576:	f53f af1f 	bmi.w	80143b8 <_vfiprintf_r+0x44>
 801457a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801457c:	e71e      	b.n	80143bc <_vfiprintf_r+0x48>
 801457e:	ab03      	add	r3, sp, #12
 8014580:	9300      	str	r3, [sp, #0]
 8014582:	462a      	mov	r2, r5
 8014584:	4b05      	ldr	r3, [pc, #20]	@ (801459c <_vfiprintf_r+0x228>)
 8014586:	a904      	add	r1, sp, #16
 8014588:	4630      	mov	r0, r6
 801458a:	f7fd f827 	bl	80115dc <_printf_i>
 801458e:	e7e4      	b.n	801455a <_vfiprintf_r+0x1e6>
 8014590:	080153e8 	.word	0x080153e8
 8014594:	080153f2 	.word	0x080153f2
 8014598:	080110ad 	.word	0x080110ad
 801459c:	0801434f 	.word	0x0801434f
 80145a0:	080153ee 	.word	0x080153ee

080145a4 <__sflush_r>:
 80145a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80145a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ac:	0716      	lsls	r6, r2, #28
 80145ae:	4605      	mov	r5, r0
 80145b0:	460c      	mov	r4, r1
 80145b2:	d454      	bmi.n	801465e <__sflush_r+0xba>
 80145b4:	684b      	ldr	r3, [r1, #4]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	dc02      	bgt.n	80145c0 <__sflush_r+0x1c>
 80145ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80145bc:	2b00      	cmp	r3, #0
 80145be:	dd48      	ble.n	8014652 <__sflush_r+0xae>
 80145c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80145c2:	2e00      	cmp	r6, #0
 80145c4:	d045      	beq.n	8014652 <__sflush_r+0xae>
 80145c6:	2300      	movs	r3, #0
 80145c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80145cc:	682f      	ldr	r7, [r5, #0]
 80145ce:	6a21      	ldr	r1, [r4, #32]
 80145d0:	602b      	str	r3, [r5, #0]
 80145d2:	d030      	beq.n	8014636 <__sflush_r+0x92>
 80145d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80145d6:	89a3      	ldrh	r3, [r4, #12]
 80145d8:	0759      	lsls	r1, r3, #29
 80145da:	d505      	bpl.n	80145e8 <__sflush_r+0x44>
 80145dc:	6863      	ldr	r3, [r4, #4]
 80145de:	1ad2      	subs	r2, r2, r3
 80145e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80145e2:	b10b      	cbz	r3, 80145e8 <__sflush_r+0x44>
 80145e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80145e6:	1ad2      	subs	r2, r2, r3
 80145e8:	2300      	movs	r3, #0
 80145ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80145ec:	6a21      	ldr	r1, [r4, #32]
 80145ee:	4628      	mov	r0, r5
 80145f0:	47b0      	blx	r6
 80145f2:	1c43      	adds	r3, r0, #1
 80145f4:	89a3      	ldrh	r3, [r4, #12]
 80145f6:	d106      	bne.n	8014606 <__sflush_r+0x62>
 80145f8:	6829      	ldr	r1, [r5, #0]
 80145fa:	291d      	cmp	r1, #29
 80145fc:	d82b      	bhi.n	8014656 <__sflush_r+0xb2>
 80145fe:	4a2a      	ldr	r2, [pc, #168]	@ (80146a8 <__sflush_r+0x104>)
 8014600:	410a      	asrs	r2, r1
 8014602:	07d6      	lsls	r6, r2, #31
 8014604:	d427      	bmi.n	8014656 <__sflush_r+0xb2>
 8014606:	2200      	movs	r2, #0
 8014608:	6062      	str	r2, [r4, #4]
 801460a:	04d9      	lsls	r1, r3, #19
 801460c:	6922      	ldr	r2, [r4, #16]
 801460e:	6022      	str	r2, [r4, #0]
 8014610:	d504      	bpl.n	801461c <__sflush_r+0x78>
 8014612:	1c42      	adds	r2, r0, #1
 8014614:	d101      	bne.n	801461a <__sflush_r+0x76>
 8014616:	682b      	ldr	r3, [r5, #0]
 8014618:	b903      	cbnz	r3, 801461c <__sflush_r+0x78>
 801461a:	6560      	str	r0, [r4, #84]	@ 0x54
 801461c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801461e:	602f      	str	r7, [r5, #0]
 8014620:	b1b9      	cbz	r1, 8014652 <__sflush_r+0xae>
 8014622:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014626:	4299      	cmp	r1, r3
 8014628:	d002      	beq.n	8014630 <__sflush_r+0x8c>
 801462a:	4628      	mov	r0, r5
 801462c:	f7fe fc48 	bl	8012ec0 <_free_r>
 8014630:	2300      	movs	r3, #0
 8014632:	6363      	str	r3, [r4, #52]	@ 0x34
 8014634:	e00d      	b.n	8014652 <__sflush_r+0xae>
 8014636:	2301      	movs	r3, #1
 8014638:	4628      	mov	r0, r5
 801463a:	47b0      	blx	r6
 801463c:	4602      	mov	r2, r0
 801463e:	1c50      	adds	r0, r2, #1
 8014640:	d1c9      	bne.n	80145d6 <__sflush_r+0x32>
 8014642:	682b      	ldr	r3, [r5, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d0c6      	beq.n	80145d6 <__sflush_r+0x32>
 8014648:	2b1d      	cmp	r3, #29
 801464a:	d001      	beq.n	8014650 <__sflush_r+0xac>
 801464c:	2b16      	cmp	r3, #22
 801464e:	d11e      	bne.n	801468e <__sflush_r+0xea>
 8014650:	602f      	str	r7, [r5, #0]
 8014652:	2000      	movs	r0, #0
 8014654:	e022      	b.n	801469c <__sflush_r+0xf8>
 8014656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801465a:	b21b      	sxth	r3, r3
 801465c:	e01b      	b.n	8014696 <__sflush_r+0xf2>
 801465e:	690f      	ldr	r7, [r1, #16]
 8014660:	2f00      	cmp	r7, #0
 8014662:	d0f6      	beq.n	8014652 <__sflush_r+0xae>
 8014664:	0793      	lsls	r3, r2, #30
 8014666:	680e      	ldr	r6, [r1, #0]
 8014668:	bf08      	it	eq
 801466a:	694b      	ldreq	r3, [r1, #20]
 801466c:	600f      	str	r7, [r1, #0]
 801466e:	bf18      	it	ne
 8014670:	2300      	movne	r3, #0
 8014672:	eba6 0807 	sub.w	r8, r6, r7
 8014676:	608b      	str	r3, [r1, #8]
 8014678:	f1b8 0f00 	cmp.w	r8, #0
 801467c:	dde9      	ble.n	8014652 <__sflush_r+0xae>
 801467e:	6a21      	ldr	r1, [r4, #32]
 8014680:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014682:	4643      	mov	r3, r8
 8014684:	463a      	mov	r2, r7
 8014686:	4628      	mov	r0, r5
 8014688:	47b0      	blx	r6
 801468a:	2800      	cmp	r0, #0
 801468c:	dc08      	bgt.n	80146a0 <__sflush_r+0xfc>
 801468e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014696:	81a3      	strh	r3, [r4, #12]
 8014698:	f04f 30ff 	mov.w	r0, #4294967295
 801469c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146a0:	4407      	add	r7, r0
 80146a2:	eba8 0800 	sub.w	r8, r8, r0
 80146a6:	e7e7      	b.n	8014678 <__sflush_r+0xd4>
 80146a8:	dfbffffe 	.word	0xdfbffffe

080146ac <_fflush_r>:
 80146ac:	b538      	push	{r3, r4, r5, lr}
 80146ae:	690b      	ldr	r3, [r1, #16]
 80146b0:	4605      	mov	r5, r0
 80146b2:	460c      	mov	r4, r1
 80146b4:	b913      	cbnz	r3, 80146bc <_fflush_r+0x10>
 80146b6:	2500      	movs	r5, #0
 80146b8:	4628      	mov	r0, r5
 80146ba:	bd38      	pop	{r3, r4, r5, pc}
 80146bc:	b118      	cbz	r0, 80146c6 <_fflush_r+0x1a>
 80146be:	6a03      	ldr	r3, [r0, #32]
 80146c0:	b90b      	cbnz	r3, 80146c6 <_fflush_r+0x1a>
 80146c2:	f7fd fb4b 	bl	8011d5c <__sinit>
 80146c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d0f3      	beq.n	80146b6 <_fflush_r+0xa>
 80146ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80146d0:	07d0      	lsls	r0, r2, #31
 80146d2:	d404      	bmi.n	80146de <_fflush_r+0x32>
 80146d4:	0599      	lsls	r1, r3, #22
 80146d6:	d402      	bmi.n	80146de <_fflush_r+0x32>
 80146d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146da:	f7fd fd84 	bl	80121e6 <__retarget_lock_acquire_recursive>
 80146de:	4628      	mov	r0, r5
 80146e0:	4621      	mov	r1, r4
 80146e2:	f7ff ff5f 	bl	80145a4 <__sflush_r>
 80146e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146e8:	07da      	lsls	r2, r3, #31
 80146ea:	4605      	mov	r5, r0
 80146ec:	d4e4      	bmi.n	80146b8 <_fflush_r+0xc>
 80146ee:	89a3      	ldrh	r3, [r4, #12]
 80146f0:	059b      	lsls	r3, r3, #22
 80146f2:	d4e1      	bmi.n	80146b8 <_fflush_r+0xc>
 80146f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146f6:	f7fd fd77 	bl	80121e8 <__retarget_lock_release_recursive>
 80146fa:	e7dd      	b.n	80146b8 <_fflush_r+0xc>

080146fc <__swhatbuf_r>:
 80146fc:	b570      	push	{r4, r5, r6, lr}
 80146fe:	460c      	mov	r4, r1
 8014700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014704:	2900      	cmp	r1, #0
 8014706:	b096      	sub	sp, #88	@ 0x58
 8014708:	4615      	mov	r5, r2
 801470a:	461e      	mov	r6, r3
 801470c:	da0d      	bge.n	801472a <__swhatbuf_r+0x2e>
 801470e:	89a3      	ldrh	r3, [r4, #12]
 8014710:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014714:	f04f 0100 	mov.w	r1, #0
 8014718:	bf14      	ite	ne
 801471a:	2340      	movne	r3, #64	@ 0x40
 801471c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014720:	2000      	movs	r0, #0
 8014722:	6031      	str	r1, [r6, #0]
 8014724:	602b      	str	r3, [r5, #0]
 8014726:	b016      	add	sp, #88	@ 0x58
 8014728:	bd70      	pop	{r4, r5, r6, pc}
 801472a:	466a      	mov	r2, sp
 801472c:	f000 f896 	bl	801485c <_fstat_r>
 8014730:	2800      	cmp	r0, #0
 8014732:	dbec      	blt.n	801470e <__swhatbuf_r+0x12>
 8014734:	9901      	ldr	r1, [sp, #4]
 8014736:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801473a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801473e:	4259      	negs	r1, r3
 8014740:	4159      	adcs	r1, r3
 8014742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014746:	e7eb      	b.n	8014720 <__swhatbuf_r+0x24>

08014748 <__smakebuf_r>:
 8014748:	898b      	ldrh	r3, [r1, #12]
 801474a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801474c:	079d      	lsls	r5, r3, #30
 801474e:	4606      	mov	r6, r0
 8014750:	460c      	mov	r4, r1
 8014752:	d507      	bpl.n	8014764 <__smakebuf_r+0x1c>
 8014754:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014758:	6023      	str	r3, [r4, #0]
 801475a:	6123      	str	r3, [r4, #16]
 801475c:	2301      	movs	r3, #1
 801475e:	6163      	str	r3, [r4, #20]
 8014760:	b003      	add	sp, #12
 8014762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014764:	ab01      	add	r3, sp, #4
 8014766:	466a      	mov	r2, sp
 8014768:	f7ff ffc8 	bl	80146fc <__swhatbuf_r>
 801476c:	9f00      	ldr	r7, [sp, #0]
 801476e:	4605      	mov	r5, r0
 8014770:	4639      	mov	r1, r7
 8014772:	4630      	mov	r0, r6
 8014774:	f7fb fd24 	bl	80101c0 <_malloc_r>
 8014778:	b948      	cbnz	r0, 801478e <__smakebuf_r+0x46>
 801477a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801477e:	059a      	lsls	r2, r3, #22
 8014780:	d4ee      	bmi.n	8014760 <__smakebuf_r+0x18>
 8014782:	f023 0303 	bic.w	r3, r3, #3
 8014786:	f043 0302 	orr.w	r3, r3, #2
 801478a:	81a3      	strh	r3, [r4, #12]
 801478c:	e7e2      	b.n	8014754 <__smakebuf_r+0xc>
 801478e:	89a3      	ldrh	r3, [r4, #12]
 8014790:	6020      	str	r0, [r4, #0]
 8014792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014796:	81a3      	strh	r3, [r4, #12]
 8014798:	9b01      	ldr	r3, [sp, #4]
 801479a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801479e:	b15b      	cbz	r3, 80147b8 <__smakebuf_r+0x70>
 80147a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147a4:	4630      	mov	r0, r6
 80147a6:	f000 f86b 	bl	8014880 <_isatty_r>
 80147aa:	b128      	cbz	r0, 80147b8 <__smakebuf_r+0x70>
 80147ac:	89a3      	ldrh	r3, [r4, #12]
 80147ae:	f023 0303 	bic.w	r3, r3, #3
 80147b2:	f043 0301 	orr.w	r3, r3, #1
 80147b6:	81a3      	strh	r3, [r4, #12]
 80147b8:	89a3      	ldrh	r3, [r4, #12]
 80147ba:	431d      	orrs	r5, r3
 80147bc:	81a5      	strh	r5, [r4, #12]
 80147be:	e7cf      	b.n	8014760 <__smakebuf_r+0x18>

080147c0 <_putc_r>:
 80147c0:	b570      	push	{r4, r5, r6, lr}
 80147c2:	460d      	mov	r5, r1
 80147c4:	4614      	mov	r4, r2
 80147c6:	4606      	mov	r6, r0
 80147c8:	b118      	cbz	r0, 80147d2 <_putc_r+0x12>
 80147ca:	6a03      	ldr	r3, [r0, #32]
 80147cc:	b90b      	cbnz	r3, 80147d2 <_putc_r+0x12>
 80147ce:	f7fd fac5 	bl	8011d5c <__sinit>
 80147d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147d4:	07d8      	lsls	r0, r3, #31
 80147d6:	d405      	bmi.n	80147e4 <_putc_r+0x24>
 80147d8:	89a3      	ldrh	r3, [r4, #12]
 80147da:	0599      	lsls	r1, r3, #22
 80147dc:	d402      	bmi.n	80147e4 <_putc_r+0x24>
 80147de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147e0:	f7fd fd01 	bl	80121e6 <__retarget_lock_acquire_recursive>
 80147e4:	68a3      	ldr	r3, [r4, #8]
 80147e6:	3b01      	subs	r3, #1
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	60a3      	str	r3, [r4, #8]
 80147ec:	da05      	bge.n	80147fa <_putc_r+0x3a>
 80147ee:	69a2      	ldr	r2, [r4, #24]
 80147f0:	4293      	cmp	r3, r2
 80147f2:	db12      	blt.n	801481a <_putc_r+0x5a>
 80147f4:	b2eb      	uxtb	r3, r5
 80147f6:	2b0a      	cmp	r3, #10
 80147f8:	d00f      	beq.n	801481a <_putc_r+0x5a>
 80147fa:	6823      	ldr	r3, [r4, #0]
 80147fc:	1c5a      	adds	r2, r3, #1
 80147fe:	6022      	str	r2, [r4, #0]
 8014800:	701d      	strb	r5, [r3, #0]
 8014802:	b2ed      	uxtb	r5, r5
 8014804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014806:	07da      	lsls	r2, r3, #31
 8014808:	d405      	bmi.n	8014816 <_putc_r+0x56>
 801480a:	89a3      	ldrh	r3, [r4, #12]
 801480c:	059b      	lsls	r3, r3, #22
 801480e:	d402      	bmi.n	8014816 <_putc_r+0x56>
 8014810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014812:	f7fd fce9 	bl	80121e8 <__retarget_lock_release_recursive>
 8014816:	4628      	mov	r0, r5
 8014818:	bd70      	pop	{r4, r5, r6, pc}
 801481a:	4629      	mov	r1, r5
 801481c:	4622      	mov	r2, r4
 801481e:	4630      	mov	r0, r6
 8014820:	f7fd fbad 	bl	8011f7e <__swbuf_r>
 8014824:	4605      	mov	r5, r0
 8014826:	e7ed      	b.n	8014804 <_putc_r+0x44>

08014828 <memmove>:
 8014828:	4288      	cmp	r0, r1
 801482a:	b510      	push	{r4, lr}
 801482c:	eb01 0402 	add.w	r4, r1, r2
 8014830:	d902      	bls.n	8014838 <memmove+0x10>
 8014832:	4284      	cmp	r4, r0
 8014834:	4623      	mov	r3, r4
 8014836:	d807      	bhi.n	8014848 <memmove+0x20>
 8014838:	1e43      	subs	r3, r0, #1
 801483a:	42a1      	cmp	r1, r4
 801483c:	d008      	beq.n	8014850 <memmove+0x28>
 801483e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014846:	e7f8      	b.n	801483a <memmove+0x12>
 8014848:	4402      	add	r2, r0
 801484a:	4601      	mov	r1, r0
 801484c:	428a      	cmp	r2, r1
 801484e:	d100      	bne.n	8014852 <memmove+0x2a>
 8014850:	bd10      	pop	{r4, pc}
 8014852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801485a:	e7f7      	b.n	801484c <memmove+0x24>

0801485c <_fstat_r>:
 801485c:	b538      	push	{r3, r4, r5, lr}
 801485e:	4d07      	ldr	r5, [pc, #28]	@ (801487c <_fstat_r+0x20>)
 8014860:	2300      	movs	r3, #0
 8014862:	4604      	mov	r4, r0
 8014864:	4608      	mov	r0, r1
 8014866:	4611      	mov	r1, r2
 8014868:	602b      	str	r3, [r5, #0]
 801486a:	f7f0 fabf 	bl	8004dec <_fstat>
 801486e:	1c43      	adds	r3, r0, #1
 8014870:	d102      	bne.n	8014878 <_fstat_r+0x1c>
 8014872:	682b      	ldr	r3, [r5, #0]
 8014874:	b103      	cbz	r3, 8014878 <_fstat_r+0x1c>
 8014876:	6023      	str	r3, [r4, #0]
 8014878:	bd38      	pop	{r3, r4, r5, pc}
 801487a:	bf00      	nop
 801487c:	20000b3c 	.word	0x20000b3c

08014880 <_isatty_r>:
 8014880:	b538      	push	{r3, r4, r5, lr}
 8014882:	4d06      	ldr	r5, [pc, #24]	@ (801489c <_isatty_r+0x1c>)
 8014884:	2300      	movs	r3, #0
 8014886:	4604      	mov	r4, r0
 8014888:	4608      	mov	r0, r1
 801488a:	602b      	str	r3, [r5, #0]
 801488c:	f7f0 fabe 	bl	8004e0c <_isatty>
 8014890:	1c43      	adds	r3, r0, #1
 8014892:	d102      	bne.n	801489a <_isatty_r+0x1a>
 8014894:	682b      	ldr	r3, [r5, #0]
 8014896:	b103      	cbz	r3, 801489a <_isatty_r+0x1a>
 8014898:	6023      	str	r3, [r4, #0]
 801489a:	bd38      	pop	{r3, r4, r5, pc}
 801489c:	20000b3c 	.word	0x20000b3c

080148a0 <__assert_func>:
 80148a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148a2:	4614      	mov	r4, r2
 80148a4:	461a      	mov	r2, r3
 80148a6:	4b09      	ldr	r3, [pc, #36]	@ (80148cc <__assert_func+0x2c>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	4605      	mov	r5, r0
 80148ac:	68d8      	ldr	r0, [r3, #12]
 80148ae:	b954      	cbnz	r4, 80148c6 <__assert_func+0x26>
 80148b0:	4b07      	ldr	r3, [pc, #28]	@ (80148d0 <__assert_func+0x30>)
 80148b2:	461c      	mov	r4, r3
 80148b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80148b8:	9100      	str	r1, [sp, #0]
 80148ba:	462b      	mov	r3, r5
 80148bc:	4905      	ldr	r1, [pc, #20]	@ (80148d4 <__assert_func+0x34>)
 80148be:	f000 f80d 	bl	80148dc <fiprintf>
 80148c2:	f000 f81d 	bl	8014900 <abort>
 80148c6:	4b04      	ldr	r3, [pc, #16]	@ (80148d8 <__assert_func+0x38>)
 80148c8:	e7f4      	b.n	80148b4 <__assert_func+0x14>
 80148ca:	bf00      	nop
 80148cc:	200001b0 	.word	0x200001b0
 80148d0:	08015434 	.word	0x08015434
 80148d4:	08015406 	.word	0x08015406
 80148d8:	080153f9 	.word	0x080153f9

080148dc <fiprintf>:
 80148dc:	b40e      	push	{r1, r2, r3}
 80148de:	b503      	push	{r0, r1, lr}
 80148e0:	4601      	mov	r1, r0
 80148e2:	ab03      	add	r3, sp, #12
 80148e4:	4805      	ldr	r0, [pc, #20]	@ (80148fc <fiprintf+0x20>)
 80148e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80148ea:	6800      	ldr	r0, [r0, #0]
 80148ec:	9301      	str	r3, [sp, #4]
 80148ee:	f7ff fd41 	bl	8014374 <_vfiprintf_r>
 80148f2:	b002      	add	sp, #8
 80148f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80148f8:	b003      	add	sp, #12
 80148fa:	4770      	bx	lr
 80148fc:	200001b0 	.word	0x200001b0

08014900 <abort>:
 8014900:	b508      	push	{r3, lr}
 8014902:	2006      	movs	r0, #6
 8014904:	f000 f82c 	bl	8014960 <raise>
 8014908:	2001      	movs	r0, #1
 801490a:	f7f0 fa3b 	bl	8004d84 <_exit>

0801490e <_raise_r>:
 801490e:	291f      	cmp	r1, #31
 8014910:	b538      	push	{r3, r4, r5, lr}
 8014912:	4605      	mov	r5, r0
 8014914:	460c      	mov	r4, r1
 8014916:	d904      	bls.n	8014922 <_raise_r+0x14>
 8014918:	2316      	movs	r3, #22
 801491a:	6003      	str	r3, [r0, #0]
 801491c:	f04f 30ff 	mov.w	r0, #4294967295
 8014920:	bd38      	pop	{r3, r4, r5, pc}
 8014922:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014924:	b112      	cbz	r2, 801492c <_raise_r+0x1e>
 8014926:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801492a:	b94b      	cbnz	r3, 8014940 <_raise_r+0x32>
 801492c:	4628      	mov	r0, r5
 801492e:	f000 f831 	bl	8014994 <_getpid_r>
 8014932:	4622      	mov	r2, r4
 8014934:	4601      	mov	r1, r0
 8014936:	4628      	mov	r0, r5
 8014938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801493c:	f000 b818 	b.w	8014970 <_kill_r>
 8014940:	2b01      	cmp	r3, #1
 8014942:	d00a      	beq.n	801495a <_raise_r+0x4c>
 8014944:	1c59      	adds	r1, r3, #1
 8014946:	d103      	bne.n	8014950 <_raise_r+0x42>
 8014948:	2316      	movs	r3, #22
 801494a:	6003      	str	r3, [r0, #0]
 801494c:	2001      	movs	r0, #1
 801494e:	e7e7      	b.n	8014920 <_raise_r+0x12>
 8014950:	2100      	movs	r1, #0
 8014952:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014956:	4620      	mov	r0, r4
 8014958:	4798      	blx	r3
 801495a:	2000      	movs	r0, #0
 801495c:	e7e0      	b.n	8014920 <_raise_r+0x12>
	...

08014960 <raise>:
 8014960:	4b02      	ldr	r3, [pc, #8]	@ (801496c <raise+0xc>)
 8014962:	4601      	mov	r1, r0
 8014964:	6818      	ldr	r0, [r3, #0]
 8014966:	f7ff bfd2 	b.w	801490e <_raise_r>
 801496a:	bf00      	nop
 801496c:	200001b0 	.word	0x200001b0

08014970 <_kill_r>:
 8014970:	b538      	push	{r3, r4, r5, lr}
 8014972:	4d07      	ldr	r5, [pc, #28]	@ (8014990 <_kill_r+0x20>)
 8014974:	2300      	movs	r3, #0
 8014976:	4604      	mov	r4, r0
 8014978:	4608      	mov	r0, r1
 801497a:	4611      	mov	r1, r2
 801497c:	602b      	str	r3, [r5, #0]
 801497e:	f7f0 f9f1 	bl	8004d64 <_kill>
 8014982:	1c43      	adds	r3, r0, #1
 8014984:	d102      	bne.n	801498c <_kill_r+0x1c>
 8014986:	682b      	ldr	r3, [r5, #0]
 8014988:	b103      	cbz	r3, 801498c <_kill_r+0x1c>
 801498a:	6023      	str	r3, [r4, #0]
 801498c:	bd38      	pop	{r3, r4, r5, pc}
 801498e:	bf00      	nop
 8014990:	20000b3c 	.word	0x20000b3c

08014994 <_getpid_r>:
 8014994:	f7f0 b9de 	b.w	8004d54 <_getpid>

08014998 <_init>:
 8014998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801499a:	bf00      	nop
 801499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801499e:	bc08      	pop	{r3}
 80149a0:	469e      	mov	lr, r3
 80149a2:	4770      	bx	lr

080149a4 <_fini>:
 80149a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149a6:	bf00      	nop
 80149a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149aa:	bc08      	pop	{r3}
 80149ac:	469e      	mov	lr, r3
 80149ae:	4770      	bx	lr
