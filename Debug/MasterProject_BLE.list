
MasterProject_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137c4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  08013908  08013908  00014908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801419c  0801419c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080141a4  080141a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080141a8  080141a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  20000008  080141ac  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000200  080143a4  00016200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000238  080143d9  00016238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  2000024c  080143ea  0001624c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  080143ea  00016a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00018000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00018000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080143ea  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000376de  00000000  00000000  00017a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007128  00000000  00000000  0004f175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000034a0  00000000  00000000  000562a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000028e9  00000000  00000000  00059740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00010449  00000000  00000000  0005c029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003b536  00000000  00000000  0006c472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00109d19  00000000  00000000  000a79a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001b16c1  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000f4cc  00000000  00000000  001b1704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  001c0bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000024c 	.word	0x2000024c
 800015c:	00000000 	.word	0x00000000
 8000160:	080138ec 	.word	0x080138ec

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000250 	.word	0x20000250
 800017c:	080138ec 	.word	0x080138ec

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b9a0 	b.w	8000fb0 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f83c 	bl	8000cf4 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff0b 	bl	8000aac <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc81 	bl	80005c8 <__aeabi_dmul>
 8000cc6:	f7ff ff57 	bl	8000b78 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc02 	bl	80004d4 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc78 	bl	80005c8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff faba 	bl	8000258 <__aeabi_dsub>
 8000ce4:	f7ff ff48 	bl	8000b78 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9d08      	ldr	r5, [sp, #32]
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d14e      	bne.n	8000d9e <__udivmoddi4+0xaa>
 8000d00:	4694      	mov	ip, r2
 8000d02:	458c      	cmp	ip, r1
 8000d04:	4686      	mov	lr, r0
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	d962      	bls.n	8000dd2 <__udivmoddi4+0xde>
 8000d0c:	b14a      	cbz	r2, 8000d22 <__udivmoddi4+0x2e>
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	4091      	lsls	r1, r2
 8000d14:	fa20 f303 	lsr.w	r3, r0, r3
 8000d18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f f68c 	uxth.w	r6, ip
 8000d2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb07 1114 	mls	r1, r7, r4, r1
 8000d36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3a:	fb04 f106 	mul.w	r1, r4, r6
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x64>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4a:	f080 8112 	bcs.w	8000f72 <__udivmoddi4+0x27e>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 810f 	bls.w	8000f72 <__udivmoddi4+0x27e>
 8000d54:	3c02      	subs	r4, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	1a59      	subs	r1, r3, r1
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d62:	fb07 1110 	mls	r1, r7, r0, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb00 f606 	mul.w	r6, r0, r6
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x94>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7a:	f080 80fc 	bcs.w	8000f76 <__udivmoddi4+0x282>
 8000d7e:	429e      	cmp	r6, r3
 8000d80:	f240 80f9 	bls.w	8000f76 <__udivmoddi4+0x282>
 8000d84:	4463      	add	r3, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	1b9b      	subs	r3, r3, r6
 8000d8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa6>
 8000d92:	40d3      	lsrs	r3, r2
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xba>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb4>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x150>
 8000db6:	42a3      	cmp	r3, r4
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xcc>
 8000dba:	4290      	cmp	r0, r2
 8000dbc:	f0c0 80f0 	bcc.w	8000fa0 <__udivmoddi4+0x2ac>
 8000dc0:	1a86      	subs	r6, r0, r2
 8000dc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d0e6      	beq.n	8000d9a <__udivmoddi4+0xa6>
 8000dcc:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd0:	e7e3      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x204>
 8000dd8:	eba1 040c 	sub.w	r4, r1, ip
 8000ddc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	2101      	movs	r1, #1
 8000de6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dee:	fb08 4416 	mls	r4, r8, r6, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb07 f006 	mul.w	r0, r7, r6
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x11c>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x11a>
 8000e08:	4298      	cmp	r0, r3
 8000e0a:	f200 80cd 	bhi.w	8000fa8 <__udivmoddi4+0x2b4>
 8000e0e:	4626      	mov	r6, r4
 8000e10:	1a1c      	subs	r4, r3, r0
 8000e12:	fa1f f38e 	uxth.w	r3, lr
 8000e16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e22:	fb00 f707 	mul.w	r7, r0, r7
 8000e26:	429f      	cmp	r7, r3
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x148>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x146>
 8000e34:	429f      	cmp	r7, r3
 8000e36:	f200 80b0 	bhi.w	8000f9a <__udivmoddi4+0x2a6>
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	1bdb      	subs	r3, r3, r7
 8000e3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x9c>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e54:	fa04 f301 	lsl.w	r3, r4, r1
 8000e58:	ea43 030c 	orr.w	r3, r3, ip
 8000e5c:	40f4      	lsrs	r4, r6
 8000e5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e62:	0c38      	lsrs	r0, r7, #16
 8000e64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e68:	fbb4 fef0 	udiv	lr, r4, r0
 8000e6c:	fa1f fc87 	uxth.w	ip, r7
 8000e70:	fb00 441e 	mls	r4, r0, lr, r4
 8000e74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e78:	fb0e f90c 	mul.w	r9, lr, ip
 8000e7c:	45a1      	cmp	r9, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d90a      	bls.n	8000e9a <__udivmoddi4+0x1a6>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8a:	f080 8084 	bcs.w	8000f96 <__udivmoddi4+0x2a2>
 8000e8e:	45a1      	cmp	r9, r4
 8000e90:	f240 8081 	bls.w	8000f96 <__udivmoddi4+0x2a2>
 8000e94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	eba4 0409 	sub.w	r4, r4, r9
 8000e9e:	fa1f f983 	uxth.w	r9, r3
 8000ea2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ea6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eaa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x1d2>
 8000eb6:	193c      	adds	r4, r7, r4
 8000eb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ebc:	d267      	bcs.n	8000f8e <__udivmoddi4+0x29a>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d965      	bls.n	8000f8e <__udivmoddi4+0x29a>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eca:	fba0 9302 	umull	r9, r3, r0, r2
 8000ece:	eba4 040c 	sub.w	r4, r4, ip
 8000ed2:	429c      	cmp	r4, r3
 8000ed4:	46ce      	mov	lr, r9
 8000ed6:	469c      	mov	ip, r3
 8000ed8:	d351      	bcc.n	8000f7e <__udivmoddi4+0x28a>
 8000eda:	d04e      	beq.n	8000f7a <__udivmoddi4+0x286>
 8000edc:	b155      	cbz	r5, 8000ef4 <__udivmoddi4+0x200>
 8000ede:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	40cb      	lsrs	r3, r1
 8000eec:	431e      	orrs	r6, r3
 8000eee:	40cc      	lsrs	r4, r1
 8000ef0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	e750      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f103 	lsr.w	r1, r0, r3
 8000f00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f04:	fa24 f303 	lsr.w	r3, r4, r3
 8000f08:	4094      	lsls	r4, r2
 8000f0a:	430c      	orrs	r4, r1
 8000f0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f14:	fa1f f78c 	uxth.w	r7, ip
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f20:	0c23      	lsrs	r3, r4, #16
 8000f22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f26:	fb00 f107 	mul.w	r1, r0, r7
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x24c>
 8000f2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f36:	d22c      	bcs.n	8000f92 <__udivmoddi4+0x29e>
 8000f38:	4299      	cmp	r1, r3
 8000f3a:	d92a      	bls.n	8000f92 <__udivmoddi4+0x29e>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	1a5b      	subs	r3, r3, r1
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f48:	fb08 3311 	mls	r3, r8, r1, r3
 8000f4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f50:	fb01 f307 	mul.w	r3, r1, r7
 8000f54:	42a3      	cmp	r3, r4
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x276>
 8000f58:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f60:	d213      	bcs.n	8000f8a <__udivmoddi4+0x296>
 8000f62:	42a3      	cmp	r3, r4
 8000f64:	d911      	bls.n	8000f8a <__udivmoddi4+0x296>
 8000f66:	3902      	subs	r1, #2
 8000f68:	4464      	add	r4, ip
 8000f6a:	1ae4      	subs	r4, r4, r3
 8000f6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f70:	e739      	b.n	8000de6 <__udivmoddi4+0xf2>
 8000f72:	4604      	mov	r4, r0
 8000f74:	e6f0      	b.n	8000d58 <__udivmoddi4+0x64>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e706      	b.n	8000d88 <__udivmoddi4+0x94>
 8000f7a:	45c8      	cmp	r8, r9
 8000f7c:	d2ae      	bcs.n	8000edc <__udivmoddi4+0x1e8>
 8000f7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7a8      	b.n	8000edc <__udivmoddi4+0x1e8>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	e7ed      	b.n	8000f6a <__udivmoddi4+0x276>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	e799      	b.n	8000ec6 <__udivmoddi4+0x1d2>
 8000f92:	4630      	mov	r0, r6
 8000f94:	e7d4      	b.n	8000f40 <__udivmoddi4+0x24c>
 8000f96:	46d6      	mov	lr, sl
 8000f98:	e77f      	b.n	8000e9a <__udivmoddi4+0x1a6>
 8000f9a:	4463      	add	r3, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e74d      	b.n	8000e3c <__udivmoddi4+0x148>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	4623      	mov	r3, r4
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e70f      	b.n	8000dc8 <__udivmoddi4+0xd4>
 8000fa8:	3e02      	subs	r6, #2
 8000faa:	4463      	add	r3, ip
 8000fac:	e730      	b.n	8000e10 <__udivmoddi4+0x11c>
 8000fae:	bf00      	nop

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <check_command>:
#include <stdio.h>
#include <string.h>

extern bool GPIO_EXTENDER_ProcessCommand(uint8_t *data);

bool check_command(uint8_t *data) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if (data[0] == 0x01) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <check_command+0x14>
		return true;  // Commande valide
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <check_command+0x16>
	}
	return false;  // Commande invalide
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <BLE_ProcessCommand>:

// Fonction pour traiter la commande BLE
// Format des données a envoyé : {"GPS_mode":0,"forward":0,"spine":0} de avancé de 50 à 100, reculé de 0 à 50
bool BLE_ProcessCommand(uint8_t *data, uint8_t length) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0c6      	sub	sp, #280	@ 0x118
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fe2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000fe6:	6018      	str	r0, [r3, #0]
 8000fe8:	460a      	mov	r2, r1
 8000fea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fee:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000ff2:	701a      	strb	r2, [r3, #0]
    char json_string[256] = {0};
 8000ff4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ff8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	3304      	adds	r3, #4
 8001002:	22fc      	movs	r2, #252	@ 0xfc
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f010 f82e 	bl	8011068 <memset>
    if (length >= sizeof(json_string)) return false;
    memcpy(json_string, data, length);
 800100c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001010:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800101a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800101e:	f107 0008 	add.w	r0, r7, #8
 8001022:	6819      	ldr	r1, [r3, #0]
 8001024:	f010 f8c1 	bl	80111aa <memcpy>
    json_string[length] = '\0';
 8001028:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800102c:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001036:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800103a:	2100      	movs	r1, #0
 800103c:	54d1      	strb	r1, [r2, r3]

    printf(">> JSON reçu : %s\r\n", json_string);
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	4832      	ldr	r0, [pc, #200]	@ (8001110 <BLE_ProcessCommand+0x138>)
 8001046:	f00f fea7 	bl	8010d98 <iprintf>

    // Parse le JSON
    cJSON *root = cJSON_Parse(json_string);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fe44 	bl	8001cdc <cJSON_Parse>
 8001054:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    if (root == NULL) {
 8001058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800105c:	2b00      	cmp	r3, #0
 800105e:	d104      	bne.n	800106a <BLE_ProcessCommand+0x92>
        printf("⚠️ JSON invalide\n");
 8001060:	482c      	ldr	r0, [pc, #176]	@ (8001114 <BLE_ProcessCommand+0x13c>)
 8001062:	f00f ff01 	bl	8010e68 <puts>
        return false;
 8001066:	2300      	movs	r3, #0
 8001068:	e04d      	b.n	8001106 <BLE_ProcessCommand+0x12e>
    }

    // Extraction des champs moteurs
    cJSON *forward = cJSON_GetObjectItem(root, "forward");
 800106a:	492b      	ldr	r1, [pc, #172]	@ (8001118 <BLE_ProcessCommand+0x140>)
 800106c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8001070:	f001 f939 	bl	80022e6 <cJSON_GetObjectItem>
 8001074:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    cJSON *spine = cJSON_GetObjectItem(root, "spine");
 8001078:	4928      	ldr	r1, [pc, #160]	@ (800111c <BLE_ProcessCommand+0x144>)
 800107a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800107e:	f001 f932 	bl	80022e6 <cJSON_GetObjectItem>
 8001082:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    cJSON *GPS_mode = cJSON_GetObjectItem(root, "GPS_mode");
 8001086:	4926      	ldr	r1, [pc, #152]	@ (8001120 <BLE_ProcessCommand+0x148>)
 8001088:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800108c:	f001 f92b 	bl	80022e6 <cJSON_GetObjectItem>
 8001090:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

    if (!cJSON_IsNumber(forward) || !cJSON_IsNumber(spine) || !cJSON_IsNumber(GPS_mode)) {
 8001094:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001098:	f001 f934 	bl	8002304 <cJSON_IsNumber>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00d      	beq.n	80010be <BLE_ProcessCommand+0xe6>
 80010a2:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80010a6:	f001 f92d 	bl	8002304 <cJSON_IsNumber>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <BLE_ProcessCommand+0xe6>
 80010b0:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80010b4:	f001 f926 	bl	8002304 <cJSON_IsNumber>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d108      	bne.n	80010d0 <BLE_ProcessCommand+0xf8>
        printf("⚠️ Un ou plusieurs champs ne sont pas des nombres\n");
 80010be:	4819      	ldr	r0, [pc, #100]	@ (8001124 <BLE_ProcessCommand+0x14c>)
 80010c0:	f00f fed2 	bl	8010e68 <puts>
        cJSON_Delete(root);
 80010c4:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80010c8:	f000 f92e 	bl	8001328 <cJSON_Delete>
        return false;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e01a      	b.n	8001106 <BLE_ProcessCommand+0x12e>
    }

    printf("Moteurs : forward=%d, spine=%d, GPS_mode=%d\n",
 80010d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010d4:	6959      	ldr	r1, [r3, #20]
 80010d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4811      	ldr	r0, [pc, #68]	@ (8001128 <BLE_ProcessCommand+0x150>)
 80010e4:	f00f fe58 	bl	8010d98 <iprintf>
           forward->valueint, spine->valueint, GPS_mode->valueint);

    cJSON_Delete(root);
 80010e8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80010ec:	f000 f91c 	bl	8001328 <cJSON_Delete>

    motorTraduction(forward->valueint, spine->valueint);
 80010f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4610      	mov	r0, r2
 8001100:	f000 f814 	bl	800112c <motorTraduction>
    return true;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	08013908 	.word	0x08013908
 8001114:	08013920 	.word	0x08013920
 8001118:	08013938 	.word	0x08013938
 800111c:	08013940 	.word	0x08013940
 8001120:	08013948 	.word	0x08013948
 8001124:	08013954 	.word	0x08013954
 8001128:	0801398c 	.word	0x0801398c

0800112c <motorTraduction>:
#include "../Inc/Motor_Control.h"

// Prototype de la fonction setMotor (à définir ailleurs ou simuler pour test)
extern void setMotor(int id, int vitesse);

void motorTraduction(int forward, int spine) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	@ 0x38
 8001130:	af02      	add	r7, sp, #8
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    // Centre les valeurs autour de 0 (50 = stop)
    int fwd = forward - 50;  // [-50 ; +50]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3b32      	subs	r3, #50	@ 0x32
 800113a:	61fb      	str	r3, [r7, #28]
    int turn = spine - 50;   // [-50 ; +50]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	3b32      	subs	r3, #50	@ 0x32
 8001140:	61bb      	str	r3, [r7, #24]

    // Gains (peuvent être ajustés pour modifier réactivité)
    float Kf = 1.0f;  // Avancer/Reculer
 8001142:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001146:	617b      	str	r3, [r7, #20]
    float Kt = 1.0f;  // Rotation
 8001148:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800114c:	613b      	str	r3, [r7, #16]

    // Calcule les composantes
    int speed_forward = (int)(Kf * fwd);   // [-100 ; +100]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001158:	edd7 7a05 	vldr	s15, [r7, #20]
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001164:	ee17 3a90 	vmov	r3, s15
 8001168:	60fb      	str	r3, [r7, #12]
    int speed_turn    = (int)(Kt * turn);  // [-100 ; +100]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001174:	edd7 7a04 	vldr	s15, [r7, #16]
 8001178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001180:	ee17 3a90 	vmov	r3, s15
 8001184:	60bb      	str	r3, [r7, #8]

    // Applique la logique différentielle pour chaque moteur
    int m1 = speed_forward - speed_turn;
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int m2 = speed_forward + speed_turn;
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4413      	add	r3, r2
 8001194:	62bb      	str	r3, [r7, #40]	@ 0x28
    int m3 = speed_forward - speed_turn;
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
    int m4 = speed_forward + speed_turn;
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4413      	add	r3, r2
 80011a4:	623b      	str	r3, [r7, #32]

    // Saturation entre -100 et +100
    if (m1 > 100) m1 = 100; if (m1 < -100) m1 = -100;
 80011a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a8:	2b64      	cmp	r3, #100	@ 0x64
 80011aa:	dd01      	ble.n	80011b0 <motorTraduction+0x84>
 80011ac:	2364      	movs	r3, #100	@ 0x64
 80011ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b2:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80011b6:	da02      	bge.n	80011be <motorTraduction+0x92>
 80011b8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (m2 > 100) m2 = 100; if (m2 < -100) m2 = -100;
 80011be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c0:	2b64      	cmp	r3, #100	@ 0x64
 80011c2:	dd01      	ble.n	80011c8 <motorTraduction+0x9c>
 80011c4:	2364      	movs	r3, #100	@ 0x64
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ca:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80011ce:	da02      	bge.n	80011d6 <motorTraduction+0xaa>
 80011d0:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (m3 > 100) m3 = 100; if (m3 < -100) m3 = -100;
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	2b64      	cmp	r3, #100	@ 0x64
 80011da:	dd01      	ble.n	80011e0 <motorTraduction+0xb4>
 80011dc:	2364      	movs	r3, #100	@ 0x64
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
 80011e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e2:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80011e6:	da02      	bge.n	80011ee <motorTraduction+0xc2>
 80011e8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    if (m4 > 100) m4 = 100; if (m4 < -100) m4 = -100;
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	2b64      	cmp	r3, #100	@ 0x64
 80011f2:	dd01      	ble.n	80011f8 <motorTraduction+0xcc>
 80011f4:	2364      	movs	r3, #100	@ 0x64
 80011f6:	623b      	str	r3, [r7, #32]
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80011fe:	da02      	bge.n	8001206 <motorTraduction+0xda>
 8001200:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001204:	623b      	str	r3, [r7, #32]

    // Affichage debug
    printf("Vitesses moteurs : m1=%d, m2=%d, m3=%d, m4=%d\n", m1, m2, m3, m4);
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800120e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001210:	4803      	ldr	r0, [pc, #12]	@ (8001220 <motorTraduction+0xf4>)
 8001212:	f00f fdc1 	bl	8010d98 <iprintf>
}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	@ 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	080139bc 	.word	0x080139bc

08001224 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <case_insensitive_strcmp+0x16>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800123a:	2301      	movs	r3, #1
 800123c:	e056      	b.n	80012ec <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d10d      	bne.n	8001262 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001246:	2300      	movs	r3, #0
 8001248:	e050      	b.n	80012ec <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001252:	2300      	movs	r3, #0
 8001254:	e04a      	b.n	80012ec <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3301      	adds	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	3301      	adds	r3, #1
 800126c:	4a22      	ldr	r2, [pc, #136]	@ (80012f8 <case_insensitive_strcmp+0xd4>)
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d103      	bne.n	8001282 <case_insensitive_strcmp+0x5e>
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	f103 0220 	add.w	r2, r3, #32
 8001280:	e000      	b.n	8001284 <case_insensitive_strcmp+0x60>
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	73bb      	strb	r3, [r7, #14]
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	3301      	adds	r3, #1
 800128e:	491a      	ldr	r1, [pc, #104]	@ (80012f8 <case_insensitive_strcmp+0xd4>)
 8001290:	440b      	add	r3, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d102      	bne.n	80012a2 <case_insensitive_strcmp+0x7e>
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	3320      	adds	r3, #32
 80012a0:	e000      	b.n	80012a4 <case_insensitive_strcmp+0x80>
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d0d0      	beq.n	800124a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	737b      	strb	r3, [r7, #13]
 80012ae:	7b7b      	ldrb	r3, [r7, #13]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a11      	ldr	r2, [pc, #68]	@ (80012f8 <case_insensitive_strcmp+0xd4>)
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d103      	bne.n	80012c8 <case_insensitive_strcmp+0xa4>
 80012c0:	7b7b      	ldrb	r3, [r7, #13]
 80012c2:	f103 0220 	add.w	r2, r3, #32
 80012c6:	e000      	b.n	80012ca <case_insensitive_strcmp+0xa6>
 80012c8:	7b7a      	ldrb	r2, [r7, #13]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	733b      	strb	r3, [r7, #12]
 80012d0:	7b3b      	ldrb	r3, [r7, #12]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <case_insensitive_strcmp+0xd4>)
 80012d6:	440b      	add	r3, r1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d102      	bne.n	80012e8 <case_insensitive_strcmp+0xc4>
 80012e2:	7b3b      	ldrb	r3, [r7, #12]
 80012e4:	3320      	adds	r3, #32
 80012e6:	e000      	b.n	80012ea <case_insensitive_strcmp+0xc6>
 80012e8:	7b3b      	ldrb	r3, [r7, #12]
 80012ea:	1ad3      	subs	r3, r2, r3
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	08013dc8 	.word	0x08013dc8

080012fc <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2028      	movs	r0, #40	@ 0x28
 800130a:	4798      	blx	r3
 800130c:	60f8      	str	r0, [r7, #12]
    if (node)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001314:	2228      	movs	r2, #40	@ 0x28
 8001316:	2100      	movs	r1, #0
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f00f fea5 	bl	8011068 <memset>
    }

    return node;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001334:	e037      	b.n	80013a6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d108      	bne.n	800135a <cJSON_Delete+0x32>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ffe7 	bl	8001328 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <cJSON_Delete+0x52>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <cJSON_Delete+0x90>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6912      	ldr	r2, [r2, #16]
 8001376:	4610      	mov	r0, r2
 8001378:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <cJSON_Delete+0x72>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <cJSON_Delete+0x90>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6a12      	ldr	r2, [r2, #32]
 8001396:	4610      	mov	r0, r2
 8001398:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800139a:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <cJSON_Delete+0x90>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	4798      	blx	r3
        item = next;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1c4      	bne.n	8001336 <cJSON_Delete+0xe>
    }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008

080013bc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80013c0:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	0000      	movs	r0, r0
	...

080013d0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b098      	sub	sp, #96	@ 0x60
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80013ea:	f7ff ffe7 	bl	80013bc <get_decimal_point>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <parse_number+0x36>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <parse_number+0x3a>
    {
        return false;
 8001406:	2300      	movs	r3, #0
 8001408:	e0a0      	b.n	800154c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800140a:	2300      	movs	r3, #0
 800140c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800140e:	e03d      	b.n	800148c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	6899      	ldr	r1, [r3, #8]
 8001418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800141a:	440b      	add	r3, r1
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b45      	cmp	r3, #69	@ 0x45
 8001422:	dc17      	bgt.n	8001454 <parse_number+0x84>
 8001424:	2b2b      	cmp	r3, #43	@ 0x2b
 8001426:	db40      	blt.n	80014aa <parse_number+0xda>
 8001428:	3b2b      	subs	r3, #43	@ 0x2b
 800142a:	2201      	movs	r2, #1
 800142c:	409a      	lsls	r2, r3
 800142e:	4b4c      	ldr	r3, [pc, #304]	@ (8001560 <parse_number+0x190>)
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf14      	ite	ne
 8001436:	2301      	movne	r3, #1
 8001438:	2300      	moveq	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10b      	bne.n	8001458 <parse_number+0x88>
 8001440:	f002 0308 	and.w	r3, r2, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d111      	bne.n	8001476 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001452:	e02a      	b.n	80014aa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001454:	2b65      	cmp	r3, #101	@ 0x65
 8001456:	d128      	bne.n	80014aa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	6899      	ldr	r1, [r3, #8]
 8001460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001462:	440b      	add	r3, r1
 8001464:	4413      	add	r3, r2
 8001466:	7819      	ldrb	r1, [r3, #0]
 8001468:	f107 0208 	add.w	r2, r7, #8
 800146c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800146e:	4413      	add	r3, r2
 8001470:	460a      	mov	r2, r1
 8001472:	701a      	strb	r2, [r3, #0]
                break;
 8001474:	e007      	b.n	8001486 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8001476:	f107 0208 	add.w	r2, r7, #8
 800147a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800147c:	4413      	add	r3, r2
 800147e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001482:	701a      	strb	r2, [r3, #0]
                break;
 8001484:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001488:	3301      	adds	r3, #1
 800148a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800148c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800148e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001490:	d80d      	bhi.n	80014ae <parse_number+0xde>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00a      	beq.n	80014ae <parse_number+0xde>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800149e:	441a      	add	r2, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d3b3      	bcc.n	8001410 <parse_number+0x40>
        }
    }
loop_end:
 80014a8:	e001      	b.n	80014ae <parse_number+0xde>
                goto loop_end;
 80014aa:	bf00      	nop
 80014ac:	e000      	b.n	80014b0 <parse_number+0xe0>
loop_end:
 80014ae:	bf00      	nop
    number_c_string[i] = '\0';
 80014b0:	f107 0208 	add.w	r2, r7, #8
 80014b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014b6:	4413      	add	r3, r2
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80014bc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00e fd2c 	bl	800ff24 <strtod>
 80014cc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80014d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d101      	bne.n	80014de <parse_number+0x10e>
    {
        return false; /* parse_error */
 80014da:	2300      	movs	r3, #0
 80014dc:	e036      	b.n	800154c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80014e4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80014e8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001558 <parse_number+0x188>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80014f2:	f7ff faef 	bl	8000ad4 <__aeabi_dcmpge>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d004      	beq.n	8001506 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	e015      	b.n	8001532 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <parse_number+0x194>)
 800150c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001510:	f7ff fad6 	bl	8000ac0 <__aeabi_dcmple>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	e006      	b.n	8001532 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001524:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001528:	f7ff fafe 	bl	8000b28 <__aeabi_d2iz>
 800152c:	4602      	mov	r2, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2208      	movs	r2, #8
 8001536:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800153e:	f107 0208 	add.w	r2, r7, #8
 8001542:	1a8a      	subs	r2, r1, r2
 8001544:	441a      	add	r2, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	609a      	str	r2, [r3, #8]
    return true;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3760      	adds	r7, #96	@ 0x60
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	f3af 8000 	nop.w
 8001558:	ffc00000 	.word	0xffc00000
 800155c:	41dfffff 	.word	0x41dfffff
 8001560:	04007fe5 	.word	0x04007fe5
 8001564:	c1e00000 	.word	0xc1e00000

08001568 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	e04c      	b.n	8001618 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4413      	add	r3, r2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b2f      	cmp	r3, #47	@ 0x2f
 8001588:	d90f      	bls.n	80015aa <parse_hex4+0x42>
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b39      	cmp	r3, #57	@ 0x39
 8001594:	d809      	bhi.n	80015aa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	3b30      	subs	r3, #48	@ 0x30
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e02d      	b.n	8001606 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b40      	cmp	r3, #64	@ 0x40
 80015b4:	d90f      	bls.n	80015d6 <parse_hex4+0x6e>
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b46      	cmp	r3, #70	@ 0x46
 80015c0:	d809      	bhi.n	80015d6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	3b37      	subs	r3, #55	@ 0x37
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e017      	b.n	8001606 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b60      	cmp	r3, #96	@ 0x60
 80015e0:	d90f      	bls.n	8001602 <parse_hex4+0x9a>
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b66      	cmp	r3, #102	@ 0x66
 80015ec:	d809      	bhi.n	8001602 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	3b57      	subs	r3, #87	@ 0x57
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e001      	b.n	8001606 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001602:	2300      	movs	r3, #0
 8001604:	e00c      	b.n	8001620 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d802      	bhi.n	8001612 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3301      	adds	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d9af      	bls.n	800157e <parse_hex4+0x16>
        }
    }

    return h;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b05      	cmp	r3, #5
 8001664:	f340 80b7 	ble.w	80017d6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	3302      	adds	r3, #2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff7b 	bl	8001568 <parse_hex4>
 8001672:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800167a:	d304      	bcc.n	8001686 <utf16_literal_to_utf8+0x5a>
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001682:	f0c0 80aa 	bcc.w	80017da <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800168c:	d337      	bcc.n	80016fe <utf16_literal_to_utf8+0xd2>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001694:	d233      	bcs.n	80016fe <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	3306      	adds	r3, #6
 800169a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80016a0:	230c      	movs	r3, #12
 80016a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	f340 8096 	ble.w	80017de <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80016b8:	f040 8093 	bne.w	80017e2 <utf16_literal_to_utf8+0x1b6>
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b75      	cmp	r3, #117	@ 0x75
 80016c4:	f040 808d 	bne.w	80017e2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3302      	adds	r3, #2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff4b 	bl	8001568 <parse_hex4>
 80016d2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80016da:	f0c0 8084 	bcc.w	80017e6 <utf16_literal_to_utf8+0x1ba>
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80016e4:	d27f      	bcs.n	80017e6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	029a      	lsls	r2, r3, #10
 80016ea:	4b43      	ldr	r3, [pc, #268]	@ (80017f8 <utf16_literal_to_utf8+0x1cc>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80016f4:	4313      	orrs	r3, r2
 80016f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 80016fc:	e004      	b.n	8001708 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80016fe:	2306      	movs	r3, #6
 8001700:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	2b7f      	cmp	r3, #127	@ 0x7f
 800170c:	d803      	bhi.n	8001716 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001714:	e01f      	b.n	8001756 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800171c:	d206      	bcs.n	800172c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800171e:	2302      	movs	r3, #2
 8001720:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001724:	23c0      	movs	r3, #192	@ 0xc0
 8001726:	f887 3020 	strb.w	r3, [r7, #32]
 800172a:	e014      	b.n	8001756 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001732:	d206      	bcs.n	8001742 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001734:	2303      	movs	r3, #3
 8001736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800173a:	23e0      	movs	r3, #224	@ 0xe0
 800173c:	f887 3020 	strb.w	r3, [r7, #32]
 8001740:	e009      	b.n	8001756 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001748:	d24f      	bcs.n	80017ea <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800174a:	2304      	movs	r3, #4
 800174c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001750:	23f0      	movs	r3, #240	@ 0xf0
 8001752:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001756:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800175a:	3b01      	subs	r3, #1
 800175c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001760:	e015      	b.n	800178e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800176a:	b2da      	uxtb	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001774:	440b      	add	r3, r1
 8001776:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001784:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001788:	3b01      	subs	r3, #1
 800178a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800178e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1e5      	bne.n	8001762 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001796:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800179a:	2b01      	cmp	r3, #1
 800179c:	d909      	bls.n	80017b2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e007      	b.n	80017c2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017ca:	441a      	add	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80017d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80017d4:	e00b      	b.n	80017ee <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80017d6:	bf00      	nop
 80017d8:	e008      	b.n	80017ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80017da:	bf00      	nop
 80017dc:	e006      	b.n	80017ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80017de:	bf00      	nop
 80017e0:	e004      	b.n	80017ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80017e2:	bf00      	nop
 80017e4:	e002      	b.n	80017ec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80017e6:	bf00      	nop
 80017e8:	e000      	b.n	80017ec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80017ea:	bf00      	nop

fail:
    return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3728      	adds	r7, #40	@ 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	000ffc00 	.word	0x000ffc00

080017fc <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	3301      	adds	r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	3301      	adds	r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b22      	cmp	r3, #34	@ 0x22
 8001838:	f040 8103 	bne.w	8001a42 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001844:	e017      	b.n	8001876 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b5c      	cmp	r3, #92	@ 0x5c
 800184c:	d110      	bne.n	8001870 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	461a      	mov	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	f080 80f1 	bcs.w	8001a46 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	3301      	adds	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
                input_end++;
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	3301      	adds	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	3301      	adds	r3, #1
 8001874:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a3a      	ldr	r2, [r7, #32]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	461a      	mov	r2, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d203      	bcs.n	8001890 <parse_string+0x94>
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b22      	cmp	r3, #34	@ 0x22
 800188e:	d1da      	bne.n	8001846 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	461a      	mov	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	f080 80d3 	bcs.w	8001a4a <parse_string+0x24e>
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b22      	cmp	r3, #34	@ 0x22
 80018aa:	f040 80ce 	bne.w	8001a4a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4413      	add	r3, r2
 80018b8:	6a3a      	ldr	r2, [r7, #32]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	3201      	adds	r2, #1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4798      	blx	r3
 80018d0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80ba 	beq.w	8001a4e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80018de:	e094      	b.n	8001a0a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80018e6:	d008      	beq.n	80018fa <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80018e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ea:	1c53      	adds	r3, r2, #1
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1c59      	adds	r1, r3, #1
 80018f2:	60f9      	str	r1, [r7, #12]
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e087      	b.n	8001a0a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80018fe:	6a3a      	ldr	r2, [r7, #32]
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	f340 80a4 	ble.w	8001a52 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	3301      	adds	r3, #1
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b75      	cmp	r3, #117	@ 0x75
 8001912:	f300 80a0 	bgt.w	8001a56 <parse_string+0x25a>
 8001916:	2b5c      	cmp	r3, #92	@ 0x5c
 8001918:	da04      	bge.n	8001924 <parse_string+0x128>
 800191a:	2b22      	cmp	r3, #34	@ 0x22
 800191c:	d05c      	beq.n	80019d8 <parse_string+0x1dc>
 800191e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001920:	d05a      	beq.n	80019d8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001922:	e098      	b.n	8001a56 <parse_string+0x25a>
            switch (input_pointer[1])
 8001924:	3b5c      	subs	r3, #92	@ 0x5c
 8001926:	2b19      	cmp	r3, #25
 8001928:	f200 8095 	bhi.w	8001a56 <parse_string+0x25a>
 800192c:	a201      	add	r2, pc, #4	@ (adr r2, 8001934 <parse_string+0x138>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	080019d9 	.word	0x080019d9
 8001938:	08001a57 	.word	0x08001a57
 800193c:	08001a57 	.word	0x08001a57
 8001940:	08001a57 	.word	0x08001a57
 8001944:	08001a57 	.word	0x08001a57
 8001948:	08001a57 	.word	0x08001a57
 800194c:	0800199d 	.word	0x0800199d
 8001950:	08001a57 	.word	0x08001a57
 8001954:	08001a57 	.word	0x08001a57
 8001958:	08001a57 	.word	0x08001a57
 800195c:	080019a9 	.word	0x080019a9
 8001960:	08001a57 	.word	0x08001a57
 8001964:	08001a57 	.word	0x08001a57
 8001968:	08001a57 	.word	0x08001a57
 800196c:	08001a57 	.word	0x08001a57
 8001970:	08001a57 	.word	0x08001a57
 8001974:	08001a57 	.word	0x08001a57
 8001978:	08001a57 	.word	0x08001a57
 800197c:	080019b5 	.word	0x080019b5
 8001980:	08001a57 	.word	0x08001a57
 8001984:	08001a57 	.word	0x08001a57
 8001988:	08001a57 	.word	0x08001a57
 800198c:	080019c1 	.word	0x080019c1
 8001990:	08001a57 	.word	0x08001a57
 8001994:	080019cd 	.word	0x080019cd
 8001998:	080019e9 	.word	0x080019e9
                    *output_pointer++ = '\b';
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60fa      	str	r2, [r7, #12]
 80019a2:	2208      	movs	r2, #8
 80019a4:	701a      	strb	r2, [r3, #0]
                    break;
 80019a6:	e02c      	b.n	8001a02 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	60fa      	str	r2, [r7, #12]
 80019ae:	220c      	movs	r2, #12
 80019b0:	701a      	strb	r2, [r3, #0]
                    break;
 80019b2:	e026      	b.n	8001a02 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60fa      	str	r2, [r7, #12]
 80019ba:	220a      	movs	r2, #10
 80019bc:	701a      	strb	r2, [r3, #0]
                    break;
 80019be:	e020      	b.n	8001a02 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	60fa      	str	r2, [r7, #12]
 80019c6:	220d      	movs	r2, #13
 80019c8:	701a      	strb	r2, [r3, #0]
                    break;
 80019ca:	e01a      	b.n	8001a02 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60fa      	str	r2, [r7, #12]
 80019d2:	2209      	movs	r2, #9
 80019d4:	701a      	strb	r2, [r3, #0]
                    break;
 80019d6:	e014      	b.n	8001a02 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1c59      	adds	r1, r3, #1
 80019e0:	60f9      	str	r1, [r7, #12]
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	701a      	strb	r2, [r3, #0]
                    break;
 80019e6:	e00c      	b.n	8001a02 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	461a      	mov	r2, r3
 80019ee:	6a39      	ldr	r1, [r7, #32]
 80019f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019f2:	f7ff fe1b 	bl	800162c <utf16_literal_to_utf8>
 80019f6:	4603      	mov	r3, r0
 80019f8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d02c      	beq.n	8001a5a <parse_string+0x25e>
                    break;
 8001a00:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a06:	4413      	add	r3, r2
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	f4ff af66 	bcc.w	80018e0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6a3a      	ldr	r2, [r7, #32]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	609a      	str	r2, [r3, #8]

    return true;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e01e      	b.n	8001a80 <parse_string+0x284>
        goto fail;
 8001a42:	bf00      	nop
 8001a44:	e00a      	b.n	8001a5c <parse_string+0x260>
                    goto fail;
 8001a46:	bf00      	nop
 8001a48:	e008      	b.n	8001a5c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001a4a:	bf00      	nop
 8001a4c:	e006      	b.n	8001a5c <parse_string+0x260>
            goto fail; /* allocation failure */
 8001a4e:	bf00      	nop
 8001a50:	e004      	b.n	8001a5c <parse_string+0x260>
                goto fail;
 8001a52:	bf00      	nop
 8001a54:	e002      	b.n	8001a5c <parse_string+0x260>
                    goto fail;
 8001a56:	bf00      	nop
 8001a58:	e000      	b.n	8001a5c <parse_string+0x260>
                        goto fail;
 8001a5a:	bf00      	nop

fail:
    if (output != NULL)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	69f8      	ldr	r0, [r7, #28]
 8001a68:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3728      	adds	r7, #40	@ 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <buffer_skip_whitespace+0x16>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e02c      	b.n	8001afc <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <buffer_skip_whitespace+0x2c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d306      	bcc.n	8001ac2 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	e021      	b.n	8001afc <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00d      	beq.n	8001ae4 <buffer_skip_whitespace+0x5c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <buffer_skip_whitespace+0x5c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d9e9      	bls.n	8001ab8 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d104      	bne.n	8001afa <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	1e5a      	subs	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <skip_utf8_bom+0x1e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <skip_utf8_bom+0x1e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <skip_utf8_bom+0x22>
    {
        return NULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e01c      	b.n	8001b64 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d018      	beq.n	8001b62 <skip_utf8_bom+0x5a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	1d1a      	adds	r2, r3, #4
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d211      	bcs.n	8001b62 <skip_utf8_bom+0x5a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4413      	add	r3, r2
 8001b48:	2203      	movs	r2, #3
 8001b4a:	4908      	ldr	r1, [pc, #32]	@ (8001b6c <skip_utf8_bom+0x64>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f00f fa93 	bl	8011078 <strncmp>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d104      	bne.n	8001b62 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	1cda      	adds	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001b62:	687b      	ldr	r3, [r7, #4]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	08013a20 	.word	0x08013a20

08001b70 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e00c      	b.n	8001ba0 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7fe fb5a 	bl	8000240 <strlen>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	3301      	adds	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	6979      	ldr	r1, [r7, #20]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f805 	bl	8001ba8 <cJSON_ParseWithLengthOpts>
 8001b9e:	4603      	mov	r3, r0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08e      	sub	sp, #56	@ 0x38
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001bb6:	f107 0318 	add.w	r3, r7, #24
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001bce:	4b41      	ldr	r3, [pc, #260]	@ (8001cd4 <cJSON_ParseWithLengthOpts+0x12c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd4 <cJSON_ParseWithLengthOpts+0x12c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d042      	beq.n	8001c66 <cJSON_ParseWithLengthOpts+0xbe>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d03f      	beq.n	8001c66 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001bf2:	4a39      	ldr	r2, [pc, #228]	@ (8001cd8 <cJSON_ParseWithLengthOpts+0x130>)
 8001bf4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001bfe:	4836      	ldr	r0, [pc, #216]	@ (8001cd8 <cJSON_ParseWithLengthOpts+0x130>)
 8001c00:	f7ff fb7c 	bl	80012fc <cJSON_New_Item>
 8001c04:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02e      	beq.n	8001c6a <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff79 	bl	8001b08 <skip_utf8_bom>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff35 	bl	8001a88 <buffer_skip_whitespace>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4619      	mov	r1, r3
 8001c22:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001c24:	f000 f868 	bl	8001cf8 <parse_value>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01f      	beq.n	8001c6e <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00e      	beq.n	8001c52 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001c34:	f107 0318 	add.w	r3, r7, #24
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff25 	bl	8001a88 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001c3e:	6a3a      	ldr	r2, [r7, #32]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d215      	bcs.n	8001c72 <cJSON_ParseWithLengthOpts+0xca>
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c64:	e031      	b.n	8001cca <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001c66:	bf00      	nop
 8001c68:	e004      	b.n	8001c74 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001c6a:	bf00      	nop
 8001c6c:	e002      	b.n	8001c74 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001c6e:	bf00      	nop
 8001c70:	e000      	b.n	8001c74 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001c72:	bf00      	nop

fail:
    if (item != NULL)
 8001c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001c7a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001c7c:	f7ff fb54 	bl	8001328 <cJSON_Delete>
    }

    if (value != NULL)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d020      	beq.n	8001cc8 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001c8e:	6a3a      	ldr	r2, [r7, #32]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d202      	bcs.n	8001c9c <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e005      	b.n	8001ca8 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	441a      	add	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <cJSON_ParseWithLengthOpts+0x12c>)
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cc4:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3738      	adds	r7, #56	@ 0x38
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000268 	.word	0x20000268
 8001cd8:	20000008 	.word	0x20000008

08001cdc <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff41 	bl	8001b70 <cJSON_ParseWithOpts>
 8001cee:	4603      	mov	r3, r0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <parse_value+0x18>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <parse_value+0x1c>
    {
        return false; /* no input */
 8001d10:	2300      	movs	r3, #0
 8001d12:	e0d2      	b.n	8001eba <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01d      	beq.n	8001d56 <parse_value+0x5e>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	1d1a      	adds	r2, r3, #4
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d816      	bhi.n	8001d56 <parse_value+0x5e>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4413      	add	r3, r2
 8001d32:	2204      	movs	r2, #4
 8001d34:	4963      	ldr	r1, [pc, #396]	@ (8001ec4 <parse_value+0x1cc>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	f00f f99e 	bl	8011078 <strncmp>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2204      	movs	r2, #4
 8001d46:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	1d1a      	adds	r2, r3, #4
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	609a      	str	r2, [r3, #8]
        return true;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0b1      	b.n	8001eba <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d01d      	beq.n	8001d98 <parse_value+0xa0>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	1d5a      	adds	r2, r3, #5
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d816      	bhi.n	8001d98 <parse_value+0xa0>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4413      	add	r3, r2
 8001d74:	2205      	movs	r2, #5
 8001d76:	4954      	ldr	r1, [pc, #336]	@ (8001ec8 <parse_value+0x1d0>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00f f97d 	bl	8011078 <strncmp>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	1d5a      	adds	r2, r3, #5
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	609a      	str	r2, [r3, #8]
        return true;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e090      	b.n	8001eba <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d020      	beq.n	8001de0 <parse_value+0xe8>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	1d1a      	adds	r2, r3, #4
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d819      	bhi.n	8001de0 <parse_value+0xe8>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4413      	add	r3, r2
 8001db6:	2204      	movs	r2, #4
 8001db8:	4944      	ldr	r1, [pc, #272]	@ (8001ecc <parse_value+0x1d4>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00f f95c 	bl	8011078 <strncmp>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	1d1a      	adds	r2, r3, #4
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	609a      	str	r2, [r3, #8]
        return true;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e06c      	b.n	8001eba <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d013      	beq.n	8001e0e <parse_value+0x116>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d20d      	bcs.n	8001e0e <parse_value+0x116>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b22      	cmp	r3, #34	@ 0x22
 8001e00:	d105      	bne.n	8001e0e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001e02:	6839      	ldr	r1, [r7, #0]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fcf9 	bl	80017fc <parse_string>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	e055      	b.n	8001eba <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d023      	beq.n	8001e5c <parse_value+0x164>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d21d      	bcs.n	8001e5c <parse_value+0x164>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b2d      	cmp	r3, #45	@ 0x2d
 8001e2e:	d00f      	beq.n	8001e50 <parse_value+0x158>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e3e:	d90d      	bls.n	8001e5c <parse_value+0x164>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b39      	cmp	r3, #57	@ 0x39
 8001e4e:	d805      	bhi.n	8001e5c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001e50:	6839      	ldr	r1, [r7, #0]
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fabc 	bl	80013d0 <parse_number>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	e02e      	b.n	8001eba <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d013      	beq.n	8001e8a <parse_value+0x192>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d20d      	bcs.n	8001e8a <parse_value+0x192>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4413      	add	r3, r2
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e7c:	d105      	bne.n	8001e8a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001e7e:	6839      	ldr	r1, [r7, #0]
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f825 	bl	8001ed0 <parse_array>
 8001e86:	4603      	mov	r3, r0
 8001e88:	e017      	b.n	8001eba <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <parse_value+0x1c0>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d20d      	bcs.n	8001eb8 <parse_value+0x1c0>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b7b      	cmp	r3, #123	@ 0x7b
 8001eaa:	d105      	bne.n	8001eb8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001eac:	6839      	ldr	r1, [r7, #0]
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8d2 	bl	8002058 <parse_object>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	e000      	b.n	8001eba <parse_value+0x1c2>
    }

    return false;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	080139f8 	.word	0x080139f8
 8001ec8:	08013a24 	.word	0x08013a24
 8001ecc:	08013a2c 	.word	0x08013a2c

08001ed0 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eea:	d301      	bcc.n	8001ef0 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001eec:	2300      	movs	r3, #0
 8001eee:	e0af      	b.n	8002050 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b5b      	cmp	r3, #91	@ 0x5b
 8001f08:	f040 8094 	bne.w	8002034 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001f16:	6838      	ldr	r0, [r7, #0]
 8001f18:	f7ff fdb6 	bl	8001a88 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00d      	beq.n	8001f3e <parse_array+0x6e>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d207      	bcs.n	8001f3e <parse_array+0x6e>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b5d      	cmp	r3, #93	@ 0x5d
 8001f3c:	d061      	beq.n	8002002 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <parse_array+0x80>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d305      	bcc.n	8001f5c <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	609a      	str	r2, [r3, #8]
        goto fail;
 8001f5a:	e072      	b.n	8002042 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	1e5a      	subs	r2, r3, #1
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	3310      	adds	r3, #16
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f9c6 	bl	80012fc <cJSON_New_Item>
 8001f70:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d05f      	beq.n	8002038 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d104      	bne.n	8001f88 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e007      	b.n	8001f98 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001fa2:	6838      	ldr	r0, [r7, #0]
 8001fa4:	f7ff fd70 	bl	8001a88 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001fa8:	6839      	ldr	r1, [r7, #0]
 8001faa:	6938      	ldr	r0, [r7, #16]
 8001fac:	f7ff fea4 	bl	8001cf8 <parse_value>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d042      	beq.n	800203c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001fb6:	6838      	ldr	r0, [r7, #0]
 8001fb8:	f7ff fd66 	bl	8001a88 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00d      	beq.n	8001fde <parse_array+0x10e>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d207      	bcs.n	8001fde <parse_array+0x10e>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b2c      	cmp	r3, #44	@ 0x2c
 8001fdc:	d0c3      	beq.n	8001f66 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d02d      	beq.n	8002040 <parse_array+0x170>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d227      	bcs.n	8002040 <parse_array+0x170>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b5d      	cmp	r3, #93	@ 0x5d
 8001ffe:	d11f      	bne.n	8002040 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002000:	e000      	b.n	8002004 <parse_array+0x134>
        goto success;
 8002002:	bf00      	nop
    input_buffer->depth--;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <parse_array+0x14a>
        head->prev = current_item;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	609a      	str	r2, [r3, #8]

    return true;
 8002030:	2301      	movs	r3, #1
 8002032:	e00d      	b.n	8002050 <parse_array+0x180>
        goto fail;
 8002034:	bf00      	nop
 8002036:	e004      	b.n	8002042 <parse_array+0x172>
            goto fail; /* allocation failure */
 8002038:	bf00      	nop
 800203a:	e002      	b.n	8002042 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800203c:	bf00      	nop
 800203e:	e000      	b.n	8002042 <parse_array+0x172>
        goto fail; /* expected end of array */
 8002040:	bf00      	nop

fail:
    if (head != NULL)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002048:	6978      	ldr	r0, [r7, #20]
 800204a:	f7ff f96d 	bl	8001328 <cJSON_Delete>
    }

    return false;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002072:	d301      	bcc.n	8002078 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002074:	2300      	movs	r3, #0
 8002076:	e0ea      	b.n	800224e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80d0 	beq.w	800222a <parse_object+0x1d2>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	f080 80c9 	bcs.w	800222a <parse_object+0x1d2>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4413      	add	r3, r2
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b7b      	cmp	r3, #123	@ 0x7b
 80020a6:	f040 80c0 	bne.w	800222a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80020b4:	6838      	ldr	r0, [r7, #0]
 80020b6:	f7ff fce7 	bl	8001a88 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00e      	beq.n	80020de <parse_object+0x86>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d208      	bcs.n	80020de <parse_object+0x86>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b7d      	cmp	r3, #125	@ 0x7d
 80020da:	f000 808d 	beq.w	80021f8 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <parse_object+0x98>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d305      	bcc.n	80020fc <parse_object+0xa4>
    {
        input_buffer->offset--;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	609a      	str	r2, [r3, #8]
        goto fail;
 80020fa:	e0a1      	b.n	8002240 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	1e5a      	subs	r2, r3, #1
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3310      	adds	r3, #16
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f8f6 	bl	80012fc <cJSON_New_Item>
 8002110:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 808a 	beq.w	800222e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d104      	bne.n	800212a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e007      	b.n	800213a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002144:	6838      	ldr	r0, [r7, #0]
 8002146:	f7ff fc9f 	bl	8001a88 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	6938      	ldr	r0, [r7, #16]
 800214e:	f7ff fb55 	bl	80017fc <parse_string>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d06c      	beq.n	8002232 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002158:	6838      	ldr	r0, [r7, #0]
 800215a:	f7ff fc95 	bl	8001a88 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d061      	beq.n	8002236 <parse_object+0x1de>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	d25b      	bcs.n	8002236 <parse_object+0x1de>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4413      	add	r3, r2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b3a      	cmp	r3, #58	@ 0x3a
 800218c:	d153      	bne.n	8002236 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f7ff fc75 	bl	8001a88 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	6938      	ldr	r0, [r7, #16]
 80021a2:	f7ff fda9 	bl	8001cf8 <parse_value>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d046      	beq.n	800223a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80021ac:	6838      	ldr	r0, [r7, #0]
 80021ae:	f7ff fc6b 	bl	8001a88 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00d      	beq.n	80021d4 <parse_object+0x17c>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d207      	bcs.n	80021d4 <parse_object+0x17c>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80021d2:	d098      	beq.n	8002106 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d031      	beq.n	800223e <parse_object+0x1e6>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d22b      	bcs.n	800223e <parse_object+0x1e6>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b7d      	cmp	r3, #125	@ 0x7d
 80021f4:	d123      	bne.n	800223e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 80021f6:	e000      	b.n	80021fa <parse_object+0x1a2>
        goto success; /* empty object */
 80021f8:	bf00      	nop
    input_buffer->depth--;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	1e5a      	subs	r2, r3, #1
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <parse_object+0x1b8>
        head->prev = current_item;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2240      	movs	r2, #64	@ 0x40
 8002214:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	609a      	str	r2, [r3, #8]
    return true;
 8002226:	2301      	movs	r3, #1
 8002228:	e011      	b.n	800224e <parse_object+0x1f6>
        goto fail; /* not an object */
 800222a:	bf00      	nop
 800222c:	e008      	b.n	8002240 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800222e:	bf00      	nop
 8002230:	e006      	b.n	8002240 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002232:	bf00      	nop
 8002234:	e004      	b.n	8002240 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002236:	bf00      	nop
 8002238:	e002      	b.n	8002240 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800223a:	bf00      	nop
 800223c:	e000      	b.n	8002240 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800223e:	bf00      	nop

fail:
    if (head != NULL)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002246:	6978      	ldr	r0, [r7, #20]
 8002248:	f7ff f86e 	bl	8001328 <cJSON_Delete>
    }

    return false;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <get_object_item+0x1c>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <get_object_item+0x20>
    {
        return NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	e033      	b.n	80022de <get_object_item+0x88>
    }

    current_element = object->child;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d017      	beq.n	80022b2 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002282:	e002      	b.n	800228a <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01c      	beq.n	80022ca <get_object_item+0x74>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d018      	beq.n	80022ca <get_object_item+0x74>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4619      	mov	r1, r3
 800229e:	68b8      	ldr	r0, [r7, #8]
 80022a0:	f7fd ff6e 	bl	8000180 <strcmp>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ec      	bne.n	8002284 <get_object_item+0x2e>
 80022aa:	e00e      	b.n	80022ca <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <get_object_item+0x74>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4619      	mov	r1, r3
 80022be:	68b8      	ldr	r0, [r7, #8]
 80022c0:	f7fe ffb0 	bl	8001224 <case_insensitive_strcmp>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <get_object_item+0x82>
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <get_object_item+0x86>
        return NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	e000      	b.n	80022de <get_object_item+0x88>
    }

    return current_element;
 80022dc:	697b      	ldr	r3, [r7, #20]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6839      	ldr	r1, [r7, #0]
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ffae 	bl	8002256 <get_object_item>
 80022fa:	4603      	mov	r3, r0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <cJSON_IsNumber+0x12>
    {
        return false;
 8002312:	2300      	movs	r3, #0
 8002314:	e007      	b.n	8002326 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b08      	cmp	r3, #8
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <LL_EXTI_EnableIT_32_63+0x24>)
 800233e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002342:	4905      	ldr	r1, [pc, #20]	@ (8002358 <LL_EXTI_EnableIT_32_63+0x24>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	58000800 	.word	0x58000800

0800235c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002368:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800236a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4313      	orrs	r3, r2
 8002372:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002378:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002380:	68fb      	ldr	r3, [r7, #12]
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8002396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800239a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800239e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80023aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ae:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023b8:	68fb      	ldr	r3, [r7, #12]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80023ca:	f002 fa75 	bl	80048b8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80023ce:	f002 fa79 	bl	80048c4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80023d2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80023d6:	f7ff ffad 	bl	8002334 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80023da:	f00b fc2d 	bl	800dc38 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80023de:	f000 f821 	bl	8002424 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80023e2:	f000 f8c1 	bl	8002568 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80023e6:	bf00      	nop
}
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80023ec:	b5b0      	push	{r4, r5, r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <APPD_EnableCPU2+0x34>)
 80023f4:	1d3c      	adds	r4, r7, #4
 80023f6:	461d      	mov	r5, r3
 80023f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002400:	c403      	stmia	r4!, {r0, r1}
 8002402:	8022      	strh	r2, [r4, #0]
 8002404:	3402      	adds	r4, #2
 8002406:	0c13      	lsrs	r3, r2, #16
 8002408:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800240a:	f00b fb6d 	bl	800dae8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f00a fdfe 	bl	800d012 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8002416:	bf00      	nop
}
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bdb0      	pop	{r4, r5, r7, pc}
 800241e:	bf00      	nop
 8002420:	08013a34 	.word	0x08013a34

08002424 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8002444:	2300      	movs	r3, #0
 8002446:	77fb      	strb	r3, [r7, #31]
 8002448:	e036      	b.n	80024b8 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	4a43      	ldr	r2, [pc, #268]	@ (800255c <APPD_SetCPU2GpioConfig+0x138>)
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	799b      	ldrb	r3, [r3, #6]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d02c      	beq.n	80024b2 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8002458:	7ffb      	ldrb	r3, [r7, #31]
 800245a:	4a40      	ldr	r2, [pc, #256]	@ (800255c <APPD_SetCPU2GpioConfig+0x138>)
 800245c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002460:	4a3f      	ldr	r2, [pc, #252]	@ (8002560 <APPD_SetCPU2GpioConfig+0x13c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01b      	beq.n	800249e <APPD_SetCPU2GpioConfig+0x7a>
 8002466:	4a3e      	ldr	r2, [pc, #248]	@ (8002560 <APPD_SetCPU2GpioConfig+0x13c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d821      	bhi.n	80024b0 <APPD_SetCPU2GpioConfig+0x8c>
 800246c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002470:	d003      	beq.n	800247a <APPD_SetCPU2GpioConfig+0x56>
 8002472:	4a3c      	ldr	r2, [pc, #240]	@ (8002564 <APPD_SetCPU2GpioConfig+0x140>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8002478:	e01a      	b.n	80024b0 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	4a37      	ldr	r2, [pc, #220]	@ (800255c <APPD_SetCPU2GpioConfig+0x138>)
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	889a      	ldrh	r2, [r3, #4]
 8002484:	8bbb      	ldrh	r3, [r7, #28]
 8002486:	4313      	orrs	r3, r2
 8002488:	83bb      	strh	r3, [r7, #28]
          break;
 800248a:	e012      	b.n	80024b2 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800248c:	7ffb      	ldrb	r3, [r7, #31]
 800248e:	4a33      	ldr	r2, [pc, #204]	@ (800255c <APPD_SetCPU2GpioConfig+0x138>)
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	889a      	ldrh	r2, [r3, #4]
 8002496:	8b7b      	ldrh	r3, [r7, #26]
 8002498:	4313      	orrs	r3, r2
 800249a:	837b      	strh	r3, [r7, #26]
          break;
 800249c:	e009      	b.n	80024b2 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800249e:	7ffb      	ldrb	r3, [r7, #31]
 80024a0:	4a2e      	ldr	r2, [pc, #184]	@ (800255c <APPD_SetCPU2GpioConfig+0x138>)
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	889a      	ldrh	r2, [r3, #4]
 80024a8:	8b3b      	ldrh	r3, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	833b      	strh	r3, [r7, #24]
          break;
 80024ae:	e000      	b.n	80024b2 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 80024b0:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80024b2:	7ffb      	ldrb	r3, [r7, #31]
 80024b4:	3301      	adds	r3, #1
 80024b6:	77fb      	strb	r3, [r7, #31]
 80024b8:	7ffb      	ldrb	r3, [r7, #31]
 80024ba:	2b25      	cmp	r3, #37	@ 0x25
 80024bc:	d9c5      	bls.n	800244a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c6:	2303      	movs	r3, #3
 80024c8:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80024ca:	8bbb      	ldrh	r3, [r7, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d014      	beq.n	80024fa <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80024d0:	8bbb      	ldrh	r3, [r7, #28]
 80024d2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7ff ff41 	bl	800235c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80024da:	2001      	movs	r0, #1
 80024dc:	f7ff ff57 	bl	800238e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	4619      	mov	r1, r3
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024e8:	f002 ff62 	bl	80053b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80024ec:	8bbb      	ldrh	r3, [r7, #28]
 80024ee:	2200      	movs	r2, #0
 80024f0:	4619      	mov	r1, r3
 80024f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f6:	f003 f9a9 	bl	800584c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80024fa:	8b7b      	ldrh	r3, [r7, #26]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8002500:	8b7b      	ldrh	r3, [r7, #26]
 8002502:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002504:	2002      	movs	r0, #2
 8002506:	f7ff ff29 	bl	800235c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800250a:	2002      	movs	r0, #2
 800250c:	f7ff ff3f 	bl	800238e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	4619      	mov	r1, r3
 8002514:	4813      	ldr	r0, [pc, #76]	@ (8002564 <APPD_SetCPU2GpioConfig+0x140>)
 8002516:	f002 ff4b 	bl	80053b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800251a:	8b7b      	ldrh	r3, [r7, #26]
 800251c:	2200      	movs	r2, #0
 800251e:	4619      	mov	r1, r3
 8002520:	4810      	ldr	r0, [pc, #64]	@ (8002564 <APPD_SetCPU2GpioConfig+0x140>)
 8002522:	f003 f993 	bl	800584c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8002526:	8b3b      	ldrh	r3, [r7, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 800252c:	8b3b      	ldrh	r3, [r7, #24]
 800252e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002530:	2004      	movs	r0, #4
 8002532:	f7ff ff13 	bl	800235c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8002536:	2004      	movs	r0, #4
 8002538:	f7ff ff29 	bl	800238e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	4619      	mov	r1, r3
 8002540:	4807      	ldr	r0, [pc, #28]	@ (8002560 <APPD_SetCPU2GpioConfig+0x13c>)
 8002542:	f002 ff35 	bl	80053b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8002546:	8b3b      	ldrh	r3, [r7, #24]
 8002548:	2200      	movs	r2, #0
 800254a:	4619      	mov	r1, r3
 800254c:	4804      	ldr	r0, [pc, #16]	@ (8002560 <APPD_SetCPU2GpioConfig+0x13c>)
 800254e:	f003 f97d 	bl	800584c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8002552:	bf00      	nop
 8002554:	bf00      	nop
}
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	08013b44 	.word	0x08013b44
 8002560:	48000800 	.word	0x48000800
 8002564:	48000400 	.word	0x48000400

08002568 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 800256c:	bf00      	nop
}
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8002576:	b580      	push	{r7, lr}
 8002578:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800257a:	f001 fba7 	bl	8003ccc <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 800257e:	bf00      	nop
}
 8002580:	bd80      	pop	{r7, pc}

08002582 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	460b      	mov	r3, r1
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8002590:	897a      	ldrh	r2, [r7, #10]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	2000      	movs	r0, #0
 8002598:	f001 f8c6 	bl	8003728 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 800259c:	bf00      	nop
}
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80025ac:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <LL_C2_PWR_SetPowerMode+0x28>)
 80025ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025b2:	f023 0207 	bic.w	r2, r3, #7
 80025b6:	4905      	ldr	r1, [pc, #20]	@ (80025cc <LL_C2_PWR_SetPowerMode+0x28>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	58000400 	.word	0x58000400

080025d0 <LL_EXTI_EnableIT_32_63>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <LL_EXTI_EnableIT_32_63+0x24>)
 80025da:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80025de:	4905      	ldr	r1, [pc, #20]	@ (80025f4 <LL_EXTI_EnableIT_32_63+0x24>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	58000800 	.word	0x58000800

080025f8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002604:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002606:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002612:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	cafecafe 	.word	0xcafecafe

08002634 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <LL_DBGMCU_GetDeviceID+0x18>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e0042000 	.word	0xe0042000

08002678 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800267c:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <LL_DBGMCU_GetRevisionID+0x18>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	b29b      	uxth	r3, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e0042000 	.word	0xe0042000

08002694 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <LL_LPM_EnableSleep+0x1c>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <LL_LPM_EnableSleep+0x1c>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	6113      	str	r3, [r2, #16]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	22ff      	movs	r2, #255	@ 0xff
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	22ca      	movs	r2, #202	@ 0xca
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2253      	movs	r2, #83	@ 0x53
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 0207 	bic.w	r2, r3, #7
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	609a      	str	r2, [r3, #8]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <MX_APPE_Config>:
static void RxCpltCallback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <MX_APPE_Config+0x18>)
 800271a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800271e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002720:	f000 f828 	bl	8002774 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8002724:	f000 f82d 	bl	8002782 <Config_HSE>

  return;
 8002728:	bf00      	nop
}
 800272a:	bd80      	pop	{r7, pc}
 800272c:	58004000 	.word	0x58004000

08002730 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8002734:	f000 f839 	bl	80027aa <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002738:	f000 f852 	bl	80027e0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800273c:	4905      	ldr	r1, [pc, #20]	@ (8002754 <MX_APPE_Init+0x24>)
 800273e:	2000      	movs	r0, #0
 8002740:	f000 fddc 	bl	80032fc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8002744:	f7ff fe3f 	bl	80023c6 <APPD_Init>
  RxUART_Init();
 8002748:	f000 f986 	bl	8002a58 <RxUART_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800274c:	f000 f856 	bl	80027fc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8002750:	bf00      	nop
}
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000574 	.word	0x20000574

08002758 <Init_Smps>:

void Init_Smps(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800275c:	bf00      	nop
}
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <Init_Exti>:

void Init_Exti(void)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800276a:	2050      	movs	r0, #80	@ 0x50
 800276c:	f7ff ff30 	bl	80025d0 <LL_EXTI_EnableIT_32_63>

  return;
 8002770:	bf00      	nop
}
 8002772:	bd80      	pop	{r7, pc}

08002774 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8002778:	bf00      	nop
}
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002788:	2000      	movs	r0, #0
 800278a:	f00b faaf 	bl	800dcec <OTP_Read>
 800278e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	799b      	ldrb	r3, [r3, #6]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff2c 	bl	80025f8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
}
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <System_Init>:

static void System_Init(void)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	af00      	add	r7, sp, #0
  Init_Smps();
 80027ae:	f7ff ffd3 	bl	8002758 <Init_Smps>

  Init_Exti();
 80027b2:	f7ff ffd8 	bl	8002766 <Init_Exti>

  Init_Rtc();
 80027b6:	f000 f803 	bl	80027c0 <Init_Rtc>

  return;
 80027ba:	bf00      	nop
}
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80027c4:	4805      	ldr	r0, [pc, #20]	@ (80027dc <Init_Rtc+0x1c>)
 80027c6:	f7ff ff82 	bl	80026ce <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80027ca:	2100      	movs	r1, #0
 80027cc:	4803      	ldr	r0, [pc, #12]	@ (80027dc <Init_Rtc+0x1c>)
 80027ce:	f7ff ff8e 	bl	80026ee <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80027d2:	4802      	ldr	r0, [pc, #8]	@ (80027dc <Init_Rtc+0x1c>)
 80027d4:	f7ff ff6e 	bl	80026b4 <LL_RTC_EnableWriteProtection>

  return;
 80027d8:	bf00      	nop
}
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40002800 	.word	0x40002800

080027e0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80027e4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80027e8:	f7ff ff24 	bl	8002634 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80027ec:	f00c fa0e 	bl	800ec0c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80027f0:	2004      	movs	r0, #4
 80027f2:	f7ff fed7 	bl	80025a4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80027f6:	bf00      	nop
}
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002802:	f00a ffbb 	bl	800d77c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8002806:	4a11      	ldr	r2, [pc, #68]	@ (800284c <appe_Tl_Init+0x50>)
 8002808:	2100      	movs	r1, #0
 800280a:	2004      	movs	r0, #4
 800280c:	f00c fb3c 	bl	800ee88 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002810:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <appe_Tl_Init+0x54>)
 8002812:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002814:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <appe_Tl_Init+0x58>)
 8002816:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002818:	463b      	mov	r3, r7
 800281a:	4619      	mov	r1, r3
 800281c:	480e      	ldr	r0, [pc, #56]	@ (8002858 <appe_Tl_Init+0x5c>)
 800281e:	f00a fe6f 	bl	800d500 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8002822:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <appe_Tl_Init+0x60>)
 8002824:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002826:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <appe_Tl_Init+0x64>)
 8002828:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800282a:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <appe_Tl_Init+0x68>)
 800282c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800282e:	f240 533c 	movw	r3, #1340	@ 0x53c
 8002832:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002834:	f107 0308 	add.w	r3, r7, #8
 8002838:	4618      	mov	r0, r3
 800283a:	f00b f8e1 	bl	800da00 <TL_MM_Init>

  TL_Enable();
 800283e:	f00a ff97 	bl	800d770 <TL_Enable>

  return;
 8002842:	bf00      	nop
}
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	0800d539 	.word	0x0800d539
 8002850:	20030734 	.word	0x20030734
 8002854:	08002869 	.word	0x08002869
 8002858:	08002881 	.word	0x08002881
 800285c:	2003094c 	.word	0x2003094c
 8002860:	20030840 	.word	0x20030840
 8002864:	200301f8 	.word	0x200301f8

08002868 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002872:	bf00      	nop
}
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	330b      	adds	r3, #11
 800288e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800289a:	2b07      	cmp	r3, #7
 800289c:	d81f      	bhi.n	80028de <APPE_SysUserEvtRx+0x5e>
 800289e:	a201      	add	r2, pc, #4	@ (adr r2, 80028a4 <APPE_SysUserEvtRx+0x24>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	080028c5 	.word	0x080028c5
 80028a8:	080028d7 	.word	0x080028d7
 80028ac:	080028df 	.word	0x080028df
 80028b0:	080028df 	.word	0x080028df
 80028b4:	080028df 	.word	0x080028df
 80028b8:	080028df 	.word	0x080028df
 80028bc:	080028df 	.word	0x080028df
 80028c0:	080028df 	.word	0x080028df
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	4618      	mov	r0, r3
 80028ca:	f00a fbcf 	bl	800d06c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f81b 	bl	800290a <APPE_SysEvtReadyProcessing>
    break;
 80028d4:	e004      	b.n	80028e0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f806 	bl	80028e8 <APPE_SysEvtError>
    break;
 80028dc:	e000      	b.n	80028e0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80028de:	bf00      	nop
  }

  return;
 80028e0:	bf00      	nop
}
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	330b      	adds	r3, #11
 80028f6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3302      	adds	r3, #2
 80028fc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80028fe:	bf00      	nop
}
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b08a      	sub	sp, #40	@ 0x28
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002912:	f107 0308 	add.w	r3, r7, #8
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	330b      	adds	r3, #11
 800292e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3302      	adds	r3, #2
 8002934:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d11d      	bne.n	800297a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800293e:	f7ff fd55 	bl	80023ec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002942:	230f      	movs	r3, #15
 8002944:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002946:	237f      	movs	r3, #127	@ 0x7f
 8002948:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800294a:	f7ff fe95 	bl	8002678 <LL_DBGMCU_GetRevisionID>
 800294e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	b29b      	uxth	r3, r3
 8002954:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8002956:	f7ff fe81 	bl	800265c <LL_DBGMCU_GetDeviceID>
 800295a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	b29b      	uxth	r3, r3
 8002960:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8002962:	f107 0308 	add.w	r3, r7, #8
 8002966:	4618      	mov	r0, r3
 8002968:	f00a fb6a 	bl	800d040 <SHCI_C2_Config>

    APP_BLE_Init();
 800296c:	f00b fac8 	bl	800df00 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002970:	2100      	movs	r1, #0
 8002972:	2001      	movs	r0, #1
 8002974:	f00c f95c 	bl	800ec30 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002978:	e007      	b.n	800298a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d103      	bne.n	800298a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
  return;
 8002988:	bf00      	nop
 800298a:	bf00      	nop
}
 800298c:	3728      	adds	r7, #40	@ 0x28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299a:	f001 ff69 	bl	8004870 <HAL_GetTick>
 800299e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d00a      	beq.n	80029c2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80029ac:	f001 ff78 	bl	80048a0 <HAL_GetTickFreq>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ba:	e002      	b.n	80029c2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80029bc:	f7ff fe6a 	bl	8002694 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80029c0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80029c2:	f001 ff55 	bl	8004870 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d8f4      	bhi.n	80029bc <HAL_Delay+0x2a>
  }
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f00c f954 	bl	800ec90 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}

080029ec <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80029f0:	bf00      	nop
}
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f00c f942 	bl	800ec90 <UTIL_SEQ_Run>
  return;
 8002a0c:	bf00      	nop
}
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2004      	movs	r0, #4
 8002a20:	f00c fa54 	bl	800eecc <UTIL_SEQ_SetTask>
  return;
 8002a24:	bf00      	nop
}
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002a34:	2002      	movs	r0, #2
 8002a36:	f00c fab5 	bl	800efa4 <UTIL_SEQ_SetEvt>
  return;
 8002a3a:	bf00      	nop
}
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f00c faca 	bl	800efe4 <UTIL_SEQ_WaitEvt>
  return;
 8002a50:	bf00      	nop
}
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <RxUART_Init>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
static void RxUART_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <RxUART_Init+0x14>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4903      	ldr	r1, [pc, #12]	@ (8002a70 <RxUART_Init+0x18>)
 8002a62:	2000      	movs	r0, #0
 8002a64:	f000 fe3c 	bl	80036e0 <HW_UART_Receive_IT>
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	08002a75 	.word	0x08002a75
 8002a70:	20000270 	.word	0x20000270

08002a74 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8002a78:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <RxCpltCallback+0x50>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	2bff      	cmp	r3, #255	@ 0xff
 8002a7e:	d818      	bhi.n	8002ab2 <RxCpltCallback+0x3e>
  {
    if (aRxBuffer[0] == '\r')
 8002a80:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <RxCpltCallback+0x54>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b0d      	cmp	r3, #13
 8002a86:	d109      	bne.n	8002a9c <RxCpltCallback+0x28>
    {
      APP_DBG_MSG("received %s\n", CommandString);

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8002a88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <RxCpltCallback+0x50>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8002a8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a92:	2100      	movs	r1, #0
 8002a94:	480d      	ldr	r0, [pc, #52]	@ (8002acc <RxCpltCallback+0x58>)
 8002a96:	f00e fae7 	bl	8011068 <memset>
 8002a9a:	e00a      	b.n	8002ab2 <RxCpltCallback+0x3e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8002a9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <RxCpltCallback+0x50>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	b291      	uxth	r1, r2
 8002aa4:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <RxCpltCallback+0x50>)
 8002aa6:	8011      	strh	r1, [r2, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <RxCpltCallback+0x54>)
 8002aac:	7819      	ldrb	r1, [r3, #0]
 8002aae:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <RxCpltCallback+0x58>)
 8002ab0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8002ab2:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <RxCpltCallback+0x5c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4904      	ldr	r1, [pc, #16]	@ (8002ac8 <RxCpltCallback+0x54>)
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 fe11 	bl	80036e0 <HW_UART_Receive_IT>
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000378 	.word	0x20000378
 8002ac8:	20000270 	.word	0x20000270
 8002acc:	20000278 	.word	0x20000278
 8002ad0:	08002a75 	.word	0x08002a75

08002ad4 <LL_EXTI_EnableIT_0_31>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002ade:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002ae2:	4905      	ldr	r1, [pc, #20]	@ (8002af8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	58000800 	.word	0x58000800

08002afc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4904      	ldr	r1, [pc, #16]	@ (8002b1c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]

}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	58000800 	.word	0x58000800

08002b20 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b26:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <ReadRtcSsrValue+0x3c>)
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <ReadRtcSsrValue+0x3c>)
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002b36:	e005      	b.n	8002b44 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002b3c:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <ReadRtcSsrValue+0x3c>)
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1f5      	bne.n	8002b38 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002b4c:	683b      	ldr	r3, [r7, #0]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40002800 	.word	0x40002800

08002b60 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	460a      	mov	r2, r1
 8002b6a:	71fb      	strb	r3, [r7, #7]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002b70:	79ba      	ldrb	r2, [r7, #6]
 8002b72:	491d      	ldr	r1, [pc, #116]	@ (8002be8 <LinkTimerAfter+0x88>)
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3315      	adds	r3, #21
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d009      	beq.n	8002b9e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	4916      	ldr	r1, [pc, #88]	@ (8002be8 <LinkTimerAfter+0x88>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	3314      	adds	r3, #20
 8002b9a:	79fa      	ldrb	r2, [r7, #7]
 8002b9c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002b9e:	79fa      	ldrb	r2, [r7, #7]
 8002ba0:	4911      	ldr	r1, [pc, #68]	@ (8002be8 <LinkTimerAfter+0x88>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3315      	adds	r3, #21
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002bb2:	79fa      	ldrb	r2, [r7, #7]
 8002bb4:	490c      	ldr	r1, [pc, #48]	@ (8002be8 <LinkTimerAfter+0x88>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	79ba      	ldrb	r2, [r7, #6]
 8002bc4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002bc6:	79ba      	ldrb	r2, [r7, #6]
 8002bc8:	4907      	ldr	r1, [pc, #28]	@ (8002be8 <LinkTimerAfter+0x88>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3315      	adds	r3, #21
 8002bd6:	79fa      	ldrb	r2, [r7, #7]
 8002bd8:	701a      	strb	r2, [r3, #0]

  return;
 8002bda:	bf00      	nop
}
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	2000037c 	.word	0x2000037c

08002bec <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	460a      	mov	r2, r1
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002bfc:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <LinkTimerBefore+0xb8>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	79ba      	ldrb	r2, [r7, #6]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d032      	beq.n	8002c6e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002c08:	79ba      	ldrb	r2, [r7, #6]
 8002c0a:	4927      	ldr	r1, [pc, #156]	@ (8002ca8 <LinkTimerBefore+0xbc>)
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	3314      	adds	r3, #20
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	4922      	ldr	r1, [pc, #136]	@ (8002ca8 <LinkTimerBefore+0xbc>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3315      	adds	r3, #21
 8002c2c:	79fa      	ldrb	r2, [r7, #7]
 8002c2e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c30:	79fa      	ldrb	r2, [r7, #7]
 8002c32:	491d      	ldr	r1, [pc, #116]	@ (8002ca8 <LinkTimerBefore+0xbc>)
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3315      	adds	r3, #21
 8002c40:	79ba      	ldrb	r2, [r7, #6]
 8002c42:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002c44:	79fa      	ldrb	r2, [r7, #7]
 8002c46:	4918      	ldr	r1, [pc, #96]	@ (8002ca8 <LinkTimerBefore+0xbc>)
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	3314      	adds	r3, #20
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c58:	79ba      	ldrb	r2, [r7, #6]
 8002c5a:	4913      	ldr	r1, [pc, #76]	@ (8002ca8 <LinkTimerBefore+0xbc>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	3314      	adds	r3, #20
 8002c68:	79fa      	ldrb	r2, [r7, #7]
 8002c6a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002c6c:	e014      	b.n	8002c98 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002c6e:	79fa      	ldrb	r2, [r7, #7]
 8002c70:	490d      	ldr	r1, [pc, #52]	@ (8002ca8 <LinkTimerBefore+0xbc>)
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3315      	adds	r3, #21
 8002c7e:	79ba      	ldrb	r2, [r7, #6]
 8002c80:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002c82:	79ba      	ldrb	r2, [r7, #6]
 8002c84:	4908      	ldr	r1, [pc, #32]	@ (8002ca8 <LinkTimerBefore+0xbc>)
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	3314      	adds	r3, #20
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	701a      	strb	r2, [r3, #0]
  return;
 8002c96:	bf00      	nop
}
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	2000040c 	.word	0x2000040c
 8002ca8:	2000037c 	.word	0x2000037c

08002cac <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	@ (8002df0 <linkTimer+0x144>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	d118      	bne.n	8002cf2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002df0 <linkTimer+0x144>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8002df4 <linkTimer+0x148>)
 8002cc8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002cca:	4a49      	ldr	r2, [pc, #292]	@ (8002df0 <linkTimer+0x144>)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002cd0:	79fa      	ldrb	r2, [r7, #7]
 8002cd2:	4949      	ldr	r1, [pc, #292]	@ (8002df8 <linkTimer+0x14c>)
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	3315      	adds	r3, #21
 8002ce0:	2206      	movs	r2, #6
 8002ce2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ce4:	4b45      	ldr	r3, [pc, #276]	@ (8002dfc <linkTimer+0x150>)
 8002ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cea:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	81fb      	strh	r3, [r7, #14]
 8002cf0:	e078      	b.n	8002de4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002cf2:	f000 f909 	bl	8002f08 <ReturnTimeElapsed>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002cfa:	79fa      	ldrb	r2, [r7, #7]
 8002cfc:	493e      	ldr	r1, [pc, #248]	@ (8002df8 <linkTimer+0x14c>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	3308      	adds	r3, #8
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	89fb      	ldrh	r3, [r7, #14]
 8002d0e:	79fa      	ldrb	r2, [r7, #7]
 8002d10:	4419      	add	r1, r3
 8002d12:	4839      	ldr	r0, [pc, #228]	@ (8002df8 <linkTimer+0x14c>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4403      	add	r3, r0
 8002d1e:	3308      	adds	r3, #8
 8002d20:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002d22:	79fa      	ldrb	r2, [r7, #7]
 8002d24:	4934      	ldr	r1, [pc, #208]	@ (8002df8 <linkTimer+0x14c>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	3308      	adds	r3, #8
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002d36:	4b2e      	ldr	r3, [pc, #184]	@ (8002df0 <linkTimer+0x144>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002df8 <linkTimer+0x14c>)
 8002d40:	460b      	mov	r3, r1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	440b      	add	r3, r1
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d337      	bcc.n	8002dc4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002d54:	4b26      	ldr	r3, [pc, #152]	@ (8002df0 <linkTimer+0x144>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002d5a:	7b7a      	ldrb	r2, [r7, #13]
 8002d5c:	4926      	ldr	r1, [pc, #152]	@ (8002df8 <linkTimer+0x14c>)
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	3315      	adds	r3, #21
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002d6e:	e013      	b.n	8002d98 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002d70:	7b7a      	ldrb	r2, [r7, #13]
 8002d72:	4921      	ldr	r1, [pc, #132]	@ (8002df8 <linkTimer+0x14c>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3315      	adds	r3, #21
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002d84:	7b7a      	ldrb	r2, [r7, #13]
 8002d86:	491c      	ldr	r1, [pc, #112]	@ (8002df8 <linkTimer+0x14c>)
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	3315      	adds	r3, #21
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002d98:	7b3b      	ldrb	r3, [r7, #12]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d00b      	beq.n	8002db6 <linkTimer+0x10a>
 8002d9e:	7b3a      	ldrb	r2, [r7, #12]
 8002da0:	4915      	ldr	r1, [pc, #84]	@ (8002df8 <linkTimer+0x14c>)
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	440b      	add	r3, r1
 8002dac:	3308      	adds	r3, #8
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d2dc      	bcs.n	8002d70 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002db6:	7b7a      	ldrb	r2, [r7, #13]
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fecf 	bl	8002b60 <LinkTimerAfter>
 8002dc2:	e00f      	b.n	8002de4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <linkTimer+0x144>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff0c 	bl	8002bec <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <linkTimer+0x144>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <linkTimer+0x148>)
 8002ddc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002dde:	4a04      	ldr	r2, [pc, #16]	@ (8002df0 <linkTimer+0x144>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002de4:	89fb      	ldrh	r3, [r7, #14]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	2000040c 	.word	0x2000040c
 8002df4:	2000040d 	.word	0x2000040d
 8002df8:	2000037c 	.word	0x2000037c
 8002dfc:	20000410 	.word	0x20000410

08002e00 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	460a      	mov	r2, r1
 8002e0a:	71fb      	strb	r3, [r7, #7]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002e10:	4b39      	ldr	r3, [pc, #228]	@ (8002ef8 <UnlinkTimer+0xf8>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	79fa      	ldrb	r2, [r7, #7]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d111      	bne.n	8002e40 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002e1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <UnlinkTimer+0xf8>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <UnlinkTimer+0xfc>)
 8002e24:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002e26:	79fa      	ldrb	r2, [r7, #7]
 8002e28:	4935      	ldr	r1, [pc, #212]	@ (8002f00 <UnlinkTimer+0x100>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	3315      	adds	r3, #21
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef8 <UnlinkTimer+0xf8>)
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e03e      	b.n	8002ebe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002e40:	79fa      	ldrb	r2, [r7, #7]
 8002e42:	492f      	ldr	r1, [pc, #188]	@ (8002f00 <UnlinkTimer+0x100>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3314      	adds	r3, #20
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002e54:	79fa      	ldrb	r2, [r7, #7]
 8002e56:	492a      	ldr	r1, [pc, #168]	@ (8002f00 <UnlinkTimer+0x100>)
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	3315      	adds	r3, #21
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002e68:	79f9      	ldrb	r1, [r7, #7]
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	4824      	ldr	r0, [pc, #144]	@ (8002f00 <UnlinkTimer+0x100>)
 8002e6e:	460b      	mov	r3, r1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	440b      	add	r3, r1
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4403      	add	r3, r0
 8002e78:	3315      	adds	r3, #21
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b2d8      	uxtb	r0, r3
 8002e7e:	4920      	ldr	r1, [pc, #128]	@ (8002f00 <UnlinkTimer+0x100>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	3315      	adds	r3, #21
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e90:	7bbb      	ldrb	r3, [r7, #14]
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d013      	beq.n	8002ebe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002e96:	79f9      	ldrb	r1, [r7, #7]
 8002e98:	7bba      	ldrb	r2, [r7, #14]
 8002e9a:	4819      	ldr	r0, [pc, #100]	@ (8002f00 <UnlinkTimer+0x100>)
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	440b      	add	r3, r1
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4403      	add	r3, r0
 8002ea6:	3314      	adds	r3, #20
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b2d8      	uxtb	r0, r3
 8002eac:	4914      	ldr	r1, [pc, #80]	@ (8002f00 <UnlinkTimer+0x100>)
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3314      	adds	r3, #20
 8002eba:	4602      	mov	r2, r0
 8002ebc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	490f      	ldr	r1, [pc, #60]	@ (8002f00 <UnlinkTimer+0x100>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	330c      	adds	r3, #12
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002ed2:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <UnlinkTimer+0xf8>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b06      	cmp	r3, #6
 8002eda:	d107      	bne.n	8002eec <UnlinkTimer+0xec>
 8002edc:	79bb      	ldrb	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <UnlinkTimer+0x104>)
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  return;
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
}
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	2000040c 	.word	0x2000040c
 8002efc:	2000040d 	.word	0x2000040d
 8002f00:	2000037c 	.word	0x2000037c
 8002f04:	20000410 	.word	0x20000410

08002f08 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <ReturnTimeElapsed+0x70>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d026      	beq.n	8002f66 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002f18:	f7ff fe02 	bl	8002b20 <ReadRtcSsrValue>
 8002f1c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002f1e:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <ReturnTimeElapsed+0x70>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d805      	bhi.n	8002f34 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002f28:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <ReturnTimeElapsed+0x70>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	e00a      	b.n	8002f4a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <ReturnTimeElapsed+0x74>)
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002f40:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <ReturnTimeElapsed+0x70>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <ReturnTimeElapsed+0x78>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <ReturnTimeElapsed+0x7c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	40d3      	lsrs	r3, r2
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	e001      	b.n	8002f6a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	b29b      	uxth	r3, r3
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000410 	.word	0x20000410
 8002f7c:	20000418 	.word	0x20000418
 8002f80:	20000416 	.word	0x20000416
 8002f84:	20000415 	.word	0x20000415

08002f88 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002f98:	f7ff fdc2 	bl	8002b20 <ReadRtcSsrValue>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4a21      	ldr	r2, [pc, #132]	@ (8003024 <RestartWakeupCounter+0x9c>)
 8002fa0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002fa2:	2003      	movs	r0, #3
 8002fa4:	f001 fe11 	bl	8004bca <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002fa8:	e039      	b.n	800301e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d803      	bhi.n	8002fb8 <RestartWakeupCounter+0x30>
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003028 <RestartWakeupCounter+0xa0>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d002      	beq.n	8002fbe <RestartWakeupCounter+0x36>
      Value -= 1;
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002fbe:	bf00      	nop
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <RestartWakeupCounter+0xa4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f8      	beq.n	8002fc0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002fce:	4b17      	ldr	r3, [pc, #92]	@ (800302c <RestartWakeupCounter+0xa4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b15      	ldr	r3, [pc, #84]	@ (800302c <RestartWakeupCounter+0xa4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002fde:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002fe0:	4b13      	ldr	r3, [pc, #76]	@ (8003030 <RestartWakeupCounter+0xa8>)
 8002fe2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002fe6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002fe8:	2003      	movs	r0, #3
 8002fea:	f001 fdfc 	bl	8004be6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002fee:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <RestartWakeupCounter+0xac>)
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	490e      	ldr	r1, [pc, #56]	@ (8003034 <RestartWakeupCounter+0xac>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002ffe:	f7ff fd8f 	bl	8002b20 <ReadRtcSsrValue>
 8003002:	4603      	mov	r3, r0
 8003004:	4a07      	ldr	r2, [pc, #28]	@ (8003024 <RestartWakeupCounter+0x9c>)
 8003006:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003008:	4b08      	ldr	r3, [pc, #32]	@ (800302c <RestartWakeupCounter+0xa4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	4b07      	ldr	r3, [pc, #28]	@ (800302c <RestartWakeupCounter+0xa4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003016:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8003018:	f3af 8000 	nop.w
  return ;
 800301c:	bf00      	nop
}
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000410 	.word	0x20000410
 8003028:	20000415 	.word	0x20000415
 800302c:	20000574 	.word	0x20000574
 8003030:	58000800 	.word	0x58000800
 8003034:	40002800 	.word	0x40002800

08003038 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800303e:	4b45      	ldr	r3, [pc, #276]	@ (8003154 <RescheduleTimerList+0x11c>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304a:	d107      	bne.n	800305c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800304c:	bf00      	nop
 800304e:	4b42      	ldr	r3, [pc, #264]	@ (8003158 <RescheduleTimerList+0x120>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f8      	bne.n	800304e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800305c:	4b3e      	ldr	r3, [pc, #248]	@ (8003158 <RescheduleTimerList+0x120>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	4b3d      	ldr	r3, [pc, #244]	@ (8003158 <RescheduleTimerList+0x120>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800306a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800306c:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <RescheduleTimerList+0x124>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	493a      	ldr	r1, [pc, #232]	@ (8003160 <RescheduleTimerList+0x128>)
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	440b      	add	r3, r1
 8003080:	3308      	adds	r3, #8
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003086:	f7ff ff3f 	bl	8002f08 <ReturnTimeElapsed>
 800308a:	4603      	mov	r3, r0
 800308c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	d205      	bcs.n	80030a2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800309a:	4b32      	ldr	r3, [pc, #200]	@ (8003164 <RescheduleTimerList+0x12c>)
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	e04d      	b.n	800313e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	4a30      	ldr	r2, [pc, #192]	@ (8003168 <RescheduleTimerList+0x130>)
 80030a6:	8812      	ldrh	r2, [r2, #0]
 80030a8:	b292      	uxth	r2, r2
 80030aa:	4413      	add	r3, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d906      	bls.n	80030c2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80030b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003168 <RescheduleTimerList+0x130>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80030ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003164 <RescheduleTimerList+0x12c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e03d      	b.n	800313e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80030cc:	4b25      	ldr	r3, [pc, #148]	@ (8003164 <RescheduleTimerList+0x12c>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030d2:	e034      	b.n	800313e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	4922      	ldr	r1, [pc, #136]	@ (8003160 <RescheduleTimerList+0x128>)
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	3308      	adds	r3, #8
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d20a      	bcs.n	8003102 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	491c      	ldr	r1, [pc, #112]	@ (8003160 <RescheduleTimerList+0x128>)
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	3308      	adds	r3, #8
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e013      	b.n	800312a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	4916      	ldr	r1, [pc, #88]	@ (8003160 <RescheduleTimerList+0x128>)
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	3308      	adds	r3, #8
 8003112:	6819      	ldr	r1, [r3, #0]
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	1ac9      	subs	r1, r1, r3
 800311a:	4811      	ldr	r0, [pc, #68]	@ (8003160 <RescheduleTimerList+0x128>)
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4403      	add	r3, r0
 8003126:	3308      	adds	r3, #8
 8003128:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	490c      	ldr	r1, [pc, #48]	@ (8003160 <RescheduleTimerList+0x128>)
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	3315      	adds	r3, #21
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b06      	cmp	r3, #6
 8003142:	d1c7      	bne.n	80030d4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8003144:	89bb      	ldrh	r3, [r7, #12]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff1e 	bl	8002f88 <RestartWakeupCounter>

  return ;
 800314c:	bf00      	nop
}
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40002800 	.word	0x40002800
 8003158:	20000574 	.word	0x20000574
 800315c:	2000040c 	.word	0x2000040c
 8003160:	2000037c 	.word	0x2000037c
 8003164:	20000414 	.word	0x20000414
 8003168:	2000041a 	.word	0x2000041a

0800316c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	@ 0x28
 8003170:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003172:	f3ef 8310 	mrs	r3, PRIMASK
 8003176:	617b      	str	r3, [r7, #20]
  return(result);
 8003178:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800317c:	b672      	cpsid	i
}
 800317e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	22ca      	movs	r2, #202	@ 0xca
 8003186:	625a      	str	r2, [r3, #36]	@ 0x24
 8003188:	4b57      	ldr	r3, [pc, #348]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2253      	movs	r2, #83	@ 0x53
 800318e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8003190:	4b55      	ldr	r3, [pc, #340]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	4b54      	ldr	r3, [pc, #336]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800319e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80031a0:	4b52      	ldr	r3, [pc, #328]	@ (80032ec <HW_TS_RTC_Wakeup_Handler+0x180>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80031a8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031ac:	4950      	ldr	r1, [pc, #320]	@ (80032f0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	330c      	adds	r3, #12
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d16e      	bne.n	80032a0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80031c2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031c6:	494a      	ldr	r1, [pc, #296]	@ (80032f0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80031d6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031da:	4945      	ldr	r1, [pc, #276]	@ (80032f0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	3310      	adds	r3, #16
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80031ec:	4b41      	ldr	r3, [pc, #260]	@ (80032f4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04c      	beq.n	8003290 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80031f6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80031fa:	493d      	ldr	r1, [pc, #244]	@ (80032f0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	330d      	adds	r3, #13
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d124      	bne.n	800325a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003210:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003214:	2101      	movs	r1, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fdf2 	bl	8002e00 <UnlinkTimer>
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f383 8810 	msr	PRIMASK, r3
}
 8003226:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8003228:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800322c:	4930      	ldr	r1, [pc, #192]	@ (80032f0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	3304      	adds	r3, #4
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f9b8 	bl	80035b8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003248:	4b27      	ldr	r3, [pc, #156]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	22ca      	movs	r2, #202	@ 0xca
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003250:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2253      	movs	r2, #83	@ 0x53
 8003256:	625a      	str	r2, [r3, #36]	@ 0x24
 8003258:	e012      	b.n	8003280 <HW_TS_RTC_Wakeup_Handler+0x114>
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8003266:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f920 	bl	80034b0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003270:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	22ca      	movs	r2, #202	@ 0xca
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24
 8003278:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2253      	movs	r2, #83	@ 0x53
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8003280:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	4619      	mov	r1, r3
 8003288:	69b8      	ldr	r0, [r7, #24]
 800328a:	f000 fa1b 	bl	80036c4 <HW_TS_RTC_Int_AppNot>
 800328e:	e022      	b.n	80032d6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8003290:	f7ff fed2 	bl	8003038 <RescheduleTimerList>
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	e01a      	b.n	80032d6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80032a0:	bf00      	nop
 80032a2:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f8      	beq.n	80032a2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80032b0:	4b0d      	ldr	r3, [pc, #52]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80032c0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80032c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80032d6:	4b04      	ldr	r3, [pc, #16]	@ (80032e8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	22ff      	movs	r2, #255	@ 0xff
 80032dc:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80032de:	bf00      	nop
}
 80032e0:	3728      	adds	r7, #40	@ 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000574 	.word	0x20000574
 80032ec:	2000040c 	.word	0x2000040c
 80032f0:	2000037c 	.word	0x2000037c
 80032f4:	20000414 	.word	0x20000414
 80032f8:	58000800 	.word	0x58000800

080032fc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	6039      	str	r1, [r7, #0]
 8003306:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003308:	4b5e      	ldr	r3, [pc, #376]	@ (8003484 <HW_TS_Init+0x188>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	22ca      	movs	r2, #202	@ 0xca
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003310:	4b5c      	ldr	r3, [pc, #368]	@ (8003484 <HW_TS_Init+0x188>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2253      	movs	r2, #83	@ 0x53
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003318:	4b5b      	ldr	r3, [pc, #364]	@ (8003488 <HW_TS_Init+0x18c>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a5a      	ldr	r2, [pc, #360]	@ (8003488 <HW_TS_Init+0x18c>)
 800331e:	f043 0320 	orr.w	r3, r3, #32
 8003322:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8003324:	4b58      	ldr	r3, [pc, #352]	@ (8003488 <HW_TS_Init+0x18c>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f1c3 0304 	rsb	r3, r3, #4
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4b55      	ldr	r3, [pc, #340]	@ (800348c <HW_TS_Init+0x190>)
 8003338:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800333a:	4b53      	ldr	r3, [pc, #332]	@ (8003488 <HW_TS_Init+0x18c>)
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003342:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8003346:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	fa92 f2a2 	rbit	r2, r2
 800334e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	2a00      	cmp	r2, #0
 8003358:	d101      	bne.n	800335e <HW_TS_Init+0x62>
  {
    return 32U;
 800335a:	2220      	movs	r2, #32
 800335c:	e003      	b.n	8003366 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	40d3      	lsrs	r3, r2
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3301      	adds	r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b48      	ldr	r3, [pc, #288]	@ (8003490 <HW_TS_Init+0x194>)
 8003370:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003372:	4b45      	ldr	r3, [pc, #276]	@ (8003488 <HW_TS_Init+0x18c>)
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	b29b      	uxth	r3, r3
 8003378:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800337c:	b29b      	uxth	r3, r3
 800337e:	3301      	adds	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	4b44      	ldr	r3, [pc, #272]	@ (8003494 <HW_TS_Init+0x198>)
 8003384:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003386:	4b43      	ldr	r3, [pc, #268]	@ (8003494 <HW_TS_Init+0x198>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	3b01      	subs	r3, #1
 800338c:	4a40      	ldr	r2, [pc, #256]	@ (8003490 <HW_TS_Init+0x194>)
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	fb02 f303 	mul.w	r3, r2, r3
 8003394:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003398:	4a3c      	ldr	r2, [pc, #240]	@ (800348c <HW_TS_Init+0x190>)
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	40d3      	lsrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d904      	bls.n	80033b4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80033aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <HW_TS_Init+0x19c>)
 80033ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033b0:	801a      	strh	r2, [r3, #0]
 80033b2:	e003      	b.n	80033bc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <HW_TS_Init+0x19c>)
 80033ba:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80033bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033c0:	f7ff fb9c 	bl	8002afc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80033c4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033c8:	f7ff fb84 	bl	8002ad4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d13d      	bne.n	800344e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80033d2:	4b32      	ldr	r3, [pc, #200]	@ (800349c <HW_TS_Init+0x1a0>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80033d8:	4b31      	ldr	r3, [pc, #196]	@ (80034a0 <HW_TS_Init+0x1a4>)
 80033da:	f04f 32ff 	mov.w	r2, #4294967295
 80033de:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e00c      	b.n	8003400 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80033e6:	7ffa      	ldrb	r2, [r7, #31]
 80033e8:	492e      	ldr	r1, [pc, #184]	@ (80034a4 <HW_TS_Init+0x1a8>)
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	440b      	add	r3, r1
 80033f4:	330c      	adds	r3, #12
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80033fa:	7ffb      	ldrb	r3, [r7, #31]
 80033fc:	3301      	adds	r3, #1
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	7ffb      	ldrb	r3, [r7, #31]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d9ef      	bls.n	80033e6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003406:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <HW_TS_Init+0x1ac>)
 8003408:	2206      	movs	r2, #6
 800340a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800340c:	4b1d      	ldr	r3, [pc, #116]	@ (8003484 <HW_TS_Init+0x188>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b1c      	ldr	r3, [pc, #112]	@ (8003484 <HW_TS_Init+0x188>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800341a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800341c:	4b19      	ldr	r3, [pc, #100]	@ (8003484 <HW_TS_Init+0x188>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	4b17      	ldr	r3, [pc, #92]	@ (8003484 <HW_TS_Init+0x188>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800342c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800342e:	4b1f      	ldr	r3, [pc, #124]	@ (80034ac <HW_TS_Init+0x1b0>)
 8003430:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003434:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8003436:	2003      	movs	r0, #3
 8003438:	f001 fbd5 	bl	8004be6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800343c:	4b11      	ldr	r3, [pc, #68]	@ (8003484 <HW_TS_Init+0x188>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <HW_TS_Init+0x188>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	e009      	b.n	8003462 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800344e:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <HW_TS_Init+0x188>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800345c:	2003      	movs	r0, #3
 800345e:	f001 fbb4 	bl	8004bca <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003462:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <HW_TS_Init+0x188>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	22ff      	movs	r2, #255	@ 0xff
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800346a:	2200      	movs	r2, #0
 800346c:	2103      	movs	r1, #3
 800346e:	2003      	movs	r0, #3
 8003470:	f001 fb69 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003474:	2003      	movs	r0, #3
 8003476:	f001 fb80 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  return;
 800347a:	bf00      	nop
}
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000574 	.word	0x20000574
 8003488:	40002800 	.word	0x40002800
 800348c:	20000415 	.word	0x20000415
 8003490:	20000416 	.word	0x20000416
 8003494:	20000418 	.word	0x20000418
 8003498:	2000041a 	.word	0x2000041a
 800349c:	20000414 	.word	0x20000414
 80034a0:	20000410 	.word	0x20000410
 80034a4:	2000037c 	.word	0x2000037c
 80034a8:	2000040c 	.word	0x2000040c
 80034ac:	58000800 	.word	0x58000800

080034b0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ba:	f3ef 8310 	mrs	r3, PRIMASK
 80034be:	60fb      	str	r3, [r7, #12]
  return(result);
 80034c0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80034c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80034c4:	b672      	cpsid	i
}
 80034c6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80034c8:	2003      	movs	r0, #3
 80034ca:	f001 fb64 	bl	8004b96 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80034ce:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <HW_TS_Stop+0xf0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	22ca      	movs	r2, #202	@ 0xca
 80034d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80034d6:	4b32      	ldr	r3, [pc, #200]	@ (80035a0 <HW_TS_Stop+0xf0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2253      	movs	r2, #83	@ 0x53
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80034de:	79fa      	ldrb	r2, [r7, #7]
 80034e0:	4930      	ldr	r1, [pc, #192]	@ (80035a4 <HW_TS_Stop+0xf4>)
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	330c      	adds	r3, #12
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d142      	bne.n	800357c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fc80 	bl	8002e00 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003500:	4b29      	ldr	r3, [pc, #164]	@ (80035a8 <HW_TS_Stop+0xf8>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b06      	cmp	r3, #6
 800350a:	d12f      	bne.n	800356c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800350c:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <HW_TS_Stop+0xfc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003518:	d107      	bne.n	800352a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800351a:	bf00      	nop
 800351c:	4b20      	ldr	r3, [pc, #128]	@ (80035a0 <HW_TS_Stop+0xf0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f8      	bne.n	800351c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800352a:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <HW_TS_Stop+0xf0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HW_TS_Stop+0xf0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003538:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800353a:	bf00      	nop
 800353c:	4b18      	ldr	r3, [pc, #96]	@ (80035a0 <HW_TS_Stop+0xf0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f8      	beq.n	800353c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800354a:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <HW_TS_Stop+0xf0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4b13      	ldr	r3, [pc, #76]	@ (80035a0 <HW_TS_Stop+0xf0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800355a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800355c:	4b14      	ldr	r3, [pc, #80]	@ (80035b0 <HW_TS_Stop+0x100>)
 800355e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003562:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003564:	2003      	movs	r0, #3
 8003566:	f001 fb3e 	bl	8004be6 <HAL_NVIC_ClearPendingIRQ>
 800356a:	e007      	b.n	800357c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <HW_TS_Stop+0x104>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	7cfa      	ldrb	r2, [r7, #19]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003578:	f7ff fd5e 	bl	8003038 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800357c:	4b08      	ldr	r3, [pc, #32]	@ (80035a0 <HW_TS_Stop+0xf0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	22ff      	movs	r2, #255	@ 0xff
 8003582:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003584:	2003      	movs	r0, #3
 8003586:	f001 faf8 	bl	8004b7a <HAL_NVIC_EnableIRQ>
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f383 8810 	msr	PRIMASK, r3
}
 8003594:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003596:	bf00      	nop
}
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000574 	.word	0x20000574
 80035a4:	2000037c 	.word	0x2000037c
 80035a8:	2000040c 	.word	0x2000040c
 80035ac:	40002800 	.word	0x40002800
 80035b0:	58000800 	.word	0x58000800
 80035b4:	2000040d 	.word	0x2000040d

080035b8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	6039      	str	r1, [r7, #0]
 80035c2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80035c4:	79fa      	ldrb	r2, [r7, #7]
 80035c6:	493b      	ldr	r1, [pc, #236]	@ (80036b4 <HW_TS_Start+0xfc>)
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	330c      	adds	r3, #12
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d103      	bne.n	80035e4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ff66 	bl	80034b0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e4:	f3ef 8310 	mrs	r3, PRIMASK
 80035e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80035ea:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80035ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80035ee:	b672      	cpsid	i
}
 80035f0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80035f2:	2003      	movs	r0, #3
 80035f4:	f001 facf 	bl	8004b96 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80035f8:	4b2f      	ldr	r3, [pc, #188]	@ (80036b8 <HW_TS_Start+0x100>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	22ca      	movs	r2, #202	@ 0xca
 80035fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8003600:	4b2d      	ldr	r3, [pc, #180]	@ (80036b8 <HW_TS_Start+0x100>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2253      	movs	r2, #83	@ 0x53
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003608:	79fa      	ldrb	r2, [r7, #7]
 800360a:	492a      	ldr	r1, [pc, #168]	@ (80036b4 <HW_TS_Start+0xfc>)
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	330c      	adds	r3, #12
 8003618:	2202      	movs	r2, #2
 800361a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800361c:	79fa      	ldrb	r2, [r7, #7]
 800361e:	4925      	ldr	r1, [pc, #148]	@ (80036b4 <HW_TS_Start+0xfc>)
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	440b      	add	r3, r1
 800362a:	3308      	adds	r3, #8
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8003630:	79fa      	ldrb	r2, [r7, #7]
 8003632:	4920      	ldr	r1, [pc, #128]	@ (80036b4 <HW_TS_Start+0xfc>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	3304      	adds	r3, #4
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fb30 	bl	8002cac <linkTimer>
 800364c:	4603      	mov	r3, r0
 800364e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8003650:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <HW_TS_Start+0x104>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003656:	4b1a      	ldr	r3, [pc, #104]	@ (80036c0 <HW_TS_Start+0x108>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	7c7a      	ldrb	r2, [r7, #17]
 800365e:	429a      	cmp	r2, r3
 8003660:	d002      	beq.n	8003668 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8003662:	f7ff fce9 	bl	8003038 <RescheduleTimerList>
 8003666:	e013      	b.n	8003690 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003668:	79fa      	ldrb	r2, [r7, #7]
 800366a:	4912      	ldr	r1, [pc, #72]	@ (80036b4 <HW_TS_Start+0xfc>)
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	3308      	adds	r3, #8
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	8a7b      	ldrh	r3, [r7, #18]
 800367c:	79fa      	ldrb	r2, [r7, #7]
 800367e:	1ac9      	subs	r1, r1, r3
 8003680:	480c      	ldr	r0, [pc, #48]	@ (80036b4 <HW_TS_Start+0xfc>)
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4403      	add	r3, r0
 800368c:	3308      	adds	r3, #8
 800368e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003690:	4b09      	ldr	r3, [pc, #36]	@ (80036b8 <HW_TS_Start+0x100>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	22ff      	movs	r2, #255	@ 0xff
 8003696:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003698:	2003      	movs	r0, #3
 800369a:	f001 fa6e 	bl	8004b7a <HAL_NVIC_EnableIRQ>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f383 8810 	msr	PRIMASK, r3
}
 80036a8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80036aa:	bf00      	nop
}
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	2000037c 	.word	0x2000037c
 80036b8:	20000574 	.word	0x20000574
 80036bc:	2000040c 	.word	0x2000040c
 80036c0:	2000040d 	.word	0x2000040d

080036c4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	460b      	mov	r3, r1
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4798      	blx	r3

  return;
 80036d6:	bf00      	nop
}
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	4603      	mov	r3, r0
 80036ec:	73fb      	strb	r3, [r7, #15]
 80036ee:	4613      	mov	r3, r2
 80036f0:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10c      	bne.n	8003712 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 80036f8:	4a08      	ldr	r2, [pc, #32]	@ (800371c <HW_UART_Receive_IT+0x3c>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b08      	ldr	r3, [pc, #32]	@ (8003720 <HW_UART_Receive_IT+0x40>)
 8003700:	4a08      	ldr	r2, [pc, #32]	@ (8003724 <HW_UART_Receive_IT+0x44>)
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	89bb      	ldrh	r3, [r7, #12]
 8003706:	461a      	mov	r2, r3
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	4805      	ldr	r0, [pc, #20]	@ (8003720 <HW_UART_Receive_IT+0x40>)
 800370c:	f006 f90c 	bl	8009928 <HAL_UART_Receive_IT>
            break;
 8003710:	e000      	b.n	8003714 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8003712:	bf00      	nop
    }

    return;
 8003714:	bf00      	nop
}
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	2000041c 	.word	0x2000041c
 8003720:	200005e4 	.word	0x200005e4
 8003724:	40013800 	.word	0x40013800

08003728 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	4603      	mov	r3, r0
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	4613      	mov	r3, r2
 8003738:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800373e:	2300      	movs	r3, #0
 8003740:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10e      	bne.n	8003766 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8003748:	4a17      	ldr	r2, [pc, #92]	@ (80037a8 <HW_UART_Transmit_DMA+0x80>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800374e:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <HW_UART_Transmit_DMA+0x84>)
 8003750:	4a17      	ldr	r2, [pc, #92]	@ (80037b0 <HW_UART_Transmit_DMA+0x88>)
 8003752:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003754:	89bb      	ldrh	r3, [r7, #12]
 8003756:	461a      	mov	r2, r3
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4814      	ldr	r0, [pc, #80]	@ (80037ac <HW_UART_Transmit_DMA+0x84>)
 800375c:	f006 f930 	bl	80099c0 <HAL_UART_Transmit_DMA>
 8003760:	4603      	mov	r3, r0
 8003762:	75fb      	strb	r3, [r7, #23]
            break;
 8003764:	e000      	b.n	8003768 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003766:	bf00      	nop
    }

    switch (hal_status)
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d816      	bhi.n	800379c <HW_UART_Transmit_DMA+0x74>
 800376e:	a201      	add	r2, pc, #4	@ (adr r2, 8003774 <HW_UART_Transmit_DMA+0x4c>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	08003785 	.word	0x08003785
 8003778:	0800378b 	.word	0x0800378b
 800377c:	08003791 	.word	0x08003791
 8003780:	08003797 	.word	0x08003797
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003784:	2300      	movs	r3, #0
 8003786:	75bb      	strb	r3, [r7, #22]
            break;
 8003788:	e009      	b.n	800379e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800378a:	2301      	movs	r3, #1
 800378c:	75bb      	strb	r3, [r7, #22]
            break;
 800378e:	e006      	b.n	800379e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003790:	2302      	movs	r3, #2
 8003792:	75bb      	strb	r3, [r7, #22]
            break;
 8003794:	e003      	b.n	800379e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8003796:	2303      	movs	r3, #3
 8003798:	75bb      	strb	r3, [r7, #22]
            break;
 800379a:	e000      	b.n	800379e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800379c:	bf00      	nop
    }

    return hw_status;
 800379e:	7dbb      	ldrb	r3, [r7, #22]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000420 	.word	0x20000420
 80037ac:	200005e4 	.word	0x200005e4
 80037b0:	40013800 	.word	0x40013800

080037b4 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_UART_RxCpltCallback+0x34>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d107      	bne.n	80037d8 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80037c8:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <HAL_UART_RxCpltCallback+0x38>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 80037d0:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_UART_RxCpltCallback+0x38>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4798      	blx	r3
            }
            break;
 80037d6:	e001      	b.n	80037dc <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HAL_UART_RxCpltCallback+0x2a>
            break;
 80037dc:	bf00      	nop
    }

    return;
 80037de:	bf00      	nop
}
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40013800 	.word	0x40013800
 80037ec:	2000041c 	.word	0x2000041c

080037f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_UART_TxCpltCallback+0x34>)
 8003800:	429a      	cmp	r2, r3
 8003802:	d107      	bne.n	8003814 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003804:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <HAL_UART_TxCpltCallback+0x38>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_UART_TxCpltCallback+0x38>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4798      	blx	r3
            }
            break;
 8003812:	e001      	b.n	8003818 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8003814:	bf00      	nop
 8003816:	e000      	b.n	800381a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8003818:	bf00      	nop
    }

    return;
 800381a:	bf00      	nop
}
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40013800 	.word	0x40013800
 8003828:	20000420 	.word	0x20000420

0800382c <LL_RCC_LSE_SetDriveCapability>:
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383c:	f023 0218 	bic.w	r2, r3, #24
 8003840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_AHB1_GRP1_EnableClock>:
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003864:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4313      	orrs	r3, r2
 800386e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003874:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800387c:	68fb      	ldr	r3, [r7, #12]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <LL_AHB2_GRP1_EnableClock>:
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003898:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4313      	orrs	r3, r2
 80038a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4013      	ands	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038ae:	68fb      	ldr	r3, [r7, #12]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038c0:	f000 ff68 	bl	8004794 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80038c4:	f7fe ff26 	bl	8002714 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038c8:	f000 f832 	bl	8003930 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80038cc:	f000 f892 	bl	80039f4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80038d0:	f000 f8f0 	bl	8003ab4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038d4:	f000 fa72 	bl	8003dbc <MX_GPIO_Init>
  MX_DMA_Init();
 80038d8:	f000 fa46 	bl	8003d68 <MX_DMA_Init>
  MX_RTC_Init();
 80038dc:	f000 f906 	bl	8003aec <MX_RTC_Init>
  MX_I2C1_Init();
 80038e0:	f000 f8a8 	bl	8003a34 <MX_I2C1_Init>
  MX_TIM1_Init();
 80038e4:	f000 f936 	bl	8003b54 <MX_TIM1_Init>
  MX_RF_Init();
 80038e8:	f000 f8f8 	bl	8003adc <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_DeInit(&hi2c1);
 80038ec:	480e      	ldr	r0, [pc, #56]	@ (8003928 <main+0x6c>)
 80038ee:	f002 f884 	bl	80059fa <HAL_I2C_DeInit>
  MX_I2C1_Init();
 80038f2:	f000 f89f 	bl	8003a34 <MX_I2C1_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80038f6:	480d      	ldr	r0, [pc, #52]	@ (800392c <main+0x70>)
 80038f8:	f004 ffa8 	bl	800884c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80038fc:	2100      	movs	r1, #0
 80038fe:	480b      	ldr	r0, [pc, #44]	@ (800392c <main+0x70>)
 8003900:	f005 f854 	bl	80089ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003904:	2104      	movs	r1, #4
 8003906:	4809      	ldr	r0, [pc, #36]	@ (800392c <main+0x70>)
 8003908:	f005 f850 	bl	80089ac <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800390c:	f7fe ff10 	bl	8002730 <MX_APPE_Init>
//  }

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003910:	f7ff f864 	bl	80029dc <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	f00b f9ba 	bl	800ec90 <UTIL_SEQ_Run>

//    scan_I2C_devices();

    HAL_Delay(1000);
 800391c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003920:	f7ff f837 	bl	8002992 <HAL_Delay>
    MX_APPE_Process();
 8003924:	bf00      	nop
 8003926:	e7f3      	b.n	8003910 <main+0x54>
 8003928:	20000424 	.word	0x20000424
 800392c:	20000598 	.word	0x20000598

08003930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b09a      	sub	sp, #104	@ 0x68
 8003934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003936:	f107 0320 	add.w	r3, r7, #32
 800393a:	2248      	movs	r2, #72	@ 0x48
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f00d fb92 	bl	8011068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003944:	1d3b      	adds	r3, r7, #4
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	611a      	str	r2, [r3, #16]
 8003952:	615a      	str	r2, [r3, #20]
 8003954:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003956:	f002 ff99 	bl	800688c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800395a:	2010      	movs	r0, #16
 800395c:	f7ff ff66 	bl	800382c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003960:	4b23      	ldr	r3, [pc, #140]	@ (80039f0 <SystemClock_Config+0xc0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003968:	4a21      	ldr	r2, [pc, #132]	@ (80039f0 <SystemClock_Config+0xc0>)
 800396a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b1f      	ldr	r3, [pc, #124]	@ (80039f0 <SystemClock_Config+0xc0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800397c:	2327      	movs	r3, #39	@ 0x27
 800397e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003980:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003986:	2301      	movs	r3, #1
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800398a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800398e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003990:	2301      	movs	r3, #1
 8003992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003994:	2340      	movs	r3, #64	@ 0x40
 8003996:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003998:	2300      	movs	r3, #0
 800399a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800399c:	23a0      	movs	r3, #160	@ 0xa0
 800399e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039a4:	f107 0320 	add.w	r3, r7, #32
 80039a8:	4618      	mov	r0, r3
 80039aa:	f003 fb03 	bl	8006fb4 <HAL_RCC_OscConfig>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80039b4:	f000 fa4a 	bl	8003e4c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80039b8:	236f      	movs	r3, #111	@ 0x6f
 80039ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80039bc:	2300      	movs	r3, #0
 80039be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	2101      	movs	r1, #1
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fe5f 	bl	800769c <HAL_RCC_ClockConfig>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80039e4:	f000 fa32 	bl	8003e4c <Error_Handler>
  }
}
 80039e8:	bf00      	nop
 80039ea:	3768      	adds	r7, #104	@ 0x68
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	58000400 	.word	0x58000400

080039f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b094      	sub	sp, #80	@ 0x50
 80039f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039fa:	463b      	mov	r3, r7
 80039fc:	2250      	movs	r2, #80	@ 0x50
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f00d fb31 	bl	8011068 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003a06:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003a0a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003a0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a10:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003a12:	2300      	movs	r3, #0
 8003a14:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 fa7a 	bl	8007f16 <HAL_RCCEx_PeriphCLKConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003a28:	f000 fa10 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8003a2c:	bf00      	nop
 8003a2e:	3750      	adds	r7, #80	@ 0x50
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a38:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003aac <MX_I2C1_Init+0x78>)
 8003a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a40:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab0 <MX_I2C1_Init+0x7c>)
 8003a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a44:	4b18      	ldr	r3, [pc, #96]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a4a:	4b17      	ldr	r3, [pc, #92]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a50:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a56:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a5c:	4b12      	ldr	r3, [pc, #72]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a62:	4b11      	ldr	r3, [pc, #68]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a68:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a6e:	480e      	ldr	r0, [pc, #56]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a70:	f001 ff28 	bl	80058c4 <HAL_I2C_Init>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a7a:	f000 f9e7 	bl	8003e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4809      	ldr	r0, [pc, #36]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a82:	f002 fde6 	bl	8006652 <HAL_I2CEx_ConfigAnalogFilter>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003a8c:	f000 f9de 	bl	8003e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a90:	2100      	movs	r1, #0
 8003a92:	4805      	ldr	r0, [pc, #20]	@ (8003aa8 <MX_I2C1_Init+0x74>)
 8003a94:	f002 fe28 	bl	80066e8 <HAL_I2CEx_ConfigDigitalFilter>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003a9e:	f000 f9d5 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000424 	.word	0x20000424
 8003aac:	40005400 	.word	0x40005400
 8003ab0:	00707cbb 	.word	0x00707cbb

08003ab4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003ab8:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <MX_IPCC_Init+0x20>)
 8003aba:	4a07      	ldr	r2, [pc, #28]	@ (8003ad8 <MX_IPCC_Init+0x24>)
 8003abc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003abe:	4805      	ldr	r0, [pc, #20]	@ (8003ad4 <MX_IPCC_Init+0x20>)
 8003ac0:	f002 fe5e 	bl	8006780 <HAL_IPCC_Init>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8003aca:	f000 f9bf 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000538 	.word	0x20000538
 8003ad8:	58000c00 	.word	0x58000c00

08003adc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003af0:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003af2:	4a17      	ldr	r2, [pc, #92]	@ (8003b50 <MX_RTC_Init+0x64>)
 8003af4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003af6:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003afc:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003afe:	220f      	movs	r2, #15
 8003b00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003b02:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003b04:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003b08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003b0a:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003b10:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003b16:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b22:	480a      	ldr	r0, [pc, #40]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003b24:	f004 fc7e 	bl	8008424 <HAL_RTC_Init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003b2e:	f000 f98d 	bl	8003e4c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003b32:	2200      	movs	r2, #0
 8003b34:	2100      	movs	r1, #0
 8003b36:	4805      	ldr	r0, [pc, #20]	@ (8003b4c <MX_RTC_Init+0x60>)
 8003b38:	f004 fd74 	bl	8008624 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003b42:	f000 f983 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000574 	.word	0x20000574
 8003b50:	40002800 	.word	0x40002800

08003b54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b09c      	sub	sp, #112	@ 0x70
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b74:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
 8003b84:	615a      	str	r2, [r3, #20]
 8003b86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b88:	1d3b      	adds	r3, r7, #4
 8003b8a:	2234      	movs	r2, #52	@ 0x34
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f00d fa6a 	bl	8011068 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b94:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003b96:	4a4c      	ldr	r2, [pc, #304]	@ (8003cc8 <MX_TIM1_Init+0x174>)
 8003b98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003b9c:	221f      	movs	r2, #31
 8003b9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba0:	4b48      	ldr	r3, [pc, #288]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8003ba6:	4b47      	ldr	r3, [pc, #284]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003ba8:	2263      	movs	r2, #99	@ 0x63
 8003baa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bac:	4b45      	ldr	r3, [pc, #276]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bb2:	4b44      	ldr	r3, [pc, #272]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb8:	4b42      	ldr	r3, [pc, #264]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003bbe:	4841      	ldr	r0, [pc, #260]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003bc0:	f004 fdec 	bl	800879c <HAL_TIM_Base_Init>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003bca:	f000 f93f 	bl	8003e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bd2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003bd4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003bd8:	4619      	mov	r1, r3
 8003bda:	483a      	ldr	r0, [pc, #232]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003bdc:	f005 f8d4 	bl	8008d88 <HAL_TIM_ConfigClockSource>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003be6:	f000 f931 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003bea:	4836      	ldr	r0, [pc, #216]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003bec:	f004 fe7c 	bl	80088e8 <HAL_TIM_PWM_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003bf6:	f000 f929 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	482d      	ldr	r0, [pc, #180]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003c0e:	f005 fd35 	bl	800967c <HAL_TIMEx_MasterConfigSynchronization>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8003c18:	f000 f918 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c1c:	2360      	movs	r3, #96	@ 0x60
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c24:	2300      	movs	r3, #0
 8003c26:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c30:	2300      	movs	r3, #0
 8003c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c34:	2300      	movs	r3, #0
 8003c36:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4820      	ldr	r0, [pc, #128]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003c42:	f004 ff8d 	bl	8008b60 <HAL_TIM_PWM_ConfigChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8003c4c:	f000 f8fe 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c54:	2204      	movs	r2, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	481a      	ldr	r0, [pc, #104]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003c5a:	f004 ff81 	bl	8008b60 <HAL_TIM_PWM_ConfigChannel>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8003c64:	f000 f8f2 	bl	8003e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003c8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ca0:	1d3b      	adds	r3, r7, #4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4807      	ldr	r0, [pc, #28]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003ca6:	f005 fd49 	bl	800973c <HAL_TIMEx_ConfigBreakDeadTime>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8003cb0:	f000 f8cc 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003cb4:	4803      	ldr	r0, [pc, #12]	@ (8003cc4 <MX_TIM1_Init+0x170>)
 8003cb6:	f000 fab5 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8003cba:	bf00      	nop
 8003cbc:	3770      	adds	r7, #112	@ 0x70
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000598 	.word	0x20000598
 8003cc8:	40012c00 	.word	0x40012c00

08003ccc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cd0:	4b23      	ldr	r3, [pc, #140]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003cd2:	4a24      	ldr	r2, [pc, #144]	@ (8003d64 <MX_USART1_UART_Init+0x98>)
 8003cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003cd6:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003cd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cea:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003cf2:	220c      	movs	r2, #12
 8003cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8003cfc:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003cfe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d02:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d04:	4b16      	ldr	r3, [pc, #88]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d10:	4b13      	ldr	r3, [pc, #76]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d16:	4812      	ldr	r0, [pc, #72]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003d18:	f005 fdb6 	bl	8009888 <HAL_UART_Init>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003d22:	f000 f893 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d26:	2100      	movs	r1, #0
 8003d28:	480d      	ldr	r0, [pc, #52]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003d2a:	f007 fe2a 	bl	800b982 <HAL_UARTEx_SetTxFifoThreshold>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003d34:	f000 f88a 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4809      	ldr	r0, [pc, #36]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003d3c:	f007 fe5f 	bl	800b9fe <HAL_UARTEx_SetRxFifoThreshold>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003d46:	f000 f881 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d4a:	4805      	ldr	r0, [pc, #20]	@ (8003d60 <MX_USART1_UART_Init+0x94>)
 8003d4c:	f007 fde0 	bl	800b910 <HAL_UARTEx_DisableFifoMode>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003d56:	f000 f879 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200005e4 	.word	0x200005e4
 8003d64:	40013800 	.word	0x40013800

08003d68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003d6c:	2004      	movs	r0, #4
 8003d6e:	f7ff fd73 	bl	8003858 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d72:	2001      	movs	r0, #1
 8003d74:	f7ff fd70 	bl	8003858 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	200b      	movs	r0, #11
 8003d7e:	f000 fee2 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003d82:	200b      	movs	r0, #11
 8003d84:	f000 fef9 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	200c      	movs	r0, #12
 8003d8e:	f000 feda 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003d92:	200c      	movs	r0, #12
 8003d94:	f000 fef1 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	200d      	movs	r0, #13
 8003d9e:	f000 fed2 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003da2:	200d      	movs	r0, #13
 8003da4:	f000 fee9 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003da8:	2200      	movs	r2, #0
 8003daa:	2100      	movs	r1, #0
 8003dac:	200e      	movs	r0, #14
 8003dae:	f000 feca 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003db2:	200e      	movs	r0, #14
 8003db4:	f000 fee1 	bl	8004b7a <HAL_NVIC_EnableIRQ>

}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dd0:	2004      	movs	r0, #4
 8003dd2:	f7ff fd5a 	bl	800388a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd6:	2002      	movs	r0, #2
 8003dd8:	f7ff fd57 	bl	800388a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ddc:	2001      	movs	r0, #1
 8003dde:	f7ff fd54 	bl	800388a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003de2:	2008      	movs	r0, #8
 8003de4:	f7ff fd51 	bl	800388a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8003de8:	2200      	movs	r2, #0
 8003dea:	2122      	movs	r1, #34	@ 0x22
 8003dec:	4814      	ldr	r0, [pc, #80]	@ (8003e40 <MX_GPIO_Init+0x84>)
 8003dee:	f001 fd2d 	bl	800584c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003df2:	2310      	movs	r3, #16
 8003df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	4619      	mov	r1, r3
 8003e02:	4810      	ldr	r0, [pc, #64]	@ (8003e44 <MX_GPIO_Init+0x88>)
 8003e04:	f001 fad4 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD1_Pin;
 8003e08:	2322      	movs	r3, #34	@ 0x22
 8003e0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e18:	1d3b      	adds	r3, r7, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4808      	ldr	r0, [pc, #32]	@ (8003e40 <MX_GPIO_Init+0x84>)
 8003e1e:	f001 fac7 	bl	80053b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8003e22:	2303      	movs	r3, #3
 8003e24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4805      	ldr	r0, [pc, #20]	@ (8003e48 <MX_GPIO_Init+0x8c>)
 8003e34:	f001 fabc 	bl	80053b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	48000400 	.word	0x48000400
 8003e44:	48000800 	.word	0x48000800
 8003e48:	48000c00 	.word	0x48000c00

08003e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e50:	b672      	cpsid	i
}
 8003e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <Error_Handler+0x8>

08003e58 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_AHB2_GRP1_EnableClock>:
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_AHB3_GRP1_EnableClock>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <LL_APB1_GRP1_EnableClock>:
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003eec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4013      	ands	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f02:	68fb      	ldr	r3, [r7, #12]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_APB1_GRP1_DisableClock>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f26:	4013      	ands	r3, r2
 8003f28:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <LL_APB2_GRP1_EnableClock>:
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4013      	ands	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003f6c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003f70:	f7ff ff9c 	bl	8003eac <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003f74:	2200      	movs	r2, #0
 8003f76:	2100      	movs	r1, #0
 8003f78:	202e      	movs	r0, #46	@ 0x2e
 8003f7a:	f000 fde4 	bl	8004b46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003f7e:	202e      	movs	r0, #46	@ 0x2e
 8003f80:	f000 fdfb 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b09c      	sub	sp, #112	@ 0x70
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	2250      	movs	r2, #80	@ 0x50
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f00d f85d 	bl	8011068 <memset>
  if(hi2c->Instance==I2C1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a48      	ldr	r2, [pc, #288]	@ (80040d4 <HAL_I2C_MspInit+0x14c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	f040 8089 	bne.w	80040cc <HAL_I2C_MspInit+0x144>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003fba:	2304      	movs	r3, #4
 8003fbc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003fbe:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fc4:	f107 030c 	add.w	r3, r7, #12
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f003 ffa4 	bl	8007f16 <HAL_RCCEx_PeriphCLKConfig>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003fd4:	f7ff ff3a 	bl	8003e4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd8:	2002      	movs	r0, #2
 8003fda:	f7ff ff4e 	bl	8003e7a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fe4:	2312      	movs	r3, #18
 8003fe6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fec:	2300      	movs	r3, #0
 8003fee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4837      	ldr	r0, [pc, #220]	@ (80040d8 <HAL_I2C_MspInit+0x150>)
 8003ffc:	f001 f9d8 	bl	80053b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004000:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004004:	f7ff ff6b 	bl	8003ede <LL_APB1_GRP1_EnableClock>

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8004008:	4b34      	ldr	r3, [pc, #208]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 800400a:	4a35      	ldr	r2, [pc, #212]	@ (80040e0 <HAL_I2C_MspInit+0x158>)
 800400c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800400e:	4b33      	ldr	r3, [pc, #204]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 8004010:	220b      	movs	r2, #11
 8004012:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004014:	4b31      	ldr	r3, [pc, #196]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 8004016:	2210      	movs	r2, #16
 8004018:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800401a:	4b30      	ldr	r3, [pc, #192]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 800401c:	2200      	movs	r2, #0
 800401e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004020:	4b2e      	ldr	r3, [pc, #184]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 8004022:	2280      	movs	r2, #128	@ 0x80
 8004024:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004026:	4b2d      	ldr	r3, [pc, #180]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 8004028:	2200      	movs	r2, #0
 800402a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800402c:	4b2b      	ldr	r3, [pc, #172]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 800402e:	2200      	movs	r2, #0
 8004030:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004032:	4b2a      	ldr	r3, [pc, #168]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 8004034:	2200      	movs	r2, #0
 8004036:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004038:	4b28      	ldr	r3, [pc, #160]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 800403a:	2200      	movs	r2, #0
 800403c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800403e:	4827      	ldr	r0, [pc, #156]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 8004040:	f000 fde0 	bl	8004c04 <HAL_DMA_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 800404a:	f7ff feff 	bl	8003e4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a22      	ldr	r2, [pc, #136]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38
 8004054:	4a21      	ldr	r2, [pc, #132]	@ (80040dc <HAL_I2C_MspInit+0x154>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 800405a:	4b22      	ldr	r3, [pc, #136]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 800405c:	4a22      	ldr	r2, [pc, #136]	@ (80040e8 <HAL_I2C_MspInit+0x160>)
 800405e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8004060:	4b20      	ldr	r3, [pc, #128]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 8004062:	220a      	movs	r2, #10
 8004064:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004066:	4b1f      	ldr	r3, [pc, #124]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 8004068:	2200      	movs	r2, #0
 800406a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800406c:	4b1d      	ldr	r3, [pc, #116]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004072:	4b1c      	ldr	r3, [pc, #112]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 8004074:	2280      	movs	r2, #128	@ 0x80
 8004076:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004078:	4b1a      	ldr	r3, [pc, #104]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 800407a:	2200      	movs	r2, #0
 800407c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800407e:	4b19      	ldr	r3, [pc, #100]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 8004080:	2200      	movs	r2, #0
 8004082:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004084:	4b17      	ldr	r3, [pc, #92]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 8004086:	2200      	movs	r2, #0
 8004088:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800408a:	4b16      	ldr	r3, [pc, #88]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 800408c:	2200      	movs	r2, #0
 800408e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004090:	4814      	ldr	r0, [pc, #80]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 8004092:	f000 fdb7 	bl	8004c04 <HAL_DMA_Init>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_MspInit+0x118>
    {
      Error_Handler();
 800409c:	f7ff fed6 	bl	8003e4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a10      	ldr	r2, [pc, #64]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 80040a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040a6:	4a0f      	ldr	r2, [pc, #60]	@ (80040e4 <HAL_I2C_MspInit+0x15c>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80040ac:	2200      	movs	r2, #0
 80040ae:	2100      	movs	r1, #0
 80040b0:	201e      	movs	r0, #30
 80040b2:	f000 fd48 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80040b6:	201e      	movs	r0, #30
 80040b8:	f000 fd5f 	bl	8004b7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	201f      	movs	r0, #31
 80040c2:	f000 fd40 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80040c6:	201f      	movs	r0, #31
 80040c8:	f000 fd57 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80040cc:	bf00      	nop
 80040ce:	3770      	adds	r7, #112	@ 0x70
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40005400 	.word	0x40005400
 80040d8:	48000400 	.word	0x48000400
 80040dc:	20000478 	.word	0x20000478
 80040e0:	40020030 	.word	0x40020030
 80040e4:	200004d8 	.word	0x200004d8
 80040e8:	40020044 	.word	0x40020044

080040ec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a12      	ldr	r2, [pc, #72]	@ (8004144 <HAL_I2C_MspDeInit+0x58>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d11d      	bne.n	800413a <HAL_I2C_MspDeInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80040fe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004102:	f7ff ff05 	bl	8003f10 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004106:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800410a:	480f      	ldr	r0, [pc, #60]	@ (8004148 <HAL_I2C_MspDeInit+0x5c>)
 800410c:	f001 fac0 	bl	8005690 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004110:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004114:	480c      	ldr	r0, [pc, #48]	@ (8004148 <HAL_I2C_MspDeInit+0x5c>)
 8004116:	f001 fabb 	bl	8005690 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fe18 	bl	8004d54 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fe13 	bl	8004d54 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800412e:	201e      	movs	r0, #30
 8004130:	f000 fd31 	bl	8004b96 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004134:	201f      	movs	r0, #31
 8004136:	f000 fd2e 	bl	8004b96 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40005400 	.word	0x40005400
 8004148:	48000400 	.word	0x48000400

0800414c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a0d      	ldr	r2, [pc, #52]	@ (8004190 <HAL_IPCC_MspInit+0x44>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d113      	bne.n	8004186 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800415e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004162:	f7ff fea3 	bl	8003eac <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	2100      	movs	r1, #0
 800416a:	202c      	movs	r0, #44	@ 0x2c
 800416c:	f000 fceb 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004170:	202c      	movs	r0, #44	@ 0x2c
 8004172:	f000 fd02 	bl	8004b7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8004176:	2200      	movs	r2, #0
 8004178:	2100      	movs	r1, #0
 800417a:	202d      	movs	r0, #45	@ 0x2d
 800417c:	f000 fce3 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8004180:	202d      	movs	r0, #45	@ 0x2d
 8004182:	f000 fcfa 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	58000c00 	.word	0x58000c00

08004194 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b096      	sub	sp, #88	@ 0x58
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	2250      	movs	r2, #80	@ 0x50
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f00c ff5f 	bl	8011068 <memset>
  if(hrtc->Instance==RTC)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a12      	ldr	r2, [pc, #72]	@ (80041f8 <HAL_RTC_MspInit+0x64>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d11d      	bne.n	80041f0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80041b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80041b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80041ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041be:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041c0:	f107 0308 	add.w	r3, r7, #8
 80041c4:	4618      	mov	r0, r3
 80041c6:	f003 fea6 	bl	8007f16 <HAL_RCCEx_PeriphCLKConfig>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80041d0:	f7ff fe3c 	bl	8003e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80041d4:	f7ff fe40 	bl	8003e58 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80041d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80041dc:	f7ff fe7f 	bl	8003ede <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	2100      	movs	r1, #0
 80041e4:	2003      	movs	r0, #3
 80041e6:	f000 fcae 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80041ea:	2003      	movs	r0, #3
 80041ec:	f000 fcc5 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80041f0:	bf00      	nop
 80041f2:	3758      	adds	r7, #88	@ 0x58
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40002800 	.word	0x40002800

080041fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a05      	ldr	r2, [pc, #20]	@ (8004220 <HAL_TIM_Base_MspInit+0x24>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d103      	bne.n	8004216 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800420e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004212:	f7ff fe90 	bl	8003f36 <LL_APB2_GRP1_EnableClock>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00

08004224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 030c 	add.w	r3, r7, #12
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0d      	ldr	r2, [pc, #52]	@ (8004278 <HAL_TIM_MspPostInit+0x54>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d114      	bne.n	8004270 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004246:	2001      	movs	r0, #1
 8004248:	f7ff fe17 	bl	8003e7a <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800424c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004252:	2302      	movs	r3, #2
 8004254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800425e:	2301      	movs	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	4619      	mov	r1, r3
 8004268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800426c:	f001 f8a0 	bl	80053b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004270:	bf00      	nop
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40012c00 	.word	0x40012c00

0800427c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b09c      	sub	sp, #112	@ 0x70
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004294:	f107 030c 	add.w	r3, r7, #12
 8004298:	2250      	movs	r2, #80	@ 0x50
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f00c fee3 	bl	8011068 <memset>
  if(huart->Instance==USART1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a43      	ldr	r2, [pc, #268]	@ (80043b4 <HAL_UART_MspInit+0x138>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d17f      	bne.n	80043ac <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80042ac:	2301      	movs	r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80042b0:	2300      	movs	r3, #0
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 fe2c 	bl	8007f16 <HAL_RCCEx_PeriphCLKConfig>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80042c4:	f7ff fdc2 	bl	8003e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042c8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80042cc:	f7ff fe33 	bl	8003f36 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d0:	2002      	movs	r0, #2
 80042d2:	f7ff fdd2 	bl	8003e7a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80042d6:	23c0      	movs	r3, #192	@ 0xc0
 80042d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042da:	2302      	movs	r3, #2
 80042dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e2:	2300      	movs	r3, #0
 80042e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042e6:	2307      	movs	r3, #7
 80042e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80042ee:	4619      	mov	r1, r3
 80042f0:	4831      	ldr	r0, [pc, #196]	@ (80043b8 <HAL_UART_MspInit+0x13c>)
 80042f2:	f001 f85d 	bl	80053b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80042f6:	4b31      	ldr	r3, [pc, #196]	@ (80043bc <HAL_UART_MspInit+0x140>)
 80042f8:	4a31      	ldr	r2, [pc, #196]	@ (80043c0 <HAL_UART_MspInit+0x144>)
 80042fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80042fc:	4b2f      	ldr	r3, [pc, #188]	@ (80043bc <HAL_UART_MspInit+0x140>)
 80042fe:	220e      	movs	r2, #14
 8004300:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004302:	4b2e      	ldr	r3, [pc, #184]	@ (80043bc <HAL_UART_MspInit+0x140>)
 8004304:	2200      	movs	r2, #0
 8004306:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004308:	4b2c      	ldr	r3, [pc, #176]	@ (80043bc <HAL_UART_MspInit+0x140>)
 800430a:	2200      	movs	r2, #0
 800430c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800430e:	4b2b      	ldr	r3, [pc, #172]	@ (80043bc <HAL_UART_MspInit+0x140>)
 8004310:	2280      	movs	r2, #128	@ 0x80
 8004312:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004314:	4b29      	ldr	r3, [pc, #164]	@ (80043bc <HAL_UART_MspInit+0x140>)
 8004316:	2200      	movs	r2, #0
 8004318:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800431a:	4b28      	ldr	r3, [pc, #160]	@ (80043bc <HAL_UART_MspInit+0x140>)
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004320:	4b26      	ldr	r3, [pc, #152]	@ (80043bc <HAL_UART_MspInit+0x140>)
 8004322:	2200      	movs	r2, #0
 8004324:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004326:	4b25      	ldr	r3, [pc, #148]	@ (80043bc <HAL_UART_MspInit+0x140>)
 8004328:	2200      	movs	r2, #0
 800432a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800432c:	4823      	ldr	r0, [pc, #140]	@ (80043bc <HAL_UART_MspInit+0x140>)
 800432e:	f000 fc69 	bl	8004c04 <HAL_DMA_Init>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8004338:	f7ff fd88 	bl	8003e4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a1f      	ldr	r2, [pc, #124]	@ (80043bc <HAL_UART_MspInit+0x140>)
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004344:	4a1d      	ldr	r2, [pc, #116]	@ (80043bc <HAL_UART_MspInit+0x140>)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800434a:	4b1e      	ldr	r3, [pc, #120]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 800434c:	4a1e      	ldr	r2, [pc, #120]	@ (80043c8 <HAL_UART_MspInit+0x14c>)
 800434e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004350:	4b1c      	ldr	r3, [pc, #112]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004352:	220f      	movs	r2, #15
 8004354:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004356:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004358:	2210      	movs	r2, #16
 800435a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800435c:	4b19      	ldr	r3, [pc, #100]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 800435e:	2200      	movs	r2, #0
 8004360:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004362:	4b18      	ldr	r3, [pc, #96]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004364:	2280      	movs	r2, #128	@ 0x80
 8004366:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004368:	4b16      	ldr	r3, [pc, #88]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 800436a:	2200      	movs	r2, #0
 800436c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800436e:	4b15      	ldr	r3, [pc, #84]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004374:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004376:	2200      	movs	r2, #0
 8004378:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800437a:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 800437c:	2200      	movs	r2, #0
 800437e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004380:	4810      	ldr	r0, [pc, #64]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004382:	f000 fc3f 	bl	8004c04 <HAL_DMA_Init>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 800438c:	f7ff fd5e 	bl	8003e4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a0c      	ldr	r2, [pc, #48]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004394:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004396:	4a0b      	ldr	r2, [pc, #44]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800439c:	2200      	movs	r2, #0
 800439e:	2100      	movs	r1, #0
 80043a0:	2024      	movs	r0, #36	@ 0x24
 80043a2:	f000 fbd0 	bl	8004b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043a6:	2024      	movs	r0, #36	@ 0x24
 80043a8:	f000 fbe7 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80043ac:	bf00      	nop
 80043ae:	3770      	adds	r7, #112	@ 0x70
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40013800 	.word	0x40013800
 80043b8:	48000400 	.word	0x48000400
 80043bc:	20000678 	.word	0x20000678
 80043c0:	40020008 	.word	0x40020008
 80043c4:	200006d8 	.word	0x200006d8
 80043c8:	4002001c 	.word	0x4002001c

080043cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <NMI_Handler+0x4>

080043d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <HardFault_Handler+0x4>

080043dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <MemManage_Handler+0x4>

080043e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <BusFault_Handler+0x4>

080043ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <UsageFault_Handler+0x4>

080043f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004402:	b480      	push	{r7}
 8004404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004406:	bf00      	nop
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004422:	f000 fa11 	bl	8004848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}

0800442a <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800442e:	f7fe fe9d 	bl	800316c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800443c:	4802      	ldr	r0, [pc, #8]	@ (8004448 <DMA1_Channel1_IRQHandler+0x10>)
 800443e:	f000 fe58 	bl	80050f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000678 	.word	0x20000678

0800444c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004450:	4802      	ldr	r0, [pc, #8]	@ (800445c <DMA1_Channel2_IRQHandler+0x10>)
 8004452:	f000 fe4e 	bl	80050f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	200006d8 	.word	0x200006d8

08004460 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004464:	4802      	ldr	r0, [pc, #8]	@ (8004470 <DMA1_Channel3_IRQHandler+0x10>)
 8004466:	f000 fe44 	bl	80050f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800446a:	bf00      	nop
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20000478 	.word	0x20000478

08004474 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004478:	4802      	ldr	r0, [pc, #8]	@ (8004484 <DMA1_Channel4_IRQHandler+0x10>)
 800447a:	f000 fe3a 	bl	80050f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	200004d8 	.word	0x200004d8

08004488 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800448c:	4802      	ldr	r0, [pc, #8]	@ (8004498 <I2C1_EV_IRQHandler+0x10>)
 800448e:	f001 fae3 	bl	8005a58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000424 	.word	0x20000424

0800449c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80044a0:	4802      	ldr	r0, [pc, #8]	@ (80044ac <I2C1_ER_IRQHandler+0x10>)
 80044a2:	f001 faf3 	bl	8005a8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000424 	.word	0x20000424

080044b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044b4:	4802      	ldr	r0, [pc, #8]	@ (80044c0 <USART1_IRQHandler+0x10>)
 80044b6:	f005 fb03 	bl	8009ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	200005e4 	.word	0x200005e4

080044c4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80044c8:	f00a fa62 	bl	800e990 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80044d4:	f00a fa92 	bl	800e9fc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}

080044dc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80044e0:	f001 f9cc 	bl	800587c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return 1;
 80044ec:	2301      	movs	r3, #1
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <_kill>:

int _kill(int pid, int sig)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004502:	f00c fe25 	bl	8011150 <__errno>
 8004506:	4603      	mov	r3, r0
 8004508:	2216      	movs	r2, #22
 800450a:	601a      	str	r2, [r3, #0]
  return -1;
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_exit>:

void _exit (int status)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004520:	f04f 31ff 	mov.w	r1, #4294967295
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff ffe7 	bl	80044f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800452a:	bf00      	nop
 800452c:	e7fd      	b.n	800452a <_exit+0x12>

0800452e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	e00a      	b.n	8004556 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004540:	f3af 8000 	nop.w
 8004544:	4601      	mov	r1, r0
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	60ba      	str	r2, [r7, #8]
 800454c:	b2ca      	uxtb	r2, r1
 800454e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	3301      	adds	r3, #1
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	dbf0      	blt.n	8004540 <_read+0x12>
  }

  return len;
 800455e:	687b      	ldr	r3, [r7, #4]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004590:	605a      	str	r2, [r3, #4]
  return 0;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <_isatty>:

int _isatty(int file)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045a8:	2301      	movs	r3, #1
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b085      	sub	sp, #20
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045d8:	4a14      	ldr	r2, [pc, #80]	@ (800462c <_sbrk+0x5c>)
 80045da:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <_sbrk+0x60>)
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045e4:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <_sbrk+0x64>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045ec:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <_sbrk+0x64>)
 80045ee:	4a12      	ldr	r2, [pc, #72]	@ (8004638 <_sbrk+0x68>)
 80045f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045f2:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <_sbrk+0x64>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d207      	bcs.n	8004610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004600:	f00c fda6 	bl	8011150 <__errno>
 8004604:	4603      	mov	r3, r0
 8004606:	220c      	movs	r2, #12
 8004608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	e009      	b.n	8004624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004610:	4b08      	ldr	r3, [pc, #32]	@ (8004634 <_sbrk+0x64>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004616:	4b07      	ldr	r3, [pc, #28]	@ (8004634 <_sbrk+0x64>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	4a05      	ldr	r2, [pc, #20]	@ (8004634 <_sbrk+0x64>)
 8004620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004622:	68fb      	ldr	r3, [r7, #12]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20030000 	.word	0x20030000
 8004630:	00000400 	.word	0x00000400
 8004634:	20000738 	.word	0x20000738
 8004638:	20000a40 	.word	0x20000a40

0800463c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004640:	4b24      	ldr	r3, [pc, #144]	@ (80046d4 <SystemInit+0x98>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004646:	4a23      	ldr	r2, [pc, #140]	@ (80046d4 <SystemInit+0x98>)
 8004648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800464c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004664:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8004668:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004674:	4b18      	ldr	r3, [pc, #96]	@ (80046d8 <SystemInit+0x9c>)
 8004676:	4013      	ands	r3, r2
 8004678:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800467e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004682:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004686:	f023 0305 	bic.w	r3, r3, #5
 800468a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800468e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a6:	4a0d      	ldr	r2, [pc, #52]	@ (80046dc <SystemInit+0xa0>)
 80046a8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80046aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ae:	4a0b      	ldr	r2, [pc, #44]	@ (80046dc <SystemInit+0xa0>)
 80046b0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c6:	2200      	movs	r2, #0
 80046c8:	619a      	str	r2, [r3, #24]
}
 80046ca:	bf00      	nop
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	e000ed00 	.word	0xe000ed00
 80046d8:	faf6fefb 	.word	0xfaf6fefb
 80046dc:	22041000 	.word	0x22041000

080046e0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80046e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046e4:	3304      	adds	r3, #4

080046e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046e8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80046ea:	d3f9      	bcc.n	80046e0 <CopyDataInit>
  bx lr
 80046ec:	4770      	bx	lr

080046ee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80046ee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80046f0:	3004      	adds	r0, #4

080046f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80046f2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80046f4:	d3fb      	bcc.n	80046ee <FillZerobss>
  bx lr
 80046f6:	4770      	bx	lr

080046f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80046f8:	480c      	ldr	r0, [pc, #48]	@ (800472c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80046fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80046fc:	f7ff ff9e 	bl	800463c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004700:	480b      	ldr	r0, [pc, #44]	@ (8004730 <LoopForever+0x6>)
 8004702:	490c      	ldr	r1, [pc, #48]	@ (8004734 <LoopForever+0xa>)
 8004704:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <LoopForever+0xe>)
 8004706:	2300      	movs	r3, #0
 8004708:	f7ff ffed 	bl	80046e6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800470c:	480b      	ldr	r0, [pc, #44]	@ (800473c <LoopForever+0x12>)
 800470e:	490c      	ldr	r1, [pc, #48]	@ (8004740 <LoopForever+0x16>)
 8004710:	4a0c      	ldr	r2, [pc, #48]	@ (8004744 <LoopForever+0x1a>)
 8004712:	2300      	movs	r3, #0
 8004714:	f7ff ffe7 	bl	80046e6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004718:	480b      	ldr	r0, [pc, #44]	@ (8004748 <LoopForever+0x1e>)
 800471a:	490c      	ldr	r1, [pc, #48]	@ (800474c <LoopForever+0x22>)
 800471c:	2300      	movs	r3, #0
 800471e:	f7ff ffe8 	bl	80046f2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004722:	f00c fd1b 	bl	801115c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004726:	f7ff f8c9 	bl	80038bc <main>

0800472a <LoopForever>:

LoopForever:
  b LoopForever
 800472a:	e7fe      	b.n	800472a <LoopForever>
  ldr   r0, =_estack
 800472c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004730:	20000008 	.word	0x20000008
 8004734:	20000200 	.word	0x20000200
 8004738:	080141ac 	.word	0x080141ac
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800473c:	200301e4 	.word	0x200301e4
 8004740:	20030a67 	.word	0x20030a67
 8004744:	080143ea 	.word	0x080143ea
  INIT_BSS _sbss, _ebss
 8004748:	2000024c 	.word	0x2000024c
 800474c:	20000a40 	.word	0x20000a40

08004750 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004750:	e7fe      	b.n	8004750 <ADC1_IRQHandler>
	...

08004754 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004758:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a04      	ldr	r2, [pc, #16]	@ (8004770 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6053      	str	r3, [r2, #4]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e0042000 	.word	0xe0042000

08004774 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a04      	ldr	r2, [pc, #16]	@ (8004790 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800477e:	f043 0302 	orr.w	r3, r3, #2
 8004782:	6053      	str	r3, [r2, #4]
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e0042000 	.word	0xe0042000

08004794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800479e:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <HAL_Init+0x3c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a0b      	ldr	r2, [pc, #44]	@ (80047d0 <HAL_Init+0x3c>)
 80047a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047aa:	2003      	movs	r0, #3
 80047ac:	f000 f9c0 	bl	8004b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047b0:	2000      	movs	r0, #0
 80047b2:	f000 f80f 	bl	80047d4 <HAL_InitTick>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	71fb      	strb	r3, [r7, #7]
 80047c0:	e001      	b.n	80047c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047c2:	f7ff fbd1 	bl	8003f68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047c6:	79fb      	ldrb	r3, [r7, #7]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	58004000 	.word	0x58004000

080047d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80047e0:	4b17      	ldr	r3, [pc, #92]	@ (8004840 <HAL_InitTick+0x6c>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d024      	beq.n	8004832 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80047e8:	f003 f904 	bl	80079f4 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b14      	ldr	r3, [pc, #80]	@ (8004840 <HAL_InitTick+0x6c>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	4619      	mov	r1, r3
 80047f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f9d6 	bl	8004bb2 <HAL_SYSTICK_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10f      	bne.n	800482c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b0f      	cmp	r3, #15
 8004810:	d809      	bhi.n	8004826 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004812:	2200      	movs	r2, #0
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	f04f 30ff 	mov.w	r0, #4294967295
 800481a:	f000 f994 	bl	8004b46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800481e:	4a09      	ldr	r2, [pc, #36]	@ (8004844 <HAL_InitTick+0x70>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e007      	b.n	8004836 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
 800482a:	e004      	b.n	8004836 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e001      	b.n	8004836 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	2000001c 	.word	0x2000001c
 8004844:	20000018 	.word	0x20000018

08004848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <HAL_IncTick+0x20>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <HAL_IncTick+0x24>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4413      	add	r3, r2
 8004858:	4a04      	ldr	r2, [pc, #16]	@ (800486c <HAL_IncTick+0x24>)
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	2000001c 	.word	0x2000001c
 800486c:	2000073c 	.word	0x2000073c

08004870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return uwTick;
 8004874:	4b03      	ldr	r3, [pc, #12]	@ (8004884 <HAL_GetTick+0x14>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	2000073c 	.word	0x2000073c

08004888 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800488c:	4b03      	ldr	r3, [pc, #12]	@ (800489c <HAL_GetTickPrio+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000018 	.word	0x20000018

080048a0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80048a4:	4b03      	ldr	r3, [pc, #12]	@ (80048b4 <HAL_GetTickFreq+0x14>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000001c 	.word	0x2000001c

080048b8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80048bc:	f7ff ff4a 	bl	8004754 <LL_DBGMCU_EnableDBGSleepMode>
}
 80048c0:	bf00      	nop
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80048c8:	f7ff ff54 	bl	8004774 <LL_DBGMCU_EnableDBGStopMode>
}
 80048cc:	bf00      	nop
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048ec:	4013      	ands	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004902:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	60d3      	str	r3, [r2, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800491c:	4b04      	ldr	r3, [pc, #16]	@ (8004930 <__NVIC_GetPriorityGrouping+0x18>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	f003 0307 	and.w	r3, r3, #7
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	2b00      	cmp	r3, #0
 8004944:	db0b      	blt.n	800495e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	f003 021f 	and.w	r2, r3, #31
 800494c:	4907      	ldr	r1, [pc, #28]	@ (800496c <__NVIC_EnableIRQ+0x38>)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2001      	movs	r0, #1
 8004956:	fa00 f202 	lsl.w	r2, r0, r2
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	e000e100 	.word	0xe000e100

08004970 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	2b00      	cmp	r3, #0
 8004980:	db12      	blt.n	80049a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	f003 021f 	and.w	r2, r3, #31
 8004988:	490a      	ldr	r1, [pc, #40]	@ (80049b4 <__NVIC_DisableIRQ+0x44>)
 800498a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	2001      	movs	r0, #1
 8004992:	fa00 f202 	lsl.w	r2, r0, r2
 8004996:	3320      	adds	r3, #32
 8004998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800499c:	f3bf 8f4f 	dsb	sy
}
 80049a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049a2:	f3bf 8f6f 	isb	sy
}
 80049a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000e100 	.word	0xe000e100

080049b8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	db0c      	blt.n	80049e4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	f003 021f 	and.w	r2, r3, #31
 80049d0:	4907      	ldr	r1, [pc, #28]	@ (80049f0 <__NVIC_SetPendingIRQ+0x38>)
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2001      	movs	r0, #1
 80049da:	fa00 f202 	lsl.w	r2, r0, r2
 80049de:	3340      	adds	r3, #64	@ 0x40
 80049e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000e100 	.word	0xe000e100

080049f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	db0c      	blt.n	8004a20 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	f003 021f 	and.w	r2, r3, #31
 8004a0c:	4907      	ldr	r1, [pc, #28]	@ (8004a2c <__NVIC_ClearPendingIRQ+0x38>)
 8004a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2001      	movs	r0, #1
 8004a16:	fa00 f202 	lsl.w	r2, r0, r2
 8004a1a:	3360      	adds	r3, #96	@ 0x60
 8004a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	e000e100 	.word	0xe000e100

08004a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	6039      	str	r1, [r7, #0]
 8004a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	db0a      	blt.n	8004a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	490c      	ldr	r1, [pc, #48]	@ (8004a7c <__NVIC_SetPriority+0x4c>)
 8004a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4e:	0112      	lsls	r2, r2, #4
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	440b      	add	r3, r1
 8004a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a58:	e00a      	b.n	8004a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4908      	ldr	r1, [pc, #32]	@ (8004a80 <__NVIC_SetPriority+0x50>)
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	3b04      	subs	r3, #4
 8004a68:	0112      	lsls	r2, r2, #4
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	761a      	strb	r2, [r3, #24]
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000e100 	.word	0xe000e100
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	@ 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f1c3 0307 	rsb	r3, r3, #7
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	bf28      	it	cs
 8004aa2:	2304      	movcs	r3, #4
 8004aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	2b06      	cmp	r3, #6
 8004aac:	d902      	bls.n	8004ab4 <NVIC_EncodePriority+0x30>
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	3b03      	subs	r3, #3
 8004ab2:	e000      	b.n	8004ab6 <NVIC_EncodePriority+0x32>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004acc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad6:	43d9      	mvns	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004adc:	4313      	orrs	r3, r2
         );
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3724      	adds	r7, #36	@ 0x24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004afc:	d301      	bcc.n	8004b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004afe:	2301      	movs	r3, #1
 8004b00:	e00f      	b.n	8004b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b02:	4a0a      	ldr	r2, [pc, #40]	@ (8004b2c <SysTick_Config+0x40>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b0a:	210f      	movs	r1, #15
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	f7ff ff8e 	bl	8004a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <SysTick_Config+0x40>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b1a:	4b04      	ldr	r3, [pc, #16]	@ (8004b2c <SysTick_Config+0x40>)
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	e000e010 	.word	0xe000e010

08004b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff fec9 	bl	80048d0 <__NVIC_SetPriorityGrouping>
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b54:	f7ff fee0 	bl	8004918 <__NVIC_GetPriorityGrouping>
 8004b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7ff ff90 	bl	8004a84 <NVIC_EncodePriority>
 8004b64:	4602      	mov	r2, r0
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff5f 	bl	8004a30 <__NVIC_SetPriority>
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	4603      	mov	r3, r0
 8004b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fed3 	bl	8004934 <__NVIC_EnableIRQ>
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fee3 	bl	8004970 <__NVIC_DisableIRQ>
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff ff96 	bl	8004aec <SysTick_Config>
 8004bc0:	4603      	mov	r3, r0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff feed 	bl	80049b8 <__NVIC_SetPendingIRQ>
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	4603      	mov	r3, r0
 8004bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fefd 	bl	80049f4 <__NVIC_ClearPendingIRQ>
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e08e      	b.n	8004d34 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b47      	ldr	r3, [pc, #284]	@ (8004d3c <HAL_DMA_Init+0x138>)
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d80f      	bhi.n	8004c42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b45      	ldr	r3, [pc, #276]	@ (8004d40 <HAL_DMA_Init+0x13c>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a45      	ldr	r2, [pc, #276]	@ (8004d44 <HAL_DMA_Init+0x140>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	009a      	lsls	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a42      	ldr	r2, [pc, #264]	@ (8004d48 <HAL_DMA_Init+0x144>)
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c40:	e00e      	b.n	8004c60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	4b40      	ldr	r3, [pc, #256]	@ (8004d4c <HAL_DMA_Init+0x148>)
 8004c4a:	4413      	add	r3, r2
 8004c4c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d44 <HAL_DMA_Init+0x140>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	009a      	lsls	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d50 <HAL_DMA_Init+0x14c>)
 8004c5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fb18 	bl	80052e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cc0:	d102      	bne.n	8004cc8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004cd4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cde:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d010      	beq.n	8004d0a <HAL_DMA_Init+0x106>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d80c      	bhi.n	8004d0a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb37 	bl	8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d06:	605a      	str	r2, [r3, #4]
 8004d08:	e008      	b.n	8004d1c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40020407 	.word	0x40020407
 8004d40:	bffdfff8 	.word	0xbffdfff8
 8004d44:	cccccccd 	.word	0xcccccccd
 8004d48:	40020000 	.word	0x40020000
 8004d4c:	bffdfbf8 	.word	0xbffdfbf8
 8004d50:	40020400 	.word	0x40020400

08004d54 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07b      	b.n	8004e5e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e68 <HAL_DMA_DeInit+0x114>)
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d80f      	bhi.n	8004da2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	4b38      	ldr	r3, [pc, #224]	@ (8004e6c <HAL_DMA_DeInit+0x118>)
 8004d8a:	4413      	add	r3, r2
 8004d8c:	4a38      	ldr	r2, [pc, #224]	@ (8004e70 <HAL_DMA_DeInit+0x11c>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	009a      	lsls	r2, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a35      	ldr	r2, [pc, #212]	@ (8004e74 <HAL_DMA_DeInit+0x120>)
 8004d9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004da0:	e00e      	b.n	8004dc0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	4b33      	ldr	r3, [pc, #204]	@ (8004e78 <HAL_DMA_DeInit+0x124>)
 8004daa:	4413      	add	r3, r2
 8004dac:	4a30      	ldr	r2, [pc, #192]	@ (8004e70 <HAL_DMA_DeInit+0x11c>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	009a      	lsls	r2, r3, #2
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8004e7c <HAL_DMA_DeInit+0x128>)
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dcc:	f003 021c 	and.w	r2, r3, #28
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dda:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fa83 	bl	80052e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004df2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00f      	beq.n	8004e1c <HAL_DMA_DeInit+0xc8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d80b      	bhi.n	8004e1c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 faad 	bl	8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40020407 	.word	0x40020407
 8004e6c:	bffdfff8 	.word	0xbffdfff8
 8004e70:	cccccccd 	.word	0xcccccccd
 8004e74:	40020000 	.word	0x40020000
 8004e78:	bffdfbf8 	.word	0xbffdfbf8
 8004e7c:	40020400 	.word	0x40020400

08004e80 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_DMA_Start_IT+0x20>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e066      	b.n	8004f6e <HAL_DMA_Start_IT+0xee>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d155      	bne.n	8004f60 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f9c7 	bl	800526c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d008      	beq.n	8004ef8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 020e 	orr.w	r2, r2, #14
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e00f      	b.n	8004f18 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0204 	bic.w	r2, r2, #4
 8004f06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 020a 	orr.w	r2, r2, #10
 8004f16:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f34:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f4c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e005      	b.n	8004f6c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e04f      	b.n	8005028 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d008      	beq.n	8004fa6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2204      	movs	r2, #4
 8004f98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e040      	b.n	8005028 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 020e 	bic.w	r2, r2, #14
 8004fb4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fda:	f003 021c 	and.w	r2, r3, #28
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ff2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00c      	beq.n	8005016 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005006:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800500a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005014:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d005      	beq.n	8005058 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2204      	movs	r2, #4
 8005050:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
 8005056:	e047      	b.n	80050e8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 020e 	bic.w	r2, r2, #14
 8005066:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0201 	bic.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005082:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005086:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508c:	f003 021c 	and.w	r2, r3, #28
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005094:	2101      	movs	r1, #1
 8005096:	fa01 f202 	lsl.w	r2, r1, r2
 800509a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00c      	beq.n	80050c8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
    }
  }
  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	f003 031c 	and.w	r3, r3, #28
 8005112:	2204      	movs	r2, #4
 8005114:	409a      	lsls	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d026      	beq.n	800516c <HAL_DMA_IRQHandler+0x7a>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d021      	beq.n	800516c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d107      	bne.n	8005146 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0204 	bic.w	r2, r2, #4
 8005144:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	f003 021c 	and.w	r2, r3, #28
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	2104      	movs	r1, #4
 8005154:	fa01 f202 	lsl.w	r2, r1, r2
 8005158:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515e:	2b00      	cmp	r3, #0
 8005160:	d071      	beq.n	8005246 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800516a:	e06c      	b.n	8005246 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005170:	f003 031c 	and.w	r3, r3, #28
 8005174:	2202      	movs	r2, #2
 8005176:	409a      	lsls	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d02e      	beq.n	80051de <HAL_DMA_IRQHandler+0xec>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d029      	beq.n	80051de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 020a 	bic.w	r2, r2, #10
 80051a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b4:	f003 021c 	and.w	r2, r3, #28
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	2102      	movs	r1, #2
 80051be:	fa01 f202 	lsl.w	r2, r1, r2
 80051c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d038      	beq.n	8005246 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80051dc:	e033      	b.n	8005246 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e2:	f003 031c 	and.w	r3, r3, #28
 80051e6:	2208      	movs	r2, #8
 80051e8:	409a      	lsls	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02a      	beq.n	8005248 <HAL_DMA_IRQHandler+0x156>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d025      	beq.n	8005248 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 020e 	bic.w	r2, r2, #14
 800520a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005210:	f003 021c 	and.w	r2, r3, #28
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	2101      	movs	r1, #1
 800521a:	fa01 f202 	lsl.w	r2, r1, r2
 800521e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005246:	bf00      	nop
 8005248:	bf00      	nop
}
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800525e:	b2db      	uxtb	r3, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005282:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005294:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529a:	f003 021c 	and.w	r2, r3, #28
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	2101      	movs	r1, #1
 80052a4:	fa01 f202 	lsl.w	r2, r1, r2
 80052a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d108      	bne.n	80052cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052ca:	e007      	b.n	80052dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b17      	ldr	r3, [pc, #92]	@ (8005354 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d80a      	bhi.n	8005312 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005300:	089b      	lsrs	r3, r3, #2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005308:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6493      	str	r3, [r2, #72]	@ 0x48
 8005310:	e007      	b.n	8005322 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	089b      	lsrs	r3, r3, #2
 8005318:	009a      	lsls	r2, r3, #2
 800531a:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800531c:	4413      	add	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	3b08      	subs	r3, #8
 800532a:	4a0c      	ldr	r2, [pc, #48]	@ (800535c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	091b      	lsrs	r3, r3, #4
 8005332:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a0a      	ldr	r2, [pc, #40]	@ (8005360 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005338:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40020407 	.word	0x40020407
 8005358:	4002081c 	.word	0x4002081c
 800535c:	cccccccd 	.word	0xcccccccd
 8005360:	40020880 	.word	0x40020880

08005364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005374:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	461a      	mov	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a09      	ldr	r2, [pc, #36]	@ (80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005388:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3b01      	subs	r3, #1
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2201      	movs	r2, #1
 8005394:	409a      	lsls	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	1000823f 	.word	0x1000823f
 80053ac:	40020940 	.word	0x40020940

080053b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053be:	e14c      	b.n	800565a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	fa01 f303 	lsl.w	r3, r1, r3
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 813e 	beq.w	8005654 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d005      	beq.n	80053f0 <HAL_GPIO_Init+0x40>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d130      	bne.n	8005452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	2203      	movs	r2, #3
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	43db      	mvns	r3, r3
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4013      	ands	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005426:	2201      	movs	r2, #1
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	f003 0201 	and.w	r2, r3, #1
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b03      	cmp	r3, #3
 800545c:	d017      	beq.n	800548e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	2203      	movs	r2, #3
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d123      	bne.n	80054e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	08da      	lsrs	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3208      	adds	r2, #8
 80054a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	220f      	movs	r2, #15
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	08da      	lsrs	r2, r3, #3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3208      	adds	r2, #8
 80054dc:	6939      	ldr	r1, [r7, #16]
 80054de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	2203      	movs	r2, #3
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43db      	mvns	r3, r3
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4013      	ands	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f003 0203 	and.w	r2, r3, #3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8098 	beq.w	8005654 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005524:	4a54      	ldr	r2, [pc, #336]	@ (8005678 <HAL_GPIO_Init+0x2c8>)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	089b      	lsrs	r3, r3, #2
 800552a:	3302      	adds	r3, #2
 800552c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	220f      	movs	r2, #15
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4013      	ands	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800554e:	d019      	beq.n	8005584 <HAL_GPIO_Init+0x1d4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a4a      	ldr	r2, [pc, #296]	@ (800567c <HAL_GPIO_Init+0x2cc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <HAL_GPIO_Init+0x1d0>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a49      	ldr	r2, [pc, #292]	@ (8005680 <HAL_GPIO_Init+0x2d0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00d      	beq.n	800557c <HAL_GPIO_Init+0x1cc>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a48      	ldr	r2, [pc, #288]	@ (8005684 <HAL_GPIO_Init+0x2d4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <HAL_GPIO_Init+0x1c8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a47      	ldr	r2, [pc, #284]	@ (8005688 <HAL_GPIO_Init+0x2d8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d101      	bne.n	8005574 <HAL_GPIO_Init+0x1c4>
 8005570:	2304      	movs	r3, #4
 8005572:	e008      	b.n	8005586 <HAL_GPIO_Init+0x1d6>
 8005574:	2307      	movs	r3, #7
 8005576:	e006      	b.n	8005586 <HAL_GPIO_Init+0x1d6>
 8005578:	2303      	movs	r3, #3
 800557a:	e004      	b.n	8005586 <HAL_GPIO_Init+0x1d6>
 800557c:	2302      	movs	r3, #2
 800557e:	e002      	b.n	8005586 <HAL_GPIO_Init+0x1d6>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <HAL_GPIO_Init+0x1d6>
 8005584:	2300      	movs	r3, #0
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	f002 0203 	and.w	r2, r2, #3
 800558c:	0092      	lsls	r2, r2, #2
 800558e:	4093      	lsls	r3, r2
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005596:	4938      	ldr	r1, [pc, #224]	@ (8005678 <HAL_GPIO_Init+0x2c8>)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	3302      	adds	r3, #2
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055a4:	4b39      	ldr	r3, [pc, #228]	@ (800568c <HAL_GPIO_Init+0x2dc>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055c8:	4a30      	ldr	r2, [pc, #192]	@ (800568c <HAL_GPIO_Init+0x2dc>)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80055ce:	4b2f      	ldr	r3, [pc, #188]	@ (800568c <HAL_GPIO_Init+0x2dc>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055f2:	4a26      	ldr	r2, [pc, #152]	@ (800568c <HAL_GPIO_Init+0x2dc>)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80055f8:	4b24      	ldr	r3, [pc, #144]	@ (800568c <HAL_GPIO_Init+0x2dc>)
 80055fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	43db      	mvns	r3, r3
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4013      	ands	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800561e:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <HAL_GPIO_Init+0x2dc>)
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8005626:	4b19      	ldr	r3, [pc, #100]	@ (800568c <HAL_GPIO_Init+0x2dc>)
 8005628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800562c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	43db      	mvns	r3, r3
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4013      	ands	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800564c:	4a0f      	ldr	r2, [pc, #60]	@ (800568c <HAL_GPIO_Init+0x2dc>)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	3301      	adds	r3, #1
 8005658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	f47f aeab 	bne.w	80053c0 <HAL_GPIO_Init+0x10>
  }
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	40010000 	.word	0x40010000
 800567c:	48000400 	.word	0x48000400
 8005680:	48000800 	.word	0x48000800
 8005684:	48000c00 	.word	0x48000c00
 8005688:	48001000 	.word	0x48001000
 800568c:	58000800 	.word	0x58000800

08005690 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800569e:	e0bb      	b.n	8005818 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80056a0:	2201      	movs	r2, #1
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	4013      	ands	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80ae 	beq.w	8005812 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80056b6:	4a5f      	ldr	r2, [pc, #380]	@ (8005834 <HAL_GPIO_DeInit+0x1a4>)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	089b      	lsrs	r3, r3, #2
 80056bc:	3302      	adds	r3, #2
 80056be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	220f      	movs	r2, #15
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80056de:	d019      	beq.n	8005714 <HAL_GPIO_DeInit+0x84>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a55      	ldr	r2, [pc, #340]	@ (8005838 <HAL_GPIO_DeInit+0x1a8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d013      	beq.n	8005710 <HAL_GPIO_DeInit+0x80>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a54      	ldr	r2, [pc, #336]	@ (800583c <HAL_GPIO_DeInit+0x1ac>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00d      	beq.n	800570c <HAL_GPIO_DeInit+0x7c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a53      	ldr	r2, [pc, #332]	@ (8005840 <HAL_GPIO_DeInit+0x1b0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <HAL_GPIO_DeInit+0x78>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a52      	ldr	r2, [pc, #328]	@ (8005844 <HAL_GPIO_DeInit+0x1b4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d101      	bne.n	8005704 <HAL_GPIO_DeInit+0x74>
 8005700:	2304      	movs	r3, #4
 8005702:	e008      	b.n	8005716 <HAL_GPIO_DeInit+0x86>
 8005704:	2307      	movs	r3, #7
 8005706:	e006      	b.n	8005716 <HAL_GPIO_DeInit+0x86>
 8005708:	2303      	movs	r3, #3
 800570a:	e004      	b.n	8005716 <HAL_GPIO_DeInit+0x86>
 800570c:	2302      	movs	r3, #2
 800570e:	e002      	b.n	8005716 <HAL_GPIO_DeInit+0x86>
 8005710:	2301      	movs	r3, #1
 8005712:	e000      	b.n	8005716 <HAL_GPIO_DeInit+0x86>
 8005714:	2300      	movs	r3, #0
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	f002 0203 	and.w	r2, r2, #3
 800571c:	0092      	lsls	r2, r2, #2
 800571e:	4093      	lsls	r3, r2
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	429a      	cmp	r2, r3
 8005724:	d136      	bne.n	8005794 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005726:	4b48      	ldr	r3, [pc, #288]	@ (8005848 <HAL_GPIO_DeInit+0x1b8>)
 8005728:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	43db      	mvns	r3, r3
 8005730:	4945      	ldr	r1, [pc, #276]	@ (8005848 <HAL_GPIO_DeInit+0x1b8>)
 8005732:	4013      	ands	r3, r2
 8005734:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005738:	4b43      	ldr	r3, [pc, #268]	@ (8005848 <HAL_GPIO_DeInit+0x1b8>)
 800573a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	43db      	mvns	r3, r3
 8005742:	4941      	ldr	r1, [pc, #260]	@ (8005848 <HAL_GPIO_DeInit+0x1b8>)
 8005744:	4013      	ands	r3, r2
 8005746:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800574a:	4b3f      	ldr	r3, [pc, #252]	@ (8005848 <HAL_GPIO_DeInit+0x1b8>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	43db      	mvns	r3, r3
 8005752:	493d      	ldr	r1, [pc, #244]	@ (8005848 <HAL_GPIO_DeInit+0x1b8>)
 8005754:	4013      	ands	r3, r2
 8005756:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005758:	4b3b      	ldr	r3, [pc, #236]	@ (8005848 <HAL_GPIO_DeInit+0x1b8>)
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	43db      	mvns	r3, r3
 8005760:	4939      	ldr	r1, [pc, #228]	@ (8005848 <HAL_GPIO_DeInit+0x1b8>)
 8005762:	4013      	ands	r3, r2
 8005764:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	220f      	movs	r2, #15
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005776:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <HAL_GPIO_DeInit+0x1a4>)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	3302      	adds	r3, #2
 800577e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	43da      	mvns	r2, r3
 8005786:	482b      	ldr	r0, [pc, #172]	@ (8005834 <HAL_GPIO_DeInit+0x1a4>)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	089b      	lsrs	r3, r3, #2
 800578c:	400a      	ands	r2, r1
 800578e:	3302      	adds	r3, #2
 8005790:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	2103      	movs	r1, #3
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	08da      	lsrs	r2, r3, #3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3208      	adds	r2, #8
 80057b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	220f      	movs	r2, #15
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	08d2      	lsrs	r2, r2, #3
 80057c8:	4019      	ands	r1, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3208      	adds	r2, #8
 80057ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	2103      	movs	r1, #3
 80057dc:	fa01 f303 	lsl.w	r3, r1, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	401a      	ands	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	2101      	movs	r1, #1
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	fa01 f303 	lsl.w	r3, r1, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	401a      	ands	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2103      	movs	r1, #3
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	401a      	ands	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	3301      	adds	r3, #1
 8005816:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	f47f af3d 	bne.w	80056a0 <HAL_GPIO_DeInit+0x10>
  }
}
 8005826:	bf00      	nop
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	40010000 	.word	0x40010000
 8005838:	48000400 	.word	0x48000400
 800583c:	48000800 	.word	0x48000800
 8005840:	48000c00 	.word	0x48000c00
 8005844:	48001000 	.word	0x48001000
 8005848:	58000800 	.word	0x58000800

0800584c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
 8005858:	4613      	mov	r3, r2
 800585a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800585c:	787b      	ldrb	r3, [r7, #1]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005868:	e002      	b.n	8005870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800586a:	887a      	ldrh	r2, [r7, #2]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005882:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <HAL_HSEM_IRQHandler+0x30>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005888:	4b08      	ldr	r3, [pc, #32]	@ (80058ac <HAL_HSEM_IRQHandler+0x30>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	43db      	mvns	r3, r3
 8005890:	4906      	ldr	r1, [pc, #24]	@ (80058ac <HAL_HSEM_IRQHandler+0x30>)
 8005892:	4013      	ands	r3, r2
 8005894:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005896:	4a05      	ldr	r2, [pc, #20]	@ (80058ac <HAL_HSEM_IRQHandler+0x30>)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f807 	bl	80058b0 <HAL_HSEM_FreeCallback>
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	58001500 	.word	0x58001500

080058b0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e08d      	b.n	80059f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fe fb4c 	bl	8003f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2224      	movs	r2, #36	@ 0x24
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005914:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005924:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d107      	bne.n	800593e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	e006      	b.n	800594c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800594a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d108      	bne.n	8005966 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	e007      	b.n	8005976 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005974:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005988:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005998:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b082      	sub	sp, #8
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e021      	b.n	8005a50 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	@ 0x24
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7fe fb61 	bl	80040ec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
  }
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00f      	beq.n	8005ace <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abc:	f043 0201 	orr.w	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005acc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00f      	beq.n	8005af8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae6:	f043 0208 	orr.w	r2, r3, #8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005af6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00f      	beq.n	8005b22 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b10:	f043 0202 	orr.w	r2, r3, #2
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b20:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 030b 	and.w	r3, r3, #11
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fbd5 	bl	80062e4 <I2C_ITError>
  }
}
 8005b3a:	bf00      	nop
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	460b      	mov	r3, r1
 8005b74:	70fb      	strb	r3, [r7, #3]
 8005b76:	4613      	mov	r3, r2
 8005b78:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b086      	sub	sp, #24
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <I2C_Slave_ISR_IT+0x24>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e0e2      	b.n	8005dac <I2C_Slave_ISR_IT+0x1ea>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f9b5 	bl	8005f74 <I2C_ITSlaveCplt>
 8005c0a:	e0ca      	b.n	8005da2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d04b      	beq.n	8005cae <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d046      	beq.n	8005cae <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d128      	bne.n	8005c7c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b28      	cmp	r3, #40	@ 0x28
 8005c34:	d108      	bne.n	8005c48 <I2C_Slave_ISR_IT+0x86>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c3c:	d104      	bne.n	8005c48 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c3e:	6939      	ldr	r1, [r7, #16]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fafb 	bl	800623c <I2C_ITListenCplt>
 8005c46:	e031      	b.n	8005cac <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b29      	cmp	r3, #41	@ 0x29
 8005c52:	d10e      	bne.n	8005c72 <I2C_Slave_ISR_IT+0xb0>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c5a:	d00a      	beq.n	8005c72 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2210      	movs	r2, #16
 8005c62:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fc54 	bl	8006512 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f926 	bl	8005ebc <I2C_ITSlaveSeqCplt>
 8005c70:	e01c      	b.n	8005cac <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2210      	movs	r2, #16
 8005c78:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c7a:	e08f      	b.n	8005d9c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2210      	movs	r2, #16
 8005c82:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c88:	f043 0204 	orr.w	r2, r3, #4
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <I2C_Slave_ISR_IT+0xdc>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c9c:	d17e      	bne.n	8005d9c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fb1d 	bl	80062e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005caa:	e077      	b.n	8005d9c <I2C_Slave_ISR_IT+0x1da>
 8005cac:	e076      	b.n	8005d9c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02f      	beq.n	8005d18 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d02a      	beq.n	8005d18 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d018      	beq.n	8005cfe <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d14b      	bne.n	8005da0 <I2C_Slave_ISR_IT+0x1de>
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d0e:	d047      	beq.n	8005da0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f8d3 	bl	8005ebc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005d16:	e043      	b.n	8005da0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005d2c:	6939      	ldr	r1, [r7, #16]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 f840 	bl	8005db4 <I2C_ITAddrCplt>
 8005d34:	e035      	b.n	8005da2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d030      	beq.n	8005da2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d02b      	beq.n	8005da2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d018      	beq.n	8005d86 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d84:	e00d      	b.n	8005da2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d8c:	d002      	beq.n	8005d94 <I2C_Slave_ISR_IT+0x1d2>
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f891 	bl	8005ebc <I2C_ITSlaveSeqCplt>
 8005d9a:	e002      	b.n	8005da2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005da0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dca:	2b28      	cmp	r3, #40	@ 0x28
 8005dcc:	d16a      	bne.n	8005ea4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	0c1b      	lsrs	r3, r3, #16
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005dec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dfa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005e08:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d138      	bne.n	8005e84 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005e12:	897b      	ldrh	r3, [r7, #10]
 8005e14:	09db      	lsrs	r3, r3, #7
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	89bb      	ldrh	r3, [r7, #12]
 8005e1a:	4053      	eors	r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f003 0306 	and.w	r3, r3, #6
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d11c      	bne.n	8005e60 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005e26:	897b      	ldrh	r3, [r7, #10]
 8005e28:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d13b      	bne.n	8005eb4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2208      	movs	r2, #8
 8005e48:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e52:	89ba      	ldrh	r2, [r7, #12]
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fe86 	bl	8005b6a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e5e:	e029      	b.n	8005eb4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005e60:	893b      	ldrh	r3, [r7, #8]
 8005e62:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fb94 	bl	8006596 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e76:	89ba      	ldrh	r2, [r7, #12]
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fe74 	bl	8005b6a <HAL_I2C_AddrCallback>
}
 8005e82:	e017      	b.n	8005eb4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fb84 	bl	8006596 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e96:	89ba      	ldrh	r2, [r7, #12]
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fe64 	bl	8005b6a <HAL_I2C_AddrCallback>
}
 8005ea2:	e007      	b.n	8005eb4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d008      	beq.n	8005ef0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e00c      	b.n	8005f0a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f08:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b29      	cmp	r3, #41	@ 0x29
 8005f14:	d112      	bne.n	8005f3c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2228      	movs	r2, #40	@ 0x28
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2221      	movs	r2, #33	@ 0x21
 8005f22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f24:	2101      	movs	r1, #1
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fb35 	bl	8006596 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff fe04 	bl	8005b42 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f3a:	e017      	b.n	8005f6c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f46:	d111      	bne.n	8005f6c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2228      	movs	r2, #40	@ 0x28
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2222      	movs	r2, #34	@ 0x22
 8005f54:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f56:	2102      	movs	r1, #2
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fb1c 	bl	8006596 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fdf5 	bl	8005b56 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f96:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fa0:	7afb      	ldrb	r3, [r7, #11]
 8005fa2:	2b21      	cmp	r3, #33	@ 0x21
 8005fa4:	d002      	beq.n	8005fac <I2C_ITSlaveCplt+0x38>
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	2b29      	cmp	r3, #41	@ 0x29
 8005faa:	d108      	bne.n	8005fbe <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005fac:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 faf0 	bl	8006596 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2221      	movs	r2, #33	@ 0x21
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fbc:	e019      	b.n	8005ff2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	2b22      	cmp	r3, #34	@ 0x22
 8005fc2:	d002      	beq.n	8005fca <I2C_ITSlaveCplt+0x56>
 8005fc4:	7afb      	ldrb	r3, [r7, #11]
 8005fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc8:	d108      	bne.n	8005fdc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005fca:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fae1 	bl	8006596 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2222      	movs	r2, #34	@ 0x22
 8005fd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fda:	e00a      	b.n	8005ff2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005fdc:	7afb      	ldrb	r3, [r7, #11]
 8005fde:	2b28      	cmp	r3, #40	@ 0x28
 8005fe0:	d107      	bne.n	8005ff2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005fe2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fad5 	bl	8006596 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006000:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6859      	ldr	r1, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b89      	ldr	r3, [pc, #548]	@ (8006234 <I2C_ITSlaveCplt+0x2c0>)
 800600e:	400b      	ands	r3, r1
 8006010:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fa7d 	bl	8006512 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d013      	beq.n	800604a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006030:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006036:	2b00      	cmp	r3, #0
 8006038:	d01f      	beq.n	800607a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b29a      	uxth	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006048:	e017      	b.n	800607a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d012      	beq.n	800607a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006062:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d006      	beq.n	800607a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d020      	beq.n	80060c6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0304 	bic.w	r3, r3, #4
 800608a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00c      	beq.n	80060c6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d4:	f043 0204 	orr.w	r2, r3, #4
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d049      	beq.n	800617a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d044      	beq.n	800617a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d128      	bne.n	800614c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b28      	cmp	r3, #40	@ 0x28
 8006104:	d108      	bne.n	8006118 <I2C_ITSlaveCplt+0x1a4>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800610c:	d104      	bne.n	8006118 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800610e:	6979      	ldr	r1, [r7, #20]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f893 	bl	800623c <I2C_ITListenCplt>
 8006116:	e030      	b.n	800617a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b29      	cmp	r3, #41	@ 0x29
 8006122:	d10e      	bne.n	8006142 <I2C_ITSlaveCplt+0x1ce>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800612a:	d00a      	beq.n	8006142 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2210      	movs	r2, #16
 8006132:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f9ec 	bl	8006512 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff febe 	bl	8005ebc <I2C_ITSlaveSeqCplt>
 8006140:	e01b      	b.n	800617a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2210      	movs	r2, #16
 8006148:	61da      	str	r2, [r3, #28]
 800614a:	e016      	b.n	800617a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2210      	movs	r2, #16
 8006152:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006158:	f043 0204 	orr.w	r2, r3, #4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <I2C_ITSlaveCplt+0x1fa>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800616c:	d105      	bne.n	800617a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8b5 	bl	80062e4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618c:	2b00      	cmp	r3, #0
 800618e:	d010      	beq.n	80061b2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8a4 	bl	80062e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b28      	cmp	r3, #40	@ 0x28
 80061a6:	d141      	bne.n	800622c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80061a8:	6979      	ldr	r1, [r7, #20]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f846 	bl	800623c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061b0:	e03c      	b.n	800622c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061ba:	d014      	beq.n	80061e6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff fe7d 	bl	8005ebc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006238 <I2C_ITSlaveCplt+0x2c4>)
 80061c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff fcd1 	bl	8005b86 <HAL_I2C_ListenCpltCallback>
}
 80061e4:	e022      	b.n	800622c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b22      	cmp	r3, #34	@ 0x22
 80061f0:	d10e      	bne.n	8006210 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff fca4 	bl	8005b56 <HAL_I2C_SlaveRxCpltCallback>
}
 800620e:	e00d      	b.n	800622c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff fc8b 	bl	8005b42 <HAL_I2C_SlaveTxCpltCallback>
}
 800622c:	bf00      	nop
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	fe00e800 	.word	0xfe00e800
 8006238:	ffff0000 	.word	0xffff0000

0800623c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a25      	ldr	r2, [pc, #148]	@ (80062e0 <I2C_ITListenCplt+0xa4>)
 800624a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d022      	beq.n	80062b8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	d012      	beq.n	80062b8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b0:	f043 0204 	orr.w	r2, r3, #4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062b8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f96a 	bl	8006596 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2210      	movs	r2, #16
 80062c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff fc57 	bl	8005b86 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	ffff0000 	.word	0xffff0000

080062e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a6d      	ldr	r2, [pc, #436]	@ (80064b8 <I2C_ITError+0x1d4>)
 8006302:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b28      	cmp	r3, #40	@ 0x28
 800631a:	d005      	beq.n	8006328 <I2C_ITError+0x44>
 800631c:	7bfb      	ldrb	r3, [r7, #15]
 800631e:	2b29      	cmp	r3, #41	@ 0x29
 8006320:	d002      	beq.n	8006328 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	2b2a      	cmp	r3, #42	@ 0x2a
 8006326:	d10b      	bne.n	8006340 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006328:	2103      	movs	r1, #3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f933 	bl	8006596 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2228      	movs	r2, #40	@ 0x28
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a60      	ldr	r2, [pc, #384]	@ (80064bc <I2C_ITError+0x1d8>)
 800633c:	635a      	str	r2, [r3, #52]	@ 0x34
 800633e:	e030      	b.n	80063a2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006340:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f926 	bl	8006596 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8e1 	bl	8006512 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b60      	cmp	r3, #96	@ 0x60
 800635a:	d01f      	beq.n	800639c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b20      	cmp	r3, #32
 8006370:	d114      	bne.n	800639c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b10      	cmp	r3, #16
 800637e:	d109      	bne.n	8006394 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2210      	movs	r2, #16
 8006386:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638c:	f043 0204 	orr.w	r2, r3, #4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2220      	movs	r2, #32
 800639a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d039      	beq.n	8006424 <I2C_ITError+0x140>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b11      	cmp	r3, #17
 80063b4:	d002      	beq.n	80063bc <I2C_ITError+0xd8>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b21      	cmp	r3, #33	@ 0x21
 80063ba:	d133      	bne.n	8006424 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063ca:	d107      	bne.n	80063dc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe ff35 	bl	8005250 <HAL_DMA_GetState>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d017      	beq.n	800641c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	4a33      	ldr	r2, [pc, #204]	@ (80064c0 <I2C_ITError+0x1dc>)
 80063f2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fe17 	bl	8005034 <HAL_DMA_Abort_IT>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d04d      	beq.n	80064a8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006416:	4610      	mov	r0, r2
 8006418:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800641a:	e045      	b.n	80064a8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f851 	bl	80064c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006422:	e041      	b.n	80064a8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d039      	beq.n	80064a0 <I2C_ITError+0x1bc>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b12      	cmp	r3, #18
 8006430:	d002      	beq.n	8006438 <I2C_ITError+0x154>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b22      	cmp	r3, #34	@ 0x22
 8006436:	d133      	bne.n	80064a0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006446:	d107      	bne.n	8006458 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006456:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe fef7 	bl	8005250 <HAL_DMA_GetState>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d017      	beq.n	8006498 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646c:	4a14      	ldr	r2, [pc, #80]	@ (80064c0 <I2C_ITError+0x1dc>)
 800646e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe fdd9 	bl	8005034 <HAL_DMA_Abort_IT>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d011      	beq.n	80064ac <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006492:	4610      	mov	r0, r2
 8006494:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006496:	e009      	b.n	80064ac <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f813 	bl	80064c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800649e:	e005      	b.n	80064ac <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f80f 	bl	80064c4 <I2C_TreatErrorCallback>
  }
}
 80064a6:	e002      	b.n	80064ae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064a8:	bf00      	nop
 80064aa:	e000      	b.n	80064ae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064ac:	bf00      	nop
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	ffff0000 	.word	0xffff0000
 80064bc:	08005bc3 	.word	0x08005bc3
 80064c0:	0800655b 	.word	0x0800655b

080064c4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b60      	cmp	r3, #96	@ 0x60
 80064d6:	d10e      	bne.n	80064f6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff fb5d 	bl	8005bae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064f4:	e009      	b.n	800650a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fb48 	bl	8005b9a <HAL_I2C_ErrorCallback>
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b02      	cmp	r3, #2
 8006526:	d103      	bne.n	8006530 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2200      	movs	r2, #0
 800652e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d007      	beq.n	800654e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0201 	orr.w	r2, r2, #1
 800654c:	619a      	str	r2, [r3, #24]
  }
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006574:	2200      	movs	r2, #0
 8006576:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006584:	2200      	movs	r2, #0
 8006586:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f7ff ff9b 	bl	80064c4 <I2C_TreatErrorCallback>
}
 800658e:	bf00      	nop
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00f      	beq.n	80065d0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80065b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065c4:	2b28      	cmp	r3, #40	@ 0x28
 80065c6:	d003      	beq.n	80065d0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065d0:	887b      	ldrh	r3, [r7, #2]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00f      	beq.n	80065fa <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80065e0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065ee:	2b28      	cmp	r3, #40	@ 0x28
 80065f0:	d003      	beq.n	80065fa <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da03      	bge.n	800660a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006608:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800660a:	887b      	ldrh	r3, [r7, #2]
 800660c:	2b10      	cmp	r3, #16
 800660e:	d103      	bne.n	8006618 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006616:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006618:	887b      	ldrh	r3, [r7, #2]
 800661a:	2b20      	cmp	r3, #32
 800661c:	d103      	bne.n	8006626 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f043 0320 	orr.w	r3, r3, #32
 8006624:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006626:	887b      	ldrh	r3, [r7, #2]
 8006628:	2b40      	cmp	r3, #64	@ 0x40
 800662a:	d103      	bne.n	8006634 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006632:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6819      	ldr	r1, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	43da      	mvns	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	400a      	ands	r2, r1
 8006644:	601a      	str	r2, [r3, #0]
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b20      	cmp	r3, #32
 8006666:	d138      	bne.n	80066da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006672:	2302      	movs	r3, #2
 8006674:	e032      	b.n	80066dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2224      	movs	r2, #36	@ 0x24
 8006682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0201 	bic.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6819      	ldr	r1, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e000      	b.n	80066dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
  }
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d139      	bne.n	8006772 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006708:	2302      	movs	r3, #2
 800670a:	e033      	b.n	8006774 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2224      	movs	r2, #36	@ 0x24
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800673a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0201 	orr.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e000      	b.n	8006774 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006772:	2302      	movs	r3, #2
  }
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d01e      	beq.n	80067d0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8006792:	4b13      	ldr	r3, [pc, #76]	@ (80067e0 <HAL_IPCC_Init+0x60>)
 8006794:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fd fcd2 	bl	800414c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80067a8:	68b8      	ldr	r0, [r7, #8]
 80067aa:	f000 f85b 	bl	8006864 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f82c 	bl	8006818 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80067ce:	e001      	b.n	80067d4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	58000c00 	.word	0x58000c00

080067e4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80067f2:	bf00      	nop
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	4613      	mov	r3, r2
 800680a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	e00f      	b.n	8006846 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	4a0b      	ldr	r2, [pc, #44]	@ (800685c <IPCC_SetDefaultCallbacks+0x44>)
 8006830:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3306      	adds	r3, #6
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	4a08      	ldr	r2, [pc, #32]	@ (8006860 <IPCC_SetDefaultCallbacks+0x48>)
 800683e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3301      	adds	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b05      	cmp	r3, #5
 800684a:	d9ec      	bls.n	8006826 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	080067e5 	.word	0x080067e5
 8006860:	080067ff 	.word	0x080067ff

08006864 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8006878:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	223f      	movs	r2, #63	@ 0x3f
 800687e:	609a      	str	r2, [r3, #8]
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006890:	4b05      	ldr	r3, [pc, #20]	@ (80068a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a04      	ldr	r2, [pc, #16]	@ (80068a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800689a:	6013      	str	r3, [r2, #0]
}
 800689c:	bf00      	nop
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	58000400 	.word	0x58000400

080068ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80068b0:	4b04      	ldr	r3, [pc, #16]	@ (80068c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	58000400 	.word	0x58000400

080068c8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80068cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068da:	d101      	bne.n	80068e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <LL_RCC_HSE_Enable>:
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80068f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068fe:	6013      	str	r3, [r2, #0]
}
 8006900:	bf00      	nop
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <LL_RCC_HSE_Disable>:
{
 800690a:	b480      	push	{r7}
 800690c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800690e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800691c:	6013      	str	r3, [r2, #0]
}
 800691e:	bf00      	nop
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <LL_RCC_HSE_IsReady>:
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800692c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800693a:	d101      	bne.n	8006940 <LL_RCC_HSE_IsReady+0x18>
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <LL_RCC_HSE_IsReady+0x1a>
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <LL_RCC_HSI_Enable>:
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800695a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800695e:	6013      	str	r3, [r2, #0]
}
 8006960:	bf00      	nop
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <LL_RCC_HSI_Disable>:
{
 800696a:	b480      	push	{r7}
 800696c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800696e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800697c:	6013      	str	r3, [r2, #0]
}
 800697e:	bf00      	nop
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <LL_RCC_HSI_IsReady>:
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800698c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800699a:	d101      	bne.n	80069a0 <LL_RCC_HSI_IsReady+0x18>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <LL_RCC_HSI_IsReady+0x1a>
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <LL_RCC_HSI_SetCalibTrimming>:
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80069b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	061b      	lsls	r3, r3, #24
 80069c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069c6:	4313      	orrs	r3, r2
 80069c8:	604b      	str	r3, [r1, #4]
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <LL_RCC_HSI48_Enable>:
{
 80069d6:	b480      	push	{r7}
 80069d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80069da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <LL_RCC_HSI48_Disable>:
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80069fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <LL_RCC_HSI48_IsReady>:
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d101      	bne.n	8006a32 <LL_RCC_HSI48_IsReady+0x18>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <LL_RCC_HSI48_IsReady+0x1a>
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <LL_RCC_LSE_Enable>:
{
 8006a3e:	b480      	push	{r7}
 8006a40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a56:	bf00      	nop
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <LL_RCC_LSE_Disable>:
{
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a78:	bf00      	nop
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <LL_RCC_LSE_EnableBypass>:
{
 8006a82:	b480      	push	{r7}
 8006a84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a92:	f043 0304 	orr.w	r3, r3, #4
 8006a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a9a:	bf00      	nop
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <LL_RCC_LSE_DisableBypass>:
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ab4:	f023 0304 	bic.w	r3, r3, #4
 8006ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006abc:	bf00      	nop
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <LL_RCC_LSE_IsReady>:
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d101      	bne.n	8006ade <LL_RCC_LSE_IsReady+0x18>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <LL_RCC_LSE_IsReady+0x1a>
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <LL_RCC_LSI1_Enable>:
{
 8006aea:	b480      	push	{r7}
 8006aec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006af6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b02:	bf00      	nop
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_RCC_LSI1_Disable>:
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <LL_RCC_LSI1_IsReady>:
{
 8006b2e:	b480      	push	{r7}
 8006b30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d101      	bne.n	8006b46 <LL_RCC_LSI1_IsReady+0x18>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <LL_RCC_LSI1_IsReady+0x1a>
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <LL_RCC_LSI2_Enable>:
{
 8006b52:	b480      	push	{r7}
 8006b54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b62:	f043 0304 	orr.w	r3, r3, #4
 8006b66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b6a:	bf00      	nop
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <LL_RCC_LSI2_Disable>:
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b84:	f023 0304 	bic.w	r3, r3, #4
 8006b88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b8c:	bf00      	nop
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <LL_RCC_LSI2_IsReady>:
{
 8006b96:	b480      	push	{r7}
 8006b98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d101      	bne.n	8006bae <LL_RCC_LSI2_IsReady+0x18>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <LL_RCC_LSI2_IsReady+0x1a>
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <LL_RCC_LSI2_SetTrimming>:
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	021b      	lsls	r3, r3, #8
 8006bd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <LL_RCC_MSI_Enable>:
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	6013      	str	r3, [r2, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <LL_RCC_MSI_Disable>:
{
 8006c06:	b480      	push	{r7}
 8006c08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	6013      	str	r3, [r2, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <LL_RCC_MSI_IsReady>:
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d101      	bne.n	8006c3a <LL_RCC_MSI_IsReady+0x16>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <LL_RCC_MSI_IsReady+0x18>
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <LL_RCC_MSI_SetRange>:
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <LL_RCC_MSI_GetRange>:
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c7e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2bb0      	cmp	r3, #176	@ 0xb0
 8006c84:	d901      	bls.n	8006c8a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006c86:	23b0      	movs	r3, #176	@ 0xb0
 8006c88:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006c8a:	687b      	ldr	r3, [r7, #4]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	604b      	str	r3, [r1, #4]
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <LL_RCC_SetSysClkSource>:
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 0203 	bic.w	r2, r3, #3
 8006cd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	608b      	str	r3, [r1, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <LL_RCC_GetSysClkSource>:
{
 8006cea:	b480      	push	{r7}
 8006cec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 030c 	and.w	r3, r3, #12
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <LL_RCC_SetAHBPrescaler>:
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <LL_C2_RCC_SetAHBPrescaler>:
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_RCC_SetAHB4Prescaler>:
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d66:	f023 020f 	bic.w	r2, r3, #15
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	091b      	lsrs	r3, r3, #4
 8006d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <LL_RCC_SetAPB1Prescaler>:
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	608b      	str	r3, [r1, #8]
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <LL_RCC_SetAPB2Prescaler>:
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006dbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	608b      	str	r3, [r1, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <LL_RCC_GetAHBPrescaler>:
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <LL_RCC_GetAHB4Prescaler>:
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006df4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <LL_RCC_GetAPB1Prescaler>:
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <LL_RCC_GetAPB2Prescaler>:
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e4a:	6013      	str	r3, [r2, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006e56:	b480      	push	{r7}
 8006e58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e68:	6013      	str	r3, [r2, #0]
}
 8006e6a:	bf00      	nop
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e86:	d101      	bne.n	8006e8c <LL_RCC_PLL_IsReady+0x18>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <LL_RCC_PLL_IsReady+0x1a>
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	0a1b      	lsrs	r3, r3, #8
 8006ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0303 	and.w	r3, r3, #3
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006efa:	b480      	push	{r7}
 8006efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f0c:	d101      	bne.n	8006f12 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f32:	d101      	bne.n	8006f38 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f58:	d101      	bne.n	8006f5e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f7c:	d101      	bne.n	8006f82 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fa0:	d101      	bne.n	8006fa6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fb4:	b590      	push	{r4, r7, lr}
 8006fb6:	b08d      	sub	sp, #52	@ 0x34
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e363      	b.n	800768e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 808d 	beq.w	80070ee <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fd4:	f7ff fe89 	bl	8006cea <LL_RCC_GetSysClkSource>
 8006fd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fda:	f7ff ff82 	bl	8006ee2 <LL_RCC_PLL_GetMainSource>
 8006fde:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d005      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x3e>
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	2b0c      	cmp	r3, #12
 8006fea:	d147      	bne.n	800707c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d144      	bne.n	800707c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e347      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007002:	f7ff fe34 	bl	8006c6e <LL_RCC_MSI_GetRange>
 8007006:	4603      	mov	r3, r0
 8007008:	429c      	cmp	r4, r3
 800700a:	d914      	bls.n	8007036 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fd2f 	bl	8007a74 <RCC_SetFlashLatencyFromMSIRange>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e336      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fe0e 	bl	8006c46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff fe32 	bl	8006c98 <LL_RCC_MSI_SetCalibTrimming>
 8007034:	e013      	b.n	800705e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fe03 	bl	8006c46 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff fe27 	bl	8006c98 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fd10 	bl	8007a74 <RCC_SetFlashLatencyFromMSIRange>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e317      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800705e:	f000 fcc9 	bl	80079f4 <HAL_RCC_GetHCLKFreq>
 8007062:	4603      	mov	r3, r0
 8007064:	4aa4      	ldr	r2, [pc, #656]	@ (80072f8 <HAL_RCC_OscConfig+0x344>)
 8007066:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007068:	4ba4      	ldr	r3, [pc, #656]	@ (80072fc <HAL_RCC_OscConfig+0x348>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f7fd fbb1 	bl	80047d4 <HAL_InitTick>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d039      	beq.n	80070ec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e308      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01e      	beq.n	80070c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007084:	f7ff fdb0 	bl	8006be8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007088:	f7fd fbf2 	bl	8004870 <HAL_GetTick>
 800708c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007090:	f7fd fbee 	bl	8004870 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e2f5      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80070a2:	f7ff fdbf 	bl	8006c24 <LL_RCC_MSI_IsReady>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0f1      	beq.n	8007090 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fdc8 	bl	8006c46 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fdec 	bl	8006c98 <LL_RCC_MSI_SetCalibTrimming>
 80070c0:	e015      	b.n	80070ee <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070c2:	f7ff fda0 	bl	8006c06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070c6:	f7fd fbd3 	bl	8004870 <HAL_GetTick>
 80070ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070ce:	f7fd fbcf 	bl	8004870 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e2d6      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80070e0:	f7ff fda0 	bl	8006c24 <LL_RCC_MSI_IsReady>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1f1      	bne.n	80070ce <HAL_RCC_OscConfig+0x11a>
 80070ea:	e000      	b.n	80070ee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80070ec:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d047      	beq.n	800718a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070fa:	f7ff fdf6 	bl	8006cea <LL_RCC_GetSysClkSource>
 80070fe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007100:	f7ff feef 	bl	8006ee2 <LL_RCC_PLL_GetMainSource>
 8007104:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	2b08      	cmp	r3, #8
 800710a:	d005      	beq.n	8007118 <HAL_RCC_OscConfig+0x164>
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	2b0c      	cmp	r3, #12
 8007110:	d108      	bne.n	8007124 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	2b03      	cmp	r3, #3
 8007116:	d105      	bne.n	8007124 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d134      	bne.n	800718a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e2b4      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800712c:	d102      	bne.n	8007134 <HAL_RCC_OscConfig+0x180>
 800712e:	f7ff fbdd 	bl	80068ec <LL_RCC_HSE_Enable>
 8007132:	e001      	b.n	8007138 <HAL_RCC_OscConfig+0x184>
 8007134:	f7ff fbe9 	bl	800690a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d012      	beq.n	8007166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007140:	f7fd fb96 	bl	8004870 <HAL_GetTick>
 8007144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007148:	f7fd fb92 	bl	8004870 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b64      	cmp	r3, #100	@ 0x64
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e299      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800715a:	f7ff fbe5 	bl	8006928 <LL_RCC_HSE_IsReady>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0f1      	beq.n	8007148 <HAL_RCC_OscConfig+0x194>
 8007164:	e011      	b.n	800718a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007166:	f7fd fb83 	bl	8004870 <HAL_GetTick>
 800716a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800716e:	f7fd fb7f 	bl	8004870 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b64      	cmp	r3, #100	@ 0x64
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e286      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007180:	f7ff fbd2 	bl	8006928 <LL_RCC_HSE_IsReady>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f1      	bne.n	800716e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d04c      	beq.n	8007230 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007196:	f7ff fda8 	bl	8006cea <LL_RCC_GetSysClkSource>
 800719a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800719c:	f7ff fea1 	bl	8006ee2 <LL_RCC_PLL_GetMainSource>
 80071a0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_OscConfig+0x200>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b0c      	cmp	r3, #12
 80071ac:	d10e      	bne.n	80071cc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d10b      	bne.n	80071cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e266      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff fbf1 	bl	80069ac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071ca:	e031      	b.n	8007230 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d019      	beq.n	8007208 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071d4:	f7ff fbba 	bl	800694c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fd fb4a 	bl	8004870 <HAL_GetTick>
 80071dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e0:	f7fd fb46 	bl	8004870 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e24d      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80071f2:	f7ff fbc9 	bl	8006988 <LL_RCC_HSI_IsReady>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0f1      	beq.n	80071e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fbd3 	bl	80069ac <LL_RCC_HSI_SetCalibTrimming>
 8007206:	e013      	b.n	8007230 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007208:	f7ff fbaf 	bl	800696a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720c:	f7fd fb30 	bl	8004870 <HAL_GetTick>
 8007210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007214:	f7fd fb2c 	bl	8004870 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e233      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007226:	f7ff fbaf 	bl	8006988 <LL_RCC_HSI_IsReady>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1f1      	bne.n	8007214 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80a3 	beq.w	8007390 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d076      	beq.n	8007340 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0310 	and.w	r3, r3, #16
 800725a:	2b00      	cmp	r3, #0
 800725c:	d046      	beq.n	80072ec <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800725e:	f7ff fc66 	bl	8006b2e <LL_RCC_LSI1_IsReady>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d113      	bne.n	8007290 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007268:	f7ff fc3f 	bl	8006aea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800726c:	f7fd fb00 	bl	8004870 <HAL_GetTick>
 8007270:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007274:	f7fd fafc 	bl	8004870 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e203      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007286:	f7ff fc52 	bl	8006b2e <LL_RCC_LSI1_IsReady>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0f1      	beq.n	8007274 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007290:	f7ff fc5f 	bl	8006b52 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fd faec 	bl	8004870 <HAL_GetTick>
 8007298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800729c:	f7fd fae8 	bl	8004870 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e1ef      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80072ae:	f7ff fc72 	bl	8006b96 <LL_RCC_LSI2_IsReady>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0f1      	beq.n	800729c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff fc7c 	bl	8006bba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80072c2:	f7ff fc23 	bl	8006b0c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c6:	f7fd fad3 	bl	8004870 <HAL_GetTick>
 80072ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80072cc:	e008      	b.n	80072e0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80072ce:	f7fd facf 	bl	8004870 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d901      	bls.n	80072e0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e1d6      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80072e0:	f7ff fc25 	bl	8006b2e <LL_RCC_LSI1_IsReady>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1f1      	bne.n	80072ce <HAL_RCC_OscConfig+0x31a>
 80072ea:	e051      	b.n	8007390 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80072ec:	f7ff fbfd 	bl	8006aea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f0:	f7fd fabe 	bl	8004870 <HAL_GetTick>
 80072f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80072f6:	e00c      	b.n	8007312 <HAL_RCC_OscConfig+0x35e>
 80072f8:	20000014 	.word	0x20000014
 80072fc:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007300:	f7fd fab6 	bl	8004870 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e1bd      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007312:	f7ff fc0c 	bl	8006b2e <LL_RCC_LSI1_IsReady>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f1      	beq.n	8007300 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800731c:	f7ff fc2a 	bl	8006b74 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007320:	e008      	b.n	8007334 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007322:	f7fd faa5 	bl	8004870 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b03      	cmp	r3, #3
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e1ac      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007334:	f7ff fc2f 	bl	8006b96 <LL_RCC_LSI2_IsReady>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f1      	bne.n	8007322 <HAL_RCC_OscConfig+0x36e>
 800733e:	e027      	b.n	8007390 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007340:	f7ff fc18 	bl	8006b74 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007344:	f7fd fa94 	bl	8004870 <HAL_GetTick>
 8007348:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800734c:	f7fd fa90 	bl	8004870 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b03      	cmp	r3, #3
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e197      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800735e:	f7ff fc1a 	bl	8006b96 <LL_RCC_LSI2_IsReady>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f1      	bne.n	800734c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007368:	f7ff fbd0 	bl	8006b0c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800736c:	f7fd fa80 	bl	8004870 <HAL_GetTick>
 8007370:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007374:	f7fd fa7c 	bl	8004870 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e183      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007386:	f7ff fbd2 	bl	8006b2e <LL_RCC_LSI1_IsReady>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1f1      	bne.n	8007374 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d05b      	beq.n	8007454 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800739c:	4ba7      	ldr	r3, [pc, #668]	@ (800763c <HAL_RCC_OscConfig+0x688>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d114      	bne.n	80073d2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80073a8:	f7ff fa70 	bl	800688c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ac:	f7fd fa60 	bl	8004870 <HAL_GetTick>
 80073b0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b4:	f7fd fa5c 	bl	8004870 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e163      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c6:	4b9d      	ldr	r3, [pc, #628]	@ (800763c <HAL_RCC_OscConfig+0x688>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f0      	beq.n	80073b4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d102      	bne.n	80073e0 <HAL_RCC_OscConfig+0x42c>
 80073da:	f7ff fb30 	bl	8006a3e <LL_RCC_LSE_Enable>
 80073de:	e00c      	b.n	80073fa <HAL_RCC_OscConfig+0x446>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2b05      	cmp	r3, #5
 80073e6:	d104      	bne.n	80073f2 <HAL_RCC_OscConfig+0x43e>
 80073e8:	f7ff fb4b 	bl	8006a82 <LL_RCC_LSE_EnableBypass>
 80073ec:	f7ff fb27 	bl	8006a3e <LL_RCC_LSE_Enable>
 80073f0:	e003      	b.n	80073fa <HAL_RCC_OscConfig+0x446>
 80073f2:	f7ff fb35 	bl	8006a60 <LL_RCC_LSE_Disable>
 80073f6:	f7ff fb55 	bl	8006aa4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d014      	beq.n	800742c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007402:	f7fd fa35 	bl	8004870 <HAL_GetTick>
 8007406:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007408:	e00a      	b.n	8007420 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740a:	f7fd fa31 	bl	8004870 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e136      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007420:	f7ff fb51 	bl	8006ac6 <LL_RCC_LSE_IsReady>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0ef      	beq.n	800740a <HAL_RCC_OscConfig+0x456>
 800742a:	e013      	b.n	8007454 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742c:	f7fd fa20 	bl	8004870 <HAL_GetTick>
 8007430:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007432:	e00a      	b.n	800744a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007434:	f7fd fa1c 	bl	8004870 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007442:	4293      	cmp	r3, r2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e121      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800744a:	f7ff fb3c 	bl	8006ac6 <LL_RCC_LSE_IsReady>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1ef      	bne.n	8007434 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02c      	beq.n	80074ba <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007464:	2b00      	cmp	r3, #0
 8007466:	d014      	beq.n	8007492 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007468:	f7ff fab5 	bl	80069d6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746c:	f7fd fa00 	bl	8004870 <HAL_GetTick>
 8007470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007474:	f7fd f9fc 	bl	8004870 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e103      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007486:	f7ff fac8 	bl	8006a1a <LL_RCC_HSI48_IsReady>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0f1      	beq.n	8007474 <HAL_RCC_OscConfig+0x4c0>
 8007490:	e013      	b.n	80074ba <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007492:	f7ff fab1 	bl	80069f8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007496:	f7fd f9eb 	bl	8004870 <HAL_GetTick>
 800749a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800749c:	e008      	b.n	80074b0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800749e:	f7fd f9e7 	bl	8004870 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e0ee      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80074b0:	f7ff fab3 	bl	8006a1a <LL_RCC_HSI48_IsReady>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f1      	bne.n	800749e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 80e4 	beq.w	800768c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074c4:	f7ff fc11 	bl	8006cea <LL_RCC_GetSysClkSource>
 80074c8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80074ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	f040 80b4 	bne.w	8007644 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f003 0203 	and.w	r2, r3, #3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d123      	bne.n	8007532 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d11c      	bne.n	8007532 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007504:	429a      	cmp	r2, r3
 8007506:	d114      	bne.n	8007532 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007512:	429a      	cmp	r2, r3
 8007514:	d10d      	bne.n	8007532 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007520:	429a      	cmp	r2, r3
 8007522:	d106      	bne.n	8007532 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d05d      	beq.n	80075ee <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b0c      	cmp	r3, #12
 8007536:	d058      	beq.n	80075ea <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e0a1      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800754a:	f7ff fc84 	bl	8006e56 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800754e:	f7fd f98f 	bl	8004870 <HAL_GetTick>
 8007552:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007554:	e008      	b.n	8007568 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007556:	f7fd f98b 	bl	8004870 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e092      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1ef      	bne.n	8007556 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	4b30      	ldr	r3, [pc, #192]	@ (8007640 <HAL_RCC_OscConfig+0x68c>)
 800757e:	4013      	ands	r3, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007588:	4311      	orrs	r1, r2
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800758e:	0212      	lsls	r2, r2, #8
 8007590:	4311      	orrs	r1, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007596:	4311      	orrs	r1, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800759c:	4311      	orrs	r1, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80075a2:	430a      	orrs	r2, r1
 80075a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80075ac:	f7ff fc44 	bl	8006e38 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075c0:	f7fd f956 	bl	8004870 <HAL_GetTick>
 80075c4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c8:	f7fd f952 	bl	8004870 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e059      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0ef      	beq.n	80075c8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075e8:	e050      	b.n	800768c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e04f      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d147      	bne.n	800768c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80075fc:	f7ff fc1c 	bl	8006e38 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800760a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800760e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007610:	f7fd f92e 	bl	8004870 <HAL_GetTick>
 8007614:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007618:	f7fd f92a 	bl	8004870 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e031      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800762a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0ef      	beq.n	8007618 <HAL_RCC_OscConfig+0x664>
 8007638:	e028      	b.n	800768c <HAL_RCC_OscConfig+0x6d8>
 800763a:	bf00      	nop
 800763c:	58000400 	.word	0x58000400
 8007640:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2b0c      	cmp	r3, #12
 8007648:	d01e      	beq.n	8007688 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800764a:	f7ff fc04 	bl	8006e56 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764e:	f7fd f90f 	bl	8004870 <HAL_GetTick>
 8007652:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007656:	f7fd f90b 	bl	8004870 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e012      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1ef      	bne.n	8007656 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007680:	4b05      	ldr	r3, [pc, #20]	@ (8007698 <HAL_RCC_OscConfig+0x6e4>)
 8007682:	4013      	ands	r3, r2
 8007684:	60cb      	str	r3, [r1, #12]
 8007686:	e001      	b.n	800768c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3734      	adds	r7, #52	@ 0x34
 8007692:	46bd      	mov	sp, r7
 8007694:	bd90      	pop	{r4, r7, pc}
 8007696:	bf00      	nop
 8007698:	eefefffc 	.word	0xeefefffc

0800769c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e12d      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076b0:	4b98      	ldr	r3, [pc, #608]	@ (8007914 <HAL_RCC_ClockConfig+0x278>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d91b      	bls.n	80076f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076be:	4b95      	ldr	r3, [pc, #596]	@ (8007914 <HAL_RCC_ClockConfig+0x278>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f023 0207 	bic.w	r2, r3, #7
 80076c6:	4993      	ldr	r1, [pc, #588]	@ (8007914 <HAL_RCC_ClockConfig+0x278>)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ce:	f7fd f8cf 	bl	8004870 <HAL_GetTick>
 80076d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80076d6:	f7fd f8cb 	bl	8004870 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e111      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e8:	4b8a      	ldr	r3, [pc, #552]	@ (8007914 <HAL_RCC_ClockConfig+0x278>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d1ef      	bne.n	80076d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d016      	beq.n	8007730 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff fafb 	bl	8006d02 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800770c:	f7fd f8b0 	bl	8004870 <HAL_GetTick>
 8007710:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007712:	e008      	b.n	8007726 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007714:	f7fd f8ac 	bl	8004870 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e0f2      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007726:	f7ff fbe8 	bl	8006efa <LL_RCC_IsActiveFlag_HPRE>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f1      	beq.n	8007714 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d016      	beq.n	800776a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff faf2 	bl	8006d2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007746:	f7fd f893 	bl	8004870 <HAL_GetTick>
 800774a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800774c:	e008      	b.n	8007760 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800774e:	f7fd f88f 	bl	8004870 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e0d5      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007760:	f7ff fbdd 	bl	8006f1e <LL_RCC_IsActiveFlag_C2HPRE>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0f1      	beq.n	800774e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d016      	beq.n	80077a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff faeb 	bl	8006d56 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007780:	f7fd f876 	bl	8004870 <HAL_GetTick>
 8007784:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007786:	e008      	b.n	800779a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007788:	f7fd f872 	bl	8004870 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d901      	bls.n	800779a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e0b8      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800779a:	f7ff fbd3 	bl	8006f44 <LL_RCC_IsActiveFlag_SHDHPRE>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f1      	beq.n	8007788 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d016      	beq.n	80077de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff fae5 	bl	8006d84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077ba:	f7fd f859 	bl	8004870 <HAL_GetTick>
 80077be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077c2:	f7fd f855 	bl	8004870 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e09b      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80077d4:	f7ff fbc9 	bl	8006f6a <LL_RCC_IsActiveFlag_PPRE1>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0f1      	beq.n	80077c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d017      	beq.n	800781a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fadb 	bl	8006dac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077f6:	f7fd f83b 	bl	8004870 <HAL_GetTick>
 80077fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077fc:	e008      	b.n	8007810 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077fe:	f7fd f837 	bl	8004870 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e07d      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007810:	f7ff fbbd 	bl	8006f8e <LL_RCC_IsActiveFlag_PPRE2>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0f1      	beq.n	80077fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d043      	beq.n	80078ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2b02      	cmp	r3, #2
 800782c:	d106      	bne.n	800783c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800782e:	f7ff f87b 	bl	8006928 <LL_RCC_HSE_IsReady>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d11e      	bne.n	8007876 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e067      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	2b03      	cmp	r3, #3
 8007842:	d106      	bne.n	8007852 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007844:	f7ff fb16 	bl	8006e74 <LL_RCC_PLL_IsReady>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d113      	bne.n	8007876 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e05c      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800785a:	f7ff f9e3 	bl	8006c24 <LL_RCC_MSI_IsReady>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d108      	bne.n	8007876 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e051      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007868:	f7ff f88e 	bl	8006988 <LL_RCC_HSI_IsReady>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e04a      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff fa21 	bl	8006cc2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007880:	f7fc fff6 	bl	8004870 <HAL_GetTick>
 8007884:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007886:	e00a      	b.n	800789e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007888:	f7fc fff2 	bl	8004870 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007896:	4293      	cmp	r3, r2
 8007898:	d901      	bls.n	800789e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e036      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789e:	f7ff fa24 	bl	8006cea <LL_RCC_GetSysClkSource>
 80078a2:	4602      	mov	r2, r0
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d1ec      	bne.n	8007888 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078ae:	4b19      	ldr	r3, [pc, #100]	@ (8007914 <HAL_RCC_ClockConfig+0x278>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d21b      	bcs.n	80078f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078bc:	4b15      	ldr	r3, [pc, #84]	@ (8007914 <HAL_RCC_ClockConfig+0x278>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f023 0207 	bic.w	r2, r3, #7
 80078c4:	4913      	ldr	r1, [pc, #76]	@ (8007914 <HAL_RCC_ClockConfig+0x278>)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078cc:	f7fc ffd0 	bl	8004870 <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80078d4:	f7fc ffcc 	bl	8004870 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e012      	b.n	800790c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007914 <HAL_RCC_ClockConfig+0x278>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d1ef      	bne.n	80078d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80078f4:	f000 f87e 	bl	80079f4 <HAL_RCC_GetHCLKFreq>
 80078f8:	4603      	mov	r3, r0
 80078fa:	4a07      	ldr	r2, [pc, #28]	@ (8007918 <HAL_RCC_ClockConfig+0x27c>)
 80078fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80078fe:	f7fc ffc3 	bl	8004888 <HAL_GetTickPrio>
 8007902:	4603      	mov	r3, r0
 8007904:	4618      	mov	r0, r3
 8007906:	f7fc ff65 	bl	80047d4 <HAL_InitTick>
 800790a:	4603      	mov	r3, r0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	58004000 	.word	0x58004000
 8007918:	20000014 	.word	0x20000014

0800791c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007922:	f7ff f9e2 	bl	8006cea <LL_RCC_GetSysClkSource>
 8007926:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10a      	bne.n	8007944 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800792e:	f7ff f99e 	bl	8006c6e <LL_RCC_MSI_GetRange>
 8007932:	4603      	mov	r3, r0
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	4a2b      	ldr	r2, [pc, #172]	@ (80079e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800793c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	e04b      	b.n	80079dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b04      	cmp	r3, #4
 8007948:	d102      	bne.n	8007950 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800794a:	4b28      	ldr	r3, [pc, #160]	@ (80079ec <HAL_RCC_GetSysClockFreq+0xd0>)
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e045      	b.n	80079dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b08      	cmp	r3, #8
 8007954:	d10a      	bne.n	800796c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007956:	f7fe ffb7 	bl	80068c8 <LL_RCC_HSE_IsEnabledDiv2>
 800795a:	4603      	mov	r3, r0
 800795c:	2b01      	cmp	r3, #1
 800795e:	d102      	bne.n	8007966 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007960:	4b22      	ldr	r3, [pc, #136]	@ (80079ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e03a      	b.n	80079dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007966:	4b22      	ldr	r3, [pc, #136]	@ (80079f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	e037      	b.n	80079dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800796c:	f7ff fab9 	bl	8006ee2 <LL_RCC_PLL_GetMainSource>
 8007970:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d003      	beq.n	8007980 <HAL_RCC_GetSysClockFreq+0x64>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b03      	cmp	r3, #3
 800797c:	d003      	beq.n	8007986 <HAL_RCC_GetSysClockFreq+0x6a>
 800797e:	e00d      	b.n	800799c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007980:	4b1a      	ldr	r3, [pc, #104]	@ (80079ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007982:	60bb      	str	r3, [r7, #8]
        break;
 8007984:	e015      	b.n	80079b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007986:	f7fe ff9f 	bl	80068c8 <LL_RCC_HSE_IsEnabledDiv2>
 800798a:	4603      	mov	r3, r0
 800798c:	2b01      	cmp	r3, #1
 800798e:	d102      	bne.n	8007996 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007990:	4b16      	ldr	r3, [pc, #88]	@ (80079ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007992:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007994:	e00d      	b.n	80079b2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007996:	4b16      	ldr	r3, [pc, #88]	@ (80079f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007998:	60bb      	str	r3, [r7, #8]
        break;
 800799a:	e00a      	b.n	80079b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800799c:	f7ff f967 	bl	8006c6e <LL_RCC_MSI_GetRange>
 80079a0:	4603      	mov	r3, r0
 80079a2:	091b      	lsrs	r3, r3, #4
 80079a4:	f003 030f 	and.w	r3, r3, #15
 80079a8:	4a0f      	ldr	r2, [pc, #60]	@ (80079e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80079aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ae:	60bb      	str	r3, [r7, #8]
        break;
 80079b0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80079b2:	f7ff fa71 	bl	8006e98 <LL_RCC_PLL_GetN>
 80079b6:	4602      	mov	r2, r0
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	fb03 f402 	mul.w	r4, r3, r2
 80079be:	f7ff fa84 	bl	8006eca <LL_RCC_PLL_GetDivider>
 80079c2:	4603      	mov	r3, r0
 80079c4:	091b      	lsrs	r3, r3, #4
 80079c6:	3301      	adds	r3, #1
 80079c8:	fbb4 f4f3 	udiv	r4, r4, r3
 80079cc:	f7ff fa71 	bl	8006eb2 <LL_RCC_PLL_GetR>
 80079d0:	4603      	mov	r3, r0
 80079d2:	0f5b      	lsrs	r3, r3, #29
 80079d4:	3301      	adds	r3, #1
 80079d6:	fbb4 f3f3 	udiv	r3, r4, r3
 80079da:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80079dc:	68fb      	ldr	r3, [r7, #12]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd90      	pop	{r4, r7, pc}
 80079e6:	bf00      	nop
 80079e8:	08013cd4 	.word	0x08013cd4
 80079ec:	00f42400 	.word	0x00f42400
 80079f0:	01e84800 	.word	0x01e84800

080079f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079f4:	b598      	push	{r3, r4, r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80079f8:	f7ff ff90 	bl	800791c <HAL_RCC_GetSysClockFreq>
 80079fc:	4604      	mov	r4, r0
 80079fe:	f7ff f9e9 	bl	8006dd4 <LL_RCC_GetAHBPrescaler>
 8007a02:	4603      	mov	r3, r0
 8007a04:	091b      	lsrs	r3, r3, #4
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	4a03      	ldr	r2, [pc, #12]	@ (8007a18 <HAL_RCC_GetHCLKFreq+0x24>)
 8007a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	bd98      	pop	{r3, r4, r7, pc}
 8007a18:	08013c74 	.word	0x08013c74

08007a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a1c:	b598      	push	{r3, r4, r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007a20:	f7ff ffe8 	bl	80079f4 <HAL_RCC_GetHCLKFreq>
 8007a24:	4604      	mov	r4, r0
 8007a26:	f7ff f9ef 	bl	8006e08 <LL_RCC_GetAPB1Prescaler>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	0a1b      	lsrs	r3, r3, #8
 8007a2e:	f003 0307 	and.w	r3, r3, #7
 8007a32:	4a04      	ldr	r2, [pc, #16]	@ (8007a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a38:	f003 031f 	and.w	r3, r3, #31
 8007a3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd98      	pop	{r3, r4, r7, pc}
 8007a44:	08013cb4 	.word	0x08013cb4

08007a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a48:	b598      	push	{r3, r4, r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007a4c:	f7ff ffd2 	bl	80079f4 <HAL_RCC_GetHCLKFreq>
 8007a50:	4604      	mov	r4, r0
 8007a52:	f7ff f9e5 	bl	8006e20 <LL_RCC_GetAPB2Prescaler>
 8007a56:	4603      	mov	r3, r0
 8007a58:	0adb      	lsrs	r3, r3, #11
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	4a04      	ldr	r2, [pc, #16]	@ (8007a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	bd98      	pop	{r3, r4, r7, pc}
 8007a70:	08013cb4 	.word	0x08013cb4

08007a74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007a74:	b590      	push	{r4, r7, lr}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2bb0      	cmp	r3, #176	@ 0xb0
 8007a80:	d903      	bls.n	8007a8a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007a82:	4b15      	ldr	r3, [pc, #84]	@ (8007ad8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	e007      	b.n	8007a9a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	091b      	lsrs	r3, r3, #4
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	4a11      	ldr	r2, [pc, #68]	@ (8007ad8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a98:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007a9a:	f7ff f9a7 	bl	8006dec <LL_RCC_GetAHB4Prescaler>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	091b      	lsrs	r3, r3, #4
 8007aa2:	f003 030f 	and.w	r3, r3, #15
 8007aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8007adc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8007abc:	0c9c      	lsrs	r4, r3, #18
 8007abe:	f7fe fef5 	bl	80068ac <HAL_PWREx_GetVoltageRange>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 f80c 	bl	8007ae4 <RCC_SetFlashLatency>
 8007acc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd90      	pop	{r4, r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	08013cd4 	.word	0x08013cd4
 8007adc:	08013c74 	.word	0x08013c74
 8007ae0:	431bde83 	.word	0x431bde83

08007ae4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	b093      	sub	sp, #76	@ 0x4c
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007aee:	4b37      	ldr	r3, [pc, #220]	@ (8007bcc <RCC_SetFlashLatency+0xe8>)
 8007af0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007afa:	4a35      	ldr	r2, [pc, #212]	@ (8007bd0 <RCC_SetFlashLatency+0xec>)
 8007afc:	f107 031c 	add.w	r3, r7, #28
 8007b00:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007b06:	4b33      	ldr	r3, [pc, #204]	@ (8007bd4 <RCC_SetFlashLatency+0xf0>)
 8007b08:	f107 040c 	add.w	r4, r7, #12
 8007b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007b12:	2300      	movs	r3, #0
 8007b14:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b1c:	d11a      	bne.n	8007b54 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b1e:	2300      	movs	r3, #0
 8007b20:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b22:	e013      	b.n	8007b4c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	3348      	adds	r3, #72	@ 0x48
 8007b2a:	443b      	add	r3, r7
 8007b2c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d807      	bhi.n	8007b46 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	3348      	adds	r3, #72	@ 0x48
 8007b3c:	443b      	add	r3, r7
 8007b3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007b42:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007b44:	e020      	b.n	8007b88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b48:	3301      	adds	r3, #1
 8007b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d9e8      	bls.n	8007b24 <RCC_SetFlashLatency+0x40>
 8007b52:	e019      	b.n	8007b88 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b54:	2300      	movs	r3, #0
 8007b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b58:	e013      	b.n	8007b82 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	3348      	adds	r3, #72	@ 0x48
 8007b60:	443b      	add	r3, r7
 8007b62:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d807      	bhi.n	8007b7c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	3348      	adds	r3, #72	@ 0x48
 8007b72:	443b      	add	r3, r7
 8007b74:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007b78:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007b7a:	e005      	b.n	8007b88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7e:	3301      	adds	r3, #1
 8007b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d9e8      	bls.n	8007b5a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007b88:	4b13      	ldr	r3, [pc, #76]	@ (8007bd8 <RCC_SetFlashLatency+0xf4>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f023 0207 	bic.w	r2, r3, #7
 8007b90:	4911      	ldr	r1, [pc, #68]	@ (8007bd8 <RCC_SetFlashLatency+0xf4>)
 8007b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b94:	4313      	orrs	r3, r2
 8007b96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b98:	f7fc fe6a 	bl	8004870 <HAL_GetTick>
 8007b9c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b9e:	e008      	b.n	8007bb2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007ba0:	f7fc fe66 	bl	8004870 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d901      	bls.n	8007bb2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e007      	b.n	8007bc2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bb2:	4b09      	ldr	r3, [pc, #36]	@ (8007bd8 <RCC_SetFlashLatency+0xf4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d1ef      	bne.n	8007ba0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	374c      	adds	r7, #76	@ 0x4c
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd90      	pop	{r4, r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	08013a50 	.word	0x08013a50
 8007bd0:	08013a60 	.word	0x08013a60
 8007bd4:	08013a6c 	.word	0x08013a6c
 8007bd8:	58004000 	.word	0x58004000

08007bdc <LL_RCC_LSE_IsEnabled>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d101      	bne.n	8007bf4 <LL_RCC_LSE_IsEnabled+0x18>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e000      	b.n	8007bf6 <LL_RCC_LSE_IsEnabled+0x1a>
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <LL_RCC_LSE_IsReady>:
{
 8007c00:	b480      	push	{r7}
 8007c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d101      	bne.n	8007c18 <LL_RCC_LSE_IsReady+0x18>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <LL_RCC_LSE_IsReady+0x1a>
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <LL_RCC_SetRFWKPClockSource>:
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c34:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <LL_RCC_SetSMPSClockSource>:
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5e:	f023 0203 	bic.w	r2, r3, #3
 8007c62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <LL_RCC_SetSMPSPrescaler>:
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c86:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <LL_RCC_SetUSARTClockSource>:
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb0:	f023 0203 	bic.w	r2, r3, #3
 8007cb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <LL_RCC_SetLPUARTClockSource>:
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cdc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <LL_RCC_SetI2CClockSource>:
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d04:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	091b      	lsrs	r3, r3, #4
 8007d0c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007d10:	43db      	mvns	r3, r3
 8007d12:	401a      	ands	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007d1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d20:	4313      	orrs	r3, r2
 8007d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <LL_RCC_SetLPTIMClockSource>:
{
 8007d32:	b480      	push	{r7}
 8007d34:	b083      	sub	sp, #12
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	0c1b      	lsrs	r3, r3, #16
 8007d46:	041b      	lsls	r3, r3, #16
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	401a      	ands	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	041b      	lsls	r3, r3, #16
 8007d50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <LL_RCC_SetSAIClockSource>:
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <LL_RCC_SetRNGClockSource>:
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <LL_RCC_SetCLK48ClockSource>:
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <LL_RCC_SetUSBClockSource>:
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff ffe3 	bl	8007dbe <LL_RCC_SetCLK48ClockSource>
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <LL_RCC_SetADCClockSource>:
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e10:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007e14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <LL_RCC_SetRTCClockSource>:
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <LL_RCC_GetRTCClockSource>:
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <LL_RCC_ForceBackupDomainReset>:
{
 8007e72:	b480      	push	{r7}
 8007e74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e8a:	bf00      	nop
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007eac:	bf00      	nop
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <LL_RCC_PLLSAI1_Enable>:
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ec4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ec8:	6013      	str	r3, [r2, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <LL_RCC_PLLSAI1_Disable>:
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ee2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ee6:	6013      	str	r3, [r2, #0]
}
 8007ee8:	bf00      	nop
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <LL_RCC_PLLSAI1_IsReady>:
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f04:	d101      	bne.n	8007f0a <LL_RCC_PLLSAI1_IsReady+0x18>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b088      	sub	sp, #32
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007f1e:	2300      	movs	r3, #0
 8007f20:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007f22:	2300      	movs	r3, #0
 8007f24:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d034      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f3a:	d021      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007f3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f40:	d81b      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f46:	d01d      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007f48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f4c:	d815      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00b      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007f52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f56:	d110      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f66:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f68:	e00d      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 f947 	bl	8008202 <RCCEx_PLLSAI1_ConfigNP>
 8007f74:	4603      	mov	r3, r0
 8007f76:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f78:	e005      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	77fb      	strb	r3, [r7, #31]
        break;
 8007f7e:	e002      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007f80:	bf00      	nop
 8007f82:	e000      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f86:	7ffb      	ldrb	r3, [r7, #31]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff fee8 	bl	8007d66 <LL_RCC_SetSAIClockSource>
 8007f96:	e001      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f98:	7ffb      	ldrb	r3, [r7, #31]
 8007f9a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d046      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007fa8:	f7ff ff56 	bl	8007e58 <LL_RCC_GetRTCClockSource>
 8007fac:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d03c      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007fb8:	f7fe fc68 	bl	800688c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d105      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff ff30 	bl	8007e2c <LL_RCC_SetRTCClockSource>
 8007fcc:	e02e      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007fd8:	f7ff ff4b 	bl	8007e72 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007fdc:	f7ff ff5a 	bl	8007e94 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	4313      	orrs	r3, r2
 8007fec:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007fee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007ff8:	f7ff fdf0 	bl	8007bdc <LL_RCC_LSE_IsEnabled>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d114      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008002:	f7fc fc35 	bl	8004870 <HAL_GetTick>
 8008006:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008008:	e00b      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800800a:	f7fc fc31 	bl	8004870 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008018:	4293      	cmp	r3, r2
 800801a:	d902      	bls.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	77fb      	strb	r3, [r7, #31]
              break;
 8008020:	e004      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008022:	f7ff fded 	bl	8007c00 <LL_RCC_LSE_IsReady>
 8008026:	4603      	mov	r3, r0
 8008028:	2b01      	cmp	r3, #1
 800802a:	d1ee      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800802c:	7ffb      	ldrb	r3, [r7, #31]
 800802e:	77bb      	strb	r3, [r7, #30]
 8008030:	e001      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008032:	7ffb      	ldrb	r3, [r7, #31]
 8008034:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff fe2a 	bl	8007ca0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff fe35 	bl	8007ccc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0310 	and.w	r3, r3, #16
 800806a:	2b00      	cmp	r3, #0
 800806c:	d004      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff fe5d 	bl	8007d32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0320 	and.w	r3, r3, #32
 8008080:	2b00      	cmp	r3, #0
 8008082:	d004      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff fe52 	bl	8007d32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff fe2a 	bl	8007cf8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff fe1f 	bl	8007cf8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d022      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fe8d 	bl	8007dea <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080d8:	d107      	bne.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80080da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080e8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080f2:	d10b      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f8dd 	bl	80082b8 <RCCEx_PLLSAI1_ConfigNQ>
 80080fe:	4603      	mov	r3, r0
 8008100:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008102:	7ffb      	ldrb	r3, [r7, #31]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008108:	7ffb      	ldrb	r3, [r7, #31]
 800810a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008114:	2b00      	cmp	r3, #0
 8008116:	d02b      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008120:	d008      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008126:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800812a:	d003      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008130:	2b00      	cmp	r3, #0
 8008132:	d105      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fe2a 	bl	8007d92 <LL_RCC_SetRNGClockSource>
 800813e:	e00a      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	2000      	movs	r0, #0
 800814c:	f7ff fe21 	bl	8007d92 <LL_RCC_SetRNGClockSource>
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff fe34 	bl	8007dbe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800815e:	d107      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800816a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800816e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008178:	2b00      	cmp	r3, #0
 800817a:	d022      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff fe3d 	bl	8007e00 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818e:	d107      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800819a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800819e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081a8:	d10b      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f8dd 	bl	800836e <RCCEx_PLLSAI1_ConfigNR>
 80081b4:	4603      	mov	r3, r0
 80081b6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80081b8:	7ffb      	ldrb	r3, [r7, #31]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80081be:	7ffb      	ldrb	r3, [r7, #31]
 80081c0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d004      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff fd26 	bl	8007c24 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff fd45 	bl	8007c78 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fd2c 	bl	8007c50 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80081f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3720      	adds	r7, #32
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800820e:	f7ff fe61 	bl	8007ed4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008212:	f7fc fb2d 	bl	8004870 <HAL_GetTick>
 8008216:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008218:	e009      	b.n	800822e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800821a:	f7fc fb29 	bl	8004870 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d902      	bls.n	800822e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	73fb      	strb	r3, [r7, #15]
      break;
 800822c:	e004      	b.n	8008238 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800822e:	f7ff fe60 	bl	8007ef2 <LL_RCC_PLLSAI1_IsReady>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1f0      	bne.n	800821a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d137      	bne.n	80082ae <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800823e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	021b      	lsls	r3, r3, #8
 800824e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008252:	4313      	orrs	r3, r2
 8008254:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008268:	4313      	orrs	r3, r2
 800826a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800826c:	f7ff fe23 	bl	8007eb6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008270:	f7fc fafe 	bl	8004870 <HAL_GetTick>
 8008274:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008276:	e009      	b.n	800828c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008278:	f7fc fafa 	bl	8004870 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	2b02      	cmp	r3, #2
 8008284:	d902      	bls.n	800828c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	73fb      	strb	r3, [r7, #15]
        break;
 800828a:	e004      	b.n	8008296 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800828c:	f7ff fe31 	bl	8007ef2 <LL_RCC_PLLSAI1_IsReady>
 8008290:	4603      	mov	r3, r0
 8008292:	2b01      	cmp	r3, #1
 8008294:	d1f0      	bne.n	8008278 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d108      	bne.n	80082ae <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800829c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082a0:	691a      	ldr	r2, [r3, #16]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082aa:	4313      	orrs	r3, r2
 80082ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80082c4:	f7ff fe06 	bl	8007ed4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082c8:	f7fc fad2 	bl	8004870 <HAL_GetTick>
 80082cc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80082ce:	e009      	b.n	80082e4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082d0:	f7fc face 	bl	8004870 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d902      	bls.n	80082e4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	73fb      	strb	r3, [r7, #15]
      break;
 80082e2:	e004      	b.n	80082ee <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80082e4:	f7ff fe05 	bl	8007ef2 <LL_RCC_PLLSAI1_IsReady>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f0      	bne.n	80082d0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d137      	bne.n	8008364 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80082f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	021b      	lsls	r3, r3, #8
 8008304:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008308:	4313      	orrs	r3, r2
 800830a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800830c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800831e:	4313      	orrs	r3, r2
 8008320:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008322:	f7ff fdc8 	bl	8007eb6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008326:	f7fc faa3 	bl	8004870 <HAL_GetTick>
 800832a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800832c:	e009      	b.n	8008342 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800832e:	f7fc fa9f 	bl	8004870 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d902      	bls.n	8008342 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	73fb      	strb	r3, [r7, #15]
        break;
 8008340:	e004      	b.n	800834c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008342:	f7ff fdd6 	bl	8007ef2 <LL_RCC_PLLSAI1_IsReady>
 8008346:	4603      	mov	r3, r0
 8008348:	2b01      	cmp	r3, #1
 800834a:	d1f0      	bne.n	800832e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d108      	bne.n	8008364 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008360:	4313      	orrs	r3, r2
 8008362:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800837a:	f7ff fdab 	bl	8007ed4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800837e:	f7fc fa77 	bl	8004870 <HAL_GetTick>
 8008382:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008384:	e009      	b.n	800839a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008386:	f7fc fa73 	bl	8004870 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d902      	bls.n	800839a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	73fb      	strb	r3, [r7, #15]
      break;
 8008398:	e004      	b.n	80083a4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800839a:	f7ff fdaa 	bl	8007ef2 <LL_RCC_PLLSAI1_IsReady>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1f0      	bne.n	8008386 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d137      	bne.n	800841a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80083aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083be:	4313      	orrs	r3, r2
 80083c0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80083c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083d4:	4313      	orrs	r3, r2
 80083d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80083d8:	f7ff fd6d 	bl	8007eb6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083dc:	f7fc fa48 	bl	8004870 <HAL_GetTick>
 80083e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083e2:	e009      	b.n	80083f8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083e4:	f7fc fa44 	bl	8004870 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d902      	bls.n	80083f8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	73fb      	strb	r3, [r7, #15]
        break;
 80083f6:	e004      	b.n	8008402 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083f8:	f7ff fd7b 	bl	8007ef2 <LL_RCC_PLLSAI1_IsReady>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d1f0      	bne.n	80083e4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d108      	bne.n	800841a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800840c:	691a      	ldr	r2, [r3, #16]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008416:	4313      	orrs	r3, r2
 8008418:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e09f      	b.n	8008576 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7fb fea2 	bl	8004194 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008458:	4b49      	ldr	r3, [pc, #292]	@ (8008580 <HAL_RTC_Init+0x15c>)
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f003 0310 	and.w	r3, r3, #16
 8008460:	2b10      	cmp	r3, #16
 8008462:	d07e      	beq.n	8008562 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	22ca      	movs	r2, #202	@ 0xca
 800846a:	625a      	str	r2, [r3, #36]	@ 0x24
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2253      	movs	r2, #83	@ 0x53
 8008472:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f8ab 	bl	80085d0 <RTC_EnterInitMode>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	22ff      	movs	r2, #255	@ 0xff
 8008486:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2204      	movs	r2, #4
 800848c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	73fb      	strb	r3, [r7, #15]
 8008494:	e067      	b.n	8008566 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80084a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084a8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6899      	ldr	r1, [r3, #8]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	431a      	orrs	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	68d2      	ldr	r2, [r2, #12]
 80084d0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6919      	ldr	r1, [r3, #16]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	041a      	lsls	r2, r3, #16
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084f4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0203 	bic.w	r2, r2, #3
 8008504:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	69da      	ldr	r2, [r3, #28]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f003 0320 	and.w	r3, r3, #32
 8008528:	2b00      	cmp	r3, #0
 800852a:	d113      	bne.n	8008554 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f829 	bl	8008584 <HAL_RTC_WaitForSynchro>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00d      	beq.n	8008554 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	22ff      	movs	r2, #255	@ 0xff
 800853e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2204      	movs	r2, #4
 8008544:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e010      	b.n	8008576 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	22ff      	movs	r2, #255	@ 0xff
 800855a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
 8008560:	e001      	b.n	8008566 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d103      	bne.n	8008574 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8008574:	7bfb      	ldrb	r3, [r7, #15]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	40002800 	.word	0x40002800

08008584 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800859a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800859c:	f7fc f968 	bl	8004870 <HAL_GetTick>
 80085a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80085a2:	e009      	b.n	80085b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80085a4:	f7fc f964 	bl	8004870 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085b2:	d901      	bls.n	80085b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e007      	b.n	80085c8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0ee      	beq.n	80085a4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d119      	bne.n	800861a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295
 80085ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80085f0:	f7fc f93e 	bl	8004870 <HAL_GetTick>
 80085f4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80085f6:	e009      	b.n	800860c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80085f8:	f7fc f93a 	bl	8004870 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008606:	d901      	bls.n	800860c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e007      	b.n	800861c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0ee      	beq.n	80085f8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800863a:	2302      	movs	r3, #2
 800863c:	e0a8      	b.n	8008790 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2202      	movs	r2, #2
 800864a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	22ca      	movs	r2, #202	@ 0xca
 8008654:	625a      	str	r2, [r3, #36]	@ 0x24
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2253      	movs	r2, #83	@ 0x53
 800865c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008668:	2b00      	cmp	r3, #0
 800866a:	d020      	beq.n	80086ae <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800866c:	f7fc f900 	bl	8004870 <HAL_GetTick>
 8008670:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008672:	e015      	b.n	80086a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008674:	f7fc f8fc 	bl	8004870 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008682:	d90d      	bls.n	80086a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	22ff      	movs	r2, #255	@ 0xff
 800868a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2203      	movs	r2, #3
 8008690:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e077      	b.n	8008790 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e2      	bne.n	8008674 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086bc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80086ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80086d0:	f7fc f8ce 	bl	8004870 <HAL_GetTick>
 80086d4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80086d6:	e015      	b.n	8008704 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086d8:	f7fc f8ca 	bl	8004870 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086e6:	d90d      	bls.n	8008704 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	22ff      	movs	r2, #255	@ 0xff
 80086ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2203      	movs	r2, #3
 80086f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e045      	b.n	8008790 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f003 0304 	and.w	r3, r3, #4
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0e2      	beq.n	80086d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689a      	ldr	r2, [r3, #8]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0207 	bic.w	r2, r2, #7
 8008728:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6899      	ldr	r1, [r3, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	430a      	orrs	r2, r1
 8008738:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800873a:	4b17      	ldr	r3, [pc, #92]	@ (8008798 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800873c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008740:	4a15      	ldr	r2, [pc, #84]	@ (8008798 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008742:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008746:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800874a:	4b13      	ldr	r3, [pc, #76]	@ (8008798 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a12      	ldr	r2, [pc, #72]	@ (8008798 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008750:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008754:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008764:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689a      	ldr	r2, [r3, #8]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008774:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	22ff      	movs	r2, #255	@ 0xff
 800877c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	58000800 	.word	0x58000800

0800879c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e049      	b.n	8008842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d106      	bne.n	80087c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7fb fd1a 	bl	80041fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3304      	adds	r3, #4
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f000 fb9e 	bl	8008f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b01      	cmp	r3, #1
 800885e:	d001      	beq.n	8008864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e036      	b.n	80088d2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a17      	ldr	r2, [pc, #92]	@ (80088e0 <HAL_TIM_Base_Start_IT+0x94>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d004      	beq.n	8008890 <HAL_TIM_Base_Start_IT+0x44>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800888e:	d115      	bne.n	80088bc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689a      	ldr	r2, [r3, #8]
 8008896:	4b13      	ldr	r3, [pc, #76]	@ (80088e4 <HAL_TIM_Base_Start_IT+0x98>)
 8008898:	4013      	ands	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b06      	cmp	r3, #6
 80088a0:	d015      	beq.n	80088ce <HAL_TIM_Base_Start_IT+0x82>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088a8:	d011      	beq.n	80088ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f042 0201 	orr.w	r2, r2, #1
 80088b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ba:	e008      	b.n	80088ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	e000      	b.n	80088d0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	40012c00 	.word	0x40012c00
 80088e4:	00010007 	.word	0x00010007

080088e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e049      	b.n	800898e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f841 	bl	8008996 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3304      	adds	r3, #4
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f000 faf8 	bl	8008f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
	...

080089ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <HAL_TIM_PWM_Start+0x24>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	bf14      	ite	ne
 80089c8:	2301      	movne	r3, #1
 80089ca:	2300      	moveq	r3, #0
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	e03c      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d109      	bne.n	80089ea <HAL_TIM_PWM_Start+0x3e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b01      	cmp	r3, #1
 80089e0:	bf14      	ite	ne
 80089e2:	2301      	movne	r3, #1
 80089e4:	2300      	moveq	r3, #0
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	e02f      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d109      	bne.n	8008a04 <HAL_TIM_PWM_Start+0x58>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	bf14      	ite	ne
 80089fc:	2301      	movne	r3, #1
 80089fe:	2300      	moveq	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	e022      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2b0c      	cmp	r3, #12
 8008a08:	d109      	bne.n	8008a1e <HAL_TIM_PWM_Start+0x72>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	bf14      	ite	ne
 8008a16:	2301      	movne	r3, #1
 8008a18:	2300      	moveq	r3, #0
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	e015      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b10      	cmp	r3, #16
 8008a22:	d109      	bne.n	8008a38 <HAL_TIM_PWM_Start+0x8c>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	bf14      	ite	ne
 8008a30:	2301      	movne	r3, #1
 8008a32:	2300      	moveq	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	e008      	b.n	8008a4a <HAL_TIM_PWM_Start+0x9e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	bf14      	ite	ne
 8008a44:	2301      	movne	r3, #1
 8008a46:	2300      	moveq	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e079      	b.n	8008b46 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <HAL_TIM_PWM_Start+0xb6>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a60:	e023      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d104      	bne.n	8008a72 <HAL_TIM_PWM_Start+0xc6>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a70:	e01b      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d104      	bne.n	8008a82 <HAL_TIM_PWM_Start+0xd6>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a80:	e013      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b0c      	cmp	r3, #12
 8008a86:	d104      	bne.n	8008a92 <HAL_TIM_PWM_Start+0xe6>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a90:	e00b      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b10      	cmp	r3, #16
 8008a96:	d104      	bne.n	8008aa2 <HAL_TIM_PWM_Start+0xf6>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008aa0:	e003      	b.n	8008aaa <HAL_TIM_PWM_Start+0xfe>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fdbc 	bl	8009630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a24      	ldr	r2, [pc, #144]	@ (8008b50 <HAL_TIM_PWM_Start+0x1a4>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d009      	beq.n	8008ad6 <HAL_TIM_PWM_Start+0x12a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a23      	ldr	r2, [pc, #140]	@ (8008b54 <HAL_TIM_PWM_Start+0x1a8>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d004      	beq.n	8008ad6 <HAL_TIM_PWM_Start+0x12a>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a21      	ldr	r2, [pc, #132]	@ (8008b58 <HAL_TIM_PWM_Start+0x1ac>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d101      	bne.n	8008ada <HAL_TIM_PWM_Start+0x12e>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e000      	b.n	8008adc <HAL_TIM_PWM_Start+0x130>
 8008ada:	2300      	movs	r3, #0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d007      	beq.n	8008af0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008aee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a16      	ldr	r2, [pc, #88]	@ (8008b50 <HAL_TIM_PWM_Start+0x1a4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d004      	beq.n	8008b04 <HAL_TIM_PWM_Start+0x158>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b02:	d115      	bne.n	8008b30 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689a      	ldr	r2, [r3, #8]
 8008b0a:	4b14      	ldr	r3, [pc, #80]	@ (8008b5c <HAL_TIM_PWM_Start+0x1b0>)
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2b06      	cmp	r3, #6
 8008b14:	d015      	beq.n	8008b42 <HAL_TIM_PWM_Start+0x196>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b1c:	d011      	beq.n	8008b42 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f042 0201 	orr.w	r2, r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b2e:	e008      	b.n	8008b42 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0201 	orr.w	r2, r2, #1
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	e000      	b.n	8008b44 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	40012c00 	.word	0x40012c00
 8008b54:	40014400 	.word	0x40014400
 8008b58:	40014800 	.word	0x40014800
 8008b5c:	00010007 	.word	0x00010007

08008b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e0ff      	b.n	8008d7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b14      	cmp	r3, #20
 8008b8a:	f200 80f0 	bhi.w	8008d6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b94:	08008be9 	.word	0x08008be9
 8008b98:	08008d6f 	.word	0x08008d6f
 8008b9c:	08008d6f 	.word	0x08008d6f
 8008ba0:	08008d6f 	.word	0x08008d6f
 8008ba4:	08008c29 	.word	0x08008c29
 8008ba8:	08008d6f 	.word	0x08008d6f
 8008bac:	08008d6f 	.word	0x08008d6f
 8008bb0:	08008d6f 	.word	0x08008d6f
 8008bb4:	08008c6b 	.word	0x08008c6b
 8008bb8:	08008d6f 	.word	0x08008d6f
 8008bbc:	08008d6f 	.word	0x08008d6f
 8008bc0:	08008d6f 	.word	0x08008d6f
 8008bc4:	08008cab 	.word	0x08008cab
 8008bc8:	08008d6f 	.word	0x08008d6f
 8008bcc:	08008d6f 	.word	0x08008d6f
 8008bd0:	08008d6f 	.word	0x08008d6f
 8008bd4:	08008ced 	.word	0x08008ced
 8008bd8:	08008d6f 	.word	0x08008d6f
 8008bdc:	08008d6f 	.word	0x08008d6f
 8008be0:	08008d6f 	.word	0x08008d6f
 8008be4:	08008d2d 	.word	0x08008d2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fa04 	bl	8008ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699a      	ldr	r2, [r3, #24]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 0208 	orr.w	r2, r2, #8
 8008c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	699a      	ldr	r2, [r3, #24]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0204 	bic.w	r2, r2, #4
 8008c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6999      	ldr	r1, [r3, #24]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	691a      	ldr	r2, [r3, #16]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	619a      	str	r2, [r3, #24]
      break;
 8008c26:	e0a5      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fa60 	bl	80090f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699a      	ldr	r2, [r3, #24]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6999      	ldr	r1, [r3, #24]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	021a      	lsls	r2, r3, #8
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	619a      	str	r2, [r3, #24]
      break;
 8008c68:	e084      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fab9 	bl	80091e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69da      	ldr	r2, [r3, #28]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0208 	orr.w	r2, r2, #8
 8008c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69da      	ldr	r2, [r3, #28]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f022 0204 	bic.w	r2, r2, #4
 8008c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69d9      	ldr	r1, [r3, #28]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	691a      	ldr	r2, [r3, #16]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	61da      	str	r2, [r3, #28]
      break;
 8008ca8:	e064      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fb11 	bl	80092d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69da      	ldr	r2, [r3, #28]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69da      	ldr	r2, [r3, #28]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69d9      	ldr	r1, [r3, #28]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	021a      	lsls	r2, r3, #8
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	61da      	str	r2, [r3, #28]
      break;
 8008cea:	e043      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 fb4e 	bl	8009394 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0208 	orr.w	r2, r2, #8
 8008d06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0204 	bic.w	r2, r2, #4
 8008d16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008d2a:	e023      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68b9      	ldr	r1, [r7, #8]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 fb86 	bl	8009444 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	021a      	lsls	r2, r3, #8
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008d6c:	e002      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	75fb      	strb	r3, [r7, #23]
      break;
 8008d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop

08008d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_TIM_ConfigClockSource+0x1c>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e0b6      	b.n	8008f12 <HAL_TIM_ConfigClockSource+0x18a>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008dc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008de0:	d03e      	beq.n	8008e60 <HAL_TIM_ConfigClockSource+0xd8>
 8008de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008de6:	f200 8087 	bhi.w	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dee:	f000 8086 	beq.w	8008efe <HAL_TIM_ConfigClockSource+0x176>
 8008df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df6:	d87f      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008df8:	2b70      	cmp	r3, #112	@ 0x70
 8008dfa:	d01a      	beq.n	8008e32 <HAL_TIM_ConfigClockSource+0xaa>
 8008dfc:	2b70      	cmp	r3, #112	@ 0x70
 8008dfe:	d87b      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e00:	2b60      	cmp	r3, #96	@ 0x60
 8008e02:	d050      	beq.n	8008ea6 <HAL_TIM_ConfigClockSource+0x11e>
 8008e04:	2b60      	cmp	r3, #96	@ 0x60
 8008e06:	d877      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e08:	2b50      	cmp	r3, #80	@ 0x50
 8008e0a:	d03c      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0xfe>
 8008e0c:	2b50      	cmp	r3, #80	@ 0x50
 8008e0e:	d873      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e10:	2b40      	cmp	r3, #64	@ 0x40
 8008e12:	d058      	beq.n	8008ec6 <HAL_TIM_ConfigClockSource+0x13e>
 8008e14:	2b40      	cmp	r3, #64	@ 0x40
 8008e16:	d86f      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e18:	2b30      	cmp	r3, #48	@ 0x30
 8008e1a:	d064      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8008e1c:	2b30      	cmp	r3, #48	@ 0x30
 8008e1e:	d86b      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e20:	2b20      	cmp	r3, #32
 8008e22:	d060      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d867      	bhi.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d05c      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8008e2c:	2b10      	cmp	r3, #16
 8008e2e:	d05a      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x15e>
 8008e30:	e062      	b.n	8008ef8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e42:	f000 fbd5 	bl	80095f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008e54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	609a      	str	r2, [r3, #8]
      break;
 8008e5e:	e04f      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e70:	f000 fbbe 	bl	80095f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e82:	609a      	str	r2, [r3, #8]
      break;
 8008e84:	e03c      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e92:	461a      	mov	r2, r3
 8008e94:	f000 fb30 	bl	80094f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2150      	movs	r1, #80	@ 0x50
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fb89 	bl	80095b6 <TIM_ITRx_SetConfig>
      break;
 8008ea4:	e02c      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f000 fb4f 	bl	8009556 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2160      	movs	r1, #96	@ 0x60
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fb79 	bl	80095b6 <TIM_ITRx_SetConfig>
      break;
 8008ec4:	e01c      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f000 fb10 	bl	80094f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2140      	movs	r1, #64	@ 0x40
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fb69 	bl	80095b6 <TIM_ITRx_SetConfig>
      break;
 8008ee4:	e00c      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	f000 fb60 	bl	80095b6 <TIM_ITRx_SetConfig>
      break;
 8008ef6:	e003      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	73fb      	strb	r3, [r7, #15]
      break;
 8008efc:	e000      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a30      	ldr	r2, [pc, #192]	@ (8008ff0 <TIM_Base_SetConfig+0xd4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d003      	beq.n	8008f3c <TIM_Base_SetConfig+0x20>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f3a:	d108      	bne.n	8008f4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a27      	ldr	r2, [pc, #156]	@ (8008ff0 <TIM_Base_SetConfig+0xd4>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00b      	beq.n	8008f6e <TIM_Base_SetConfig+0x52>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f5c:	d007      	beq.n	8008f6e <TIM_Base_SetConfig+0x52>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a24      	ldr	r2, [pc, #144]	@ (8008ff4 <TIM_Base_SetConfig+0xd8>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d003      	beq.n	8008f6e <TIM_Base_SetConfig+0x52>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a23      	ldr	r2, [pc, #140]	@ (8008ff8 <TIM_Base_SetConfig+0xdc>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d108      	bne.n	8008f80 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	689a      	ldr	r2, [r3, #8]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a12      	ldr	r2, [pc, #72]	@ (8008ff0 <TIM_Base_SetConfig+0xd4>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d007      	beq.n	8008fbc <TIM_Base_SetConfig+0xa0>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a11      	ldr	r2, [pc, #68]	@ (8008ff4 <TIM_Base_SetConfig+0xd8>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d003      	beq.n	8008fbc <TIM_Base_SetConfig+0xa0>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a10      	ldr	r2, [pc, #64]	@ (8008ff8 <TIM_Base_SetConfig+0xdc>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d103      	bne.n	8008fc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	691a      	ldr	r2, [r3, #16]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d105      	bne.n	8008fe2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f023 0201 	bic.w	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	611a      	str	r2, [r3, #16]
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40012c00 	.word	0x40012c00
 8008ff4:	40014400 	.word	0x40014400
 8008ff8:	40014800 	.word	0x40014800

08008ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a1b      	ldr	r3, [r3, #32]
 8009010:	f023 0201 	bic.w	r2, r3, #1
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800902a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800902e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f023 0303 	bic.w	r3, r3, #3
 8009036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f023 0302 	bic.w	r3, r3, #2
 8009048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	4313      	orrs	r3, r2
 8009052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a24      	ldr	r2, [pc, #144]	@ (80090e8 <TIM_OC1_SetConfig+0xec>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d007      	beq.n	800906c <TIM_OC1_SetConfig+0x70>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a23      	ldr	r2, [pc, #140]	@ (80090ec <TIM_OC1_SetConfig+0xf0>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d003      	beq.n	800906c <TIM_OC1_SetConfig+0x70>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a22      	ldr	r2, [pc, #136]	@ (80090f0 <TIM_OC1_SetConfig+0xf4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d10c      	bne.n	8009086 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f023 0308 	bic.w	r3, r3, #8
 8009072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f023 0304 	bic.w	r3, r3, #4
 8009084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a17      	ldr	r2, [pc, #92]	@ (80090e8 <TIM_OC1_SetConfig+0xec>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d007      	beq.n	800909e <TIM_OC1_SetConfig+0xa2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a17      	ldr	r2, [pc, #92]	@ (80090f0 <TIM_OC1_SetConfig+0xf4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d003      	beq.n	800909e <TIM_OC1_SetConfig+0xa2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a14      	ldr	r2, [pc, #80]	@ (80090ec <TIM_OC1_SetConfig+0xf0>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d111      	bne.n	80090c2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	4313      	orrs	r3, r2
 80090c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	621a      	str	r2, [r3, #32]
}
 80090dc:	bf00      	nop
 80090de:	371c      	adds	r7, #28
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	40012c00 	.word	0x40012c00
 80090ec:	40014800 	.word	0x40014800
 80090f0:	40014400 	.word	0x40014400

080090f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	f023 0210 	bic.w	r2, r3, #16
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800912e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	021b      	lsls	r3, r3, #8
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f023 0320 	bic.w	r3, r3, #32
 8009142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	011b      	lsls	r3, r3, #4
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a22      	ldr	r2, [pc, #136]	@ (80091dc <TIM_OC2_SetConfig+0xe8>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d10d      	bne.n	8009174 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800915e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	011b      	lsls	r3, r3, #4
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	4313      	orrs	r3, r2
 800916a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009172:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a19      	ldr	r2, [pc, #100]	@ (80091dc <TIM_OC2_SetConfig+0xe8>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d007      	beq.n	800918c <TIM_OC2_SetConfig+0x98>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a18      	ldr	r2, [pc, #96]	@ (80091e0 <TIM_OC2_SetConfig+0xec>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d003      	beq.n	800918c <TIM_OC2_SetConfig+0x98>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a17      	ldr	r2, [pc, #92]	@ (80091e4 <TIM_OC2_SetConfig+0xf0>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d113      	bne.n	80091b4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800919a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	693a      	ldr	r2, [r7, #16]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	621a      	str	r2, [r3, #32]
}
 80091ce:	bf00      	nop
 80091d0:	371c      	adds	r7, #28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	40012c00 	.word	0x40012c00
 80091e0:	40014400 	.word	0x40014400
 80091e4:	40014800 	.word	0x40014800

080091e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800921a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0303 	bic.w	r3, r3, #3
 8009222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	021b      	lsls	r3, r3, #8
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	4313      	orrs	r3, r2
 8009240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a21      	ldr	r2, [pc, #132]	@ (80092cc <TIM_OC3_SetConfig+0xe4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d10d      	bne.n	8009266 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	021b      	lsls	r3, r3, #8
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a18      	ldr	r2, [pc, #96]	@ (80092cc <TIM_OC3_SetConfig+0xe4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d007      	beq.n	800927e <TIM_OC3_SetConfig+0x96>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a17      	ldr	r2, [pc, #92]	@ (80092d0 <TIM_OC3_SetConfig+0xe8>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d003      	beq.n	800927e <TIM_OC3_SetConfig+0x96>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a16      	ldr	r2, [pc, #88]	@ (80092d4 <TIM_OC3_SetConfig+0xec>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d113      	bne.n	80092a6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800928c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	011b      	lsls	r3, r3, #4
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	4313      	orrs	r3, r2
 8009298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	621a      	str	r2, [r3, #32]
}
 80092c0:	bf00      	nop
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	40012c00 	.word	0x40012c00
 80092d0:	40014400 	.word	0x40014400
 80092d4:	40014800 	.word	0x40014800

080092d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800930a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	021b      	lsls	r3, r3, #8
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	4313      	orrs	r3, r2
 800931e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	031b      	lsls	r3, r3, #12
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a14      	ldr	r2, [pc, #80]	@ (8009388 <TIM_OC4_SetConfig+0xb0>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_OC4_SetConfig+0x74>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a13      	ldr	r2, [pc, #76]	@ (800938c <TIM_OC4_SetConfig+0xb4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_OC4_SetConfig+0x74>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a12      	ldr	r2, [pc, #72]	@ (8009390 <TIM_OC4_SetConfig+0xb8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d109      	bne.n	8009360 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	019b      	lsls	r3, r3, #6
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	621a      	str	r2, [r3, #32]
}
 800937a:	bf00      	nop
 800937c:	371c      	adds	r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	40012c00 	.word	0x40012c00
 800938c:	40014400 	.word	0x40014400
 8009390:	40014800 	.word	0x40014800

08009394 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a1b      	ldr	r3, [r3, #32]
 80093a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80093d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	041b      	lsls	r3, r3, #16
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a13      	ldr	r2, [pc, #76]	@ (8009438 <TIM_OC5_SetConfig+0xa4>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d007      	beq.n	80093fe <TIM_OC5_SetConfig+0x6a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a12      	ldr	r2, [pc, #72]	@ (800943c <TIM_OC5_SetConfig+0xa8>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d003      	beq.n	80093fe <TIM_OC5_SetConfig+0x6a>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a11      	ldr	r2, [pc, #68]	@ (8009440 <TIM_OC5_SetConfig+0xac>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d109      	bne.n	8009412 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009404:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	021b      	lsls	r3, r3, #8
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	621a      	str	r2, [r3, #32]
}
 800942c:	bf00      	nop
 800942e:	371c      	adds	r7, #28
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	40012c00 	.word	0x40012c00
 800943c:	40014400 	.word	0x40014400
 8009440:	40014800 	.word	0x40014800

08009444 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800946a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800948a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	051b      	lsls	r3, r3, #20
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	4313      	orrs	r3, r2
 8009496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a14      	ldr	r2, [pc, #80]	@ (80094ec <TIM_OC6_SetConfig+0xa8>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d007      	beq.n	80094b0 <TIM_OC6_SetConfig+0x6c>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a13      	ldr	r2, [pc, #76]	@ (80094f0 <TIM_OC6_SetConfig+0xac>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d003      	beq.n	80094b0 <TIM_OC6_SetConfig+0x6c>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a12      	ldr	r2, [pc, #72]	@ (80094f4 <TIM_OC6_SetConfig+0xb0>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d109      	bne.n	80094c4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	029b      	lsls	r3, r3, #10
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	621a      	str	r2, [r3, #32]
}
 80094de:	bf00      	nop
 80094e0:	371c      	adds	r7, #28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	40012c00 	.word	0x40012c00
 80094f0:	40014400 	.word	0x40014400
 80094f4:	40014800 	.word	0x40014800

080094f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	f023 0201 	bic.w	r2, r3, #1
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	011b      	lsls	r3, r3, #4
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	4313      	orrs	r3, r2
 800952c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f023 030a 	bic.w	r3, r3, #10
 8009534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	4313      	orrs	r3, r2
 800953c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	621a      	str	r2, [r3, #32]
}
 800954a:	bf00      	nop
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009556:	b480      	push	{r7}
 8009558:	b087      	sub	sp, #28
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	f023 0210 	bic.w	r2, r3, #16
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	031b      	lsls	r3, r3, #12
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4313      	orrs	r3, r2
 800958a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009592:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	4313      	orrs	r3, r2
 800959c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	621a      	str	r2, [r3, #32]
}
 80095aa:	bf00      	nop
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b085      	sub	sp, #20
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80095cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f043 0307 	orr.w	r3, r3, #7
 80095dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	609a      	str	r2, [r3, #8]
}
 80095e4:	bf00      	nop
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800960a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	021a      	lsls	r2, r3, #8
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	431a      	orrs	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4313      	orrs	r3, r2
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	4313      	orrs	r3, r2
 800961c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	609a      	str	r2, [r3, #8]
}
 8009624:	bf00      	nop
 8009626:	371c      	adds	r7, #28
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	f003 031f 	and.w	r3, r3, #31
 8009642:	2201      	movs	r2, #1
 8009644:	fa02 f303 	lsl.w	r3, r2, r3
 8009648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a1a      	ldr	r2, [r3, #32]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	43db      	mvns	r3, r3
 8009652:	401a      	ands	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a1a      	ldr	r2, [r3, #32]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f003 031f 	and.w	r3, r3, #31
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	fa01 f303 	lsl.w	r3, r1, r3
 8009668:	431a      	orrs	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	621a      	str	r2, [r3, #32]
}
 800966e:	bf00      	nop
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
	...

0800967c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009690:	2302      	movs	r3, #2
 8009692:	e04a      	b.n	800972a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a1f      	ldr	r2, [pc, #124]	@ (8009738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d108      	bne.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80096c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a12      	ldr	r2, [pc, #72]	@ (8009738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d004      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096fc:	d10c      	bne.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	4313      	orrs	r3, r2
 800970e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	40012c00 	.word	0x40012c00

0800973c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009754:	2302      	movs	r3, #2
 8009756:	e06e      	b.n	8009836 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	4313      	orrs	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	4313      	orrs	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4313      	orrs	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	041b      	lsls	r3, r3, #16
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	4313      	orrs	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a17      	ldr	r2, [pc, #92]	@ (8009844 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d11c      	bne.n	8009824 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f4:	051b      	lsls	r3, r3, #20
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	4313      	orrs	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009820:	4313      	orrs	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	40012c00 	.word	0x40012c00

08009848 <LL_RCC_GetUSARTClockSource>:
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009854:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4013      	ands	r3, r2
}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <LL_RCC_GetLPUARTClockSource>:
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009874:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4013      	ands	r3, r2
}
 800987c:	4618      	mov	r0, r3
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e042      	b.n	8009920 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d106      	bne.n	80098b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7fa fce5 	bl	800427c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2224      	movs	r2, #36	@ 0x24
 80098b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0201 	bic.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fe7e 	bl	800a5d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fc53 	bl	800a184 <UART_SetConfig>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d101      	bne.n	80098e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e01b      	b.n	8009920 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0201 	orr.w	r2, r2, #1
 8009916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fefd 	bl	800a718 <UART_CheckIdleState>
 800991e:	4603      	mov	r3, r0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	@ 0x28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	4613      	mov	r3, r2
 8009934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800993c:	2b20      	cmp	r3, #32
 800993e:	d137      	bne.n	80099b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <HAL_UART_Receive_IT+0x24>
 8009946:	88fb      	ldrh	r3, [r7, #6]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e030      	b.n	80099b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a18      	ldr	r2, [pc, #96]	@ (80099bc <HAL_UART_Receive_IT+0x94>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d01f      	beq.n	80099a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d018      	beq.n	80099a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	e853 3f00 	ldrex	r3, [r3]
 800997a:	613b      	str	r3, [r7, #16]
   return(result);
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009982:	627b      	str	r3, [r7, #36]	@ 0x24
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	461a      	mov	r2, r3
 800998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998c:	623b      	str	r3, [r7, #32]
 800998e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009990:	69f9      	ldr	r1, [r7, #28]
 8009992:	6a3a      	ldr	r2, [r7, #32]
 8009994:	e841 2300 	strex	r3, r2, [r1]
 8009998:	61bb      	str	r3, [r7, #24]
   return(result);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e6      	bne.n	800996e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80099a0:	88fb      	ldrh	r3, [r7, #6]
 80099a2:	461a      	mov	r2, r3
 80099a4:	68b9      	ldr	r1, [r7, #8]
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 ffce 	bl	800a948 <UART_Start_Receive_IT>
 80099ac:	4603      	mov	r3, r0
 80099ae:	e000      	b.n	80099b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80099b0:	2302      	movs	r3, #2
  }
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3728      	adds	r7, #40	@ 0x28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	40008000 	.word	0x40008000

080099c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	@ 0x28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099d4:	2b20      	cmp	r3, #32
 80099d6:	d167      	bne.n	8009aa8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <HAL_UART_Transmit_DMA+0x24>
 80099de:	88fb      	ldrh	r3, [r7, #6]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e060      	b.n	8009aaa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	88fa      	ldrh	r2, [r7, #6]
 80099f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	88fa      	ldrh	r2, [r7, #6]
 80099fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2221      	movs	r2, #33	@ 0x21
 8009a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d028      	beq.n	8009a68 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a1a:	4a26      	ldr	r2, [pc, #152]	@ (8009ab4 <HAL_UART_Transmit_DMA+0xf4>)
 8009a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a22:	4a25      	ldr	r2, [pc, #148]	@ (8009ab8 <HAL_UART_Transmit_DMA+0xf8>)
 8009a24:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a2a:	4a24      	ldr	r2, [pc, #144]	@ (8009abc <HAL_UART_Transmit_DMA+0xfc>)
 8009a2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a32:	2200      	movs	r2, #0
 8009a34:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3328      	adds	r3, #40	@ 0x28
 8009a46:	461a      	mov	r2, r3
 8009a48:	88fb      	ldrh	r3, [r7, #6]
 8009a4a:	f7fb fa19 	bl	8004e80 <HAL_DMA_Start_IT>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d009      	beq.n	8009a68 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2210      	movs	r2, #16
 8009a58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e020      	b.n	8009aaa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2240      	movs	r2, #64	@ 0x40
 8009a6e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a90:	623a      	str	r2, [r7, #32]
 8009a92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	69f9      	ldr	r1, [r7, #28]
 8009a96:	6a3a      	ldr	r2, [r7, #32]
 8009a98:	e841 2300 	strex	r3, r2, [r1]
 8009a9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e5      	bne.n	8009a70 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e000      	b.n	8009aaa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009aa8:	2302      	movs	r3, #2
  }
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3728      	adds	r7, #40	@ 0x28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	0800acdb 	.word	0x0800acdb
 8009ab8:	0800ad75 	.word	0x0800ad75
 8009abc:	0800ad91 	.word	0x0800ad91

08009ac0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b0ba      	sub	sp, #232	@ 0xe8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009ae6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009aea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009aee:	4013      	ands	r3, r2
 8009af0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d11b      	bne.n	8009b34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b00:	f003 0320 	and.w	r3, r3, #32
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d015      	beq.n	8009b34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d105      	bne.n	8009b20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d009      	beq.n	8009b34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 8300 	beq.w	800a12a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	4798      	blx	r3
      }
      return;
 8009b32:	e2fa      	b.n	800a12a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 8123 	beq.w	8009d84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b42:	4b8d      	ldr	r3, [pc, #564]	@ (8009d78 <HAL_UART_IRQHandler+0x2b8>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d106      	bne.n	8009b58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8009d7c <HAL_UART_IRQHandler+0x2bc>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 8116 	beq.w	8009d84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d011      	beq.n	8009b88 <HAL_UART_IRQHandler+0xc8>
 8009b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2201      	movs	r2, #1
 8009b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b7e:	f043 0201 	orr.w	r2, r3, #1
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d011      	beq.n	8009bb8 <HAL_UART_IRQHandler+0xf8>
 8009b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00b      	beq.n	8009bb8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bae:	f043 0204 	orr.w	r2, r3, #4
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bbc:	f003 0304 	and.w	r3, r3, #4
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d011      	beq.n	8009be8 <HAL_UART_IRQHandler+0x128>
 8009bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00b      	beq.n	8009be8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2204      	movs	r2, #4
 8009bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bde:	f043 0202 	orr.w	r2, r3, #2
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bec:	f003 0308 	and.w	r3, r3, #8
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d017      	beq.n	8009c24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bf8:	f003 0320 	and.w	r3, r3, #32
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d105      	bne.n	8009c0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c04:	4b5c      	ldr	r3, [pc, #368]	@ (8009d78 <HAL_UART_IRQHandler+0x2b8>)
 8009c06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2208      	movs	r2, #8
 8009c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c1a:	f043 0208 	orr.w	r2, r3, #8
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d012      	beq.n	8009c56 <HAL_UART_IRQHandler+0x196>
 8009c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00c      	beq.n	8009c56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c4c:	f043 0220 	orr.w	r2, r3, #32
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 8266 	beq.w	800a12e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d013      	beq.n	8009c96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d105      	bne.n	8009c86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d007      	beq.n	8009c96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009caa:	2b40      	cmp	r3, #64	@ 0x40
 8009cac:	d005      	beq.n	8009cba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009cb2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d054      	beq.n	8009d64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 ffa7 	bl	800ac0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cca:	2b40      	cmp	r3, #64	@ 0x40
 8009ccc:	d146      	bne.n	8009d5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1d9      	bne.n	8009cce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d017      	beq.n	8009d54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d2a:	4a15      	ldr	r2, [pc, #84]	@ (8009d80 <HAL_UART_IRQHandler+0x2c0>)
 8009d2c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fb f97d 	bl	8005034 <HAL_DMA_Abort_IT>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d019      	beq.n	8009d74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d4e:	4610      	mov	r0, r2
 8009d50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d52:	e00f      	b.n	8009d74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f9ff 	bl	800a158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d5a:	e00b      	b.n	8009d74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f9fb 	bl	800a158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d62:	e007      	b.n	8009d74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f9f7 	bl	800a158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009d72:	e1dc      	b.n	800a12e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d74:	bf00      	nop
    return;
 8009d76:	e1da      	b.n	800a12e <HAL_UART_IRQHandler+0x66e>
 8009d78:	10000001 	.word	0x10000001
 8009d7c:	04000120 	.word	0x04000120
 8009d80:	0800ae11 	.word	0x0800ae11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	f040 8170 	bne.w	800a06e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d92:	f003 0310 	and.w	r3, r3, #16
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 8169 	beq.w	800a06e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009da0:	f003 0310 	and.w	r3, r3, #16
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 8162 	beq.w	800a06e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2210      	movs	r2, #16
 8009db0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dbc:	2b40      	cmp	r3, #64	@ 0x40
 8009dbe:	f040 80d8 	bne.w	8009f72 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009dd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 80af 	beq.w	8009f38 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009de0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009de4:	429a      	cmp	r2, r3
 8009de6:	f080 80a7 	bcs.w	8009f38 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009df0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f040 8087 	bne.w	8009f16 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e36:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1da      	bne.n	8009e08 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3308      	adds	r3, #8
 8009e58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e64:	f023 0301 	bic.w	r3, r3, #1
 8009e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3308      	adds	r3, #8
 8009e72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e82:	e841 2300 	strex	r3, r2, [r1]
 8009e86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1e1      	bne.n	8009e52 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3308      	adds	r3, #8
 8009e94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e98:	e853 3f00 	ldrex	r3, [r3]
 8009e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3308      	adds	r3, #8
 8009eae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009eb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009eb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e3      	bne.n	8009e8e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2220      	movs	r2, #32
 8009eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ee4:	f023 0310 	bic.w	r3, r3, #16
 8009ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ef8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009efc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009efe:	e841 2300 	strex	r3, r2, [r1]
 8009f02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1e4      	bne.n	8009ed4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fb f830 	bl	8004f76 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2202      	movs	r2, #2
 8009f1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f91b 	bl	800a16c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009f36:	e0fc      	b.n	800a132 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f42:	429a      	cmp	r2, r3
 8009f44:	f040 80f5 	bne.w	800a132 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	2b20      	cmp	r3, #32
 8009f58:	f040 80eb 	bne.w	800a132 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f8fe 	bl	800a16c <HAL_UARTEx_RxEventCallback>
      return;
 8009f70:	e0df      	b.n	800a132 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 80d1 	beq.w	800a136 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 80cc 	beq.w	800a136 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fc8:	e841 2300 	strex	r3, r2, [r1]
 8009fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e4      	bne.n	8009f9e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3308      	adds	r3, #8
 8009fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fea:	f023 0301 	bic.w	r3, r3, #1
 8009fee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009ffc:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a004:	e841 2300 	strex	r3, r2, [r1]
 800a008:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e1      	bne.n	8009fd4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2220      	movs	r2, #32
 800a014:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	60fb      	str	r3, [r7, #12]
   return(result);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f023 0310 	bic.w	r3, r3, #16
 800a038:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a046:	61fb      	str	r3, [r7, #28]
 800a048:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	69b9      	ldr	r1, [r7, #24]
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	617b      	str	r3, [r7, #20]
   return(result);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e4      	bne.n	800a024 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2202      	movs	r2, #2
 800a05e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a064:	4619      	mov	r1, r3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f880 	bl	800a16c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a06c:	e063      	b.n	800a136 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00e      	beq.n	800a098 <HAL_UART_IRQHandler+0x5d8>
 800a07a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a07e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d008      	beq.n	800a098 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a08e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f001 fc1f 	bl	800b8d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a096:	e051      	b.n	800a13c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a09c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d014      	beq.n	800a0ce <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d105      	bne.n	800a0bc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a0b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d008      	beq.n	800a0ce <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d03a      	beq.n	800a13a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
    }
    return;
 800a0cc:	e035      	b.n	800a13a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d009      	beq.n	800a0ee <HAL_UART_IRQHandler+0x62e>
 800a0da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fea8 	bl	800ae3c <UART_EndTransmit_IT>
    return;
 800a0ec:	e026      	b.n	800a13c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a0ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d009      	beq.n	800a10e <HAL_UART_IRQHandler+0x64e>
 800a0fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f001 fbf8 	bl	800b8fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a10c:	e016      	b.n	800a13c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d010      	beq.n	800a13c <HAL_UART_IRQHandler+0x67c>
 800a11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	da0c      	bge.n	800a13c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f001 fbe0 	bl	800b8e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a128:	e008      	b.n	800a13c <HAL_UART_IRQHandler+0x67c>
      return;
 800a12a:	bf00      	nop
 800a12c:	e006      	b.n	800a13c <HAL_UART_IRQHandler+0x67c>
    return;
 800a12e:	bf00      	nop
 800a130:	e004      	b.n	800a13c <HAL_UART_IRQHandler+0x67c>
      return;
 800a132:	bf00      	nop
 800a134:	e002      	b.n	800a13c <HAL_UART_IRQHandler+0x67c>
      return;
 800a136:	bf00      	nop
 800a138:	e000      	b.n	800a13c <HAL_UART_IRQHandler+0x67c>
    return;
 800a13a:	bf00      	nop
  }
}
 800a13c:	37e8      	adds	r7, #232	@ 0xe8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop

0800a144 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a188:	b08c      	sub	sp, #48	@ 0x30
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	431a      	orrs	r2, r3
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	69db      	ldr	r3, [r3, #28]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	4baf      	ldr	r3, [pc, #700]	@ (800a470 <UART_SetConfig+0x2ec>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	6812      	ldr	r2, [r2, #0]
 800a1ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1bc:	430b      	orrs	r3, r1
 800a1be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4aa4      	ldr	r2, [pc, #656]	@ (800a474 <UART_SetConfig+0x2f0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d004      	beq.n	800a1f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a1fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	6812      	ldr	r2, [r2, #0]
 800a202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a204:	430b      	orrs	r3, r1
 800a206:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a20e:	f023 010f 	bic.w	r1, r3, #15
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	430a      	orrs	r2, r1
 800a21c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a95      	ldr	r2, [pc, #596]	@ (800a478 <UART_SetConfig+0x2f4>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d125      	bne.n	800a274 <UART_SetConfig+0xf0>
 800a228:	2003      	movs	r0, #3
 800a22a:	f7ff fb0d 	bl	8009848 <LL_RCC_GetUSARTClockSource>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b03      	cmp	r3, #3
 800a232:	d81b      	bhi.n	800a26c <UART_SetConfig+0xe8>
 800a234:	a201      	add	r2, pc, #4	@ (adr r2, 800a23c <UART_SetConfig+0xb8>)
 800a236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23a:	bf00      	nop
 800a23c:	0800a24d 	.word	0x0800a24d
 800a240:	0800a25d 	.word	0x0800a25d
 800a244:	0800a255 	.word	0x0800a255
 800a248:	0800a265 	.word	0x0800a265
 800a24c:	2301      	movs	r3, #1
 800a24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a252:	e042      	b.n	800a2da <UART_SetConfig+0x156>
 800a254:	2302      	movs	r3, #2
 800a256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a25a:	e03e      	b.n	800a2da <UART_SetConfig+0x156>
 800a25c:	2304      	movs	r3, #4
 800a25e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a262:	e03a      	b.n	800a2da <UART_SetConfig+0x156>
 800a264:	2308      	movs	r3, #8
 800a266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a26a:	e036      	b.n	800a2da <UART_SetConfig+0x156>
 800a26c:	2310      	movs	r3, #16
 800a26e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a272:	e032      	b.n	800a2da <UART_SetConfig+0x156>
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a7e      	ldr	r2, [pc, #504]	@ (800a474 <UART_SetConfig+0x2f0>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d12a      	bne.n	800a2d4 <UART_SetConfig+0x150>
 800a27e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800a282:	f7ff faf1 	bl	8009868 <LL_RCC_GetLPUARTClockSource>
 800a286:	4603      	mov	r3, r0
 800a288:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a28c:	d01a      	beq.n	800a2c4 <UART_SetConfig+0x140>
 800a28e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a292:	d81b      	bhi.n	800a2cc <UART_SetConfig+0x148>
 800a294:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a298:	d00c      	beq.n	800a2b4 <UART_SetConfig+0x130>
 800a29a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a29e:	d815      	bhi.n	800a2cc <UART_SetConfig+0x148>
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d003      	beq.n	800a2ac <UART_SetConfig+0x128>
 800a2a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2a8:	d008      	beq.n	800a2bc <UART_SetConfig+0x138>
 800a2aa:	e00f      	b.n	800a2cc <UART_SetConfig+0x148>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b2:	e012      	b.n	800a2da <UART_SetConfig+0x156>
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ba:	e00e      	b.n	800a2da <UART_SetConfig+0x156>
 800a2bc:	2304      	movs	r3, #4
 800a2be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2c2:	e00a      	b.n	800a2da <UART_SetConfig+0x156>
 800a2c4:	2308      	movs	r3, #8
 800a2c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ca:	e006      	b.n	800a2da <UART_SetConfig+0x156>
 800a2cc:	2310      	movs	r3, #16
 800a2ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2d2:	e002      	b.n	800a2da <UART_SetConfig+0x156>
 800a2d4:	2310      	movs	r3, #16
 800a2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a65      	ldr	r2, [pc, #404]	@ (800a474 <UART_SetConfig+0x2f0>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	f040 8097 	bne.w	800a414 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2ea:	2b08      	cmp	r3, #8
 800a2ec:	d823      	bhi.n	800a336 <UART_SetConfig+0x1b2>
 800a2ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f4 <UART_SetConfig+0x170>)
 800a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f4:	0800a319 	.word	0x0800a319
 800a2f8:	0800a337 	.word	0x0800a337
 800a2fc:	0800a321 	.word	0x0800a321
 800a300:	0800a337 	.word	0x0800a337
 800a304:	0800a327 	.word	0x0800a327
 800a308:	0800a337 	.word	0x0800a337
 800a30c:	0800a337 	.word	0x0800a337
 800a310:	0800a337 	.word	0x0800a337
 800a314:	0800a32f 	.word	0x0800a32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a318:	f7fd fb80 	bl	8007a1c <HAL_RCC_GetPCLK1Freq>
 800a31c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a31e:	e010      	b.n	800a342 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a320:	4b56      	ldr	r3, [pc, #344]	@ (800a47c <UART_SetConfig+0x2f8>)
 800a322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a324:	e00d      	b.n	800a342 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a326:	f7fd faf9 	bl	800791c <HAL_RCC_GetSysClockFreq>
 800a32a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a32c:	e009      	b.n	800a342 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a334:	e005      	b.n	800a342 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 812b 	beq.w	800a5a0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34e:	4a4c      	ldr	r2, [pc, #304]	@ (800a480 <UART_SetConfig+0x2fc>)
 800a350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a354:	461a      	mov	r2, r3
 800a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a358:	fbb3 f3f2 	udiv	r3, r3, r2
 800a35c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	4613      	mov	r3, r2
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	4413      	add	r3, r2
 800a368:	69ba      	ldr	r2, [r7, #24]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d305      	bcc.n	800a37a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a374:	69ba      	ldr	r2, [r7, #24]
 800a376:	429a      	cmp	r2, r3
 800a378:	d903      	bls.n	800a382 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a380:	e10e      	b.n	800a5a0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a384:	2200      	movs	r2, #0
 800a386:	60bb      	str	r3, [r7, #8]
 800a388:	60fa      	str	r2, [r7, #12]
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38e:	4a3c      	ldr	r2, [pc, #240]	@ (800a480 <UART_SetConfig+0x2fc>)
 800a390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a394:	b29b      	uxth	r3, r3
 800a396:	2200      	movs	r2, #0
 800a398:	603b      	str	r3, [r7, #0]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3a4:	f7f6 fc58 	bl	8000c58 <__aeabi_uldivmod>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	f04f 0200 	mov.w	r2, #0
 800a3b4:	f04f 0300 	mov.w	r3, #0
 800a3b8:	020b      	lsls	r3, r1, #8
 800a3ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a3be:	0202      	lsls	r2, r0, #8
 800a3c0:	6979      	ldr	r1, [r7, #20]
 800a3c2:	6849      	ldr	r1, [r1, #4]
 800a3c4:	0849      	lsrs	r1, r1, #1
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	eb12 0804 	adds.w	r8, r2, r4
 800a3d0:	eb43 0905 	adc.w	r9, r3, r5
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	469a      	mov	sl, r3
 800a3dc:	4693      	mov	fp, r2
 800a3de:	4652      	mov	r2, sl
 800a3e0:	465b      	mov	r3, fp
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	f7f6 fc37 	bl	8000c58 <__aeabi_uldivmod>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3f8:	d308      	bcc.n	800a40c <UART_SetConfig+0x288>
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a400:	d204      	bcs.n	800a40c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6a3a      	ldr	r2, [r7, #32]
 800a408:	60da      	str	r2, [r3, #12]
 800a40a:	e0c9      	b.n	800a5a0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a412:	e0c5      	b.n	800a5a0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a41c:	d16d      	bne.n	800a4fa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800a41e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a422:	3b01      	subs	r3, #1
 800a424:	2b07      	cmp	r3, #7
 800a426:	d82d      	bhi.n	800a484 <UART_SetConfig+0x300>
 800a428:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <UART_SetConfig+0x2ac>)
 800a42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42e:	bf00      	nop
 800a430:	0800a451 	.word	0x0800a451
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a485 	.word	0x0800a485
 800a43c:	0800a45f 	.word	0x0800a45f
 800a440:	0800a485 	.word	0x0800a485
 800a444:	0800a485 	.word	0x0800a485
 800a448:	0800a485 	.word	0x0800a485
 800a44c:	0800a467 	.word	0x0800a467
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a450:	f7fd fafa 	bl	8007a48 <HAL_RCC_GetPCLK2Freq>
 800a454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a456:	e01b      	b.n	800a490 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a458:	4b08      	ldr	r3, [pc, #32]	@ (800a47c <UART_SetConfig+0x2f8>)
 800a45a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a45c:	e018      	b.n	800a490 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a45e:	f7fd fa5d 	bl	800791c <HAL_RCC_GetSysClockFreq>
 800a462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a464:	e014      	b.n	800a490 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a46a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a46c:	e010      	b.n	800a490 <UART_SetConfig+0x30c>
 800a46e:	bf00      	nop
 800a470:	cfff69f3 	.word	0xcfff69f3
 800a474:	40008000 	.word	0x40008000
 800a478:	40013800 	.word	0x40013800
 800a47c:	00f42400 	.word	0x00f42400
 800a480:	08013d14 	.word	0x08013d14
      default:
        pclk = 0U;
 800a484:	2300      	movs	r3, #0
 800a486:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a48e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a492:	2b00      	cmp	r3, #0
 800a494:	f000 8084 	beq.w	800a5a0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49c:	4a4b      	ldr	r2, [pc, #300]	@ (800a5cc <UART_SetConfig+0x448>)
 800a49e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4aa:	005a      	lsls	r2, r3, #1
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	085b      	lsrs	r3, r3, #1
 800a4b2:	441a      	add	r2, r3
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4bc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	2b0f      	cmp	r3, #15
 800a4c2:	d916      	bls.n	800a4f2 <UART_SetConfig+0x36e>
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4ca:	d212      	bcs.n	800a4f2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	f023 030f 	bic.w	r3, r3, #15
 800a4d4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	085b      	lsrs	r3, r3, #1
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	f003 0307 	and.w	r3, r3, #7
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	8bfb      	ldrh	r3, [r7, #30]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	8bfa      	ldrh	r2, [r7, #30]
 800a4ee:	60da      	str	r2, [r3, #12]
 800a4f0:	e056      	b.n	800a5a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4f8:	e052      	b.n	800a5a0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a4fe:	3b01      	subs	r3, #1
 800a500:	2b07      	cmp	r3, #7
 800a502:	d822      	bhi.n	800a54a <UART_SetConfig+0x3c6>
 800a504:	a201      	add	r2, pc, #4	@ (adr r2, 800a50c <UART_SetConfig+0x388>)
 800a506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50a:	bf00      	nop
 800a50c:	0800a52d 	.word	0x0800a52d
 800a510:	0800a535 	.word	0x0800a535
 800a514:	0800a54b 	.word	0x0800a54b
 800a518:	0800a53b 	.word	0x0800a53b
 800a51c:	0800a54b 	.word	0x0800a54b
 800a520:	0800a54b 	.word	0x0800a54b
 800a524:	0800a54b 	.word	0x0800a54b
 800a528:	0800a543 	.word	0x0800a543
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a52c:	f7fd fa8c 	bl	8007a48 <HAL_RCC_GetPCLK2Freq>
 800a530:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a532:	e010      	b.n	800a556 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a534:	4b26      	ldr	r3, [pc, #152]	@ (800a5d0 <UART_SetConfig+0x44c>)
 800a536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a538:	e00d      	b.n	800a556 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a53a:	f7fd f9ef 	bl	800791c <HAL_RCC_GetSysClockFreq>
 800a53e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a540:	e009      	b.n	800a556 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a548:	e005      	b.n	800a556 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800a54a:	2300      	movs	r3, #0
 800a54c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a554:	bf00      	nop
    }

    if (pclk != 0U)
 800a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d021      	beq.n	800a5a0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a560:	4a1a      	ldr	r2, [pc, #104]	@ (800a5cc <UART_SetConfig+0x448>)
 800a562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a566:	461a      	mov	r2, r3
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	085b      	lsrs	r3, r3, #1
 800a574:	441a      	add	r2, r3
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a57e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	2b0f      	cmp	r3, #15
 800a584:	d909      	bls.n	800a59a <UART_SetConfig+0x416>
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a58c:	d205      	bcs.n	800a59a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	b29a      	uxth	r2, r3
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	60da      	str	r2, [r3, #12]
 800a598:	e002      	b.n	800a5a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a5bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3730      	adds	r7, #48	@ 0x30
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5ca:	bf00      	nop
 800a5cc:	08013d14 	.word	0x08013d14
 800a5d0:	00f42400 	.word	0x00f42400

0800a5d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e0:	f003 0308 	and.w	r3, r3, #8
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00a      	beq.n	800a5fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	430a      	orrs	r2, r1
 800a61e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00a      	beq.n	800a642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	430a      	orrs	r2, r1
 800a640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00a      	beq.n	800a664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	430a      	orrs	r2, r1
 800a662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a668:	f003 0310 	and.w	r3, r3, #16
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00a      	beq.n	800a686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68a:	f003 0320 	and.w	r3, r3, #32
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00a      	beq.n	800a6a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d01a      	beq.n	800a6ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6d2:	d10a      	bne.n	800a6ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	605a      	str	r2, [r3, #4]
  }
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b098      	sub	sp, #96	@ 0x60
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a728:	f7fa f8a2 	bl	8004870 <HAL_GetTick>
 800a72c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 0308 	and.w	r3, r3, #8
 800a738:	2b08      	cmp	r3, #8
 800a73a:	d12f      	bne.n	800a79c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a73c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a744:	2200      	movs	r2, #0
 800a746:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f88e 	bl	800a86c <UART_WaitOnFlagUntilTimeout>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d022      	beq.n	800a79c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75e:	e853 3f00 	ldrex	r3, [r3]
 800a762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a76a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	461a      	mov	r2, r3
 800a772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a774:	647b      	str	r3, [r7, #68]	@ 0x44
 800a776:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a77a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a77c:	e841 2300 	strex	r3, r2, [r1]
 800a780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1e6      	bne.n	800a756 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e063      	b.n	800a864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0304 	and.w	r3, r3, #4
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	d149      	bne.n	800a83e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f857 	bl	800a86c <UART_WaitOnFlagUntilTimeout>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d03c      	beq.n	800a83e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	e853 3f00 	ldrex	r3, [r3]
 800a7d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ea:	e841 2300 	strex	r3, r2, [r1]
 800a7ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1e6      	bne.n	800a7c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	60fb      	str	r3, [r7, #12]
   return(result);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f023 0301 	bic.w	r3, r3, #1
 800a80c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3308      	adds	r3, #8
 800a814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a816:	61fa      	str	r2, [r7, #28]
 800a818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	69b9      	ldr	r1, [r7, #24]
 800a81c:	69fa      	ldr	r2, [r7, #28]
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	617b      	str	r3, [r7, #20]
   return(result);
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e5      	bne.n	800a7f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e012      	b.n	800a864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3758      	adds	r7, #88	@ 0x58
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	603b      	str	r3, [r7, #0]
 800a878:	4613      	mov	r3, r2
 800a87a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a87c:	e04f      	b.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a884:	d04b      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a886:	f7f9 fff3 	bl	8004870 <HAL_GetTick>
 800a88a:	4602      	mov	r2, r0
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	429a      	cmp	r2, r3
 800a894:	d302      	bcc.n	800a89c <UART_WaitOnFlagUntilTimeout+0x30>
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e04e      	b.n	800a93e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0304 	and.w	r3, r3, #4
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d037      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2b80      	cmp	r3, #128	@ 0x80
 800a8b2:	d034      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b40      	cmp	r3, #64	@ 0x40
 800a8b8:	d031      	beq.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	f003 0308 	and.w	r3, r3, #8
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d110      	bne.n	800a8ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2208      	movs	r2, #8
 800a8ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f99c 	bl	800ac0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2208      	movs	r2, #8
 800a8da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e029      	b.n	800a93e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8f8:	d111      	bne.n	800a91e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f000 f982 	bl	800ac0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e00f      	b.n	800a93e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	69da      	ldr	r2, [r3, #28]
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	4013      	ands	r3, r2
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	bf0c      	ite	eq
 800a92e:	2301      	moveq	r3, #1
 800a930:	2300      	movne	r3, #0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d0a0      	beq.n	800a87e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
	...

0800a948 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a948:	b480      	push	{r7}
 800a94a:	b0a3      	sub	sp, #140	@ 0x8c
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	4613      	mov	r3, r2
 800a954:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	88fa      	ldrh	r2, [r7, #6]
 800a960:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	88fa      	ldrh	r2, [r7, #6]
 800a968:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a97a:	d10e      	bne.n	800a99a <UART_Start_Receive_IT+0x52>
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d105      	bne.n	800a990 <UART_Start_Receive_IT+0x48>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a98a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a98e:	e02d      	b.n	800a9ec <UART_Start_Receive_IT+0xa4>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	22ff      	movs	r2, #255	@ 0xff
 800a994:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a998:	e028      	b.n	800a9ec <UART_Start_Receive_IT+0xa4>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10d      	bne.n	800a9be <UART_Start_Receive_IT+0x76>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d104      	bne.n	800a9b4 <UART_Start_Receive_IT+0x6c>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	22ff      	movs	r2, #255	@ 0xff
 800a9ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a9b2:	e01b      	b.n	800a9ec <UART_Start_Receive_IT+0xa4>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	227f      	movs	r2, #127	@ 0x7f
 800a9b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a9bc:	e016      	b.n	800a9ec <UART_Start_Receive_IT+0xa4>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9c6:	d10d      	bne.n	800a9e4 <UART_Start_Receive_IT+0x9c>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d104      	bne.n	800a9da <UART_Start_Receive_IT+0x92>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	227f      	movs	r2, #127	@ 0x7f
 800a9d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a9d8:	e008      	b.n	800a9ec <UART_Start_Receive_IT+0xa4>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	223f      	movs	r2, #63	@ 0x3f
 800a9de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a9e2:	e003      	b.n	800a9ec <UART_Start_Receive_IT+0xa4>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2222      	movs	r2, #34	@ 0x22
 800a9f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3308      	adds	r3, #8
 800aa02:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa06:	e853 3f00 	ldrex	r3, [r3]
 800aa0a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800aa0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa0e:	f043 0301 	orr.w	r3, r3, #1
 800aa12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800aa20:	673a      	str	r2, [r7, #112]	@ 0x70
 800aa22:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa24:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800aa26:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aa28:	e841 2300 	strex	r3, r2, [r1]
 800aa2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800aa2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1e3      	bne.n	800a9fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa3c:	d14f      	bne.n	800aade <UART_Start_Receive_IT+0x196>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aa44:	88fa      	ldrh	r2, [r7, #6]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d349      	bcc.n	800aade <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa52:	d107      	bne.n	800aa64 <UART_Start_Receive_IT+0x11c>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d103      	bne.n	800aa64 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4a47      	ldr	r2, [pc, #284]	@ (800ab7c <UART_Start_Receive_IT+0x234>)
 800aa60:	675a      	str	r2, [r3, #116]	@ 0x74
 800aa62:	e002      	b.n	800aa6a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4a46      	ldr	r2, [pc, #280]	@ (800ab80 <UART_Start_Receive_IT+0x238>)
 800aa68:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d01a      	beq.n	800aaa8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa7a:	e853 3f00 	ldrex	r3, [r3]
 800aa7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aa94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa96:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800aa9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aa9c:	e841 2300 	strex	r3, r2, [r1]
 800aaa0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800aaa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e4      	bne.n	800aa72 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3308      	adds	r3, #8
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab2:	e853 3f00 	ldrex	r3, [r3]
 800aab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aabe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3308      	adds	r3, #8
 800aac6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aac8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800aaca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aad0:	e841 2300 	strex	r3, r2, [r1]
 800aad4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800aad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e5      	bne.n	800aaa8 <UART_Start_Receive_IT+0x160>
 800aadc:	e046      	b.n	800ab6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aae6:	d107      	bne.n	800aaf8 <UART_Start_Receive_IT+0x1b0>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d103      	bne.n	800aaf8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4a24      	ldr	r2, [pc, #144]	@ (800ab84 <UART_Start_Receive_IT+0x23c>)
 800aaf4:	675a      	str	r2, [r3, #116]	@ 0x74
 800aaf6:	e002      	b.n	800aafe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4a23      	ldr	r2, [pc, #140]	@ (800ab88 <UART_Start_Receive_IT+0x240>)
 800aafc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d019      	beq.n	800ab3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ab1a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab26:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ab32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e6      	bne.n	800ab06 <UART_Start_Receive_IT+0x1be>
 800ab38:	e018      	b.n	800ab6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	e853 3f00 	ldrex	r3, [r3]
 800ab46:	613b      	str	r3, [r7, #16]
   return(result);
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	f043 0320 	orr.w	r3, r3, #32
 800ab4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	461a      	mov	r2, r3
 800ab56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab58:	623b      	str	r3, [r7, #32]
 800ab5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5c:	69f9      	ldr	r1, [r7, #28]
 800ab5e:	6a3a      	ldr	r2, [r7, #32]
 800ab60:	e841 2300 	strex	r3, r2, [r1]
 800ab64:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1e6      	bne.n	800ab3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	378c      	adds	r7, #140	@ 0x8c
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	0800b569 	.word	0x0800b569
 800ab80:	0800b205 	.word	0x0800b205
 800ab84:	0800b04d 	.word	0x0800b04d
 800ab88:	0800ae95 	.word	0x0800ae95

0800ab8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b08f      	sub	sp, #60	@ 0x3c
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	e853 3f00 	ldrex	r3, [r3]
 800aba0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aba8:	637b      	str	r3, [r7, #52]	@ 0x34
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	461a      	mov	r2, r3
 800abb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800abb4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abba:	e841 2300 	strex	r3, r2, [r1]
 800abbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1e6      	bne.n	800ab94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3308      	adds	r3, #8
 800abcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	e853 3f00 	ldrex	r3, [r3]
 800abd4:	60bb      	str	r3, [r7, #8]
   return(result);
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800abdc:	633b      	str	r3, [r7, #48]	@ 0x30
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3308      	adds	r3, #8
 800abe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abe6:	61ba      	str	r2, [r7, #24]
 800abe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abea:	6979      	ldr	r1, [r7, #20]
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	e841 2300 	strex	r3, r2, [r1]
 800abf2:	613b      	str	r3, [r7, #16]
   return(result);
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1e5      	bne.n	800abc6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2220      	movs	r2, #32
 800abfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ac02:	bf00      	nop
 800ac04:	373c      	adds	r7, #60	@ 0x3c
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b095      	sub	sp, #84	@ 0x54
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	461a      	mov	r2, r3
 800ac32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac34:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e6      	bne.n	800ac16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	e853 3f00 	ldrex	r3, [r3]
 800ac56:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac5e:	f023 0301 	bic.w	r3, r3, #1
 800ac62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3308      	adds	r3, #8
 800ac6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac74:	e841 2300 	strex	r3, r2, [r1]
 800ac78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1e3      	bne.n	800ac48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d118      	bne.n	800acba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	e853 3f00 	ldrex	r3, [r3]
 800ac94:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	f023 0310 	bic.w	r3, r3, #16
 800ac9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aca6:	61bb      	str	r3, [r7, #24]
 800aca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acaa:	6979      	ldr	r1, [r7, #20]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	e841 2300 	strex	r3, r2, [r1]
 800acb2:	613b      	str	r3, [r7, #16]
   return(result);
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1e6      	bne.n	800ac88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2220      	movs	r2, #32
 800acbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800acce:	bf00      	nop
 800acd0:	3754      	adds	r7, #84	@ 0x54
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b090      	sub	sp, #64	@ 0x40
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0320 	and.w	r3, r3, #32
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d137      	bne.n	800ad66 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800acf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf8:	2200      	movs	r2, #0
 800acfa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad08:	e853 3f00 	ldrex	r3, [r3]
 800ad0c:	623b      	str	r3, [r7, #32]
   return(result);
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad14:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad1e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad26:	e841 2300 	strex	r3, r2, [r1]
 800ad2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e5      	bne.n	800acfe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	e853 3f00 	ldrex	r3, [r3]
 800ad3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad50:	61fb      	str	r3, [r7, #28]
 800ad52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad54:	69b9      	ldr	r1, [r7, #24]
 800ad56:	69fa      	ldr	r2, [r7, #28]
 800ad58:	e841 2300 	strex	r3, r2, [r1]
 800ad5c:	617b      	str	r3, [r7, #20]
   return(result);
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1e6      	bne.n	800ad32 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad64:	e002      	b.n	800ad6c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ad66:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ad68:	f7f8 fd42 	bl	80037f0 <HAL_UART_TxCpltCallback>
}
 800ad6c:	bf00      	nop
 800ad6e:	3740      	adds	r7, #64	@ 0x40
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad80:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f7ff f9de 	bl	800a144 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad88:	bf00      	nop
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ada4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adb8:	2b80      	cmp	r3, #128	@ 0x80
 800adba:	d109      	bne.n	800add0 <UART_DMAError+0x40>
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	2b21      	cmp	r3, #33	@ 0x21
 800adc0:	d106      	bne.n	800add0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800adca:	6978      	ldr	r0, [r7, #20]
 800adcc:	f7ff fede 	bl	800ab8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adda:	2b40      	cmp	r3, #64	@ 0x40
 800addc:	d109      	bne.n	800adf2 <UART_DMAError+0x62>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b22      	cmp	r3, #34	@ 0x22
 800ade2:	d106      	bne.n	800adf2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800adec:	6978      	ldr	r0, [r7, #20]
 800adee:	f7ff ff0e 	bl	800ac0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adf8:	f043 0210 	orr.w	r2, r3, #16
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae02:	6978      	ldr	r0, [r7, #20]
 800ae04:	f7ff f9a8 	bl	800a158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae08:	bf00      	nop
 800ae0a:	3718      	adds	r7, #24
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7ff f992 	bl	800a158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae34:	bf00      	nop
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	e853 3f00 	ldrex	r3, [r3]
 800ae50:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae58:	61fb      	str	r3, [r7, #28]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	61bb      	str	r3, [r7, #24]
 800ae64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	6979      	ldr	r1, [r7, #20]
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	e841 2300 	strex	r3, r2, [r1]
 800ae6e:	613b      	str	r3, [r7, #16]
   return(result);
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1e6      	bne.n	800ae44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2220      	movs	r2, #32
 800ae7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7f8 fcb3 	bl	80037f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae8a:	bf00      	nop
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b09c      	sub	sp, #112	@ 0x70
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aea2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aeac:	2b22      	cmp	r3, #34	@ 0x22
 800aeae:	f040 80be 	bne.w	800b02e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aebc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aec0:	b2d9      	uxtb	r1, r3
 800aec2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aecc:	400a      	ands	r2, r1
 800aece:	b2d2      	uxtb	r2, r2
 800aed0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aed6:	1c5a      	adds	r2, r3, #1
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	3b01      	subs	r3, #1
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f040 80a1 	bne.w	800b03e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af04:	e853 3f00 	ldrex	r3, [r3]
 800af08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af10:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af22:	e841 2300 	strex	r3, r2, [r1]
 800af26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1e6      	bne.n	800aefc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	3308      	adds	r3, #8
 800af34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af38:	e853 3f00 	ldrex	r3, [r3]
 800af3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af40:	f023 0301 	bic.w	r3, r3, #1
 800af44:	667b      	str	r3, [r7, #100]	@ 0x64
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3308      	adds	r3, #8
 800af4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800af4e:	647a      	str	r2, [r7, #68]	@ 0x44
 800af50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e5      	bne.n	800af2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2220      	movs	r2, #32
 800af66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a33      	ldr	r2, [pc, #204]	@ (800b048 <UART_RxISR_8BIT+0x1b4>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d01f      	beq.n	800afc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d018      	beq.n	800afc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af96:	e853 3f00 	ldrex	r3, [r3]
 800af9a:	623b      	str	r3, [r7, #32]
   return(result);
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800afa2:	663b      	str	r3, [r7, #96]	@ 0x60
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	461a      	mov	r2, r3
 800afaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afac:	633b      	str	r3, [r7, #48]	@ 0x30
 800afae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1e6      	bne.n	800af8e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d12e      	bne.n	800b026 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	e853 3f00 	ldrex	r3, [r3]
 800afda:	60fb      	str	r3, [r7, #12]
   return(result);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f023 0310 	bic.w	r3, r3, #16
 800afe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
 800afea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afec:	61fb      	str	r3, [r7, #28]
 800afee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff0:	69b9      	ldr	r1, [r7, #24]
 800aff2:	69fa      	ldr	r2, [r7, #28]
 800aff4:	e841 2300 	strex	r3, r2, [r1]
 800aff8:	617b      	str	r3, [r7, #20]
   return(result);
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e6      	bne.n	800afce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	69db      	ldr	r3, [r3, #28]
 800b006:	f003 0310 	and.w	r3, r3, #16
 800b00a:	2b10      	cmp	r3, #16
 800b00c:	d103      	bne.n	800b016 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2210      	movs	r2, #16
 800b014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff f8a4 	bl	800a16c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b024:	e00b      	b.n	800b03e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7f8 fbc4 	bl	80037b4 <HAL_UART_RxCpltCallback>
}
 800b02c:	e007      	b.n	800b03e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	699a      	ldr	r2, [r3, #24]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f042 0208 	orr.w	r2, r2, #8
 800b03c:	619a      	str	r2, [r3, #24]
}
 800b03e:	bf00      	nop
 800b040:	3770      	adds	r7, #112	@ 0x70
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	40008000 	.word	0x40008000

0800b04c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b09c      	sub	sp, #112	@ 0x70
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b05a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b064:	2b22      	cmp	r3, #34	@ 0x22
 800b066:	f040 80be 	bne.w	800b1e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b070:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b078:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b07a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b07e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b082:	4013      	ands	r3, r2
 800b084:	b29a      	uxth	r2, r3
 800b086:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b088:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b08e:	1c9a      	adds	r2, r3, #2
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f040 80a1 	bne.w	800b1f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b0c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0c8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b0d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b0d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b0e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e6      	bne.n	800b0b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	f023 0301 	bic.w	r3, r3, #1
 800b0fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3308      	adds	r3, #8
 800b104:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b106:	643a      	str	r2, [r7, #64]	@ 0x40
 800b108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b10c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b10e:	e841 2300 	strex	r3, r2, [r1]
 800b112:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1e5      	bne.n	800b0e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2220      	movs	r2, #32
 800b11e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a33      	ldr	r2, [pc, #204]	@ (800b200 <UART_RxISR_16BIT+0x1b4>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d01f      	beq.n	800b178 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d018      	beq.n	800b178 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	e853 3f00 	ldrex	r3, [r3]
 800b152:	61fb      	str	r3, [r7, #28]
   return(result);
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b15a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	461a      	mov	r2, r3
 800b162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b166:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b16a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b16c:	e841 2300 	strex	r3, r2, [r1]
 800b170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e6      	bne.n	800b146 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d12e      	bne.n	800b1de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	e853 3f00 	ldrex	r3, [r3]
 800b192:	60bb      	str	r3, [r7, #8]
   return(result);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f023 0310 	bic.w	r3, r3, #16
 800b19a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1a4:	61bb      	str	r3, [r7, #24]
 800b1a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a8:	6979      	ldr	r1, [r7, #20]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	e841 2300 	strex	r3, r2, [r1]
 800b1b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1e6      	bne.n	800b186 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	69db      	ldr	r3, [r3, #28]
 800b1be:	f003 0310 	and.w	r3, r3, #16
 800b1c2:	2b10      	cmp	r3, #16
 800b1c4:	d103      	bne.n	800b1ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2210      	movs	r2, #16
 800b1cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7fe ffc8 	bl	800a16c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1dc:	e00b      	b.n	800b1f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7f8 fae8 	bl	80037b4 <HAL_UART_RxCpltCallback>
}
 800b1e4:	e007      	b.n	800b1f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	699a      	ldr	r2, [r3, #24]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f042 0208 	orr.w	r2, r2, #8
 800b1f4:	619a      	str	r2, [r3, #24]
}
 800b1f6:	bf00      	nop
 800b1f8:	3770      	adds	r7, #112	@ 0x70
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	40008000 	.word	0x40008000

0800b204 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b0ac      	sub	sp, #176	@ 0xb0
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b212:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b23a:	2b22      	cmp	r3, #34	@ 0x22
 800b23c:	f040 8183 	bne.w	800b546 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b246:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b24a:	e126      	b.n	800b49a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b252:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b256:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b25a:	b2d9      	uxtb	r1, r3
 800b25c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b260:	b2da      	uxtb	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b266:	400a      	ands	r2, r1
 800b268:	b2d2      	uxtb	r2, r2
 800b26a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	3b01      	subs	r3, #1
 800b280:	b29a      	uxth	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d053      	beq.n	800b346 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b29e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2a2:	f003 0301 	and.w	r3, r3, #1
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d011      	beq.n	800b2ce <UART_RxISR_8BIT_FIFOEN+0xca>
 800b2aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b2ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00b      	beq.n	800b2ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2c4:	f043 0201 	orr.w	r2, r3, #1
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2d2:	f003 0302 	and.w	r3, r3, #2
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d011      	beq.n	800b2fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b2da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00b      	beq.n	800b2fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2f4:	f043 0204 	orr.w	r2, r3, #4
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b302:	f003 0304 	and.w	r3, r3, #4
 800b306:	2b00      	cmp	r3, #0
 800b308:	d011      	beq.n	800b32e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b30a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00b      	beq.n	800b32e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2204      	movs	r2, #4
 800b31c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b324:	f043 0202 	orr.w	r2, r3, #2
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b334:	2b00      	cmp	r3, #0
 800b336:	d006      	beq.n	800b346 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7fe ff0d 	bl	800a158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f040 80a3 	bne.w	800b49a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	461a      	mov	r2, r3
 800b372:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b376:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b378:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b37c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b37e:	e841 2300 	strex	r3, r2, [r1]
 800b382:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1e4      	bne.n	800b354 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3308      	adds	r3, #8
 800b390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b39a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b39c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3a0:	f023 0301 	bic.w	r3, r3, #1
 800b3a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b3b2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b3b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b3b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b3ba:	e841 2300 	strex	r3, r2, [r1]
 800b3be:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b3c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1e1      	bne.n	800b38a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2220      	movs	r2, #32
 800b3ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a60      	ldr	r2, [pc, #384]	@ (800b560 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d021      	beq.n	800b428 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d01a      	beq.n	800b428 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3fa:	e853 3f00 	ldrex	r3, [r3]
 800b3fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b406:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	461a      	mov	r2, r3
 800b410:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b414:	657b      	str	r3, [r7, #84]	@ 0x54
 800b416:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b418:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b41a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b41c:	e841 2300 	strex	r3, r2, [r1]
 800b420:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e4      	bne.n	800b3f2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d130      	bne.n	800b492 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b43e:	e853 3f00 	ldrex	r3, [r3]
 800b442:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b446:	f023 0310 	bic.w	r3, r3, #16
 800b44a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b458:	643b      	str	r3, [r7, #64]	@ 0x40
 800b45a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b45e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b460:	e841 2300 	strex	r3, r2, [r1]
 800b464:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1e4      	bne.n	800b436 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	69db      	ldr	r3, [r3, #28]
 800b472:	f003 0310 	and.w	r3, r3, #16
 800b476:	2b10      	cmp	r3, #16
 800b478:	d103      	bne.n	800b482 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2210      	movs	r2, #16
 800b480:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b488:	4619      	mov	r1, r3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7fe fe6e 	bl	800a16c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b490:	e00e      	b.n	800b4b0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7f8 f98e 	bl	80037b4 <HAL_UART_RxCpltCallback>
        break;
 800b498:	e00a      	b.n	800b4b0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b49a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d006      	beq.n	800b4b0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800b4a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4a6:	f003 0320 	and.w	r3, r3, #32
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f47f aece 	bne.w	800b24c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4b6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b4ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d049      	beq.n	800b556 <UART_RxISR_8BIT_FIFOEN+0x352>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b4c8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d242      	bcs.n	800b556 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	e853 3f00 	ldrex	r3, [r3]
 800b4de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b4f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4fc:	e841 2300 	strex	r3, r2, [r1]
 800b500:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e3      	bne.n	800b4d0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a16      	ldr	r2, [pc, #88]	@ (800b564 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b50c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	e853 3f00 	ldrex	r3, [r3]
 800b51a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	f043 0320 	orr.w	r3, r3, #32
 800b522:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b530:	61bb      	str	r3, [r7, #24]
 800b532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b534:	6979      	ldr	r1, [r7, #20]
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	e841 2300 	strex	r3, r2, [r1]
 800b53c:	613b      	str	r3, [r7, #16]
   return(result);
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1e4      	bne.n	800b50e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b544:	e007      	b.n	800b556 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	699a      	ldr	r2, [r3, #24]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f042 0208 	orr.w	r2, r2, #8
 800b554:	619a      	str	r2, [r3, #24]
}
 800b556:	bf00      	nop
 800b558:	37b0      	adds	r7, #176	@ 0xb0
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	40008000 	.word	0x40008000
 800b564:	0800ae95 	.word	0x0800ae95

0800b568 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b0ae      	sub	sp, #184	@ 0xb8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b576:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	69db      	ldr	r3, [r3, #28]
 800b580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b59e:	2b22      	cmp	r3, #34	@ 0x22
 800b5a0:	f040 8187 	bne.w	800b8b2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b5aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5ae:	e12a      	b.n	800b806 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b5c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b5c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5d8:	1c9a      	adds	r2, r3, #2
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b5fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5fe:	f003 0307 	and.w	r3, r3, #7
 800b602:	2b00      	cmp	r3, #0
 800b604:	d053      	beq.n	800b6ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d011      	beq.n	800b636 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00b      	beq.n	800b636 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2201      	movs	r2, #1
 800b624:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b62c:	f043 0201 	orr.w	r2, r3, #1
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d011      	beq.n	800b666 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2202      	movs	r2, #2
 800b654:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b65c:	f043 0204 	orr.w	r2, r3, #4
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b66a:	f003 0304 	and.w	r3, r3, #4
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d011      	beq.n	800b696 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00b      	beq.n	800b696 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2204      	movs	r2, #4
 800b684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b68c:	f043 0202 	orr.w	r2, r3, #2
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d006      	beq.n	800b6ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7fe fd59 	bl	800a158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f040 80a5 	bne.w	800b806 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6c4:	e853 3f00 	ldrex	r3, [r3]
 800b6c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b6ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b6de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b6e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b6ea:	e841 2300 	strex	r3, r2, [r1]
 800b6ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b6f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1e2      	bne.n	800b6bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b700:	e853 3f00 	ldrex	r3, [r3]
 800b704:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b70c:	f023 0301 	bic.w	r3, r3, #1
 800b710:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3308      	adds	r3, #8
 800b71a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b71e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b720:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b724:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b72c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e1      	bne.n	800b6f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2220      	movs	r2, #32
 800b736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a60      	ldr	r2, [pc, #384]	@ (800b8cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d021      	beq.n	800b794 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d01a      	beq.n	800b794 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b766:	e853 3f00 	ldrex	r3, [r3]
 800b76a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b76c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b76e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b772:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b780:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b782:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b784:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b786:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b788:	e841 2300 	strex	r3, r2, [r1]
 800b78c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b78e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1e4      	bne.n	800b75e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d130      	bne.n	800b7fe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7aa:	e853 3f00 	ldrex	r3, [r3]
 800b7ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b2:	f023 0310 	bic.w	r3, r3, #16
 800b7b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b7c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7cc:	e841 2300 	strex	r3, r2, [r1]
 800b7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1e4      	bne.n	800b7a2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	f003 0310 	and.w	r3, r3, #16
 800b7e2:	2b10      	cmp	r3, #16
 800b7e4:	d103      	bne.n	800b7ee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2210      	movs	r2, #16
 800b7ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7fe fcb8 	bl	800a16c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b7fc:	e00e      	b.n	800b81c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7f7 ffd8 	bl	80037b4 <HAL_UART_RxCpltCallback>
        break;
 800b804:	e00a      	b.n	800b81c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b806:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d006      	beq.n	800b81c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b80e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b812:	f003 0320 	and.w	r3, r3, #32
 800b816:	2b00      	cmp	r3, #0
 800b818:	f47f aeca 	bne.w	800b5b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b822:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b826:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d049      	beq.n	800b8c2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b834:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b838:	429a      	cmp	r2, r3
 800b83a:	d242      	bcs.n	800b8c2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3308      	adds	r3, #8
 800b842:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b846:	e853 3f00 	ldrex	r3, [r3]
 800b84a:	623b      	str	r3, [r7, #32]
   return(result);
 800b84c:	6a3b      	ldr	r3, [r7, #32]
 800b84e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b852:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3308      	adds	r3, #8
 800b85c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b860:	633a      	str	r2, [r7, #48]	@ 0x30
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b864:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b868:	e841 2300 	strex	r3, r2, [r1]
 800b86c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e3      	bne.n	800b83c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4a16      	ldr	r2, [pc, #88]	@ (800b8d0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b878:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	e853 3f00 	ldrex	r3, [r3]
 800b886:	60fb      	str	r3, [r7, #12]
   return(result);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f043 0320 	orr.w	r3, r3, #32
 800b88e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b89c:	61fb      	str	r3, [r7, #28]
 800b89e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a0:	69b9      	ldr	r1, [r7, #24]
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	e841 2300 	strex	r3, r2, [r1]
 800b8a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1e4      	bne.n	800b87a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8b0:	e007      	b.n	800b8c2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	699a      	ldr	r2, [r3, #24]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f042 0208 	orr.w	r2, r2, #8
 800b8c0:	619a      	str	r2, [r3, #24]
}
 800b8c2:	bf00      	nop
 800b8c4:	37b8      	adds	r7, #184	@ 0xb8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	40008000 	.word	0x40008000
 800b8d0:	0800b04d 	.word	0x0800b04d

0800b8d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d101      	bne.n	800b926 <HAL_UARTEx_DisableFifoMode+0x16>
 800b922:	2302      	movs	r3, #2
 800b924:	e027      	b.n	800b976 <HAL_UARTEx_DisableFifoMode+0x66>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2224      	movs	r2, #36	@ 0x24
 800b932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f022 0201 	bic.w	r2, r2, #1
 800b94c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b954:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2220      	movs	r2, #32
 800b968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b084      	sub	sp, #16
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b992:	2b01      	cmp	r3, #1
 800b994:	d101      	bne.n	800b99a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b996:	2302      	movs	r3, #2
 800b998:	e02d      	b.n	800b9f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2224      	movs	r2, #36	@ 0x24
 800b9a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f022 0201 	bic.w	r2, r2, #1
 800b9c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	430a      	orrs	r2, r1
 800b9d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f850 	bl	800ba7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b084      	sub	sp, #16
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d101      	bne.n	800ba16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba12:	2302      	movs	r3, #2
 800ba14:	e02d      	b.n	800ba72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2224      	movs	r2, #36	@ 0x24
 800ba22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f022 0201 	bic.w	r2, r2, #1
 800ba3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f812 	bl	800ba7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2220      	movs	r2, #32
 800ba64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
	...

0800ba7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d108      	bne.n	800ba9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba9c:	e031      	b.n	800bb02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba9e:	2308      	movs	r3, #8
 800baa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800baa2:	2308      	movs	r3, #8
 800baa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	0e5b      	lsrs	r3, r3, #25
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	f003 0307 	and.w	r3, r3, #7
 800bab4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	0f5b      	lsrs	r3, r3, #29
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	f003 0307 	and.w	r3, r3, #7
 800bac4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bac6:	7bbb      	ldrb	r3, [r7, #14]
 800bac8:	7b3a      	ldrb	r2, [r7, #12]
 800baca:	4911      	ldr	r1, [pc, #68]	@ (800bb10 <UARTEx_SetNbDataToProcess+0x94>)
 800bacc:	5c8a      	ldrb	r2, [r1, r2]
 800bace:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bad2:	7b3a      	ldrb	r2, [r7, #12]
 800bad4:	490f      	ldr	r1, [pc, #60]	@ (800bb14 <UARTEx_SetNbDataToProcess+0x98>)
 800bad6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bad8:	fb93 f3f2 	sdiv	r3, r3, r2
 800badc:	b29a      	uxth	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
 800bae6:	7b7a      	ldrb	r2, [r7, #13]
 800bae8:	4909      	ldr	r1, [pc, #36]	@ (800bb10 <UARTEx_SetNbDataToProcess+0x94>)
 800baea:	5c8a      	ldrb	r2, [r1, r2]
 800baec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800baf0:	7b7a      	ldrb	r2, [r7, #13]
 800baf2:	4908      	ldr	r1, [pc, #32]	@ (800bb14 <UARTEx_SetNbDataToProcess+0x98>)
 800baf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800baf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb02:	bf00      	nop
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	08013d2c 	.word	0x08013d2c
 800bb14:	08013d34 	.word	0x08013d34

0800bb18 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bb22:	f107 0308 	add.w	r3, r7, #8
 800bb26:	2218      	movs	r2, #24
 800bb28:	2100      	movs	r1, #0
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f001 f92d 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800bb30:	233f      	movs	r3, #63	@ 0x3f
 800bb32:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800bb34:	2381      	movs	r3, #129	@ 0x81
 800bb36:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bb38:	1dfb      	adds	r3, r7, #7
 800bb3a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bb40:	f107 0308 	add.w	r3, r7, #8
 800bb44:	2100      	movs	r1, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f001 fba8 	bl	800d29c <hci_send_req>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	da01      	bge.n	800bb56 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800bb52:	23ff      	movs	r3, #255	@ 0xff
 800bb54:	e000      	b.n	800bb58 <aci_gap_set_non_discoverable+0x40>
  return status;
 800bb56:	79fb      	ldrb	r3, [r7, #7]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3720      	adds	r7, #32
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800bb60:	b5b0      	push	{r4, r5, r7, lr}
 800bb62:	b0ce      	sub	sp, #312	@ 0x138
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	4605      	mov	r5, r0
 800bb68:	460c      	mov	r4, r1
 800bb6a:	4610      	mov	r0, r2
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb72:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800bb76:	462a      	mov	r2, r5
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb7e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bb82:	4622      	mov	r2, r4
 800bb84:	801a      	strh	r2, [r3, #0]
 800bb86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb8a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800bb8e:	4602      	mov	r2, r0
 800bb90:	801a      	strh	r2, [r3, #0]
 800bb92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb96:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800bb9a:	460a      	mov	r2, r1
 800bb9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800bb9e:	f107 0310 	add.w	r3, r7, #16
 800bba2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800bba6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800bbaa:	3308      	adds	r3, #8
 800bbac:	f107 0210 	add.w	r2, r7, #16
 800bbb0:	4413      	add	r3, r2
 800bbb2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800bbb6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800bbba:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800bbbe:	4413      	add	r3, r2
 800bbc0:	3309      	adds	r3, #9
 800bbc2:	f107 0210 	add.w	r2, r7, #16
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800bbcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bbd0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800bbde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800bbe2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800bbe6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800bbea:	7812      	ldrb	r2, [r2, #0]
 800bbec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bbee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800bbf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800bbfc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800bc00:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800bc04:	8812      	ldrh	r2, [r2, #0]
 800bc06:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800bc0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bc0e:	3302      	adds	r3, #2
 800bc10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800bc14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800bc18:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800bc1c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800bc20:	8812      	ldrh	r2, [r2, #0]
 800bc22:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800bc26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bc2a:	3302      	adds	r3, #2
 800bc2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800bc30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800bc34:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800bc38:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800bc3c:	7812      	ldrb	r2, [r2, #0]
 800bc3e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bc40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bc44:	3301      	adds	r3, #1
 800bc46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800bc4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800bc4e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800bc52:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800bc54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bc58:	3301      	adds	r3, #1
 800bc5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800bc5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800bc62:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800bc66:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800bc68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800bc72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800bc76:	3308      	adds	r3, #8
 800bc78:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800bc7c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800bc80:	4618      	mov	r0, r3
 800bc82:	f001 f872 	bl	800cd6a <Osal_MemCpy>
    index_input += Local_Name_Length;
 800bc86:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800bc8a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800bc8e:	4413      	add	r3, r2
 800bc90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800bc94:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800bc98:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800bc9c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800bc9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bca2:	3301      	adds	r3, #1
 800bca4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800bca8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800bcac:	3301      	adds	r3, #1
 800bcae:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800bcb2:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f001 f857 	bl	800cd6a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800bcbc:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800bcc0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800bcca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bcce:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800bcd2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800bcd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bcd8:	3302      	adds	r3, #2
 800bcda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800bcde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bce2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800bce6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800bce8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bcec:	3302      	adds	r3, #2
 800bcee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bcf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bcf6:	2218      	movs	r2, #24
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f001 f845 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800bd00:	233f      	movs	r3, #63	@ 0x3f
 800bd02:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800bd06:	2383      	movs	r3, #131	@ 0x83
 800bd08:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800bd0c:	f107 0310 	add.w	r3, r7, #16
 800bd10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800bd14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bd18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800bd1c:	f107 030f 	add.w	r3, r7, #15
 800bd20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800bd24:	2301      	movs	r3, #1
 800bd26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bd2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4618      	mov	r0, r3
 800bd32:	f001 fab3 	bl	800d29c <hci_send_req>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	da01      	bge.n	800bd40 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800bd3c:	23ff      	movs	r3, #255	@ 0xff
 800bd3e:	e004      	b.n	800bd4a <aci_gap_set_discoverable+0x1ea>
  return status;
 800bd40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bd44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800bd48:	781b      	ldrb	r3, [r3, #0]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bdb0      	pop	{r4, r5, r7, pc}

0800bd54 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b0cc      	sub	sp, #304	@ 0x130
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd60:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800bd64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800bd66:	f107 0310 	add.w	r3, r7, #16
 800bd6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800bd6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bd72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800bd76:	2200      	movs	r2, #0
 800bd78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800bd80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bd84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800bd88:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800bd8c:	7812      	ldrb	r2, [r2, #0]
 800bd8e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bd90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bd94:	3301      	adds	r3, #1
 800bd96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bd9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bd9e:	2218      	movs	r2, #24
 800bda0:	2100      	movs	r1, #0
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 fff1 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800bda8:	233f      	movs	r3, #63	@ 0x3f
 800bdaa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800bdae:	2385      	movs	r3, #133	@ 0x85
 800bdb0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800bdb4:	f107 0310 	add.w	r3, r7, #16
 800bdb8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800bdbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bdc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800bdc4:	f107 030f 	add.w	r3, r7, #15
 800bdc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bdd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f001 fa5f 	bl	800d29c <hci_send_req>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	da01      	bge.n	800bde8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800bde4:	23ff      	movs	r3, #255	@ 0xff
 800bde6:	e004      	b.n	800bdf2 <aci_gap_set_io_capability+0x9e>
  return status;
 800bde8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bdec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800bdf0:	781b      	ldrb	r3, [r3, #0]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800bdfc:	b5b0      	push	{r4, r5, r7, lr}
 800bdfe:	b0cc      	sub	sp, #304	@ 0x130
 800be00:	af00      	add	r7, sp, #0
 800be02:	4605      	mov	r5, r0
 800be04:	460c      	mov	r4, r1
 800be06:	4610      	mov	r0, r2
 800be08:	4619      	mov	r1, r3
 800be0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800be0e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800be12:	462a      	mov	r2, r5
 800be14:	701a      	strb	r2, [r3, #0]
 800be16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800be1a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800be1e:	4622      	mov	r2, r4
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800be26:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800be2a:	4602      	mov	r2, r0
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800be32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800be36:	460a      	mov	r2, r1
 800be38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800be3a:	f107 0310 	add.w	r3, r7, #16
 800be3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800be42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800be46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800be4a:	2200      	movs	r2, #0
 800be4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800be4e:	2300      	movs	r3, #0
 800be50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800be54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800be58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800be5c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800be60:	7812      	ldrb	r2, [r2, #0]
 800be62:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800be64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800be68:	3301      	adds	r3, #1
 800be6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800be6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800be72:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800be76:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800be7a:	7812      	ldrb	r2, [r2, #0]
 800be7c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800be7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800be82:	3301      	adds	r3, #1
 800be84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800be88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800be8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800be90:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800be94:	7812      	ldrb	r2, [r2, #0]
 800be96:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800be98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800be9c:	3301      	adds	r3, #1
 800be9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800bea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bea6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800beaa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800beae:	7812      	ldrb	r2, [r2, #0]
 800beb0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800beb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800beb6:	3301      	adds	r3, #1
 800beb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800bebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bec0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800bec4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800bec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800beca:	3301      	adds	r3, #1
 800becc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800bed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bed4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800bed8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800beda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bede:	3301      	adds	r3, #1
 800bee0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800bee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bee8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800beec:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800beee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bef2:	3301      	adds	r3, #1
 800bef4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800bef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800befc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800bf00:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800bf04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bf08:	3304      	adds	r3, #4
 800bf0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800bf0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bf12:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800bf16:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800bf18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bf22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bf26:	2218      	movs	r2, #24
 800bf28:	2100      	movs	r1, #0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 ff2d 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800bf30:	233f      	movs	r3, #63	@ 0x3f
 800bf32:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800bf36:	2386      	movs	r3, #134	@ 0x86
 800bf38:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800bf3c:	f107 0310 	add.w	r3, r7, #16
 800bf40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800bf44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bf48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800bf4c:	f107 030f 	add.w	r3, r7, #15
 800bf50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800bf54:	2301      	movs	r3, #1
 800bf56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bf5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bf5e:	2100      	movs	r1, #0
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 f99b 	bl	800d29c <hci_send_req>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	da01      	bge.n	800bf70 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800bf6c:	23ff      	movs	r3, #255	@ 0xff
 800bf6e:	e004      	b.n	800bf7a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800bf70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf74:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800bf78:	781b      	ldrb	r3, [r3, #0]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bdb0      	pop	{r4, r5, r7, pc}

0800bf84 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b0cc      	sub	sp, #304	@ 0x130
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf90:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800bf94:	6019      	str	r1, [r3, #0]
 800bf96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf9a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800bf9e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800bfa0:	f107 0310 	add.w	r3, r7, #16
 800bfa4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800bfa8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bfac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800bfba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bfbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800bfc2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800bfc6:	8812      	ldrh	r2, [r2, #0]
 800bfc8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bfca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bfce:	3302      	adds	r3, #2
 800bfd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800bfd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bfd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800bfdc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800bfe0:	6812      	ldr	r2, [r2, #0]
 800bfe2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800bfe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bfea:	3304      	adds	r3, #4
 800bfec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bff0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bff4:	2218      	movs	r2, #24
 800bff6:	2100      	movs	r1, #0
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 fec6 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800bffe:	233f      	movs	r3, #63	@ 0x3f
 800c000:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800c004:	2388      	movs	r3, #136	@ 0x88
 800c006:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c00a:	f107 0310 	add.w	r3, r7, #16
 800c00e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c012:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c016:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c01a:	f107 030f 	add.w	r3, r7, #15
 800c01e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c022:	2301      	movs	r3, #1
 800c024:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c028:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c02c:	2100      	movs	r1, #0
 800c02e:	4618      	mov	r0, r3
 800c030:	f001 f934 	bl	800d29c <hci_send_req>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	da01      	bge.n	800c03e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800c03a:	23ff      	movs	r3, #255	@ 0xff
 800c03c:	e004      	b.n	800c048 <aci_gap_pass_key_resp+0xc4>
  return status;
 800c03e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c042:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c046:	781b      	ldrb	r3, [r3, #0]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c052:	b590      	push	{r4, r7, lr}
 800c054:	b0cd      	sub	sp, #308	@ 0x134
 800c056:	af00      	add	r7, sp, #0
 800c058:	4604      	mov	r4, r0
 800c05a:	4608      	mov	r0, r1
 800c05c:	4611      	mov	r1, r2
 800c05e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c062:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800c066:	6013      	str	r3, [r2, #0]
 800c068:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c06c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c070:	4622      	mov	r2, r4
 800c072:	701a      	strb	r2, [r3, #0]
 800c074:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c078:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c07c:	4602      	mov	r2, r0
 800c07e:	701a      	strb	r2, [r3, #0]
 800c080:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c084:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800c088:	460a      	mov	r2, r1
 800c08a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800c08c:	f107 0310 	add.w	r3, r7, #16
 800c090:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c094:	f107 0308 	add.w	r3, r7, #8
 800c098:	2207      	movs	r2, #7
 800c09a:	2100      	movs	r1, #0
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 fe74 	bl	800cd8a <Osal_MemSet>
  int index_input = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800c0a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c0ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c0b0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c0b4:	7812      	ldrb	r2, [r2, #0]
 800c0b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c0b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c0bc:	3301      	adds	r3, #1
 800c0be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800c0c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c0c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c0ca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c0ce:	7812      	ldrb	r2, [r2, #0]
 800c0d0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c0d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800c0dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c0e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c0e4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800c0e8:	7812      	ldrb	r2, [r2, #0]
 800c0ea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c0ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c0f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c0fa:	2218      	movs	r2, #24
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 fe43 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c104:	233f      	movs	r3, #63	@ 0x3f
 800c106:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800c10a:	238a      	movs	r3, #138	@ 0x8a
 800c10c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c110:	f107 0310 	add.w	r3, r7, #16
 800c114:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c118:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c11c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800c120:	f107 0308 	add.w	r3, r7, #8
 800c124:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800c128:	2307      	movs	r3, #7
 800c12a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c12e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c132:	2100      	movs	r1, #0
 800c134:	4618      	mov	r0, r3
 800c136:	f001 f8b1 	bl	800d29c <hci_send_req>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	da01      	bge.n	800c144 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800c140:	23ff      	movs	r3, #255	@ 0xff
 800c142:	e02e      	b.n	800c1a2 <aci_gap_init+0x150>
  if ( resp.Status )
 800c144:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c148:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d005      	beq.n	800c15e <aci_gap_init+0x10c>
    return resp.Status;
 800c152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c156:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	e021      	b.n	800c1a2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800c15e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c162:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c166:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c16a:	b29a      	uxth	r2, r3
 800c16c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c170:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800c178:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c17c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c180:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c184:	b29a      	uxth	r2, r3
 800c186:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c18a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800c18c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c190:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c194:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c198:	b29a      	uxth	r2, r3
 800c19a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800c19e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd90      	pop	{r4, r7, pc}

0800c1ac <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b0cc      	sub	sp, #304	@ 0x130
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c1b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c1bc:	6019      	str	r1, [r3, #0]
 800c1be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c1c2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c1c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800c1c8:	f107 0310 	add.w	r3, r7, #16
 800c1cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c1d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c1d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c1d8:	2200      	movs	r2, #0
 800c1da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800c1e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c1e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c1ea:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c1ee:	7812      	ldrb	r2, [r2, #0]
 800c1f0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c1f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800c1fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c200:	1c58      	adds	r0, r3, #1
 800c202:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c206:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c20a:	781a      	ldrb	r2, [r3, #0]
 800c20c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c210:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c214:	6819      	ldr	r1, [r3, #0]
 800c216:	f000 fda8 	bl	800cd6a <Osal_MemCpy>
  index_input += AdvDataLen;
 800c21a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c21e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c228:	4413      	add	r3, r2
 800c22a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c22e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c232:	2218      	movs	r2, #24
 800c234:	2100      	movs	r1, #0
 800c236:	4618      	mov	r0, r3
 800c238:	f000 fda7 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c23c:	233f      	movs	r3, #63	@ 0x3f
 800c23e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800c242:	238e      	movs	r3, #142	@ 0x8e
 800c244:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c248:	f107 0310 	add.w	r3, r7, #16
 800c24c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c250:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c254:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c258:	f107 030f 	add.w	r3, r7, #15
 800c25c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c260:	2301      	movs	r3, #1
 800c262:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c266:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c26a:	2100      	movs	r1, #0
 800c26c:	4618      	mov	r0, r3
 800c26e:	f001 f815 	bl	800d29c <hci_send_req>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	da01      	bge.n	800c27c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800c278:	23ff      	movs	r3, #255	@ 0xff
 800c27a:	e004      	b.n	800c286 <aci_gap_update_adv_data+0xda>
  return status;
 800c27c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c280:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c284:	781b      	ldrb	r3, [r3, #0]
}
 800c286:	4618      	mov	r0, r3
 800c288:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c296:	2300      	movs	r3, #0
 800c298:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c29a:	f107 0308 	add.w	r3, r7, #8
 800c29e:	2218      	movs	r2, #24
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 fd71 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c2a8:	233f      	movs	r3, #63	@ 0x3f
 800c2aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800c2ac:	2392      	movs	r3, #146	@ 0x92
 800c2ae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c2b0:	1dfb      	adds	r3, r7, #7
 800c2b2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c2b8:	f107 0308 	add.w	r3, r7, #8
 800c2bc:	2100      	movs	r1, #0
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 ffec 	bl	800d29c <hci_send_req>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	da01      	bge.n	800c2ce <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c2ca:	23ff      	movs	r3, #255	@ 0xff
 800c2cc:	e000      	b.n	800c2d0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800c2ce:	79fb      	ldrb	r3, [r7, #7]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3720      	adds	r7, #32
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b0cc      	sub	sp, #304	@ 0x130
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4602      	mov	r2, r0
 800c2e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c2e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c2e8:	801a      	strh	r2, [r3, #0]
 800c2ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c2ee:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800c2f2:	460a      	mov	r2, r1
 800c2f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800c2f6:	f107 0310 	add.w	r3, r7, #16
 800c2fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c2fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c302:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c306:	2200      	movs	r2, #0
 800c308:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c310:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c314:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c318:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c31c:	8812      	ldrh	r2, [r2, #0]
 800c31e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c320:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c324:	3302      	adds	r3, #2
 800c326:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800c32a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c32e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c332:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800c336:	7812      	ldrb	r2, [r2, #0]
 800c338:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c33a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c33e:	3301      	adds	r3, #1
 800c340:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c344:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c348:	2218      	movs	r2, #24
 800c34a:	2100      	movs	r1, #0
 800c34c:	4618      	mov	r0, r3
 800c34e:	f000 fd1c 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c352:	233f      	movs	r3, #63	@ 0x3f
 800c354:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800c358:	23a5      	movs	r3, #165	@ 0xa5
 800c35a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c35e:	f107 0310 	add.w	r3, r7, #16
 800c362:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c366:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c36a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c36e:	f107 030f 	add.w	r3, r7, #15
 800c372:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c376:	2301      	movs	r3, #1
 800c378:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c37c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c380:	2100      	movs	r1, #0
 800c382:	4618      	mov	r0, r3
 800c384:	f000 ff8a 	bl	800d29c <hci_send_req>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	da01      	bge.n	800c392 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800c38e:	23ff      	movs	r3, #255	@ 0xff
 800c390:	e004      	b.n	800c39c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800c392:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c396:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c39a:	781b      	ldrb	r3, [r3, #0]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b088      	sub	sp, #32
 800c3aa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c3b0:	f107 0308 	add.w	r3, r7, #8
 800c3b4:	2218      	movs	r2, #24
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 fce6 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c3be:	233f      	movs	r3, #63	@ 0x3f
 800c3c0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800c3c2:	f240 1301 	movw	r3, #257	@ 0x101
 800c3c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c3c8:	1dfb      	adds	r3, r7, #7
 800c3ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c3d0:	f107 0308 	add.w	r3, r7, #8
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 ff60 	bl	800d29c <hci_send_req>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	da01      	bge.n	800c3e6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800c3e2:	23ff      	movs	r3, #255	@ 0xff
 800c3e4:	e000      	b.n	800c3e8 <aci_gatt_init+0x42>
  return status;
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3720      	adds	r7, #32
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800c3f0:	b590      	push	{r4, r7, lr}
 800c3f2:	b0cf      	sub	sp, #316	@ 0x13c
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800c3fc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800c400:	6001      	str	r1, [r0, #0]
 800c402:	4610      	mov	r0, r2
 800c404:	4619      	mov	r1, r3
 800c406:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c40a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800c40e:	4622      	mov	r2, r4
 800c410:	701a      	strb	r2, [r3, #0]
 800c412:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c416:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800c41a:	4602      	mov	r2, r0
 800c41c:	701a      	strb	r2, [r3, #0]
 800c41e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c422:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800c426:	460a      	mov	r2, r1
 800c428:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800c42a:	f107 0310 	add.w	r3, r7, #16
 800c42e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800c432:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c436:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d00a      	beq.n	800c456 <aci_gatt_add_service+0x66>
 800c440:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c444:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d101      	bne.n	800c452 <aci_gatt_add_service+0x62>
 800c44e:	2311      	movs	r3, #17
 800c450:	e002      	b.n	800c458 <aci_gatt_add_service+0x68>
 800c452:	2301      	movs	r3, #1
 800c454:	e000      	b.n	800c458 <aci_gatt_add_service+0x68>
 800c456:	2303      	movs	r3, #3
 800c458:	f107 0210 	add.w	r2, r7, #16
 800c45c:	4413      	add	r3, r2
 800c45e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c462:	f107 030c 	add.w	r3, r7, #12
 800c466:	2203      	movs	r2, #3
 800c468:	2100      	movs	r1, #0
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 fc8d 	bl	800cd8a <Osal_MemSet>
  int index_input = 0;
 800c470:	2300      	movs	r3, #0
 800c472:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800c476:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c47a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c47e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800c482:	7812      	ldrb	r2, [r2, #0]
 800c484:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c486:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c48a:	3301      	adds	r3, #1
 800c48c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800c490:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c494:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d002      	beq.n	800c4a4 <aci_gatt_add_service+0xb4>
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d004      	beq.n	800c4ac <aci_gatt_add_service+0xbc>
 800c4a2:	e007      	b.n	800c4b4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800c4aa:	e005      	b.n	800c4b8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800c4ac:	2310      	movs	r3, #16
 800c4ae:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800c4b2:	e001      	b.n	800c4b8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800c4b4:	2397      	movs	r3, #151	@ 0x97
 800c4b6:	e06c      	b.n	800c592 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800c4b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c4bc:	1c58      	adds	r0, r3, #1
 800c4be:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800c4c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c4c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c4ca:	6819      	ldr	r1, [r3, #0]
 800c4cc:	f000 fc4d 	bl	800cd6a <Osal_MemCpy>
    index_input += size;
 800c4d0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800c4d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c4d8:	4413      	add	r3, r2
 800c4da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800c4de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c4e2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c4e6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800c4ea:	7812      	ldrb	r2, [r2, #0]
 800c4ec:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c4ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800c4f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c4fc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c500:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800c504:	7812      	ldrb	r2, [r2, #0]
 800c506:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800c508:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c50c:	3301      	adds	r3, #1
 800c50e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c512:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c516:	2218      	movs	r2, #24
 800c518:	2100      	movs	r1, #0
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fc35 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c520:	233f      	movs	r3, #63	@ 0x3f
 800c522:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800c526:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800c52a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c52e:	f107 0310 	add.w	r3, r7, #16
 800c532:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c536:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c53a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800c53e:	f107 030c 	add.w	r3, r7, #12
 800c542:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800c546:	2303      	movs	r3, #3
 800c548:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c54c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c550:	2100      	movs	r1, #0
 800c552:	4618      	mov	r0, r3
 800c554:	f000 fea2 	bl	800d29c <hci_send_req>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	da01      	bge.n	800c562 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800c55e:	23ff      	movs	r3, #255	@ 0xff
 800c560:	e017      	b.n	800c592 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800c562:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c566:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d005      	beq.n	800c57c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800c570:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	e00a      	b.n	800c592 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800c57c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c580:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c584:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c588:	b29a      	uxth	r2, r3
 800c58a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c58e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd90      	pop	{r4, r7, pc}

0800c59c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800c59c:	b590      	push	{r4, r7, lr}
 800c59e:	b0d1      	sub	sp, #324	@ 0x144
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800c5aa:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800c5ae:	600a      	str	r2, [r1, #0]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c5b6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800c5ba:	4622      	mov	r2, r4
 800c5bc:	801a      	strh	r2, [r3, #0]
 800c5be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c5c2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	701a      	strb	r2, [r3, #0]
 800c5ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c5ce:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800c5d2:	460a      	mov	r2, r1
 800c5d4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800c5d6:	f107 0318 	add.w	r3, r7, #24
 800c5da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800c5de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c5e2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d00a      	beq.n	800c602 <aci_gatt_add_char+0x66>
 800c5ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c5f0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d101      	bne.n	800c5fe <aci_gatt_add_char+0x62>
 800c5fa:	2313      	movs	r3, #19
 800c5fc:	e002      	b.n	800c604 <aci_gatt_add_char+0x68>
 800c5fe:	2303      	movs	r3, #3
 800c600:	e000      	b.n	800c604 <aci_gatt_add_char+0x68>
 800c602:	2305      	movs	r3, #5
 800c604:	f107 0218 	add.w	r2, r7, #24
 800c608:	4413      	add	r3, r2
 800c60a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c60e:	f107 0314 	add.w	r3, r7, #20
 800c612:	2203      	movs	r2, #3
 800c614:	2100      	movs	r1, #0
 800c616:	4618      	mov	r0, r3
 800c618:	f000 fbb7 	bl	800cd8a <Osal_MemSet>
  int index_input = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800c622:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800c626:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c62a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800c62e:	8812      	ldrh	r2, [r2, #0]
 800c630:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c632:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c636:	3302      	adds	r3, #2
 800c638:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800c63c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800c640:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c644:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800c648:	7812      	ldrb	r2, [r2, #0]
 800c64a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c64c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c650:	3301      	adds	r3, #1
 800c652:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800c656:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c65a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d002      	beq.n	800c66a <aci_gatt_add_char+0xce>
 800c664:	2b02      	cmp	r3, #2
 800c666:	d004      	beq.n	800c672 <aci_gatt_add_char+0xd6>
 800c668:	e007      	b.n	800c67a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800c66a:	2302      	movs	r3, #2
 800c66c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800c670:	e005      	b.n	800c67e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800c672:	2310      	movs	r3, #16
 800c674:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800c678:	e001      	b.n	800c67e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800c67a:	2397      	movs	r3, #151	@ 0x97
 800c67c:	e091      	b.n	800c7a2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800c67e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800c682:	1cd8      	adds	r0, r3, #3
 800c684:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800c688:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c68c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c690:	6819      	ldr	r1, [r3, #0]
 800c692:	f000 fb6a 	bl	800cd6a <Osal_MemCpy>
    index_input += size;
 800c696:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800c69a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800c69e:	4413      	add	r3, r2
 800c6a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800c6a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c6a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800c6ac:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800c6b0:	8812      	ldrh	r2, [r2, #0]
 800c6b2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c6b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c6b8:	3302      	adds	r3, #2
 800c6ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800c6be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c6c2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800c6c6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800c6c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800c6d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c6d6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800c6da:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800c6dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800c6e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c6ea:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800c6ee:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800c6f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800c6fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c6fe:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800c702:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800c704:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c708:	3301      	adds	r3, #1
 800c70a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800c70e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c712:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800c716:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800c718:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c71c:	3301      	adds	r3, #1
 800c71e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c722:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c726:	2218      	movs	r2, #24
 800c728:	2100      	movs	r1, #0
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 fb2d 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c730:	233f      	movs	r3, #63	@ 0x3f
 800c732:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800c736:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800c73a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800c73e:	f107 0318 	add.w	r3, r7, #24
 800c742:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800c746:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c74a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800c74e:	f107 0314 	add.w	r3, r7, #20
 800c752:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800c756:	2303      	movs	r3, #3
 800c758:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c75c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800c760:	2100      	movs	r1, #0
 800c762:	4618      	mov	r0, r3
 800c764:	f000 fd9a 	bl	800d29c <hci_send_req>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	da01      	bge.n	800c772 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800c76e:	23ff      	movs	r3, #255	@ 0xff
 800c770:	e017      	b.n	800c7a2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800c772:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c776:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800c780:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c784:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	e00a      	b.n	800c7a2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800c78c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c790:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c794:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c798:	b29a      	uxth	r2, r3
 800c79a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800c79e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd90      	pop	{r4, r7, pc}

0800c7ac <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800c7ac:	b5b0      	push	{r4, r5, r7, lr}
 800c7ae:	b0cc      	sub	sp, #304	@ 0x130
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	4610      	mov	r0, r2
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	801a      	strh	r2, [r3, #0]
 800c7c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c7ce:	4622      	mov	r2, r4
 800c7d0:	801a      	strh	r2, [r3, #0]
 800c7d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7d6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800c7da:	4602      	mov	r2, r0
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7e2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800c7e6:	460a      	mov	r2, r1
 800c7e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800c7ea:	f107 0310 	add.w	r3, r7, #16
 800c7ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c7f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800c804:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c808:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c80c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c810:	8812      	ldrh	r2, [r2, #0]
 800c812:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c814:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c818:	3302      	adds	r3, #2
 800c81a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800c81e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c822:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c826:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800c82a:	8812      	ldrh	r2, [r2, #0]
 800c82c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800c82e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c832:	3302      	adds	r3, #2
 800c834:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800c838:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c83c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c840:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800c844:	7812      	ldrb	r2, [r2, #0]
 800c846:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c848:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c84c:	3301      	adds	r3, #1
 800c84e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800c852:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c856:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c85a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800c85e:	7812      	ldrb	r2, [r2, #0]
 800c860:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c862:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c866:	3301      	adds	r3, #1
 800c868:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800c86c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c870:	1d98      	adds	r0, r3, #6
 800c872:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c876:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	461a      	mov	r2, r3
 800c87e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800c882:	f000 fa72 	bl	800cd6a <Osal_MemCpy>
  index_input += Char_Value_Length;
 800c886:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c88a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c894:	4413      	add	r3, r2
 800c896:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c89a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c89e:	2218      	movs	r2, #24
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 fa71 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c8a8:	233f      	movs	r3, #63	@ 0x3f
 800c8aa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800c8ae:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800c8b2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c8b6:	f107 0310 	add.w	r3, r7, #16
 800c8ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c8be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c8c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c8c6:	f107 030f 	add.w	r3, r7, #15
 800c8ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c8d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c8d8:	2100      	movs	r1, #0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 fcde 	bl	800d29c <hci_send_req>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	da01      	bge.n	800c8ea <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800c8e6:	23ff      	movs	r3, #255	@ 0xff
 800c8e8:	e004      	b.n	800c8f4 <aci_gatt_update_char_value+0x148>
  return status;
 800c8ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c8f2:	781b      	ldrb	r3, [r3, #0]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bdb0      	pop	{r4, r5, r7, pc}

0800c8fe <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b0cc      	sub	sp, #304	@ 0x130
 800c902:	af00      	add	r7, sp, #0
 800c904:	4602      	mov	r2, r0
 800c906:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c90a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c90e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800c910:	f107 0310 	add.w	r3, r7, #16
 800c914:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c918:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c91c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c920:	2200      	movs	r2, #0
 800c922:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c92a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c92e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c932:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c936:	8812      	ldrh	r2, [r2, #0]
 800c938:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c93a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c93e:	3302      	adds	r3, #2
 800c940:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c944:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c948:	2218      	movs	r2, #24
 800c94a:	2100      	movs	r1, #0
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 fa1c 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800c952:	233f      	movs	r3, #63	@ 0x3f
 800c954:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800c958:	f240 1325 	movw	r3, #293	@ 0x125
 800c95c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c960:	f107 0310 	add.w	r3, r7, #16
 800c964:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c968:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c96c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c970:	f107 030f 	add.w	r3, r7, #15
 800c974:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c978:	2301      	movs	r3, #1
 800c97a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c97e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c982:	2100      	movs	r1, #0
 800c984:	4618      	mov	r0, r3
 800c986:	f000 fc89 	bl	800d29c <hci_send_req>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	da01      	bge.n	800c994 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800c990:	23ff      	movs	r3, #255	@ 0xff
 800c992:	e004      	b.n	800c99e <aci_gatt_confirm_indication+0xa0>
  return status;
 800c994:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c998:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c99c:	781b      	ldrb	r3, [r3, #0]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b0cc      	sub	sp, #304	@ 0x130
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c9b6:	601a      	str	r2, [r3, #0]
 800c9b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9bc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	701a      	strb	r2, [r3, #0]
 800c9c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9c8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c9cc:	460a      	mov	r2, r1
 800c9ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800c9d0:	f107 0310 	add.w	r3, r7, #16
 800c9d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c9d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800c9ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c9ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c9f2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c9f6:	7812      	ldrb	r2, [r2, #0]
 800c9f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c9fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c9fe:	3301      	adds	r3, #1
 800ca00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800ca04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca0c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ca10:	7812      	ldrb	r2, [r2, #0]
 800ca12:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ca14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca18:	3301      	adds	r3, #1
 800ca1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800ca1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca22:	1c98      	adds	r0, r3, #2
 800ca24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca28:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ca2c:	781a      	ldrb	r2, [r3, #0]
 800ca2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca32:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ca36:	6819      	ldr	r1, [r3, #0]
 800ca38:	f000 f997 	bl	800cd6a <Osal_MemCpy>
  index_input += Length;
 800ca3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca40:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ca4a:	4413      	add	r3, r2
 800ca4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca54:	2218      	movs	r2, #24
 800ca56:	2100      	movs	r1, #0
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f000 f996 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca5e:	233f      	movs	r3, #63	@ 0x3f
 800ca60:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800ca64:	230c      	movs	r3, #12
 800ca66:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ca6a:	f107 0310 	add.w	r3, r7, #16
 800ca6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ca72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ca7a:	f107 030f 	add.w	r3, r7, #15
 800ca7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ca82:	2301      	movs	r3, #1
 800ca84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 fc04 	bl	800d29c <hci_send_req>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	da01      	bge.n	800ca9e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800ca9a:	23ff      	movs	r3, #255	@ 0xff
 800ca9c:	e004      	b.n	800caa8 <aci_hal_write_config_data+0x100>
  return status;
 800ca9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800caa2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800caa6:	781b      	ldrb	r3, [r3, #0]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b0cc      	sub	sp, #304	@ 0x130
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	4602      	mov	r2, r0
 800caba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cabe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cac2:	701a      	strb	r2, [r3, #0]
 800cac4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cac8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cacc:	460a      	mov	r2, r1
 800cace:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800cad0:	f107 0310 	add.w	r3, r7, #16
 800cad4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cad8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cadc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cae0:	2200      	movs	r2, #0
 800cae2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800caea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800caee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800caf2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800caf6:	7812      	ldrb	r2, [r2, #0]
 800caf8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cafa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cafe:	3301      	adds	r3, #1
 800cb00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800cb04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cb0c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cb10:	7812      	ldrb	r2, [r2, #0]
 800cb12:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cb14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cb18:	3301      	adds	r3, #1
 800cb1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb22:	2218      	movs	r2, #24
 800cb24:	2100      	movs	r1, #0
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 f92f 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb2c:	233f      	movs	r3, #63	@ 0x3f
 800cb2e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800cb32:	230f      	movs	r3, #15
 800cb34:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cb38:	f107 0310 	add.w	r3, r7, #16
 800cb3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cb40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cb44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cb48:	f107 030f 	add.w	r3, r7, #15
 800cb4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cb50:	2301      	movs	r3, #1
 800cb52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 fb9d 	bl	800d29c <hci_send_req>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	da01      	bge.n	800cb6c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800cb68:	23ff      	movs	r3, #255	@ 0xff
 800cb6a:	e004      	b.n	800cb76 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800cb6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cb74:	781b      	ldrb	r3, [r3, #0]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b0cc      	sub	sp, #304	@ 0x130
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4602      	mov	r2, r0
 800cb88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cb90:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800cb92:	f107 0310 	add.w	r3, r7, #16
 800cb96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cb9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cba6:	2300      	movs	r3, #0
 800cba8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800cbac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cbb0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cbb4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cbb8:	8812      	ldrh	r2, [r2, #0]
 800cbba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cbbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cbc0:	3302      	adds	r3, #2
 800cbc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cbc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cbca:	2218      	movs	r2, #24
 800cbcc:	2100      	movs	r1, #0
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f000 f8db 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbd4:	233f      	movs	r3, #63	@ 0x3f
 800cbd6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800cbda:	2318      	movs	r3, #24
 800cbdc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cbe0:	f107 0310 	add.w	r3, r7, #16
 800cbe4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cbe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cbec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cbf0:	f107 030f 	add.w	r3, r7, #15
 800cbf4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc02:	2100      	movs	r1, #0
 800cc04:	4618      	mov	r0, r3
 800cc06:	f000 fb49 	bl	800d29c <hci_send_req>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	da01      	bge.n	800cc14 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800cc10:	23ff      	movs	r3, #255	@ 0xff
 800cc12:	e004      	b.n	800cc1e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800cc14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cc1c:	781b      	ldrb	r3, [r3, #0]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b088      	sub	sp, #32
 800cc2c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc32:	f107 0308 	add.w	r3, r7, #8
 800cc36:	2218      	movs	r2, #24
 800cc38:	2100      	movs	r1, #0
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 f8a5 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x03;
 800cc40:	2303      	movs	r3, #3
 800cc42:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800cc44:	2303      	movs	r3, #3
 800cc46:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cc48:	1dfb      	adds	r3, r7, #7
 800cc4a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc50:	f107 0308 	add.w	r3, r7, #8
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 fb20 	bl	800d29c <hci_send_req>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	da01      	bge.n	800cc66 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cc62:	23ff      	movs	r3, #255	@ 0xff
 800cc64:	e000      	b.n	800cc68 <hci_reset+0x40>
  return status;
 800cc66:	79fb      	ldrb	r3, [r7, #7]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3720      	adds	r7, #32
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800cc70:	b590      	push	{r4, r7, lr}
 800cc72:	b0cd      	sub	sp, #308	@ 0x134
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4604      	mov	r4, r0
 800cc78:	4608      	mov	r0, r1
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cc84:	4622      	mov	r2, r4
 800cc86:	701a      	strb	r2, [r3, #0]
 800cc88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cc90:	4602      	mov	r2, r0
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc98:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800cc9c:	460a      	mov	r2, r1
 800cc9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800cca0:	f107 0310 	add.w	r3, r7, #16
 800cca4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cca8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ccac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800ccba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ccc2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ccc6:	7812      	ldrb	r2, [r2, #0]
 800ccc8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ccca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccce:	3301      	adds	r3, #1
 800ccd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800ccd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ccdc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cce0:	7812      	ldrb	r2, [r2, #0]
 800cce2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cce8:	3301      	adds	r3, #1
 800ccea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ccee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ccf6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ccfa:	7812      	ldrb	r2, [r2, #0]
 800ccfc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ccfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd02:	3301      	adds	r3, #1
 800cd04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd0c:	2218      	movs	r2, #24
 800cd0e:	2100      	movs	r1, #0
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 f83a 	bl	800cd8a <Osal_MemSet>
  rq.ogf = 0x08;
 800cd16:	2308      	movs	r3, #8
 800cd18:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800cd1c:	2331      	movs	r3, #49	@ 0x31
 800cd1e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cd22:	f107 0310 	add.w	r3, r7, #16
 800cd26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cd2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cd32:	f107 030f 	add.w	r3, r7, #15
 800cd36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd44:	2100      	movs	r1, #0
 800cd46:	4618      	mov	r0, r3
 800cd48:	f000 faa8 	bl	800d29c <hci_send_req>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	da01      	bge.n	800cd56 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800cd52:	23ff      	movs	r3, #255	@ 0xff
 800cd54:	e004      	b.n	800cd60 <hci_le_set_default_phy+0xf0>
  return status;
 800cd56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cd5a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cd5e:	781b      	ldrb	r3, [r3, #0]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd90      	pop	{r4, r7, pc}

0800cd6a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	60b9      	str	r1, [r7, #8]
 800cd74:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	68b9      	ldr	r1, [r7, #8]
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f004 fa15 	bl	80111aa <memcpy>
 800cd80:	4603      	mov	r3, r0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b084      	sub	sp, #16
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	60f8      	str	r0, [r7, #12]
 800cd92:	60b9      	str	r1, [r7, #8]
 800cd94:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	68b9      	ldr	r1, [r7, #8]
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f004 f964 	bl	8011068 <memset>
 800cda0:	4603      	mov	r3, r0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800cdaa:	b480      	push	{r7}
 800cdac:	af00      	add	r7, sp, #0
  return;
 800cdae:	bf00      	nop
}
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800cdb8:	b480      	push	{r7}
 800cdba:	af00      	add	r7, sp, #0
  return;
 800cdbc:	bf00      	nop
}
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	af00      	add	r7, sp, #0
  return;
 800cdca:	bf00      	nop
}
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	af00      	add	r7, sp, #0
  return;
 800cdd8:	bf00      	nop
}
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800cde2:	b480      	push	{r7}
 800cde4:	af00      	add	r7, sp, #0
  return;
 800cde6:	bf00      	nop
}
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	af00      	add	r7, sp, #0
  return;
 800cdf4:	bf00      	nop
}
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800cdfe:	b480      	push	{r7}
 800ce00:	af00      	add	r7, sp, #0
  return;
 800ce02:	bf00      	nop
}
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	af00      	add	r7, sp, #0
  return;
 800ce10:	bf00      	nop
}
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	af00      	add	r7, sp, #0
  return;
 800ce1e:	bf00      	nop
}
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ce28:	b480      	push	{r7}
 800ce2a:	af00      	add	r7, sp, #0
  return;
 800ce2c:	bf00      	nop
}
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ce36:	b480      	push	{r7}
 800ce38:	af00      	add	r7, sp, #0
  return;
 800ce3a:	bf00      	nop
}
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ce44:	b480      	push	{r7}
 800ce46:	af00      	add	r7, sp, #0
  return;
 800ce48:	bf00      	nop
}
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr

0800ce52 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ce52:	b480      	push	{r7}
 800ce54:	af00      	add	r7, sp, #0
  return;
 800ce56:	bf00      	nop
}
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ce60:	b480      	push	{r7}
 800ce62:	af00      	add	r7, sp, #0
  return;
 800ce64:	bf00      	nop
}
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ce6e:	b480      	push	{r7}
 800ce70:	af00      	add	r7, sp, #0
  return;
 800ce72:	bf00      	nop
}
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
  return;
 800ce80:	bf00      	nop
}
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr

0800ce8a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800ce8a:	b480      	push	{r7}
 800ce8c:	af00      	add	r7, sp, #0
  return;
 800ce8e:	bf00      	nop
}
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ce9c:	4b04      	ldr	r3, [pc, #16]	@ (800ceb0 <SVCCTL_Init+0x18>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800cea2:	4b04      	ldr	r3, [pc, #16]	@ (800ceb4 <SVCCTL_Init+0x1c>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800cea8:	f000 f806 	bl	800ceb8 <SVCCTL_SvcInit>

  return;
 800ceac:	bf00      	nop
}
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	20000200 	.word	0x20000200
 800ceb4:	20000220 	.word	0x20000220

0800ceb8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  BAS_Init();
 800cebc:	f7ff ff75 	bl	800cdaa <BAS_Init>

  BLS_Init();
 800cec0:	f7ff ff7a 	bl	800cdb8 <BLS_Init>

  CRS_STM_Init();
 800cec4:	f7ff ff7f 	bl	800cdc6 <CRS_STM_Init>

  DIS_Init();
 800cec8:	f7ff ff84 	bl	800cdd4 <DIS_Init>

  EDS_STM_Init();
 800cecc:	f7ff ff89 	bl	800cde2 <EDS_STM_Init>

  HIDS_Init();
 800ced0:	f7ff ff8e 	bl	800cdf0 <HIDS_Init>

  HRS_Init();
 800ced4:	f7ff ff93 	bl	800cdfe <HRS_Init>

  HTS_Init();
 800ced8:	f7ff ff98 	bl	800ce0c <HTS_Init>

  IAS_Init();
 800cedc:	f7ff ff9d 	bl	800ce1a <IAS_Init>

  LLS_Init();
 800cee0:	f7ff ffa2 	bl	800ce28 <LLS_Init>

  TPS_Init();
 800cee4:	f7ff ffa7 	bl	800ce36 <TPS_Init>

  MOTENV_STM_Init();
 800cee8:	f7ff ffac 	bl	800ce44 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ceec:	f7ff ffb1 	bl	800ce52 <P2PS_STM_Init>

  ZDD_STM_Init();
 800cef0:	f7ff ffb6 	bl	800ce60 <ZDD_STM_Init>

  OTAS_STM_Init();
 800cef4:	f7ff ffbb 	bl	800ce6e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800cef8:	f7ff ffc7 	bl	800ce8a <BVOPUS_STM_Init>

  MESH_Init();
 800cefc:	f7ff ffbe 	bl	800ce7c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800cf00:	f001 fbc6 	bl	800e690 <SVCCTL_InitCustomSvc>
  
  return;
 800cf04:	bf00      	nop
}
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800cf10:	4b09      	ldr	r3, [pc, #36]	@ (800cf38 <SVCCTL_RegisterSvcHandler+0x30>)
 800cf12:	7f1b      	ldrb	r3, [r3, #28]
 800cf14:	4619      	mov	r1, r3
 800cf16:	4a08      	ldr	r2, [pc, #32]	@ (800cf38 <SVCCTL_RegisterSvcHandler+0x30>)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800cf1e:	4b06      	ldr	r3, [pc, #24]	@ (800cf38 <SVCCTL_RegisterSvcHandler+0x30>)
 800cf20:	7f1b      	ldrb	r3, [r3, #28]
 800cf22:	3301      	adds	r3, #1
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	4b04      	ldr	r3, [pc, #16]	@ (800cf38 <SVCCTL_RegisterSvcHandler+0x30>)
 800cf28:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800cf2a:	bf00      	nop
}
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	20000200 	.word	0x20000200

0800cf3c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	3301      	adds	r3, #1
 800cf48:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	2bff      	cmp	r3, #255	@ 0xff
 800cf54:	d125      	bne.n	800cfa2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	3302      	adds	r3, #2
 800cf5a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	881b      	ldrh	r3, [r3, #0]
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cf66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf6a:	d118      	bne.n	800cf9e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	757b      	strb	r3, [r7, #21]
 800cf70:	e00d      	b.n	800cf8e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800cf72:	7d7b      	ldrb	r3, [r7, #21]
 800cf74:	4a1a      	ldr	r2, [pc, #104]	@ (800cfe0 <SVCCTL_UserEvtRx+0xa4>)
 800cf76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	4798      	blx	r3
 800cf7e:	4603      	mov	r3, r0
 800cf80:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800cf82:	7dfb      	ldrb	r3, [r7, #23]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d108      	bne.n	800cf9a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800cf88:	7d7b      	ldrb	r3, [r7, #21]
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	757b      	strb	r3, [r7, #21]
 800cf8e:	4b14      	ldr	r3, [pc, #80]	@ (800cfe0 <SVCCTL_UserEvtRx+0xa4>)
 800cf90:	7f1b      	ldrb	r3, [r3, #28]
 800cf92:	7d7a      	ldrb	r2, [r7, #21]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d3ec      	bcc.n	800cf72 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800cf98:	e002      	b.n	800cfa0 <SVCCTL_UserEvtRx+0x64>
              break;
 800cf9a:	bf00      	nop
          break;
 800cf9c:	e000      	b.n	800cfa0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800cf9e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800cfa0:	e000      	b.n	800cfa4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800cfa2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800cfa4:	7dfb      	ldrb	r3, [r7, #23]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d00f      	beq.n	800cfca <SVCCTL_UserEvtRx+0x8e>
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	dc10      	bgt.n	800cfd0 <SVCCTL_UserEvtRx+0x94>
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d002      	beq.n	800cfb8 <SVCCTL_UserEvtRx+0x7c>
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d006      	beq.n	800cfc4 <SVCCTL_UserEvtRx+0x88>
 800cfb6:	e00b      	b.n	800cfd0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 fffb 	bl	800dfb4 <SVCCTL_App_Notification>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	75bb      	strb	r3, [r7, #22]
      break;
 800cfc2:	e008      	b.n	800cfd6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	75bb      	strb	r3, [r7, #22]
      break;
 800cfc8:	e005      	b.n	800cfd6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	75bb      	strb	r3, [r7, #22]
      break;
 800cfce:	e002      	b.n	800cfd6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	75bb      	strb	r3, [r7, #22]
      break;
 800cfd4:	bf00      	nop
  }

  return (return_status);
 800cfd6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3718      	adds	r7, #24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	20000200 	.word	0x20000200

0800cfe4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b088      	sub	sp, #32
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800cfec:	f107 030c 	add.w	r3, r7, #12
 800cff0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	212e      	movs	r1, #46	@ 0x2e
 800cffc:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800d000:	f000 fae8 	bl	800d5d4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	330b      	adds	r3, #11
 800d008:	78db      	ldrb	r3, [r3, #3]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3720      	adds	r7, #32
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b088      	sub	sp, #32
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d01a:	f107 030c 	add.w	r3, r7, #12
 800d01e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	210f      	movs	r1, #15
 800d02a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800d02e:	f000 fad1 	bl	800d5d4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	330b      	adds	r3, #11
 800d036:	78db      	ldrb	r3, [r3, #3]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3720      	adds	r7, #32
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d048:	f107 030c 	add.w	r3, r7, #12
 800d04c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	2110      	movs	r1, #16
 800d054:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800d058:	f000 fabc 	bl	800d5d4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	330b      	adds	r3, #11
 800d060:	78db      	ldrb	r3, [r3, #3]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3720      	adds	r7, #32
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
	...

0800d06c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800d06c:	b480      	push	{r7}
 800d06e:	b08b      	sub	sp, #44	@ 0x2c
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800d074:	2300      	movs	r3, #0
 800d076:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800d078:	2300      	movs	r3, #0
 800d07a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800d080:	2300      	movs	r3, #0
 800d082:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800d084:	2300      	movs	r3, #0
 800d086:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800d088:	2300      	movs	r3, #0
 800d08a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800d08c:	2300      	movs	r3, #0
 800d08e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800d094:	4b4a      	ldr	r3, [pc, #296]	@ (800d1c0 <SHCI_GetWirelessFwInfo+0x154>)
 800d096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d098:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d09c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800d0a6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a44      	ldr	r2, [pc, #272]	@ (800d1c4 <SHCI_GetWirelessFwInfo+0x158>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d10f      	bne.n	800d0d8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	695b      	ldr	r3, [r3, #20]
 800d0bc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	699b      	ldr	r3, [r3, #24]
 800d0c2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	69db      	ldr	r3, [r3, #28]
 800d0c8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	691b      	ldr	r3, [r3, #16]
 800d0d4:	617b      	str	r3, [r7, #20]
 800d0d6:	e01a      	b.n	800d10e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800d0e0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800d0e4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	695b      	ldr	r3, [r3, #20]
 800d0f4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	699b      	ldr	r3, [r3, #24]
 800d0fc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	689b      	ldr	r3, [r3, #8]
 800d10c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800d10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d110:	0e1b      	lsrs	r3, r3, #24
 800d112:	b2da      	uxtb	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	0c1b      	lsrs	r3, r3, #16
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800d122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d124:	0a1b      	lsrs	r3, r3, #8
 800d126:	b2da      	uxtb	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800d12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12e:	091b      	lsrs	r3, r3, #4
 800d130:	b2db      	uxtb	r3, r3
 800d132:	f003 030f 	and.w	r3, r3, #15
 800d136:	b2da      	uxtb	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800d13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	f003 030f 	and.w	r3, r3, #15
 800d144:	b2da      	uxtb	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800d14a:	6a3b      	ldr	r3, [r7, #32]
 800d14c:	0e1b      	lsrs	r3, r3, #24
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800d154:	6a3b      	ldr	r3, [r7, #32]
 800d156:	0c1b      	lsrs	r3, r3, #16
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	0a1b      	lsrs	r3, r3, #8
 800d162:	b2da      	uxtb	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	b2da      	uxtb	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	0e1b      	lsrs	r3, r3, #24
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	0c1b      	lsrs	r3, r3, #16
 800d186:	b2da      	uxtb	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	0a1b      	lsrs	r3, r3, #8
 800d190:	b2da      	uxtb	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	0e1b      	lsrs	r3, r3, #24
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	0c1b      	lsrs	r3, r3, #16
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	372c      	adds	r7, #44	@ 0x2c
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr
 800d1c0:	58004000 	.word	0x58004000
 800d1c4:	a94656b9 	.word	0xa94656b9

0800d1c8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	4a08      	ldr	r2, [pc, #32]	@ (800d1f8 <hci_init+0x30>)
 800d1d8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800d1da:	4a08      	ldr	r2, [pc, #32]	@ (800d1fc <hci_init+0x34>)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800d1e0:	4806      	ldr	r0, [pc, #24]	@ (800d1fc <hci_init+0x34>)
 800d1e2:	f000 f979 	bl	800d4d8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f000 f8da 	bl	800d3a4 <TlInit>

  return;
 800d1f0:	bf00      	nop
}
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	20000768 	.word	0x20000768
 800d1fc:	20000740 	.word	0x20000740

0800d200 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d206:	4822      	ldr	r0, [pc, #136]	@ (800d290 <hci_user_evt_proc+0x90>)
 800d208:	f000 fda8 	bl	800dd5c <LST_is_empty>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d12b      	bne.n	800d26a <hci_user_evt_proc+0x6a>
 800d212:	4b20      	ldr	r3, [pc, #128]	@ (800d294 <hci_user_evt_proc+0x94>)
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d027      	beq.n	800d26a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d21a:	f107 030c 	add.w	r3, r7, #12
 800d21e:	4619      	mov	r1, r3
 800d220:	481b      	ldr	r0, [pc, #108]	@ (800d290 <hci_user_evt_proc+0x90>)
 800d222:	f000 fe2a 	bl	800de7a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800d226:	4b1c      	ldr	r3, [pc, #112]	@ (800d298 <hci_user_evt_proc+0x98>)
 800d228:	69db      	ldr	r3, [r3, #28]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00c      	beq.n	800d248 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800d232:	2301      	movs	r3, #1
 800d234:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d236:	4b18      	ldr	r3, [pc, #96]	@ (800d298 <hci_user_evt_proc+0x98>)
 800d238:	69db      	ldr	r3, [r3, #28]
 800d23a:	1d3a      	adds	r2, r7, #4
 800d23c:	4610      	mov	r0, r2
 800d23e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800d240:	793a      	ldrb	r2, [r7, #4]
 800d242:	4b14      	ldr	r3, [pc, #80]	@ (800d294 <hci_user_evt_proc+0x94>)
 800d244:	701a      	strb	r2, [r3, #0]
 800d246:	e002      	b.n	800d24e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d248:	4b12      	ldr	r3, [pc, #72]	@ (800d294 <hci_user_evt_proc+0x94>)
 800d24a:	2201      	movs	r2, #1
 800d24c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800d24e:	4b11      	ldr	r3, [pc, #68]	@ (800d294 <hci_user_evt_proc+0x94>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d004      	beq.n	800d260 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	4618      	mov	r0, r3
 800d25a:	f000 fc0d 	bl	800da78 <TL_MM_EvtDone>
 800d25e:	e004      	b.n	800d26a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	4619      	mov	r1, r3
 800d264:	480a      	ldr	r0, [pc, #40]	@ (800d290 <hci_user_evt_proc+0x90>)
 800d266:	f000 fd9b 	bl	800dda0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800d26a:	4809      	ldr	r0, [pc, #36]	@ (800d290 <hci_user_evt_proc+0x90>)
 800d26c:	f000 fd76 	bl	800dd5c <LST_is_empty>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d107      	bne.n	800d286 <hci_user_evt_proc+0x86>
 800d276:	4b07      	ldr	r3, [pc, #28]	@ (800d294 <hci_user_evt_proc+0x94>)
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d003      	beq.n	800d286 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800d27e:	4804      	ldr	r0, [pc, #16]	@ (800d290 <hci_user_evt_proc+0x90>)
 800d280:	f001 f8be 	bl	800e400 <hci_notify_asynch_evt>
  }


  return;
 800d284:	bf00      	nop
 800d286:	bf00      	nop
}
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	20000228 	.word	0x20000228
 800d294:	20000234 	.word	0x20000234
 800d298:	20000740 	.word	0x20000740

0800d29c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b088      	sub	sp, #32
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	f000 f8d1 	bl	800d450 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	885b      	ldrh	r3, [r3, #2]
 800d2b6:	b21b      	sxth	r3, r3
 800d2b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2bc:	b21a      	sxth	r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	881b      	ldrh	r3, [r3, #0]
 800d2c2:	029b      	lsls	r3, r3, #10
 800d2c4:	b21b      	sxth	r3, r3
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	b21b      	sxth	r3, r3
 800d2ca:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800d2cc:	4b33      	ldr	r3, [pc, #204]	@ (800d39c <hci_send_req+0x100>)
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	b2d9      	uxtb	r1, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689a      	ldr	r2, [r3, #8]
 800d2dc:	8bbb      	ldrh	r3, [r7, #28]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 f890 	bl	800d404 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800d2e4:	e04e      	b.n	800d384 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800d2e6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800d2ea:	f001 f8a0 	bl	800e42e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d2ee:	e043      	b.n	800d378 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800d2f0:	f107 030c 	add.w	r3, r7, #12
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	482a      	ldr	r0, [pc, #168]	@ (800d3a0 <hci_send_req+0x104>)
 800d2f8:	f000 fdbf 	bl	800de7a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	7a5b      	ldrb	r3, [r3, #9]
 800d300:	2b0f      	cmp	r3, #15
 800d302:	d114      	bne.n	800d32e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	330b      	adds	r3, #11
 800d308:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	885b      	ldrh	r3, [r3, #2]
 800d30e:	b29b      	uxth	r3, r3
 800d310:	8bba      	ldrh	r2, [r7, #28]
 800d312:	429a      	cmp	r2, r3
 800d314:	d104      	bne.n	800d320 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	7812      	ldrb	r2, [r2, #0]
 800d31e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	785b      	ldrb	r3, [r3, #1]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d027      	beq.n	800d378 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d328:	2301      	movs	r3, #1
 800d32a:	77fb      	strb	r3, [r7, #31]
 800d32c:	e024      	b.n	800d378 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	330b      	adds	r3, #11
 800d332:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	8bba      	ldrh	r2, [r7, #28]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d114      	bne.n	800d36c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	7a9b      	ldrb	r3, [r3, #10]
 800d346:	3b03      	subs	r3, #3
 800d348:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	695a      	ldr	r2, [r3, #20]
 800d34e:	7dfb      	ldrb	r3, [r7, #23]
 800d350:	429a      	cmp	r2, r3
 800d352:	bfa8      	it	ge
 800d354:	461a      	movge	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6918      	ldr	r0, [r3, #16]
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	1cd9      	adds	r1, r3, #3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	695b      	ldr	r3, [r3, #20]
 800d366:	461a      	mov	r2, r3
 800d368:	f003 ff1f 	bl	80111aa <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800d374:	2301      	movs	r3, #1
 800d376:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800d378:	4809      	ldr	r0, [pc, #36]	@ (800d3a0 <hci_send_req+0x104>)
 800d37a:	f000 fcef 	bl	800dd5c <LST_is_empty>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d0b5      	beq.n	800d2f0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800d384:	7ffb      	ldrb	r3, [r7, #31]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d0ad      	beq.n	800d2e6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800d38a:	2001      	movs	r0, #1
 800d38c:	f000 f860 	bl	800d450 <NotifyCmdStatus>

  return 0;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3720      	adds	r7, #32
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	2000076c 	.word	0x2000076c
 800d3a0:	20000760 	.word	0x20000760

0800d3a4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b086      	sub	sp, #24
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800d3ac:	480f      	ldr	r0, [pc, #60]	@ (800d3ec <TlInit+0x48>)
 800d3ae:	f000 fcc5 	bl	800dd3c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800d3b2:	4a0f      	ldr	r2, [pc, #60]	@ (800d3f0 <TlInit+0x4c>)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800d3b8:	480e      	ldr	r0, [pc, #56]	@ (800d3f4 <TlInit+0x50>)
 800d3ba:	f000 fcbf 	bl	800dd3c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800d3be:	4b0e      	ldr	r3, [pc, #56]	@ (800d3f8 <TlInit+0x54>)
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800d3c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d3fc <TlInit+0x58>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00a      	beq.n	800d3e2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800d3d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d400 <TlInit+0x5c>)
 800d3d2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800d3d4:	4b09      	ldr	r3, [pc, #36]	@ (800d3fc <TlInit+0x58>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f107 0208 	add.w	r2, r7, #8
 800d3dc:	4610      	mov	r0, r2
 800d3de:	4798      	blx	r3
  }

  return;
 800d3e0:	bf00      	nop
 800d3e2:	bf00      	nop
}
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	20000760 	.word	0x20000760
 800d3f0:	20000230 	.word	0x20000230
 800d3f4:	20000228 	.word	0x20000228
 800d3f8:	20000234 	.word	0x20000234
 800d3fc:	20000740 	.word	0x20000740
 800d400:	0800d491 	.word	0x0800d491

0800d404 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	4603      	mov	r3, r0
 800d40c:	603a      	str	r2, [r7, #0]
 800d40e:	80fb      	strh	r3, [r7, #6]
 800d410:	460b      	mov	r3, r1
 800d412:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800d414:	4b0c      	ldr	r3, [pc, #48]	@ (800d448 <SendCmd+0x44>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	88fa      	ldrh	r2, [r7, #6]
 800d41a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800d41e:	4b0a      	ldr	r3, [pc, #40]	@ (800d448 <SendCmd+0x44>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	797a      	ldrb	r2, [r7, #5]
 800d424:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800d426:	4b08      	ldr	r3, [pc, #32]	@ (800d448 <SendCmd+0x44>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	330c      	adds	r3, #12
 800d42c:	797a      	ldrb	r2, [r7, #5]
 800d42e:	6839      	ldr	r1, [r7, #0]
 800d430:	4618      	mov	r0, r3
 800d432:	f003 feba 	bl	80111aa <memcpy>

  hciContext.io.Send(0,0);
 800d436:	4b05      	ldr	r3, [pc, #20]	@ (800d44c <SendCmd+0x48>)
 800d438:	691b      	ldr	r3, [r3, #16]
 800d43a:	2100      	movs	r1, #0
 800d43c:	2000      	movs	r0, #0
 800d43e:	4798      	blx	r3

  return;
 800d440:	bf00      	nop
}
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	20000230 	.word	0x20000230
 800d44c:	20000740 	.word	0x20000740

0800d450 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d108      	bne.n	800d472 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800d460:	4b0a      	ldr	r3, [pc, #40]	@ (800d48c <NotifyCmdStatus+0x3c>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00d      	beq.n	800d484 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800d468:	4b08      	ldr	r3, [pc, #32]	@ (800d48c <NotifyCmdStatus+0x3c>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2000      	movs	r0, #0
 800d46e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800d470:	e008      	b.n	800d484 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800d472:	4b06      	ldr	r3, [pc, #24]	@ (800d48c <NotifyCmdStatus+0x3c>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d004      	beq.n	800d484 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800d47a:	4b04      	ldr	r3, [pc, #16]	@ (800d48c <NotifyCmdStatus+0x3c>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2001      	movs	r0, #1
 800d480:	4798      	blx	r3
  return;
 800d482:	bf00      	nop
 800d484:	bf00      	nop
}
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	20000768 	.word	0x20000768

0800d490 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	7a5b      	ldrb	r3, [r3, #9]
 800d49c:	2b0f      	cmp	r3, #15
 800d49e:	d003      	beq.n	800d4a8 <TlEvtReceived+0x18>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	7a5b      	ldrb	r3, [r3, #9]
 800d4a4:	2b0e      	cmp	r3, #14
 800d4a6:	d107      	bne.n	800d4b8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800d4a8:	6879      	ldr	r1, [r7, #4]
 800d4aa:	4809      	ldr	r0, [pc, #36]	@ (800d4d0 <TlEvtReceived+0x40>)
 800d4ac:	f000 fc9e 	bl	800ddec <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	f000 ffb1 	bl	800e418 <hci_cmd_resp_release>
 800d4b6:	e006      	b.n	800d4c6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800d4b8:	6879      	ldr	r1, [r7, #4]
 800d4ba:	4806      	ldr	r0, [pc, #24]	@ (800d4d4 <TlEvtReceived+0x44>)
 800d4bc:	f000 fc96 	bl	800ddec <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d4c0:	4804      	ldr	r0, [pc, #16]	@ (800d4d4 <TlEvtReceived+0x44>)
 800d4c2:	f000 ff9d 	bl	800e400 <hci_notify_asynch_evt>
  }

  return;
 800d4c6:	bf00      	nop
}
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	20000760 	.word	0x20000760
 800d4d4:	20000228 	.word	0x20000228

0800d4d8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a05      	ldr	r2, [pc, #20]	@ (800d4f8 <hci_register_io_bus+0x20>)
 800d4e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	4a04      	ldr	r2, [pc, #16]	@ (800d4fc <hci_register_io_bus+0x24>)
 800d4ea:	611a      	str	r2, [r3, #16]

  return;
 800d4ec:	bf00      	nop
}
 800d4ee:	370c      	adds	r7, #12
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	0800d7f1 	.word	0x0800d7f1
 800d4fc:	0800d859 	.word	0x0800d859

0800d500 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	4a08      	ldr	r2, [pc, #32]	@ (800d530 <shci_init+0x30>)
 800d510:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800d512:	4a08      	ldr	r2, [pc, #32]	@ (800d534 <shci_init+0x34>)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800d518:	4806      	ldr	r0, [pc, #24]	@ (800d534 <shci_init+0x34>)
 800d51a:	f000 f915 	bl	800d748 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4618      	mov	r0, r3
 800d524:	f000 f898 	bl	800d658 <TlInit>

  return;
 800d528:	bf00      	nop
}
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	20000790 	.word	0x20000790
 800d534:	20000770 	.word	0x20000770

0800d538 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d53e:	4822      	ldr	r0, [pc, #136]	@ (800d5c8 <shci_user_evt_proc+0x90>)
 800d540:	f000 fc0c 	bl	800dd5c <LST_is_empty>
 800d544:	4603      	mov	r3, r0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d12b      	bne.n	800d5a2 <shci_user_evt_proc+0x6a>
 800d54a:	4b20      	ldr	r3, [pc, #128]	@ (800d5cc <shci_user_evt_proc+0x94>)
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d027      	beq.n	800d5a2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d552:	f107 030c 	add.w	r3, r7, #12
 800d556:	4619      	mov	r1, r3
 800d558:	481b      	ldr	r0, [pc, #108]	@ (800d5c8 <shci_user_evt_proc+0x90>)
 800d55a:	f000 fc8e 	bl	800de7a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800d55e:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d0 <shci_user_evt_proc+0x98>)
 800d560:	69db      	ldr	r3, [r3, #28]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00c      	beq.n	800d580 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800d56a:	2301      	movs	r3, #1
 800d56c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d56e:	4b18      	ldr	r3, [pc, #96]	@ (800d5d0 <shci_user_evt_proc+0x98>)
 800d570:	69db      	ldr	r3, [r3, #28]
 800d572:	1d3a      	adds	r2, r7, #4
 800d574:	4610      	mov	r0, r2
 800d576:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800d578:	793a      	ldrb	r2, [r7, #4]
 800d57a:	4b14      	ldr	r3, [pc, #80]	@ (800d5cc <shci_user_evt_proc+0x94>)
 800d57c:	701a      	strb	r2, [r3, #0]
 800d57e:	e002      	b.n	800d586 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d580:	4b12      	ldr	r3, [pc, #72]	@ (800d5cc <shci_user_evt_proc+0x94>)
 800d582:	2201      	movs	r2, #1
 800d584:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800d586:	4b11      	ldr	r3, [pc, #68]	@ (800d5cc <shci_user_evt_proc+0x94>)
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d004      	beq.n	800d598 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	4618      	mov	r0, r3
 800d592:	f000 fa71 	bl	800da78 <TL_MM_EvtDone>
 800d596:	e004      	b.n	800d5a2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	4619      	mov	r1, r3
 800d59c:	480a      	ldr	r0, [pc, #40]	@ (800d5c8 <shci_user_evt_proc+0x90>)
 800d59e:	f000 fbff 	bl	800dda0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d5a2:	4809      	ldr	r0, [pc, #36]	@ (800d5c8 <shci_user_evt_proc+0x90>)
 800d5a4:	f000 fbda 	bl	800dd5c <LST_is_empty>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d107      	bne.n	800d5be <shci_user_evt_proc+0x86>
 800d5ae:	4b07      	ldr	r3, [pc, #28]	@ (800d5cc <shci_user_evt_proc+0x94>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d003      	beq.n	800d5be <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800d5b6:	4804      	ldr	r0, [pc, #16]	@ (800d5c8 <shci_user_evt_proc+0x90>)
 800d5b8:	f7f5 fa2c 	bl	8002a14 <shci_notify_asynch_evt>
  }


  return;
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
}
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20000238 	.word	0x20000238
 800d5cc:	20000248 	.word	0x20000248
 800d5d0:	20000770 	.word	0x20000770

0800d5d4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60ba      	str	r2, [r7, #8]
 800d5dc:	607b      	str	r3, [r7, #4]
 800d5de:	4603      	mov	r3, r0
 800d5e0:	81fb      	strh	r3, [r7, #14]
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	f000 f868 	bl	800d6bc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d5ec:	4b17      	ldr	r3, [pc, #92]	@ (800d64c <shci_send+0x78>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	89fa      	ldrh	r2, [r7, #14]
 800d5f2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800d5f6:	4b15      	ldr	r3, [pc, #84]	@ (800d64c <shci_send+0x78>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	7b7a      	ldrb	r2, [r7, #13]
 800d5fc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d5fe:	4b13      	ldr	r3, [pc, #76]	@ (800d64c <shci_send+0x78>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	330c      	adds	r3, #12
 800d604:	7b7a      	ldrb	r2, [r7, #13]
 800d606:	68b9      	ldr	r1, [r7, #8]
 800d608:	4618      	mov	r0, r3
 800d60a:	f003 fdce 	bl	80111aa <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800d60e:	4b10      	ldr	r3, [pc, #64]	@ (800d650 <shci_send+0x7c>)
 800d610:	2201      	movs	r2, #1
 800d612:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800d614:	4b0f      	ldr	r3, [pc, #60]	@ (800d654 <shci_send+0x80>)
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	2100      	movs	r1, #0
 800d61a:	2000      	movs	r0, #0
 800d61c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800d61e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800d622:	f7f5 fa0e 	bl	8002a42 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f103 0008 	add.w	r0, r3, #8
 800d62c:	4b07      	ldr	r3, [pc, #28]	@ (800d64c <shci_send+0x78>)
 800d62e:	6819      	ldr	r1, [r3, #0]
 800d630:	4b06      	ldr	r3, [pc, #24]	@ (800d64c <shci_send+0x78>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	789b      	ldrb	r3, [r3, #2]
 800d636:	3303      	adds	r3, #3
 800d638:	461a      	mov	r2, r3
 800d63a:	f003 fdb6 	bl	80111aa <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d63e:	2001      	movs	r0, #1
 800d640:	f000 f83c 	bl	800d6bc <Cmd_SetStatus>

  return;
 800d644:	bf00      	nop
}
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20000244 	.word	0x20000244
 800d650:	20000794 	.word	0x20000794
 800d654:	20000770 	.word	0x20000770

0800d658 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800d660:	4a10      	ldr	r2, [pc, #64]	@ (800d6a4 <TlInit+0x4c>)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800d666:	4810      	ldr	r0, [pc, #64]	@ (800d6a8 <TlInit+0x50>)
 800d668:	f000 fb68 	bl	800dd3c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d66c:	2001      	movs	r0, #1
 800d66e:	f000 f825 	bl	800d6bc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d672:	4b0e      	ldr	r3, [pc, #56]	@ (800d6ac <TlInit+0x54>)
 800d674:	2201      	movs	r2, #1
 800d676:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800d678:	4b0d      	ldr	r3, [pc, #52]	@ (800d6b0 <TlInit+0x58>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00c      	beq.n	800d69a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800d684:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b4 <TlInit+0x5c>)
 800d686:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d688:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b8 <TlInit+0x60>)
 800d68a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800d68c:	4b08      	ldr	r3, [pc, #32]	@ (800d6b0 <TlInit+0x58>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f107 020c 	add.w	r2, r7, #12
 800d694:	4610      	mov	r0, r2
 800d696:	4798      	blx	r3
  }

  return;
 800d698:	bf00      	nop
 800d69a:	bf00      	nop
}
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20000244 	.word	0x20000244
 800d6a8:	20000238 	.word	0x20000238
 800d6ac:	20000248 	.word	0x20000248
 800d6b0:	20000770 	.word	0x20000770
 800d6b4:	0800d70d 	.word	0x0800d70d
 800d6b8:	0800d725 	.word	0x0800d725

0800d6bc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10b      	bne.n	800d6e4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800d6cc:	4b0d      	ldr	r3, [pc, #52]	@ (800d704 <Cmd_SetStatus+0x48>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d003      	beq.n	800d6dc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800d6d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d704 <Cmd_SetStatus+0x48>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2000      	movs	r0, #0
 800d6da:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d708 <Cmd_SetStatus+0x4c>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800d6e2:	e00b      	b.n	800d6fc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d6e4:	4b08      	ldr	r3, [pc, #32]	@ (800d708 <Cmd_SetStatus+0x4c>)
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800d6ea:	4b06      	ldr	r3, [pc, #24]	@ (800d704 <Cmd_SetStatus+0x48>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d004      	beq.n	800d6fc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d6f2:	4b04      	ldr	r3, [pc, #16]	@ (800d704 <Cmd_SetStatus+0x48>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2001      	movs	r0, #1
 800d6f8:	4798      	blx	r3
  return;
 800d6fa:	bf00      	nop
 800d6fc:	bf00      	nop
}
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	20000790 	.word	0x20000790
 800d708:	20000240 	.word	0x20000240

0800d70c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800d714:	2000      	movs	r0, #0
 800d716:	f7f5 f989 	bl	8002a2c <shci_cmd_resp_release>

  return;
 800d71a:	bf00      	nop
}
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
	...

0800d724 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800d72c:	6879      	ldr	r1, [r7, #4]
 800d72e:	4805      	ldr	r0, [pc, #20]	@ (800d744 <TlUserEvtReceived+0x20>)
 800d730:	f000 fb5c 	bl	800ddec <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d734:	4803      	ldr	r0, [pc, #12]	@ (800d744 <TlUserEvtReceived+0x20>)
 800d736:	f7f5 f96d 	bl	8002a14 <shci_notify_asynch_evt>

  return;
 800d73a:	bf00      	nop
}
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	20000238 	.word	0x20000238

0800d748 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a05      	ldr	r2, [pc, #20]	@ (800d768 <shci_register_io_bus+0x20>)
 800d754:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a04      	ldr	r2, [pc, #16]	@ (800d76c <shci_register_io_bus+0x24>)
 800d75a:	611a      	str	r2, [r3, #16]

  return;
 800d75c:	bf00      	nop
}
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr
 800d768:	0800d905 	.word	0x0800d905
 800d76c:	0800d959 	.word	0x0800d959

0800d770 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800d770:	b580      	push	{r7, lr}
 800d772:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800d774:	f001 f978 	bl	800ea68 <HW_IPCC_Enable>

  return;
 800d778:	bf00      	nop
}
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <TL_Init>:


void TL_Init( void )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800d780:	4b10      	ldr	r3, [pc, #64]	@ (800d7c4 <TL_Init+0x48>)
 800d782:	4a11      	ldr	r2, [pc, #68]	@ (800d7c8 <TL_Init+0x4c>)
 800d784:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800d786:	4b0f      	ldr	r3, [pc, #60]	@ (800d7c4 <TL_Init+0x48>)
 800d788:	4a10      	ldr	r2, [pc, #64]	@ (800d7cc <TL_Init+0x50>)
 800d78a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800d78c:	4b0d      	ldr	r3, [pc, #52]	@ (800d7c4 <TL_Init+0x48>)
 800d78e:	4a10      	ldr	r2, [pc, #64]	@ (800d7d0 <TL_Init+0x54>)
 800d790:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800d792:	4b0c      	ldr	r3, [pc, #48]	@ (800d7c4 <TL_Init+0x48>)
 800d794:	4a0f      	ldr	r2, [pc, #60]	@ (800d7d4 <TL_Init+0x58>)
 800d796:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800d798:	4b0a      	ldr	r3, [pc, #40]	@ (800d7c4 <TL_Init+0x48>)
 800d79a:	4a0f      	ldr	r2, [pc, #60]	@ (800d7d8 <TL_Init+0x5c>)
 800d79c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800d79e:	4b09      	ldr	r3, [pc, #36]	@ (800d7c4 <TL_Init+0x48>)
 800d7a0:	4a0e      	ldr	r2, [pc, #56]	@ (800d7dc <TL_Init+0x60>)
 800d7a2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800d7a4:	4b07      	ldr	r3, [pc, #28]	@ (800d7c4 <TL_Init+0x48>)
 800d7a6:	4a0e      	ldr	r2, [pc, #56]	@ (800d7e0 <TL_Init+0x64>)
 800d7a8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800d7aa:	4b06      	ldr	r3, [pc, #24]	@ (800d7c4 <TL_Init+0x48>)
 800d7ac:	4a0d      	ldr	r2, [pc, #52]	@ (800d7e4 <TL_Init+0x68>)
 800d7ae:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800d7b0:	4b04      	ldr	r3, [pc, #16]	@ (800d7c4 <TL_Init+0x48>)
 800d7b2:	4a0d      	ldr	r2, [pc, #52]	@ (800d7e8 <TL_Init+0x6c>)
 800d7b4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800d7b6:	4b03      	ldr	r3, [pc, #12]	@ (800d7c4 <TL_Init+0x48>)
 800d7b8:	4a0c      	ldr	r2, [pc, #48]	@ (800d7ec <TL_Init+0x70>)
 800d7ba:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800d7bc:	f001 f968 	bl	800ea90 <HW_IPCC_Init>

  return;
 800d7c0:	bf00      	nop
}
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	20030000 	.word	0x20030000
 800d7c8:	20030028 	.word	0x20030028
 800d7cc:	20030048 	.word	0x20030048
 800d7d0:	20030058 	.word	0x20030058
 800d7d4:	20030068 	.word	0x20030068
 800d7d8:	20030070 	.word	0x20030070
 800d7dc:	20030078 	.word	0x20030078
 800d7e0:	20030080 	.word	0x20030080
 800d7e4:	2003009c 	.word	0x2003009c
 800d7e8:	200300a0 	.word	0x200300a0
 800d7ec:	200300ac 	.word	0x200300ac

0800d7f0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800d7fc:	4811      	ldr	r0, [pc, #68]	@ (800d844 <TL_BLE_Init+0x54>)
 800d7fe:	f000 fa9d 	bl	800dd3c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800d802:	4b11      	ldr	r3, [pc, #68]	@ (800d848 <TL_BLE_Init+0x58>)
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	689a      	ldr	r2, [r3, #8]
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	68da      	ldr	r2, [r3, #12]
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	4a0c      	ldr	r2, [pc, #48]	@ (800d84c <TL_BLE_Init+0x5c>)
 800d81c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	4a08      	ldr	r2, [pc, #32]	@ (800d844 <TL_BLE_Init+0x54>)
 800d822:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800d824:	f001 f94a 	bl	800eabc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a08      	ldr	r2, [pc, #32]	@ (800d850 <TL_BLE_Init+0x60>)
 800d82e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	4a07      	ldr	r2, [pc, #28]	@ (800d854 <TL_BLE_Init+0x64>)
 800d836:	6013      	str	r3, [r2, #0]

  return 0;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	200300c8 	.word	0x200300c8
 800d848:	20030000 	.word	0x20030000
 800d84c:	20030a58 	.word	0x20030a58
 800d850:	200007a0 	.word	0x200007a0
 800d854:	200007a4 	.word	0x200007a4

0800d858 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800d864:	4b09      	ldr	r3, [pc, #36]	@ (800d88c <TL_BLE_SendCmd+0x34>)
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2201      	movs	r2, #1
 800d86c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800d86e:	4b07      	ldr	r3, [pc, #28]	@ (800d88c <TL_BLE_SendCmd+0x34>)
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4619      	mov	r1, r3
 800d876:	2001      	movs	r0, #1
 800d878:	f000 f96c 	bl	800db54 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800d87c:	f001 f928 	bl	800ead0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800d880:	2300      	movs	r3, #0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	20030000 	.word	0x20030000

0800d890 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800d896:	e01c      	b.n	800d8d2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800d898:	1d3b      	adds	r3, r7, #4
 800d89a:	4619      	mov	r1, r3
 800d89c:	4812      	ldr	r0, [pc, #72]	@ (800d8e8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800d89e:	f000 faec 	bl	800de7a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	7a5b      	ldrb	r3, [r3, #9]
 800d8a6:	2b0f      	cmp	r3, #15
 800d8a8:	d003      	beq.n	800d8b2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	7a5b      	ldrb	r3, [r3, #9]
 800d8ae:	2b0e      	cmp	r3, #14
 800d8b0:	d105      	bne.n	800d8be <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	2002      	movs	r0, #2
 800d8b8:	f000 f94c 	bl	800db54 <OutputDbgTrace>
 800d8bc:	e004      	b.n	800d8c8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	2003      	movs	r0, #3
 800d8c4:	f000 f946 	bl	800db54 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800d8c8:	4b08      	ldr	r3, [pc, #32]	@ (800d8ec <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d8d2:	4805      	ldr	r0, [pc, #20]	@ (800d8e8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800d8d4:	f000 fa42 	bl	800dd5c <LST_is_empty>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d0dc      	beq.n	800d898 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800d8de:	bf00      	nop
}
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	200300c8 	.word	0x200300c8
 800d8ec:	200007a0 	.word	0x200007a0

0800d8f0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800d8f4:	4b02      	ldr	r3, [pc, #8]	@ (800d900 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4798      	blx	r3

  return;
 800d8fa:	bf00      	nop
}
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	200007a4 	.word	0x200007a4

0800d904 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800d910:	480d      	ldr	r0, [pc, #52]	@ (800d948 <TL_SYS_Init+0x44>)
 800d912:	f000 fa13 	bl	800dd3c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800d916:	4b0d      	ldr	r3, [pc, #52]	@ (800d94c <TL_SYS_Init+0x48>)
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	689a      	ldr	r2, [r3, #8]
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	4a08      	ldr	r2, [pc, #32]	@ (800d948 <TL_SYS_Init+0x44>)
 800d928:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800d92a:	f001 f8f3 	bl	800eb14 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a07      	ldr	r2, [pc, #28]	@ (800d950 <TL_SYS_Init+0x4c>)
 800d934:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	4a06      	ldr	r2, [pc, #24]	@ (800d954 <TL_SYS_Init+0x50>)
 800d93c:	6013      	str	r3, [r2, #0]

  return 0;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	200300d0 	.word	0x200300d0
 800d94c:	20030000 	.word	0x20030000
 800d950:	200007a8 	.word	0x200007a8
 800d954:	200007ac 	.word	0x200007ac

0800d958 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800d964:	4b09      	ldr	r3, [pc, #36]	@ (800d98c <TL_SYS_SendCmd+0x34>)
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2210      	movs	r2, #16
 800d96c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800d96e:	4b07      	ldr	r3, [pc, #28]	@ (800d98c <TL_SYS_SendCmd+0x34>)
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4619      	mov	r1, r3
 800d976:	2004      	movs	r0, #4
 800d978:	f000 f8ec 	bl	800db54 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800d97c:	f001 f8d4 	bl	800eb28 <HW_IPCC_SYS_SendCmd>

  return 0;
 800d980:	2300      	movs	r3, #0
}
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20030000 	.word	0x20030000

0800d990 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d994:	4b07      	ldr	r3, [pc, #28]	@ (800d9b4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4619      	mov	r1, r3
 800d99c:	2005      	movs	r0, #5
 800d99e:	f000 f8d9 	bl	800db54 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d9a2:	4b05      	ldr	r3, [pc, #20]	@ (800d9b8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a03      	ldr	r2, [pc, #12]	@ (800d9b4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d9a8:	68d2      	ldr	r2, [r2, #12]
 800d9aa:	6812      	ldr	r2, [r2, #0]
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	4798      	blx	r3

  return;
 800d9b0:	bf00      	nop
}
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	20030000 	.word	0x20030000
 800d9b8:	200007a8 	.word	0x200007a8

0800d9bc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d9c2:	e00e      	b.n	800d9e2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d9c4:	1d3b      	adds	r3, r7, #4
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	480b      	ldr	r0, [pc, #44]	@ (800d9f8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800d9ca:	f000 fa56 	bl	800de7a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	2006      	movs	r0, #6
 800d9d4:	f000 f8be 	bl	800db54 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d9d8:	4b08      	ldr	r3, [pc, #32]	@ (800d9fc <HW_IPCC_SYS_EvtNot+0x40>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	4610      	mov	r0, r2
 800d9e0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d9e2:	4805      	ldr	r0, [pc, #20]	@ (800d9f8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800d9e4:	f000 f9ba 	bl	800dd5c <LST_is_empty>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d0ea      	beq.n	800d9c4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800d9ee:	bf00      	nop
}
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	200300d0 	.word	0x200300d0
 800d9fc:	200007ac 	.word	0x200007ac

0800da00 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800da08:	4817      	ldr	r0, [pc, #92]	@ (800da68 <TL_MM_Init+0x68>)
 800da0a:	f000 f997 	bl	800dd3c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800da0e:	4817      	ldr	r0, [pc, #92]	@ (800da6c <TL_MM_Init+0x6c>)
 800da10:	f000 f994 	bl	800dd3c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800da14:	4b16      	ldr	r3, [pc, #88]	@ (800da70 <TL_MM_Init+0x70>)
 800da16:	691b      	ldr	r3, [r3, #16]
 800da18:	4a16      	ldr	r2, [pc, #88]	@ (800da74 <TL_MM_Init+0x74>)
 800da1a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800da1c:	4b15      	ldr	r3, [pc, #84]	@ (800da74 <TL_MM_Init+0x74>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	6892      	ldr	r2, [r2, #8]
 800da24:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800da26:	4b13      	ldr	r3, [pc, #76]	@ (800da74 <TL_MM_Init+0x74>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	68d2      	ldr	r2, [r2, #12]
 800da2e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800da30:	4b10      	ldr	r3, [pc, #64]	@ (800da74 <TL_MM_Init+0x74>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a0c      	ldr	r2, [pc, #48]	@ (800da68 <TL_MM_Init+0x68>)
 800da36:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800da38:	4b0e      	ldr	r3, [pc, #56]	@ (800da74 <TL_MM_Init+0x74>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	6812      	ldr	r2, [r2, #0]
 800da40:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800da42:	4b0c      	ldr	r3, [pc, #48]	@ (800da74 <TL_MM_Init+0x74>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	6852      	ldr	r2, [r2, #4]
 800da4a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800da4c:	4b09      	ldr	r3, [pc, #36]	@ (800da74 <TL_MM_Init+0x74>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	6912      	ldr	r2, [r2, #16]
 800da54:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800da56:	4b07      	ldr	r3, [pc, #28]	@ (800da74 <TL_MM_Init+0x74>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	6952      	ldr	r2, [r2, #20]
 800da5e:	619a      	str	r2, [r3, #24]

  return;
 800da60:	bf00      	nop
}
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	200300b8 	.word	0x200300b8
 800da6c:	20000798 	.word	0x20000798
 800da70:	20030000 	.word	0x20030000
 800da74:	200007b0 	.word	0x200007b0

0800da78 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800da80:	6879      	ldr	r1, [r7, #4]
 800da82:	4807      	ldr	r0, [pc, #28]	@ (800daa0 <TL_MM_EvtDone+0x28>)
 800da84:	f000 f9b2 	bl	800ddec <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800da88:	6879      	ldr	r1, [r7, #4]
 800da8a:	2000      	movs	r0, #0
 800da8c:	f000 f862 	bl	800db54 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800da90:	4804      	ldr	r0, [pc, #16]	@ (800daa4 <TL_MM_EvtDone+0x2c>)
 800da92:	f001 f86f 	bl	800eb74 <HW_IPCC_MM_SendFreeBuf>

  return;
 800da96:	bf00      	nop
}
 800da98:	3708      	adds	r7, #8
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	20000798 	.word	0x20000798
 800daa4:	0800daa9 	.word	0x0800daa9

0800daa8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800daae:	e00c      	b.n	800daca <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800dab0:	1d3b      	adds	r3, r7, #4
 800dab2:	4619      	mov	r1, r3
 800dab4:	480a      	ldr	r0, [pc, #40]	@ (800dae0 <SendFreeBuf+0x38>)
 800dab6:	f000 f9e0 	bl	800de7a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800daba:	4b0a      	ldr	r3, [pc, #40]	@ (800dae4 <SendFreeBuf+0x3c>)
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	4611      	mov	r1, r2
 800dac4:	4618      	mov	r0, r3
 800dac6:	f000 f991 	bl	800ddec <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800daca:	4805      	ldr	r0, [pc, #20]	@ (800dae0 <SendFreeBuf+0x38>)
 800dacc:	f000 f946 	bl	800dd5c <LST_is_empty>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0ec      	beq.n	800dab0 <SendFreeBuf+0x8>
  }

  return;
 800dad6:	bf00      	nop
}
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	20000798 	.word	0x20000798
 800dae4:	20030000 	.word	0x20030000

0800dae8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800daec:	4805      	ldr	r0, [pc, #20]	@ (800db04 <TL_TRACES_Init+0x1c>)
 800daee:	f000 f925 	bl	800dd3c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800daf2:	4b05      	ldr	r3, [pc, #20]	@ (800db08 <TL_TRACES_Init+0x20>)
 800daf4:	695b      	ldr	r3, [r3, #20]
 800daf6:	4a03      	ldr	r2, [pc, #12]	@ (800db04 <TL_TRACES_Init+0x1c>)
 800daf8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800dafa:	f001 f871 	bl	800ebe0 <HW_IPCC_TRACES_Init>

  return;
 800dafe:	bf00      	nop
}
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	200300c0 	.word	0x200300c0
 800db08:	20030000 	.word	0x20030000

0800db0c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800db12:	e008      	b.n	800db26 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800db14:	1d3b      	adds	r3, r7, #4
 800db16:	4619      	mov	r1, r3
 800db18:	4808      	ldr	r0, [pc, #32]	@ (800db3c <HW_IPCC_TRACES_EvtNot+0x30>)
 800db1a:	f000 f9ae 	bl	800de7a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4618      	mov	r0, r3
 800db22:	f000 f80d 	bl	800db40 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800db26:	4805      	ldr	r0, [pc, #20]	@ (800db3c <HW_IPCC_TRACES_EvtNot+0x30>)
 800db28:	f000 f918 	bl	800dd5c <LST_is_empty>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d0f0      	beq.n	800db14 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800db32:	bf00      	nop
}
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	200300c0 	.word	0x200300c0

0800db40 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800db48:	bf00      	nop
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	4603      	mov	r3, r0
 800db5c:	6039      	str	r1, [r7, #0]
 800db5e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800db60:	79fb      	ldrb	r3, [r7, #7]
 800db62:	2b06      	cmp	r3, #6
 800db64:	d845      	bhi.n	800dbf2 <OutputDbgTrace+0x9e>
 800db66:	a201      	add	r2, pc, #4	@ (adr r2, 800db6c <OutputDbgTrace+0x18>)
 800db68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6c:	0800db89 	.word	0x0800db89
 800db70:	0800dbad 	.word	0x0800dbad
 800db74:	0800dbb3 	.word	0x0800dbb3
 800db78:	0800dbc7 	.word	0x0800dbc7
 800db7c:	0800dbd3 	.word	0x0800dbd3
 800db80:	0800dbd9 	.word	0x0800dbd9
 800db84:	0800dbe7 	.word	0x0800dbe7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	7a5b      	ldrb	r3, [r3, #9]
 800db90:	2bff      	cmp	r3, #255	@ 0xff
 800db92:	d005      	beq.n	800dba0 <OutputDbgTrace+0x4c>
 800db94:	2bff      	cmp	r3, #255	@ 0xff
 800db96:	dc05      	bgt.n	800dba4 <OutputDbgTrace+0x50>
 800db98:	2b0e      	cmp	r3, #14
 800db9a:	d005      	beq.n	800dba8 <OutputDbgTrace+0x54>
 800db9c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800db9e:	e001      	b.n	800dba4 <OutputDbgTrace+0x50>
          break;
 800dba0:	bf00      	nop
 800dba2:	e027      	b.n	800dbf4 <OutputDbgTrace+0xa0>
          break;
 800dba4:	bf00      	nop
 800dba6:	e025      	b.n	800dbf4 <OutputDbgTrace+0xa0>
          break;
 800dba8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800dbaa:	e023      	b.n	800dbf4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800dbb0:	e020      	b.n	800dbf4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	7a5b      	ldrb	r3, [r3, #9]
 800dbba:	2b0e      	cmp	r3, #14
 800dbbc:	d001      	beq.n	800dbc2 <OutputDbgTrace+0x6e>
 800dbbe:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800dbc0:	e000      	b.n	800dbc4 <OutputDbgTrace+0x70>
          break;
 800dbc2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dbc4:	e016      	b.n	800dbf4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	7a5b      	ldrb	r3, [r3, #9]
 800dbce:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dbd0:	e010      	b.n	800dbf4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800dbd6:	e00d      	b.n	800dbf4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	7a5b      	ldrb	r3, [r3, #9]
 800dbe0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800dbe2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dbe4:	e006      	b.n	800dbf4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	7a5b      	ldrb	r3, [r3, #9]
 800dbee:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800dbf0:	e000      	b.n	800dbf4 <OutputDbgTrace+0xa0>

    default:
      break;
 800dbf2:	bf00      	nop
  }

  return;
 800dbf4:	bf00      	nop
}
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc06:	f3ef 8310 	mrs	r3, PRIMASK
 800dc0a:	607b      	str	r3, [r7, #4]
  return(result);
 800dc0c:	687b      	ldr	r3, [r7, #4]
    DbgTracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }

#else
  BACKUP_PRIMASK();
 800dc0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc10:	b672      	cpsid	i
}
 800dc12:	bf00      	nop

  DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  DbgTracePeripheralReady = SET;
 800dc14:	4b07      	ldr	r3, [pc, #28]	@ (800dc34 <DbgTrace_TxCpltCallback+0x34>)
 800dc16:	2201      	movs	r2, #1
 800dc18:	701a      	strb	r2, [r3, #0]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	f383 8810 	msr	PRIMASK, r3
}
 800dc24:	bf00      	nop

  RESTORE_PRIMASK();
#endif
}
 800dc26:	bf00      	nop
 800dc28:	3714      	adds	r7, #20
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	2000001d 	.word	0x2000001d

0800dc38 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	af00      	add	r7, sp, #0
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800dc3c:	f7f4 fc9b 	bl	8002576 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
#endif 
#endif
  return;
 800dc40:	bf00      	nop
}
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	68b9      	ldr	r1, [r7, #8]
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f000 f805 	bl	800dc64 <DbgTraceWrite>
 800dc5a:	4603      	mov	r3, r0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b088      	sub	sp, #32
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800dc70:	2300      	movs	r3, #0
 800dc72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc74:	f3ef 8310 	mrs	r3, PRIMASK
 800dc78:	617b      	str	r3, [r7, #20]
  return(result);
 800dc7a:	697b      	ldr	r3, [r7, #20]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800dc7c:	61bb      	str	r3, [r7, #24]

  /* Ignore flushes */
  if ( handle == -1 )
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc84:	d102      	bne.n	800dc8c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800dc86:	2300      	movs	r3, #0
 800dc88:	61fb      	str	r3, [r7, #28]
 800dc8a:	e026      	b.n	800dcda <DbgTraceWrite+0x76>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d006      	beq.n	800dca0 <DbgTraceWrite+0x3c>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d003      	beq.n	800dca0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800dc98:	f04f 33ff 	mov.w	r3, #4294967295
 800dc9c:	61fb      	str	r3, [r7, #28]
 800dc9e:	e01c      	b.n	800dcda <DbgTraceWrite+0x76>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d019      	beq.n	800dcda <DbgTraceWrite+0x76>
  {
    chars_written = bufSize;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800dcaa:	b672      	cpsid	i
}
 800dcac:	bf00      	nop
    {
      RESTORE_PRIMASK();
    }
#else
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    DbgTracePeripheralReady = RESET;
 800dcae:	4b0d      	ldr	r3, [pc, #52]	@ (800dce4 <DbgTraceWrite+0x80>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	701a      	strb	r2, [r3, #0]
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	f383 8810 	msr	PRIMASK, r3
}
 800dcbe:	bf00      	nop
    RESTORE_PRIMASK();

    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	4a08      	ldr	r2, [pc, #32]	@ (800dce8 <DbgTraceWrite+0x84>)
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	68b8      	ldr	r0, [r7, #8]
 800dcca:	f7f4 fc5a 	bl	8002582 <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
 800dcce:	bf00      	nop
 800dcd0:	4b04      	ldr	r3, [pc, #16]	@ (800dce4 <DbgTraceWrite+0x80>)
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d0fa      	beq.n	800dcd0 <DbgTraceWrite+0x6c>
#endif
    /* CS END */
  }
  return ( chars_written );
 800dcda:	69fb      	ldr	r3, [r7, #28]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3720      	adds	r7, #32
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	2000001d 	.word	0x2000001d
 800dce8:	0800dc01 	.word	0x0800dc01

0800dcec <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800dcf6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd34 <OTP_Read+0x48>)
 800dcf8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800dcfa:	e002      	b.n	800dd02 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	3b08      	subs	r3, #8
 800dd00:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3307      	adds	r3, #7
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	79fa      	ldrb	r2, [r7, #7]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d003      	beq.n	800dd16 <OTP_Read+0x2a>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	4a09      	ldr	r2, [pc, #36]	@ (800dd38 <OTP_Read+0x4c>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d1f2      	bne.n	800dcfc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	3307      	adds	r3, #7
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	79fa      	ldrb	r2, [r7, #7]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d001      	beq.n	800dd26 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800dd22:	2300      	movs	r3, #0
 800dd24:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800dd26:	68fb      	ldr	r3, [r7, #12]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	1fff73f8 	.word	0x1fff73f8
 800dd38:	1fff7000 	.word	0x1fff7000

0800dd3c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	605a      	str	r2, [r3, #4]
}
 800dd50:	bf00      	nop
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b087      	sub	sp, #28
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd64:	f3ef 8310 	mrs	r3, PRIMASK
 800dd68:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800dd6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd6e:	b672      	cpsid	i
}
 800dd70:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d102      	bne.n	800dd82 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	75fb      	strb	r3, [r7, #23]
 800dd80:	e001      	b.n	800dd86 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800dd82:	2300      	movs	r3, #0
 800dd84:	75fb      	strb	r3, [r7, #23]
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	f383 8810 	msr	PRIMASK, r3
}
 800dd90:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	371c      	adds	r7, #28
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b087      	sub	sp, #28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddaa:	f3ef 8310 	mrs	r3, PRIMASK
 800ddae:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ddb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ddb4:	b672      	cpsid	i
}
 800ddb6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	683a      	ldr	r2, [r7, #0]
 800ddd2:	605a      	str	r2, [r3, #4]
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	f383 8810 	msr	PRIMASK, r3
}
 800ddde:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800dde0:	bf00      	nop
 800dde2:	371c      	adds	r7, #28
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b087      	sub	sp, #28
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddf6:	f3ef 8310 	mrs	r3, PRIMASK
 800ddfa:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ddfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de00:	b672      	cpsid	i
}
 800de02:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	685a      	ldr	r2, [r3, #4]
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	683a      	ldr	r2, [r7, #0]
 800de1e:	601a      	str	r2, [r3, #0]
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	f383 8810 	msr	PRIMASK, r3
}
 800de2a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800de2c:	bf00      	nop
 800de2e:	371c      	adds	r7, #28
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800de38:	b480      	push	{r7}
 800de3a:	b087      	sub	sp, #28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de40:	f3ef 8310 	mrs	r3, PRIMASK
 800de44:	60fb      	str	r3, [r7, #12]
  return(result);
 800de46:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800de48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de4a:	b672      	cpsid	i
}
 800de4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	6812      	ldr	r2, [r2, #0]
 800de56:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	6852      	ldr	r2, [r2, #4]
 800de60:	605a      	str	r2, [r3, #4]
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	f383 8810 	msr	PRIMASK, r3
}
 800de6c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800de6e:	bf00      	nop
 800de70:	371c      	adds	r7, #28
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr

0800de7a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b086      	sub	sp, #24
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de84:	f3ef 8310 	mrs	r3, PRIMASK
 800de88:	60fb      	str	r3, [r7, #12]
  return(result);
 800de8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800de8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800de8e:	b672      	cpsid	i
}
 800de90:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7ff ffca 	bl	800de38 <LST_remove_node>
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	f383 8810 	msr	PRIMASK, r3
}
 800deae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800deb0:	bf00      	nop
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800deb8:	b480      	push	{r7}
 800deba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800debc:	4b03      	ldr	r3, [pc, #12]	@ (800decc <LL_FLASH_GetUDN+0x14>)
 800debe:	681b      	ldr	r3, [r3, #0]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	1fff7580 	.word	0x1fff7580

0800ded0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800ded0:	b480      	push	{r7}
 800ded2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800ded4:	4b03      	ldr	r3, [pc, #12]	@ (800dee4 <LL_FLASH_GetDeviceID+0x14>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	b2db      	uxtb	r3, r3
}
 800deda:	4618      	mov	r0, r3
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr
 800dee4:	1fff7584 	.word	0x1fff7584

0800dee8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800dee8:	b480      	push	{r7}
 800deea:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800deec:	4b03      	ldr	r3, [pc, #12]	@ (800defc <LL_FLASH_GetSTCompanyID+0x14>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	0a1b      	lsrs	r3, r3, #8
}
 800def2:	4618      	mov	r0, r3
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	1fff7584 	.word	0x1fff7584

0800df00 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800df00:	b5b0      	push	{r4, r5, r7, lr}
 800df02:	b090      	sub	sp, #64	@ 0x40
 800df04:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800df06:	2392      	movs	r3, #146	@ 0x92
 800df08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800df0c:	4b25      	ldr	r3, [pc, #148]	@ (800dfa4 <APP_BLE_Init+0xa4>)
 800df0e:	1d3c      	adds	r4, r7, #4
 800df10:	461d      	mov	r5, r3
 800df12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800df22:	c403      	stmia	r4!, {r0, r1}
 800df24:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800df26:	f000 f913 	bl	800e150 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800df2a:	2101      	movs	r1, #1
 800df2c:	2002      	movs	r0, #2
 800df2e:	f000 fe7f 	bl	800ec30 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800df32:	4a1d      	ldr	r2, [pc, #116]	@ (800dfa8 <APP_BLE_Init+0xa8>)
 800df34:	2100      	movs	r1, #0
 800df36:	2002      	movs	r0, #2
 800df38:	f000 ffa6 	bl	800ee88 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800df3c:	1d3b      	adds	r3, r7, #4
 800df3e:	4618      	mov	r0, r3
 800df40:	f7ff f850 	bl	800cfe4 <SHCI_C2_BLE_Init>
 800df44:	4603      	mov	r3, r0
 800df46:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800df4a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d001      	beq.n	800df56 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800df52:	f7f5 ff7b 	bl	8003e4c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800df56:	f000 f911 	bl	800e17c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800df5a:	f7fe ff9d 	bl	800ce98 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800df5e:	4b13      	ldr	r3, [pc, #76]	@ (800dfac <APP_BLE_Init+0xac>)
 800df60:	2200      	movs	r2, #0
 800df62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800df66:	4b11      	ldr	r3, [pc, #68]	@ (800dfac <APP_BLE_Init+0xac>)
 800df68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df6c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800df6e:	4a10      	ldr	r2, [pc, #64]	@ (800dfb0 <APP_BLE_Init+0xb0>)
 800df70:	2100      	movs	r1, #0
 800df72:	2001      	movs	r0, #1
 800df74:	f000 ff88 	bl	800ee88 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800df78:	2006      	movs	r0, #6
 800df7a:	f7fe fe01 	bl	800cb80 <aci_hal_set_radio_activity_mask>
 800df7e:	4603      	mov	r3, r0
 800df80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800df84:	f000 fac5 	bl	800e512 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800df88:	4b08      	ldr	r3, [pc, #32]	@ (800dfac <APP_BLE_Init+0xac>)
 800df8a:	2200      	movs	r2, #0
 800df8c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800df8e:	4b07      	ldr	r3, [pc, #28]	@ (800dfac <APP_BLE_Init+0xac>)
 800df90:	2200      	movs	r2, #0
 800df92:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800df94:	2001      	movs	r0, #1
 800df96:	f000 f9a5 	bl	800e2e4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800df9a:	bf00      	nop
}
 800df9c:	3740      	adds	r7, #64	@ 0x40
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bdb0      	pop	{r4, r5, r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	08013a7c 	.word	0x08013a7c
 800dfa8:	0800d201 	.word	0x0800d201
 800dfac:	200007bc 	.word	0x200007bc
 800dfb0:	0800e3cd 	.word	0x0800e3cd

0800dfb4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b08a      	sub	sp, #40	@ 0x28
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800dfbc:	2392      	movs	r3, #146	@ 0x92
 800dfbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800dfc8:	6a3b      	ldr	r3, [r7, #32]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	2bff      	cmp	r3, #255	@ 0xff
 800dfce:	d053      	beq.n	800e078 <SVCCTL_App_Notification+0xc4>
 800dfd0:	2bff      	cmp	r3, #255	@ 0xff
 800dfd2:	f300 80af 	bgt.w	800e134 <SVCCTL_App_Notification+0x180>
 800dfd6:	2b05      	cmp	r3, #5
 800dfd8:	d002      	beq.n	800dfe0 <SVCCTL_App_Notification+0x2c>
 800dfda:	2b3e      	cmp	r3, #62	@ 0x3e
 800dfdc:	d020      	beq.n	800e020 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800dfde:	e0a9      	b.n	800e134 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800dfe0:	6a3b      	ldr	r3, [r7, #32]
 800dfe2:	3302      	adds	r3, #2
 800dfe4:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	4b55      	ldr	r3, [pc, #340]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800dff0:	8adb      	ldrh	r3, [r3, #22]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d106      	bne.n	800e004 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800dff6:	4b53      	ldr	r3, [pc, #332]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800dffc:	4b51      	ldr	r3, [pc, #324]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800dffe:	2200      	movs	r2, #0
 800e000:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800e004:	2001      	movs	r0, #1
 800e006:	f000 f96d 	bl	800e2e4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800e00a:	4b4f      	ldr	r3, [pc, #316]	@ (800e148 <SVCCTL_App_Notification+0x194>)
 800e00c:	2201      	movs	r2, #1
 800e00e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e010:	4b4c      	ldr	r3, [pc, #304]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800e012:	8ada      	ldrh	r2, [r3, #22]
 800e014:	4b4c      	ldr	r3, [pc, #304]	@ (800e148 <SVCCTL_App_Notification+0x194>)
 800e016:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800e018:	484b      	ldr	r0, [pc, #300]	@ (800e148 <SVCCTL_App_Notification+0x194>)
 800e01a:	f000 fa66 	bl	800e4ea <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800e01e:	e08c      	b.n	800e13a <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800e020:	6a3b      	ldr	r3, [r7, #32]
 800e022:	3302      	adds	r3, #2
 800e024:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d001      	beq.n	800e032 <SVCCTL_App_Notification+0x7e>
 800e02e:	2b03      	cmp	r3, #3
          break;
 800e030:	e021      	b.n	800e076 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	3301      	adds	r3, #1
 800e036:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800e038:	4b42      	ldr	r3, [pc, #264]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800e03a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e03e:	2b04      	cmp	r3, #4
 800e040:	d104      	bne.n	800e04c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800e042:	4b40      	ldr	r3, [pc, #256]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800e044:	2206      	movs	r2, #6
 800e046:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800e04a:	e003      	b.n	800e054 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800e04c:	4b3d      	ldr	r3, [pc, #244]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800e04e:	2205      	movs	r2, #5
 800e050:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	4b39      	ldr	r3, [pc, #228]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800e05e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800e060:	4b39      	ldr	r3, [pc, #228]	@ (800e148 <SVCCTL_App_Notification+0x194>)
 800e062:	2200      	movs	r2, #0
 800e064:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800e066:	4b37      	ldr	r3, [pc, #220]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800e068:	8ada      	ldrh	r2, [r3, #22]
 800e06a:	4b37      	ldr	r3, [pc, #220]	@ (800e148 <SVCCTL_App_Notification+0x194>)
 800e06c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800e06e:	4836      	ldr	r0, [pc, #216]	@ (800e148 <SVCCTL_App_Notification+0x194>)
 800e070:	f000 fa3b 	bl	800e4ea <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800e074:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800e076:	e060      	b.n	800e13a <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800e078:	6a3b      	ldr	r3, [r7, #32]
 800e07a:	3302      	adds	r3, #2
 800e07c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	881b      	ldrh	r3, [r3, #0]
 800e082:	b29b      	uxth	r3, r3
 800e084:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800e088:	4293      	cmp	r3, r2
 800e08a:	d047      	beq.n	800e11c <SVCCTL_App_Notification+0x168>
 800e08c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800e090:	4293      	cmp	r3, r2
 800e092:	dc51      	bgt.n	800e138 <SVCCTL_App_Notification+0x184>
 800e094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e098:	d046      	beq.n	800e128 <SVCCTL_App_Notification+0x174>
 800e09a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e09e:	dc4b      	bgt.n	800e138 <SVCCTL_App_Notification+0x184>
 800e0a0:	2b04      	cmp	r3, #4
 800e0a2:	d043      	beq.n	800e12c <SVCCTL_App_Notification+0x178>
 800e0a4:	2b04      	cmp	r3, #4
 800e0a6:	db47      	blt.n	800e138 <SVCCTL_App_Notification+0x184>
 800e0a8:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	dc43      	bgt.n	800e138 <SVCCTL_App_Notification+0x184>
 800e0b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0b4:	dd40      	ble.n	800e138 <SVCCTL_App_Notification+0x184>
 800e0b6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800e0ba:	2b09      	cmp	r3, #9
 800e0bc:	d83c      	bhi.n	800e138 <SVCCTL_App_Notification+0x184>
 800e0be:	a201      	add	r2, pc, #4	@ (adr r2, 800e0c4 <SVCCTL_App_Notification+0x110>)
 800e0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c4:	0800e115 	.word	0x0800e115
 800e0c8:	0800e0ed 	.word	0x0800e0ed
 800e0cc:	0800e139 	.word	0x0800e139
 800e0d0:	0800e139 	.word	0x0800e139
 800e0d4:	0800e139 	.word	0x0800e139
 800e0d8:	0800e139 	.word	0x0800e139
 800e0dc:	0800e131 	.word	0x0800e131
 800e0e0:	0800e139 	.word	0x0800e139
 800e0e4:	0800e101 	.word	0x0800e101
 800e0e8:	0800e131 	.word	0x0800e131
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800e0ec:	4b15      	ldr	r3, [pc, #84]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800e0ee:	8adb      	ldrh	r3, [r3, #22]
 800e0f0:	4916      	ldr	r1, [pc, #88]	@ (800e14c <SVCCTL_App_Notification+0x198>)
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fd ff46 	bl	800bf84 <aci_gap_pass_key_resp>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800e0fe:	e018      	b.n	800e132 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800e100:	4b10      	ldr	r3, [pc, #64]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800e102:	8adb      	ldrh	r3, [r3, #22]
 800e104:	2101      	movs	r1, #1
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe f8e6 	bl	800c2d8 <aci_gap_numeric_comparison_value_confirm_yesno>
 800e10c:	4603      	mov	r3, r0
 800e10e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800e112:	e00e      	b.n	800e132 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	3302      	adds	r3, #2
 800e118:	61bb      	str	r3, [r7, #24]
          break;
 800e11a:	e00a      	b.n	800e132 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800e11c:	4b09      	ldr	r3, [pc, #36]	@ (800e144 <SVCCTL_App_Notification+0x190>)
 800e11e:	8adb      	ldrh	r3, [r3, #22]
 800e120:	4618      	mov	r0, r3
 800e122:	f7fe fbec 	bl	800c8fe <aci_gatt_confirm_indication>
        break;
 800e126:	e004      	b.n	800e132 <SVCCTL_App_Notification+0x17e>
          break;
 800e128:	bf00      	nop
 800e12a:	e005      	b.n	800e138 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800e12c:	bf00      	nop
 800e12e:	e003      	b.n	800e138 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800e130:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e132:	e001      	b.n	800e138 <SVCCTL_App_Notification+0x184>
      break;
 800e134:	bf00      	nop
 800e136:	e000      	b.n	800e13a <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e138:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800e13a:	2301      	movs	r3, #1
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3728      	adds	r7, #40	@ 0x28
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	200007bc 	.word	0x200007bc
 800e148:	20000840 	.word	0x20000840
 800e14c:	0001b207 	.word	0x0001b207

0800e150 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800e156:	4b06      	ldr	r3, [pc, #24]	@ (800e170 <Ble_Tl_Init+0x20>)
 800e158:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800e15a:	4b06      	ldr	r3, [pc, #24]	@ (800e174 <Ble_Tl_Init+0x24>)
 800e15c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800e15e:	463b      	mov	r3, r7
 800e160:	4619      	mov	r1, r3
 800e162:	4805      	ldr	r0, [pc, #20]	@ (800e178 <Ble_Tl_Init+0x28>)
 800e164:	f7ff f830 	bl	800d1c8 <hci_init>

  return;
 800e168:	bf00      	nop
}
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	200300d8 	.word	0x200300d8
 800e174:	0800e47d 	.word	0x0800e47d
 800e178:	0800e445 	.word	0x0800e445

0800e17c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800e17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e17e:	b08d      	sub	sp, #52	@ 0x34
 800e180:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800e182:	2300      	movs	r3, #0
 800e184:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e186:	2392      	movs	r3, #146	@ 0x92
 800e188:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800e18a:	f7fe fd4d 	bl	800cc28 <hci_reset>
 800e18e:	4603      	mov	r3, r0
 800e190:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800e192:	f000 f8d7 	bl	800e344 <BleGetBdAddress>
 800e196:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	2106      	movs	r1, #6
 800e19c:	2000      	movs	r0, #0
 800e19e:	f7fe fc03 	bl	800c9a8 <aci_hal_write_config_data>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800e1a6:	4a4a      	ldr	r2, [pc, #296]	@ (800e2d0 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800e1a8:	2110      	movs	r1, #16
 800e1aa:	2018      	movs	r0, #24
 800e1ac:	f7fe fbfc 	bl	800c9a8 <aci_hal_write_config_data>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800e1b4:	4a47      	ldr	r2, [pc, #284]	@ (800e2d4 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800e1b6:	2110      	movs	r1, #16
 800e1b8:	2008      	movs	r0, #8
 800e1ba:	f7fe fbf5 	bl	800c9a8 <aci_hal_write_config_data>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800e1c2:	2118      	movs	r1, #24
 800e1c4:	2001      	movs	r0, #1
 800e1c6:	f7fe fc74 	bl	800cab2 <aci_hal_set_tx_power_level>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800e1ce:	f7fe f8ea 	bl	800c3a6 <aci_gatt_init>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800e1da:	7bfb      	ldrb	r3, [r7, #15]
 800e1dc:	f043 0301 	orr.w	r3, r3, #1
 800e1e0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800e1e2:	7bfb      	ldrb	r3, [r7, #15]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d01f      	beq.n	800e228 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800e1e8:	4b3b      	ldr	r3, [pc, #236]	@ (800e2d8 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800e1ea:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800e1ec:	1dba      	adds	r2, r7, #6
 800e1ee:	7bf8      	ldrb	r0, [r7, #15]
 800e1f0:	1cbb      	adds	r3, r7, #2
 800e1f2:	9301      	str	r3, [sp, #4]
 800e1f4:	1d3b      	adds	r3, r7, #4
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	2208      	movs	r2, #8
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	f7fd ff28 	bl	800c052 <aci_gap_init>
 800e202:	4603      	mov	r3, r0
 800e204:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800e206:	88fc      	ldrh	r4, [r7, #6]
 800e208:	88bd      	ldrh	r5, [r7, #4]
 800e20a:	68b8      	ldr	r0, [r7, #8]
 800e20c:	f7f2 f818 	bl	8000240 <strlen>
 800e210:	4603      	mov	r3, r0
 800e212:	b2da      	uxtb	r2, r3
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	4613      	mov	r3, r2
 800e21a:	2200      	movs	r2, #0
 800e21c:	4629      	mov	r1, r5
 800e21e:	4620      	mov	r0, r4
 800e220:	f7fe fac4 	bl	800c7ac <aci_gatt_update_char_value>
 800e224:	4603      	mov	r3, r0
 800e226:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800e228:	88f8      	ldrh	r0, [r7, #6]
 800e22a:	8879      	ldrh	r1, [r7, #2]
 800e22c:	463b      	mov	r3, r7
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	2302      	movs	r3, #2
 800e232:	2200      	movs	r2, #0
 800e234:	f7fe faba 	bl	800c7ac <aci_gatt_update_char_value>
 800e238:	4603      	mov	r3, r0
 800e23a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800e23c:	2202      	movs	r2, #2
 800e23e:	2102      	movs	r1, #2
 800e240:	2000      	movs	r0, #0
 800e242:	f7fe fd15 	bl	800cc70 <hci_le_set_default_phy>
 800e246:	4603      	mov	r3, r0
 800e248:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800e24a:	4b24      	ldr	r3, [pc, #144]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e24c:	2201      	movs	r2, #1
 800e24e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800e250:	4b22      	ldr	r3, [pc, #136]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	4618      	mov	r0, r3
 800e256:	f7fd fd7d 	bl	800bd54 <aci_gap_set_io_capability>
 800e25a:	4603      	mov	r3, r0
 800e25c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800e25e:	4b1f      	ldr	r3, [pc, #124]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e260:	2201      	movs	r2, #1
 800e262:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800e264:	4b1d      	ldr	r3, [pc, #116]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e266:	2208      	movs	r2, #8
 800e268:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800e26a:	4b1c      	ldr	r3, [pc, #112]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e26c:	2210      	movs	r2, #16
 800e26e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800e270:	4b1a      	ldr	r3, [pc, #104]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e272:	2200      	movs	r2, #0
 800e274:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800e276:	4b19      	ldr	r3, [pc, #100]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e278:	4a19      	ldr	r2, [pc, #100]	@ (800e2e0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800e27a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800e27c:	4b17      	ldr	r3, [pc, #92]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e27e:	2200      	movs	r2, #0
 800e280:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800e282:	4b16      	ldr	r3, [pc, #88]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e284:	789c      	ldrb	r4, [r3, #2]
 800e286:	4b15      	ldr	r3, [pc, #84]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e288:	785d      	ldrb	r5, [r3, #1]
 800e28a:	4b14      	ldr	r3, [pc, #80]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e28c:	791b      	ldrb	r3, [r3, #4]
 800e28e:	4a13      	ldr	r2, [pc, #76]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e290:	7952      	ldrb	r2, [r2, #5]
 800e292:	4912      	ldr	r1, [pc, #72]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e294:	78c9      	ldrb	r1, [r1, #3]
 800e296:	4811      	ldr	r0, [pc, #68]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e298:	6880      	ldr	r0, [r0, #8]
 800e29a:	2600      	movs	r6, #0
 800e29c:	9604      	str	r6, [sp, #16]
 800e29e:	9003      	str	r0, [sp, #12]
 800e2a0:	9102      	str	r1, [sp, #8]
 800e2a2:	9201      	str	r2, [sp, #4]
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f7fd fda5 	bl	800bdfc <aci_gap_set_authentication_requirement>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800e2b6:	4b09      	ldr	r3, [pc, #36]	@ (800e2dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800e2b8:	789b      	ldrb	r3, [r3, #2]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d003      	beq.n	800e2c6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800e2be:	f7fd ffe7 	bl	800c290 <aci_gap_configure_filter_accept_list>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800e2c6:	bf00      	nop
 800e2c8:	371c      	adds	r7, #28
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08013d44 	.word	0x08013d44
 800e2d4:	08013d54 	.word	0x08013d54
 800e2d8:	08013ab8 	.word	0x08013ab8
 800e2dc:	200007bc 	.word	0x200007bc
 800e2e0:	0001b207 	.word	0x0001b207

0800e2e4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b08c      	sub	sp, #48	@ 0x30
 800e2e8:	af08      	add	r7, sp, #32
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e2ee:	2392      	movs	r3, #146	@ 0x92
 800e2f0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800e2f2:	4a12      	ldr	r2, [pc, #72]	@ (800e33c <Adv_Request+0x58>)
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	9306      	str	r3, [sp, #24]
 800e2fe:	2300      	movs	r3, #0
 800e300:	9305      	str	r3, [sp, #20]
 800e302:	2300      	movs	r3, #0
 800e304:	9304      	str	r3, [sp, #16]
 800e306:	2300      	movs	r3, #0
 800e308:	9303      	str	r3, [sp, #12]
 800e30a:	2300      	movs	r3, #0
 800e30c:	9302      	str	r3, [sp, #8]
 800e30e:	2300      	movs	r3, #0
 800e310:	9301      	str	r3, [sp, #4]
 800e312:	2300      	movs	r3, #0
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	2300      	movs	r3, #0
 800e318:	22a0      	movs	r2, #160	@ 0xa0
 800e31a:	2180      	movs	r1, #128	@ 0x80
 800e31c:	2000      	movs	r0, #0
 800e31e:	f7fd fc1f 	bl	800bb60 <aci_gap_set_discoverable>
 800e322:	4603      	mov	r3, r0
 800e324:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800e326:	4906      	ldr	r1, [pc, #24]	@ (800e340 <Adv_Request+0x5c>)
 800e328:	200c      	movs	r0, #12
 800e32a:	f7fd ff3f 	bl	800c1ac <aci_gap_update_adv_data>
 800e32e:	4603      	mov	r3, r0
 800e330:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800e332:	bf00      	nop
}
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	200007bc 	.word	0x200007bc
 800e340:	20000020 	.word	0x20000020

0800e344 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800e34a:	f7ff fdb5 	bl	800deb8 <LL_FLASH_GetUDN>
 800e34e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e356:	d023      	beq.n	800e3a0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800e358:	f7ff fdc6 	bl	800dee8 <LL_FLASH_GetSTCompanyID>
 800e35c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800e35e:	f7ff fdb7 	bl	800ded0 <LL_FLASH_GetDeviceID>
 800e362:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	b2da      	uxtb	r2, r3
 800e368:	4b16      	ldr	r3, [pc, #88]	@ (800e3c4 <BleGetBdAddress+0x80>)
 800e36a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	0a1b      	lsrs	r3, r3, #8
 800e370:	b2da      	uxtb	r2, r3
 800e372:	4b14      	ldr	r3, [pc, #80]	@ (800e3c4 <BleGetBdAddress+0x80>)
 800e374:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	b2da      	uxtb	r2, r3
 800e37a:	4b12      	ldr	r3, [pc, #72]	@ (800e3c4 <BleGetBdAddress+0x80>)
 800e37c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	b2da      	uxtb	r2, r3
 800e382:	4b10      	ldr	r3, [pc, #64]	@ (800e3c4 <BleGetBdAddress+0x80>)
 800e384:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	0a1b      	lsrs	r3, r3, #8
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c4 <BleGetBdAddress+0x80>)
 800e38e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	0c1b      	lsrs	r3, r3, #16
 800e394:	b2da      	uxtb	r2, r3
 800e396:	4b0b      	ldr	r3, [pc, #44]	@ (800e3c4 <BleGetBdAddress+0x80>)
 800e398:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800e39a:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c4 <BleGetBdAddress+0x80>)
 800e39c:	617b      	str	r3, [r7, #20]
 800e39e:	e00b      	b.n	800e3b8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	f7ff fca3 	bl	800dcec <OTP_Read>
 800e3a6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d002      	beq.n	800e3b4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	617b      	str	r3, [r7, #20]
 800e3b2:	e001      	b.n	800e3b8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800e3b4:	4b04      	ldr	r3, [pc, #16]	@ (800e3c8 <BleGetBdAddress+0x84>)
 800e3b6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800e3b8:	697b      	ldr	r3, [r7, #20]
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3718      	adds	r7, #24
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	200007b4 	.word	0x200007b4
 800e3c8:	08013d3c 	.word	0x08013d3c

0800e3cc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800e3d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e3fc <Adv_Cancel+0x30>)
 800e3d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e3d8:	2b05      	cmp	r3, #5
 800e3da:	d00a      	beq.n	800e3f2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e3dc:	2392      	movs	r3, #146	@ 0x92
 800e3de:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800e3e0:	f7fd fb9a 	bl	800bb18 <aci_gap_set_non_discoverable>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e3e8:	4b04      	ldr	r3, [pc, #16]	@ (800e3fc <Adv_Cancel+0x30>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800e3f0:	bf00      	nop
 800e3f2:	bf00      	nop
}
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	200007bc 	.word	0x200007bc

0800e400 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800e408:	2100      	movs	r1, #0
 800e40a:	2002      	movs	r0, #2
 800e40c:	f000 fd5e 	bl	800eecc <UTIL_SEQ_SetTask>

  return;
 800e410:	bf00      	nop
}
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e420:	2001      	movs	r0, #1
 800e422:	f000 fdbf 	bl	800efa4 <UTIL_SEQ_SetEvt>

  return;
 800e426:	bf00      	nop
}
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b082      	sub	sp, #8
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e436:	2001      	movs	r0, #1
 800e438:	f000 fdd4 	bl	800efe4 <UTIL_SEQ_WaitEvt>

  return;
 800e43c:	bf00      	nop
}
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	3308      	adds	r3, #8
 800e456:	4618      	mov	r0, r3
 800e458:	f7fe fd70 	bl	800cf3c <SVCCTL_UserEvtRx>
 800e45c:	4603      	mov	r3, r0
 800e45e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800e460:	7afb      	ldrb	r3, [r7, #11]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d003      	beq.n	800e46e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2201      	movs	r2, #1
 800e46a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800e46c:	e003      	b.n	800e476 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2200      	movs	r2, #0
 800e472:	701a      	strb	r2, [r3, #0]
  return;
 800e474:	bf00      	nop
}
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	4603      	mov	r3, r0
 800e484:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800e486:	79fb      	ldrb	r3, [r7, #7]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d002      	beq.n	800e492 <BLE_StatusNot+0x16>
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d006      	beq.n	800e49e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800e490:	e00b      	b.n	800e4aa <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e492:	2303      	movs	r3, #3
 800e494:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f000 fd44 	bl	800ef24 <UTIL_SEQ_PauseTask>
      break;
 800e49c:	e005      	b.n	800e4aa <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e49e:	2303      	movs	r3, #3
 800e4a0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f000 fd5e 	bl	800ef64 <UTIL_SEQ_ResumeTask>
      break;
 800e4a8:	bf00      	nop
  }

  return;
 800e4aa:	bf00      	nop
}
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800e4b2:	b480      	push	{r7}
 800e4b4:	b083      	sub	sp, #12
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	2b02      	cmp	r3, #2
 800e4c0:	d006      	beq.n	800e4d0 <Custom_STM_App_Notification+0x1e>
 800e4c2:	2b02      	cmp	r3, #2
 800e4c4:	dc06      	bgt.n	800e4d4 <Custom_STM_App_Notification+0x22>
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d006      	beq.n	800e4d8 <Custom_STM_App_Notification+0x26>
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d006      	beq.n	800e4dc <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800e4ce:	e001      	b.n	800e4d4 <Custom_STM_App_Notification+0x22>
      break;
 800e4d0:	bf00      	nop
 800e4d2:	e004      	b.n	800e4de <Custom_STM_App_Notification+0x2c>
      break;
 800e4d4:	bf00      	nop
 800e4d6:	e002      	b.n	800e4de <Custom_STM_App_Notification+0x2c>
      break;
 800e4d8:	bf00      	nop
 800e4da:	e000      	b.n	800e4de <Custom_STM_App_Notification+0x2c>
      break;
 800e4dc:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800e4de:	bf00      	nop
}
 800e4e0:	370c      	adds	r7, #12
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr

0800e4ea <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800e4ea:	b480      	push	{r7}
 800e4ec:	b083      	sub	sp, #12
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d002      	beq.n	800e500 <Custom_APP_Notification+0x16>
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d002      	beq.n	800e504 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800e4fe:	e002      	b.n	800e506 <Custom_APP_Notification+0x1c>
      break;
 800e500:	bf00      	nop
 800e502:	e000      	b.n	800e506 <Custom_APP_Notification+0x1c>
      break;
 800e504:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800e506:	bf00      	nop
}
 800e508:	370c      	adds	r7, #12
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr

0800e512 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800e512:	b480      	push	{r7}
 800e514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800e516:	bf00      	nop
}
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b08e      	sub	sp, #56	@ 0x38
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800e528:	2300      	movs	r3, #0
 800e52a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	3301      	adds	r3, #1
 800e532:	62fb      	str	r3, [r7, #44]	@ 0x2c

  switch (event_pckt->evt)
 800e534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	2bff      	cmp	r3, #255	@ 0xff
 800e53a:	f040 8097 	bne.w	800e66c <Custom_STM_Event_Handler+0x14c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800e53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e540:	3302      	adds	r3, #2
 800e542:	62bb      	str	r3, [r7, #40]	@ 0x28
      switch (blecore_evt->ecode)
 800e544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e546:	881b      	ldrh	r3, [r3, #0]
 800e548:	b29b      	uxth	r3, r3
 800e54a:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800e54e:	2b1a      	cmp	r3, #26
 800e550:	f200 808a 	bhi.w	800e668 <Custom_STM_Event_Handler+0x148>
 800e554:	a201      	add	r2, pc, #4	@ (adr r2, 800e55c <Custom_STM_Event_Handler+0x3c>)
 800e556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55a:	bf00      	nop
 800e55c:	0800e5c9 	.word	0x0800e5c9
 800e560:	0800e669 	.word	0x0800e669
 800e564:	0800e669 	.word	0x0800e669
 800e568:	0800e669 	.word	0x0800e669
 800e56c:	0800e669 	.word	0x0800e669
 800e570:	0800e669 	.word	0x0800e669
 800e574:	0800e669 	.word	0x0800e669
 800e578:	0800e669 	.word	0x0800e669
 800e57c:	0800e669 	.word	0x0800e669
 800e580:	0800e669 	.word	0x0800e669
 800e584:	0800e669 	.word	0x0800e669
 800e588:	0800e669 	.word	0x0800e669
 800e58c:	0800e669 	.word	0x0800e669
 800e590:	0800e669 	.word	0x0800e669
 800e594:	0800e669 	.word	0x0800e669
 800e598:	0800e669 	.word	0x0800e669
 800e59c:	0800e669 	.word	0x0800e669
 800e5a0:	0800e669 	.word	0x0800e669
 800e5a4:	0800e669 	.word	0x0800e669
 800e5a8:	0800e669 	.word	0x0800e669
 800e5ac:	0800e669 	.word	0x0800e669
 800e5b0:	0800e669 	.word	0x0800e669
 800e5b4:	0800e669 	.word	0x0800e669
 800e5b8:	0800e669 	.word	0x0800e669
 800e5bc:	0800e669 	.word	0x0800e669
 800e5c0:	0800e669 	.word	0x0800e669
 800e5c4:	0800e64b 	.word	0x0800e64b
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800e5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ca:	3302      	adds	r3, #2
 800e5cc:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e5ce:	6a3b      	ldr	r3, [r7, #32]
 800e5d0:	885b      	ldrh	r3, [r3, #2]
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	4b29      	ldr	r3, [pc, #164]	@ (800e67c <Custom_STM_Event_Handler+0x15c>)
 800e5d8:	885b      	ldrh	r3, [r3, #2]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d102      	bne.n	800e5e6 <Custom_STM_Event_Handler+0xc6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          APP_DBG_MSG(">> BLE Write Detected!\n");
		  APP_DBG_MSG(">> Received Data (%d bytes): ", attribute_modified->Attr_Data_Length);

		  for (int i = 0; i < attribute_modified->Attr_Data_Length; i++) {
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5ea:	e002      	b.n	800e5f2 <Custom_STM_Event_Handler+0xd2>
 800e5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5f2:	6a3b      	ldr	r3, [r7, #32]
 800e5f4:	88db      	ldrh	r3, [r3, #6]
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	dbf5      	blt.n	800e5ec <Custom_STM_Event_Handler+0xcc>
			  APP_DBG_MSG("%02X ", attribute_modified->Attr_Data[i]);
		  }
		  APP_DBG_MSG("\n");

		  if (check_command(attribute_modified->Attr_Data)) {
 800e600:	6a3b      	ldr	r3, [r7, #32]
 800e602:	3308      	adds	r3, #8
 800e604:	4618      	mov	r0, r3
 800e606:	f7f2 fcd5 	bl	8000fb4 <check_command>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d003      	beq.n	800e618 <Custom_STM_Event_Handler+0xf8>
				printf(">> Command detected!\n");
 800e610:	481b      	ldr	r0, [pc, #108]	@ (800e680 <Custom_STM_Event_Handler+0x160>)
 800e612:	f002 fc29 	bl	8010e68 <puts>
 800e616:	e002      	b.n	800e61e <Custom_STM_Event_Handler+0xfe>
			} else {
				printf(">> Command not detected!\n");
 800e618:	481a      	ldr	r0, [pc, #104]	@ (800e684 <Custom_STM_Event_Handler+0x164>)
 800e61a:	f002 fc25 	bl	8010e68 <puts>
			}

		  if (BLE_ProcessCommand(attribute_modified->Attr_Data, attribute_modified->Attr_Data_Length))
 800e61e:	6a3b      	ldr	r3, [r7, #32]
 800e620:	f103 0208 	add.w	r2, r3, #8
 800e624:	6a3b      	ldr	r3, [r7, #32]
 800e626:	88db      	ldrh	r3, [r3, #6]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	4619      	mov	r1, r3
 800e62e:	4610      	mov	r0, r2
 800e630:	f7f2 fcd2 	bl	8000fd8 <BLE_ProcessCommand>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d003      	beq.n	800e642 <Custom_STM_Event_Handler+0x122>
		          {
		              printf(">> Action déclenchée suite à la commande\n");
 800e63a:	4813      	ldr	r0, [pc, #76]	@ (800e688 <Custom_STM_Event_Handler+0x168>)
 800e63c:	f002 fc14 	bl	8010e68 <puts>
				printf(">> Aucune action déclenchée\n");
			}


          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800e640:	e013      	b.n	800e66a <Custom_STM_Event_Handler+0x14a>
				printf(">> Aucune action déclenchée\n");
 800e642:	4812      	ldr	r0, [pc, #72]	@ (800e68c <Custom_STM_Event_Handler+0x16c>)
 800e644:	f002 fc10 	bl	8010e68 <puts>
          break;
 800e648:	e00f      	b.n	800e66a <Custom_STM_Event_Handler+0x14a>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800e64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e64c:	3302      	adds	r3, #2
 800e64e:	627b      	str	r3, [r7, #36]	@ 0x24
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800e650:	2302      	movs	r3, #2
 800e652:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800e654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	b29b      	uxth	r3, r3
 800e65a:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 800e65c:	f107 030c 	add.w	r3, r7, #12
 800e660:	4618      	mov	r0, r3
 800e662:	f7ff ff26 	bl	800e4b2 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800e666:	e000      	b.n	800e66a <Custom_STM_Event_Handler+0x14a>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800e668:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e66a:	e000      	b.n	800e66e <Custom_STM_Event_Handler+0x14e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800e66c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800e66e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 800e672:	4618      	mov	r0, r3
 800e674:	3738      	adds	r7, #56	@ 0x38
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000844 	.word	0x20000844
 800e680:	08013ac4 	.word	0x08013ac4
 800e684:	08013adc 	.word	0x08013adc
 800e688:	08013af8 	.word	0x08013af8
 800e68c:	08013b24 	.word	0x08013b24

0800e690 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b08c      	sub	sp, #48	@ 0x30
 800e694:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e696:	2392      	movs	r3, #146	@ 0x92
 800e698:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800e69a:	4834      	ldr	r0, [pc, #208]	@ (800e76c <SVCCTL_InitCustomSvc+0xdc>)
 800e69c:	f7fe fc34 	bl	800cf08 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800e6a0:	2303      	movs	r3, #3
 800e6a2:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MY_CUSTOM_SVC_UUID(uuid.Char_UUID_128);
 800e6a4:	238f      	movs	r3, #143	@ 0x8f
 800e6a6:	713b      	strb	r3, [r7, #4]
 800e6a8:	23e5      	movs	r3, #229	@ 0xe5
 800e6aa:	717b      	strb	r3, [r7, #5]
 800e6ac:	23b3      	movs	r3, #179	@ 0xb3
 800e6ae:	71bb      	strb	r3, [r7, #6]
 800e6b0:	23d5      	movs	r3, #213	@ 0xd5
 800e6b2:	71fb      	strb	r3, [r7, #7]
 800e6b4:	232e      	movs	r3, #46	@ 0x2e
 800e6b6:	723b      	strb	r3, [r7, #8]
 800e6b8:	237f      	movs	r3, #127	@ 0x7f
 800e6ba:	727b      	strb	r3, [r7, #9]
 800e6bc:	234a      	movs	r3, #74	@ 0x4a
 800e6be:	72bb      	strb	r3, [r7, #10]
 800e6c0:	2398      	movs	r3, #152	@ 0x98
 800e6c2:	72fb      	strb	r3, [r7, #11]
 800e6c4:	232a      	movs	r3, #42	@ 0x2a
 800e6c6:	733b      	strb	r3, [r7, #12]
 800e6c8:	2348      	movs	r3, #72	@ 0x48
 800e6ca:	737b      	strb	r3, [r7, #13]
 800e6cc:	237a      	movs	r3, #122	@ 0x7a
 800e6ce:	73bb      	strb	r3, [r7, #14]
 800e6d0:	23cc      	movs	r3, #204	@ 0xcc
 800e6d2:	73fb      	strb	r3, [r7, #15]
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	743b      	strb	r3, [r7, #16]
 800e6d8:	2300      	movs	r3, #0
 800e6da:	747b      	strb	r3, [r7, #17]
 800e6dc:	2300      	movs	r3, #0
 800e6de:	74bb      	strb	r3, [r7, #18]
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e6e4:	7dbb      	ldrb	r3, [r7, #22]
 800e6e6:	1d39      	adds	r1, r7, #4
 800e6e8:	4a21      	ldr	r2, [pc, #132]	@ (800e770 <SVCCTL_InitCustomSvc+0xe0>)
 800e6ea:	9200      	str	r2, [sp, #0]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	2002      	movs	r0, #2
 800e6f0:	f7fd fe7e 	bl	800c3f0 <aci_gatt_add_service>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  MY_CHAR
   */
  COPY_MY_CHAR_UUID(uuid.Char_UUID_128);
 800e6f8:	2319      	movs	r3, #25
 800e6fa:	713b      	strb	r3, [r7, #4]
 800e6fc:	23ed      	movs	r3, #237	@ 0xed
 800e6fe:	717b      	strb	r3, [r7, #5]
 800e700:	2382      	movs	r3, #130	@ 0x82
 800e702:	71bb      	strb	r3, [r7, #6]
 800e704:	23ae      	movs	r3, #174	@ 0xae
 800e706:	71fb      	strb	r3, [r7, #7]
 800e708:	23ed      	movs	r3, #237	@ 0xed
 800e70a:	723b      	strb	r3, [r7, #8]
 800e70c:	2321      	movs	r3, #33	@ 0x21
 800e70e:	727b      	strb	r3, [r7, #9]
 800e710:	234c      	movs	r3, #76	@ 0x4c
 800e712:	72bb      	strb	r3, [r7, #10]
 800e714:	239d      	movs	r3, #157	@ 0x9d
 800e716:	72fb      	strb	r3, [r7, #11]
 800e718:	2341      	movs	r3, #65	@ 0x41
 800e71a:	733b      	strb	r3, [r7, #12]
 800e71c:	2345      	movs	r3, #69	@ 0x45
 800e71e:	737b      	strb	r3, [r7, #13]
 800e720:	2322      	movs	r3, #34	@ 0x22
 800e722:	73bb      	strb	r3, [r7, #14]
 800e724:	238e      	movs	r3, #142	@ 0x8e
 800e726:	73fb      	strb	r3, [r7, #15]
 800e728:	2300      	movs	r3, #0
 800e72a:	743b      	strb	r3, [r7, #16]
 800e72c:	2300      	movs	r3, #0
 800e72e:	747b      	strb	r3, [r7, #17]
 800e730:	2300      	movs	r3, #0
 800e732:	74bb      	strb	r3, [r7, #18]
 800e734:	2300      	movs	r3, #0
 800e736:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_Custom_SvcHdle,
 800e738:	4b0d      	ldr	r3, [pc, #52]	@ (800e770 <SVCCTL_InitCustomSvc+0xe0>)
 800e73a:	8818      	ldrh	r0, [r3, #0]
 800e73c:	4b0d      	ldr	r3, [pc, #52]	@ (800e774 <SVCCTL_InitCustomSvc+0xe4>)
 800e73e:	881b      	ldrh	r3, [r3, #0]
 800e740:	1d3a      	adds	r2, r7, #4
 800e742:	490d      	ldr	r1, [pc, #52]	@ (800e778 <SVCCTL_InitCustomSvc+0xe8>)
 800e744:	9105      	str	r1, [sp, #20]
 800e746:	2101      	movs	r1, #1
 800e748:	9104      	str	r1, [sp, #16]
 800e74a:	2110      	movs	r1, #16
 800e74c:	9103      	str	r1, [sp, #12]
 800e74e:	2101      	movs	r1, #1
 800e750:	9102      	str	r1, [sp, #8]
 800e752:	2100      	movs	r1, #0
 800e754:	9101      	str	r1, [sp, #4]
 800e756:	210a      	movs	r1, #10
 800e758:	9100      	str	r1, [sp, #0]
 800e75a:	2102      	movs	r1, #2
 800e75c:	f7fd ff1e 	bl	800c59c <aci_gatt_add_char>
 800e760:	4603      	mov	r3, r0
 800e762:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800e764:	bf00      	nop
}
 800e766:	3718      	adds	r7, #24
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	0800e521 	.word	0x0800e521
 800e770:	20000844 	.word	0x20000844
 800e774:	2000002c 	.word	0x2000002c
 800e778:	20000846 	.word	0x20000846

0800e77c <LL_PWR_EnableBootC2>:
{
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e780:	4b05      	ldr	r3, [pc, #20]	@ (800e798 <LL_PWR_EnableBootC2+0x1c>)
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	4a04      	ldr	r2, [pc, #16]	@ (800e798 <LL_PWR_EnableBootC2+0x1c>)
 800e786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e78a:	60d3      	str	r3, [r2, #12]
}
 800e78c:	bf00      	nop
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr
 800e796:	bf00      	nop
 800e798:	58000400 	.word	0x58000400

0800e79c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e7a4:	4b06      	ldr	r3, [pc, #24]	@ (800e7c0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e7a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800e7aa:	4905      	ldr	r1, [pc, #20]	@ (800e7c0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	58000800 	.word	0x58000800

0800e7c4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e7cc:	4b05      	ldr	r3, [pc, #20]	@ (800e7e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e7ce:	6a1a      	ldr	r2, [r3, #32]
 800e7d0:	4904      	ldr	r1, [pc, #16]	@ (800e7e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	620b      	str	r3, [r1, #32]
}
 800e7d8:	bf00      	nop
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr
 800e7e4:	58000800 	.word	0x58000800

0800e7e8 <LL_AHB3_GRP1_EnableClock>:
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e7f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e7f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4013      	ands	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e80c:	68fb      	ldr	r3, [r7, #12]
}
 800e80e:	bf00      	nop
 800e810:	3714      	adds	r7, #20
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr

0800e81a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800e81a:	b480      	push	{r7}
 800e81c:	b085      	sub	sp, #20
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800e822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e826:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e82a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4313      	orrs	r3, r2
 800e832:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800e836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e83a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4013      	ands	r3, r2
 800e842:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e844:	68fb      	ldr	r3, [r7, #12]
}
 800e846:	bf00      	nop
 800e848:	3714      	adds	r7, #20
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr

0800e852 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800e852:	b480      	push	{r7}
 800e854:	b083      	sub	sp, #12
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	601a      	str	r2, [r3, #0]
}
 800e866:	bf00      	nop
 800e868:	370c      	adds	r7, #12
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800e872:	b480      	push	{r7}
 800e874:	b083      	sub	sp, #12
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f043 0201 	orr.w	r2, r3, #1
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	601a      	str	r2, [r3, #0]
}
 800e886:	bf00      	nop
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
 800e89a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685a      	ldr	r2, [r3, #4]
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	041b      	lsls	r3, r3, #16
 800e8a4:	43db      	mvns	r3, r3
 800e8a6:	401a      	ands	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	605a      	str	r2, [r3, #4]
}
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	685a      	ldr	r2, [r3, #4]
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	041b      	lsls	r3, r3, #16
 800e8ca:	431a      	orrs	r2, r3
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	605a      	str	r2, [r3, #4]
}
 800e8d0:	bf00      	nop
 800e8d2:	370c      	adds	r7, #12
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	685a      	ldr	r2, [r3, #4]
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	43db      	mvns	r3, r3
 800e8ee:	401a      	ands	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	605a      	str	r2, [r3, #4]
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	683a      	ldr	r2, [r7, #0]
 800e90e:	609a      	str	r2, [r3, #8]
}
 800e910:	bf00      	nop
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	041a      	lsls	r2, r3, #16
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	609a      	str	r2, [r3, #8]
}
 800e92e:	bf00      	nop
 800e930:	370c      	adds	r7, #12
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e93a:	b480      	push	{r7}
 800e93c:	b083      	sub	sp, #12
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
 800e942:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	68da      	ldr	r2, [r3, #12]
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	4013      	ands	r3, r2
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d101      	bne.n	800e956 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e952:	2301      	movs	r3, #1
 800e954:	e000      	b.n	800e958 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	69da      	ldr	r2, [r3, #28]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	4013      	ands	r3, r2
 800e976:	683a      	ldr	r2, [r7, #0]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d101      	bne.n	800e980 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e97c:	2301      	movs	r3, #1
 800e97e:	e000      	b.n	800e982 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	370c      	adds	r7, #12
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr
	...

0800e990 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e990:	b580      	push	{r7, lr}
 800e992:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e994:	2102      	movs	r1, #2
 800e996:	4818      	ldr	r0, [pc, #96]	@ (800e9f8 <HW_IPCC_Rx_Handler+0x68>)
 800e998:	f7ff ffe4 	bl	800e964 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d008      	beq.n	800e9b4 <HW_IPCC_Rx_Handler+0x24>
 800e9a2:	4b15      	ldr	r3, [pc, #84]	@ (800e9f8 <HW_IPCC_Rx_Handler+0x68>)
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	f003 0302 	and.w	r3, r3, #2
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d102      	bne.n	800e9b4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800e9ae:	f000 f8d5 	bl	800eb5c <HW_IPCC_SYS_EvtHandler>
 800e9b2:	e01e      	b.n	800e9f2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e9b4:	2101      	movs	r1, #1
 800e9b6:	4810      	ldr	r0, [pc, #64]	@ (800e9f8 <HW_IPCC_Rx_Handler+0x68>)
 800e9b8:	f7ff ffd4 	bl	800e964 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d008      	beq.n	800e9d4 <HW_IPCC_Rx_Handler+0x44>
 800e9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f8 <HW_IPCC_Rx_Handler+0x68>)
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d102      	bne.n	800e9d4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800e9ce:	f000 f889 	bl	800eae4 <HW_IPCC_BLE_EvtHandler>
 800e9d2:	e00e      	b.n	800e9f2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e9d4:	2108      	movs	r1, #8
 800e9d6:	4808      	ldr	r0, [pc, #32]	@ (800e9f8 <HW_IPCC_Rx_Handler+0x68>)
 800e9d8:	f7ff ffc4 	bl	800e964 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d008      	beq.n	800e9f4 <HW_IPCC_Rx_Handler+0x64>
 800e9e2:	4b05      	ldr	r3, [pc, #20]	@ (800e9f8 <HW_IPCC_Rx_Handler+0x68>)
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	f003 0308 	and.w	r3, r3, #8
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d102      	bne.n	800e9f4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e9ee:	f000 f901 	bl	800ebf4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e9f2:	bf00      	nop
 800e9f4:	bf00      	nop
}
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	58000c00 	.word	0x58000c00

0800e9fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800ea00:	2102      	movs	r1, #2
 800ea02:	4818      	ldr	r0, [pc, #96]	@ (800ea64 <HW_IPCC_Tx_Handler+0x68>)
 800ea04:	f7ff ff99 	bl	800e93a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d108      	bne.n	800ea20 <HW_IPCC_Tx_Handler+0x24>
 800ea0e:	4b15      	ldr	r3, [pc, #84]	@ (800ea64 <HW_IPCC_Tx_Handler+0x68>)
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d102      	bne.n	800ea20 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800ea1a:	f000 f893 	bl	800eb44 <HW_IPCC_SYS_CmdEvtHandler>
 800ea1e:	e01e      	b.n	800ea5e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800ea20:	2108      	movs	r1, #8
 800ea22:	4810      	ldr	r0, [pc, #64]	@ (800ea64 <HW_IPCC_Tx_Handler+0x68>)
 800ea24:	f7ff ff89 	bl	800e93a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d108      	bne.n	800ea40 <HW_IPCC_Tx_Handler+0x44>
 800ea2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea64 <HW_IPCC_Tx_Handler+0x68>)
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d102      	bne.n	800ea40 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800ea3a:	f000 f8bd 	bl	800ebb8 <HW_IPCC_MM_FreeBufHandler>
 800ea3e:	e00e      	b.n	800ea5e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ea40:	2120      	movs	r1, #32
 800ea42:	4808      	ldr	r0, [pc, #32]	@ (800ea64 <HW_IPCC_Tx_Handler+0x68>)
 800ea44:	f7ff ff79 	bl	800e93a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d108      	bne.n	800ea60 <HW_IPCC_Tx_Handler+0x64>
 800ea4e:	4b05      	ldr	r3, [pc, #20]	@ (800ea64 <HW_IPCC_Tx_Handler+0x68>)
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d102      	bne.n	800ea60 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800ea5a:	f000 f84f 	bl	800eafc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800ea5e:	bf00      	nop
 800ea60:	bf00      	nop
}
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	58000c00 	.word	0x58000c00

0800ea68 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800ea6c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ea70:	f7ff fed3 	bl	800e81a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800ea74:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ea78:	f7ff fea4 	bl	800e7c4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800ea7c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ea80:	f7ff fe8c 	bl	800e79c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ea84:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ea86:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ea88:	f7ff fe78 	bl	800e77c <LL_PWR_EnableBootC2>

  return;
 800ea8c:	bf00      	nop
}
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800ea94:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ea98:	f7ff fea6 	bl	800e7e8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800ea9c:	4806      	ldr	r0, [pc, #24]	@ (800eab8 <HW_IPCC_Init+0x28>)
 800ea9e:	f7ff fee8 	bl	800e872 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800eaa2:	4805      	ldr	r0, [pc, #20]	@ (800eab8 <HW_IPCC_Init+0x28>)
 800eaa4:	f7ff fed5 	bl	800e852 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800eaa8:	202c      	movs	r0, #44	@ 0x2c
 800eaaa:	f7f6 f866 	bl	8004b7a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800eaae:	202d      	movs	r0, #45	@ 0x2d
 800eab0:	f7f6 f863 	bl	8004b7a <HAL_NVIC_EnableIRQ>

  return;
 800eab4:	bf00      	nop
}
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	58000c00 	.word	0x58000c00

0800eabc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800eac0:	2101      	movs	r1, #1
 800eac2:	4802      	ldr	r0, [pc, #8]	@ (800eacc <HW_IPCC_BLE_Init+0x10>)
 800eac4:	f7ff ff0a 	bl	800e8dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800eac8:	bf00      	nop
}
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	58000c00 	.word	0x58000c00

0800ead0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800ead4:	2101      	movs	r1, #1
 800ead6:	4802      	ldr	r0, [pc, #8]	@ (800eae0 <HW_IPCC_BLE_SendCmd+0x10>)
 800ead8:	f7ff ff20 	bl	800e91c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800eadc:	bf00      	nop
}
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	58000c00 	.word	0x58000c00

0800eae4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800eae8:	f7fe fed2 	bl	800d890 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800eaec:	2101      	movs	r1, #1
 800eaee:	4802      	ldr	r0, [pc, #8]	@ (800eaf8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800eaf0:	f7ff ff06 	bl	800e900 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800eaf4:	bf00      	nop
}
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	58000c00 	.word	0x58000c00

0800eafc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800eb00:	2120      	movs	r1, #32
 800eb02:	4803      	ldr	r0, [pc, #12]	@ (800eb10 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800eb04:	f7ff fed8 	bl	800e8b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800eb08:	f7fe fef2 	bl	800d8f0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800eb0c:	bf00      	nop
}
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	58000c00 	.word	0x58000c00

0800eb14 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800eb18:	2102      	movs	r1, #2
 800eb1a:	4802      	ldr	r0, [pc, #8]	@ (800eb24 <HW_IPCC_SYS_Init+0x10>)
 800eb1c:	f7ff fede 	bl	800e8dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800eb20:	bf00      	nop
}
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	58000c00 	.word	0x58000c00

0800eb28 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800eb2c:	2102      	movs	r1, #2
 800eb2e:	4804      	ldr	r0, [pc, #16]	@ (800eb40 <HW_IPCC_SYS_SendCmd+0x18>)
 800eb30:	f7ff fef4 	bl	800e91c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800eb34:	2102      	movs	r1, #2
 800eb36:	4802      	ldr	r0, [pc, #8]	@ (800eb40 <HW_IPCC_SYS_SendCmd+0x18>)
 800eb38:	f7ff feab 	bl	800e892 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800eb3c:	bf00      	nop
}
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	58000c00 	.word	0x58000c00

0800eb44 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800eb48:	2102      	movs	r1, #2
 800eb4a:	4803      	ldr	r0, [pc, #12]	@ (800eb58 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800eb4c:	f7ff feb4 	bl	800e8b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800eb50:	f7fe ff1e 	bl	800d990 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800eb54:	bf00      	nop
}
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	58000c00 	.word	0x58000c00

0800eb5c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800eb60:	f7fe ff2c 	bl	800d9bc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800eb64:	2102      	movs	r1, #2
 800eb66:	4802      	ldr	r0, [pc, #8]	@ (800eb70 <HW_IPCC_SYS_EvtHandler+0x14>)
 800eb68:	f7ff feca 	bl	800e900 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800eb6c:	bf00      	nop
}
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	58000c00 	.word	0x58000c00

0800eb74 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800eb7c:	2108      	movs	r1, #8
 800eb7e:	480c      	ldr	r0, [pc, #48]	@ (800ebb0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800eb80:	f7ff fedb 	bl	800e93a <LL_C1_IPCC_IsActiveFlag_CHx>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d007      	beq.n	800eb9a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800eb8a:	4a0a      	ldr	r2, [pc, #40]	@ (800ebb4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800eb90:	2108      	movs	r1, #8
 800eb92:	4807      	ldr	r0, [pc, #28]	@ (800ebb0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800eb94:	f7ff fe7d 	bl	800e892 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800eb98:	e006      	b.n	800eba8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800eb9e:	2108      	movs	r1, #8
 800eba0:	4803      	ldr	r0, [pc, #12]	@ (800ebb0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800eba2:	f7ff febb 	bl	800e91c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800eba6:	bf00      	nop
}
 800eba8:	3708      	adds	r7, #8
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	58000c00 	.word	0x58000c00
 800ebb4:	20000848 	.word	0x20000848

0800ebb8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ebbc:	2108      	movs	r1, #8
 800ebbe:	4806      	ldr	r0, [pc, #24]	@ (800ebd8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ebc0:	f7ff fe7a 	bl	800e8b8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800ebc4:	4b05      	ldr	r3, [pc, #20]	@ (800ebdc <HW_IPCC_MM_FreeBufHandler+0x24>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ebca:	2108      	movs	r1, #8
 800ebcc:	4802      	ldr	r0, [pc, #8]	@ (800ebd8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ebce:	f7ff fea5 	bl	800e91c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ebd2:	bf00      	nop
}
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	58000c00 	.word	0x58000c00
 800ebdc:	20000848 	.word	0x20000848

0800ebe0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ebe4:	2108      	movs	r1, #8
 800ebe6:	4802      	ldr	r0, [pc, #8]	@ (800ebf0 <HW_IPCC_TRACES_Init+0x10>)
 800ebe8:	f7ff fe78 	bl	800e8dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ebec:	bf00      	nop
}
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	58000c00 	.word	0x58000c00

0800ebf4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800ebf8:	f7fe ff88 	bl	800db0c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ebfc:	2108      	movs	r1, #8
 800ebfe:	4802      	ldr	r0, [pc, #8]	@ (800ec08 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800ec00:	f7ff fe7e 	bl	800e900 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ec04:	bf00      	nop
}
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	58000c00 	.word	0x58000c00

0800ec0c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ec10:	4b05      	ldr	r3, [pc, #20]	@ (800ec28 <UTIL_LPM_Init+0x1c>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ec16:	4b05      	ldr	r3, [pc, #20]	@ (800ec2c <UTIL_LPM_Init+0x20>)
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ec1c:	bf00      	nop
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	2000084c 	.word	0x2000084c
 800ec2c:	20000850 	.word	0x20000850

0800ec30 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ec30:	b480      	push	{r7}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	460b      	mov	r3, r1
 800ec3a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec3c:	f3ef 8310 	mrs	r3, PRIMASK
 800ec40:	613b      	str	r3, [r7, #16]
  return(result);
 800ec42:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ec44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec46:	b672      	cpsid	i
}
 800ec48:	bf00      	nop
  
  switch(state)
 800ec4a:	78fb      	ldrb	r3, [r7, #3]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d008      	beq.n	800ec62 <UTIL_LPM_SetOffMode+0x32>
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d10e      	bne.n	800ec72 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ec54:	4b0d      	ldr	r3, [pc, #52]	@ (800ec8c <UTIL_LPM_SetOffMode+0x5c>)
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	4a0b      	ldr	r2, [pc, #44]	@ (800ec8c <UTIL_LPM_SetOffMode+0x5c>)
 800ec5e:	6013      	str	r3, [r2, #0]
      break;
 800ec60:	e008      	b.n	800ec74 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	43da      	mvns	r2, r3
 800ec66:	4b09      	ldr	r3, [pc, #36]	@ (800ec8c <UTIL_LPM_SetOffMode+0x5c>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4013      	ands	r3, r2
 800ec6c:	4a07      	ldr	r2, [pc, #28]	@ (800ec8c <UTIL_LPM_SetOffMode+0x5c>)
 800ec6e:	6013      	str	r3, [r2, #0]
      break;
 800ec70:	e000      	b.n	800ec74 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ec72:	bf00      	nop
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f383 8810 	msr	PRIMASK, r3
}
 800ec7e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ec80:	bf00      	nop
 800ec82:	371c      	adds	r7, #28
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr
 800ec8c:	20000850 	.word	0x20000850

0800ec90 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b090      	sub	sp, #64	@ 0x40
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ec98:	4b73      	ldr	r3, [pc, #460]	@ (800ee68 <UTIL_SEQ_Run+0x1d8>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800ec9e:	4b72      	ldr	r3, [pc, #456]	@ (800ee68 <UTIL_SEQ_Run+0x1d8>)
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4013      	ands	r3, r2
 800eca6:	4a70      	ldr	r2, [pc, #448]	@ (800ee68 <UTIL_SEQ_Run+0x1d8>)
 800eca8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800ecaa:	4b70      	ldr	r3, [pc, #448]	@ (800ee6c <UTIL_SEQ_Run+0x1dc>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ecb0:	4b6f      	ldr	r3, [pc, #444]	@ (800ee70 <UTIL_SEQ_Run+0x1e0>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ecb6:	4b6f      	ldr	r3, [pc, #444]	@ (800ee74 <UTIL_SEQ_Run+0x1e4>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800ecbc:	4b6e      	ldr	r3, [pc, #440]	@ (800ee78 <UTIL_SEQ_Run+0x1e8>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ecc2:	e08d      	b.n	800ede0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ecc8:	e002      	b.n	800ecd0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800ecca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eccc:	3301      	adds	r3, #1
 800ecce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ecd0:	4a6a      	ldr	r2, [pc, #424]	@ (800ee7c <UTIL_SEQ_Run+0x1ec>)
 800ecd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecd4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecda:	401a      	ands	r2, r3
 800ecdc:	4b62      	ldr	r3, [pc, #392]	@ (800ee68 <UTIL_SEQ_Run+0x1d8>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4013      	ands	r3, r2
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d0f1      	beq.n	800ecca <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800ece6:	4a65      	ldr	r2, [pc, #404]	@ (800ee7c <UTIL_SEQ_Run+0x1ec>)
 800ece8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ecee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf0:	401a      	ands	r2, r3
 800ecf2:	4b5d      	ldr	r3, [pc, #372]	@ (800ee68 <UTIL_SEQ_Run+0x1d8>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4013      	ands	r3, r2
 800ecf8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ecfa:	4a60      	ldr	r2, [pc, #384]	@ (800ee7c <UTIL_SEQ_Run+0x1ec>)
 800ecfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecfe:	00db      	lsls	r3, r3, #3
 800ed00:	4413      	add	r3, r2
 800ed02:	685a      	ldr	r2, [r3, #4]
 800ed04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed06:	4013      	ands	r3, r2
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d106      	bne.n	800ed1a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ed0c:	4a5b      	ldr	r2, [pc, #364]	@ (800ee7c <UTIL_SEQ_Run+0x1ec>)
 800ed0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed10:	00db      	lsls	r3, r3, #3
 800ed12:	4413      	add	r3, r2
 800ed14:	f04f 32ff 	mov.w	r2, #4294967295
 800ed18:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ed1a:	4a58      	ldr	r2, [pc, #352]	@ (800ee7c <UTIL_SEQ_Run+0x1ec>)
 800ed1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed1e:	00db      	lsls	r3, r3, #3
 800ed20:	4413      	add	r3, r2
 800ed22:	685a      	ldr	r2, [r3, #4]
 800ed24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed26:	4013      	ands	r3, r2
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f000 f9b3 	bl	800f094 <SEQ_BitPosition>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	461a      	mov	r2, r3
 800ed32:	4b53      	ldr	r3, [pc, #332]	@ (800ee80 <UTIL_SEQ_Run+0x1f0>)
 800ed34:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ed36:	4a51      	ldr	r2, [pc, #324]	@ (800ee7c <UTIL_SEQ_Run+0x1ec>)
 800ed38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed3a:	00db      	lsls	r3, r3, #3
 800ed3c:	4413      	add	r3, r2
 800ed3e:	685a      	ldr	r2, [r3, #4]
 800ed40:	4b4f      	ldr	r3, [pc, #316]	@ (800ee80 <UTIL_SEQ_Run+0x1f0>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2101      	movs	r1, #1
 800ed46:	fa01 f303 	lsl.w	r3, r1, r3
 800ed4a:	43db      	mvns	r3, r3
 800ed4c:	401a      	ands	r2, r3
 800ed4e:	494b      	ldr	r1, [pc, #300]	@ (800ee7c <UTIL_SEQ_Run+0x1ec>)
 800ed50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed52:	00db      	lsls	r3, r3, #3
 800ed54:	440b      	add	r3, r1
 800ed56:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed58:	f3ef 8310 	mrs	r3, PRIMASK
 800ed5c:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed5e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ed60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed62:	b672      	cpsid	i
}
 800ed64:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ed66:	4b46      	ldr	r3, [pc, #280]	@ (800ee80 <UTIL_SEQ_Run+0x1f0>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed70:	43da      	mvns	r2, r3
 800ed72:	4b3e      	ldr	r3, [pc, #248]	@ (800ee6c <UTIL_SEQ_Run+0x1dc>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4013      	ands	r3, r2
 800ed78:	4a3c      	ldr	r2, [pc, #240]	@ (800ee6c <UTIL_SEQ_Run+0x1dc>)
 800ed7a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ed7c:	2302      	movs	r3, #2
 800ed7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed80:	e013      	b.n	800edaa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ed82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed84:	3b01      	subs	r3, #1
 800ed86:	4a3d      	ldr	r2, [pc, #244]	@ (800ee7c <UTIL_SEQ_Run+0x1ec>)
 800ed88:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ed8c:	4b3c      	ldr	r3, [pc, #240]	@ (800ee80 <UTIL_SEQ_Run+0x1f0>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2201      	movs	r2, #1
 800ed92:	fa02 f303 	lsl.w	r3, r2, r3
 800ed96:	43da      	mvns	r2, r3
 800ed98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed9a:	3b01      	subs	r3, #1
 800ed9c:	400a      	ands	r2, r1
 800ed9e:	4937      	ldr	r1, [pc, #220]	@ (800ee7c <UTIL_SEQ_Run+0x1ec>)
 800eda0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800eda4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eda6:	3b01      	subs	r3, #1
 800eda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1e8      	bne.n	800ed82 <UTIL_SEQ_Run+0xf2>
 800edb0:	6a3b      	ldr	r3, [r7, #32]
 800edb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	f383 8810 	msr	PRIMASK, r3
}
 800edba:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800edbc:	4b30      	ldr	r3, [pc, #192]	@ (800ee80 <UTIL_SEQ_Run+0x1f0>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a30      	ldr	r2, [pc, #192]	@ (800ee84 <UTIL_SEQ_Run+0x1f4>)
 800edc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edc6:	4798      	blx	r3

    local_taskset = TaskSet;
 800edc8:	4b28      	ldr	r3, [pc, #160]	@ (800ee6c <UTIL_SEQ_Run+0x1dc>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800edce:	4b28      	ldr	r3, [pc, #160]	@ (800ee70 <UTIL_SEQ_Run+0x1e0>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800edd4:	4b27      	ldr	r3, [pc, #156]	@ (800ee74 <UTIL_SEQ_Run+0x1e4>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800edda:	4b27      	ldr	r3, [pc, #156]	@ (800ee78 <UTIL_SEQ_Run+0x1e8>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ede0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ede2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede4:	401a      	ands	r2, r3
 800ede6:	4b20      	ldr	r3, [pc, #128]	@ (800ee68 <UTIL_SEQ_Run+0x1d8>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4013      	ands	r3, r2
 800edec:	2b00      	cmp	r3, #0
 800edee:	d005      	beq.n	800edfc <UTIL_SEQ_Run+0x16c>
 800edf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800edf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf4:	4013      	ands	r3, r2
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f43f af64 	beq.w	800ecc4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800edfc:	4b20      	ldr	r3, [pc, #128]	@ (800ee80 <UTIL_SEQ_Run+0x1f0>)
 800edfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ee02:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800ee04:	f000 f938 	bl	800f078 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee08:	f3ef 8310 	mrs	r3, PRIMASK
 800ee0c:	613b      	str	r3, [r7, #16]
  return(result);
 800ee0e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800ee10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee12:	b672      	cpsid	i
}
 800ee14:	bf00      	nop
  local_taskset = TaskSet;
 800ee16:	4b15      	ldr	r3, [pc, #84]	@ (800ee6c <UTIL_SEQ_Run+0x1dc>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ee1c:	4b14      	ldr	r3, [pc, #80]	@ (800ee70 <UTIL_SEQ_Run+0x1e0>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ee22:	4b14      	ldr	r3, [pc, #80]	@ (800ee74 <UTIL_SEQ_Run+0x1e4>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800ee28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2c:	401a      	ands	r2, r3
 800ee2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ee68 <UTIL_SEQ_Run+0x1d8>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4013      	ands	r3, r2
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d107      	bne.n	800ee48 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800ee38:	4b0f      	ldr	r3, [pc, #60]	@ (800ee78 <UTIL_SEQ_Run+0x1e8>)
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee3e:	4013      	ands	r3, r2
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d101      	bne.n	800ee48 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800ee44:	f7f3 fdd2 	bl	80029ec <UTIL_SEQ_Idle>
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f383 8810 	msr	PRIMASK, r3
}
 800ee52:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800ee54:	f000 f917 	bl	800f086 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ee58:	4a03      	ldr	r2, [pc, #12]	@ (800ee68 <UTIL_SEQ_Run+0x1d8>)
 800ee5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee5c:	6013      	str	r3, [r2, #0]

  return;
 800ee5e:	bf00      	nop
}
 800ee60:	3740      	adds	r7, #64	@ 0x40
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	20000034 	.word	0x20000034
 800ee6c:	20000854 	.word	0x20000854
 800ee70:	20000858 	.word	0x20000858
 800ee74:	20000030 	.word	0x20000030
 800ee78:	2000085c 	.word	0x2000085c
 800ee7c:	200008e4 	.word	0x200008e4
 800ee80:	20000860 	.word	0x20000860
 800ee84:	20000864 	.word	0x20000864

0800ee88 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b088      	sub	sp, #32
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	60b9      	str	r1, [r7, #8]
 800ee92:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee94:	f3ef 8310 	mrs	r3, PRIMASK
 800ee98:	617b      	str	r3, [r7, #20]
  return(result);
 800ee9a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ee9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee9e:	b672      	cpsid	i
}
 800eea0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f000 f8f6 	bl	800f094 <SEQ_BitPosition>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	4619      	mov	r1, r3
 800eeac:	4a06      	ldr	r2, [pc, #24]	@ (800eec8 <UTIL_SEQ_RegTask+0x40>)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	f383 8810 	msr	PRIMASK, r3
}
 800eebe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800eec0:	bf00      	nop
}
 800eec2:	3720      	adds	r7, #32
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}
 800eec8:	20000864 	.word	0x20000864

0800eecc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800eecc:	b480      	push	{r7}
 800eece:	b087      	sub	sp, #28
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eed6:	f3ef 8310 	mrs	r3, PRIMASK
 800eeda:	60fb      	str	r3, [r7, #12]
  return(result);
 800eedc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eede:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eee0:	b672      	cpsid	i
}
 800eee2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800eee4:	4b0d      	ldr	r3, [pc, #52]	@ (800ef1c <UTIL_SEQ_SetTask+0x50>)
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4313      	orrs	r3, r2
 800eeec:	4a0b      	ldr	r2, [pc, #44]	@ (800ef1c <UTIL_SEQ_SetTask+0x50>)
 800eeee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800eef0:	4a0b      	ldr	r2, [pc, #44]	@ (800ef20 <UTIL_SEQ_SetTask+0x54>)
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	431a      	orrs	r2, r3
 800eefc:	4908      	ldr	r1, [pc, #32]	@ (800ef20 <UTIL_SEQ_SetTask+0x54>)
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	f383 8810 	msr	PRIMASK, r3
}
 800ef0e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ef10:	bf00      	nop
}
 800ef12:	371c      	adds	r7, #28
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr
 800ef1c:	20000854 	.word	0x20000854
 800ef20:	200008e4 	.word	0x200008e4

0800ef24 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ef24:	b480      	push	{r7}
 800ef26:	b087      	sub	sp, #28
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ef30:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef32:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ef34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef36:	b672      	cpsid	i
}
 800ef38:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	43da      	mvns	r2, r3
 800ef3e:	4b08      	ldr	r3, [pc, #32]	@ (800ef60 <UTIL_SEQ_PauseTask+0x3c>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	4013      	ands	r3, r2
 800ef44:	4a06      	ldr	r2, [pc, #24]	@ (800ef60 <UTIL_SEQ_PauseTask+0x3c>)
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	f383 8810 	msr	PRIMASK, r3
}
 800ef52:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ef54:	bf00      	nop
}
 800ef56:	371c      	adds	r7, #28
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr
 800ef60:	20000030 	.word	0x20000030

0800ef64 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ef64:	b480      	push	{r7}
 800ef66:	b087      	sub	sp, #28
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ef70:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef72:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ef74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef76:	b672      	cpsid	i
}
 800ef78:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ef7a:	4b09      	ldr	r3, [pc, #36]	@ (800efa0 <UTIL_SEQ_ResumeTask+0x3c>)
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4313      	orrs	r3, r2
 800ef82:	4a07      	ldr	r2, [pc, #28]	@ (800efa0 <UTIL_SEQ_ResumeTask+0x3c>)
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	f383 8810 	msr	PRIMASK, r3
}
 800ef90:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ef92:	bf00      	nop
}
 800ef94:	371c      	adds	r7, #28
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	20000030 	.word	0x20000030

0800efa4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800efa4:	b480      	push	{r7}
 800efa6:	b087      	sub	sp, #28
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efac:	f3ef 8310 	mrs	r3, PRIMASK
 800efb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800efb2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800efb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800efb6:	b672      	cpsid	i
}
 800efb8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800efba:	4b09      	ldr	r3, [pc, #36]	@ (800efe0 <UTIL_SEQ_SetEvt+0x3c>)
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4313      	orrs	r3, r2
 800efc2:	4a07      	ldr	r2, [pc, #28]	@ (800efe0 <UTIL_SEQ_SetEvt+0x3c>)
 800efc4:	6013      	str	r3, [r2, #0]
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	f383 8810 	msr	PRIMASK, r3
}
 800efd0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800efd2:	bf00      	nop
}
 800efd4:	371c      	adds	r7, #28
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	20000858 	.word	0x20000858

0800efe4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800efec:	4b1f      	ldr	r3, [pc, #124]	@ (800f06c <UTIL_SEQ_WaitEvt+0x88>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800eff2:	4b1e      	ldr	r3, [pc, #120]	@ (800f06c <UTIL_SEQ_WaitEvt+0x88>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effa:	d102      	bne.n	800f002 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800effc:	2300      	movs	r3, #0
 800effe:	61fb      	str	r3, [r7, #28]
 800f000:	e005      	b.n	800f00e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800f002:	4b1a      	ldr	r3, [pc, #104]	@ (800f06c <UTIL_SEQ_WaitEvt+0x88>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2201      	movs	r2, #1
 800f008:	fa02 f303 	lsl.w	r3, r2, r3
 800f00c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800f00e:	4b18      	ldr	r3, [pc, #96]	@ (800f070 <UTIL_SEQ_WaitEvt+0x8c>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800f014:	4a16      	ldr	r2, [pc, #88]	@ (800f070 <UTIL_SEQ_WaitEvt+0x8c>)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800f01a:	e003      	b.n	800f024 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800f01c:	6879      	ldr	r1, [r7, #4]
 800f01e:	69f8      	ldr	r0, [r7, #28]
 800f020:	f7f3 fceb 	bl	80029fa <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800f024:	4b13      	ldr	r3, [pc, #76]	@ (800f074 <UTIL_SEQ_WaitEvt+0x90>)
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4013      	ands	r3, r2
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d0f5      	beq.n	800f01c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800f030:	4a0e      	ldr	r2, [pc, #56]	@ (800f06c <UTIL_SEQ_WaitEvt+0x88>)
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f036:	f3ef 8310 	mrs	r3, PRIMASK
 800f03a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f03c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f03e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f040:	b672      	cpsid	i
}
 800f042:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	43da      	mvns	r2, r3
 800f048:	4b0a      	ldr	r3, [pc, #40]	@ (800f074 <UTIL_SEQ_WaitEvt+0x90>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4013      	ands	r3, r2
 800f04e:	4a09      	ldr	r2, [pc, #36]	@ (800f074 <UTIL_SEQ_WaitEvt+0x90>)
 800f050:	6013      	str	r3, [r2, #0]
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f383 8810 	msr	PRIMASK, r3
}
 800f05c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800f05e:	4a04      	ldr	r2, [pc, #16]	@ (800f070 <UTIL_SEQ_WaitEvt+0x8c>)
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	6013      	str	r3, [r2, #0]
  return;
 800f064:	bf00      	nop
}
 800f066:	3720      	adds	r7, #32
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	20000860 	.word	0x20000860
 800f070:	2000085c 	.word	0x2000085c
 800f074:	20000858 	.word	0x20000858

0800f078 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800f078:	b480      	push	{r7}
 800f07a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f07c:	bf00      	nop
}
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr

0800f086 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800f086:	b480      	push	{r7}
 800f088:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f08a:	bf00      	nop
}
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800f09c:	2300      	movs	r3, #0
 800f09e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0aa:	d204      	bcs.n	800f0b6 <SEQ_BitPosition+0x22>
 800f0ac:	2310      	movs	r3, #16
 800f0ae:	73fb      	strb	r3, [r7, #15]
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	041b      	lsls	r3, r3, #16
 800f0b4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f0bc:	d205      	bcs.n	800f0ca <SEQ_BitPosition+0x36>
 800f0be:	7bfb      	ldrb	r3, [r7, #15]
 800f0c0:	3308      	adds	r3, #8
 800f0c2:	73fb      	strb	r3, [r7, #15]
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	021b      	lsls	r3, r3, #8
 800f0c8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f0d0:	d205      	bcs.n	800f0de <SEQ_BitPosition+0x4a>
 800f0d2:	7bfb      	ldrb	r3, [r7, #15]
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	73fb      	strb	r3, [r7, #15]
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	011b      	lsls	r3, r3, #4
 800f0dc:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	0f1b      	lsrs	r3, r3, #28
 800f0e2:	4a07      	ldr	r2, [pc, #28]	@ (800f100 <SEQ_BitPosition+0x6c>)
 800f0e4:	5cd2      	ldrb	r2, [r2, r3]
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
 800f0ee:	f1c3 031f 	rsb	r3, r3, #31
 800f0f2:	b2db      	uxtb	r3, r3
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	08013d64 	.word	0x08013d64

0800f104 <_calloc_r>:
 800f104:	b570      	push	{r4, r5, r6, lr}
 800f106:	fba1 5402 	umull	r5, r4, r1, r2
 800f10a:	b93c      	cbnz	r4, 800f11c <_calloc_r+0x18>
 800f10c:	4629      	mov	r1, r5
 800f10e:	f000 f83f 	bl	800f190 <_malloc_r>
 800f112:	4606      	mov	r6, r0
 800f114:	b928      	cbnz	r0, 800f122 <_calloc_r+0x1e>
 800f116:	2600      	movs	r6, #0
 800f118:	4630      	mov	r0, r6
 800f11a:	bd70      	pop	{r4, r5, r6, pc}
 800f11c:	220c      	movs	r2, #12
 800f11e:	6002      	str	r2, [r0, #0]
 800f120:	e7f9      	b.n	800f116 <_calloc_r+0x12>
 800f122:	462a      	mov	r2, r5
 800f124:	4621      	mov	r1, r4
 800f126:	f001 ff9f 	bl	8011068 <memset>
 800f12a:	e7f5      	b.n	800f118 <_calloc_r+0x14>

0800f12c <malloc>:
 800f12c:	4b02      	ldr	r3, [pc, #8]	@ (800f138 <malloc+0xc>)
 800f12e:	4601      	mov	r1, r0
 800f130:	6818      	ldr	r0, [r3, #0]
 800f132:	f000 b82d 	b.w	800f190 <_malloc_r>
 800f136:	bf00      	nop
 800f138:	200001b0 	.word	0x200001b0

0800f13c <free>:
 800f13c:	4b02      	ldr	r3, [pc, #8]	@ (800f148 <free+0xc>)
 800f13e:	4601      	mov	r1, r0
 800f140:	6818      	ldr	r0, [r3, #0]
 800f142:	f002 beb9 	b.w	8011eb8 <_free_r>
 800f146:	bf00      	nop
 800f148:	200001b0 	.word	0x200001b0

0800f14c <sbrk_aligned>:
 800f14c:	b570      	push	{r4, r5, r6, lr}
 800f14e:	4e0f      	ldr	r6, [pc, #60]	@ (800f18c <sbrk_aligned+0x40>)
 800f150:	460c      	mov	r4, r1
 800f152:	6831      	ldr	r1, [r6, #0]
 800f154:	4605      	mov	r5, r0
 800f156:	b911      	cbnz	r1, 800f15e <sbrk_aligned+0x12>
 800f158:	f001 ffd8 	bl	801110c <_sbrk_r>
 800f15c:	6030      	str	r0, [r6, #0]
 800f15e:	4621      	mov	r1, r4
 800f160:	4628      	mov	r0, r5
 800f162:	f001 ffd3 	bl	801110c <_sbrk_r>
 800f166:	1c43      	adds	r3, r0, #1
 800f168:	d103      	bne.n	800f172 <sbrk_aligned+0x26>
 800f16a:	f04f 34ff 	mov.w	r4, #4294967295
 800f16e:	4620      	mov	r0, r4
 800f170:	bd70      	pop	{r4, r5, r6, pc}
 800f172:	1cc4      	adds	r4, r0, #3
 800f174:	f024 0403 	bic.w	r4, r4, #3
 800f178:	42a0      	cmp	r0, r4
 800f17a:	d0f8      	beq.n	800f16e <sbrk_aligned+0x22>
 800f17c:	1a21      	subs	r1, r4, r0
 800f17e:	4628      	mov	r0, r5
 800f180:	f001 ffc4 	bl	801110c <_sbrk_r>
 800f184:	3001      	adds	r0, #1
 800f186:	d1f2      	bne.n	800f16e <sbrk_aligned+0x22>
 800f188:	e7ef      	b.n	800f16a <sbrk_aligned+0x1e>
 800f18a:	bf00      	nop
 800f18c:	200008f4 	.word	0x200008f4

0800f190 <_malloc_r>:
 800f190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f194:	1ccd      	adds	r5, r1, #3
 800f196:	f025 0503 	bic.w	r5, r5, #3
 800f19a:	3508      	adds	r5, #8
 800f19c:	2d0c      	cmp	r5, #12
 800f19e:	bf38      	it	cc
 800f1a0:	250c      	movcc	r5, #12
 800f1a2:	2d00      	cmp	r5, #0
 800f1a4:	4606      	mov	r6, r0
 800f1a6:	db01      	blt.n	800f1ac <_malloc_r+0x1c>
 800f1a8:	42a9      	cmp	r1, r5
 800f1aa:	d904      	bls.n	800f1b6 <_malloc_r+0x26>
 800f1ac:	230c      	movs	r3, #12
 800f1ae:	6033      	str	r3, [r6, #0]
 800f1b0:	2000      	movs	r0, #0
 800f1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f28c <_malloc_r+0xfc>
 800f1ba:	f000 f869 	bl	800f290 <__malloc_lock>
 800f1be:	f8d8 3000 	ldr.w	r3, [r8]
 800f1c2:	461c      	mov	r4, r3
 800f1c4:	bb44      	cbnz	r4, 800f218 <_malloc_r+0x88>
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f7ff ffbf 	bl	800f14c <sbrk_aligned>
 800f1ce:	1c43      	adds	r3, r0, #1
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	d158      	bne.n	800f286 <_malloc_r+0xf6>
 800f1d4:	f8d8 4000 	ldr.w	r4, [r8]
 800f1d8:	4627      	mov	r7, r4
 800f1da:	2f00      	cmp	r7, #0
 800f1dc:	d143      	bne.n	800f266 <_malloc_r+0xd6>
 800f1de:	2c00      	cmp	r4, #0
 800f1e0:	d04b      	beq.n	800f27a <_malloc_r+0xea>
 800f1e2:	6823      	ldr	r3, [r4, #0]
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	eb04 0903 	add.w	r9, r4, r3
 800f1ec:	f001 ff8e 	bl	801110c <_sbrk_r>
 800f1f0:	4581      	cmp	r9, r0
 800f1f2:	d142      	bne.n	800f27a <_malloc_r+0xea>
 800f1f4:	6821      	ldr	r1, [r4, #0]
 800f1f6:	1a6d      	subs	r5, r5, r1
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	f7ff ffa6 	bl	800f14c <sbrk_aligned>
 800f200:	3001      	adds	r0, #1
 800f202:	d03a      	beq.n	800f27a <_malloc_r+0xea>
 800f204:	6823      	ldr	r3, [r4, #0]
 800f206:	442b      	add	r3, r5
 800f208:	6023      	str	r3, [r4, #0]
 800f20a:	f8d8 3000 	ldr.w	r3, [r8]
 800f20e:	685a      	ldr	r2, [r3, #4]
 800f210:	bb62      	cbnz	r2, 800f26c <_malloc_r+0xdc>
 800f212:	f8c8 7000 	str.w	r7, [r8]
 800f216:	e00f      	b.n	800f238 <_malloc_r+0xa8>
 800f218:	6822      	ldr	r2, [r4, #0]
 800f21a:	1b52      	subs	r2, r2, r5
 800f21c:	d420      	bmi.n	800f260 <_malloc_r+0xd0>
 800f21e:	2a0b      	cmp	r2, #11
 800f220:	d917      	bls.n	800f252 <_malloc_r+0xc2>
 800f222:	1961      	adds	r1, r4, r5
 800f224:	42a3      	cmp	r3, r4
 800f226:	6025      	str	r5, [r4, #0]
 800f228:	bf18      	it	ne
 800f22a:	6059      	strne	r1, [r3, #4]
 800f22c:	6863      	ldr	r3, [r4, #4]
 800f22e:	bf08      	it	eq
 800f230:	f8c8 1000 	streq.w	r1, [r8]
 800f234:	5162      	str	r2, [r4, r5]
 800f236:	604b      	str	r3, [r1, #4]
 800f238:	4630      	mov	r0, r6
 800f23a:	f000 f82f 	bl	800f29c <__malloc_unlock>
 800f23e:	f104 000b 	add.w	r0, r4, #11
 800f242:	1d23      	adds	r3, r4, #4
 800f244:	f020 0007 	bic.w	r0, r0, #7
 800f248:	1ac2      	subs	r2, r0, r3
 800f24a:	bf1c      	itt	ne
 800f24c:	1a1b      	subne	r3, r3, r0
 800f24e:	50a3      	strne	r3, [r4, r2]
 800f250:	e7af      	b.n	800f1b2 <_malloc_r+0x22>
 800f252:	6862      	ldr	r2, [r4, #4]
 800f254:	42a3      	cmp	r3, r4
 800f256:	bf0c      	ite	eq
 800f258:	f8c8 2000 	streq.w	r2, [r8]
 800f25c:	605a      	strne	r2, [r3, #4]
 800f25e:	e7eb      	b.n	800f238 <_malloc_r+0xa8>
 800f260:	4623      	mov	r3, r4
 800f262:	6864      	ldr	r4, [r4, #4]
 800f264:	e7ae      	b.n	800f1c4 <_malloc_r+0x34>
 800f266:	463c      	mov	r4, r7
 800f268:	687f      	ldr	r7, [r7, #4]
 800f26a:	e7b6      	b.n	800f1da <_malloc_r+0x4a>
 800f26c:	461a      	mov	r2, r3
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	42a3      	cmp	r3, r4
 800f272:	d1fb      	bne.n	800f26c <_malloc_r+0xdc>
 800f274:	2300      	movs	r3, #0
 800f276:	6053      	str	r3, [r2, #4]
 800f278:	e7de      	b.n	800f238 <_malloc_r+0xa8>
 800f27a:	230c      	movs	r3, #12
 800f27c:	6033      	str	r3, [r6, #0]
 800f27e:	4630      	mov	r0, r6
 800f280:	f000 f80c 	bl	800f29c <__malloc_unlock>
 800f284:	e794      	b.n	800f1b0 <_malloc_r+0x20>
 800f286:	6005      	str	r5, [r0, #0]
 800f288:	e7d6      	b.n	800f238 <_malloc_r+0xa8>
 800f28a:	bf00      	nop
 800f28c:	200008f8 	.word	0x200008f8

0800f290 <__malloc_lock>:
 800f290:	4801      	ldr	r0, [pc, #4]	@ (800f298 <__malloc_lock+0x8>)
 800f292:	f001 bf88 	b.w	80111a6 <__retarget_lock_acquire_recursive>
 800f296:	bf00      	nop
 800f298:	20000a3c 	.word	0x20000a3c

0800f29c <__malloc_unlock>:
 800f29c:	4801      	ldr	r0, [pc, #4]	@ (800f2a4 <__malloc_unlock+0x8>)
 800f29e:	f001 bf83 	b.w	80111a8 <__retarget_lock_release_recursive>
 800f2a2:	bf00      	nop
 800f2a4:	20000a3c 	.word	0x20000a3c

0800f2a8 <realloc>:
 800f2a8:	4b02      	ldr	r3, [pc, #8]	@ (800f2b4 <realloc+0xc>)
 800f2aa:	460a      	mov	r2, r1
 800f2ac:	4601      	mov	r1, r0
 800f2ae:	6818      	ldr	r0, [r3, #0]
 800f2b0:	f000 b802 	b.w	800f2b8 <_realloc_r>
 800f2b4:	200001b0 	.word	0x200001b0

0800f2b8 <_realloc_r>:
 800f2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2bc:	4680      	mov	r8, r0
 800f2be:	4615      	mov	r5, r2
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	b921      	cbnz	r1, 800f2ce <_realloc_r+0x16>
 800f2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c8:	4611      	mov	r1, r2
 800f2ca:	f7ff bf61 	b.w	800f190 <_malloc_r>
 800f2ce:	b92a      	cbnz	r2, 800f2dc <_realloc_r+0x24>
 800f2d0:	f002 fdf2 	bl	8011eb8 <_free_r>
 800f2d4:	2400      	movs	r4, #0
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2dc:	f003 fe34 	bl	8012f48 <_malloc_usable_size_r>
 800f2e0:	4285      	cmp	r5, r0
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	d802      	bhi.n	800f2ec <_realloc_r+0x34>
 800f2e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f2ea:	d8f4      	bhi.n	800f2d6 <_realloc_r+0x1e>
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	4640      	mov	r0, r8
 800f2f0:	f7ff ff4e 	bl	800f190 <_malloc_r>
 800f2f4:	4607      	mov	r7, r0
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d0ec      	beq.n	800f2d4 <_realloc_r+0x1c>
 800f2fa:	42b5      	cmp	r5, r6
 800f2fc:	462a      	mov	r2, r5
 800f2fe:	4621      	mov	r1, r4
 800f300:	bf28      	it	cs
 800f302:	4632      	movcs	r2, r6
 800f304:	f001 ff51 	bl	80111aa <memcpy>
 800f308:	4621      	mov	r1, r4
 800f30a:	4640      	mov	r0, r8
 800f30c:	f002 fdd4 	bl	8011eb8 <_free_r>
 800f310:	463c      	mov	r4, r7
 800f312:	e7e0      	b.n	800f2d6 <_realloc_r+0x1e>

0800f314 <sulp>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	4604      	mov	r4, r0
 800f318:	460d      	mov	r5, r1
 800f31a:	ec45 4b10 	vmov	d0, r4, r5
 800f31e:	4616      	mov	r6, r2
 800f320:	f003 fcd4 	bl	8012ccc <__ulp>
 800f324:	ec51 0b10 	vmov	r0, r1, d0
 800f328:	b17e      	cbz	r6, 800f34a <sulp+0x36>
 800f32a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f32e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f332:	2b00      	cmp	r3, #0
 800f334:	dd09      	ble.n	800f34a <sulp+0x36>
 800f336:	051b      	lsls	r3, r3, #20
 800f338:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f33c:	2400      	movs	r4, #0
 800f33e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f342:	4622      	mov	r2, r4
 800f344:	462b      	mov	r3, r5
 800f346:	f7f1 f93f 	bl	80005c8 <__aeabi_dmul>
 800f34a:	ec41 0b10 	vmov	d0, r0, r1
 800f34e:	bd70      	pop	{r4, r5, r6, pc}

0800f350 <_strtod_l>:
 800f350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	b09f      	sub	sp, #124	@ 0x7c
 800f356:	460c      	mov	r4, r1
 800f358:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f35a:	2200      	movs	r2, #0
 800f35c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f35e:	9005      	str	r0, [sp, #20]
 800f360:	f04f 0a00 	mov.w	sl, #0
 800f364:	f04f 0b00 	mov.w	fp, #0
 800f368:	460a      	mov	r2, r1
 800f36a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f36c:	7811      	ldrb	r1, [r2, #0]
 800f36e:	292b      	cmp	r1, #43	@ 0x2b
 800f370:	d04a      	beq.n	800f408 <_strtod_l+0xb8>
 800f372:	d838      	bhi.n	800f3e6 <_strtod_l+0x96>
 800f374:	290d      	cmp	r1, #13
 800f376:	d832      	bhi.n	800f3de <_strtod_l+0x8e>
 800f378:	2908      	cmp	r1, #8
 800f37a:	d832      	bhi.n	800f3e2 <_strtod_l+0x92>
 800f37c:	2900      	cmp	r1, #0
 800f37e:	d03b      	beq.n	800f3f8 <_strtod_l+0xa8>
 800f380:	2200      	movs	r2, #0
 800f382:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f384:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f386:	782a      	ldrb	r2, [r5, #0]
 800f388:	2a30      	cmp	r2, #48	@ 0x30
 800f38a:	f040 80b3 	bne.w	800f4f4 <_strtod_l+0x1a4>
 800f38e:	786a      	ldrb	r2, [r5, #1]
 800f390:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f394:	2a58      	cmp	r2, #88	@ 0x58
 800f396:	d16e      	bne.n	800f476 <_strtod_l+0x126>
 800f398:	9302      	str	r3, [sp, #8]
 800f39a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f39c:	9301      	str	r3, [sp, #4]
 800f39e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f3a0:	9300      	str	r3, [sp, #0]
 800f3a2:	4a8e      	ldr	r2, [pc, #568]	@ (800f5dc <_strtod_l+0x28c>)
 800f3a4:	9805      	ldr	r0, [sp, #20]
 800f3a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f3a8:	a919      	add	r1, sp, #100	@ 0x64
 800f3aa:	f002 fe37 	bl	801201c <__gethex>
 800f3ae:	f010 060f 	ands.w	r6, r0, #15
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	d005      	beq.n	800f3c2 <_strtod_l+0x72>
 800f3b6:	2e06      	cmp	r6, #6
 800f3b8:	d128      	bne.n	800f40c <_strtod_l+0xbc>
 800f3ba:	3501      	adds	r5, #1
 800f3bc:	2300      	movs	r3, #0
 800f3be:	9519      	str	r5, [sp, #100]	@ 0x64
 800f3c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f040 858e 	bne.w	800fee6 <_strtod_l+0xb96>
 800f3ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3cc:	b1cb      	cbz	r3, 800f402 <_strtod_l+0xb2>
 800f3ce:	4652      	mov	r2, sl
 800f3d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f3d4:	ec43 2b10 	vmov	d0, r2, r3
 800f3d8:	b01f      	add	sp, #124	@ 0x7c
 800f3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3de:	2920      	cmp	r1, #32
 800f3e0:	d1ce      	bne.n	800f380 <_strtod_l+0x30>
 800f3e2:	3201      	adds	r2, #1
 800f3e4:	e7c1      	b.n	800f36a <_strtod_l+0x1a>
 800f3e6:	292d      	cmp	r1, #45	@ 0x2d
 800f3e8:	d1ca      	bne.n	800f380 <_strtod_l+0x30>
 800f3ea:	2101      	movs	r1, #1
 800f3ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f3ee:	1c51      	adds	r1, r2, #1
 800f3f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800f3f2:	7852      	ldrb	r2, [r2, #1]
 800f3f4:	2a00      	cmp	r2, #0
 800f3f6:	d1c5      	bne.n	800f384 <_strtod_l+0x34>
 800f3f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f3fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f040 8570 	bne.w	800fee2 <_strtod_l+0xb92>
 800f402:	4652      	mov	r2, sl
 800f404:	465b      	mov	r3, fp
 800f406:	e7e5      	b.n	800f3d4 <_strtod_l+0x84>
 800f408:	2100      	movs	r1, #0
 800f40a:	e7ef      	b.n	800f3ec <_strtod_l+0x9c>
 800f40c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f40e:	b13a      	cbz	r2, 800f420 <_strtod_l+0xd0>
 800f410:	2135      	movs	r1, #53	@ 0x35
 800f412:	a81c      	add	r0, sp, #112	@ 0x70
 800f414:	f003 fd54 	bl	8012ec0 <__copybits>
 800f418:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f41a:	9805      	ldr	r0, [sp, #20]
 800f41c:	f003 f922 	bl	8012664 <_Bfree>
 800f420:	3e01      	subs	r6, #1
 800f422:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f424:	2e04      	cmp	r6, #4
 800f426:	d806      	bhi.n	800f436 <_strtod_l+0xe6>
 800f428:	e8df f006 	tbb	[pc, r6]
 800f42c:	201d0314 	.word	0x201d0314
 800f430:	14          	.byte	0x14
 800f431:	00          	.byte	0x00
 800f432:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f436:	05e1      	lsls	r1, r4, #23
 800f438:	bf48      	it	mi
 800f43a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f43e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f442:	0d1b      	lsrs	r3, r3, #20
 800f444:	051b      	lsls	r3, r3, #20
 800f446:	2b00      	cmp	r3, #0
 800f448:	d1bb      	bne.n	800f3c2 <_strtod_l+0x72>
 800f44a:	f001 fe81 	bl	8011150 <__errno>
 800f44e:	2322      	movs	r3, #34	@ 0x22
 800f450:	6003      	str	r3, [r0, #0]
 800f452:	e7b6      	b.n	800f3c2 <_strtod_l+0x72>
 800f454:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f458:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f45c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f460:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f464:	e7e7      	b.n	800f436 <_strtod_l+0xe6>
 800f466:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f5e4 <_strtod_l+0x294>
 800f46a:	e7e4      	b.n	800f436 <_strtod_l+0xe6>
 800f46c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f470:	f04f 3aff 	mov.w	sl, #4294967295
 800f474:	e7df      	b.n	800f436 <_strtod_l+0xe6>
 800f476:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f478:	1c5a      	adds	r2, r3, #1
 800f47a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f47c:	785b      	ldrb	r3, [r3, #1]
 800f47e:	2b30      	cmp	r3, #48	@ 0x30
 800f480:	d0f9      	beq.n	800f476 <_strtod_l+0x126>
 800f482:	2b00      	cmp	r3, #0
 800f484:	d09d      	beq.n	800f3c2 <_strtod_l+0x72>
 800f486:	2301      	movs	r3, #1
 800f488:	9309      	str	r3, [sp, #36]	@ 0x24
 800f48a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f48c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f48e:	2300      	movs	r3, #0
 800f490:	9308      	str	r3, [sp, #32]
 800f492:	930a      	str	r3, [sp, #40]	@ 0x28
 800f494:	461f      	mov	r7, r3
 800f496:	220a      	movs	r2, #10
 800f498:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f49a:	7805      	ldrb	r5, [r0, #0]
 800f49c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f4a0:	b2d9      	uxtb	r1, r3
 800f4a2:	2909      	cmp	r1, #9
 800f4a4:	d928      	bls.n	800f4f8 <_strtod_l+0x1a8>
 800f4a6:	494e      	ldr	r1, [pc, #312]	@ (800f5e0 <_strtod_l+0x290>)
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	f001 fde5 	bl	8011078 <strncmp>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	d032      	beq.n	800f518 <_strtod_l+0x1c8>
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	462a      	mov	r2, r5
 800f4b6:	4681      	mov	r9, r0
 800f4b8:	463d      	mov	r5, r7
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2a65      	cmp	r2, #101	@ 0x65
 800f4be:	d001      	beq.n	800f4c4 <_strtod_l+0x174>
 800f4c0:	2a45      	cmp	r2, #69	@ 0x45
 800f4c2:	d114      	bne.n	800f4ee <_strtod_l+0x19e>
 800f4c4:	b91d      	cbnz	r5, 800f4ce <_strtod_l+0x17e>
 800f4c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4c8:	4302      	orrs	r2, r0
 800f4ca:	d095      	beq.n	800f3f8 <_strtod_l+0xa8>
 800f4cc:	2500      	movs	r5, #0
 800f4ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f4d0:	1c62      	adds	r2, r4, #1
 800f4d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f4d4:	7862      	ldrb	r2, [r4, #1]
 800f4d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800f4d8:	d077      	beq.n	800f5ca <_strtod_l+0x27a>
 800f4da:	2a2d      	cmp	r2, #45	@ 0x2d
 800f4dc:	d07b      	beq.n	800f5d6 <_strtod_l+0x286>
 800f4de:	f04f 0c00 	mov.w	ip, #0
 800f4e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f4e6:	2909      	cmp	r1, #9
 800f4e8:	f240 8082 	bls.w	800f5f0 <_strtod_l+0x2a0>
 800f4ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800f4ee:	f04f 0800 	mov.w	r8, #0
 800f4f2:	e0a2      	b.n	800f63a <_strtod_l+0x2ea>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e7c7      	b.n	800f488 <_strtod_l+0x138>
 800f4f8:	2f08      	cmp	r7, #8
 800f4fa:	bfd5      	itete	le
 800f4fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f4fe:	9908      	ldrgt	r1, [sp, #32]
 800f500:	fb02 3301 	mlale	r3, r2, r1, r3
 800f504:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f508:	f100 0001 	add.w	r0, r0, #1
 800f50c:	bfd4      	ite	le
 800f50e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f510:	9308      	strgt	r3, [sp, #32]
 800f512:	3701      	adds	r7, #1
 800f514:	9019      	str	r0, [sp, #100]	@ 0x64
 800f516:	e7bf      	b.n	800f498 <_strtod_l+0x148>
 800f518:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f51a:	1c5a      	adds	r2, r3, #1
 800f51c:	9219      	str	r2, [sp, #100]	@ 0x64
 800f51e:	785a      	ldrb	r2, [r3, #1]
 800f520:	b37f      	cbz	r7, 800f582 <_strtod_l+0x232>
 800f522:	4681      	mov	r9, r0
 800f524:	463d      	mov	r5, r7
 800f526:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f52a:	2b09      	cmp	r3, #9
 800f52c:	d912      	bls.n	800f554 <_strtod_l+0x204>
 800f52e:	2301      	movs	r3, #1
 800f530:	e7c4      	b.n	800f4bc <_strtod_l+0x16c>
 800f532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f534:	1c5a      	adds	r2, r3, #1
 800f536:	9219      	str	r2, [sp, #100]	@ 0x64
 800f538:	785a      	ldrb	r2, [r3, #1]
 800f53a:	3001      	adds	r0, #1
 800f53c:	2a30      	cmp	r2, #48	@ 0x30
 800f53e:	d0f8      	beq.n	800f532 <_strtod_l+0x1e2>
 800f540:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f544:	2b08      	cmp	r3, #8
 800f546:	f200 84d3 	bhi.w	800fef0 <_strtod_l+0xba0>
 800f54a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f54c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f54e:	4681      	mov	r9, r0
 800f550:	2000      	movs	r0, #0
 800f552:	4605      	mov	r5, r0
 800f554:	3a30      	subs	r2, #48	@ 0x30
 800f556:	f100 0301 	add.w	r3, r0, #1
 800f55a:	d02a      	beq.n	800f5b2 <_strtod_l+0x262>
 800f55c:	4499      	add	r9, r3
 800f55e:	eb00 0c05 	add.w	ip, r0, r5
 800f562:	462b      	mov	r3, r5
 800f564:	210a      	movs	r1, #10
 800f566:	4563      	cmp	r3, ip
 800f568:	d10d      	bne.n	800f586 <_strtod_l+0x236>
 800f56a:	1c69      	adds	r1, r5, #1
 800f56c:	4401      	add	r1, r0
 800f56e:	4428      	add	r0, r5
 800f570:	2808      	cmp	r0, #8
 800f572:	dc16      	bgt.n	800f5a2 <_strtod_l+0x252>
 800f574:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f576:	230a      	movs	r3, #10
 800f578:	fb03 2300 	mla	r3, r3, r0, r2
 800f57c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f57e:	2300      	movs	r3, #0
 800f580:	e018      	b.n	800f5b4 <_strtod_l+0x264>
 800f582:	4638      	mov	r0, r7
 800f584:	e7da      	b.n	800f53c <_strtod_l+0x1ec>
 800f586:	2b08      	cmp	r3, #8
 800f588:	f103 0301 	add.w	r3, r3, #1
 800f58c:	dc03      	bgt.n	800f596 <_strtod_l+0x246>
 800f58e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f590:	434e      	muls	r6, r1
 800f592:	960a      	str	r6, [sp, #40]	@ 0x28
 800f594:	e7e7      	b.n	800f566 <_strtod_l+0x216>
 800f596:	2b10      	cmp	r3, #16
 800f598:	bfde      	ittt	le
 800f59a:	9e08      	ldrle	r6, [sp, #32]
 800f59c:	434e      	mulle	r6, r1
 800f59e:	9608      	strle	r6, [sp, #32]
 800f5a0:	e7e1      	b.n	800f566 <_strtod_l+0x216>
 800f5a2:	280f      	cmp	r0, #15
 800f5a4:	dceb      	bgt.n	800f57e <_strtod_l+0x22e>
 800f5a6:	9808      	ldr	r0, [sp, #32]
 800f5a8:	230a      	movs	r3, #10
 800f5aa:	fb03 2300 	mla	r3, r3, r0, r2
 800f5ae:	9308      	str	r3, [sp, #32]
 800f5b0:	e7e5      	b.n	800f57e <_strtod_l+0x22e>
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f5b6:	1c50      	adds	r0, r2, #1
 800f5b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800f5ba:	7852      	ldrb	r2, [r2, #1]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	460d      	mov	r5, r1
 800f5c0:	e7b1      	b.n	800f526 <_strtod_l+0x1d6>
 800f5c2:	f04f 0900 	mov.w	r9, #0
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	e77d      	b.n	800f4c6 <_strtod_l+0x176>
 800f5ca:	f04f 0c00 	mov.w	ip, #0
 800f5ce:	1ca2      	adds	r2, r4, #2
 800f5d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800f5d2:	78a2      	ldrb	r2, [r4, #2]
 800f5d4:	e785      	b.n	800f4e2 <_strtod_l+0x192>
 800f5d6:	f04f 0c01 	mov.w	ip, #1
 800f5da:	e7f8      	b.n	800f5ce <_strtod_l+0x27e>
 800f5dc:	08013d8c 	.word	0x08013d8c
 800f5e0:	08013d74 	.word	0x08013d74
 800f5e4:	7ff00000 	.word	0x7ff00000
 800f5e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f5ea:	1c51      	adds	r1, r2, #1
 800f5ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800f5ee:	7852      	ldrb	r2, [r2, #1]
 800f5f0:	2a30      	cmp	r2, #48	@ 0x30
 800f5f2:	d0f9      	beq.n	800f5e8 <_strtod_l+0x298>
 800f5f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f5f8:	2908      	cmp	r1, #8
 800f5fa:	f63f af78 	bhi.w	800f4ee <_strtod_l+0x19e>
 800f5fe:	3a30      	subs	r2, #48	@ 0x30
 800f600:	920e      	str	r2, [sp, #56]	@ 0x38
 800f602:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f604:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f606:	f04f 080a 	mov.w	r8, #10
 800f60a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f60c:	1c56      	adds	r6, r2, #1
 800f60e:	9619      	str	r6, [sp, #100]	@ 0x64
 800f610:	7852      	ldrb	r2, [r2, #1]
 800f612:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f616:	f1be 0f09 	cmp.w	lr, #9
 800f61a:	d939      	bls.n	800f690 <_strtod_l+0x340>
 800f61c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f61e:	1a76      	subs	r6, r6, r1
 800f620:	2e08      	cmp	r6, #8
 800f622:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f626:	dc03      	bgt.n	800f630 <_strtod_l+0x2e0>
 800f628:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f62a:	4588      	cmp	r8, r1
 800f62c:	bfa8      	it	ge
 800f62e:	4688      	movge	r8, r1
 800f630:	f1bc 0f00 	cmp.w	ip, #0
 800f634:	d001      	beq.n	800f63a <_strtod_l+0x2ea>
 800f636:	f1c8 0800 	rsb	r8, r8, #0
 800f63a:	2d00      	cmp	r5, #0
 800f63c:	d14e      	bne.n	800f6dc <_strtod_l+0x38c>
 800f63e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f640:	4308      	orrs	r0, r1
 800f642:	f47f aebe 	bne.w	800f3c2 <_strtod_l+0x72>
 800f646:	2b00      	cmp	r3, #0
 800f648:	f47f aed6 	bne.w	800f3f8 <_strtod_l+0xa8>
 800f64c:	2a69      	cmp	r2, #105	@ 0x69
 800f64e:	d028      	beq.n	800f6a2 <_strtod_l+0x352>
 800f650:	dc25      	bgt.n	800f69e <_strtod_l+0x34e>
 800f652:	2a49      	cmp	r2, #73	@ 0x49
 800f654:	d025      	beq.n	800f6a2 <_strtod_l+0x352>
 800f656:	2a4e      	cmp	r2, #78	@ 0x4e
 800f658:	f47f aece 	bne.w	800f3f8 <_strtod_l+0xa8>
 800f65c:	499b      	ldr	r1, [pc, #620]	@ (800f8cc <_strtod_l+0x57c>)
 800f65e:	a819      	add	r0, sp, #100	@ 0x64
 800f660:	f002 fefe 	bl	8012460 <__match>
 800f664:	2800      	cmp	r0, #0
 800f666:	f43f aec7 	beq.w	800f3f8 <_strtod_l+0xa8>
 800f66a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	2b28      	cmp	r3, #40	@ 0x28
 800f670:	d12e      	bne.n	800f6d0 <_strtod_l+0x380>
 800f672:	4997      	ldr	r1, [pc, #604]	@ (800f8d0 <_strtod_l+0x580>)
 800f674:	aa1c      	add	r2, sp, #112	@ 0x70
 800f676:	a819      	add	r0, sp, #100	@ 0x64
 800f678:	f002 ff06 	bl	8012488 <__hexnan>
 800f67c:	2805      	cmp	r0, #5
 800f67e:	d127      	bne.n	800f6d0 <_strtod_l+0x380>
 800f680:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f682:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f686:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f68a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f68e:	e698      	b.n	800f3c2 <_strtod_l+0x72>
 800f690:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f692:	fb08 2101 	mla	r1, r8, r1, r2
 800f696:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f69a:	920e      	str	r2, [sp, #56]	@ 0x38
 800f69c:	e7b5      	b.n	800f60a <_strtod_l+0x2ba>
 800f69e:	2a6e      	cmp	r2, #110	@ 0x6e
 800f6a0:	e7da      	b.n	800f658 <_strtod_l+0x308>
 800f6a2:	498c      	ldr	r1, [pc, #560]	@ (800f8d4 <_strtod_l+0x584>)
 800f6a4:	a819      	add	r0, sp, #100	@ 0x64
 800f6a6:	f002 fedb 	bl	8012460 <__match>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	f43f aea4 	beq.w	800f3f8 <_strtod_l+0xa8>
 800f6b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6b2:	4989      	ldr	r1, [pc, #548]	@ (800f8d8 <_strtod_l+0x588>)
 800f6b4:	3b01      	subs	r3, #1
 800f6b6:	a819      	add	r0, sp, #100	@ 0x64
 800f6b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f6ba:	f002 fed1 	bl	8012460 <__match>
 800f6be:	b910      	cbnz	r0, 800f6c6 <_strtod_l+0x376>
 800f6c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f6c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f8e8 <_strtod_l+0x598>
 800f6ca:	f04f 0a00 	mov.w	sl, #0
 800f6ce:	e678      	b.n	800f3c2 <_strtod_l+0x72>
 800f6d0:	4882      	ldr	r0, [pc, #520]	@ (800f8dc <_strtod_l+0x58c>)
 800f6d2:	f001 fd79 	bl	80111c8 <nan>
 800f6d6:	ec5b ab10 	vmov	sl, fp, d0
 800f6da:	e672      	b.n	800f3c2 <_strtod_l+0x72>
 800f6dc:	eba8 0309 	sub.w	r3, r8, r9
 800f6e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f6e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6e4:	2f00      	cmp	r7, #0
 800f6e6:	bf08      	it	eq
 800f6e8:	462f      	moveq	r7, r5
 800f6ea:	2d10      	cmp	r5, #16
 800f6ec:	462c      	mov	r4, r5
 800f6ee:	bfa8      	it	ge
 800f6f0:	2410      	movge	r4, #16
 800f6f2:	f7f0 feef 	bl	80004d4 <__aeabi_ui2d>
 800f6f6:	2d09      	cmp	r5, #9
 800f6f8:	4682      	mov	sl, r0
 800f6fa:	468b      	mov	fp, r1
 800f6fc:	dc13      	bgt.n	800f726 <_strtod_l+0x3d6>
 800f6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f700:	2b00      	cmp	r3, #0
 800f702:	f43f ae5e 	beq.w	800f3c2 <_strtod_l+0x72>
 800f706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f708:	dd78      	ble.n	800f7fc <_strtod_l+0x4ac>
 800f70a:	2b16      	cmp	r3, #22
 800f70c:	dc5f      	bgt.n	800f7ce <_strtod_l+0x47e>
 800f70e:	4974      	ldr	r1, [pc, #464]	@ (800f8e0 <_strtod_l+0x590>)
 800f710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f714:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f718:	4652      	mov	r2, sl
 800f71a:	465b      	mov	r3, fp
 800f71c:	f7f0 ff54 	bl	80005c8 <__aeabi_dmul>
 800f720:	4682      	mov	sl, r0
 800f722:	468b      	mov	fp, r1
 800f724:	e64d      	b.n	800f3c2 <_strtod_l+0x72>
 800f726:	4b6e      	ldr	r3, [pc, #440]	@ (800f8e0 <_strtod_l+0x590>)
 800f728:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f72c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f730:	f7f0 ff4a 	bl	80005c8 <__aeabi_dmul>
 800f734:	4682      	mov	sl, r0
 800f736:	9808      	ldr	r0, [sp, #32]
 800f738:	468b      	mov	fp, r1
 800f73a:	f7f0 fecb 	bl	80004d4 <__aeabi_ui2d>
 800f73e:	4602      	mov	r2, r0
 800f740:	460b      	mov	r3, r1
 800f742:	4650      	mov	r0, sl
 800f744:	4659      	mov	r1, fp
 800f746:	f7f0 fd89 	bl	800025c <__adddf3>
 800f74a:	2d0f      	cmp	r5, #15
 800f74c:	4682      	mov	sl, r0
 800f74e:	468b      	mov	fp, r1
 800f750:	ddd5      	ble.n	800f6fe <_strtod_l+0x3ae>
 800f752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f754:	1b2c      	subs	r4, r5, r4
 800f756:	441c      	add	r4, r3
 800f758:	2c00      	cmp	r4, #0
 800f75a:	f340 8096 	ble.w	800f88a <_strtod_l+0x53a>
 800f75e:	f014 030f 	ands.w	r3, r4, #15
 800f762:	d00a      	beq.n	800f77a <_strtod_l+0x42a>
 800f764:	495e      	ldr	r1, [pc, #376]	@ (800f8e0 <_strtod_l+0x590>)
 800f766:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f76a:	4652      	mov	r2, sl
 800f76c:	465b      	mov	r3, fp
 800f76e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f772:	f7f0 ff29 	bl	80005c8 <__aeabi_dmul>
 800f776:	4682      	mov	sl, r0
 800f778:	468b      	mov	fp, r1
 800f77a:	f034 040f 	bics.w	r4, r4, #15
 800f77e:	d073      	beq.n	800f868 <_strtod_l+0x518>
 800f780:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f784:	dd48      	ble.n	800f818 <_strtod_l+0x4c8>
 800f786:	2400      	movs	r4, #0
 800f788:	46a0      	mov	r8, r4
 800f78a:	940a      	str	r4, [sp, #40]	@ 0x28
 800f78c:	46a1      	mov	r9, r4
 800f78e:	9a05      	ldr	r2, [sp, #20]
 800f790:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f8e8 <_strtod_l+0x598>
 800f794:	2322      	movs	r3, #34	@ 0x22
 800f796:	6013      	str	r3, [r2, #0]
 800f798:	f04f 0a00 	mov.w	sl, #0
 800f79c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f43f ae0f 	beq.w	800f3c2 <_strtod_l+0x72>
 800f7a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f7a6:	9805      	ldr	r0, [sp, #20]
 800f7a8:	f002 ff5c 	bl	8012664 <_Bfree>
 800f7ac:	9805      	ldr	r0, [sp, #20]
 800f7ae:	4649      	mov	r1, r9
 800f7b0:	f002 ff58 	bl	8012664 <_Bfree>
 800f7b4:	9805      	ldr	r0, [sp, #20]
 800f7b6:	4641      	mov	r1, r8
 800f7b8:	f002 ff54 	bl	8012664 <_Bfree>
 800f7bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7be:	9805      	ldr	r0, [sp, #20]
 800f7c0:	f002 ff50 	bl	8012664 <_Bfree>
 800f7c4:	9805      	ldr	r0, [sp, #20]
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	f002 ff4c 	bl	8012664 <_Bfree>
 800f7cc:	e5f9      	b.n	800f3c2 <_strtod_l+0x72>
 800f7ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	dbbc      	blt.n	800f752 <_strtod_l+0x402>
 800f7d8:	4c41      	ldr	r4, [pc, #260]	@ (800f8e0 <_strtod_l+0x590>)
 800f7da:	f1c5 050f 	rsb	r5, r5, #15
 800f7de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f7e2:	4652      	mov	r2, sl
 800f7e4:	465b      	mov	r3, fp
 800f7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7ea:	f7f0 feed 	bl	80005c8 <__aeabi_dmul>
 800f7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7f0:	1b5d      	subs	r5, r3, r5
 800f7f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f7f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f7fa:	e78f      	b.n	800f71c <_strtod_l+0x3cc>
 800f7fc:	3316      	adds	r3, #22
 800f7fe:	dba8      	blt.n	800f752 <_strtod_l+0x402>
 800f800:	4b37      	ldr	r3, [pc, #220]	@ (800f8e0 <_strtod_l+0x590>)
 800f802:	eba9 0808 	sub.w	r8, r9, r8
 800f806:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f80a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f80e:	4650      	mov	r0, sl
 800f810:	4659      	mov	r1, fp
 800f812:	f7f1 f803 	bl	800081c <__aeabi_ddiv>
 800f816:	e783      	b.n	800f720 <_strtod_l+0x3d0>
 800f818:	4b32      	ldr	r3, [pc, #200]	@ (800f8e4 <_strtod_l+0x594>)
 800f81a:	9308      	str	r3, [sp, #32]
 800f81c:	2300      	movs	r3, #0
 800f81e:	1124      	asrs	r4, r4, #4
 800f820:	4650      	mov	r0, sl
 800f822:	4659      	mov	r1, fp
 800f824:	461e      	mov	r6, r3
 800f826:	2c01      	cmp	r4, #1
 800f828:	dc21      	bgt.n	800f86e <_strtod_l+0x51e>
 800f82a:	b10b      	cbz	r3, 800f830 <_strtod_l+0x4e0>
 800f82c:	4682      	mov	sl, r0
 800f82e:	468b      	mov	fp, r1
 800f830:	492c      	ldr	r1, [pc, #176]	@ (800f8e4 <_strtod_l+0x594>)
 800f832:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f836:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f83a:	4652      	mov	r2, sl
 800f83c:	465b      	mov	r3, fp
 800f83e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f842:	f7f0 fec1 	bl	80005c8 <__aeabi_dmul>
 800f846:	4b28      	ldr	r3, [pc, #160]	@ (800f8e8 <_strtod_l+0x598>)
 800f848:	460a      	mov	r2, r1
 800f84a:	400b      	ands	r3, r1
 800f84c:	4927      	ldr	r1, [pc, #156]	@ (800f8ec <_strtod_l+0x59c>)
 800f84e:	428b      	cmp	r3, r1
 800f850:	4682      	mov	sl, r0
 800f852:	d898      	bhi.n	800f786 <_strtod_l+0x436>
 800f854:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f858:	428b      	cmp	r3, r1
 800f85a:	bf86      	itte	hi
 800f85c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f8f0 <_strtod_l+0x5a0>
 800f860:	f04f 3aff 	movhi.w	sl, #4294967295
 800f864:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f868:	2300      	movs	r3, #0
 800f86a:	9308      	str	r3, [sp, #32]
 800f86c:	e07a      	b.n	800f964 <_strtod_l+0x614>
 800f86e:	07e2      	lsls	r2, r4, #31
 800f870:	d505      	bpl.n	800f87e <_strtod_l+0x52e>
 800f872:	9b08      	ldr	r3, [sp, #32]
 800f874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f878:	f7f0 fea6 	bl	80005c8 <__aeabi_dmul>
 800f87c:	2301      	movs	r3, #1
 800f87e:	9a08      	ldr	r2, [sp, #32]
 800f880:	3208      	adds	r2, #8
 800f882:	3601      	adds	r6, #1
 800f884:	1064      	asrs	r4, r4, #1
 800f886:	9208      	str	r2, [sp, #32]
 800f888:	e7cd      	b.n	800f826 <_strtod_l+0x4d6>
 800f88a:	d0ed      	beq.n	800f868 <_strtod_l+0x518>
 800f88c:	4264      	negs	r4, r4
 800f88e:	f014 020f 	ands.w	r2, r4, #15
 800f892:	d00a      	beq.n	800f8aa <_strtod_l+0x55a>
 800f894:	4b12      	ldr	r3, [pc, #72]	@ (800f8e0 <_strtod_l+0x590>)
 800f896:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f89a:	4650      	mov	r0, sl
 800f89c:	4659      	mov	r1, fp
 800f89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a2:	f7f0 ffbb 	bl	800081c <__aeabi_ddiv>
 800f8a6:	4682      	mov	sl, r0
 800f8a8:	468b      	mov	fp, r1
 800f8aa:	1124      	asrs	r4, r4, #4
 800f8ac:	d0dc      	beq.n	800f868 <_strtod_l+0x518>
 800f8ae:	2c1f      	cmp	r4, #31
 800f8b0:	dd20      	ble.n	800f8f4 <_strtod_l+0x5a4>
 800f8b2:	2400      	movs	r4, #0
 800f8b4:	46a0      	mov	r8, r4
 800f8b6:	940a      	str	r4, [sp, #40]	@ 0x28
 800f8b8:	46a1      	mov	r9, r4
 800f8ba:	9a05      	ldr	r2, [sp, #20]
 800f8bc:	2322      	movs	r3, #34	@ 0x22
 800f8be:	f04f 0a00 	mov.w	sl, #0
 800f8c2:	f04f 0b00 	mov.w	fp, #0
 800f8c6:	6013      	str	r3, [r2, #0]
 800f8c8:	e768      	b.n	800f79c <_strtod_l+0x44c>
 800f8ca:	bf00      	nop
 800f8cc:	08013ed6 	.word	0x08013ed6
 800f8d0:	08013d78 	.word	0x08013d78
 800f8d4:	08013ece 	.word	0x08013ece
 800f8d8:	08013f49 	.word	0x08013f49
 800f8dc:	08013f45 	.word	0x08013f45
 800f8e0:	080140c0 	.word	0x080140c0
 800f8e4:	08014098 	.word	0x08014098
 800f8e8:	7ff00000 	.word	0x7ff00000
 800f8ec:	7ca00000 	.word	0x7ca00000
 800f8f0:	7fefffff 	.word	0x7fefffff
 800f8f4:	f014 0310 	ands.w	r3, r4, #16
 800f8f8:	bf18      	it	ne
 800f8fa:	236a      	movne	r3, #106	@ 0x6a
 800f8fc:	4ea9      	ldr	r6, [pc, #676]	@ (800fba4 <_strtod_l+0x854>)
 800f8fe:	9308      	str	r3, [sp, #32]
 800f900:	4650      	mov	r0, sl
 800f902:	4659      	mov	r1, fp
 800f904:	2300      	movs	r3, #0
 800f906:	07e2      	lsls	r2, r4, #31
 800f908:	d504      	bpl.n	800f914 <_strtod_l+0x5c4>
 800f90a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f90e:	f7f0 fe5b 	bl	80005c8 <__aeabi_dmul>
 800f912:	2301      	movs	r3, #1
 800f914:	1064      	asrs	r4, r4, #1
 800f916:	f106 0608 	add.w	r6, r6, #8
 800f91a:	d1f4      	bne.n	800f906 <_strtod_l+0x5b6>
 800f91c:	b10b      	cbz	r3, 800f922 <_strtod_l+0x5d2>
 800f91e:	4682      	mov	sl, r0
 800f920:	468b      	mov	fp, r1
 800f922:	9b08      	ldr	r3, [sp, #32]
 800f924:	b1b3      	cbz	r3, 800f954 <_strtod_l+0x604>
 800f926:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f92a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f92e:	2b00      	cmp	r3, #0
 800f930:	4659      	mov	r1, fp
 800f932:	dd0f      	ble.n	800f954 <_strtod_l+0x604>
 800f934:	2b1f      	cmp	r3, #31
 800f936:	dd55      	ble.n	800f9e4 <_strtod_l+0x694>
 800f938:	2b34      	cmp	r3, #52	@ 0x34
 800f93a:	bfde      	ittt	le
 800f93c:	f04f 33ff 	movle.w	r3, #4294967295
 800f940:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f944:	4093      	lslle	r3, r2
 800f946:	f04f 0a00 	mov.w	sl, #0
 800f94a:	bfcc      	ite	gt
 800f94c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f950:	ea03 0b01 	andle.w	fp, r3, r1
 800f954:	2200      	movs	r2, #0
 800f956:	2300      	movs	r3, #0
 800f958:	4650      	mov	r0, sl
 800f95a:	4659      	mov	r1, fp
 800f95c:	f7f1 f89c 	bl	8000a98 <__aeabi_dcmpeq>
 800f960:	2800      	cmp	r0, #0
 800f962:	d1a6      	bne.n	800f8b2 <_strtod_l+0x562>
 800f964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f96a:	9805      	ldr	r0, [sp, #20]
 800f96c:	462b      	mov	r3, r5
 800f96e:	463a      	mov	r2, r7
 800f970:	f002 fee0 	bl	8012734 <__s2b>
 800f974:	900a      	str	r0, [sp, #40]	@ 0x28
 800f976:	2800      	cmp	r0, #0
 800f978:	f43f af05 	beq.w	800f786 <_strtod_l+0x436>
 800f97c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f97e:	2a00      	cmp	r2, #0
 800f980:	eba9 0308 	sub.w	r3, r9, r8
 800f984:	bfa8      	it	ge
 800f986:	2300      	movge	r3, #0
 800f988:	9312      	str	r3, [sp, #72]	@ 0x48
 800f98a:	2400      	movs	r4, #0
 800f98c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f990:	9316      	str	r3, [sp, #88]	@ 0x58
 800f992:	46a0      	mov	r8, r4
 800f994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f996:	9805      	ldr	r0, [sp, #20]
 800f998:	6859      	ldr	r1, [r3, #4]
 800f99a:	f002 fe23 	bl	80125e4 <_Balloc>
 800f99e:	4681      	mov	r9, r0
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	f43f aef4 	beq.w	800f78e <_strtod_l+0x43e>
 800f9a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9a8:	691a      	ldr	r2, [r3, #16]
 800f9aa:	3202      	adds	r2, #2
 800f9ac:	f103 010c 	add.w	r1, r3, #12
 800f9b0:	0092      	lsls	r2, r2, #2
 800f9b2:	300c      	adds	r0, #12
 800f9b4:	f001 fbf9 	bl	80111aa <memcpy>
 800f9b8:	ec4b ab10 	vmov	d0, sl, fp
 800f9bc:	9805      	ldr	r0, [sp, #20]
 800f9be:	aa1c      	add	r2, sp, #112	@ 0x70
 800f9c0:	a91b      	add	r1, sp, #108	@ 0x6c
 800f9c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f9c6:	f003 f9f1 	bl	8012dac <__d2b>
 800f9ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	f43f aede 	beq.w	800f78e <_strtod_l+0x43e>
 800f9d2:	9805      	ldr	r0, [sp, #20]
 800f9d4:	2101      	movs	r1, #1
 800f9d6:	f002 ff43 	bl	8012860 <__i2b>
 800f9da:	4680      	mov	r8, r0
 800f9dc:	b948      	cbnz	r0, 800f9f2 <_strtod_l+0x6a2>
 800f9de:	f04f 0800 	mov.w	r8, #0
 800f9e2:	e6d4      	b.n	800f78e <_strtod_l+0x43e>
 800f9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800f9ec:	ea03 0a0a 	and.w	sl, r3, sl
 800f9f0:	e7b0      	b.n	800f954 <_strtod_l+0x604>
 800f9f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f9f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f9f6:	2d00      	cmp	r5, #0
 800f9f8:	bfab      	itete	ge
 800f9fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f9fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f9fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fa00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fa02:	bfac      	ite	ge
 800fa04:	18ef      	addge	r7, r5, r3
 800fa06:	1b5e      	sublt	r6, r3, r5
 800fa08:	9b08      	ldr	r3, [sp, #32]
 800fa0a:	1aed      	subs	r5, r5, r3
 800fa0c:	4415      	add	r5, r2
 800fa0e:	4b66      	ldr	r3, [pc, #408]	@ (800fba8 <_strtod_l+0x858>)
 800fa10:	3d01      	subs	r5, #1
 800fa12:	429d      	cmp	r5, r3
 800fa14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fa18:	da50      	bge.n	800fabc <_strtod_l+0x76c>
 800fa1a:	1b5b      	subs	r3, r3, r5
 800fa1c:	2b1f      	cmp	r3, #31
 800fa1e:	eba2 0203 	sub.w	r2, r2, r3
 800fa22:	f04f 0101 	mov.w	r1, #1
 800fa26:	dc3d      	bgt.n	800faa4 <_strtod_l+0x754>
 800fa28:	fa01 f303 	lsl.w	r3, r1, r3
 800fa2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa2e:	2300      	movs	r3, #0
 800fa30:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa32:	18bd      	adds	r5, r7, r2
 800fa34:	9b08      	ldr	r3, [sp, #32]
 800fa36:	42af      	cmp	r7, r5
 800fa38:	4416      	add	r6, r2
 800fa3a:	441e      	add	r6, r3
 800fa3c:	463b      	mov	r3, r7
 800fa3e:	bfa8      	it	ge
 800fa40:	462b      	movge	r3, r5
 800fa42:	42b3      	cmp	r3, r6
 800fa44:	bfa8      	it	ge
 800fa46:	4633      	movge	r3, r6
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	bfc2      	ittt	gt
 800fa4c:	1aed      	subgt	r5, r5, r3
 800fa4e:	1af6      	subgt	r6, r6, r3
 800fa50:	1aff      	subgt	r7, r7, r3
 800fa52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	dd16      	ble.n	800fa86 <_strtod_l+0x736>
 800fa58:	4641      	mov	r1, r8
 800fa5a:	9805      	ldr	r0, [sp, #20]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	f002 ffbf 	bl	80129e0 <__pow5mult>
 800fa62:	4680      	mov	r8, r0
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d0ba      	beq.n	800f9de <_strtod_l+0x68e>
 800fa68:	4601      	mov	r1, r0
 800fa6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fa6c:	9805      	ldr	r0, [sp, #20]
 800fa6e:	f002 ff0d 	bl	801288c <__multiply>
 800fa72:	900e      	str	r0, [sp, #56]	@ 0x38
 800fa74:	2800      	cmp	r0, #0
 800fa76:	f43f ae8a 	beq.w	800f78e <_strtod_l+0x43e>
 800fa7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa7c:	9805      	ldr	r0, [sp, #20]
 800fa7e:	f002 fdf1 	bl	8012664 <_Bfree>
 800fa82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa84:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa86:	2d00      	cmp	r5, #0
 800fa88:	dc1d      	bgt.n	800fac6 <_strtod_l+0x776>
 800fa8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	dd23      	ble.n	800fad8 <_strtod_l+0x788>
 800fa90:	4649      	mov	r1, r9
 800fa92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fa94:	9805      	ldr	r0, [sp, #20]
 800fa96:	f002 ffa3 	bl	80129e0 <__pow5mult>
 800fa9a:	4681      	mov	r9, r0
 800fa9c:	b9e0      	cbnz	r0, 800fad8 <_strtod_l+0x788>
 800fa9e:	f04f 0900 	mov.w	r9, #0
 800faa2:	e674      	b.n	800f78e <_strtod_l+0x43e>
 800faa4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800faa8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800faac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fab0:	35e2      	adds	r5, #226	@ 0xe2
 800fab2:	fa01 f305 	lsl.w	r3, r1, r5
 800fab6:	9310      	str	r3, [sp, #64]	@ 0x40
 800fab8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800faba:	e7ba      	b.n	800fa32 <_strtod_l+0x6e2>
 800fabc:	2300      	movs	r3, #0
 800fabe:	9310      	str	r3, [sp, #64]	@ 0x40
 800fac0:	2301      	movs	r3, #1
 800fac2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fac4:	e7b5      	b.n	800fa32 <_strtod_l+0x6e2>
 800fac6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fac8:	9805      	ldr	r0, [sp, #20]
 800faca:	462a      	mov	r2, r5
 800facc:	f002 ffe2 	bl	8012a94 <__lshift>
 800fad0:	901a      	str	r0, [sp, #104]	@ 0x68
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d1d9      	bne.n	800fa8a <_strtod_l+0x73a>
 800fad6:	e65a      	b.n	800f78e <_strtod_l+0x43e>
 800fad8:	2e00      	cmp	r6, #0
 800fada:	dd07      	ble.n	800faec <_strtod_l+0x79c>
 800fadc:	4649      	mov	r1, r9
 800fade:	9805      	ldr	r0, [sp, #20]
 800fae0:	4632      	mov	r2, r6
 800fae2:	f002 ffd7 	bl	8012a94 <__lshift>
 800fae6:	4681      	mov	r9, r0
 800fae8:	2800      	cmp	r0, #0
 800faea:	d0d8      	beq.n	800fa9e <_strtod_l+0x74e>
 800faec:	2f00      	cmp	r7, #0
 800faee:	dd08      	ble.n	800fb02 <_strtod_l+0x7b2>
 800faf0:	4641      	mov	r1, r8
 800faf2:	9805      	ldr	r0, [sp, #20]
 800faf4:	463a      	mov	r2, r7
 800faf6:	f002 ffcd 	bl	8012a94 <__lshift>
 800fafa:	4680      	mov	r8, r0
 800fafc:	2800      	cmp	r0, #0
 800fafe:	f43f ae46 	beq.w	800f78e <_strtod_l+0x43e>
 800fb02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fb04:	9805      	ldr	r0, [sp, #20]
 800fb06:	464a      	mov	r2, r9
 800fb08:	f003 f84c 	bl	8012ba4 <__mdiff>
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	f43f ae3d 	beq.w	800f78e <_strtod_l+0x43e>
 800fb14:	68c3      	ldr	r3, [r0, #12]
 800fb16:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb18:	2300      	movs	r3, #0
 800fb1a:	60c3      	str	r3, [r0, #12]
 800fb1c:	4641      	mov	r1, r8
 800fb1e:	f003 f825 	bl	8012b6c <__mcmp>
 800fb22:	2800      	cmp	r0, #0
 800fb24:	da46      	bge.n	800fbb4 <_strtod_l+0x864>
 800fb26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb28:	ea53 030a 	orrs.w	r3, r3, sl
 800fb2c:	d16c      	bne.n	800fc08 <_strtod_l+0x8b8>
 800fb2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d168      	bne.n	800fc08 <_strtod_l+0x8b8>
 800fb36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb3a:	0d1b      	lsrs	r3, r3, #20
 800fb3c:	051b      	lsls	r3, r3, #20
 800fb3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fb42:	d961      	bls.n	800fc08 <_strtod_l+0x8b8>
 800fb44:	6963      	ldr	r3, [r4, #20]
 800fb46:	b913      	cbnz	r3, 800fb4e <_strtod_l+0x7fe>
 800fb48:	6923      	ldr	r3, [r4, #16]
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	dd5c      	ble.n	800fc08 <_strtod_l+0x8b8>
 800fb4e:	4621      	mov	r1, r4
 800fb50:	2201      	movs	r2, #1
 800fb52:	9805      	ldr	r0, [sp, #20]
 800fb54:	f002 ff9e 	bl	8012a94 <__lshift>
 800fb58:	4641      	mov	r1, r8
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	f003 f806 	bl	8012b6c <__mcmp>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	dd51      	ble.n	800fc08 <_strtod_l+0x8b8>
 800fb64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb68:	9a08      	ldr	r2, [sp, #32]
 800fb6a:	0d1b      	lsrs	r3, r3, #20
 800fb6c:	051b      	lsls	r3, r3, #20
 800fb6e:	2a00      	cmp	r2, #0
 800fb70:	d06b      	beq.n	800fc4a <_strtod_l+0x8fa>
 800fb72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fb76:	d868      	bhi.n	800fc4a <_strtod_l+0x8fa>
 800fb78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fb7c:	f67f ae9d 	bls.w	800f8ba <_strtod_l+0x56a>
 800fb80:	4b0a      	ldr	r3, [pc, #40]	@ (800fbac <_strtod_l+0x85c>)
 800fb82:	4650      	mov	r0, sl
 800fb84:	4659      	mov	r1, fp
 800fb86:	2200      	movs	r2, #0
 800fb88:	f7f0 fd1e 	bl	80005c8 <__aeabi_dmul>
 800fb8c:	4b08      	ldr	r3, [pc, #32]	@ (800fbb0 <_strtod_l+0x860>)
 800fb8e:	400b      	ands	r3, r1
 800fb90:	4682      	mov	sl, r0
 800fb92:	468b      	mov	fp, r1
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	f47f ae05 	bne.w	800f7a4 <_strtod_l+0x454>
 800fb9a:	9a05      	ldr	r2, [sp, #20]
 800fb9c:	2322      	movs	r3, #34	@ 0x22
 800fb9e:	6013      	str	r3, [r2, #0]
 800fba0:	e600      	b.n	800f7a4 <_strtod_l+0x454>
 800fba2:	bf00      	nop
 800fba4:	08013da0 	.word	0x08013da0
 800fba8:	fffffc02 	.word	0xfffffc02
 800fbac:	39500000 	.word	0x39500000
 800fbb0:	7ff00000 	.word	0x7ff00000
 800fbb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fbb8:	d165      	bne.n	800fc86 <_strtod_l+0x936>
 800fbba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fbbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbc0:	b35a      	cbz	r2, 800fc1a <_strtod_l+0x8ca>
 800fbc2:	4a9f      	ldr	r2, [pc, #636]	@ (800fe40 <_strtod_l+0xaf0>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d12b      	bne.n	800fc20 <_strtod_l+0x8d0>
 800fbc8:	9b08      	ldr	r3, [sp, #32]
 800fbca:	4651      	mov	r1, sl
 800fbcc:	b303      	cbz	r3, 800fc10 <_strtod_l+0x8c0>
 800fbce:	4b9d      	ldr	r3, [pc, #628]	@ (800fe44 <_strtod_l+0xaf4>)
 800fbd0:	465a      	mov	r2, fp
 800fbd2:	4013      	ands	r3, r2
 800fbd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbdc:	d81b      	bhi.n	800fc16 <_strtod_l+0x8c6>
 800fbde:	0d1b      	lsrs	r3, r3, #20
 800fbe0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fbe4:	fa02 f303 	lsl.w	r3, r2, r3
 800fbe8:	4299      	cmp	r1, r3
 800fbea:	d119      	bne.n	800fc20 <_strtod_l+0x8d0>
 800fbec:	4b96      	ldr	r3, [pc, #600]	@ (800fe48 <_strtod_l+0xaf8>)
 800fbee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d102      	bne.n	800fbfa <_strtod_l+0x8aa>
 800fbf4:	3101      	adds	r1, #1
 800fbf6:	f43f adca 	beq.w	800f78e <_strtod_l+0x43e>
 800fbfa:	4b92      	ldr	r3, [pc, #584]	@ (800fe44 <_strtod_l+0xaf4>)
 800fbfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbfe:	401a      	ands	r2, r3
 800fc00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fc04:	f04f 0a00 	mov.w	sl, #0
 800fc08:	9b08      	ldr	r3, [sp, #32]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1b8      	bne.n	800fb80 <_strtod_l+0x830>
 800fc0e:	e5c9      	b.n	800f7a4 <_strtod_l+0x454>
 800fc10:	f04f 33ff 	mov.w	r3, #4294967295
 800fc14:	e7e8      	b.n	800fbe8 <_strtod_l+0x898>
 800fc16:	4613      	mov	r3, r2
 800fc18:	e7e6      	b.n	800fbe8 <_strtod_l+0x898>
 800fc1a:	ea53 030a 	orrs.w	r3, r3, sl
 800fc1e:	d0a1      	beq.n	800fb64 <_strtod_l+0x814>
 800fc20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc22:	b1db      	cbz	r3, 800fc5c <_strtod_l+0x90c>
 800fc24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc26:	4213      	tst	r3, r2
 800fc28:	d0ee      	beq.n	800fc08 <_strtod_l+0x8b8>
 800fc2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc2c:	9a08      	ldr	r2, [sp, #32]
 800fc2e:	4650      	mov	r0, sl
 800fc30:	4659      	mov	r1, fp
 800fc32:	b1bb      	cbz	r3, 800fc64 <_strtod_l+0x914>
 800fc34:	f7ff fb6e 	bl	800f314 <sulp>
 800fc38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc3c:	ec53 2b10 	vmov	r2, r3, d0
 800fc40:	f7f0 fb0c 	bl	800025c <__adddf3>
 800fc44:	4682      	mov	sl, r0
 800fc46:	468b      	mov	fp, r1
 800fc48:	e7de      	b.n	800fc08 <_strtod_l+0x8b8>
 800fc4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fc4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fc52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fc56:	f04f 3aff 	mov.w	sl, #4294967295
 800fc5a:	e7d5      	b.n	800fc08 <_strtod_l+0x8b8>
 800fc5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc5e:	ea13 0f0a 	tst.w	r3, sl
 800fc62:	e7e1      	b.n	800fc28 <_strtod_l+0x8d8>
 800fc64:	f7ff fb56 	bl	800f314 <sulp>
 800fc68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc6c:	ec53 2b10 	vmov	r2, r3, d0
 800fc70:	f7f0 faf2 	bl	8000258 <__aeabi_dsub>
 800fc74:	2200      	movs	r2, #0
 800fc76:	2300      	movs	r3, #0
 800fc78:	4682      	mov	sl, r0
 800fc7a:	468b      	mov	fp, r1
 800fc7c:	f7f0 ff0c 	bl	8000a98 <__aeabi_dcmpeq>
 800fc80:	2800      	cmp	r0, #0
 800fc82:	d0c1      	beq.n	800fc08 <_strtod_l+0x8b8>
 800fc84:	e619      	b.n	800f8ba <_strtod_l+0x56a>
 800fc86:	4641      	mov	r1, r8
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f003 f8e7 	bl	8012e5c <__ratio>
 800fc8e:	ec57 6b10 	vmov	r6, r7, d0
 800fc92:	2200      	movs	r2, #0
 800fc94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fc98:	4630      	mov	r0, r6
 800fc9a:	4639      	mov	r1, r7
 800fc9c:	f7f0 ff10 	bl	8000ac0 <__aeabi_dcmple>
 800fca0:	2800      	cmp	r0, #0
 800fca2:	d06f      	beq.n	800fd84 <_strtod_l+0xa34>
 800fca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d17a      	bne.n	800fda0 <_strtod_l+0xa50>
 800fcaa:	f1ba 0f00 	cmp.w	sl, #0
 800fcae:	d158      	bne.n	800fd62 <_strtod_l+0xa12>
 800fcb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d15a      	bne.n	800fd70 <_strtod_l+0xa20>
 800fcba:	4b64      	ldr	r3, [pc, #400]	@ (800fe4c <_strtod_l+0xafc>)
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	4639      	mov	r1, r7
 800fcc2:	f7f0 fef3 	bl	8000aac <__aeabi_dcmplt>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d159      	bne.n	800fd7e <_strtod_l+0xa2e>
 800fcca:	4630      	mov	r0, r6
 800fccc:	4639      	mov	r1, r7
 800fcce:	4b60      	ldr	r3, [pc, #384]	@ (800fe50 <_strtod_l+0xb00>)
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f7f0 fc79 	bl	80005c8 <__aeabi_dmul>
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	460f      	mov	r7, r1
 800fcda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fcde:	9606      	str	r6, [sp, #24]
 800fce0:	9307      	str	r3, [sp, #28]
 800fce2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fce6:	4d57      	ldr	r5, [pc, #348]	@ (800fe44 <_strtod_l+0xaf4>)
 800fce8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fcec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcee:	401d      	ands	r5, r3
 800fcf0:	4b58      	ldr	r3, [pc, #352]	@ (800fe54 <_strtod_l+0xb04>)
 800fcf2:	429d      	cmp	r5, r3
 800fcf4:	f040 80b2 	bne.w	800fe5c <_strtod_l+0xb0c>
 800fcf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fcfe:	ec4b ab10 	vmov	d0, sl, fp
 800fd02:	f002 ffe3 	bl	8012ccc <__ulp>
 800fd06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd0a:	ec51 0b10 	vmov	r0, r1, d0
 800fd0e:	f7f0 fc5b 	bl	80005c8 <__aeabi_dmul>
 800fd12:	4652      	mov	r2, sl
 800fd14:	465b      	mov	r3, fp
 800fd16:	f7f0 faa1 	bl	800025c <__adddf3>
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	4949      	ldr	r1, [pc, #292]	@ (800fe44 <_strtod_l+0xaf4>)
 800fd1e:	4a4e      	ldr	r2, [pc, #312]	@ (800fe58 <_strtod_l+0xb08>)
 800fd20:	4019      	ands	r1, r3
 800fd22:	4291      	cmp	r1, r2
 800fd24:	4682      	mov	sl, r0
 800fd26:	d942      	bls.n	800fdae <_strtod_l+0xa5e>
 800fd28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd2a:	4b47      	ldr	r3, [pc, #284]	@ (800fe48 <_strtod_l+0xaf8>)
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d103      	bne.n	800fd38 <_strtod_l+0x9e8>
 800fd30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd32:	3301      	adds	r3, #1
 800fd34:	f43f ad2b 	beq.w	800f78e <_strtod_l+0x43e>
 800fd38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fe48 <_strtod_l+0xaf8>
 800fd3c:	f04f 3aff 	mov.w	sl, #4294967295
 800fd40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd42:	9805      	ldr	r0, [sp, #20]
 800fd44:	f002 fc8e 	bl	8012664 <_Bfree>
 800fd48:	9805      	ldr	r0, [sp, #20]
 800fd4a:	4649      	mov	r1, r9
 800fd4c:	f002 fc8a 	bl	8012664 <_Bfree>
 800fd50:	9805      	ldr	r0, [sp, #20]
 800fd52:	4641      	mov	r1, r8
 800fd54:	f002 fc86 	bl	8012664 <_Bfree>
 800fd58:	9805      	ldr	r0, [sp, #20]
 800fd5a:	4621      	mov	r1, r4
 800fd5c:	f002 fc82 	bl	8012664 <_Bfree>
 800fd60:	e618      	b.n	800f994 <_strtod_l+0x644>
 800fd62:	f1ba 0f01 	cmp.w	sl, #1
 800fd66:	d103      	bne.n	800fd70 <_strtod_l+0xa20>
 800fd68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	f43f ada5 	beq.w	800f8ba <_strtod_l+0x56a>
 800fd70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fe20 <_strtod_l+0xad0>
 800fd74:	4f35      	ldr	r7, [pc, #212]	@ (800fe4c <_strtod_l+0xafc>)
 800fd76:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fd7a:	2600      	movs	r6, #0
 800fd7c:	e7b1      	b.n	800fce2 <_strtod_l+0x992>
 800fd7e:	4f34      	ldr	r7, [pc, #208]	@ (800fe50 <_strtod_l+0xb00>)
 800fd80:	2600      	movs	r6, #0
 800fd82:	e7aa      	b.n	800fcda <_strtod_l+0x98a>
 800fd84:	4b32      	ldr	r3, [pc, #200]	@ (800fe50 <_strtod_l+0xb00>)
 800fd86:	4630      	mov	r0, r6
 800fd88:	4639      	mov	r1, r7
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	f7f0 fc1c 	bl	80005c8 <__aeabi_dmul>
 800fd90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd92:	4606      	mov	r6, r0
 800fd94:	460f      	mov	r7, r1
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d09f      	beq.n	800fcda <_strtod_l+0x98a>
 800fd9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fd9e:	e7a0      	b.n	800fce2 <_strtod_l+0x992>
 800fda0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fe28 <_strtod_l+0xad8>
 800fda4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fda8:	ec57 6b17 	vmov	r6, r7, d7
 800fdac:	e799      	b.n	800fce2 <_strtod_l+0x992>
 800fdae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fdb2:	9b08      	ldr	r3, [sp, #32]
 800fdb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1c1      	bne.n	800fd40 <_strtod_l+0x9f0>
 800fdbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fdc0:	0d1b      	lsrs	r3, r3, #20
 800fdc2:	051b      	lsls	r3, r3, #20
 800fdc4:	429d      	cmp	r5, r3
 800fdc6:	d1bb      	bne.n	800fd40 <_strtod_l+0x9f0>
 800fdc8:	4630      	mov	r0, r6
 800fdca:	4639      	mov	r1, r7
 800fdcc:	f7f0 ff5c 	bl	8000c88 <__aeabi_d2lz>
 800fdd0:	f7f0 fbcc 	bl	800056c <__aeabi_l2d>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	460b      	mov	r3, r1
 800fdd8:	4630      	mov	r0, r6
 800fdda:	4639      	mov	r1, r7
 800fddc:	f7f0 fa3c 	bl	8000258 <__aeabi_dsub>
 800fde0:	460b      	mov	r3, r1
 800fde2:	4602      	mov	r2, r0
 800fde4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fde8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fdec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdee:	ea46 060a 	orr.w	r6, r6, sl
 800fdf2:	431e      	orrs	r6, r3
 800fdf4:	d06f      	beq.n	800fed6 <_strtod_l+0xb86>
 800fdf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800fe30 <_strtod_l+0xae0>)
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	f7f0 fe56 	bl	8000aac <__aeabi_dcmplt>
 800fe00:	2800      	cmp	r0, #0
 800fe02:	f47f accf 	bne.w	800f7a4 <_strtod_l+0x454>
 800fe06:	a30c      	add	r3, pc, #48	@ (adr r3, 800fe38 <_strtod_l+0xae8>)
 800fe08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe10:	f7f0 fe6a 	bl	8000ae8 <__aeabi_dcmpgt>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d093      	beq.n	800fd40 <_strtod_l+0x9f0>
 800fe18:	e4c4      	b.n	800f7a4 <_strtod_l+0x454>
 800fe1a:	bf00      	nop
 800fe1c:	f3af 8000 	nop.w
 800fe20:	00000000 	.word	0x00000000
 800fe24:	bff00000 	.word	0xbff00000
 800fe28:	00000000 	.word	0x00000000
 800fe2c:	3ff00000 	.word	0x3ff00000
 800fe30:	94a03595 	.word	0x94a03595
 800fe34:	3fdfffff 	.word	0x3fdfffff
 800fe38:	35afe535 	.word	0x35afe535
 800fe3c:	3fe00000 	.word	0x3fe00000
 800fe40:	000fffff 	.word	0x000fffff
 800fe44:	7ff00000 	.word	0x7ff00000
 800fe48:	7fefffff 	.word	0x7fefffff
 800fe4c:	3ff00000 	.word	0x3ff00000
 800fe50:	3fe00000 	.word	0x3fe00000
 800fe54:	7fe00000 	.word	0x7fe00000
 800fe58:	7c9fffff 	.word	0x7c9fffff
 800fe5c:	9b08      	ldr	r3, [sp, #32]
 800fe5e:	b323      	cbz	r3, 800feaa <_strtod_l+0xb5a>
 800fe60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fe64:	d821      	bhi.n	800feaa <_strtod_l+0xb5a>
 800fe66:	a328      	add	r3, pc, #160	@ (adr r3, 800ff08 <_strtod_l+0xbb8>)
 800fe68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	4639      	mov	r1, r7
 800fe70:	f7f0 fe26 	bl	8000ac0 <__aeabi_dcmple>
 800fe74:	b1a0      	cbz	r0, 800fea0 <_strtod_l+0xb50>
 800fe76:	4639      	mov	r1, r7
 800fe78:	4630      	mov	r0, r6
 800fe7a:	f7f0 fe7d 	bl	8000b78 <__aeabi_d2uiz>
 800fe7e:	2801      	cmp	r0, #1
 800fe80:	bf38      	it	cc
 800fe82:	2001      	movcc	r0, #1
 800fe84:	f7f0 fb26 	bl	80004d4 <__aeabi_ui2d>
 800fe88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe8a:	4606      	mov	r6, r0
 800fe8c:	460f      	mov	r7, r1
 800fe8e:	b9fb      	cbnz	r3, 800fed0 <_strtod_l+0xb80>
 800fe90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe94:	9014      	str	r0, [sp, #80]	@ 0x50
 800fe96:	9315      	str	r3, [sp, #84]	@ 0x54
 800fe98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fe9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fea0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fea2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fea6:	1b5b      	subs	r3, r3, r5
 800fea8:	9311      	str	r3, [sp, #68]	@ 0x44
 800feaa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800feae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800feb2:	f002 ff0b 	bl	8012ccc <__ulp>
 800feb6:	4650      	mov	r0, sl
 800feb8:	ec53 2b10 	vmov	r2, r3, d0
 800febc:	4659      	mov	r1, fp
 800febe:	f7f0 fb83 	bl	80005c8 <__aeabi_dmul>
 800fec2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fec6:	f7f0 f9c9 	bl	800025c <__adddf3>
 800feca:	4682      	mov	sl, r0
 800fecc:	468b      	mov	fp, r1
 800fece:	e770      	b.n	800fdb2 <_strtod_l+0xa62>
 800fed0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fed4:	e7e0      	b.n	800fe98 <_strtod_l+0xb48>
 800fed6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ff10 <_strtod_l+0xbc0>)
 800fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fedc:	f7f0 fde6 	bl	8000aac <__aeabi_dcmplt>
 800fee0:	e798      	b.n	800fe14 <_strtod_l+0xac4>
 800fee2:	2300      	movs	r3, #0
 800fee4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fee6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fee8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800feea:	6013      	str	r3, [r2, #0]
 800feec:	f7ff ba6d 	b.w	800f3ca <_strtod_l+0x7a>
 800fef0:	2a65      	cmp	r2, #101	@ 0x65
 800fef2:	f43f ab66 	beq.w	800f5c2 <_strtod_l+0x272>
 800fef6:	2a45      	cmp	r2, #69	@ 0x45
 800fef8:	f43f ab63 	beq.w	800f5c2 <_strtod_l+0x272>
 800fefc:	2301      	movs	r3, #1
 800fefe:	f7ff bb9e 	b.w	800f63e <_strtod_l+0x2ee>
 800ff02:	bf00      	nop
 800ff04:	f3af 8000 	nop.w
 800ff08:	ffc00000 	.word	0xffc00000
 800ff0c:	41dfffff 	.word	0x41dfffff
 800ff10:	94a03595 	.word	0x94a03595
 800ff14:	3fcfffff 	.word	0x3fcfffff

0800ff18 <_strtod_r>:
 800ff18:	4b01      	ldr	r3, [pc, #4]	@ (800ff20 <_strtod_r+0x8>)
 800ff1a:	f7ff ba19 	b.w	800f350 <_strtod_l>
 800ff1e:	bf00      	nop
 800ff20:	20000044 	.word	0x20000044

0800ff24 <strtod>:
 800ff24:	460a      	mov	r2, r1
 800ff26:	4601      	mov	r1, r0
 800ff28:	4802      	ldr	r0, [pc, #8]	@ (800ff34 <strtod+0x10>)
 800ff2a:	4b03      	ldr	r3, [pc, #12]	@ (800ff38 <strtod+0x14>)
 800ff2c:	6800      	ldr	r0, [r0, #0]
 800ff2e:	f7ff ba0f 	b.w	800f350 <_strtod_l>
 800ff32:	bf00      	nop
 800ff34:	200001b0 	.word	0x200001b0
 800ff38:	20000044 	.word	0x20000044

0800ff3c <__cvt>:
 800ff3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff40:	ec57 6b10 	vmov	r6, r7, d0
 800ff44:	2f00      	cmp	r7, #0
 800ff46:	460c      	mov	r4, r1
 800ff48:	4619      	mov	r1, r3
 800ff4a:	463b      	mov	r3, r7
 800ff4c:	bfbb      	ittet	lt
 800ff4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ff52:	461f      	movlt	r7, r3
 800ff54:	2300      	movge	r3, #0
 800ff56:	232d      	movlt	r3, #45	@ 0x2d
 800ff58:	700b      	strb	r3, [r1, #0]
 800ff5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ff60:	4691      	mov	r9, r2
 800ff62:	f023 0820 	bic.w	r8, r3, #32
 800ff66:	bfbc      	itt	lt
 800ff68:	4632      	movlt	r2, r6
 800ff6a:	4616      	movlt	r6, r2
 800ff6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ff70:	d005      	beq.n	800ff7e <__cvt+0x42>
 800ff72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ff76:	d100      	bne.n	800ff7a <__cvt+0x3e>
 800ff78:	3401      	adds	r4, #1
 800ff7a:	2102      	movs	r1, #2
 800ff7c:	e000      	b.n	800ff80 <__cvt+0x44>
 800ff7e:	2103      	movs	r1, #3
 800ff80:	ab03      	add	r3, sp, #12
 800ff82:	9301      	str	r3, [sp, #4]
 800ff84:	ab02      	add	r3, sp, #8
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	ec47 6b10 	vmov	d0, r6, r7
 800ff8c:	4653      	mov	r3, sl
 800ff8e:	4622      	mov	r2, r4
 800ff90:	f001 f9ce 	bl	8011330 <_dtoa_r>
 800ff94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ff98:	4605      	mov	r5, r0
 800ff9a:	d119      	bne.n	800ffd0 <__cvt+0x94>
 800ff9c:	f019 0f01 	tst.w	r9, #1
 800ffa0:	d00e      	beq.n	800ffc0 <__cvt+0x84>
 800ffa2:	eb00 0904 	add.w	r9, r0, r4
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	4630      	mov	r0, r6
 800ffac:	4639      	mov	r1, r7
 800ffae:	f7f0 fd73 	bl	8000a98 <__aeabi_dcmpeq>
 800ffb2:	b108      	cbz	r0, 800ffb8 <__cvt+0x7c>
 800ffb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800ffb8:	2230      	movs	r2, #48	@ 0x30
 800ffba:	9b03      	ldr	r3, [sp, #12]
 800ffbc:	454b      	cmp	r3, r9
 800ffbe:	d31e      	bcc.n	800fffe <__cvt+0xc2>
 800ffc0:	9b03      	ldr	r3, [sp, #12]
 800ffc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffc4:	1b5b      	subs	r3, r3, r5
 800ffc6:	4628      	mov	r0, r5
 800ffc8:	6013      	str	r3, [r2, #0]
 800ffca:	b004      	add	sp, #16
 800ffcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ffd4:	eb00 0904 	add.w	r9, r0, r4
 800ffd8:	d1e5      	bne.n	800ffa6 <__cvt+0x6a>
 800ffda:	7803      	ldrb	r3, [r0, #0]
 800ffdc:	2b30      	cmp	r3, #48	@ 0x30
 800ffde:	d10a      	bne.n	800fff6 <__cvt+0xba>
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	4639      	mov	r1, r7
 800ffe8:	f7f0 fd56 	bl	8000a98 <__aeabi_dcmpeq>
 800ffec:	b918      	cbnz	r0, 800fff6 <__cvt+0xba>
 800ffee:	f1c4 0401 	rsb	r4, r4, #1
 800fff2:	f8ca 4000 	str.w	r4, [sl]
 800fff6:	f8da 3000 	ldr.w	r3, [sl]
 800fffa:	4499      	add	r9, r3
 800fffc:	e7d3      	b.n	800ffa6 <__cvt+0x6a>
 800fffe:	1c59      	adds	r1, r3, #1
 8010000:	9103      	str	r1, [sp, #12]
 8010002:	701a      	strb	r2, [r3, #0]
 8010004:	e7d9      	b.n	800ffba <__cvt+0x7e>

08010006 <__exponent>:
 8010006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010008:	2900      	cmp	r1, #0
 801000a:	bfba      	itte	lt
 801000c:	4249      	neglt	r1, r1
 801000e:	232d      	movlt	r3, #45	@ 0x2d
 8010010:	232b      	movge	r3, #43	@ 0x2b
 8010012:	2909      	cmp	r1, #9
 8010014:	7002      	strb	r2, [r0, #0]
 8010016:	7043      	strb	r3, [r0, #1]
 8010018:	dd29      	ble.n	801006e <__exponent+0x68>
 801001a:	f10d 0307 	add.w	r3, sp, #7
 801001e:	461d      	mov	r5, r3
 8010020:	270a      	movs	r7, #10
 8010022:	461a      	mov	r2, r3
 8010024:	fbb1 f6f7 	udiv	r6, r1, r7
 8010028:	fb07 1416 	mls	r4, r7, r6, r1
 801002c:	3430      	adds	r4, #48	@ 0x30
 801002e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010032:	460c      	mov	r4, r1
 8010034:	2c63      	cmp	r4, #99	@ 0x63
 8010036:	f103 33ff 	add.w	r3, r3, #4294967295
 801003a:	4631      	mov	r1, r6
 801003c:	dcf1      	bgt.n	8010022 <__exponent+0x1c>
 801003e:	3130      	adds	r1, #48	@ 0x30
 8010040:	1e94      	subs	r4, r2, #2
 8010042:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010046:	1c41      	adds	r1, r0, #1
 8010048:	4623      	mov	r3, r4
 801004a:	42ab      	cmp	r3, r5
 801004c:	d30a      	bcc.n	8010064 <__exponent+0x5e>
 801004e:	f10d 0309 	add.w	r3, sp, #9
 8010052:	1a9b      	subs	r3, r3, r2
 8010054:	42ac      	cmp	r4, r5
 8010056:	bf88      	it	hi
 8010058:	2300      	movhi	r3, #0
 801005a:	3302      	adds	r3, #2
 801005c:	4403      	add	r3, r0
 801005e:	1a18      	subs	r0, r3, r0
 8010060:	b003      	add	sp, #12
 8010062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010064:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010068:	f801 6f01 	strb.w	r6, [r1, #1]!
 801006c:	e7ed      	b.n	801004a <__exponent+0x44>
 801006e:	2330      	movs	r3, #48	@ 0x30
 8010070:	3130      	adds	r1, #48	@ 0x30
 8010072:	7083      	strb	r3, [r0, #2]
 8010074:	70c1      	strb	r1, [r0, #3]
 8010076:	1d03      	adds	r3, r0, #4
 8010078:	e7f1      	b.n	801005e <__exponent+0x58>
	...

0801007c <_printf_float>:
 801007c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010080:	b08d      	sub	sp, #52	@ 0x34
 8010082:	460c      	mov	r4, r1
 8010084:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010088:	4616      	mov	r6, r2
 801008a:	461f      	mov	r7, r3
 801008c:	4605      	mov	r5, r0
 801008e:	f001 f805 	bl	801109c <_localeconv_r>
 8010092:	6803      	ldr	r3, [r0, #0]
 8010094:	9304      	str	r3, [sp, #16]
 8010096:	4618      	mov	r0, r3
 8010098:	f7f0 f8d2 	bl	8000240 <strlen>
 801009c:	2300      	movs	r3, #0
 801009e:	930a      	str	r3, [sp, #40]	@ 0x28
 80100a0:	f8d8 3000 	ldr.w	r3, [r8]
 80100a4:	9005      	str	r0, [sp, #20]
 80100a6:	3307      	adds	r3, #7
 80100a8:	f023 0307 	bic.w	r3, r3, #7
 80100ac:	f103 0208 	add.w	r2, r3, #8
 80100b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80100b4:	f8d4 b000 	ldr.w	fp, [r4]
 80100b8:	f8c8 2000 	str.w	r2, [r8]
 80100bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80100c4:	9307      	str	r3, [sp, #28]
 80100c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80100ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80100ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100d2:	4b9c      	ldr	r3, [pc, #624]	@ (8010344 <_printf_float+0x2c8>)
 80100d4:	f04f 32ff 	mov.w	r2, #4294967295
 80100d8:	f7f0 fd10 	bl	8000afc <__aeabi_dcmpun>
 80100dc:	bb70      	cbnz	r0, 801013c <_printf_float+0xc0>
 80100de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100e2:	4b98      	ldr	r3, [pc, #608]	@ (8010344 <_printf_float+0x2c8>)
 80100e4:	f04f 32ff 	mov.w	r2, #4294967295
 80100e8:	f7f0 fcea 	bl	8000ac0 <__aeabi_dcmple>
 80100ec:	bb30      	cbnz	r0, 801013c <_printf_float+0xc0>
 80100ee:	2200      	movs	r2, #0
 80100f0:	2300      	movs	r3, #0
 80100f2:	4640      	mov	r0, r8
 80100f4:	4649      	mov	r1, r9
 80100f6:	f7f0 fcd9 	bl	8000aac <__aeabi_dcmplt>
 80100fa:	b110      	cbz	r0, 8010102 <_printf_float+0x86>
 80100fc:	232d      	movs	r3, #45	@ 0x2d
 80100fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010102:	4a91      	ldr	r2, [pc, #580]	@ (8010348 <_printf_float+0x2cc>)
 8010104:	4b91      	ldr	r3, [pc, #580]	@ (801034c <_printf_float+0x2d0>)
 8010106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801010a:	bf94      	ite	ls
 801010c:	4690      	movls	r8, r2
 801010e:	4698      	movhi	r8, r3
 8010110:	2303      	movs	r3, #3
 8010112:	6123      	str	r3, [r4, #16]
 8010114:	f02b 0304 	bic.w	r3, fp, #4
 8010118:	6023      	str	r3, [r4, #0]
 801011a:	f04f 0900 	mov.w	r9, #0
 801011e:	9700      	str	r7, [sp, #0]
 8010120:	4633      	mov	r3, r6
 8010122:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010124:	4621      	mov	r1, r4
 8010126:	4628      	mov	r0, r5
 8010128:	f000 f9d2 	bl	80104d0 <_printf_common>
 801012c:	3001      	adds	r0, #1
 801012e:	f040 808d 	bne.w	801024c <_printf_float+0x1d0>
 8010132:	f04f 30ff 	mov.w	r0, #4294967295
 8010136:	b00d      	add	sp, #52	@ 0x34
 8010138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801013c:	4642      	mov	r2, r8
 801013e:	464b      	mov	r3, r9
 8010140:	4640      	mov	r0, r8
 8010142:	4649      	mov	r1, r9
 8010144:	f7f0 fcda 	bl	8000afc <__aeabi_dcmpun>
 8010148:	b140      	cbz	r0, 801015c <_printf_float+0xe0>
 801014a:	464b      	mov	r3, r9
 801014c:	2b00      	cmp	r3, #0
 801014e:	bfbc      	itt	lt
 8010150:	232d      	movlt	r3, #45	@ 0x2d
 8010152:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010156:	4a7e      	ldr	r2, [pc, #504]	@ (8010350 <_printf_float+0x2d4>)
 8010158:	4b7e      	ldr	r3, [pc, #504]	@ (8010354 <_printf_float+0x2d8>)
 801015a:	e7d4      	b.n	8010106 <_printf_float+0x8a>
 801015c:	6863      	ldr	r3, [r4, #4]
 801015e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010162:	9206      	str	r2, [sp, #24]
 8010164:	1c5a      	adds	r2, r3, #1
 8010166:	d13b      	bne.n	80101e0 <_printf_float+0x164>
 8010168:	2306      	movs	r3, #6
 801016a:	6063      	str	r3, [r4, #4]
 801016c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010170:	2300      	movs	r3, #0
 8010172:	6022      	str	r2, [r4, #0]
 8010174:	9303      	str	r3, [sp, #12]
 8010176:	ab0a      	add	r3, sp, #40	@ 0x28
 8010178:	e9cd a301 	strd	sl, r3, [sp, #4]
 801017c:	ab09      	add	r3, sp, #36	@ 0x24
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	6861      	ldr	r1, [r4, #4]
 8010182:	ec49 8b10 	vmov	d0, r8, r9
 8010186:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801018a:	4628      	mov	r0, r5
 801018c:	f7ff fed6 	bl	800ff3c <__cvt>
 8010190:	9b06      	ldr	r3, [sp, #24]
 8010192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010194:	2b47      	cmp	r3, #71	@ 0x47
 8010196:	4680      	mov	r8, r0
 8010198:	d129      	bne.n	80101ee <_printf_float+0x172>
 801019a:	1cc8      	adds	r0, r1, #3
 801019c:	db02      	blt.n	80101a4 <_printf_float+0x128>
 801019e:	6863      	ldr	r3, [r4, #4]
 80101a0:	4299      	cmp	r1, r3
 80101a2:	dd41      	ble.n	8010228 <_printf_float+0x1ac>
 80101a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80101a8:	fa5f fa8a 	uxtb.w	sl, sl
 80101ac:	3901      	subs	r1, #1
 80101ae:	4652      	mov	r2, sl
 80101b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80101b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80101b6:	f7ff ff26 	bl	8010006 <__exponent>
 80101ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80101bc:	1813      	adds	r3, r2, r0
 80101be:	2a01      	cmp	r2, #1
 80101c0:	4681      	mov	r9, r0
 80101c2:	6123      	str	r3, [r4, #16]
 80101c4:	dc02      	bgt.n	80101cc <_printf_float+0x150>
 80101c6:	6822      	ldr	r2, [r4, #0]
 80101c8:	07d2      	lsls	r2, r2, #31
 80101ca:	d501      	bpl.n	80101d0 <_printf_float+0x154>
 80101cc:	3301      	adds	r3, #1
 80101ce:	6123      	str	r3, [r4, #16]
 80101d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d0a2      	beq.n	801011e <_printf_float+0xa2>
 80101d8:	232d      	movs	r3, #45	@ 0x2d
 80101da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101de:	e79e      	b.n	801011e <_printf_float+0xa2>
 80101e0:	9a06      	ldr	r2, [sp, #24]
 80101e2:	2a47      	cmp	r2, #71	@ 0x47
 80101e4:	d1c2      	bne.n	801016c <_printf_float+0xf0>
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d1c0      	bne.n	801016c <_printf_float+0xf0>
 80101ea:	2301      	movs	r3, #1
 80101ec:	e7bd      	b.n	801016a <_printf_float+0xee>
 80101ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80101f2:	d9db      	bls.n	80101ac <_printf_float+0x130>
 80101f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80101f8:	d118      	bne.n	801022c <_printf_float+0x1b0>
 80101fa:	2900      	cmp	r1, #0
 80101fc:	6863      	ldr	r3, [r4, #4]
 80101fe:	dd0b      	ble.n	8010218 <_printf_float+0x19c>
 8010200:	6121      	str	r1, [r4, #16]
 8010202:	b913      	cbnz	r3, 801020a <_printf_float+0x18e>
 8010204:	6822      	ldr	r2, [r4, #0]
 8010206:	07d0      	lsls	r0, r2, #31
 8010208:	d502      	bpl.n	8010210 <_printf_float+0x194>
 801020a:	3301      	adds	r3, #1
 801020c:	440b      	add	r3, r1
 801020e:	6123      	str	r3, [r4, #16]
 8010210:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010212:	f04f 0900 	mov.w	r9, #0
 8010216:	e7db      	b.n	80101d0 <_printf_float+0x154>
 8010218:	b913      	cbnz	r3, 8010220 <_printf_float+0x1a4>
 801021a:	6822      	ldr	r2, [r4, #0]
 801021c:	07d2      	lsls	r2, r2, #31
 801021e:	d501      	bpl.n	8010224 <_printf_float+0x1a8>
 8010220:	3302      	adds	r3, #2
 8010222:	e7f4      	b.n	801020e <_printf_float+0x192>
 8010224:	2301      	movs	r3, #1
 8010226:	e7f2      	b.n	801020e <_printf_float+0x192>
 8010228:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801022c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801022e:	4299      	cmp	r1, r3
 8010230:	db05      	blt.n	801023e <_printf_float+0x1c2>
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	6121      	str	r1, [r4, #16]
 8010236:	07d8      	lsls	r0, r3, #31
 8010238:	d5ea      	bpl.n	8010210 <_printf_float+0x194>
 801023a:	1c4b      	adds	r3, r1, #1
 801023c:	e7e7      	b.n	801020e <_printf_float+0x192>
 801023e:	2900      	cmp	r1, #0
 8010240:	bfd4      	ite	le
 8010242:	f1c1 0202 	rsble	r2, r1, #2
 8010246:	2201      	movgt	r2, #1
 8010248:	4413      	add	r3, r2
 801024a:	e7e0      	b.n	801020e <_printf_float+0x192>
 801024c:	6823      	ldr	r3, [r4, #0]
 801024e:	055a      	lsls	r2, r3, #21
 8010250:	d407      	bmi.n	8010262 <_printf_float+0x1e6>
 8010252:	6923      	ldr	r3, [r4, #16]
 8010254:	4642      	mov	r2, r8
 8010256:	4631      	mov	r1, r6
 8010258:	4628      	mov	r0, r5
 801025a:	47b8      	blx	r7
 801025c:	3001      	adds	r0, #1
 801025e:	d12b      	bne.n	80102b8 <_printf_float+0x23c>
 8010260:	e767      	b.n	8010132 <_printf_float+0xb6>
 8010262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010266:	f240 80dd 	bls.w	8010424 <_printf_float+0x3a8>
 801026a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801026e:	2200      	movs	r2, #0
 8010270:	2300      	movs	r3, #0
 8010272:	f7f0 fc11 	bl	8000a98 <__aeabi_dcmpeq>
 8010276:	2800      	cmp	r0, #0
 8010278:	d033      	beq.n	80102e2 <_printf_float+0x266>
 801027a:	4a37      	ldr	r2, [pc, #220]	@ (8010358 <_printf_float+0x2dc>)
 801027c:	2301      	movs	r3, #1
 801027e:	4631      	mov	r1, r6
 8010280:	4628      	mov	r0, r5
 8010282:	47b8      	blx	r7
 8010284:	3001      	adds	r0, #1
 8010286:	f43f af54 	beq.w	8010132 <_printf_float+0xb6>
 801028a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801028e:	4543      	cmp	r3, r8
 8010290:	db02      	blt.n	8010298 <_printf_float+0x21c>
 8010292:	6823      	ldr	r3, [r4, #0]
 8010294:	07d8      	lsls	r0, r3, #31
 8010296:	d50f      	bpl.n	80102b8 <_printf_float+0x23c>
 8010298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801029c:	4631      	mov	r1, r6
 801029e:	4628      	mov	r0, r5
 80102a0:	47b8      	blx	r7
 80102a2:	3001      	adds	r0, #1
 80102a4:	f43f af45 	beq.w	8010132 <_printf_float+0xb6>
 80102a8:	f04f 0900 	mov.w	r9, #0
 80102ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80102b0:	f104 0a1a 	add.w	sl, r4, #26
 80102b4:	45c8      	cmp	r8, r9
 80102b6:	dc09      	bgt.n	80102cc <_printf_float+0x250>
 80102b8:	6823      	ldr	r3, [r4, #0]
 80102ba:	079b      	lsls	r3, r3, #30
 80102bc:	f100 8103 	bmi.w	80104c6 <_printf_float+0x44a>
 80102c0:	68e0      	ldr	r0, [r4, #12]
 80102c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102c4:	4298      	cmp	r0, r3
 80102c6:	bfb8      	it	lt
 80102c8:	4618      	movlt	r0, r3
 80102ca:	e734      	b.n	8010136 <_printf_float+0xba>
 80102cc:	2301      	movs	r3, #1
 80102ce:	4652      	mov	r2, sl
 80102d0:	4631      	mov	r1, r6
 80102d2:	4628      	mov	r0, r5
 80102d4:	47b8      	blx	r7
 80102d6:	3001      	adds	r0, #1
 80102d8:	f43f af2b 	beq.w	8010132 <_printf_float+0xb6>
 80102dc:	f109 0901 	add.w	r9, r9, #1
 80102e0:	e7e8      	b.n	80102b4 <_printf_float+0x238>
 80102e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	dc39      	bgt.n	801035c <_printf_float+0x2e0>
 80102e8:	4a1b      	ldr	r2, [pc, #108]	@ (8010358 <_printf_float+0x2dc>)
 80102ea:	2301      	movs	r3, #1
 80102ec:	4631      	mov	r1, r6
 80102ee:	4628      	mov	r0, r5
 80102f0:	47b8      	blx	r7
 80102f2:	3001      	adds	r0, #1
 80102f4:	f43f af1d 	beq.w	8010132 <_printf_float+0xb6>
 80102f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80102fc:	ea59 0303 	orrs.w	r3, r9, r3
 8010300:	d102      	bne.n	8010308 <_printf_float+0x28c>
 8010302:	6823      	ldr	r3, [r4, #0]
 8010304:	07d9      	lsls	r1, r3, #31
 8010306:	d5d7      	bpl.n	80102b8 <_printf_float+0x23c>
 8010308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801030c:	4631      	mov	r1, r6
 801030e:	4628      	mov	r0, r5
 8010310:	47b8      	blx	r7
 8010312:	3001      	adds	r0, #1
 8010314:	f43f af0d 	beq.w	8010132 <_printf_float+0xb6>
 8010318:	f04f 0a00 	mov.w	sl, #0
 801031c:	f104 0b1a 	add.w	fp, r4, #26
 8010320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010322:	425b      	negs	r3, r3
 8010324:	4553      	cmp	r3, sl
 8010326:	dc01      	bgt.n	801032c <_printf_float+0x2b0>
 8010328:	464b      	mov	r3, r9
 801032a:	e793      	b.n	8010254 <_printf_float+0x1d8>
 801032c:	2301      	movs	r3, #1
 801032e:	465a      	mov	r2, fp
 8010330:	4631      	mov	r1, r6
 8010332:	4628      	mov	r0, r5
 8010334:	47b8      	blx	r7
 8010336:	3001      	adds	r0, #1
 8010338:	f43f aefb 	beq.w	8010132 <_printf_float+0xb6>
 801033c:	f10a 0a01 	add.w	sl, sl, #1
 8010340:	e7ee      	b.n	8010320 <_printf_float+0x2a4>
 8010342:	bf00      	nop
 8010344:	7fefffff 	.word	0x7fefffff
 8010348:	08013ec9 	.word	0x08013ec9
 801034c:	08013ecd 	.word	0x08013ecd
 8010350:	08013ed1 	.word	0x08013ed1
 8010354:	08013ed5 	.word	0x08013ed5
 8010358:	08013ed9 	.word	0x08013ed9
 801035c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801035e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010362:	4553      	cmp	r3, sl
 8010364:	bfa8      	it	ge
 8010366:	4653      	movge	r3, sl
 8010368:	2b00      	cmp	r3, #0
 801036a:	4699      	mov	r9, r3
 801036c:	dc36      	bgt.n	80103dc <_printf_float+0x360>
 801036e:	f04f 0b00 	mov.w	fp, #0
 8010372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010376:	f104 021a 	add.w	r2, r4, #26
 801037a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801037c:	9306      	str	r3, [sp, #24]
 801037e:	eba3 0309 	sub.w	r3, r3, r9
 8010382:	455b      	cmp	r3, fp
 8010384:	dc31      	bgt.n	80103ea <_printf_float+0x36e>
 8010386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010388:	459a      	cmp	sl, r3
 801038a:	dc3a      	bgt.n	8010402 <_printf_float+0x386>
 801038c:	6823      	ldr	r3, [r4, #0]
 801038e:	07da      	lsls	r2, r3, #31
 8010390:	d437      	bmi.n	8010402 <_printf_float+0x386>
 8010392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010394:	ebaa 0903 	sub.w	r9, sl, r3
 8010398:	9b06      	ldr	r3, [sp, #24]
 801039a:	ebaa 0303 	sub.w	r3, sl, r3
 801039e:	4599      	cmp	r9, r3
 80103a0:	bfa8      	it	ge
 80103a2:	4699      	movge	r9, r3
 80103a4:	f1b9 0f00 	cmp.w	r9, #0
 80103a8:	dc33      	bgt.n	8010412 <_printf_float+0x396>
 80103aa:	f04f 0800 	mov.w	r8, #0
 80103ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103b2:	f104 0b1a 	add.w	fp, r4, #26
 80103b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103b8:	ebaa 0303 	sub.w	r3, sl, r3
 80103bc:	eba3 0309 	sub.w	r3, r3, r9
 80103c0:	4543      	cmp	r3, r8
 80103c2:	f77f af79 	ble.w	80102b8 <_printf_float+0x23c>
 80103c6:	2301      	movs	r3, #1
 80103c8:	465a      	mov	r2, fp
 80103ca:	4631      	mov	r1, r6
 80103cc:	4628      	mov	r0, r5
 80103ce:	47b8      	blx	r7
 80103d0:	3001      	adds	r0, #1
 80103d2:	f43f aeae 	beq.w	8010132 <_printf_float+0xb6>
 80103d6:	f108 0801 	add.w	r8, r8, #1
 80103da:	e7ec      	b.n	80103b6 <_printf_float+0x33a>
 80103dc:	4642      	mov	r2, r8
 80103de:	4631      	mov	r1, r6
 80103e0:	4628      	mov	r0, r5
 80103e2:	47b8      	blx	r7
 80103e4:	3001      	adds	r0, #1
 80103e6:	d1c2      	bne.n	801036e <_printf_float+0x2f2>
 80103e8:	e6a3      	b.n	8010132 <_printf_float+0xb6>
 80103ea:	2301      	movs	r3, #1
 80103ec:	4631      	mov	r1, r6
 80103ee:	4628      	mov	r0, r5
 80103f0:	9206      	str	r2, [sp, #24]
 80103f2:	47b8      	blx	r7
 80103f4:	3001      	adds	r0, #1
 80103f6:	f43f ae9c 	beq.w	8010132 <_printf_float+0xb6>
 80103fa:	9a06      	ldr	r2, [sp, #24]
 80103fc:	f10b 0b01 	add.w	fp, fp, #1
 8010400:	e7bb      	b.n	801037a <_printf_float+0x2fe>
 8010402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010406:	4631      	mov	r1, r6
 8010408:	4628      	mov	r0, r5
 801040a:	47b8      	blx	r7
 801040c:	3001      	adds	r0, #1
 801040e:	d1c0      	bne.n	8010392 <_printf_float+0x316>
 8010410:	e68f      	b.n	8010132 <_printf_float+0xb6>
 8010412:	9a06      	ldr	r2, [sp, #24]
 8010414:	464b      	mov	r3, r9
 8010416:	4442      	add	r2, r8
 8010418:	4631      	mov	r1, r6
 801041a:	4628      	mov	r0, r5
 801041c:	47b8      	blx	r7
 801041e:	3001      	adds	r0, #1
 8010420:	d1c3      	bne.n	80103aa <_printf_float+0x32e>
 8010422:	e686      	b.n	8010132 <_printf_float+0xb6>
 8010424:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010428:	f1ba 0f01 	cmp.w	sl, #1
 801042c:	dc01      	bgt.n	8010432 <_printf_float+0x3b6>
 801042e:	07db      	lsls	r3, r3, #31
 8010430:	d536      	bpl.n	80104a0 <_printf_float+0x424>
 8010432:	2301      	movs	r3, #1
 8010434:	4642      	mov	r2, r8
 8010436:	4631      	mov	r1, r6
 8010438:	4628      	mov	r0, r5
 801043a:	47b8      	blx	r7
 801043c:	3001      	adds	r0, #1
 801043e:	f43f ae78 	beq.w	8010132 <_printf_float+0xb6>
 8010442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010446:	4631      	mov	r1, r6
 8010448:	4628      	mov	r0, r5
 801044a:	47b8      	blx	r7
 801044c:	3001      	adds	r0, #1
 801044e:	f43f ae70 	beq.w	8010132 <_printf_float+0xb6>
 8010452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010456:	2200      	movs	r2, #0
 8010458:	2300      	movs	r3, #0
 801045a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801045e:	f7f0 fb1b 	bl	8000a98 <__aeabi_dcmpeq>
 8010462:	b9c0      	cbnz	r0, 8010496 <_printf_float+0x41a>
 8010464:	4653      	mov	r3, sl
 8010466:	f108 0201 	add.w	r2, r8, #1
 801046a:	4631      	mov	r1, r6
 801046c:	4628      	mov	r0, r5
 801046e:	47b8      	blx	r7
 8010470:	3001      	adds	r0, #1
 8010472:	d10c      	bne.n	801048e <_printf_float+0x412>
 8010474:	e65d      	b.n	8010132 <_printf_float+0xb6>
 8010476:	2301      	movs	r3, #1
 8010478:	465a      	mov	r2, fp
 801047a:	4631      	mov	r1, r6
 801047c:	4628      	mov	r0, r5
 801047e:	47b8      	blx	r7
 8010480:	3001      	adds	r0, #1
 8010482:	f43f ae56 	beq.w	8010132 <_printf_float+0xb6>
 8010486:	f108 0801 	add.w	r8, r8, #1
 801048a:	45d0      	cmp	r8, sl
 801048c:	dbf3      	blt.n	8010476 <_printf_float+0x3fa>
 801048e:	464b      	mov	r3, r9
 8010490:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010494:	e6df      	b.n	8010256 <_printf_float+0x1da>
 8010496:	f04f 0800 	mov.w	r8, #0
 801049a:	f104 0b1a 	add.w	fp, r4, #26
 801049e:	e7f4      	b.n	801048a <_printf_float+0x40e>
 80104a0:	2301      	movs	r3, #1
 80104a2:	4642      	mov	r2, r8
 80104a4:	e7e1      	b.n	801046a <_printf_float+0x3ee>
 80104a6:	2301      	movs	r3, #1
 80104a8:	464a      	mov	r2, r9
 80104aa:	4631      	mov	r1, r6
 80104ac:	4628      	mov	r0, r5
 80104ae:	47b8      	blx	r7
 80104b0:	3001      	adds	r0, #1
 80104b2:	f43f ae3e 	beq.w	8010132 <_printf_float+0xb6>
 80104b6:	f108 0801 	add.w	r8, r8, #1
 80104ba:	68e3      	ldr	r3, [r4, #12]
 80104bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80104be:	1a5b      	subs	r3, r3, r1
 80104c0:	4543      	cmp	r3, r8
 80104c2:	dcf0      	bgt.n	80104a6 <_printf_float+0x42a>
 80104c4:	e6fc      	b.n	80102c0 <_printf_float+0x244>
 80104c6:	f04f 0800 	mov.w	r8, #0
 80104ca:	f104 0919 	add.w	r9, r4, #25
 80104ce:	e7f4      	b.n	80104ba <_printf_float+0x43e>

080104d0 <_printf_common>:
 80104d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104d4:	4616      	mov	r6, r2
 80104d6:	4698      	mov	r8, r3
 80104d8:	688a      	ldr	r2, [r1, #8]
 80104da:	690b      	ldr	r3, [r1, #16]
 80104dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80104e0:	4293      	cmp	r3, r2
 80104e2:	bfb8      	it	lt
 80104e4:	4613      	movlt	r3, r2
 80104e6:	6033      	str	r3, [r6, #0]
 80104e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80104ec:	4607      	mov	r7, r0
 80104ee:	460c      	mov	r4, r1
 80104f0:	b10a      	cbz	r2, 80104f6 <_printf_common+0x26>
 80104f2:	3301      	adds	r3, #1
 80104f4:	6033      	str	r3, [r6, #0]
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	0699      	lsls	r1, r3, #26
 80104fa:	bf42      	ittt	mi
 80104fc:	6833      	ldrmi	r3, [r6, #0]
 80104fe:	3302      	addmi	r3, #2
 8010500:	6033      	strmi	r3, [r6, #0]
 8010502:	6825      	ldr	r5, [r4, #0]
 8010504:	f015 0506 	ands.w	r5, r5, #6
 8010508:	d106      	bne.n	8010518 <_printf_common+0x48>
 801050a:	f104 0a19 	add.w	sl, r4, #25
 801050e:	68e3      	ldr	r3, [r4, #12]
 8010510:	6832      	ldr	r2, [r6, #0]
 8010512:	1a9b      	subs	r3, r3, r2
 8010514:	42ab      	cmp	r3, r5
 8010516:	dc26      	bgt.n	8010566 <_printf_common+0x96>
 8010518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801051c:	6822      	ldr	r2, [r4, #0]
 801051e:	3b00      	subs	r3, #0
 8010520:	bf18      	it	ne
 8010522:	2301      	movne	r3, #1
 8010524:	0692      	lsls	r2, r2, #26
 8010526:	d42b      	bmi.n	8010580 <_printf_common+0xb0>
 8010528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801052c:	4641      	mov	r1, r8
 801052e:	4638      	mov	r0, r7
 8010530:	47c8      	blx	r9
 8010532:	3001      	adds	r0, #1
 8010534:	d01e      	beq.n	8010574 <_printf_common+0xa4>
 8010536:	6823      	ldr	r3, [r4, #0]
 8010538:	6922      	ldr	r2, [r4, #16]
 801053a:	f003 0306 	and.w	r3, r3, #6
 801053e:	2b04      	cmp	r3, #4
 8010540:	bf02      	ittt	eq
 8010542:	68e5      	ldreq	r5, [r4, #12]
 8010544:	6833      	ldreq	r3, [r6, #0]
 8010546:	1aed      	subeq	r5, r5, r3
 8010548:	68a3      	ldr	r3, [r4, #8]
 801054a:	bf0c      	ite	eq
 801054c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010550:	2500      	movne	r5, #0
 8010552:	4293      	cmp	r3, r2
 8010554:	bfc4      	itt	gt
 8010556:	1a9b      	subgt	r3, r3, r2
 8010558:	18ed      	addgt	r5, r5, r3
 801055a:	2600      	movs	r6, #0
 801055c:	341a      	adds	r4, #26
 801055e:	42b5      	cmp	r5, r6
 8010560:	d11a      	bne.n	8010598 <_printf_common+0xc8>
 8010562:	2000      	movs	r0, #0
 8010564:	e008      	b.n	8010578 <_printf_common+0xa8>
 8010566:	2301      	movs	r3, #1
 8010568:	4652      	mov	r2, sl
 801056a:	4641      	mov	r1, r8
 801056c:	4638      	mov	r0, r7
 801056e:	47c8      	blx	r9
 8010570:	3001      	adds	r0, #1
 8010572:	d103      	bne.n	801057c <_printf_common+0xac>
 8010574:	f04f 30ff 	mov.w	r0, #4294967295
 8010578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801057c:	3501      	adds	r5, #1
 801057e:	e7c6      	b.n	801050e <_printf_common+0x3e>
 8010580:	18e1      	adds	r1, r4, r3
 8010582:	1c5a      	adds	r2, r3, #1
 8010584:	2030      	movs	r0, #48	@ 0x30
 8010586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801058a:	4422      	add	r2, r4
 801058c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010594:	3302      	adds	r3, #2
 8010596:	e7c7      	b.n	8010528 <_printf_common+0x58>
 8010598:	2301      	movs	r3, #1
 801059a:	4622      	mov	r2, r4
 801059c:	4641      	mov	r1, r8
 801059e:	4638      	mov	r0, r7
 80105a0:	47c8      	blx	r9
 80105a2:	3001      	adds	r0, #1
 80105a4:	d0e6      	beq.n	8010574 <_printf_common+0xa4>
 80105a6:	3601      	adds	r6, #1
 80105a8:	e7d9      	b.n	801055e <_printf_common+0x8e>
	...

080105ac <_printf_i>:
 80105ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105b0:	7e0f      	ldrb	r7, [r1, #24]
 80105b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80105b4:	2f78      	cmp	r7, #120	@ 0x78
 80105b6:	4691      	mov	r9, r2
 80105b8:	4680      	mov	r8, r0
 80105ba:	460c      	mov	r4, r1
 80105bc:	469a      	mov	sl, r3
 80105be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80105c2:	d807      	bhi.n	80105d4 <_printf_i+0x28>
 80105c4:	2f62      	cmp	r7, #98	@ 0x62
 80105c6:	d80a      	bhi.n	80105de <_printf_i+0x32>
 80105c8:	2f00      	cmp	r7, #0
 80105ca:	f000 80d2 	beq.w	8010772 <_printf_i+0x1c6>
 80105ce:	2f58      	cmp	r7, #88	@ 0x58
 80105d0:	f000 80b9 	beq.w	8010746 <_printf_i+0x19a>
 80105d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80105d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80105dc:	e03a      	b.n	8010654 <_printf_i+0xa8>
 80105de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80105e2:	2b15      	cmp	r3, #21
 80105e4:	d8f6      	bhi.n	80105d4 <_printf_i+0x28>
 80105e6:	a101      	add	r1, pc, #4	@ (adr r1, 80105ec <_printf_i+0x40>)
 80105e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105ec:	08010645 	.word	0x08010645
 80105f0:	08010659 	.word	0x08010659
 80105f4:	080105d5 	.word	0x080105d5
 80105f8:	080105d5 	.word	0x080105d5
 80105fc:	080105d5 	.word	0x080105d5
 8010600:	080105d5 	.word	0x080105d5
 8010604:	08010659 	.word	0x08010659
 8010608:	080105d5 	.word	0x080105d5
 801060c:	080105d5 	.word	0x080105d5
 8010610:	080105d5 	.word	0x080105d5
 8010614:	080105d5 	.word	0x080105d5
 8010618:	08010759 	.word	0x08010759
 801061c:	08010683 	.word	0x08010683
 8010620:	08010713 	.word	0x08010713
 8010624:	080105d5 	.word	0x080105d5
 8010628:	080105d5 	.word	0x080105d5
 801062c:	0801077b 	.word	0x0801077b
 8010630:	080105d5 	.word	0x080105d5
 8010634:	08010683 	.word	0x08010683
 8010638:	080105d5 	.word	0x080105d5
 801063c:	080105d5 	.word	0x080105d5
 8010640:	0801071b 	.word	0x0801071b
 8010644:	6833      	ldr	r3, [r6, #0]
 8010646:	1d1a      	adds	r2, r3, #4
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	6032      	str	r2, [r6, #0]
 801064c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010654:	2301      	movs	r3, #1
 8010656:	e09d      	b.n	8010794 <_printf_i+0x1e8>
 8010658:	6833      	ldr	r3, [r6, #0]
 801065a:	6820      	ldr	r0, [r4, #0]
 801065c:	1d19      	adds	r1, r3, #4
 801065e:	6031      	str	r1, [r6, #0]
 8010660:	0606      	lsls	r6, r0, #24
 8010662:	d501      	bpl.n	8010668 <_printf_i+0xbc>
 8010664:	681d      	ldr	r5, [r3, #0]
 8010666:	e003      	b.n	8010670 <_printf_i+0xc4>
 8010668:	0645      	lsls	r5, r0, #25
 801066a:	d5fb      	bpl.n	8010664 <_printf_i+0xb8>
 801066c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010670:	2d00      	cmp	r5, #0
 8010672:	da03      	bge.n	801067c <_printf_i+0xd0>
 8010674:	232d      	movs	r3, #45	@ 0x2d
 8010676:	426d      	negs	r5, r5
 8010678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801067c:	4859      	ldr	r0, [pc, #356]	@ (80107e4 <_printf_i+0x238>)
 801067e:	230a      	movs	r3, #10
 8010680:	e011      	b.n	80106a6 <_printf_i+0xfa>
 8010682:	6821      	ldr	r1, [r4, #0]
 8010684:	6833      	ldr	r3, [r6, #0]
 8010686:	0608      	lsls	r0, r1, #24
 8010688:	f853 5b04 	ldr.w	r5, [r3], #4
 801068c:	d402      	bmi.n	8010694 <_printf_i+0xe8>
 801068e:	0649      	lsls	r1, r1, #25
 8010690:	bf48      	it	mi
 8010692:	b2ad      	uxthmi	r5, r5
 8010694:	2f6f      	cmp	r7, #111	@ 0x6f
 8010696:	4853      	ldr	r0, [pc, #332]	@ (80107e4 <_printf_i+0x238>)
 8010698:	6033      	str	r3, [r6, #0]
 801069a:	bf14      	ite	ne
 801069c:	230a      	movne	r3, #10
 801069e:	2308      	moveq	r3, #8
 80106a0:	2100      	movs	r1, #0
 80106a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80106a6:	6866      	ldr	r6, [r4, #4]
 80106a8:	60a6      	str	r6, [r4, #8]
 80106aa:	2e00      	cmp	r6, #0
 80106ac:	bfa2      	ittt	ge
 80106ae:	6821      	ldrge	r1, [r4, #0]
 80106b0:	f021 0104 	bicge.w	r1, r1, #4
 80106b4:	6021      	strge	r1, [r4, #0]
 80106b6:	b90d      	cbnz	r5, 80106bc <_printf_i+0x110>
 80106b8:	2e00      	cmp	r6, #0
 80106ba:	d04b      	beq.n	8010754 <_printf_i+0x1a8>
 80106bc:	4616      	mov	r6, r2
 80106be:	fbb5 f1f3 	udiv	r1, r5, r3
 80106c2:	fb03 5711 	mls	r7, r3, r1, r5
 80106c6:	5dc7      	ldrb	r7, [r0, r7]
 80106c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80106cc:	462f      	mov	r7, r5
 80106ce:	42bb      	cmp	r3, r7
 80106d0:	460d      	mov	r5, r1
 80106d2:	d9f4      	bls.n	80106be <_printf_i+0x112>
 80106d4:	2b08      	cmp	r3, #8
 80106d6:	d10b      	bne.n	80106f0 <_printf_i+0x144>
 80106d8:	6823      	ldr	r3, [r4, #0]
 80106da:	07df      	lsls	r7, r3, #31
 80106dc:	d508      	bpl.n	80106f0 <_printf_i+0x144>
 80106de:	6923      	ldr	r3, [r4, #16]
 80106e0:	6861      	ldr	r1, [r4, #4]
 80106e2:	4299      	cmp	r1, r3
 80106e4:	bfde      	ittt	le
 80106e6:	2330      	movle	r3, #48	@ 0x30
 80106e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80106ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80106f0:	1b92      	subs	r2, r2, r6
 80106f2:	6122      	str	r2, [r4, #16]
 80106f4:	f8cd a000 	str.w	sl, [sp]
 80106f8:	464b      	mov	r3, r9
 80106fa:	aa03      	add	r2, sp, #12
 80106fc:	4621      	mov	r1, r4
 80106fe:	4640      	mov	r0, r8
 8010700:	f7ff fee6 	bl	80104d0 <_printf_common>
 8010704:	3001      	adds	r0, #1
 8010706:	d14a      	bne.n	801079e <_printf_i+0x1f2>
 8010708:	f04f 30ff 	mov.w	r0, #4294967295
 801070c:	b004      	add	sp, #16
 801070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010712:	6823      	ldr	r3, [r4, #0]
 8010714:	f043 0320 	orr.w	r3, r3, #32
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	4833      	ldr	r0, [pc, #204]	@ (80107e8 <_printf_i+0x23c>)
 801071c:	2778      	movs	r7, #120	@ 0x78
 801071e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010722:	6823      	ldr	r3, [r4, #0]
 8010724:	6831      	ldr	r1, [r6, #0]
 8010726:	061f      	lsls	r7, r3, #24
 8010728:	f851 5b04 	ldr.w	r5, [r1], #4
 801072c:	d402      	bmi.n	8010734 <_printf_i+0x188>
 801072e:	065f      	lsls	r7, r3, #25
 8010730:	bf48      	it	mi
 8010732:	b2ad      	uxthmi	r5, r5
 8010734:	6031      	str	r1, [r6, #0]
 8010736:	07d9      	lsls	r1, r3, #31
 8010738:	bf44      	itt	mi
 801073a:	f043 0320 	orrmi.w	r3, r3, #32
 801073e:	6023      	strmi	r3, [r4, #0]
 8010740:	b11d      	cbz	r5, 801074a <_printf_i+0x19e>
 8010742:	2310      	movs	r3, #16
 8010744:	e7ac      	b.n	80106a0 <_printf_i+0xf4>
 8010746:	4827      	ldr	r0, [pc, #156]	@ (80107e4 <_printf_i+0x238>)
 8010748:	e7e9      	b.n	801071e <_printf_i+0x172>
 801074a:	6823      	ldr	r3, [r4, #0]
 801074c:	f023 0320 	bic.w	r3, r3, #32
 8010750:	6023      	str	r3, [r4, #0]
 8010752:	e7f6      	b.n	8010742 <_printf_i+0x196>
 8010754:	4616      	mov	r6, r2
 8010756:	e7bd      	b.n	80106d4 <_printf_i+0x128>
 8010758:	6833      	ldr	r3, [r6, #0]
 801075a:	6825      	ldr	r5, [r4, #0]
 801075c:	6961      	ldr	r1, [r4, #20]
 801075e:	1d18      	adds	r0, r3, #4
 8010760:	6030      	str	r0, [r6, #0]
 8010762:	062e      	lsls	r6, r5, #24
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	d501      	bpl.n	801076c <_printf_i+0x1c0>
 8010768:	6019      	str	r1, [r3, #0]
 801076a:	e002      	b.n	8010772 <_printf_i+0x1c6>
 801076c:	0668      	lsls	r0, r5, #25
 801076e:	d5fb      	bpl.n	8010768 <_printf_i+0x1bc>
 8010770:	8019      	strh	r1, [r3, #0]
 8010772:	2300      	movs	r3, #0
 8010774:	6123      	str	r3, [r4, #16]
 8010776:	4616      	mov	r6, r2
 8010778:	e7bc      	b.n	80106f4 <_printf_i+0x148>
 801077a:	6833      	ldr	r3, [r6, #0]
 801077c:	1d1a      	adds	r2, r3, #4
 801077e:	6032      	str	r2, [r6, #0]
 8010780:	681e      	ldr	r6, [r3, #0]
 8010782:	6862      	ldr	r2, [r4, #4]
 8010784:	2100      	movs	r1, #0
 8010786:	4630      	mov	r0, r6
 8010788:	f7ef fd0a 	bl	80001a0 <memchr>
 801078c:	b108      	cbz	r0, 8010792 <_printf_i+0x1e6>
 801078e:	1b80      	subs	r0, r0, r6
 8010790:	6060      	str	r0, [r4, #4]
 8010792:	6863      	ldr	r3, [r4, #4]
 8010794:	6123      	str	r3, [r4, #16]
 8010796:	2300      	movs	r3, #0
 8010798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801079c:	e7aa      	b.n	80106f4 <_printf_i+0x148>
 801079e:	6923      	ldr	r3, [r4, #16]
 80107a0:	4632      	mov	r2, r6
 80107a2:	4649      	mov	r1, r9
 80107a4:	4640      	mov	r0, r8
 80107a6:	47d0      	blx	sl
 80107a8:	3001      	adds	r0, #1
 80107aa:	d0ad      	beq.n	8010708 <_printf_i+0x15c>
 80107ac:	6823      	ldr	r3, [r4, #0]
 80107ae:	079b      	lsls	r3, r3, #30
 80107b0:	d413      	bmi.n	80107da <_printf_i+0x22e>
 80107b2:	68e0      	ldr	r0, [r4, #12]
 80107b4:	9b03      	ldr	r3, [sp, #12]
 80107b6:	4298      	cmp	r0, r3
 80107b8:	bfb8      	it	lt
 80107ba:	4618      	movlt	r0, r3
 80107bc:	e7a6      	b.n	801070c <_printf_i+0x160>
 80107be:	2301      	movs	r3, #1
 80107c0:	4632      	mov	r2, r6
 80107c2:	4649      	mov	r1, r9
 80107c4:	4640      	mov	r0, r8
 80107c6:	47d0      	blx	sl
 80107c8:	3001      	adds	r0, #1
 80107ca:	d09d      	beq.n	8010708 <_printf_i+0x15c>
 80107cc:	3501      	adds	r5, #1
 80107ce:	68e3      	ldr	r3, [r4, #12]
 80107d0:	9903      	ldr	r1, [sp, #12]
 80107d2:	1a5b      	subs	r3, r3, r1
 80107d4:	42ab      	cmp	r3, r5
 80107d6:	dcf2      	bgt.n	80107be <_printf_i+0x212>
 80107d8:	e7eb      	b.n	80107b2 <_printf_i+0x206>
 80107da:	2500      	movs	r5, #0
 80107dc:	f104 0619 	add.w	r6, r4, #25
 80107e0:	e7f5      	b.n	80107ce <_printf_i+0x222>
 80107e2:	bf00      	nop
 80107e4:	08013edb 	.word	0x08013edb
 80107e8:	08013eec 	.word	0x08013eec

080107ec <_scanf_float>:
 80107ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f0:	b087      	sub	sp, #28
 80107f2:	4617      	mov	r7, r2
 80107f4:	9303      	str	r3, [sp, #12]
 80107f6:	688b      	ldr	r3, [r1, #8]
 80107f8:	1e5a      	subs	r2, r3, #1
 80107fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80107fe:	bf81      	itttt	hi
 8010800:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010804:	eb03 0b05 	addhi.w	fp, r3, r5
 8010808:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801080c:	608b      	strhi	r3, [r1, #8]
 801080e:	680b      	ldr	r3, [r1, #0]
 8010810:	460a      	mov	r2, r1
 8010812:	f04f 0500 	mov.w	r5, #0
 8010816:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801081a:	f842 3b1c 	str.w	r3, [r2], #28
 801081e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010822:	4680      	mov	r8, r0
 8010824:	460c      	mov	r4, r1
 8010826:	bf98      	it	ls
 8010828:	f04f 0b00 	movls.w	fp, #0
 801082c:	9201      	str	r2, [sp, #4]
 801082e:	4616      	mov	r6, r2
 8010830:	46aa      	mov	sl, r5
 8010832:	46a9      	mov	r9, r5
 8010834:	9502      	str	r5, [sp, #8]
 8010836:	68a2      	ldr	r2, [r4, #8]
 8010838:	b152      	cbz	r2, 8010850 <_scanf_float+0x64>
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	2b4e      	cmp	r3, #78	@ 0x4e
 8010840:	d864      	bhi.n	801090c <_scanf_float+0x120>
 8010842:	2b40      	cmp	r3, #64	@ 0x40
 8010844:	d83c      	bhi.n	80108c0 <_scanf_float+0xd4>
 8010846:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801084a:	b2c8      	uxtb	r0, r1
 801084c:	280e      	cmp	r0, #14
 801084e:	d93a      	bls.n	80108c6 <_scanf_float+0xda>
 8010850:	f1b9 0f00 	cmp.w	r9, #0
 8010854:	d003      	beq.n	801085e <_scanf_float+0x72>
 8010856:	6823      	ldr	r3, [r4, #0]
 8010858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801085c:	6023      	str	r3, [r4, #0]
 801085e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010862:	f1ba 0f01 	cmp.w	sl, #1
 8010866:	f200 8117 	bhi.w	8010a98 <_scanf_float+0x2ac>
 801086a:	9b01      	ldr	r3, [sp, #4]
 801086c:	429e      	cmp	r6, r3
 801086e:	f200 8108 	bhi.w	8010a82 <_scanf_float+0x296>
 8010872:	2001      	movs	r0, #1
 8010874:	b007      	add	sp, #28
 8010876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801087e:	2a0d      	cmp	r2, #13
 8010880:	d8e6      	bhi.n	8010850 <_scanf_float+0x64>
 8010882:	a101      	add	r1, pc, #4	@ (adr r1, 8010888 <_scanf_float+0x9c>)
 8010884:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010888:	080109cf 	.word	0x080109cf
 801088c:	08010851 	.word	0x08010851
 8010890:	08010851 	.word	0x08010851
 8010894:	08010851 	.word	0x08010851
 8010898:	08010a2f 	.word	0x08010a2f
 801089c:	08010a07 	.word	0x08010a07
 80108a0:	08010851 	.word	0x08010851
 80108a4:	08010851 	.word	0x08010851
 80108a8:	080109dd 	.word	0x080109dd
 80108ac:	08010851 	.word	0x08010851
 80108b0:	08010851 	.word	0x08010851
 80108b4:	08010851 	.word	0x08010851
 80108b8:	08010851 	.word	0x08010851
 80108bc:	08010995 	.word	0x08010995
 80108c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80108c4:	e7db      	b.n	801087e <_scanf_float+0x92>
 80108c6:	290e      	cmp	r1, #14
 80108c8:	d8c2      	bhi.n	8010850 <_scanf_float+0x64>
 80108ca:	a001      	add	r0, pc, #4	@ (adr r0, 80108d0 <_scanf_float+0xe4>)
 80108cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80108d0:	08010985 	.word	0x08010985
 80108d4:	08010851 	.word	0x08010851
 80108d8:	08010985 	.word	0x08010985
 80108dc:	08010a1b 	.word	0x08010a1b
 80108e0:	08010851 	.word	0x08010851
 80108e4:	0801092d 	.word	0x0801092d
 80108e8:	0801096b 	.word	0x0801096b
 80108ec:	0801096b 	.word	0x0801096b
 80108f0:	0801096b 	.word	0x0801096b
 80108f4:	0801096b 	.word	0x0801096b
 80108f8:	0801096b 	.word	0x0801096b
 80108fc:	0801096b 	.word	0x0801096b
 8010900:	0801096b 	.word	0x0801096b
 8010904:	0801096b 	.word	0x0801096b
 8010908:	0801096b 	.word	0x0801096b
 801090c:	2b6e      	cmp	r3, #110	@ 0x6e
 801090e:	d809      	bhi.n	8010924 <_scanf_float+0x138>
 8010910:	2b60      	cmp	r3, #96	@ 0x60
 8010912:	d8b2      	bhi.n	801087a <_scanf_float+0x8e>
 8010914:	2b54      	cmp	r3, #84	@ 0x54
 8010916:	d07b      	beq.n	8010a10 <_scanf_float+0x224>
 8010918:	2b59      	cmp	r3, #89	@ 0x59
 801091a:	d199      	bne.n	8010850 <_scanf_float+0x64>
 801091c:	2d07      	cmp	r5, #7
 801091e:	d197      	bne.n	8010850 <_scanf_float+0x64>
 8010920:	2508      	movs	r5, #8
 8010922:	e02c      	b.n	801097e <_scanf_float+0x192>
 8010924:	2b74      	cmp	r3, #116	@ 0x74
 8010926:	d073      	beq.n	8010a10 <_scanf_float+0x224>
 8010928:	2b79      	cmp	r3, #121	@ 0x79
 801092a:	e7f6      	b.n	801091a <_scanf_float+0x12e>
 801092c:	6821      	ldr	r1, [r4, #0]
 801092e:	05c8      	lsls	r0, r1, #23
 8010930:	d51b      	bpl.n	801096a <_scanf_float+0x17e>
 8010932:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010936:	6021      	str	r1, [r4, #0]
 8010938:	f109 0901 	add.w	r9, r9, #1
 801093c:	f1bb 0f00 	cmp.w	fp, #0
 8010940:	d003      	beq.n	801094a <_scanf_float+0x15e>
 8010942:	3201      	adds	r2, #1
 8010944:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010948:	60a2      	str	r2, [r4, #8]
 801094a:	68a3      	ldr	r3, [r4, #8]
 801094c:	3b01      	subs	r3, #1
 801094e:	60a3      	str	r3, [r4, #8]
 8010950:	6923      	ldr	r3, [r4, #16]
 8010952:	3301      	adds	r3, #1
 8010954:	6123      	str	r3, [r4, #16]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	3b01      	subs	r3, #1
 801095a:	2b00      	cmp	r3, #0
 801095c:	607b      	str	r3, [r7, #4]
 801095e:	f340 8087 	ble.w	8010a70 <_scanf_float+0x284>
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	3301      	adds	r3, #1
 8010966:	603b      	str	r3, [r7, #0]
 8010968:	e765      	b.n	8010836 <_scanf_float+0x4a>
 801096a:	eb1a 0105 	adds.w	r1, sl, r5
 801096e:	f47f af6f 	bne.w	8010850 <_scanf_float+0x64>
 8010972:	6822      	ldr	r2, [r4, #0]
 8010974:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010978:	6022      	str	r2, [r4, #0]
 801097a:	460d      	mov	r5, r1
 801097c:	468a      	mov	sl, r1
 801097e:	f806 3b01 	strb.w	r3, [r6], #1
 8010982:	e7e2      	b.n	801094a <_scanf_float+0x15e>
 8010984:	6822      	ldr	r2, [r4, #0]
 8010986:	0610      	lsls	r0, r2, #24
 8010988:	f57f af62 	bpl.w	8010850 <_scanf_float+0x64>
 801098c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010990:	6022      	str	r2, [r4, #0]
 8010992:	e7f4      	b.n	801097e <_scanf_float+0x192>
 8010994:	f1ba 0f00 	cmp.w	sl, #0
 8010998:	d10e      	bne.n	80109b8 <_scanf_float+0x1cc>
 801099a:	f1b9 0f00 	cmp.w	r9, #0
 801099e:	d10e      	bne.n	80109be <_scanf_float+0x1d2>
 80109a0:	6822      	ldr	r2, [r4, #0]
 80109a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80109a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80109aa:	d108      	bne.n	80109be <_scanf_float+0x1d2>
 80109ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80109b0:	6022      	str	r2, [r4, #0]
 80109b2:	f04f 0a01 	mov.w	sl, #1
 80109b6:	e7e2      	b.n	801097e <_scanf_float+0x192>
 80109b8:	f1ba 0f02 	cmp.w	sl, #2
 80109bc:	d055      	beq.n	8010a6a <_scanf_float+0x27e>
 80109be:	2d01      	cmp	r5, #1
 80109c0:	d002      	beq.n	80109c8 <_scanf_float+0x1dc>
 80109c2:	2d04      	cmp	r5, #4
 80109c4:	f47f af44 	bne.w	8010850 <_scanf_float+0x64>
 80109c8:	3501      	adds	r5, #1
 80109ca:	b2ed      	uxtb	r5, r5
 80109cc:	e7d7      	b.n	801097e <_scanf_float+0x192>
 80109ce:	f1ba 0f01 	cmp.w	sl, #1
 80109d2:	f47f af3d 	bne.w	8010850 <_scanf_float+0x64>
 80109d6:	f04f 0a02 	mov.w	sl, #2
 80109da:	e7d0      	b.n	801097e <_scanf_float+0x192>
 80109dc:	b97d      	cbnz	r5, 80109fe <_scanf_float+0x212>
 80109de:	f1b9 0f00 	cmp.w	r9, #0
 80109e2:	f47f af38 	bne.w	8010856 <_scanf_float+0x6a>
 80109e6:	6822      	ldr	r2, [r4, #0]
 80109e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80109ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80109f0:	f040 8108 	bne.w	8010c04 <_scanf_float+0x418>
 80109f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80109f8:	6022      	str	r2, [r4, #0]
 80109fa:	2501      	movs	r5, #1
 80109fc:	e7bf      	b.n	801097e <_scanf_float+0x192>
 80109fe:	2d03      	cmp	r5, #3
 8010a00:	d0e2      	beq.n	80109c8 <_scanf_float+0x1dc>
 8010a02:	2d05      	cmp	r5, #5
 8010a04:	e7de      	b.n	80109c4 <_scanf_float+0x1d8>
 8010a06:	2d02      	cmp	r5, #2
 8010a08:	f47f af22 	bne.w	8010850 <_scanf_float+0x64>
 8010a0c:	2503      	movs	r5, #3
 8010a0e:	e7b6      	b.n	801097e <_scanf_float+0x192>
 8010a10:	2d06      	cmp	r5, #6
 8010a12:	f47f af1d 	bne.w	8010850 <_scanf_float+0x64>
 8010a16:	2507      	movs	r5, #7
 8010a18:	e7b1      	b.n	801097e <_scanf_float+0x192>
 8010a1a:	6822      	ldr	r2, [r4, #0]
 8010a1c:	0591      	lsls	r1, r2, #22
 8010a1e:	f57f af17 	bpl.w	8010850 <_scanf_float+0x64>
 8010a22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010a26:	6022      	str	r2, [r4, #0]
 8010a28:	f8cd 9008 	str.w	r9, [sp, #8]
 8010a2c:	e7a7      	b.n	801097e <_scanf_float+0x192>
 8010a2e:	6822      	ldr	r2, [r4, #0]
 8010a30:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010a34:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010a38:	d006      	beq.n	8010a48 <_scanf_float+0x25c>
 8010a3a:	0550      	lsls	r0, r2, #21
 8010a3c:	f57f af08 	bpl.w	8010850 <_scanf_float+0x64>
 8010a40:	f1b9 0f00 	cmp.w	r9, #0
 8010a44:	f000 80de 	beq.w	8010c04 <_scanf_float+0x418>
 8010a48:	0591      	lsls	r1, r2, #22
 8010a4a:	bf58      	it	pl
 8010a4c:	9902      	ldrpl	r1, [sp, #8]
 8010a4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010a52:	bf58      	it	pl
 8010a54:	eba9 0101 	subpl.w	r1, r9, r1
 8010a58:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010a5c:	bf58      	it	pl
 8010a5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010a62:	6022      	str	r2, [r4, #0]
 8010a64:	f04f 0900 	mov.w	r9, #0
 8010a68:	e789      	b.n	801097e <_scanf_float+0x192>
 8010a6a:	f04f 0a03 	mov.w	sl, #3
 8010a6e:	e786      	b.n	801097e <_scanf_float+0x192>
 8010a70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010a74:	4639      	mov	r1, r7
 8010a76:	4640      	mov	r0, r8
 8010a78:	4798      	blx	r3
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	f43f aedb 	beq.w	8010836 <_scanf_float+0x4a>
 8010a80:	e6e6      	b.n	8010850 <_scanf_float+0x64>
 8010a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010a86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010a8a:	463a      	mov	r2, r7
 8010a8c:	4640      	mov	r0, r8
 8010a8e:	4798      	blx	r3
 8010a90:	6923      	ldr	r3, [r4, #16]
 8010a92:	3b01      	subs	r3, #1
 8010a94:	6123      	str	r3, [r4, #16]
 8010a96:	e6e8      	b.n	801086a <_scanf_float+0x7e>
 8010a98:	1e6b      	subs	r3, r5, #1
 8010a9a:	2b06      	cmp	r3, #6
 8010a9c:	d824      	bhi.n	8010ae8 <_scanf_float+0x2fc>
 8010a9e:	2d02      	cmp	r5, #2
 8010aa0:	d836      	bhi.n	8010b10 <_scanf_float+0x324>
 8010aa2:	9b01      	ldr	r3, [sp, #4]
 8010aa4:	429e      	cmp	r6, r3
 8010aa6:	f67f aee4 	bls.w	8010872 <_scanf_float+0x86>
 8010aaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010aae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ab2:	463a      	mov	r2, r7
 8010ab4:	4640      	mov	r0, r8
 8010ab6:	4798      	blx	r3
 8010ab8:	6923      	ldr	r3, [r4, #16]
 8010aba:	3b01      	subs	r3, #1
 8010abc:	6123      	str	r3, [r4, #16]
 8010abe:	e7f0      	b.n	8010aa2 <_scanf_float+0x2b6>
 8010ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ac4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010ac8:	463a      	mov	r2, r7
 8010aca:	4640      	mov	r0, r8
 8010acc:	4798      	blx	r3
 8010ace:	6923      	ldr	r3, [r4, #16]
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	6123      	str	r3, [r4, #16]
 8010ad4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ad8:	fa5f fa8a 	uxtb.w	sl, sl
 8010adc:	f1ba 0f02 	cmp.w	sl, #2
 8010ae0:	d1ee      	bne.n	8010ac0 <_scanf_float+0x2d4>
 8010ae2:	3d03      	subs	r5, #3
 8010ae4:	b2ed      	uxtb	r5, r5
 8010ae6:	1b76      	subs	r6, r6, r5
 8010ae8:	6823      	ldr	r3, [r4, #0]
 8010aea:	05da      	lsls	r2, r3, #23
 8010aec:	d530      	bpl.n	8010b50 <_scanf_float+0x364>
 8010aee:	055b      	lsls	r3, r3, #21
 8010af0:	d511      	bpl.n	8010b16 <_scanf_float+0x32a>
 8010af2:	9b01      	ldr	r3, [sp, #4]
 8010af4:	429e      	cmp	r6, r3
 8010af6:	f67f aebc 	bls.w	8010872 <_scanf_float+0x86>
 8010afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010afe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010b02:	463a      	mov	r2, r7
 8010b04:	4640      	mov	r0, r8
 8010b06:	4798      	blx	r3
 8010b08:	6923      	ldr	r3, [r4, #16]
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	6123      	str	r3, [r4, #16]
 8010b0e:	e7f0      	b.n	8010af2 <_scanf_float+0x306>
 8010b10:	46aa      	mov	sl, r5
 8010b12:	46b3      	mov	fp, r6
 8010b14:	e7de      	b.n	8010ad4 <_scanf_float+0x2e8>
 8010b16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010b1a:	6923      	ldr	r3, [r4, #16]
 8010b1c:	2965      	cmp	r1, #101	@ 0x65
 8010b1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010b22:	f106 35ff 	add.w	r5, r6, #4294967295
 8010b26:	6123      	str	r3, [r4, #16]
 8010b28:	d00c      	beq.n	8010b44 <_scanf_float+0x358>
 8010b2a:	2945      	cmp	r1, #69	@ 0x45
 8010b2c:	d00a      	beq.n	8010b44 <_scanf_float+0x358>
 8010b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010b32:	463a      	mov	r2, r7
 8010b34:	4640      	mov	r0, r8
 8010b36:	4798      	blx	r3
 8010b38:	6923      	ldr	r3, [r4, #16]
 8010b3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	1eb5      	subs	r5, r6, #2
 8010b42:	6123      	str	r3, [r4, #16]
 8010b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010b48:	463a      	mov	r2, r7
 8010b4a:	4640      	mov	r0, r8
 8010b4c:	4798      	blx	r3
 8010b4e:	462e      	mov	r6, r5
 8010b50:	6822      	ldr	r2, [r4, #0]
 8010b52:	f012 0210 	ands.w	r2, r2, #16
 8010b56:	d001      	beq.n	8010b5c <_scanf_float+0x370>
 8010b58:	2000      	movs	r0, #0
 8010b5a:	e68b      	b.n	8010874 <_scanf_float+0x88>
 8010b5c:	7032      	strb	r2, [r6, #0]
 8010b5e:	6823      	ldr	r3, [r4, #0]
 8010b60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010b68:	d11c      	bne.n	8010ba4 <_scanf_float+0x3b8>
 8010b6a:	9b02      	ldr	r3, [sp, #8]
 8010b6c:	454b      	cmp	r3, r9
 8010b6e:	eba3 0209 	sub.w	r2, r3, r9
 8010b72:	d123      	bne.n	8010bbc <_scanf_float+0x3d0>
 8010b74:	9901      	ldr	r1, [sp, #4]
 8010b76:	2200      	movs	r2, #0
 8010b78:	4640      	mov	r0, r8
 8010b7a:	f7ff f9cd 	bl	800ff18 <_strtod_r>
 8010b7e:	9b03      	ldr	r3, [sp, #12]
 8010b80:	6821      	ldr	r1, [r4, #0]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f011 0f02 	tst.w	r1, #2
 8010b88:	ec57 6b10 	vmov	r6, r7, d0
 8010b8c:	f103 0204 	add.w	r2, r3, #4
 8010b90:	d01f      	beq.n	8010bd2 <_scanf_float+0x3e6>
 8010b92:	9903      	ldr	r1, [sp, #12]
 8010b94:	600a      	str	r2, [r1, #0]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	e9c3 6700 	strd	r6, r7, [r3]
 8010b9c:	68e3      	ldr	r3, [r4, #12]
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	60e3      	str	r3, [r4, #12]
 8010ba2:	e7d9      	b.n	8010b58 <_scanf_float+0x36c>
 8010ba4:	9b04      	ldr	r3, [sp, #16]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d0e4      	beq.n	8010b74 <_scanf_float+0x388>
 8010baa:	9905      	ldr	r1, [sp, #20]
 8010bac:	230a      	movs	r3, #10
 8010bae:	3101      	adds	r1, #1
 8010bb0:	4640      	mov	r0, r8
 8010bb2:	f002 fa4b 	bl	801304c <_strtol_r>
 8010bb6:	9b04      	ldr	r3, [sp, #16]
 8010bb8:	9e05      	ldr	r6, [sp, #20]
 8010bba:	1ac2      	subs	r2, r0, r3
 8010bbc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010bc0:	429e      	cmp	r6, r3
 8010bc2:	bf28      	it	cs
 8010bc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010bc8:	4910      	ldr	r1, [pc, #64]	@ (8010c0c <_scanf_float+0x420>)
 8010bca:	4630      	mov	r0, r6
 8010bcc:	f000 f954 	bl	8010e78 <siprintf>
 8010bd0:	e7d0      	b.n	8010b74 <_scanf_float+0x388>
 8010bd2:	f011 0f04 	tst.w	r1, #4
 8010bd6:	9903      	ldr	r1, [sp, #12]
 8010bd8:	600a      	str	r2, [r1, #0]
 8010bda:	d1dc      	bne.n	8010b96 <_scanf_float+0x3aa>
 8010bdc:	681d      	ldr	r5, [r3, #0]
 8010bde:	4632      	mov	r2, r6
 8010be0:	463b      	mov	r3, r7
 8010be2:	4630      	mov	r0, r6
 8010be4:	4639      	mov	r1, r7
 8010be6:	f7ef ff89 	bl	8000afc <__aeabi_dcmpun>
 8010bea:	b128      	cbz	r0, 8010bf8 <_scanf_float+0x40c>
 8010bec:	4808      	ldr	r0, [pc, #32]	@ (8010c10 <_scanf_float+0x424>)
 8010bee:	f000 faf3 	bl	80111d8 <nanf>
 8010bf2:	ed85 0a00 	vstr	s0, [r5]
 8010bf6:	e7d1      	b.n	8010b9c <_scanf_float+0x3b0>
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	4639      	mov	r1, r7
 8010bfc:	f7ef ffdc 	bl	8000bb8 <__aeabi_d2f>
 8010c00:	6028      	str	r0, [r5, #0]
 8010c02:	e7cb      	b.n	8010b9c <_scanf_float+0x3b0>
 8010c04:	f04f 0900 	mov.w	r9, #0
 8010c08:	e629      	b.n	801085e <_scanf_float+0x72>
 8010c0a:	bf00      	nop
 8010c0c:	08013efd 	.word	0x08013efd
 8010c10:	08013f45 	.word	0x08013f45

08010c14 <std>:
 8010c14:	2300      	movs	r3, #0
 8010c16:	b510      	push	{r4, lr}
 8010c18:	4604      	mov	r4, r0
 8010c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8010c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c22:	6083      	str	r3, [r0, #8]
 8010c24:	8181      	strh	r1, [r0, #12]
 8010c26:	6643      	str	r3, [r0, #100]	@ 0x64
 8010c28:	81c2      	strh	r2, [r0, #14]
 8010c2a:	6183      	str	r3, [r0, #24]
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	2208      	movs	r2, #8
 8010c30:	305c      	adds	r0, #92	@ 0x5c
 8010c32:	f000 fa19 	bl	8011068 <memset>
 8010c36:	4b0d      	ldr	r3, [pc, #52]	@ (8010c6c <std+0x58>)
 8010c38:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c70 <std+0x5c>)
 8010c3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c74 <std+0x60>)
 8010c40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c42:	4b0d      	ldr	r3, [pc, #52]	@ (8010c78 <std+0x64>)
 8010c44:	6323      	str	r3, [r4, #48]	@ 0x30
 8010c46:	4b0d      	ldr	r3, [pc, #52]	@ (8010c7c <std+0x68>)
 8010c48:	6224      	str	r4, [r4, #32]
 8010c4a:	429c      	cmp	r4, r3
 8010c4c:	d006      	beq.n	8010c5c <std+0x48>
 8010c4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c52:	4294      	cmp	r4, r2
 8010c54:	d002      	beq.n	8010c5c <std+0x48>
 8010c56:	33d0      	adds	r3, #208	@ 0xd0
 8010c58:	429c      	cmp	r4, r3
 8010c5a:	d105      	bne.n	8010c68 <std+0x54>
 8010c5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c64:	f000 ba9e 	b.w	80111a4 <__retarget_lock_init_recursive>
 8010c68:	bd10      	pop	{r4, pc}
 8010c6a:	bf00      	nop
 8010c6c:	08010eb9 	.word	0x08010eb9
 8010c70:	08010edb 	.word	0x08010edb
 8010c74:	08010f13 	.word	0x08010f13
 8010c78:	08010f37 	.word	0x08010f37
 8010c7c:	200008fc 	.word	0x200008fc

08010c80 <stdio_exit_handler>:
 8010c80:	4a02      	ldr	r2, [pc, #8]	@ (8010c8c <stdio_exit_handler+0xc>)
 8010c82:	4903      	ldr	r1, [pc, #12]	@ (8010c90 <stdio_exit_handler+0x10>)
 8010c84:	4803      	ldr	r0, [pc, #12]	@ (8010c94 <stdio_exit_handler+0x14>)
 8010c86:	f000 b869 	b.w	8010d5c <_fwalk_sglue>
 8010c8a:	bf00      	nop
 8010c8c:	20000038 	.word	0x20000038
 8010c90:	080136a5 	.word	0x080136a5
 8010c94:	200001b4 	.word	0x200001b4

08010c98 <cleanup_stdio>:
 8010c98:	6841      	ldr	r1, [r0, #4]
 8010c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8010ccc <cleanup_stdio+0x34>)
 8010c9c:	4299      	cmp	r1, r3
 8010c9e:	b510      	push	{r4, lr}
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	d001      	beq.n	8010ca8 <cleanup_stdio+0x10>
 8010ca4:	f002 fcfe 	bl	80136a4 <_fflush_r>
 8010ca8:	68a1      	ldr	r1, [r4, #8]
 8010caa:	4b09      	ldr	r3, [pc, #36]	@ (8010cd0 <cleanup_stdio+0x38>)
 8010cac:	4299      	cmp	r1, r3
 8010cae:	d002      	beq.n	8010cb6 <cleanup_stdio+0x1e>
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f002 fcf7 	bl	80136a4 <_fflush_r>
 8010cb6:	68e1      	ldr	r1, [r4, #12]
 8010cb8:	4b06      	ldr	r3, [pc, #24]	@ (8010cd4 <cleanup_stdio+0x3c>)
 8010cba:	4299      	cmp	r1, r3
 8010cbc:	d004      	beq.n	8010cc8 <cleanup_stdio+0x30>
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cc4:	f002 bcee 	b.w	80136a4 <_fflush_r>
 8010cc8:	bd10      	pop	{r4, pc}
 8010cca:	bf00      	nop
 8010ccc:	200008fc 	.word	0x200008fc
 8010cd0:	20000964 	.word	0x20000964
 8010cd4:	200009cc 	.word	0x200009cc

08010cd8 <global_stdio_init.part.0>:
 8010cd8:	b510      	push	{r4, lr}
 8010cda:	4b0b      	ldr	r3, [pc, #44]	@ (8010d08 <global_stdio_init.part.0+0x30>)
 8010cdc:	4c0b      	ldr	r4, [pc, #44]	@ (8010d0c <global_stdio_init.part.0+0x34>)
 8010cde:	4a0c      	ldr	r2, [pc, #48]	@ (8010d10 <global_stdio_init.part.0+0x38>)
 8010ce0:	601a      	str	r2, [r3, #0]
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	2104      	movs	r1, #4
 8010ce8:	f7ff ff94 	bl	8010c14 <std>
 8010cec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	2109      	movs	r1, #9
 8010cf4:	f7ff ff8e 	bl	8010c14 <std>
 8010cf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010cfc:	2202      	movs	r2, #2
 8010cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d02:	2112      	movs	r1, #18
 8010d04:	f7ff bf86 	b.w	8010c14 <std>
 8010d08:	20000a34 	.word	0x20000a34
 8010d0c:	200008fc 	.word	0x200008fc
 8010d10:	08010c81 	.word	0x08010c81

08010d14 <__sfp_lock_acquire>:
 8010d14:	4801      	ldr	r0, [pc, #4]	@ (8010d1c <__sfp_lock_acquire+0x8>)
 8010d16:	f000 ba46 	b.w	80111a6 <__retarget_lock_acquire_recursive>
 8010d1a:	bf00      	nop
 8010d1c:	20000a3d 	.word	0x20000a3d

08010d20 <__sfp_lock_release>:
 8010d20:	4801      	ldr	r0, [pc, #4]	@ (8010d28 <__sfp_lock_release+0x8>)
 8010d22:	f000 ba41 	b.w	80111a8 <__retarget_lock_release_recursive>
 8010d26:	bf00      	nop
 8010d28:	20000a3d 	.word	0x20000a3d

08010d2c <__sinit>:
 8010d2c:	b510      	push	{r4, lr}
 8010d2e:	4604      	mov	r4, r0
 8010d30:	f7ff fff0 	bl	8010d14 <__sfp_lock_acquire>
 8010d34:	6a23      	ldr	r3, [r4, #32]
 8010d36:	b11b      	cbz	r3, 8010d40 <__sinit+0x14>
 8010d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d3c:	f7ff bff0 	b.w	8010d20 <__sfp_lock_release>
 8010d40:	4b04      	ldr	r3, [pc, #16]	@ (8010d54 <__sinit+0x28>)
 8010d42:	6223      	str	r3, [r4, #32]
 8010d44:	4b04      	ldr	r3, [pc, #16]	@ (8010d58 <__sinit+0x2c>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d1f5      	bne.n	8010d38 <__sinit+0xc>
 8010d4c:	f7ff ffc4 	bl	8010cd8 <global_stdio_init.part.0>
 8010d50:	e7f2      	b.n	8010d38 <__sinit+0xc>
 8010d52:	bf00      	nop
 8010d54:	08010c99 	.word	0x08010c99
 8010d58:	20000a34 	.word	0x20000a34

08010d5c <_fwalk_sglue>:
 8010d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d60:	4607      	mov	r7, r0
 8010d62:	4688      	mov	r8, r1
 8010d64:	4614      	mov	r4, r2
 8010d66:	2600      	movs	r6, #0
 8010d68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d6c:	f1b9 0901 	subs.w	r9, r9, #1
 8010d70:	d505      	bpl.n	8010d7e <_fwalk_sglue+0x22>
 8010d72:	6824      	ldr	r4, [r4, #0]
 8010d74:	2c00      	cmp	r4, #0
 8010d76:	d1f7      	bne.n	8010d68 <_fwalk_sglue+0xc>
 8010d78:	4630      	mov	r0, r6
 8010d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d7e:	89ab      	ldrh	r3, [r5, #12]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d907      	bls.n	8010d94 <_fwalk_sglue+0x38>
 8010d84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d88:	3301      	adds	r3, #1
 8010d8a:	d003      	beq.n	8010d94 <_fwalk_sglue+0x38>
 8010d8c:	4629      	mov	r1, r5
 8010d8e:	4638      	mov	r0, r7
 8010d90:	47c0      	blx	r8
 8010d92:	4306      	orrs	r6, r0
 8010d94:	3568      	adds	r5, #104	@ 0x68
 8010d96:	e7e9      	b.n	8010d6c <_fwalk_sglue+0x10>

08010d98 <iprintf>:
 8010d98:	b40f      	push	{r0, r1, r2, r3}
 8010d9a:	b507      	push	{r0, r1, r2, lr}
 8010d9c:	4906      	ldr	r1, [pc, #24]	@ (8010db8 <iprintf+0x20>)
 8010d9e:	ab04      	add	r3, sp, #16
 8010da0:	6808      	ldr	r0, [r1, #0]
 8010da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010da6:	6881      	ldr	r1, [r0, #8]
 8010da8:	9301      	str	r3, [sp, #4]
 8010daa:	f002 fadf 	bl	801336c <_vfiprintf_r>
 8010dae:	b003      	add	sp, #12
 8010db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010db4:	b004      	add	sp, #16
 8010db6:	4770      	bx	lr
 8010db8:	200001b0 	.word	0x200001b0

08010dbc <_puts_r>:
 8010dbc:	6a03      	ldr	r3, [r0, #32]
 8010dbe:	b570      	push	{r4, r5, r6, lr}
 8010dc0:	6884      	ldr	r4, [r0, #8]
 8010dc2:	4605      	mov	r5, r0
 8010dc4:	460e      	mov	r6, r1
 8010dc6:	b90b      	cbnz	r3, 8010dcc <_puts_r+0x10>
 8010dc8:	f7ff ffb0 	bl	8010d2c <__sinit>
 8010dcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010dce:	07db      	lsls	r3, r3, #31
 8010dd0:	d405      	bmi.n	8010dde <_puts_r+0x22>
 8010dd2:	89a3      	ldrh	r3, [r4, #12]
 8010dd4:	0598      	lsls	r0, r3, #22
 8010dd6:	d402      	bmi.n	8010dde <_puts_r+0x22>
 8010dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dda:	f000 f9e4 	bl	80111a6 <__retarget_lock_acquire_recursive>
 8010dde:	89a3      	ldrh	r3, [r4, #12]
 8010de0:	0719      	lsls	r1, r3, #28
 8010de2:	d502      	bpl.n	8010dea <_puts_r+0x2e>
 8010de4:	6923      	ldr	r3, [r4, #16]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d135      	bne.n	8010e56 <_puts_r+0x9a>
 8010dea:	4621      	mov	r1, r4
 8010dec:	4628      	mov	r0, r5
 8010dee:	f000 f8e5 	bl	8010fbc <__swsetup_r>
 8010df2:	b380      	cbz	r0, 8010e56 <_puts_r+0x9a>
 8010df4:	f04f 35ff 	mov.w	r5, #4294967295
 8010df8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010dfa:	07da      	lsls	r2, r3, #31
 8010dfc:	d405      	bmi.n	8010e0a <_puts_r+0x4e>
 8010dfe:	89a3      	ldrh	r3, [r4, #12]
 8010e00:	059b      	lsls	r3, r3, #22
 8010e02:	d402      	bmi.n	8010e0a <_puts_r+0x4e>
 8010e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e06:	f000 f9cf 	bl	80111a8 <__retarget_lock_release_recursive>
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	bd70      	pop	{r4, r5, r6, pc}
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	da04      	bge.n	8010e1c <_puts_r+0x60>
 8010e12:	69a2      	ldr	r2, [r4, #24]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	dc17      	bgt.n	8010e48 <_puts_r+0x8c>
 8010e18:	290a      	cmp	r1, #10
 8010e1a:	d015      	beq.n	8010e48 <_puts_r+0x8c>
 8010e1c:	6823      	ldr	r3, [r4, #0]
 8010e1e:	1c5a      	adds	r2, r3, #1
 8010e20:	6022      	str	r2, [r4, #0]
 8010e22:	7019      	strb	r1, [r3, #0]
 8010e24:	68a3      	ldr	r3, [r4, #8]
 8010e26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	60a3      	str	r3, [r4, #8]
 8010e2e:	2900      	cmp	r1, #0
 8010e30:	d1ed      	bne.n	8010e0e <_puts_r+0x52>
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	da11      	bge.n	8010e5a <_puts_r+0x9e>
 8010e36:	4622      	mov	r2, r4
 8010e38:	210a      	movs	r1, #10
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f000 f87f 	bl	8010f3e <__swbuf_r>
 8010e40:	3001      	adds	r0, #1
 8010e42:	d0d7      	beq.n	8010df4 <_puts_r+0x38>
 8010e44:	250a      	movs	r5, #10
 8010e46:	e7d7      	b.n	8010df8 <_puts_r+0x3c>
 8010e48:	4622      	mov	r2, r4
 8010e4a:	4628      	mov	r0, r5
 8010e4c:	f000 f877 	bl	8010f3e <__swbuf_r>
 8010e50:	3001      	adds	r0, #1
 8010e52:	d1e7      	bne.n	8010e24 <_puts_r+0x68>
 8010e54:	e7ce      	b.n	8010df4 <_puts_r+0x38>
 8010e56:	3e01      	subs	r6, #1
 8010e58:	e7e4      	b.n	8010e24 <_puts_r+0x68>
 8010e5a:	6823      	ldr	r3, [r4, #0]
 8010e5c:	1c5a      	adds	r2, r3, #1
 8010e5e:	6022      	str	r2, [r4, #0]
 8010e60:	220a      	movs	r2, #10
 8010e62:	701a      	strb	r2, [r3, #0]
 8010e64:	e7ee      	b.n	8010e44 <_puts_r+0x88>
	...

08010e68 <puts>:
 8010e68:	4b02      	ldr	r3, [pc, #8]	@ (8010e74 <puts+0xc>)
 8010e6a:	4601      	mov	r1, r0
 8010e6c:	6818      	ldr	r0, [r3, #0]
 8010e6e:	f7ff bfa5 	b.w	8010dbc <_puts_r>
 8010e72:	bf00      	nop
 8010e74:	200001b0 	.word	0x200001b0

08010e78 <siprintf>:
 8010e78:	b40e      	push	{r1, r2, r3}
 8010e7a:	b500      	push	{lr}
 8010e7c:	b09c      	sub	sp, #112	@ 0x70
 8010e7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010e80:	9002      	str	r0, [sp, #8]
 8010e82:	9006      	str	r0, [sp, #24]
 8010e84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010e88:	4809      	ldr	r0, [pc, #36]	@ (8010eb0 <siprintf+0x38>)
 8010e8a:	9107      	str	r1, [sp, #28]
 8010e8c:	9104      	str	r1, [sp, #16]
 8010e8e:	4909      	ldr	r1, [pc, #36]	@ (8010eb4 <siprintf+0x3c>)
 8010e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e94:	9105      	str	r1, [sp, #20]
 8010e96:	6800      	ldr	r0, [r0, #0]
 8010e98:	9301      	str	r3, [sp, #4]
 8010e9a:	a902      	add	r1, sp, #8
 8010e9c:	f002 f940 	bl	8013120 <_svfiprintf_r>
 8010ea0:	9b02      	ldr	r3, [sp, #8]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	701a      	strb	r2, [r3, #0]
 8010ea6:	b01c      	add	sp, #112	@ 0x70
 8010ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010eac:	b003      	add	sp, #12
 8010eae:	4770      	bx	lr
 8010eb0:	200001b0 	.word	0x200001b0
 8010eb4:	ffff0208 	.word	0xffff0208

08010eb8 <__sread>:
 8010eb8:	b510      	push	{r4, lr}
 8010eba:	460c      	mov	r4, r1
 8010ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ec0:	f000 f912 	bl	80110e8 <_read_r>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	bfab      	itete	ge
 8010ec8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010eca:	89a3      	ldrhlt	r3, [r4, #12]
 8010ecc:	181b      	addge	r3, r3, r0
 8010ece:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010ed2:	bfac      	ite	ge
 8010ed4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010ed6:	81a3      	strhlt	r3, [r4, #12]
 8010ed8:	bd10      	pop	{r4, pc}

08010eda <__swrite>:
 8010eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ede:	461f      	mov	r7, r3
 8010ee0:	898b      	ldrh	r3, [r1, #12]
 8010ee2:	05db      	lsls	r3, r3, #23
 8010ee4:	4605      	mov	r5, r0
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	4616      	mov	r6, r2
 8010eea:	d505      	bpl.n	8010ef8 <__swrite+0x1e>
 8010eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ef0:	2302      	movs	r3, #2
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	f000 f8e6 	bl	80110c4 <_lseek_r>
 8010ef8:	89a3      	ldrh	r3, [r4, #12]
 8010efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010efe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f02:	81a3      	strh	r3, [r4, #12]
 8010f04:	4632      	mov	r2, r6
 8010f06:	463b      	mov	r3, r7
 8010f08:	4628      	mov	r0, r5
 8010f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f0e:	f000 b90d 	b.w	801112c <_write_r>

08010f12 <__sseek>:
 8010f12:	b510      	push	{r4, lr}
 8010f14:	460c      	mov	r4, r1
 8010f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f1a:	f000 f8d3 	bl	80110c4 <_lseek_r>
 8010f1e:	1c43      	adds	r3, r0, #1
 8010f20:	89a3      	ldrh	r3, [r4, #12]
 8010f22:	bf15      	itete	ne
 8010f24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010f26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010f2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010f2e:	81a3      	strheq	r3, [r4, #12]
 8010f30:	bf18      	it	ne
 8010f32:	81a3      	strhne	r3, [r4, #12]
 8010f34:	bd10      	pop	{r4, pc}

08010f36 <__sclose>:
 8010f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f3a:	f000 b8b3 	b.w	80110a4 <_close_r>

08010f3e <__swbuf_r>:
 8010f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f40:	460e      	mov	r6, r1
 8010f42:	4614      	mov	r4, r2
 8010f44:	4605      	mov	r5, r0
 8010f46:	b118      	cbz	r0, 8010f50 <__swbuf_r+0x12>
 8010f48:	6a03      	ldr	r3, [r0, #32]
 8010f4a:	b90b      	cbnz	r3, 8010f50 <__swbuf_r+0x12>
 8010f4c:	f7ff feee 	bl	8010d2c <__sinit>
 8010f50:	69a3      	ldr	r3, [r4, #24]
 8010f52:	60a3      	str	r3, [r4, #8]
 8010f54:	89a3      	ldrh	r3, [r4, #12]
 8010f56:	071a      	lsls	r2, r3, #28
 8010f58:	d501      	bpl.n	8010f5e <__swbuf_r+0x20>
 8010f5a:	6923      	ldr	r3, [r4, #16]
 8010f5c:	b943      	cbnz	r3, 8010f70 <__swbuf_r+0x32>
 8010f5e:	4621      	mov	r1, r4
 8010f60:	4628      	mov	r0, r5
 8010f62:	f000 f82b 	bl	8010fbc <__swsetup_r>
 8010f66:	b118      	cbz	r0, 8010f70 <__swbuf_r+0x32>
 8010f68:	f04f 37ff 	mov.w	r7, #4294967295
 8010f6c:	4638      	mov	r0, r7
 8010f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f70:	6823      	ldr	r3, [r4, #0]
 8010f72:	6922      	ldr	r2, [r4, #16]
 8010f74:	1a98      	subs	r0, r3, r2
 8010f76:	6963      	ldr	r3, [r4, #20]
 8010f78:	b2f6      	uxtb	r6, r6
 8010f7a:	4283      	cmp	r3, r0
 8010f7c:	4637      	mov	r7, r6
 8010f7e:	dc05      	bgt.n	8010f8c <__swbuf_r+0x4e>
 8010f80:	4621      	mov	r1, r4
 8010f82:	4628      	mov	r0, r5
 8010f84:	f002 fb8e 	bl	80136a4 <_fflush_r>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d1ed      	bne.n	8010f68 <__swbuf_r+0x2a>
 8010f8c:	68a3      	ldr	r3, [r4, #8]
 8010f8e:	3b01      	subs	r3, #1
 8010f90:	60a3      	str	r3, [r4, #8]
 8010f92:	6823      	ldr	r3, [r4, #0]
 8010f94:	1c5a      	adds	r2, r3, #1
 8010f96:	6022      	str	r2, [r4, #0]
 8010f98:	701e      	strb	r6, [r3, #0]
 8010f9a:	6962      	ldr	r2, [r4, #20]
 8010f9c:	1c43      	adds	r3, r0, #1
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d004      	beq.n	8010fac <__swbuf_r+0x6e>
 8010fa2:	89a3      	ldrh	r3, [r4, #12]
 8010fa4:	07db      	lsls	r3, r3, #31
 8010fa6:	d5e1      	bpl.n	8010f6c <__swbuf_r+0x2e>
 8010fa8:	2e0a      	cmp	r6, #10
 8010faa:	d1df      	bne.n	8010f6c <__swbuf_r+0x2e>
 8010fac:	4621      	mov	r1, r4
 8010fae:	4628      	mov	r0, r5
 8010fb0:	f002 fb78 	bl	80136a4 <_fflush_r>
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	d0d9      	beq.n	8010f6c <__swbuf_r+0x2e>
 8010fb8:	e7d6      	b.n	8010f68 <__swbuf_r+0x2a>
	...

08010fbc <__swsetup_r>:
 8010fbc:	b538      	push	{r3, r4, r5, lr}
 8010fbe:	4b29      	ldr	r3, [pc, #164]	@ (8011064 <__swsetup_r+0xa8>)
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	6818      	ldr	r0, [r3, #0]
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	b118      	cbz	r0, 8010fd0 <__swsetup_r+0x14>
 8010fc8:	6a03      	ldr	r3, [r0, #32]
 8010fca:	b90b      	cbnz	r3, 8010fd0 <__swsetup_r+0x14>
 8010fcc:	f7ff feae 	bl	8010d2c <__sinit>
 8010fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fd4:	0719      	lsls	r1, r3, #28
 8010fd6:	d422      	bmi.n	801101e <__swsetup_r+0x62>
 8010fd8:	06da      	lsls	r2, r3, #27
 8010fda:	d407      	bmi.n	8010fec <__swsetup_r+0x30>
 8010fdc:	2209      	movs	r2, #9
 8010fde:	602a      	str	r2, [r5, #0]
 8010fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fe4:	81a3      	strh	r3, [r4, #12]
 8010fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8010fea:	e033      	b.n	8011054 <__swsetup_r+0x98>
 8010fec:	0758      	lsls	r0, r3, #29
 8010fee:	d512      	bpl.n	8011016 <__swsetup_r+0x5a>
 8010ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ff2:	b141      	cbz	r1, 8011006 <__swsetup_r+0x4a>
 8010ff4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ff8:	4299      	cmp	r1, r3
 8010ffa:	d002      	beq.n	8011002 <__swsetup_r+0x46>
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f000 ff5b 	bl	8011eb8 <_free_r>
 8011002:	2300      	movs	r3, #0
 8011004:	6363      	str	r3, [r4, #52]	@ 0x34
 8011006:	89a3      	ldrh	r3, [r4, #12]
 8011008:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801100c:	81a3      	strh	r3, [r4, #12]
 801100e:	2300      	movs	r3, #0
 8011010:	6063      	str	r3, [r4, #4]
 8011012:	6923      	ldr	r3, [r4, #16]
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	89a3      	ldrh	r3, [r4, #12]
 8011018:	f043 0308 	orr.w	r3, r3, #8
 801101c:	81a3      	strh	r3, [r4, #12]
 801101e:	6923      	ldr	r3, [r4, #16]
 8011020:	b94b      	cbnz	r3, 8011036 <__swsetup_r+0x7a>
 8011022:	89a3      	ldrh	r3, [r4, #12]
 8011024:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801102c:	d003      	beq.n	8011036 <__swsetup_r+0x7a>
 801102e:	4621      	mov	r1, r4
 8011030:	4628      	mov	r0, r5
 8011032:	f002 fb97 	bl	8013764 <__smakebuf_r>
 8011036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801103a:	f013 0201 	ands.w	r2, r3, #1
 801103e:	d00a      	beq.n	8011056 <__swsetup_r+0x9a>
 8011040:	2200      	movs	r2, #0
 8011042:	60a2      	str	r2, [r4, #8]
 8011044:	6962      	ldr	r2, [r4, #20]
 8011046:	4252      	negs	r2, r2
 8011048:	61a2      	str	r2, [r4, #24]
 801104a:	6922      	ldr	r2, [r4, #16]
 801104c:	b942      	cbnz	r2, 8011060 <__swsetup_r+0xa4>
 801104e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011052:	d1c5      	bne.n	8010fe0 <__swsetup_r+0x24>
 8011054:	bd38      	pop	{r3, r4, r5, pc}
 8011056:	0799      	lsls	r1, r3, #30
 8011058:	bf58      	it	pl
 801105a:	6962      	ldrpl	r2, [r4, #20]
 801105c:	60a2      	str	r2, [r4, #8]
 801105e:	e7f4      	b.n	801104a <__swsetup_r+0x8e>
 8011060:	2000      	movs	r0, #0
 8011062:	e7f7      	b.n	8011054 <__swsetup_r+0x98>
 8011064:	200001b0 	.word	0x200001b0

08011068 <memset>:
 8011068:	4402      	add	r2, r0
 801106a:	4603      	mov	r3, r0
 801106c:	4293      	cmp	r3, r2
 801106e:	d100      	bne.n	8011072 <memset+0xa>
 8011070:	4770      	bx	lr
 8011072:	f803 1b01 	strb.w	r1, [r3], #1
 8011076:	e7f9      	b.n	801106c <memset+0x4>

08011078 <strncmp>:
 8011078:	b510      	push	{r4, lr}
 801107a:	b16a      	cbz	r2, 8011098 <strncmp+0x20>
 801107c:	3901      	subs	r1, #1
 801107e:	1884      	adds	r4, r0, r2
 8011080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011084:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011088:	429a      	cmp	r2, r3
 801108a:	d103      	bne.n	8011094 <strncmp+0x1c>
 801108c:	42a0      	cmp	r0, r4
 801108e:	d001      	beq.n	8011094 <strncmp+0x1c>
 8011090:	2a00      	cmp	r2, #0
 8011092:	d1f5      	bne.n	8011080 <strncmp+0x8>
 8011094:	1ad0      	subs	r0, r2, r3
 8011096:	bd10      	pop	{r4, pc}
 8011098:	4610      	mov	r0, r2
 801109a:	e7fc      	b.n	8011096 <strncmp+0x1e>

0801109c <_localeconv_r>:
 801109c:	4800      	ldr	r0, [pc, #0]	@ (80110a0 <_localeconv_r+0x4>)
 801109e:	4770      	bx	lr
 80110a0:	20000134 	.word	0x20000134

080110a4 <_close_r>:
 80110a4:	b538      	push	{r3, r4, r5, lr}
 80110a6:	4d06      	ldr	r5, [pc, #24]	@ (80110c0 <_close_r+0x1c>)
 80110a8:	2300      	movs	r3, #0
 80110aa:	4604      	mov	r4, r0
 80110ac:	4608      	mov	r0, r1
 80110ae:	602b      	str	r3, [r5, #0]
 80110b0:	f7f3 fa5a 	bl	8004568 <_close>
 80110b4:	1c43      	adds	r3, r0, #1
 80110b6:	d102      	bne.n	80110be <_close_r+0x1a>
 80110b8:	682b      	ldr	r3, [r5, #0]
 80110ba:	b103      	cbz	r3, 80110be <_close_r+0x1a>
 80110bc:	6023      	str	r3, [r4, #0]
 80110be:	bd38      	pop	{r3, r4, r5, pc}
 80110c0:	20000a38 	.word	0x20000a38

080110c4 <_lseek_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	4d07      	ldr	r5, [pc, #28]	@ (80110e4 <_lseek_r+0x20>)
 80110c8:	4604      	mov	r4, r0
 80110ca:	4608      	mov	r0, r1
 80110cc:	4611      	mov	r1, r2
 80110ce:	2200      	movs	r2, #0
 80110d0:	602a      	str	r2, [r5, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	f7f3 fa6f 	bl	80045b6 <_lseek>
 80110d8:	1c43      	adds	r3, r0, #1
 80110da:	d102      	bne.n	80110e2 <_lseek_r+0x1e>
 80110dc:	682b      	ldr	r3, [r5, #0]
 80110de:	b103      	cbz	r3, 80110e2 <_lseek_r+0x1e>
 80110e0:	6023      	str	r3, [r4, #0]
 80110e2:	bd38      	pop	{r3, r4, r5, pc}
 80110e4:	20000a38 	.word	0x20000a38

080110e8 <_read_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4d07      	ldr	r5, [pc, #28]	@ (8011108 <_read_r+0x20>)
 80110ec:	4604      	mov	r4, r0
 80110ee:	4608      	mov	r0, r1
 80110f0:	4611      	mov	r1, r2
 80110f2:	2200      	movs	r2, #0
 80110f4:	602a      	str	r2, [r5, #0]
 80110f6:	461a      	mov	r2, r3
 80110f8:	f7f3 fa19 	bl	800452e <_read>
 80110fc:	1c43      	adds	r3, r0, #1
 80110fe:	d102      	bne.n	8011106 <_read_r+0x1e>
 8011100:	682b      	ldr	r3, [r5, #0]
 8011102:	b103      	cbz	r3, 8011106 <_read_r+0x1e>
 8011104:	6023      	str	r3, [r4, #0]
 8011106:	bd38      	pop	{r3, r4, r5, pc}
 8011108:	20000a38 	.word	0x20000a38

0801110c <_sbrk_r>:
 801110c:	b538      	push	{r3, r4, r5, lr}
 801110e:	4d06      	ldr	r5, [pc, #24]	@ (8011128 <_sbrk_r+0x1c>)
 8011110:	2300      	movs	r3, #0
 8011112:	4604      	mov	r4, r0
 8011114:	4608      	mov	r0, r1
 8011116:	602b      	str	r3, [r5, #0]
 8011118:	f7f3 fa5a 	bl	80045d0 <_sbrk>
 801111c:	1c43      	adds	r3, r0, #1
 801111e:	d102      	bne.n	8011126 <_sbrk_r+0x1a>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	b103      	cbz	r3, 8011126 <_sbrk_r+0x1a>
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	20000a38 	.word	0x20000a38

0801112c <_write_r>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	4d07      	ldr	r5, [pc, #28]	@ (801114c <_write_r+0x20>)
 8011130:	4604      	mov	r4, r0
 8011132:	4608      	mov	r0, r1
 8011134:	4611      	mov	r1, r2
 8011136:	2200      	movs	r2, #0
 8011138:	602a      	str	r2, [r5, #0]
 801113a:	461a      	mov	r2, r3
 801113c:	f7fc fd82 	bl	800dc44 <_write>
 8011140:	1c43      	adds	r3, r0, #1
 8011142:	d102      	bne.n	801114a <_write_r+0x1e>
 8011144:	682b      	ldr	r3, [r5, #0]
 8011146:	b103      	cbz	r3, 801114a <_write_r+0x1e>
 8011148:	6023      	str	r3, [r4, #0]
 801114a:	bd38      	pop	{r3, r4, r5, pc}
 801114c:	20000a38 	.word	0x20000a38

08011150 <__errno>:
 8011150:	4b01      	ldr	r3, [pc, #4]	@ (8011158 <__errno+0x8>)
 8011152:	6818      	ldr	r0, [r3, #0]
 8011154:	4770      	bx	lr
 8011156:	bf00      	nop
 8011158:	200001b0 	.word	0x200001b0

0801115c <__libc_init_array>:
 801115c:	b570      	push	{r4, r5, r6, lr}
 801115e:	4d0d      	ldr	r5, [pc, #52]	@ (8011194 <__libc_init_array+0x38>)
 8011160:	4c0d      	ldr	r4, [pc, #52]	@ (8011198 <__libc_init_array+0x3c>)
 8011162:	1b64      	subs	r4, r4, r5
 8011164:	10a4      	asrs	r4, r4, #2
 8011166:	2600      	movs	r6, #0
 8011168:	42a6      	cmp	r6, r4
 801116a:	d109      	bne.n	8011180 <__libc_init_array+0x24>
 801116c:	4d0b      	ldr	r5, [pc, #44]	@ (801119c <__libc_init_array+0x40>)
 801116e:	4c0c      	ldr	r4, [pc, #48]	@ (80111a0 <__libc_init_array+0x44>)
 8011170:	f002 fbbc 	bl	80138ec <_init>
 8011174:	1b64      	subs	r4, r4, r5
 8011176:	10a4      	asrs	r4, r4, #2
 8011178:	2600      	movs	r6, #0
 801117a:	42a6      	cmp	r6, r4
 801117c:	d105      	bne.n	801118a <__libc_init_array+0x2e>
 801117e:	bd70      	pop	{r4, r5, r6, pc}
 8011180:	f855 3b04 	ldr.w	r3, [r5], #4
 8011184:	4798      	blx	r3
 8011186:	3601      	adds	r6, #1
 8011188:	e7ee      	b.n	8011168 <__libc_init_array+0xc>
 801118a:	f855 3b04 	ldr.w	r3, [r5], #4
 801118e:	4798      	blx	r3
 8011190:	3601      	adds	r6, #1
 8011192:	e7f2      	b.n	801117a <__libc_init_array+0x1e>
 8011194:	080141a4 	.word	0x080141a4
 8011198:	080141a4 	.word	0x080141a4
 801119c:	080141a4 	.word	0x080141a4
 80111a0:	080141a8 	.word	0x080141a8

080111a4 <__retarget_lock_init_recursive>:
 80111a4:	4770      	bx	lr

080111a6 <__retarget_lock_acquire_recursive>:
 80111a6:	4770      	bx	lr

080111a8 <__retarget_lock_release_recursive>:
 80111a8:	4770      	bx	lr

080111aa <memcpy>:
 80111aa:	440a      	add	r2, r1
 80111ac:	4291      	cmp	r1, r2
 80111ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80111b2:	d100      	bne.n	80111b6 <memcpy+0xc>
 80111b4:	4770      	bx	lr
 80111b6:	b510      	push	{r4, lr}
 80111b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111c0:	4291      	cmp	r1, r2
 80111c2:	d1f9      	bne.n	80111b8 <memcpy+0xe>
 80111c4:	bd10      	pop	{r4, pc}
	...

080111c8 <nan>:
 80111c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80111d0 <nan+0x8>
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop
 80111d0:	00000000 	.word	0x00000000
 80111d4:	7ff80000 	.word	0x7ff80000

080111d8 <nanf>:
 80111d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80111e0 <nanf+0x8>
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop
 80111e0:	7fc00000 	.word	0x7fc00000

080111e4 <__assert_func>:
 80111e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111e6:	4614      	mov	r4, r2
 80111e8:	461a      	mov	r2, r3
 80111ea:	4b09      	ldr	r3, [pc, #36]	@ (8011210 <__assert_func+0x2c>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4605      	mov	r5, r0
 80111f0:	68d8      	ldr	r0, [r3, #12]
 80111f2:	b954      	cbnz	r4, 801120a <__assert_func+0x26>
 80111f4:	4b07      	ldr	r3, [pc, #28]	@ (8011214 <__assert_func+0x30>)
 80111f6:	461c      	mov	r4, r3
 80111f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111fc:	9100      	str	r1, [sp, #0]
 80111fe:	462b      	mov	r3, r5
 8011200:	4905      	ldr	r1, [pc, #20]	@ (8011218 <__assert_func+0x34>)
 8011202:	f002 fa77 	bl	80136f4 <fiprintf>
 8011206:	f002 fb25 	bl	8013854 <abort>
 801120a:	4b04      	ldr	r3, [pc, #16]	@ (801121c <__assert_func+0x38>)
 801120c:	e7f4      	b.n	80111f8 <__assert_func+0x14>
 801120e:	bf00      	nop
 8011210:	200001b0 	.word	0x200001b0
 8011214:	08013f45 	.word	0x08013f45
 8011218:	08013f17 	.word	0x08013f17
 801121c:	08013f0a 	.word	0x08013f0a

08011220 <quorem>:
 8011220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	6903      	ldr	r3, [r0, #16]
 8011226:	690c      	ldr	r4, [r1, #16]
 8011228:	42a3      	cmp	r3, r4
 801122a:	4607      	mov	r7, r0
 801122c:	db7e      	blt.n	801132c <quorem+0x10c>
 801122e:	3c01      	subs	r4, #1
 8011230:	f101 0814 	add.w	r8, r1, #20
 8011234:	00a3      	lsls	r3, r4, #2
 8011236:	f100 0514 	add.w	r5, r0, #20
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011240:	9301      	str	r3, [sp, #4]
 8011242:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011246:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801124a:	3301      	adds	r3, #1
 801124c:	429a      	cmp	r2, r3
 801124e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011252:	fbb2 f6f3 	udiv	r6, r2, r3
 8011256:	d32e      	bcc.n	80112b6 <quorem+0x96>
 8011258:	f04f 0a00 	mov.w	sl, #0
 801125c:	46c4      	mov	ip, r8
 801125e:	46ae      	mov	lr, r5
 8011260:	46d3      	mov	fp, sl
 8011262:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011266:	b298      	uxth	r0, r3
 8011268:	fb06 a000 	mla	r0, r6, r0, sl
 801126c:	0c02      	lsrs	r2, r0, #16
 801126e:	0c1b      	lsrs	r3, r3, #16
 8011270:	fb06 2303 	mla	r3, r6, r3, r2
 8011274:	f8de 2000 	ldr.w	r2, [lr]
 8011278:	b280      	uxth	r0, r0
 801127a:	b292      	uxth	r2, r2
 801127c:	1a12      	subs	r2, r2, r0
 801127e:	445a      	add	r2, fp
 8011280:	f8de 0000 	ldr.w	r0, [lr]
 8011284:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011288:	b29b      	uxth	r3, r3
 801128a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801128e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011292:	b292      	uxth	r2, r2
 8011294:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011298:	45e1      	cmp	r9, ip
 801129a:	f84e 2b04 	str.w	r2, [lr], #4
 801129e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80112a2:	d2de      	bcs.n	8011262 <quorem+0x42>
 80112a4:	9b00      	ldr	r3, [sp, #0]
 80112a6:	58eb      	ldr	r3, [r5, r3]
 80112a8:	b92b      	cbnz	r3, 80112b6 <quorem+0x96>
 80112aa:	9b01      	ldr	r3, [sp, #4]
 80112ac:	3b04      	subs	r3, #4
 80112ae:	429d      	cmp	r5, r3
 80112b0:	461a      	mov	r2, r3
 80112b2:	d32f      	bcc.n	8011314 <quorem+0xf4>
 80112b4:	613c      	str	r4, [r7, #16]
 80112b6:	4638      	mov	r0, r7
 80112b8:	f001 fc58 	bl	8012b6c <__mcmp>
 80112bc:	2800      	cmp	r0, #0
 80112be:	db25      	blt.n	801130c <quorem+0xec>
 80112c0:	4629      	mov	r1, r5
 80112c2:	2000      	movs	r0, #0
 80112c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80112c8:	f8d1 c000 	ldr.w	ip, [r1]
 80112cc:	fa1f fe82 	uxth.w	lr, r2
 80112d0:	fa1f f38c 	uxth.w	r3, ip
 80112d4:	eba3 030e 	sub.w	r3, r3, lr
 80112d8:	4403      	add	r3, r0
 80112da:	0c12      	lsrs	r2, r2, #16
 80112dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80112e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112ea:	45c1      	cmp	r9, r8
 80112ec:	f841 3b04 	str.w	r3, [r1], #4
 80112f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80112f4:	d2e6      	bcs.n	80112c4 <quorem+0xa4>
 80112f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112fe:	b922      	cbnz	r2, 801130a <quorem+0xea>
 8011300:	3b04      	subs	r3, #4
 8011302:	429d      	cmp	r5, r3
 8011304:	461a      	mov	r2, r3
 8011306:	d30b      	bcc.n	8011320 <quorem+0x100>
 8011308:	613c      	str	r4, [r7, #16]
 801130a:	3601      	adds	r6, #1
 801130c:	4630      	mov	r0, r6
 801130e:	b003      	add	sp, #12
 8011310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011314:	6812      	ldr	r2, [r2, #0]
 8011316:	3b04      	subs	r3, #4
 8011318:	2a00      	cmp	r2, #0
 801131a:	d1cb      	bne.n	80112b4 <quorem+0x94>
 801131c:	3c01      	subs	r4, #1
 801131e:	e7c6      	b.n	80112ae <quorem+0x8e>
 8011320:	6812      	ldr	r2, [r2, #0]
 8011322:	3b04      	subs	r3, #4
 8011324:	2a00      	cmp	r2, #0
 8011326:	d1ef      	bne.n	8011308 <quorem+0xe8>
 8011328:	3c01      	subs	r4, #1
 801132a:	e7ea      	b.n	8011302 <quorem+0xe2>
 801132c:	2000      	movs	r0, #0
 801132e:	e7ee      	b.n	801130e <quorem+0xee>

08011330 <_dtoa_r>:
 8011330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011334:	69c7      	ldr	r7, [r0, #28]
 8011336:	b099      	sub	sp, #100	@ 0x64
 8011338:	ed8d 0b02 	vstr	d0, [sp, #8]
 801133c:	ec55 4b10 	vmov	r4, r5, d0
 8011340:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011342:	9109      	str	r1, [sp, #36]	@ 0x24
 8011344:	4683      	mov	fp, r0
 8011346:	920e      	str	r2, [sp, #56]	@ 0x38
 8011348:	9313      	str	r3, [sp, #76]	@ 0x4c
 801134a:	b97f      	cbnz	r7, 801136c <_dtoa_r+0x3c>
 801134c:	2010      	movs	r0, #16
 801134e:	f7fd feed 	bl	800f12c <malloc>
 8011352:	4602      	mov	r2, r0
 8011354:	f8cb 001c 	str.w	r0, [fp, #28]
 8011358:	b920      	cbnz	r0, 8011364 <_dtoa_r+0x34>
 801135a:	4ba7      	ldr	r3, [pc, #668]	@ (80115f8 <_dtoa_r+0x2c8>)
 801135c:	21ef      	movs	r1, #239	@ 0xef
 801135e:	48a7      	ldr	r0, [pc, #668]	@ (80115fc <_dtoa_r+0x2cc>)
 8011360:	f7ff ff40 	bl	80111e4 <__assert_func>
 8011364:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011368:	6007      	str	r7, [r0, #0]
 801136a:	60c7      	str	r7, [r0, #12]
 801136c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011370:	6819      	ldr	r1, [r3, #0]
 8011372:	b159      	cbz	r1, 801138c <_dtoa_r+0x5c>
 8011374:	685a      	ldr	r2, [r3, #4]
 8011376:	604a      	str	r2, [r1, #4]
 8011378:	2301      	movs	r3, #1
 801137a:	4093      	lsls	r3, r2
 801137c:	608b      	str	r3, [r1, #8]
 801137e:	4658      	mov	r0, fp
 8011380:	f001 f970 	bl	8012664 <_Bfree>
 8011384:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011388:	2200      	movs	r2, #0
 801138a:	601a      	str	r2, [r3, #0]
 801138c:	1e2b      	subs	r3, r5, #0
 801138e:	bfb9      	ittee	lt
 8011390:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011394:	9303      	strlt	r3, [sp, #12]
 8011396:	2300      	movge	r3, #0
 8011398:	6033      	strge	r3, [r6, #0]
 801139a:	9f03      	ldr	r7, [sp, #12]
 801139c:	4b98      	ldr	r3, [pc, #608]	@ (8011600 <_dtoa_r+0x2d0>)
 801139e:	bfbc      	itt	lt
 80113a0:	2201      	movlt	r2, #1
 80113a2:	6032      	strlt	r2, [r6, #0]
 80113a4:	43bb      	bics	r3, r7
 80113a6:	d112      	bne.n	80113ce <_dtoa_r+0x9e>
 80113a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80113aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80113ae:	6013      	str	r3, [r2, #0]
 80113b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80113b4:	4323      	orrs	r3, r4
 80113b6:	f000 854d 	beq.w	8011e54 <_dtoa_r+0xb24>
 80113ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80113bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011614 <_dtoa_r+0x2e4>
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f000 854f 	beq.w	8011e64 <_dtoa_r+0xb34>
 80113c6:	f10a 0303 	add.w	r3, sl, #3
 80113ca:	f000 bd49 	b.w	8011e60 <_dtoa_r+0xb30>
 80113ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113d2:	2200      	movs	r2, #0
 80113d4:	ec51 0b17 	vmov	r0, r1, d7
 80113d8:	2300      	movs	r3, #0
 80113da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80113de:	f7ef fb5b 	bl	8000a98 <__aeabi_dcmpeq>
 80113e2:	4680      	mov	r8, r0
 80113e4:	b158      	cbz	r0, 80113fe <_dtoa_r+0xce>
 80113e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80113e8:	2301      	movs	r3, #1
 80113ea:	6013      	str	r3, [r2, #0]
 80113ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80113ee:	b113      	cbz	r3, 80113f6 <_dtoa_r+0xc6>
 80113f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80113f2:	4b84      	ldr	r3, [pc, #528]	@ (8011604 <_dtoa_r+0x2d4>)
 80113f4:	6013      	str	r3, [r2, #0]
 80113f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011618 <_dtoa_r+0x2e8>
 80113fa:	f000 bd33 	b.w	8011e64 <_dtoa_r+0xb34>
 80113fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011402:	aa16      	add	r2, sp, #88	@ 0x58
 8011404:	a917      	add	r1, sp, #92	@ 0x5c
 8011406:	4658      	mov	r0, fp
 8011408:	f001 fcd0 	bl	8012dac <__d2b>
 801140c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011410:	4681      	mov	r9, r0
 8011412:	2e00      	cmp	r6, #0
 8011414:	d077      	beq.n	8011506 <_dtoa_r+0x1d6>
 8011416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011418:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801141c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011424:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011428:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801142c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011430:	4619      	mov	r1, r3
 8011432:	2200      	movs	r2, #0
 8011434:	4b74      	ldr	r3, [pc, #464]	@ (8011608 <_dtoa_r+0x2d8>)
 8011436:	f7ee ff0f 	bl	8000258 <__aeabi_dsub>
 801143a:	a369      	add	r3, pc, #420	@ (adr r3, 80115e0 <_dtoa_r+0x2b0>)
 801143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011440:	f7ef f8c2 	bl	80005c8 <__aeabi_dmul>
 8011444:	a368      	add	r3, pc, #416	@ (adr r3, 80115e8 <_dtoa_r+0x2b8>)
 8011446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144a:	f7ee ff07 	bl	800025c <__adddf3>
 801144e:	4604      	mov	r4, r0
 8011450:	4630      	mov	r0, r6
 8011452:	460d      	mov	r5, r1
 8011454:	f7ef f84e 	bl	80004f4 <__aeabi_i2d>
 8011458:	a365      	add	r3, pc, #404	@ (adr r3, 80115f0 <_dtoa_r+0x2c0>)
 801145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145e:	f7ef f8b3 	bl	80005c8 <__aeabi_dmul>
 8011462:	4602      	mov	r2, r0
 8011464:	460b      	mov	r3, r1
 8011466:	4620      	mov	r0, r4
 8011468:	4629      	mov	r1, r5
 801146a:	f7ee fef7 	bl	800025c <__adddf3>
 801146e:	4604      	mov	r4, r0
 8011470:	460d      	mov	r5, r1
 8011472:	f7ef fb59 	bl	8000b28 <__aeabi_d2iz>
 8011476:	2200      	movs	r2, #0
 8011478:	4607      	mov	r7, r0
 801147a:	2300      	movs	r3, #0
 801147c:	4620      	mov	r0, r4
 801147e:	4629      	mov	r1, r5
 8011480:	f7ef fb14 	bl	8000aac <__aeabi_dcmplt>
 8011484:	b140      	cbz	r0, 8011498 <_dtoa_r+0x168>
 8011486:	4638      	mov	r0, r7
 8011488:	f7ef f834 	bl	80004f4 <__aeabi_i2d>
 801148c:	4622      	mov	r2, r4
 801148e:	462b      	mov	r3, r5
 8011490:	f7ef fb02 	bl	8000a98 <__aeabi_dcmpeq>
 8011494:	b900      	cbnz	r0, 8011498 <_dtoa_r+0x168>
 8011496:	3f01      	subs	r7, #1
 8011498:	2f16      	cmp	r7, #22
 801149a:	d851      	bhi.n	8011540 <_dtoa_r+0x210>
 801149c:	4b5b      	ldr	r3, [pc, #364]	@ (801160c <_dtoa_r+0x2dc>)
 801149e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80114a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114aa:	f7ef faff 	bl	8000aac <__aeabi_dcmplt>
 80114ae:	2800      	cmp	r0, #0
 80114b0:	d048      	beq.n	8011544 <_dtoa_r+0x214>
 80114b2:	3f01      	subs	r7, #1
 80114b4:	2300      	movs	r3, #0
 80114b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80114b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80114ba:	1b9b      	subs	r3, r3, r6
 80114bc:	1e5a      	subs	r2, r3, #1
 80114be:	bf44      	itt	mi
 80114c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80114c4:	2300      	movmi	r3, #0
 80114c6:	9208      	str	r2, [sp, #32]
 80114c8:	bf54      	ite	pl
 80114ca:	f04f 0800 	movpl.w	r8, #0
 80114ce:	9308      	strmi	r3, [sp, #32]
 80114d0:	2f00      	cmp	r7, #0
 80114d2:	db39      	blt.n	8011548 <_dtoa_r+0x218>
 80114d4:	9b08      	ldr	r3, [sp, #32]
 80114d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80114d8:	443b      	add	r3, r7
 80114da:	9308      	str	r3, [sp, #32]
 80114dc:	2300      	movs	r3, #0
 80114de:	930a      	str	r3, [sp, #40]	@ 0x28
 80114e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114e2:	2b09      	cmp	r3, #9
 80114e4:	d864      	bhi.n	80115b0 <_dtoa_r+0x280>
 80114e6:	2b05      	cmp	r3, #5
 80114e8:	bfc4      	itt	gt
 80114ea:	3b04      	subgt	r3, #4
 80114ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80114ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114f0:	f1a3 0302 	sub.w	r3, r3, #2
 80114f4:	bfcc      	ite	gt
 80114f6:	2400      	movgt	r4, #0
 80114f8:	2401      	movle	r4, #1
 80114fa:	2b03      	cmp	r3, #3
 80114fc:	d863      	bhi.n	80115c6 <_dtoa_r+0x296>
 80114fe:	e8df f003 	tbb	[pc, r3]
 8011502:	372a      	.short	0x372a
 8011504:	5535      	.short	0x5535
 8011506:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801150a:	441e      	add	r6, r3
 801150c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011510:	2b20      	cmp	r3, #32
 8011512:	bfc1      	itttt	gt
 8011514:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011518:	409f      	lslgt	r7, r3
 801151a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801151e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011522:	bfd6      	itet	le
 8011524:	f1c3 0320 	rsble	r3, r3, #32
 8011528:	ea47 0003 	orrgt.w	r0, r7, r3
 801152c:	fa04 f003 	lslle.w	r0, r4, r3
 8011530:	f7ee ffd0 	bl	80004d4 <__aeabi_ui2d>
 8011534:	2201      	movs	r2, #1
 8011536:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801153a:	3e01      	subs	r6, #1
 801153c:	9214      	str	r2, [sp, #80]	@ 0x50
 801153e:	e777      	b.n	8011430 <_dtoa_r+0x100>
 8011540:	2301      	movs	r3, #1
 8011542:	e7b8      	b.n	80114b6 <_dtoa_r+0x186>
 8011544:	9012      	str	r0, [sp, #72]	@ 0x48
 8011546:	e7b7      	b.n	80114b8 <_dtoa_r+0x188>
 8011548:	427b      	negs	r3, r7
 801154a:	930a      	str	r3, [sp, #40]	@ 0x28
 801154c:	2300      	movs	r3, #0
 801154e:	eba8 0807 	sub.w	r8, r8, r7
 8011552:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011554:	e7c4      	b.n	80114e0 <_dtoa_r+0x1b0>
 8011556:	2300      	movs	r3, #0
 8011558:	930b      	str	r3, [sp, #44]	@ 0x2c
 801155a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801155c:	2b00      	cmp	r3, #0
 801155e:	dc35      	bgt.n	80115cc <_dtoa_r+0x29c>
 8011560:	2301      	movs	r3, #1
 8011562:	9300      	str	r3, [sp, #0]
 8011564:	9307      	str	r3, [sp, #28]
 8011566:	461a      	mov	r2, r3
 8011568:	920e      	str	r2, [sp, #56]	@ 0x38
 801156a:	e00b      	b.n	8011584 <_dtoa_r+0x254>
 801156c:	2301      	movs	r3, #1
 801156e:	e7f3      	b.n	8011558 <_dtoa_r+0x228>
 8011570:	2300      	movs	r3, #0
 8011572:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011576:	18fb      	adds	r3, r7, r3
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	3301      	adds	r3, #1
 801157c:	2b01      	cmp	r3, #1
 801157e:	9307      	str	r3, [sp, #28]
 8011580:	bfb8      	it	lt
 8011582:	2301      	movlt	r3, #1
 8011584:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011588:	2100      	movs	r1, #0
 801158a:	2204      	movs	r2, #4
 801158c:	f102 0514 	add.w	r5, r2, #20
 8011590:	429d      	cmp	r5, r3
 8011592:	d91f      	bls.n	80115d4 <_dtoa_r+0x2a4>
 8011594:	6041      	str	r1, [r0, #4]
 8011596:	4658      	mov	r0, fp
 8011598:	f001 f824 	bl	80125e4 <_Balloc>
 801159c:	4682      	mov	sl, r0
 801159e:	2800      	cmp	r0, #0
 80115a0:	d13c      	bne.n	801161c <_dtoa_r+0x2ec>
 80115a2:	4b1b      	ldr	r3, [pc, #108]	@ (8011610 <_dtoa_r+0x2e0>)
 80115a4:	4602      	mov	r2, r0
 80115a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80115aa:	e6d8      	b.n	801135e <_dtoa_r+0x2e>
 80115ac:	2301      	movs	r3, #1
 80115ae:	e7e0      	b.n	8011572 <_dtoa_r+0x242>
 80115b0:	2401      	movs	r4, #1
 80115b2:	2300      	movs	r3, #0
 80115b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80115b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80115b8:	f04f 33ff 	mov.w	r3, #4294967295
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	9307      	str	r3, [sp, #28]
 80115c0:	2200      	movs	r2, #0
 80115c2:	2312      	movs	r3, #18
 80115c4:	e7d0      	b.n	8011568 <_dtoa_r+0x238>
 80115c6:	2301      	movs	r3, #1
 80115c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80115ca:	e7f5      	b.n	80115b8 <_dtoa_r+0x288>
 80115cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115ce:	9300      	str	r3, [sp, #0]
 80115d0:	9307      	str	r3, [sp, #28]
 80115d2:	e7d7      	b.n	8011584 <_dtoa_r+0x254>
 80115d4:	3101      	adds	r1, #1
 80115d6:	0052      	lsls	r2, r2, #1
 80115d8:	e7d8      	b.n	801158c <_dtoa_r+0x25c>
 80115da:	bf00      	nop
 80115dc:	f3af 8000 	nop.w
 80115e0:	636f4361 	.word	0x636f4361
 80115e4:	3fd287a7 	.word	0x3fd287a7
 80115e8:	8b60c8b3 	.word	0x8b60c8b3
 80115ec:	3fc68a28 	.word	0x3fc68a28
 80115f0:	509f79fb 	.word	0x509f79fb
 80115f4:	3fd34413 	.word	0x3fd34413
 80115f8:	08013f53 	.word	0x08013f53
 80115fc:	08013f6a 	.word	0x08013f6a
 8011600:	7ff00000 	.word	0x7ff00000
 8011604:	08013eda 	.word	0x08013eda
 8011608:	3ff80000 	.word	0x3ff80000
 801160c:	080140c0 	.word	0x080140c0
 8011610:	08013fc2 	.word	0x08013fc2
 8011614:	08013f4f 	.word	0x08013f4f
 8011618:	08013ed9 	.word	0x08013ed9
 801161c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011620:	6018      	str	r0, [r3, #0]
 8011622:	9b07      	ldr	r3, [sp, #28]
 8011624:	2b0e      	cmp	r3, #14
 8011626:	f200 80a4 	bhi.w	8011772 <_dtoa_r+0x442>
 801162a:	2c00      	cmp	r4, #0
 801162c:	f000 80a1 	beq.w	8011772 <_dtoa_r+0x442>
 8011630:	2f00      	cmp	r7, #0
 8011632:	dd33      	ble.n	801169c <_dtoa_r+0x36c>
 8011634:	4bad      	ldr	r3, [pc, #692]	@ (80118ec <_dtoa_r+0x5bc>)
 8011636:	f007 020f 	and.w	r2, r7, #15
 801163a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801163e:	ed93 7b00 	vldr	d7, [r3]
 8011642:	05f8      	lsls	r0, r7, #23
 8011644:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011648:	ea4f 1427 	mov.w	r4, r7, asr #4
 801164c:	d516      	bpl.n	801167c <_dtoa_r+0x34c>
 801164e:	4ba8      	ldr	r3, [pc, #672]	@ (80118f0 <_dtoa_r+0x5c0>)
 8011650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011658:	f7ef f8e0 	bl	800081c <__aeabi_ddiv>
 801165c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011660:	f004 040f 	and.w	r4, r4, #15
 8011664:	2603      	movs	r6, #3
 8011666:	4da2      	ldr	r5, [pc, #648]	@ (80118f0 <_dtoa_r+0x5c0>)
 8011668:	b954      	cbnz	r4, 8011680 <_dtoa_r+0x350>
 801166a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801166e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011672:	f7ef f8d3 	bl	800081c <__aeabi_ddiv>
 8011676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801167a:	e028      	b.n	80116ce <_dtoa_r+0x39e>
 801167c:	2602      	movs	r6, #2
 801167e:	e7f2      	b.n	8011666 <_dtoa_r+0x336>
 8011680:	07e1      	lsls	r1, r4, #31
 8011682:	d508      	bpl.n	8011696 <_dtoa_r+0x366>
 8011684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011688:	e9d5 2300 	ldrd	r2, r3, [r5]
 801168c:	f7ee ff9c 	bl	80005c8 <__aeabi_dmul>
 8011690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011694:	3601      	adds	r6, #1
 8011696:	1064      	asrs	r4, r4, #1
 8011698:	3508      	adds	r5, #8
 801169a:	e7e5      	b.n	8011668 <_dtoa_r+0x338>
 801169c:	f000 80d2 	beq.w	8011844 <_dtoa_r+0x514>
 80116a0:	427c      	negs	r4, r7
 80116a2:	4b92      	ldr	r3, [pc, #584]	@ (80118ec <_dtoa_r+0x5bc>)
 80116a4:	4d92      	ldr	r5, [pc, #584]	@ (80118f0 <_dtoa_r+0x5c0>)
 80116a6:	f004 020f 	and.w	r2, r4, #15
 80116aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80116b6:	f7ee ff87 	bl	80005c8 <__aeabi_dmul>
 80116ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116be:	1124      	asrs	r4, r4, #4
 80116c0:	2300      	movs	r3, #0
 80116c2:	2602      	movs	r6, #2
 80116c4:	2c00      	cmp	r4, #0
 80116c6:	f040 80b2 	bne.w	801182e <_dtoa_r+0x4fe>
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d1d3      	bne.n	8011676 <_dtoa_r+0x346>
 80116ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80116d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f000 80b7 	beq.w	8011848 <_dtoa_r+0x518>
 80116da:	4b86      	ldr	r3, [pc, #536]	@ (80118f4 <_dtoa_r+0x5c4>)
 80116dc:	2200      	movs	r2, #0
 80116de:	4620      	mov	r0, r4
 80116e0:	4629      	mov	r1, r5
 80116e2:	f7ef f9e3 	bl	8000aac <__aeabi_dcmplt>
 80116e6:	2800      	cmp	r0, #0
 80116e8:	f000 80ae 	beq.w	8011848 <_dtoa_r+0x518>
 80116ec:	9b07      	ldr	r3, [sp, #28]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f000 80aa 	beq.w	8011848 <_dtoa_r+0x518>
 80116f4:	9b00      	ldr	r3, [sp, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	dd37      	ble.n	801176a <_dtoa_r+0x43a>
 80116fa:	1e7b      	subs	r3, r7, #1
 80116fc:	9304      	str	r3, [sp, #16]
 80116fe:	4620      	mov	r0, r4
 8011700:	4b7d      	ldr	r3, [pc, #500]	@ (80118f8 <_dtoa_r+0x5c8>)
 8011702:	2200      	movs	r2, #0
 8011704:	4629      	mov	r1, r5
 8011706:	f7ee ff5f 	bl	80005c8 <__aeabi_dmul>
 801170a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801170e:	9c00      	ldr	r4, [sp, #0]
 8011710:	3601      	adds	r6, #1
 8011712:	4630      	mov	r0, r6
 8011714:	f7ee feee 	bl	80004f4 <__aeabi_i2d>
 8011718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801171c:	f7ee ff54 	bl	80005c8 <__aeabi_dmul>
 8011720:	4b76      	ldr	r3, [pc, #472]	@ (80118fc <_dtoa_r+0x5cc>)
 8011722:	2200      	movs	r2, #0
 8011724:	f7ee fd9a 	bl	800025c <__adddf3>
 8011728:	4605      	mov	r5, r0
 801172a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801172e:	2c00      	cmp	r4, #0
 8011730:	f040 808d 	bne.w	801184e <_dtoa_r+0x51e>
 8011734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011738:	4b71      	ldr	r3, [pc, #452]	@ (8011900 <_dtoa_r+0x5d0>)
 801173a:	2200      	movs	r2, #0
 801173c:	f7ee fd8c 	bl	8000258 <__aeabi_dsub>
 8011740:	4602      	mov	r2, r0
 8011742:	460b      	mov	r3, r1
 8011744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011748:	462a      	mov	r2, r5
 801174a:	4633      	mov	r3, r6
 801174c:	f7ef f9cc 	bl	8000ae8 <__aeabi_dcmpgt>
 8011750:	2800      	cmp	r0, #0
 8011752:	f040 828b 	bne.w	8011c6c <_dtoa_r+0x93c>
 8011756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801175a:	462a      	mov	r2, r5
 801175c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011760:	f7ef f9a4 	bl	8000aac <__aeabi_dcmplt>
 8011764:	2800      	cmp	r0, #0
 8011766:	f040 8128 	bne.w	80119ba <_dtoa_r+0x68a>
 801176a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801176e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011772:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011774:	2b00      	cmp	r3, #0
 8011776:	f2c0 815a 	blt.w	8011a2e <_dtoa_r+0x6fe>
 801177a:	2f0e      	cmp	r7, #14
 801177c:	f300 8157 	bgt.w	8011a2e <_dtoa_r+0x6fe>
 8011780:	4b5a      	ldr	r3, [pc, #360]	@ (80118ec <_dtoa_r+0x5bc>)
 8011782:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011786:	ed93 7b00 	vldr	d7, [r3]
 801178a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801178c:	2b00      	cmp	r3, #0
 801178e:	ed8d 7b00 	vstr	d7, [sp]
 8011792:	da03      	bge.n	801179c <_dtoa_r+0x46c>
 8011794:	9b07      	ldr	r3, [sp, #28]
 8011796:	2b00      	cmp	r3, #0
 8011798:	f340 8101 	ble.w	801199e <_dtoa_r+0x66e>
 801179c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80117a0:	4656      	mov	r6, sl
 80117a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117a6:	4620      	mov	r0, r4
 80117a8:	4629      	mov	r1, r5
 80117aa:	f7ef f837 	bl	800081c <__aeabi_ddiv>
 80117ae:	f7ef f9bb 	bl	8000b28 <__aeabi_d2iz>
 80117b2:	4680      	mov	r8, r0
 80117b4:	f7ee fe9e 	bl	80004f4 <__aeabi_i2d>
 80117b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117bc:	f7ee ff04 	bl	80005c8 <__aeabi_dmul>
 80117c0:	4602      	mov	r2, r0
 80117c2:	460b      	mov	r3, r1
 80117c4:	4620      	mov	r0, r4
 80117c6:	4629      	mov	r1, r5
 80117c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80117cc:	f7ee fd44 	bl	8000258 <__aeabi_dsub>
 80117d0:	f806 4b01 	strb.w	r4, [r6], #1
 80117d4:	9d07      	ldr	r5, [sp, #28]
 80117d6:	eba6 040a 	sub.w	r4, r6, sl
 80117da:	42a5      	cmp	r5, r4
 80117dc:	4602      	mov	r2, r0
 80117de:	460b      	mov	r3, r1
 80117e0:	f040 8117 	bne.w	8011a12 <_dtoa_r+0x6e2>
 80117e4:	f7ee fd3a 	bl	800025c <__adddf3>
 80117e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117ec:	4604      	mov	r4, r0
 80117ee:	460d      	mov	r5, r1
 80117f0:	f7ef f97a 	bl	8000ae8 <__aeabi_dcmpgt>
 80117f4:	2800      	cmp	r0, #0
 80117f6:	f040 80f9 	bne.w	80119ec <_dtoa_r+0x6bc>
 80117fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117fe:	4620      	mov	r0, r4
 8011800:	4629      	mov	r1, r5
 8011802:	f7ef f949 	bl	8000a98 <__aeabi_dcmpeq>
 8011806:	b118      	cbz	r0, 8011810 <_dtoa_r+0x4e0>
 8011808:	f018 0f01 	tst.w	r8, #1
 801180c:	f040 80ee 	bne.w	80119ec <_dtoa_r+0x6bc>
 8011810:	4649      	mov	r1, r9
 8011812:	4658      	mov	r0, fp
 8011814:	f000 ff26 	bl	8012664 <_Bfree>
 8011818:	2300      	movs	r3, #0
 801181a:	7033      	strb	r3, [r6, #0]
 801181c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801181e:	3701      	adds	r7, #1
 8011820:	601f      	str	r7, [r3, #0]
 8011822:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011824:	2b00      	cmp	r3, #0
 8011826:	f000 831d 	beq.w	8011e64 <_dtoa_r+0xb34>
 801182a:	601e      	str	r6, [r3, #0]
 801182c:	e31a      	b.n	8011e64 <_dtoa_r+0xb34>
 801182e:	07e2      	lsls	r2, r4, #31
 8011830:	d505      	bpl.n	801183e <_dtoa_r+0x50e>
 8011832:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011836:	f7ee fec7 	bl	80005c8 <__aeabi_dmul>
 801183a:	3601      	adds	r6, #1
 801183c:	2301      	movs	r3, #1
 801183e:	1064      	asrs	r4, r4, #1
 8011840:	3508      	adds	r5, #8
 8011842:	e73f      	b.n	80116c4 <_dtoa_r+0x394>
 8011844:	2602      	movs	r6, #2
 8011846:	e742      	b.n	80116ce <_dtoa_r+0x39e>
 8011848:	9c07      	ldr	r4, [sp, #28]
 801184a:	9704      	str	r7, [sp, #16]
 801184c:	e761      	b.n	8011712 <_dtoa_r+0x3e2>
 801184e:	4b27      	ldr	r3, [pc, #156]	@ (80118ec <_dtoa_r+0x5bc>)
 8011850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011852:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011856:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801185a:	4454      	add	r4, sl
 801185c:	2900      	cmp	r1, #0
 801185e:	d053      	beq.n	8011908 <_dtoa_r+0x5d8>
 8011860:	4928      	ldr	r1, [pc, #160]	@ (8011904 <_dtoa_r+0x5d4>)
 8011862:	2000      	movs	r0, #0
 8011864:	f7ee ffda 	bl	800081c <__aeabi_ddiv>
 8011868:	4633      	mov	r3, r6
 801186a:	462a      	mov	r2, r5
 801186c:	f7ee fcf4 	bl	8000258 <__aeabi_dsub>
 8011870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011874:	4656      	mov	r6, sl
 8011876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801187a:	f7ef f955 	bl	8000b28 <__aeabi_d2iz>
 801187e:	4605      	mov	r5, r0
 8011880:	f7ee fe38 	bl	80004f4 <__aeabi_i2d>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801188c:	f7ee fce4 	bl	8000258 <__aeabi_dsub>
 8011890:	3530      	adds	r5, #48	@ 0x30
 8011892:	4602      	mov	r2, r0
 8011894:	460b      	mov	r3, r1
 8011896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801189a:	f806 5b01 	strb.w	r5, [r6], #1
 801189e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80118a2:	f7ef f903 	bl	8000aac <__aeabi_dcmplt>
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d171      	bne.n	801198e <_dtoa_r+0x65e>
 80118aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118ae:	4911      	ldr	r1, [pc, #68]	@ (80118f4 <_dtoa_r+0x5c4>)
 80118b0:	2000      	movs	r0, #0
 80118b2:	f7ee fcd1 	bl	8000258 <__aeabi_dsub>
 80118b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80118ba:	f7ef f8f7 	bl	8000aac <__aeabi_dcmplt>
 80118be:	2800      	cmp	r0, #0
 80118c0:	f040 8095 	bne.w	80119ee <_dtoa_r+0x6be>
 80118c4:	42a6      	cmp	r6, r4
 80118c6:	f43f af50 	beq.w	801176a <_dtoa_r+0x43a>
 80118ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80118ce:	4b0a      	ldr	r3, [pc, #40]	@ (80118f8 <_dtoa_r+0x5c8>)
 80118d0:	2200      	movs	r2, #0
 80118d2:	f7ee fe79 	bl	80005c8 <__aeabi_dmul>
 80118d6:	4b08      	ldr	r3, [pc, #32]	@ (80118f8 <_dtoa_r+0x5c8>)
 80118d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80118dc:	2200      	movs	r2, #0
 80118de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118e2:	f7ee fe71 	bl	80005c8 <__aeabi_dmul>
 80118e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118ea:	e7c4      	b.n	8011876 <_dtoa_r+0x546>
 80118ec:	080140c0 	.word	0x080140c0
 80118f0:	08014098 	.word	0x08014098
 80118f4:	3ff00000 	.word	0x3ff00000
 80118f8:	40240000 	.word	0x40240000
 80118fc:	401c0000 	.word	0x401c0000
 8011900:	40140000 	.word	0x40140000
 8011904:	3fe00000 	.word	0x3fe00000
 8011908:	4631      	mov	r1, r6
 801190a:	4628      	mov	r0, r5
 801190c:	f7ee fe5c 	bl	80005c8 <__aeabi_dmul>
 8011910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011914:	9415      	str	r4, [sp, #84]	@ 0x54
 8011916:	4656      	mov	r6, sl
 8011918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801191c:	f7ef f904 	bl	8000b28 <__aeabi_d2iz>
 8011920:	4605      	mov	r5, r0
 8011922:	f7ee fde7 	bl	80004f4 <__aeabi_i2d>
 8011926:	4602      	mov	r2, r0
 8011928:	460b      	mov	r3, r1
 801192a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801192e:	f7ee fc93 	bl	8000258 <__aeabi_dsub>
 8011932:	3530      	adds	r5, #48	@ 0x30
 8011934:	f806 5b01 	strb.w	r5, [r6], #1
 8011938:	4602      	mov	r2, r0
 801193a:	460b      	mov	r3, r1
 801193c:	42a6      	cmp	r6, r4
 801193e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011942:	f04f 0200 	mov.w	r2, #0
 8011946:	d124      	bne.n	8011992 <_dtoa_r+0x662>
 8011948:	4bac      	ldr	r3, [pc, #688]	@ (8011bfc <_dtoa_r+0x8cc>)
 801194a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801194e:	f7ee fc85 	bl	800025c <__adddf3>
 8011952:	4602      	mov	r2, r0
 8011954:	460b      	mov	r3, r1
 8011956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801195a:	f7ef f8c5 	bl	8000ae8 <__aeabi_dcmpgt>
 801195e:	2800      	cmp	r0, #0
 8011960:	d145      	bne.n	80119ee <_dtoa_r+0x6be>
 8011962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011966:	49a5      	ldr	r1, [pc, #660]	@ (8011bfc <_dtoa_r+0x8cc>)
 8011968:	2000      	movs	r0, #0
 801196a:	f7ee fc75 	bl	8000258 <__aeabi_dsub>
 801196e:	4602      	mov	r2, r0
 8011970:	460b      	mov	r3, r1
 8011972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011976:	f7ef f899 	bl	8000aac <__aeabi_dcmplt>
 801197a:	2800      	cmp	r0, #0
 801197c:	f43f aef5 	beq.w	801176a <_dtoa_r+0x43a>
 8011980:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011982:	1e73      	subs	r3, r6, #1
 8011984:	9315      	str	r3, [sp, #84]	@ 0x54
 8011986:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801198a:	2b30      	cmp	r3, #48	@ 0x30
 801198c:	d0f8      	beq.n	8011980 <_dtoa_r+0x650>
 801198e:	9f04      	ldr	r7, [sp, #16]
 8011990:	e73e      	b.n	8011810 <_dtoa_r+0x4e0>
 8011992:	4b9b      	ldr	r3, [pc, #620]	@ (8011c00 <_dtoa_r+0x8d0>)
 8011994:	f7ee fe18 	bl	80005c8 <__aeabi_dmul>
 8011998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801199c:	e7bc      	b.n	8011918 <_dtoa_r+0x5e8>
 801199e:	d10c      	bne.n	80119ba <_dtoa_r+0x68a>
 80119a0:	4b98      	ldr	r3, [pc, #608]	@ (8011c04 <_dtoa_r+0x8d4>)
 80119a2:	2200      	movs	r2, #0
 80119a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119a8:	f7ee fe0e 	bl	80005c8 <__aeabi_dmul>
 80119ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119b0:	f7ef f890 	bl	8000ad4 <__aeabi_dcmpge>
 80119b4:	2800      	cmp	r0, #0
 80119b6:	f000 8157 	beq.w	8011c68 <_dtoa_r+0x938>
 80119ba:	2400      	movs	r4, #0
 80119bc:	4625      	mov	r5, r4
 80119be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119c0:	43db      	mvns	r3, r3
 80119c2:	9304      	str	r3, [sp, #16]
 80119c4:	4656      	mov	r6, sl
 80119c6:	2700      	movs	r7, #0
 80119c8:	4621      	mov	r1, r4
 80119ca:	4658      	mov	r0, fp
 80119cc:	f000 fe4a 	bl	8012664 <_Bfree>
 80119d0:	2d00      	cmp	r5, #0
 80119d2:	d0dc      	beq.n	801198e <_dtoa_r+0x65e>
 80119d4:	b12f      	cbz	r7, 80119e2 <_dtoa_r+0x6b2>
 80119d6:	42af      	cmp	r7, r5
 80119d8:	d003      	beq.n	80119e2 <_dtoa_r+0x6b2>
 80119da:	4639      	mov	r1, r7
 80119dc:	4658      	mov	r0, fp
 80119de:	f000 fe41 	bl	8012664 <_Bfree>
 80119e2:	4629      	mov	r1, r5
 80119e4:	4658      	mov	r0, fp
 80119e6:	f000 fe3d 	bl	8012664 <_Bfree>
 80119ea:	e7d0      	b.n	801198e <_dtoa_r+0x65e>
 80119ec:	9704      	str	r7, [sp, #16]
 80119ee:	4633      	mov	r3, r6
 80119f0:	461e      	mov	r6, r3
 80119f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119f6:	2a39      	cmp	r2, #57	@ 0x39
 80119f8:	d107      	bne.n	8011a0a <_dtoa_r+0x6da>
 80119fa:	459a      	cmp	sl, r3
 80119fc:	d1f8      	bne.n	80119f0 <_dtoa_r+0x6c0>
 80119fe:	9a04      	ldr	r2, [sp, #16]
 8011a00:	3201      	adds	r2, #1
 8011a02:	9204      	str	r2, [sp, #16]
 8011a04:	2230      	movs	r2, #48	@ 0x30
 8011a06:	f88a 2000 	strb.w	r2, [sl]
 8011a0a:	781a      	ldrb	r2, [r3, #0]
 8011a0c:	3201      	adds	r2, #1
 8011a0e:	701a      	strb	r2, [r3, #0]
 8011a10:	e7bd      	b.n	801198e <_dtoa_r+0x65e>
 8011a12:	4b7b      	ldr	r3, [pc, #492]	@ (8011c00 <_dtoa_r+0x8d0>)
 8011a14:	2200      	movs	r2, #0
 8011a16:	f7ee fdd7 	bl	80005c8 <__aeabi_dmul>
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	4604      	mov	r4, r0
 8011a20:	460d      	mov	r5, r1
 8011a22:	f7ef f839 	bl	8000a98 <__aeabi_dcmpeq>
 8011a26:	2800      	cmp	r0, #0
 8011a28:	f43f aebb 	beq.w	80117a2 <_dtoa_r+0x472>
 8011a2c:	e6f0      	b.n	8011810 <_dtoa_r+0x4e0>
 8011a2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011a30:	2a00      	cmp	r2, #0
 8011a32:	f000 80db 	beq.w	8011bec <_dtoa_r+0x8bc>
 8011a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a38:	2a01      	cmp	r2, #1
 8011a3a:	f300 80bf 	bgt.w	8011bbc <_dtoa_r+0x88c>
 8011a3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011a40:	2a00      	cmp	r2, #0
 8011a42:	f000 80b7 	beq.w	8011bb4 <_dtoa_r+0x884>
 8011a46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011a4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011a4c:	4646      	mov	r6, r8
 8011a4e:	9a08      	ldr	r2, [sp, #32]
 8011a50:	2101      	movs	r1, #1
 8011a52:	441a      	add	r2, r3
 8011a54:	4658      	mov	r0, fp
 8011a56:	4498      	add	r8, r3
 8011a58:	9208      	str	r2, [sp, #32]
 8011a5a:	f000 ff01 	bl	8012860 <__i2b>
 8011a5e:	4605      	mov	r5, r0
 8011a60:	b15e      	cbz	r6, 8011a7a <_dtoa_r+0x74a>
 8011a62:	9b08      	ldr	r3, [sp, #32]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	dd08      	ble.n	8011a7a <_dtoa_r+0x74a>
 8011a68:	42b3      	cmp	r3, r6
 8011a6a:	9a08      	ldr	r2, [sp, #32]
 8011a6c:	bfa8      	it	ge
 8011a6e:	4633      	movge	r3, r6
 8011a70:	eba8 0803 	sub.w	r8, r8, r3
 8011a74:	1af6      	subs	r6, r6, r3
 8011a76:	1ad3      	subs	r3, r2, r3
 8011a78:	9308      	str	r3, [sp, #32]
 8011a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a7c:	b1f3      	cbz	r3, 8011abc <_dtoa_r+0x78c>
 8011a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f000 80b7 	beq.w	8011bf4 <_dtoa_r+0x8c4>
 8011a86:	b18c      	cbz	r4, 8011aac <_dtoa_r+0x77c>
 8011a88:	4629      	mov	r1, r5
 8011a8a:	4622      	mov	r2, r4
 8011a8c:	4658      	mov	r0, fp
 8011a8e:	f000 ffa7 	bl	80129e0 <__pow5mult>
 8011a92:	464a      	mov	r2, r9
 8011a94:	4601      	mov	r1, r0
 8011a96:	4605      	mov	r5, r0
 8011a98:	4658      	mov	r0, fp
 8011a9a:	f000 fef7 	bl	801288c <__multiply>
 8011a9e:	4649      	mov	r1, r9
 8011aa0:	9004      	str	r0, [sp, #16]
 8011aa2:	4658      	mov	r0, fp
 8011aa4:	f000 fdde 	bl	8012664 <_Bfree>
 8011aa8:	9b04      	ldr	r3, [sp, #16]
 8011aaa:	4699      	mov	r9, r3
 8011aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011aae:	1b1a      	subs	r2, r3, r4
 8011ab0:	d004      	beq.n	8011abc <_dtoa_r+0x78c>
 8011ab2:	4649      	mov	r1, r9
 8011ab4:	4658      	mov	r0, fp
 8011ab6:	f000 ff93 	bl	80129e0 <__pow5mult>
 8011aba:	4681      	mov	r9, r0
 8011abc:	2101      	movs	r1, #1
 8011abe:	4658      	mov	r0, fp
 8011ac0:	f000 fece 	bl	8012860 <__i2b>
 8011ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 81cf 	beq.w	8011e6c <_dtoa_r+0xb3c>
 8011ace:	461a      	mov	r2, r3
 8011ad0:	4601      	mov	r1, r0
 8011ad2:	4658      	mov	r0, fp
 8011ad4:	f000 ff84 	bl	80129e0 <__pow5mult>
 8011ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	4604      	mov	r4, r0
 8011ade:	f300 8095 	bgt.w	8011c0c <_dtoa_r+0x8dc>
 8011ae2:	9b02      	ldr	r3, [sp, #8]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	f040 8087 	bne.w	8011bf8 <_dtoa_r+0x8c8>
 8011aea:	9b03      	ldr	r3, [sp, #12]
 8011aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f040 8089 	bne.w	8011c08 <_dtoa_r+0x8d8>
 8011af6:	9b03      	ldr	r3, [sp, #12]
 8011af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011afc:	0d1b      	lsrs	r3, r3, #20
 8011afe:	051b      	lsls	r3, r3, #20
 8011b00:	b12b      	cbz	r3, 8011b0e <_dtoa_r+0x7de>
 8011b02:	9b08      	ldr	r3, [sp, #32]
 8011b04:	3301      	adds	r3, #1
 8011b06:	9308      	str	r3, [sp, #32]
 8011b08:	f108 0801 	add.w	r8, r8, #1
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f000 81b0 	beq.w	8011e78 <_dtoa_r+0xb48>
 8011b18:	6923      	ldr	r3, [r4, #16]
 8011b1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b1e:	6918      	ldr	r0, [r3, #16]
 8011b20:	f000 fe52 	bl	80127c8 <__hi0bits>
 8011b24:	f1c0 0020 	rsb	r0, r0, #32
 8011b28:	9b08      	ldr	r3, [sp, #32]
 8011b2a:	4418      	add	r0, r3
 8011b2c:	f010 001f 	ands.w	r0, r0, #31
 8011b30:	d077      	beq.n	8011c22 <_dtoa_r+0x8f2>
 8011b32:	f1c0 0320 	rsb	r3, r0, #32
 8011b36:	2b04      	cmp	r3, #4
 8011b38:	dd6b      	ble.n	8011c12 <_dtoa_r+0x8e2>
 8011b3a:	9b08      	ldr	r3, [sp, #32]
 8011b3c:	f1c0 001c 	rsb	r0, r0, #28
 8011b40:	4403      	add	r3, r0
 8011b42:	4480      	add	r8, r0
 8011b44:	4406      	add	r6, r0
 8011b46:	9308      	str	r3, [sp, #32]
 8011b48:	f1b8 0f00 	cmp.w	r8, #0
 8011b4c:	dd05      	ble.n	8011b5a <_dtoa_r+0x82a>
 8011b4e:	4649      	mov	r1, r9
 8011b50:	4642      	mov	r2, r8
 8011b52:	4658      	mov	r0, fp
 8011b54:	f000 ff9e 	bl	8012a94 <__lshift>
 8011b58:	4681      	mov	r9, r0
 8011b5a:	9b08      	ldr	r3, [sp, #32]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	dd05      	ble.n	8011b6c <_dtoa_r+0x83c>
 8011b60:	4621      	mov	r1, r4
 8011b62:	461a      	mov	r2, r3
 8011b64:	4658      	mov	r0, fp
 8011b66:	f000 ff95 	bl	8012a94 <__lshift>
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d059      	beq.n	8011c26 <_dtoa_r+0x8f6>
 8011b72:	4621      	mov	r1, r4
 8011b74:	4648      	mov	r0, r9
 8011b76:	f000 fff9 	bl	8012b6c <__mcmp>
 8011b7a:	2800      	cmp	r0, #0
 8011b7c:	da53      	bge.n	8011c26 <_dtoa_r+0x8f6>
 8011b7e:	1e7b      	subs	r3, r7, #1
 8011b80:	9304      	str	r3, [sp, #16]
 8011b82:	4649      	mov	r1, r9
 8011b84:	2300      	movs	r3, #0
 8011b86:	220a      	movs	r2, #10
 8011b88:	4658      	mov	r0, fp
 8011b8a:	f000 fd8d 	bl	80126a8 <__multadd>
 8011b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b90:	4681      	mov	r9, r0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f000 8172 	beq.w	8011e7c <_dtoa_r+0xb4c>
 8011b98:	2300      	movs	r3, #0
 8011b9a:	4629      	mov	r1, r5
 8011b9c:	220a      	movs	r2, #10
 8011b9e:	4658      	mov	r0, fp
 8011ba0:	f000 fd82 	bl	80126a8 <__multadd>
 8011ba4:	9b00      	ldr	r3, [sp, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	4605      	mov	r5, r0
 8011baa:	dc67      	bgt.n	8011c7c <_dtoa_r+0x94c>
 8011bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bae:	2b02      	cmp	r3, #2
 8011bb0:	dc41      	bgt.n	8011c36 <_dtoa_r+0x906>
 8011bb2:	e063      	b.n	8011c7c <_dtoa_r+0x94c>
 8011bb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011bb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011bba:	e746      	b.n	8011a4a <_dtoa_r+0x71a>
 8011bbc:	9b07      	ldr	r3, [sp, #28]
 8011bbe:	1e5c      	subs	r4, r3, #1
 8011bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011bc2:	42a3      	cmp	r3, r4
 8011bc4:	bfbf      	itttt	lt
 8011bc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011bc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011bca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011bcc:	1ae3      	sublt	r3, r4, r3
 8011bce:	bfb4      	ite	lt
 8011bd0:	18d2      	addlt	r2, r2, r3
 8011bd2:	1b1c      	subge	r4, r3, r4
 8011bd4:	9b07      	ldr	r3, [sp, #28]
 8011bd6:	bfbc      	itt	lt
 8011bd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011bda:	2400      	movlt	r4, #0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	bfb5      	itete	lt
 8011be0:	eba8 0603 	sublt.w	r6, r8, r3
 8011be4:	9b07      	ldrge	r3, [sp, #28]
 8011be6:	2300      	movlt	r3, #0
 8011be8:	4646      	movge	r6, r8
 8011bea:	e730      	b.n	8011a4e <_dtoa_r+0x71e>
 8011bec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011bee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011bf0:	4646      	mov	r6, r8
 8011bf2:	e735      	b.n	8011a60 <_dtoa_r+0x730>
 8011bf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011bf6:	e75c      	b.n	8011ab2 <_dtoa_r+0x782>
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e788      	b.n	8011b0e <_dtoa_r+0x7de>
 8011bfc:	3fe00000 	.word	0x3fe00000
 8011c00:	40240000 	.word	0x40240000
 8011c04:	40140000 	.word	0x40140000
 8011c08:	9b02      	ldr	r3, [sp, #8]
 8011c0a:	e780      	b.n	8011b0e <_dtoa_r+0x7de>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c10:	e782      	b.n	8011b18 <_dtoa_r+0x7e8>
 8011c12:	d099      	beq.n	8011b48 <_dtoa_r+0x818>
 8011c14:	9a08      	ldr	r2, [sp, #32]
 8011c16:	331c      	adds	r3, #28
 8011c18:	441a      	add	r2, r3
 8011c1a:	4498      	add	r8, r3
 8011c1c:	441e      	add	r6, r3
 8011c1e:	9208      	str	r2, [sp, #32]
 8011c20:	e792      	b.n	8011b48 <_dtoa_r+0x818>
 8011c22:	4603      	mov	r3, r0
 8011c24:	e7f6      	b.n	8011c14 <_dtoa_r+0x8e4>
 8011c26:	9b07      	ldr	r3, [sp, #28]
 8011c28:	9704      	str	r7, [sp, #16]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	dc20      	bgt.n	8011c70 <_dtoa_r+0x940>
 8011c2e:	9300      	str	r3, [sp, #0]
 8011c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c32:	2b02      	cmp	r3, #2
 8011c34:	dd1e      	ble.n	8011c74 <_dtoa_r+0x944>
 8011c36:	9b00      	ldr	r3, [sp, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	f47f aec0 	bne.w	80119be <_dtoa_r+0x68e>
 8011c3e:	4621      	mov	r1, r4
 8011c40:	2205      	movs	r2, #5
 8011c42:	4658      	mov	r0, fp
 8011c44:	f000 fd30 	bl	80126a8 <__multadd>
 8011c48:	4601      	mov	r1, r0
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	4648      	mov	r0, r9
 8011c4e:	f000 ff8d 	bl	8012b6c <__mcmp>
 8011c52:	2800      	cmp	r0, #0
 8011c54:	f77f aeb3 	ble.w	80119be <_dtoa_r+0x68e>
 8011c58:	4656      	mov	r6, sl
 8011c5a:	2331      	movs	r3, #49	@ 0x31
 8011c5c:	f806 3b01 	strb.w	r3, [r6], #1
 8011c60:	9b04      	ldr	r3, [sp, #16]
 8011c62:	3301      	adds	r3, #1
 8011c64:	9304      	str	r3, [sp, #16]
 8011c66:	e6ae      	b.n	80119c6 <_dtoa_r+0x696>
 8011c68:	9c07      	ldr	r4, [sp, #28]
 8011c6a:	9704      	str	r7, [sp, #16]
 8011c6c:	4625      	mov	r5, r4
 8011c6e:	e7f3      	b.n	8011c58 <_dtoa_r+0x928>
 8011c70:	9b07      	ldr	r3, [sp, #28]
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	f000 8104 	beq.w	8011e84 <_dtoa_r+0xb54>
 8011c7c:	2e00      	cmp	r6, #0
 8011c7e:	dd05      	ble.n	8011c8c <_dtoa_r+0x95c>
 8011c80:	4629      	mov	r1, r5
 8011c82:	4632      	mov	r2, r6
 8011c84:	4658      	mov	r0, fp
 8011c86:	f000 ff05 	bl	8012a94 <__lshift>
 8011c8a:	4605      	mov	r5, r0
 8011c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d05a      	beq.n	8011d48 <_dtoa_r+0xa18>
 8011c92:	6869      	ldr	r1, [r5, #4]
 8011c94:	4658      	mov	r0, fp
 8011c96:	f000 fca5 	bl	80125e4 <_Balloc>
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	b928      	cbnz	r0, 8011caa <_dtoa_r+0x97a>
 8011c9e:	4b84      	ldr	r3, [pc, #528]	@ (8011eb0 <_dtoa_r+0xb80>)
 8011ca0:	4602      	mov	r2, r0
 8011ca2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011ca6:	f7ff bb5a 	b.w	801135e <_dtoa_r+0x2e>
 8011caa:	692a      	ldr	r2, [r5, #16]
 8011cac:	3202      	adds	r2, #2
 8011cae:	0092      	lsls	r2, r2, #2
 8011cb0:	f105 010c 	add.w	r1, r5, #12
 8011cb4:	300c      	adds	r0, #12
 8011cb6:	f7ff fa78 	bl	80111aa <memcpy>
 8011cba:	2201      	movs	r2, #1
 8011cbc:	4631      	mov	r1, r6
 8011cbe:	4658      	mov	r0, fp
 8011cc0:	f000 fee8 	bl	8012a94 <__lshift>
 8011cc4:	f10a 0301 	add.w	r3, sl, #1
 8011cc8:	9307      	str	r3, [sp, #28]
 8011cca:	9b00      	ldr	r3, [sp, #0]
 8011ccc:	4453      	add	r3, sl
 8011cce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cd0:	9b02      	ldr	r3, [sp, #8]
 8011cd2:	f003 0301 	and.w	r3, r3, #1
 8011cd6:	462f      	mov	r7, r5
 8011cd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cda:	4605      	mov	r5, r0
 8011cdc:	9b07      	ldr	r3, [sp, #28]
 8011cde:	4621      	mov	r1, r4
 8011ce0:	3b01      	subs	r3, #1
 8011ce2:	4648      	mov	r0, r9
 8011ce4:	9300      	str	r3, [sp, #0]
 8011ce6:	f7ff fa9b 	bl	8011220 <quorem>
 8011cea:	4639      	mov	r1, r7
 8011cec:	9002      	str	r0, [sp, #8]
 8011cee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011cf2:	4648      	mov	r0, r9
 8011cf4:	f000 ff3a 	bl	8012b6c <__mcmp>
 8011cf8:	462a      	mov	r2, r5
 8011cfa:	9008      	str	r0, [sp, #32]
 8011cfc:	4621      	mov	r1, r4
 8011cfe:	4658      	mov	r0, fp
 8011d00:	f000 ff50 	bl	8012ba4 <__mdiff>
 8011d04:	68c2      	ldr	r2, [r0, #12]
 8011d06:	4606      	mov	r6, r0
 8011d08:	bb02      	cbnz	r2, 8011d4c <_dtoa_r+0xa1c>
 8011d0a:	4601      	mov	r1, r0
 8011d0c:	4648      	mov	r0, r9
 8011d0e:	f000 ff2d 	bl	8012b6c <__mcmp>
 8011d12:	4602      	mov	r2, r0
 8011d14:	4631      	mov	r1, r6
 8011d16:	4658      	mov	r0, fp
 8011d18:	920e      	str	r2, [sp, #56]	@ 0x38
 8011d1a:	f000 fca3 	bl	8012664 <_Bfree>
 8011d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d22:	9e07      	ldr	r6, [sp, #28]
 8011d24:	ea43 0102 	orr.w	r1, r3, r2
 8011d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d2a:	4319      	orrs	r1, r3
 8011d2c:	d110      	bne.n	8011d50 <_dtoa_r+0xa20>
 8011d2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011d32:	d029      	beq.n	8011d88 <_dtoa_r+0xa58>
 8011d34:	9b08      	ldr	r3, [sp, #32]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	dd02      	ble.n	8011d40 <_dtoa_r+0xa10>
 8011d3a:	9b02      	ldr	r3, [sp, #8]
 8011d3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011d40:	9b00      	ldr	r3, [sp, #0]
 8011d42:	f883 8000 	strb.w	r8, [r3]
 8011d46:	e63f      	b.n	80119c8 <_dtoa_r+0x698>
 8011d48:	4628      	mov	r0, r5
 8011d4a:	e7bb      	b.n	8011cc4 <_dtoa_r+0x994>
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	e7e1      	b.n	8011d14 <_dtoa_r+0x9e4>
 8011d50:	9b08      	ldr	r3, [sp, #32]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	db04      	blt.n	8011d60 <_dtoa_r+0xa30>
 8011d56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d58:	430b      	orrs	r3, r1
 8011d5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011d5c:	430b      	orrs	r3, r1
 8011d5e:	d120      	bne.n	8011da2 <_dtoa_r+0xa72>
 8011d60:	2a00      	cmp	r2, #0
 8011d62:	dded      	ble.n	8011d40 <_dtoa_r+0xa10>
 8011d64:	4649      	mov	r1, r9
 8011d66:	2201      	movs	r2, #1
 8011d68:	4658      	mov	r0, fp
 8011d6a:	f000 fe93 	bl	8012a94 <__lshift>
 8011d6e:	4621      	mov	r1, r4
 8011d70:	4681      	mov	r9, r0
 8011d72:	f000 fefb 	bl	8012b6c <__mcmp>
 8011d76:	2800      	cmp	r0, #0
 8011d78:	dc03      	bgt.n	8011d82 <_dtoa_r+0xa52>
 8011d7a:	d1e1      	bne.n	8011d40 <_dtoa_r+0xa10>
 8011d7c:	f018 0f01 	tst.w	r8, #1
 8011d80:	d0de      	beq.n	8011d40 <_dtoa_r+0xa10>
 8011d82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011d86:	d1d8      	bne.n	8011d3a <_dtoa_r+0xa0a>
 8011d88:	9a00      	ldr	r2, [sp, #0]
 8011d8a:	2339      	movs	r3, #57	@ 0x39
 8011d8c:	7013      	strb	r3, [r2, #0]
 8011d8e:	4633      	mov	r3, r6
 8011d90:	461e      	mov	r6, r3
 8011d92:	3b01      	subs	r3, #1
 8011d94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011d98:	2a39      	cmp	r2, #57	@ 0x39
 8011d9a:	d052      	beq.n	8011e42 <_dtoa_r+0xb12>
 8011d9c:	3201      	adds	r2, #1
 8011d9e:	701a      	strb	r2, [r3, #0]
 8011da0:	e612      	b.n	80119c8 <_dtoa_r+0x698>
 8011da2:	2a00      	cmp	r2, #0
 8011da4:	dd07      	ble.n	8011db6 <_dtoa_r+0xa86>
 8011da6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011daa:	d0ed      	beq.n	8011d88 <_dtoa_r+0xa58>
 8011dac:	9a00      	ldr	r2, [sp, #0]
 8011dae:	f108 0301 	add.w	r3, r8, #1
 8011db2:	7013      	strb	r3, [r2, #0]
 8011db4:	e608      	b.n	80119c8 <_dtoa_r+0x698>
 8011db6:	9b07      	ldr	r3, [sp, #28]
 8011db8:	9a07      	ldr	r2, [sp, #28]
 8011dba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011dbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d028      	beq.n	8011e16 <_dtoa_r+0xae6>
 8011dc4:	4649      	mov	r1, r9
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	220a      	movs	r2, #10
 8011dca:	4658      	mov	r0, fp
 8011dcc:	f000 fc6c 	bl	80126a8 <__multadd>
 8011dd0:	42af      	cmp	r7, r5
 8011dd2:	4681      	mov	r9, r0
 8011dd4:	f04f 0300 	mov.w	r3, #0
 8011dd8:	f04f 020a 	mov.w	r2, #10
 8011ddc:	4639      	mov	r1, r7
 8011dde:	4658      	mov	r0, fp
 8011de0:	d107      	bne.n	8011df2 <_dtoa_r+0xac2>
 8011de2:	f000 fc61 	bl	80126a8 <__multadd>
 8011de6:	4607      	mov	r7, r0
 8011de8:	4605      	mov	r5, r0
 8011dea:	9b07      	ldr	r3, [sp, #28]
 8011dec:	3301      	adds	r3, #1
 8011dee:	9307      	str	r3, [sp, #28]
 8011df0:	e774      	b.n	8011cdc <_dtoa_r+0x9ac>
 8011df2:	f000 fc59 	bl	80126a8 <__multadd>
 8011df6:	4629      	mov	r1, r5
 8011df8:	4607      	mov	r7, r0
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	220a      	movs	r2, #10
 8011dfe:	4658      	mov	r0, fp
 8011e00:	f000 fc52 	bl	80126a8 <__multadd>
 8011e04:	4605      	mov	r5, r0
 8011e06:	e7f0      	b.n	8011dea <_dtoa_r+0xaba>
 8011e08:	9b00      	ldr	r3, [sp, #0]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	bfcc      	ite	gt
 8011e0e:	461e      	movgt	r6, r3
 8011e10:	2601      	movle	r6, #1
 8011e12:	4456      	add	r6, sl
 8011e14:	2700      	movs	r7, #0
 8011e16:	4649      	mov	r1, r9
 8011e18:	2201      	movs	r2, #1
 8011e1a:	4658      	mov	r0, fp
 8011e1c:	f000 fe3a 	bl	8012a94 <__lshift>
 8011e20:	4621      	mov	r1, r4
 8011e22:	4681      	mov	r9, r0
 8011e24:	f000 fea2 	bl	8012b6c <__mcmp>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	dcb0      	bgt.n	8011d8e <_dtoa_r+0xa5e>
 8011e2c:	d102      	bne.n	8011e34 <_dtoa_r+0xb04>
 8011e2e:	f018 0f01 	tst.w	r8, #1
 8011e32:	d1ac      	bne.n	8011d8e <_dtoa_r+0xa5e>
 8011e34:	4633      	mov	r3, r6
 8011e36:	461e      	mov	r6, r3
 8011e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e3c:	2a30      	cmp	r2, #48	@ 0x30
 8011e3e:	d0fa      	beq.n	8011e36 <_dtoa_r+0xb06>
 8011e40:	e5c2      	b.n	80119c8 <_dtoa_r+0x698>
 8011e42:	459a      	cmp	sl, r3
 8011e44:	d1a4      	bne.n	8011d90 <_dtoa_r+0xa60>
 8011e46:	9b04      	ldr	r3, [sp, #16]
 8011e48:	3301      	adds	r3, #1
 8011e4a:	9304      	str	r3, [sp, #16]
 8011e4c:	2331      	movs	r3, #49	@ 0x31
 8011e4e:	f88a 3000 	strb.w	r3, [sl]
 8011e52:	e5b9      	b.n	80119c8 <_dtoa_r+0x698>
 8011e54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011eb4 <_dtoa_r+0xb84>
 8011e5a:	b11b      	cbz	r3, 8011e64 <_dtoa_r+0xb34>
 8011e5c:	f10a 0308 	add.w	r3, sl, #8
 8011e60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011e62:	6013      	str	r3, [r2, #0]
 8011e64:	4650      	mov	r0, sl
 8011e66:	b019      	add	sp, #100	@ 0x64
 8011e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	f77f ae37 	ble.w	8011ae2 <_dtoa_r+0x7b2>
 8011e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e78:	2001      	movs	r0, #1
 8011e7a:	e655      	b.n	8011b28 <_dtoa_r+0x7f8>
 8011e7c:	9b00      	ldr	r3, [sp, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	f77f aed6 	ble.w	8011c30 <_dtoa_r+0x900>
 8011e84:	4656      	mov	r6, sl
 8011e86:	4621      	mov	r1, r4
 8011e88:	4648      	mov	r0, r9
 8011e8a:	f7ff f9c9 	bl	8011220 <quorem>
 8011e8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011e92:	f806 8b01 	strb.w	r8, [r6], #1
 8011e96:	9b00      	ldr	r3, [sp, #0]
 8011e98:	eba6 020a 	sub.w	r2, r6, sl
 8011e9c:	4293      	cmp	r3, r2
 8011e9e:	ddb3      	ble.n	8011e08 <_dtoa_r+0xad8>
 8011ea0:	4649      	mov	r1, r9
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	220a      	movs	r2, #10
 8011ea6:	4658      	mov	r0, fp
 8011ea8:	f000 fbfe 	bl	80126a8 <__multadd>
 8011eac:	4681      	mov	r9, r0
 8011eae:	e7ea      	b.n	8011e86 <_dtoa_r+0xb56>
 8011eb0:	08013fc2 	.word	0x08013fc2
 8011eb4:	08013f46 	.word	0x08013f46

08011eb8 <_free_r>:
 8011eb8:	b538      	push	{r3, r4, r5, lr}
 8011eba:	4605      	mov	r5, r0
 8011ebc:	2900      	cmp	r1, #0
 8011ebe:	d041      	beq.n	8011f44 <_free_r+0x8c>
 8011ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ec4:	1f0c      	subs	r4, r1, #4
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	bfb8      	it	lt
 8011eca:	18e4      	addlt	r4, r4, r3
 8011ecc:	f7fd f9e0 	bl	800f290 <__malloc_lock>
 8011ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8011f48 <_free_r+0x90>)
 8011ed2:	6813      	ldr	r3, [r2, #0]
 8011ed4:	b933      	cbnz	r3, 8011ee4 <_free_r+0x2c>
 8011ed6:	6063      	str	r3, [r4, #4]
 8011ed8:	6014      	str	r4, [r2, #0]
 8011eda:	4628      	mov	r0, r5
 8011edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ee0:	f7fd b9dc 	b.w	800f29c <__malloc_unlock>
 8011ee4:	42a3      	cmp	r3, r4
 8011ee6:	d908      	bls.n	8011efa <_free_r+0x42>
 8011ee8:	6820      	ldr	r0, [r4, #0]
 8011eea:	1821      	adds	r1, r4, r0
 8011eec:	428b      	cmp	r3, r1
 8011eee:	bf01      	itttt	eq
 8011ef0:	6819      	ldreq	r1, [r3, #0]
 8011ef2:	685b      	ldreq	r3, [r3, #4]
 8011ef4:	1809      	addeq	r1, r1, r0
 8011ef6:	6021      	streq	r1, [r4, #0]
 8011ef8:	e7ed      	b.n	8011ed6 <_free_r+0x1e>
 8011efa:	461a      	mov	r2, r3
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	b10b      	cbz	r3, 8011f04 <_free_r+0x4c>
 8011f00:	42a3      	cmp	r3, r4
 8011f02:	d9fa      	bls.n	8011efa <_free_r+0x42>
 8011f04:	6811      	ldr	r1, [r2, #0]
 8011f06:	1850      	adds	r0, r2, r1
 8011f08:	42a0      	cmp	r0, r4
 8011f0a:	d10b      	bne.n	8011f24 <_free_r+0x6c>
 8011f0c:	6820      	ldr	r0, [r4, #0]
 8011f0e:	4401      	add	r1, r0
 8011f10:	1850      	adds	r0, r2, r1
 8011f12:	4283      	cmp	r3, r0
 8011f14:	6011      	str	r1, [r2, #0]
 8011f16:	d1e0      	bne.n	8011eda <_free_r+0x22>
 8011f18:	6818      	ldr	r0, [r3, #0]
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	6053      	str	r3, [r2, #4]
 8011f1e:	4408      	add	r0, r1
 8011f20:	6010      	str	r0, [r2, #0]
 8011f22:	e7da      	b.n	8011eda <_free_r+0x22>
 8011f24:	d902      	bls.n	8011f2c <_free_r+0x74>
 8011f26:	230c      	movs	r3, #12
 8011f28:	602b      	str	r3, [r5, #0]
 8011f2a:	e7d6      	b.n	8011eda <_free_r+0x22>
 8011f2c:	6820      	ldr	r0, [r4, #0]
 8011f2e:	1821      	adds	r1, r4, r0
 8011f30:	428b      	cmp	r3, r1
 8011f32:	bf04      	itt	eq
 8011f34:	6819      	ldreq	r1, [r3, #0]
 8011f36:	685b      	ldreq	r3, [r3, #4]
 8011f38:	6063      	str	r3, [r4, #4]
 8011f3a:	bf04      	itt	eq
 8011f3c:	1809      	addeq	r1, r1, r0
 8011f3e:	6021      	streq	r1, [r4, #0]
 8011f40:	6054      	str	r4, [r2, #4]
 8011f42:	e7ca      	b.n	8011eda <_free_r+0x22>
 8011f44:	bd38      	pop	{r3, r4, r5, pc}
 8011f46:	bf00      	nop
 8011f48:	200008f8 	.word	0x200008f8

08011f4c <rshift>:
 8011f4c:	6903      	ldr	r3, [r0, #16]
 8011f4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011f52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011f5a:	f100 0414 	add.w	r4, r0, #20
 8011f5e:	dd45      	ble.n	8011fec <rshift+0xa0>
 8011f60:	f011 011f 	ands.w	r1, r1, #31
 8011f64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011f68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011f6c:	d10c      	bne.n	8011f88 <rshift+0x3c>
 8011f6e:	f100 0710 	add.w	r7, r0, #16
 8011f72:	4629      	mov	r1, r5
 8011f74:	42b1      	cmp	r1, r6
 8011f76:	d334      	bcc.n	8011fe2 <rshift+0x96>
 8011f78:	1a9b      	subs	r3, r3, r2
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	1eea      	subs	r2, r5, #3
 8011f7e:	4296      	cmp	r6, r2
 8011f80:	bf38      	it	cc
 8011f82:	2300      	movcc	r3, #0
 8011f84:	4423      	add	r3, r4
 8011f86:	e015      	b.n	8011fb4 <rshift+0x68>
 8011f88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011f8c:	f1c1 0820 	rsb	r8, r1, #32
 8011f90:	40cf      	lsrs	r7, r1
 8011f92:	f105 0e04 	add.w	lr, r5, #4
 8011f96:	46a1      	mov	r9, r4
 8011f98:	4576      	cmp	r6, lr
 8011f9a:	46f4      	mov	ip, lr
 8011f9c:	d815      	bhi.n	8011fca <rshift+0x7e>
 8011f9e:	1a9a      	subs	r2, r3, r2
 8011fa0:	0092      	lsls	r2, r2, #2
 8011fa2:	3a04      	subs	r2, #4
 8011fa4:	3501      	adds	r5, #1
 8011fa6:	42ae      	cmp	r6, r5
 8011fa8:	bf38      	it	cc
 8011faa:	2200      	movcc	r2, #0
 8011fac:	18a3      	adds	r3, r4, r2
 8011fae:	50a7      	str	r7, [r4, r2]
 8011fb0:	b107      	cbz	r7, 8011fb4 <rshift+0x68>
 8011fb2:	3304      	adds	r3, #4
 8011fb4:	1b1a      	subs	r2, r3, r4
 8011fb6:	42a3      	cmp	r3, r4
 8011fb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011fbc:	bf08      	it	eq
 8011fbe:	2300      	moveq	r3, #0
 8011fc0:	6102      	str	r2, [r0, #16]
 8011fc2:	bf08      	it	eq
 8011fc4:	6143      	streq	r3, [r0, #20]
 8011fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fca:	f8dc c000 	ldr.w	ip, [ip]
 8011fce:	fa0c fc08 	lsl.w	ip, ip, r8
 8011fd2:	ea4c 0707 	orr.w	r7, ip, r7
 8011fd6:	f849 7b04 	str.w	r7, [r9], #4
 8011fda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011fde:	40cf      	lsrs	r7, r1
 8011fe0:	e7da      	b.n	8011f98 <rshift+0x4c>
 8011fe2:	f851 cb04 	ldr.w	ip, [r1], #4
 8011fe6:	f847 cf04 	str.w	ip, [r7, #4]!
 8011fea:	e7c3      	b.n	8011f74 <rshift+0x28>
 8011fec:	4623      	mov	r3, r4
 8011fee:	e7e1      	b.n	8011fb4 <rshift+0x68>

08011ff0 <__hexdig_fun>:
 8011ff0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011ff4:	2b09      	cmp	r3, #9
 8011ff6:	d802      	bhi.n	8011ffe <__hexdig_fun+0xe>
 8011ff8:	3820      	subs	r0, #32
 8011ffa:	b2c0      	uxtb	r0, r0
 8011ffc:	4770      	bx	lr
 8011ffe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012002:	2b05      	cmp	r3, #5
 8012004:	d801      	bhi.n	801200a <__hexdig_fun+0x1a>
 8012006:	3847      	subs	r0, #71	@ 0x47
 8012008:	e7f7      	b.n	8011ffa <__hexdig_fun+0xa>
 801200a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801200e:	2b05      	cmp	r3, #5
 8012010:	d801      	bhi.n	8012016 <__hexdig_fun+0x26>
 8012012:	3827      	subs	r0, #39	@ 0x27
 8012014:	e7f1      	b.n	8011ffa <__hexdig_fun+0xa>
 8012016:	2000      	movs	r0, #0
 8012018:	4770      	bx	lr
	...

0801201c <__gethex>:
 801201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012020:	b085      	sub	sp, #20
 8012022:	468a      	mov	sl, r1
 8012024:	9302      	str	r3, [sp, #8]
 8012026:	680b      	ldr	r3, [r1, #0]
 8012028:	9001      	str	r0, [sp, #4]
 801202a:	4690      	mov	r8, r2
 801202c:	1c9c      	adds	r4, r3, #2
 801202e:	46a1      	mov	r9, r4
 8012030:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012034:	2830      	cmp	r0, #48	@ 0x30
 8012036:	d0fa      	beq.n	801202e <__gethex+0x12>
 8012038:	eba9 0303 	sub.w	r3, r9, r3
 801203c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012040:	f7ff ffd6 	bl	8011ff0 <__hexdig_fun>
 8012044:	4605      	mov	r5, r0
 8012046:	2800      	cmp	r0, #0
 8012048:	d168      	bne.n	801211c <__gethex+0x100>
 801204a:	49a0      	ldr	r1, [pc, #640]	@ (80122cc <__gethex+0x2b0>)
 801204c:	2201      	movs	r2, #1
 801204e:	4648      	mov	r0, r9
 8012050:	f7ff f812 	bl	8011078 <strncmp>
 8012054:	4607      	mov	r7, r0
 8012056:	2800      	cmp	r0, #0
 8012058:	d167      	bne.n	801212a <__gethex+0x10e>
 801205a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801205e:	4626      	mov	r6, r4
 8012060:	f7ff ffc6 	bl	8011ff0 <__hexdig_fun>
 8012064:	2800      	cmp	r0, #0
 8012066:	d062      	beq.n	801212e <__gethex+0x112>
 8012068:	4623      	mov	r3, r4
 801206a:	7818      	ldrb	r0, [r3, #0]
 801206c:	2830      	cmp	r0, #48	@ 0x30
 801206e:	4699      	mov	r9, r3
 8012070:	f103 0301 	add.w	r3, r3, #1
 8012074:	d0f9      	beq.n	801206a <__gethex+0x4e>
 8012076:	f7ff ffbb 	bl	8011ff0 <__hexdig_fun>
 801207a:	fab0 f580 	clz	r5, r0
 801207e:	096d      	lsrs	r5, r5, #5
 8012080:	f04f 0b01 	mov.w	fp, #1
 8012084:	464a      	mov	r2, r9
 8012086:	4616      	mov	r6, r2
 8012088:	3201      	adds	r2, #1
 801208a:	7830      	ldrb	r0, [r6, #0]
 801208c:	f7ff ffb0 	bl	8011ff0 <__hexdig_fun>
 8012090:	2800      	cmp	r0, #0
 8012092:	d1f8      	bne.n	8012086 <__gethex+0x6a>
 8012094:	498d      	ldr	r1, [pc, #564]	@ (80122cc <__gethex+0x2b0>)
 8012096:	2201      	movs	r2, #1
 8012098:	4630      	mov	r0, r6
 801209a:	f7fe ffed 	bl	8011078 <strncmp>
 801209e:	2800      	cmp	r0, #0
 80120a0:	d13f      	bne.n	8012122 <__gethex+0x106>
 80120a2:	b944      	cbnz	r4, 80120b6 <__gethex+0x9a>
 80120a4:	1c74      	adds	r4, r6, #1
 80120a6:	4622      	mov	r2, r4
 80120a8:	4616      	mov	r6, r2
 80120aa:	3201      	adds	r2, #1
 80120ac:	7830      	ldrb	r0, [r6, #0]
 80120ae:	f7ff ff9f 	bl	8011ff0 <__hexdig_fun>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d1f8      	bne.n	80120a8 <__gethex+0x8c>
 80120b6:	1ba4      	subs	r4, r4, r6
 80120b8:	00a7      	lsls	r7, r4, #2
 80120ba:	7833      	ldrb	r3, [r6, #0]
 80120bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80120c0:	2b50      	cmp	r3, #80	@ 0x50
 80120c2:	d13e      	bne.n	8012142 <__gethex+0x126>
 80120c4:	7873      	ldrb	r3, [r6, #1]
 80120c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80120c8:	d033      	beq.n	8012132 <__gethex+0x116>
 80120ca:	2b2d      	cmp	r3, #45	@ 0x2d
 80120cc:	d034      	beq.n	8012138 <__gethex+0x11c>
 80120ce:	1c71      	adds	r1, r6, #1
 80120d0:	2400      	movs	r4, #0
 80120d2:	7808      	ldrb	r0, [r1, #0]
 80120d4:	f7ff ff8c 	bl	8011ff0 <__hexdig_fun>
 80120d8:	1e43      	subs	r3, r0, #1
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	2b18      	cmp	r3, #24
 80120de:	d830      	bhi.n	8012142 <__gethex+0x126>
 80120e0:	f1a0 0210 	sub.w	r2, r0, #16
 80120e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80120e8:	f7ff ff82 	bl	8011ff0 <__hexdig_fun>
 80120ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80120f0:	fa5f fc8c 	uxtb.w	ip, ip
 80120f4:	f1bc 0f18 	cmp.w	ip, #24
 80120f8:	f04f 030a 	mov.w	r3, #10
 80120fc:	d91e      	bls.n	801213c <__gethex+0x120>
 80120fe:	b104      	cbz	r4, 8012102 <__gethex+0xe6>
 8012100:	4252      	negs	r2, r2
 8012102:	4417      	add	r7, r2
 8012104:	f8ca 1000 	str.w	r1, [sl]
 8012108:	b1ed      	cbz	r5, 8012146 <__gethex+0x12a>
 801210a:	f1bb 0f00 	cmp.w	fp, #0
 801210e:	bf0c      	ite	eq
 8012110:	2506      	moveq	r5, #6
 8012112:	2500      	movne	r5, #0
 8012114:	4628      	mov	r0, r5
 8012116:	b005      	add	sp, #20
 8012118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801211c:	2500      	movs	r5, #0
 801211e:	462c      	mov	r4, r5
 8012120:	e7b0      	b.n	8012084 <__gethex+0x68>
 8012122:	2c00      	cmp	r4, #0
 8012124:	d1c7      	bne.n	80120b6 <__gethex+0x9a>
 8012126:	4627      	mov	r7, r4
 8012128:	e7c7      	b.n	80120ba <__gethex+0x9e>
 801212a:	464e      	mov	r6, r9
 801212c:	462f      	mov	r7, r5
 801212e:	2501      	movs	r5, #1
 8012130:	e7c3      	b.n	80120ba <__gethex+0x9e>
 8012132:	2400      	movs	r4, #0
 8012134:	1cb1      	adds	r1, r6, #2
 8012136:	e7cc      	b.n	80120d2 <__gethex+0xb6>
 8012138:	2401      	movs	r4, #1
 801213a:	e7fb      	b.n	8012134 <__gethex+0x118>
 801213c:	fb03 0002 	mla	r0, r3, r2, r0
 8012140:	e7ce      	b.n	80120e0 <__gethex+0xc4>
 8012142:	4631      	mov	r1, r6
 8012144:	e7de      	b.n	8012104 <__gethex+0xe8>
 8012146:	eba6 0309 	sub.w	r3, r6, r9
 801214a:	3b01      	subs	r3, #1
 801214c:	4629      	mov	r1, r5
 801214e:	2b07      	cmp	r3, #7
 8012150:	dc0a      	bgt.n	8012168 <__gethex+0x14c>
 8012152:	9801      	ldr	r0, [sp, #4]
 8012154:	f000 fa46 	bl	80125e4 <_Balloc>
 8012158:	4604      	mov	r4, r0
 801215a:	b940      	cbnz	r0, 801216e <__gethex+0x152>
 801215c:	4b5c      	ldr	r3, [pc, #368]	@ (80122d0 <__gethex+0x2b4>)
 801215e:	4602      	mov	r2, r0
 8012160:	21e4      	movs	r1, #228	@ 0xe4
 8012162:	485c      	ldr	r0, [pc, #368]	@ (80122d4 <__gethex+0x2b8>)
 8012164:	f7ff f83e 	bl	80111e4 <__assert_func>
 8012168:	3101      	adds	r1, #1
 801216a:	105b      	asrs	r3, r3, #1
 801216c:	e7ef      	b.n	801214e <__gethex+0x132>
 801216e:	f100 0a14 	add.w	sl, r0, #20
 8012172:	2300      	movs	r3, #0
 8012174:	4655      	mov	r5, sl
 8012176:	469b      	mov	fp, r3
 8012178:	45b1      	cmp	r9, r6
 801217a:	d337      	bcc.n	80121ec <__gethex+0x1d0>
 801217c:	f845 bb04 	str.w	fp, [r5], #4
 8012180:	eba5 050a 	sub.w	r5, r5, sl
 8012184:	10ad      	asrs	r5, r5, #2
 8012186:	6125      	str	r5, [r4, #16]
 8012188:	4658      	mov	r0, fp
 801218a:	f000 fb1d 	bl	80127c8 <__hi0bits>
 801218e:	016d      	lsls	r5, r5, #5
 8012190:	f8d8 6000 	ldr.w	r6, [r8]
 8012194:	1a2d      	subs	r5, r5, r0
 8012196:	42b5      	cmp	r5, r6
 8012198:	dd54      	ble.n	8012244 <__gethex+0x228>
 801219a:	1bad      	subs	r5, r5, r6
 801219c:	4629      	mov	r1, r5
 801219e:	4620      	mov	r0, r4
 80121a0:	f000 feb1 	bl	8012f06 <__any_on>
 80121a4:	4681      	mov	r9, r0
 80121a6:	b178      	cbz	r0, 80121c8 <__gethex+0x1ac>
 80121a8:	1e6b      	subs	r3, r5, #1
 80121aa:	1159      	asrs	r1, r3, #5
 80121ac:	f003 021f 	and.w	r2, r3, #31
 80121b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80121b4:	f04f 0901 	mov.w	r9, #1
 80121b8:	fa09 f202 	lsl.w	r2, r9, r2
 80121bc:	420a      	tst	r2, r1
 80121be:	d003      	beq.n	80121c8 <__gethex+0x1ac>
 80121c0:	454b      	cmp	r3, r9
 80121c2:	dc36      	bgt.n	8012232 <__gethex+0x216>
 80121c4:	f04f 0902 	mov.w	r9, #2
 80121c8:	4629      	mov	r1, r5
 80121ca:	4620      	mov	r0, r4
 80121cc:	f7ff febe 	bl	8011f4c <rshift>
 80121d0:	442f      	add	r7, r5
 80121d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80121d6:	42bb      	cmp	r3, r7
 80121d8:	da42      	bge.n	8012260 <__gethex+0x244>
 80121da:	9801      	ldr	r0, [sp, #4]
 80121dc:	4621      	mov	r1, r4
 80121de:	f000 fa41 	bl	8012664 <_Bfree>
 80121e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80121e4:	2300      	movs	r3, #0
 80121e6:	6013      	str	r3, [r2, #0]
 80121e8:	25a3      	movs	r5, #163	@ 0xa3
 80121ea:	e793      	b.n	8012114 <__gethex+0xf8>
 80121ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80121f0:	2a2e      	cmp	r2, #46	@ 0x2e
 80121f2:	d012      	beq.n	801221a <__gethex+0x1fe>
 80121f4:	2b20      	cmp	r3, #32
 80121f6:	d104      	bne.n	8012202 <__gethex+0x1e6>
 80121f8:	f845 bb04 	str.w	fp, [r5], #4
 80121fc:	f04f 0b00 	mov.w	fp, #0
 8012200:	465b      	mov	r3, fp
 8012202:	7830      	ldrb	r0, [r6, #0]
 8012204:	9303      	str	r3, [sp, #12]
 8012206:	f7ff fef3 	bl	8011ff0 <__hexdig_fun>
 801220a:	9b03      	ldr	r3, [sp, #12]
 801220c:	f000 000f 	and.w	r0, r0, #15
 8012210:	4098      	lsls	r0, r3
 8012212:	ea4b 0b00 	orr.w	fp, fp, r0
 8012216:	3304      	adds	r3, #4
 8012218:	e7ae      	b.n	8012178 <__gethex+0x15c>
 801221a:	45b1      	cmp	r9, r6
 801221c:	d8ea      	bhi.n	80121f4 <__gethex+0x1d8>
 801221e:	492b      	ldr	r1, [pc, #172]	@ (80122cc <__gethex+0x2b0>)
 8012220:	9303      	str	r3, [sp, #12]
 8012222:	2201      	movs	r2, #1
 8012224:	4630      	mov	r0, r6
 8012226:	f7fe ff27 	bl	8011078 <strncmp>
 801222a:	9b03      	ldr	r3, [sp, #12]
 801222c:	2800      	cmp	r0, #0
 801222e:	d1e1      	bne.n	80121f4 <__gethex+0x1d8>
 8012230:	e7a2      	b.n	8012178 <__gethex+0x15c>
 8012232:	1ea9      	subs	r1, r5, #2
 8012234:	4620      	mov	r0, r4
 8012236:	f000 fe66 	bl	8012f06 <__any_on>
 801223a:	2800      	cmp	r0, #0
 801223c:	d0c2      	beq.n	80121c4 <__gethex+0x1a8>
 801223e:	f04f 0903 	mov.w	r9, #3
 8012242:	e7c1      	b.n	80121c8 <__gethex+0x1ac>
 8012244:	da09      	bge.n	801225a <__gethex+0x23e>
 8012246:	1b75      	subs	r5, r6, r5
 8012248:	4621      	mov	r1, r4
 801224a:	9801      	ldr	r0, [sp, #4]
 801224c:	462a      	mov	r2, r5
 801224e:	f000 fc21 	bl	8012a94 <__lshift>
 8012252:	1b7f      	subs	r7, r7, r5
 8012254:	4604      	mov	r4, r0
 8012256:	f100 0a14 	add.w	sl, r0, #20
 801225a:	f04f 0900 	mov.w	r9, #0
 801225e:	e7b8      	b.n	80121d2 <__gethex+0x1b6>
 8012260:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012264:	42bd      	cmp	r5, r7
 8012266:	dd6f      	ble.n	8012348 <__gethex+0x32c>
 8012268:	1bed      	subs	r5, r5, r7
 801226a:	42ae      	cmp	r6, r5
 801226c:	dc34      	bgt.n	80122d8 <__gethex+0x2bc>
 801226e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012272:	2b02      	cmp	r3, #2
 8012274:	d022      	beq.n	80122bc <__gethex+0x2a0>
 8012276:	2b03      	cmp	r3, #3
 8012278:	d024      	beq.n	80122c4 <__gethex+0x2a8>
 801227a:	2b01      	cmp	r3, #1
 801227c:	d115      	bne.n	80122aa <__gethex+0x28e>
 801227e:	42ae      	cmp	r6, r5
 8012280:	d113      	bne.n	80122aa <__gethex+0x28e>
 8012282:	2e01      	cmp	r6, #1
 8012284:	d10b      	bne.n	801229e <__gethex+0x282>
 8012286:	9a02      	ldr	r2, [sp, #8]
 8012288:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801228c:	6013      	str	r3, [r2, #0]
 801228e:	2301      	movs	r3, #1
 8012290:	6123      	str	r3, [r4, #16]
 8012292:	f8ca 3000 	str.w	r3, [sl]
 8012296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012298:	2562      	movs	r5, #98	@ 0x62
 801229a:	601c      	str	r4, [r3, #0]
 801229c:	e73a      	b.n	8012114 <__gethex+0xf8>
 801229e:	1e71      	subs	r1, r6, #1
 80122a0:	4620      	mov	r0, r4
 80122a2:	f000 fe30 	bl	8012f06 <__any_on>
 80122a6:	2800      	cmp	r0, #0
 80122a8:	d1ed      	bne.n	8012286 <__gethex+0x26a>
 80122aa:	9801      	ldr	r0, [sp, #4]
 80122ac:	4621      	mov	r1, r4
 80122ae:	f000 f9d9 	bl	8012664 <_Bfree>
 80122b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80122b4:	2300      	movs	r3, #0
 80122b6:	6013      	str	r3, [r2, #0]
 80122b8:	2550      	movs	r5, #80	@ 0x50
 80122ba:	e72b      	b.n	8012114 <__gethex+0xf8>
 80122bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d1f3      	bne.n	80122aa <__gethex+0x28e>
 80122c2:	e7e0      	b.n	8012286 <__gethex+0x26a>
 80122c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d1dd      	bne.n	8012286 <__gethex+0x26a>
 80122ca:	e7ee      	b.n	80122aa <__gethex+0x28e>
 80122cc:	08013d74 	.word	0x08013d74
 80122d0:	08013fc2 	.word	0x08013fc2
 80122d4:	08013fd3 	.word	0x08013fd3
 80122d8:	1e6f      	subs	r7, r5, #1
 80122da:	f1b9 0f00 	cmp.w	r9, #0
 80122de:	d130      	bne.n	8012342 <__gethex+0x326>
 80122e0:	b127      	cbz	r7, 80122ec <__gethex+0x2d0>
 80122e2:	4639      	mov	r1, r7
 80122e4:	4620      	mov	r0, r4
 80122e6:	f000 fe0e 	bl	8012f06 <__any_on>
 80122ea:	4681      	mov	r9, r0
 80122ec:	117a      	asrs	r2, r7, #5
 80122ee:	2301      	movs	r3, #1
 80122f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80122f4:	f007 071f 	and.w	r7, r7, #31
 80122f8:	40bb      	lsls	r3, r7
 80122fa:	4213      	tst	r3, r2
 80122fc:	4629      	mov	r1, r5
 80122fe:	4620      	mov	r0, r4
 8012300:	bf18      	it	ne
 8012302:	f049 0902 	orrne.w	r9, r9, #2
 8012306:	f7ff fe21 	bl	8011f4c <rshift>
 801230a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801230e:	1b76      	subs	r6, r6, r5
 8012310:	2502      	movs	r5, #2
 8012312:	f1b9 0f00 	cmp.w	r9, #0
 8012316:	d047      	beq.n	80123a8 <__gethex+0x38c>
 8012318:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801231c:	2b02      	cmp	r3, #2
 801231e:	d015      	beq.n	801234c <__gethex+0x330>
 8012320:	2b03      	cmp	r3, #3
 8012322:	d017      	beq.n	8012354 <__gethex+0x338>
 8012324:	2b01      	cmp	r3, #1
 8012326:	d109      	bne.n	801233c <__gethex+0x320>
 8012328:	f019 0f02 	tst.w	r9, #2
 801232c:	d006      	beq.n	801233c <__gethex+0x320>
 801232e:	f8da 3000 	ldr.w	r3, [sl]
 8012332:	ea49 0903 	orr.w	r9, r9, r3
 8012336:	f019 0f01 	tst.w	r9, #1
 801233a:	d10e      	bne.n	801235a <__gethex+0x33e>
 801233c:	f045 0510 	orr.w	r5, r5, #16
 8012340:	e032      	b.n	80123a8 <__gethex+0x38c>
 8012342:	f04f 0901 	mov.w	r9, #1
 8012346:	e7d1      	b.n	80122ec <__gethex+0x2d0>
 8012348:	2501      	movs	r5, #1
 801234a:	e7e2      	b.n	8012312 <__gethex+0x2f6>
 801234c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801234e:	f1c3 0301 	rsb	r3, r3, #1
 8012352:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012356:	2b00      	cmp	r3, #0
 8012358:	d0f0      	beq.n	801233c <__gethex+0x320>
 801235a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801235e:	f104 0314 	add.w	r3, r4, #20
 8012362:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012366:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801236a:	f04f 0c00 	mov.w	ip, #0
 801236e:	4618      	mov	r0, r3
 8012370:	f853 2b04 	ldr.w	r2, [r3], #4
 8012374:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012378:	d01b      	beq.n	80123b2 <__gethex+0x396>
 801237a:	3201      	adds	r2, #1
 801237c:	6002      	str	r2, [r0, #0]
 801237e:	2d02      	cmp	r5, #2
 8012380:	f104 0314 	add.w	r3, r4, #20
 8012384:	d13c      	bne.n	8012400 <__gethex+0x3e4>
 8012386:	f8d8 2000 	ldr.w	r2, [r8]
 801238a:	3a01      	subs	r2, #1
 801238c:	42b2      	cmp	r2, r6
 801238e:	d109      	bne.n	80123a4 <__gethex+0x388>
 8012390:	1171      	asrs	r1, r6, #5
 8012392:	2201      	movs	r2, #1
 8012394:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012398:	f006 061f 	and.w	r6, r6, #31
 801239c:	fa02 f606 	lsl.w	r6, r2, r6
 80123a0:	421e      	tst	r6, r3
 80123a2:	d13a      	bne.n	801241a <__gethex+0x3fe>
 80123a4:	f045 0520 	orr.w	r5, r5, #32
 80123a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123aa:	601c      	str	r4, [r3, #0]
 80123ac:	9b02      	ldr	r3, [sp, #8]
 80123ae:	601f      	str	r7, [r3, #0]
 80123b0:	e6b0      	b.n	8012114 <__gethex+0xf8>
 80123b2:	4299      	cmp	r1, r3
 80123b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80123b8:	d8d9      	bhi.n	801236e <__gethex+0x352>
 80123ba:	68a3      	ldr	r3, [r4, #8]
 80123bc:	459b      	cmp	fp, r3
 80123be:	db17      	blt.n	80123f0 <__gethex+0x3d4>
 80123c0:	6861      	ldr	r1, [r4, #4]
 80123c2:	9801      	ldr	r0, [sp, #4]
 80123c4:	3101      	adds	r1, #1
 80123c6:	f000 f90d 	bl	80125e4 <_Balloc>
 80123ca:	4681      	mov	r9, r0
 80123cc:	b918      	cbnz	r0, 80123d6 <__gethex+0x3ba>
 80123ce:	4b1a      	ldr	r3, [pc, #104]	@ (8012438 <__gethex+0x41c>)
 80123d0:	4602      	mov	r2, r0
 80123d2:	2184      	movs	r1, #132	@ 0x84
 80123d4:	e6c5      	b.n	8012162 <__gethex+0x146>
 80123d6:	6922      	ldr	r2, [r4, #16]
 80123d8:	3202      	adds	r2, #2
 80123da:	f104 010c 	add.w	r1, r4, #12
 80123de:	0092      	lsls	r2, r2, #2
 80123e0:	300c      	adds	r0, #12
 80123e2:	f7fe fee2 	bl	80111aa <memcpy>
 80123e6:	4621      	mov	r1, r4
 80123e8:	9801      	ldr	r0, [sp, #4]
 80123ea:	f000 f93b 	bl	8012664 <_Bfree>
 80123ee:	464c      	mov	r4, r9
 80123f0:	6923      	ldr	r3, [r4, #16]
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80123f8:	6122      	str	r2, [r4, #16]
 80123fa:	2201      	movs	r2, #1
 80123fc:	615a      	str	r2, [r3, #20]
 80123fe:	e7be      	b.n	801237e <__gethex+0x362>
 8012400:	6922      	ldr	r2, [r4, #16]
 8012402:	455a      	cmp	r2, fp
 8012404:	dd0b      	ble.n	801241e <__gethex+0x402>
 8012406:	2101      	movs	r1, #1
 8012408:	4620      	mov	r0, r4
 801240a:	f7ff fd9f 	bl	8011f4c <rshift>
 801240e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012412:	3701      	adds	r7, #1
 8012414:	42bb      	cmp	r3, r7
 8012416:	f6ff aee0 	blt.w	80121da <__gethex+0x1be>
 801241a:	2501      	movs	r5, #1
 801241c:	e7c2      	b.n	80123a4 <__gethex+0x388>
 801241e:	f016 061f 	ands.w	r6, r6, #31
 8012422:	d0fa      	beq.n	801241a <__gethex+0x3fe>
 8012424:	4453      	add	r3, sl
 8012426:	f1c6 0620 	rsb	r6, r6, #32
 801242a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801242e:	f000 f9cb 	bl	80127c8 <__hi0bits>
 8012432:	42b0      	cmp	r0, r6
 8012434:	dbe7      	blt.n	8012406 <__gethex+0x3ea>
 8012436:	e7f0      	b.n	801241a <__gethex+0x3fe>
 8012438:	08013fc2 	.word	0x08013fc2

0801243c <L_shift>:
 801243c:	f1c2 0208 	rsb	r2, r2, #8
 8012440:	0092      	lsls	r2, r2, #2
 8012442:	b570      	push	{r4, r5, r6, lr}
 8012444:	f1c2 0620 	rsb	r6, r2, #32
 8012448:	6843      	ldr	r3, [r0, #4]
 801244a:	6804      	ldr	r4, [r0, #0]
 801244c:	fa03 f506 	lsl.w	r5, r3, r6
 8012450:	432c      	orrs	r4, r5
 8012452:	40d3      	lsrs	r3, r2
 8012454:	6004      	str	r4, [r0, #0]
 8012456:	f840 3f04 	str.w	r3, [r0, #4]!
 801245a:	4288      	cmp	r0, r1
 801245c:	d3f4      	bcc.n	8012448 <L_shift+0xc>
 801245e:	bd70      	pop	{r4, r5, r6, pc}

08012460 <__match>:
 8012460:	b530      	push	{r4, r5, lr}
 8012462:	6803      	ldr	r3, [r0, #0]
 8012464:	3301      	adds	r3, #1
 8012466:	f811 4b01 	ldrb.w	r4, [r1], #1
 801246a:	b914      	cbnz	r4, 8012472 <__match+0x12>
 801246c:	6003      	str	r3, [r0, #0]
 801246e:	2001      	movs	r0, #1
 8012470:	bd30      	pop	{r4, r5, pc}
 8012472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012476:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801247a:	2d19      	cmp	r5, #25
 801247c:	bf98      	it	ls
 801247e:	3220      	addls	r2, #32
 8012480:	42a2      	cmp	r2, r4
 8012482:	d0f0      	beq.n	8012466 <__match+0x6>
 8012484:	2000      	movs	r0, #0
 8012486:	e7f3      	b.n	8012470 <__match+0x10>

08012488 <__hexnan>:
 8012488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	680b      	ldr	r3, [r1, #0]
 801248e:	6801      	ldr	r1, [r0, #0]
 8012490:	115e      	asrs	r6, r3, #5
 8012492:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012496:	f013 031f 	ands.w	r3, r3, #31
 801249a:	b087      	sub	sp, #28
 801249c:	bf18      	it	ne
 801249e:	3604      	addne	r6, #4
 80124a0:	2500      	movs	r5, #0
 80124a2:	1f37      	subs	r7, r6, #4
 80124a4:	4682      	mov	sl, r0
 80124a6:	4690      	mov	r8, r2
 80124a8:	9301      	str	r3, [sp, #4]
 80124aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80124ae:	46b9      	mov	r9, r7
 80124b0:	463c      	mov	r4, r7
 80124b2:	9502      	str	r5, [sp, #8]
 80124b4:	46ab      	mov	fp, r5
 80124b6:	784a      	ldrb	r2, [r1, #1]
 80124b8:	1c4b      	adds	r3, r1, #1
 80124ba:	9303      	str	r3, [sp, #12]
 80124bc:	b342      	cbz	r2, 8012510 <__hexnan+0x88>
 80124be:	4610      	mov	r0, r2
 80124c0:	9105      	str	r1, [sp, #20]
 80124c2:	9204      	str	r2, [sp, #16]
 80124c4:	f7ff fd94 	bl	8011ff0 <__hexdig_fun>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d151      	bne.n	8012570 <__hexnan+0xe8>
 80124cc:	9a04      	ldr	r2, [sp, #16]
 80124ce:	9905      	ldr	r1, [sp, #20]
 80124d0:	2a20      	cmp	r2, #32
 80124d2:	d818      	bhi.n	8012506 <__hexnan+0x7e>
 80124d4:	9b02      	ldr	r3, [sp, #8]
 80124d6:	459b      	cmp	fp, r3
 80124d8:	dd13      	ble.n	8012502 <__hexnan+0x7a>
 80124da:	454c      	cmp	r4, r9
 80124dc:	d206      	bcs.n	80124ec <__hexnan+0x64>
 80124de:	2d07      	cmp	r5, #7
 80124e0:	dc04      	bgt.n	80124ec <__hexnan+0x64>
 80124e2:	462a      	mov	r2, r5
 80124e4:	4649      	mov	r1, r9
 80124e6:	4620      	mov	r0, r4
 80124e8:	f7ff ffa8 	bl	801243c <L_shift>
 80124ec:	4544      	cmp	r4, r8
 80124ee:	d952      	bls.n	8012596 <__hexnan+0x10e>
 80124f0:	2300      	movs	r3, #0
 80124f2:	f1a4 0904 	sub.w	r9, r4, #4
 80124f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80124fa:	f8cd b008 	str.w	fp, [sp, #8]
 80124fe:	464c      	mov	r4, r9
 8012500:	461d      	mov	r5, r3
 8012502:	9903      	ldr	r1, [sp, #12]
 8012504:	e7d7      	b.n	80124b6 <__hexnan+0x2e>
 8012506:	2a29      	cmp	r2, #41	@ 0x29
 8012508:	d157      	bne.n	80125ba <__hexnan+0x132>
 801250a:	3102      	adds	r1, #2
 801250c:	f8ca 1000 	str.w	r1, [sl]
 8012510:	f1bb 0f00 	cmp.w	fp, #0
 8012514:	d051      	beq.n	80125ba <__hexnan+0x132>
 8012516:	454c      	cmp	r4, r9
 8012518:	d206      	bcs.n	8012528 <__hexnan+0xa0>
 801251a:	2d07      	cmp	r5, #7
 801251c:	dc04      	bgt.n	8012528 <__hexnan+0xa0>
 801251e:	462a      	mov	r2, r5
 8012520:	4649      	mov	r1, r9
 8012522:	4620      	mov	r0, r4
 8012524:	f7ff ff8a 	bl	801243c <L_shift>
 8012528:	4544      	cmp	r4, r8
 801252a:	d936      	bls.n	801259a <__hexnan+0x112>
 801252c:	f1a8 0204 	sub.w	r2, r8, #4
 8012530:	4623      	mov	r3, r4
 8012532:	f853 1b04 	ldr.w	r1, [r3], #4
 8012536:	f842 1f04 	str.w	r1, [r2, #4]!
 801253a:	429f      	cmp	r7, r3
 801253c:	d2f9      	bcs.n	8012532 <__hexnan+0xaa>
 801253e:	1b3b      	subs	r3, r7, r4
 8012540:	f023 0303 	bic.w	r3, r3, #3
 8012544:	3304      	adds	r3, #4
 8012546:	3401      	adds	r4, #1
 8012548:	3e03      	subs	r6, #3
 801254a:	42b4      	cmp	r4, r6
 801254c:	bf88      	it	hi
 801254e:	2304      	movhi	r3, #4
 8012550:	4443      	add	r3, r8
 8012552:	2200      	movs	r2, #0
 8012554:	f843 2b04 	str.w	r2, [r3], #4
 8012558:	429f      	cmp	r7, r3
 801255a:	d2fb      	bcs.n	8012554 <__hexnan+0xcc>
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	b91b      	cbnz	r3, 8012568 <__hexnan+0xe0>
 8012560:	4547      	cmp	r7, r8
 8012562:	d128      	bne.n	80125b6 <__hexnan+0x12e>
 8012564:	2301      	movs	r3, #1
 8012566:	603b      	str	r3, [r7, #0]
 8012568:	2005      	movs	r0, #5
 801256a:	b007      	add	sp, #28
 801256c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012570:	3501      	adds	r5, #1
 8012572:	2d08      	cmp	r5, #8
 8012574:	f10b 0b01 	add.w	fp, fp, #1
 8012578:	dd06      	ble.n	8012588 <__hexnan+0x100>
 801257a:	4544      	cmp	r4, r8
 801257c:	d9c1      	bls.n	8012502 <__hexnan+0x7a>
 801257e:	2300      	movs	r3, #0
 8012580:	f844 3c04 	str.w	r3, [r4, #-4]
 8012584:	2501      	movs	r5, #1
 8012586:	3c04      	subs	r4, #4
 8012588:	6822      	ldr	r2, [r4, #0]
 801258a:	f000 000f 	and.w	r0, r0, #15
 801258e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012592:	6020      	str	r0, [r4, #0]
 8012594:	e7b5      	b.n	8012502 <__hexnan+0x7a>
 8012596:	2508      	movs	r5, #8
 8012598:	e7b3      	b.n	8012502 <__hexnan+0x7a>
 801259a:	9b01      	ldr	r3, [sp, #4]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d0dd      	beq.n	801255c <__hexnan+0xd4>
 80125a0:	f1c3 0320 	rsb	r3, r3, #32
 80125a4:	f04f 32ff 	mov.w	r2, #4294967295
 80125a8:	40da      	lsrs	r2, r3
 80125aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80125ae:	4013      	ands	r3, r2
 80125b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80125b4:	e7d2      	b.n	801255c <__hexnan+0xd4>
 80125b6:	3f04      	subs	r7, #4
 80125b8:	e7d0      	b.n	801255c <__hexnan+0xd4>
 80125ba:	2004      	movs	r0, #4
 80125bc:	e7d5      	b.n	801256a <__hexnan+0xe2>

080125be <__ascii_mbtowc>:
 80125be:	b082      	sub	sp, #8
 80125c0:	b901      	cbnz	r1, 80125c4 <__ascii_mbtowc+0x6>
 80125c2:	a901      	add	r1, sp, #4
 80125c4:	b142      	cbz	r2, 80125d8 <__ascii_mbtowc+0x1a>
 80125c6:	b14b      	cbz	r3, 80125dc <__ascii_mbtowc+0x1e>
 80125c8:	7813      	ldrb	r3, [r2, #0]
 80125ca:	600b      	str	r3, [r1, #0]
 80125cc:	7812      	ldrb	r2, [r2, #0]
 80125ce:	1e10      	subs	r0, r2, #0
 80125d0:	bf18      	it	ne
 80125d2:	2001      	movne	r0, #1
 80125d4:	b002      	add	sp, #8
 80125d6:	4770      	bx	lr
 80125d8:	4610      	mov	r0, r2
 80125da:	e7fb      	b.n	80125d4 <__ascii_mbtowc+0x16>
 80125dc:	f06f 0001 	mvn.w	r0, #1
 80125e0:	e7f8      	b.n	80125d4 <__ascii_mbtowc+0x16>
	...

080125e4 <_Balloc>:
 80125e4:	b570      	push	{r4, r5, r6, lr}
 80125e6:	69c6      	ldr	r6, [r0, #28]
 80125e8:	4604      	mov	r4, r0
 80125ea:	460d      	mov	r5, r1
 80125ec:	b976      	cbnz	r6, 801260c <_Balloc+0x28>
 80125ee:	2010      	movs	r0, #16
 80125f0:	f7fc fd9c 	bl	800f12c <malloc>
 80125f4:	4602      	mov	r2, r0
 80125f6:	61e0      	str	r0, [r4, #28]
 80125f8:	b920      	cbnz	r0, 8012604 <_Balloc+0x20>
 80125fa:	4b18      	ldr	r3, [pc, #96]	@ (801265c <_Balloc+0x78>)
 80125fc:	4818      	ldr	r0, [pc, #96]	@ (8012660 <_Balloc+0x7c>)
 80125fe:	216b      	movs	r1, #107	@ 0x6b
 8012600:	f7fe fdf0 	bl	80111e4 <__assert_func>
 8012604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012608:	6006      	str	r6, [r0, #0]
 801260a:	60c6      	str	r6, [r0, #12]
 801260c:	69e6      	ldr	r6, [r4, #28]
 801260e:	68f3      	ldr	r3, [r6, #12]
 8012610:	b183      	cbz	r3, 8012634 <_Balloc+0x50>
 8012612:	69e3      	ldr	r3, [r4, #28]
 8012614:	68db      	ldr	r3, [r3, #12]
 8012616:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801261a:	b9b8      	cbnz	r0, 801264c <_Balloc+0x68>
 801261c:	2101      	movs	r1, #1
 801261e:	fa01 f605 	lsl.w	r6, r1, r5
 8012622:	1d72      	adds	r2, r6, #5
 8012624:	0092      	lsls	r2, r2, #2
 8012626:	4620      	mov	r0, r4
 8012628:	f7fc fd6c 	bl	800f104 <_calloc_r>
 801262c:	b160      	cbz	r0, 8012648 <_Balloc+0x64>
 801262e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012632:	e00e      	b.n	8012652 <_Balloc+0x6e>
 8012634:	2221      	movs	r2, #33	@ 0x21
 8012636:	2104      	movs	r1, #4
 8012638:	4620      	mov	r0, r4
 801263a:	f7fc fd63 	bl	800f104 <_calloc_r>
 801263e:	69e3      	ldr	r3, [r4, #28]
 8012640:	60f0      	str	r0, [r6, #12]
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d1e4      	bne.n	8012612 <_Balloc+0x2e>
 8012648:	2000      	movs	r0, #0
 801264a:	bd70      	pop	{r4, r5, r6, pc}
 801264c:	6802      	ldr	r2, [r0, #0]
 801264e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012652:	2300      	movs	r3, #0
 8012654:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012658:	e7f7      	b.n	801264a <_Balloc+0x66>
 801265a:	bf00      	nop
 801265c:	08013f53 	.word	0x08013f53
 8012660:	08014033 	.word	0x08014033

08012664 <_Bfree>:
 8012664:	b570      	push	{r4, r5, r6, lr}
 8012666:	69c6      	ldr	r6, [r0, #28]
 8012668:	4605      	mov	r5, r0
 801266a:	460c      	mov	r4, r1
 801266c:	b976      	cbnz	r6, 801268c <_Bfree+0x28>
 801266e:	2010      	movs	r0, #16
 8012670:	f7fc fd5c 	bl	800f12c <malloc>
 8012674:	4602      	mov	r2, r0
 8012676:	61e8      	str	r0, [r5, #28]
 8012678:	b920      	cbnz	r0, 8012684 <_Bfree+0x20>
 801267a:	4b09      	ldr	r3, [pc, #36]	@ (80126a0 <_Bfree+0x3c>)
 801267c:	4809      	ldr	r0, [pc, #36]	@ (80126a4 <_Bfree+0x40>)
 801267e:	218f      	movs	r1, #143	@ 0x8f
 8012680:	f7fe fdb0 	bl	80111e4 <__assert_func>
 8012684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012688:	6006      	str	r6, [r0, #0]
 801268a:	60c6      	str	r6, [r0, #12]
 801268c:	b13c      	cbz	r4, 801269e <_Bfree+0x3a>
 801268e:	69eb      	ldr	r3, [r5, #28]
 8012690:	6862      	ldr	r2, [r4, #4]
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012698:	6021      	str	r1, [r4, #0]
 801269a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801269e:	bd70      	pop	{r4, r5, r6, pc}
 80126a0:	08013f53 	.word	0x08013f53
 80126a4:	08014033 	.word	0x08014033

080126a8 <__multadd>:
 80126a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ac:	690d      	ldr	r5, [r1, #16]
 80126ae:	4607      	mov	r7, r0
 80126b0:	460c      	mov	r4, r1
 80126b2:	461e      	mov	r6, r3
 80126b4:	f101 0c14 	add.w	ip, r1, #20
 80126b8:	2000      	movs	r0, #0
 80126ba:	f8dc 3000 	ldr.w	r3, [ip]
 80126be:	b299      	uxth	r1, r3
 80126c0:	fb02 6101 	mla	r1, r2, r1, r6
 80126c4:	0c1e      	lsrs	r6, r3, #16
 80126c6:	0c0b      	lsrs	r3, r1, #16
 80126c8:	fb02 3306 	mla	r3, r2, r6, r3
 80126cc:	b289      	uxth	r1, r1
 80126ce:	3001      	adds	r0, #1
 80126d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80126d4:	4285      	cmp	r5, r0
 80126d6:	f84c 1b04 	str.w	r1, [ip], #4
 80126da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80126de:	dcec      	bgt.n	80126ba <__multadd+0x12>
 80126e0:	b30e      	cbz	r6, 8012726 <__multadd+0x7e>
 80126e2:	68a3      	ldr	r3, [r4, #8]
 80126e4:	42ab      	cmp	r3, r5
 80126e6:	dc19      	bgt.n	801271c <__multadd+0x74>
 80126e8:	6861      	ldr	r1, [r4, #4]
 80126ea:	4638      	mov	r0, r7
 80126ec:	3101      	adds	r1, #1
 80126ee:	f7ff ff79 	bl	80125e4 <_Balloc>
 80126f2:	4680      	mov	r8, r0
 80126f4:	b928      	cbnz	r0, 8012702 <__multadd+0x5a>
 80126f6:	4602      	mov	r2, r0
 80126f8:	4b0c      	ldr	r3, [pc, #48]	@ (801272c <__multadd+0x84>)
 80126fa:	480d      	ldr	r0, [pc, #52]	@ (8012730 <__multadd+0x88>)
 80126fc:	21ba      	movs	r1, #186	@ 0xba
 80126fe:	f7fe fd71 	bl	80111e4 <__assert_func>
 8012702:	6922      	ldr	r2, [r4, #16]
 8012704:	3202      	adds	r2, #2
 8012706:	f104 010c 	add.w	r1, r4, #12
 801270a:	0092      	lsls	r2, r2, #2
 801270c:	300c      	adds	r0, #12
 801270e:	f7fe fd4c 	bl	80111aa <memcpy>
 8012712:	4621      	mov	r1, r4
 8012714:	4638      	mov	r0, r7
 8012716:	f7ff ffa5 	bl	8012664 <_Bfree>
 801271a:	4644      	mov	r4, r8
 801271c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012720:	3501      	adds	r5, #1
 8012722:	615e      	str	r6, [r3, #20]
 8012724:	6125      	str	r5, [r4, #16]
 8012726:	4620      	mov	r0, r4
 8012728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801272c:	08013fc2 	.word	0x08013fc2
 8012730:	08014033 	.word	0x08014033

08012734 <__s2b>:
 8012734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012738:	460c      	mov	r4, r1
 801273a:	4615      	mov	r5, r2
 801273c:	461f      	mov	r7, r3
 801273e:	2209      	movs	r2, #9
 8012740:	3308      	adds	r3, #8
 8012742:	4606      	mov	r6, r0
 8012744:	fb93 f3f2 	sdiv	r3, r3, r2
 8012748:	2100      	movs	r1, #0
 801274a:	2201      	movs	r2, #1
 801274c:	429a      	cmp	r2, r3
 801274e:	db09      	blt.n	8012764 <__s2b+0x30>
 8012750:	4630      	mov	r0, r6
 8012752:	f7ff ff47 	bl	80125e4 <_Balloc>
 8012756:	b940      	cbnz	r0, 801276a <__s2b+0x36>
 8012758:	4602      	mov	r2, r0
 801275a:	4b19      	ldr	r3, [pc, #100]	@ (80127c0 <__s2b+0x8c>)
 801275c:	4819      	ldr	r0, [pc, #100]	@ (80127c4 <__s2b+0x90>)
 801275e:	21d3      	movs	r1, #211	@ 0xd3
 8012760:	f7fe fd40 	bl	80111e4 <__assert_func>
 8012764:	0052      	lsls	r2, r2, #1
 8012766:	3101      	adds	r1, #1
 8012768:	e7f0      	b.n	801274c <__s2b+0x18>
 801276a:	9b08      	ldr	r3, [sp, #32]
 801276c:	6143      	str	r3, [r0, #20]
 801276e:	2d09      	cmp	r5, #9
 8012770:	f04f 0301 	mov.w	r3, #1
 8012774:	6103      	str	r3, [r0, #16]
 8012776:	dd16      	ble.n	80127a6 <__s2b+0x72>
 8012778:	f104 0909 	add.w	r9, r4, #9
 801277c:	46c8      	mov	r8, r9
 801277e:	442c      	add	r4, r5
 8012780:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012784:	4601      	mov	r1, r0
 8012786:	3b30      	subs	r3, #48	@ 0x30
 8012788:	220a      	movs	r2, #10
 801278a:	4630      	mov	r0, r6
 801278c:	f7ff ff8c 	bl	80126a8 <__multadd>
 8012790:	45a0      	cmp	r8, r4
 8012792:	d1f5      	bne.n	8012780 <__s2b+0x4c>
 8012794:	f1a5 0408 	sub.w	r4, r5, #8
 8012798:	444c      	add	r4, r9
 801279a:	1b2d      	subs	r5, r5, r4
 801279c:	1963      	adds	r3, r4, r5
 801279e:	42bb      	cmp	r3, r7
 80127a0:	db04      	blt.n	80127ac <__s2b+0x78>
 80127a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127a6:	340a      	adds	r4, #10
 80127a8:	2509      	movs	r5, #9
 80127aa:	e7f6      	b.n	801279a <__s2b+0x66>
 80127ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80127b0:	4601      	mov	r1, r0
 80127b2:	3b30      	subs	r3, #48	@ 0x30
 80127b4:	220a      	movs	r2, #10
 80127b6:	4630      	mov	r0, r6
 80127b8:	f7ff ff76 	bl	80126a8 <__multadd>
 80127bc:	e7ee      	b.n	801279c <__s2b+0x68>
 80127be:	bf00      	nop
 80127c0:	08013fc2 	.word	0x08013fc2
 80127c4:	08014033 	.word	0x08014033

080127c8 <__hi0bits>:
 80127c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80127cc:	4603      	mov	r3, r0
 80127ce:	bf36      	itet	cc
 80127d0:	0403      	lslcc	r3, r0, #16
 80127d2:	2000      	movcs	r0, #0
 80127d4:	2010      	movcc	r0, #16
 80127d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80127da:	bf3c      	itt	cc
 80127dc:	021b      	lslcc	r3, r3, #8
 80127de:	3008      	addcc	r0, #8
 80127e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80127e4:	bf3c      	itt	cc
 80127e6:	011b      	lslcc	r3, r3, #4
 80127e8:	3004      	addcc	r0, #4
 80127ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80127ee:	bf3c      	itt	cc
 80127f0:	009b      	lslcc	r3, r3, #2
 80127f2:	3002      	addcc	r0, #2
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	db05      	blt.n	8012804 <__hi0bits+0x3c>
 80127f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80127fc:	f100 0001 	add.w	r0, r0, #1
 8012800:	bf08      	it	eq
 8012802:	2020      	moveq	r0, #32
 8012804:	4770      	bx	lr

08012806 <__lo0bits>:
 8012806:	6803      	ldr	r3, [r0, #0]
 8012808:	4602      	mov	r2, r0
 801280a:	f013 0007 	ands.w	r0, r3, #7
 801280e:	d00b      	beq.n	8012828 <__lo0bits+0x22>
 8012810:	07d9      	lsls	r1, r3, #31
 8012812:	d421      	bmi.n	8012858 <__lo0bits+0x52>
 8012814:	0798      	lsls	r0, r3, #30
 8012816:	bf49      	itett	mi
 8012818:	085b      	lsrmi	r3, r3, #1
 801281a:	089b      	lsrpl	r3, r3, #2
 801281c:	2001      	movmi	r0, #1
 801281e:	6013      	strmi	r3, [r2, #0]
 8012820:	bf5c      	itt	pl
 8012822:	6013      	strpl	r3, [r2, #0]
 8012824:	2002      	movpl	r0, #2
 8012826:	4770      	bx	lr
 8012828:	b299      	uxth	r1, r3
 801282a:	b909      	cbnz	r1, 8012830 <__lo0bits+0x2a>
 801282c:	0c1b      	lsrs	r3, r3, #16
 801282e:	2010      	movs	r0, #16
 8012830:	b2d9      	uxtb	r1, r3
 8012832:	b909      	cbnz	r1, 8012838 <__lo0bits+0x32>
 8012834:	3008      	adds	r0, #8
 8012836:	0a1b      	lsrs	r3, r3, #8
 8012838:	0719      	lsls	r1, r3, #28
 801283a:	bf04      	itt	eq
 801283c:	091b      	lsreq	r3, r3, #4
 801283e:	3004      	addeq	r0, #4
 8012840:	0799      	lsls	r1, r3, #30
 8012842:	bf04      	itt	eq
 8012844:	089b      	lsreq	r3, r3, #2
 8012846:	3002      	addeq	r0, #2
 8012848:	07d9      	lsls	r1, r3, #31
 801284a:	d403      	bmi.n	8012854 <__lo0bits+0x4e>
 801284c:	085b      	lsrs	r3, r3, #1
 801284e:	f100 0001 	add.w	r0, r0, #1
 8012852:	d003      	beq.n	801285c <__lo0bits+0x56>
 8012854:	6013      	str	r3, [r2, #0]
 8012856:	4770      	bx	lr
 8012858:	2000      	movs	r0, #0
 801285a:	4770      	bx	lr
 801285c:	2020      	movs	r0, #32
 801285e:	4770      	bx	lr

08012860 <__i2b>:
 8012860:	b510      	push	{r4, lr}
 8012862:	460c      	mov	r4, r1
 8012864:	2101      	movs	r1, #1
 8012866:	f7ff febd 	bl	80125e4 <_Balloc>
 801286a:	4602      	mov	r2, r0
 801286c:	b928      	cbnz	r0, 801287a <__i2b+0x1a>
 801286e:	4b05      	ldr	r3, [pc, #20]	@ (8012884 <__i2b+0x24>)
 8012870:	4805      	ldr	r0, [pc, #20]	@ (8012888 <__i2b+0x28>)
 8012872:	f240 1145 	movw	r1, #325	@ 0x145
 8012876:	f7fe fcb5 	bl	80111e4 <__assert_func>
 801287a:	2301      	movs	r3, #1
 801287c:	6144      	str	r4, [r0, #20]
 801287e:	6103      	str	r3, [r0, #16]
 8012880:	bd10      	pop	{r4, pc}
 8012882:	bf00      	nop
 8012884:	08013fc2 	.word	0x08013fc2
 8012888:	08014033 	.word	0x08014033

0801288c <__multiply>:
 801288c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012890:	4614      	mov	r4, r2
 8012892:	690a      	ldr	r2, [r1, #16]
 8012894:	6923      	ldr	r3, [r4, #16]
 8012896:	429a      	cmp	r2, r3
 8012898:	bfa8      	it	ge
 801289a:	4623      	movge	r3, r4
 801289c:	460f      	mov	r7, r1
 801289e:	bfa4      	itt	ge
 80128a0:	460c      	movge	r4, r1
 80128a2:	461f      	movge	r7, r3
 80128a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80128a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80128ac:	68a3      	ldr	r3, [r4, #8]
 80128ae:	6861      	ldr	r1, [r4, #4]
 80128b0:	eb0a 0609 	add.w	r6, sl, r9
 80128b4:	42b3      	cmp	r3, r6
 80128b6:	b085      	sub	sp, #20
 80128b8:	bfb8      	it	lt
 80128ba:	3101      	addlt	r1, #1
 80128bc:	f7ff fe92 	bl	80125e4 <_Balloc>
 80128c0:	b930      	cbnz	r0, 80128d0 <__multiply+0x44>
 80128c2:	4602      	mov	r2, r0
 80128c4:	4b44      	ldr	r3, [pc, #272]	@ (80129d8 <__multiply+0x14c>)
 80128c6:	4845      	ldr	r0, [pc, #276]	@ (80129dc <__multiply+0x150>)
 80128c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80128cc:	f7fe fc8a 	bl	80111e4 <__assert_func>
 80128d0:	f100 0514 	add.w	r5, r0, #20
 80128d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80128d8:	462b      	mov	r3, r5
 80128da:	2200      	movs	r2, #0
 80128dc:	4543      	cmp	r3, r8
 80128de:	d321      	bcc.n	8012924 <__multiply+0x98>
 80128e0:	f107 0114 	add.w	r1, r7, #20
 80128e4:	f104 0214 	add.w	r2, r4, #20
 80128e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80128ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80128f0:	9302      	str	r3, [sp, #8]
 80128f2:	1b13      	subs	r3, r2, r4
 80128f4:	3b15      	subs	r3, #21
 80128f6:	f023 0303 	bic.w	r3, r3, #3
 80128fa:	3304      	adds	r3, #4
 80128fc:	f104 0715 	add.w	r7, r4, #21
 8012900:	42ba      	cmp	r2, r7
 8012902:	bf38      	it	cc
 8012904:	2304      	movcc	r3, #4
 8012906:	9301      	str	r3, [sp, #4]
 8012908:	9b02      	ldr	r3, [sp, #8]
 801290a:	9103      	str	r1, [sp, #12]
 801290c:	428b      	cmp	r3, r1
 801290e:	d80c      	bhi.n	801292a <__multiply+0x9e>
 8012910:	2e00      	cmp	r6, #0
 8012912:	dd03      	ble.n	801291c <__multiply+0x90>
 8012914:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012918:	2b00      	cmp	r3, #0
 801291a:	d05b      	beq.n	80129d4 <__multiply+0x148>
 801291c:	6106      	str	r6, [r0, #16]
 801291e:	b005      	add	sp, #20
 8012920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012924:	f843 2b04 	str.w	r2, [r3], #4
 8012928:	e7d8      	b.n	80128dc <__multiply+0x50>
 801292a:	f8b1 a000 	ldrh.w	sl, [r1]
 801292e:	f1ba 0f00 	cmp.w	sl, #0
 8012932:	d024      	beq.n	801297e <__multiply+0xf2>
 8012934:	f104 0e14 	add.w	lr, r4, #20
 8012938:	46a9      	mov	r9, r5
 801293a:	f04f 0c00 	mov.w	ip, #0
 801293e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012942:	f8d9 3000 	ldr.w	r3, [r9]
 8012946:	fa1f fb87 	uxth.w	fp, r7
 801294a:	b29b      	uxth	r3, r3
 801294c:	fb0a 330b 	mla	r3, sl, fp, r3
 8012950:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012954:	f8d9 7000 	ldr.w	r7, [r9]
 8012958:	4463      	add	r3, ip
 801295a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801295e:	fb0a c70b 	mla	r7, sl, fp, ip
 8012962:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012966:	b29b      	uxth	r3, r3
 8012968:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801296c:	4572      	cmp	r2, lr
 801296e:	f849 3b04 	str.w	r3, [r9], #4
 8012972:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012976:	d8e2      	bhi.n	801293e <__multiply+0xb2>
 8012978:	9b01      	ldr	r3, [sp, #4]
 801297a:	f845 c003 	str.w	ip, [r5, r3]
 801297e:	9b03      	ldr	r3, [sp, #12]
 8012980:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012984:	3104      	adds	r1, #4
 8012986:	f1b9 0f00 	cmp.w	r9, #0
 801298a:	d021      	beq.n	80129d0 <__multiply+0x144>
 801298c:	682b      	ldr	r3, [r5, #0]
 801298e:	f104 0c14 	add.w	ip, r4, #20
 8012992:	46ae      	mov	lr, r5
 8012994:	f04f 0a00 	mov.w	sl, #0
 8012998:	f8bc b000 	ldrh.w	fp, [ip]
 801299c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80129a0:	fb09 770b 	mla	r7, r9, fp, r7
 80129a4:	4457      	add	r7, sl
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80129ac:	f84e 3b04 	str.w	r3, [lr], #4
 80129b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80129b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80129b8:	f8be 3000 	ldrh.w	r3, [lr]
 80129bc:	fb09 330a 	mla	r3, r9, sl, r3
 80129c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80129c4:	4562      	cmp	r2, ip
 80129c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80129ca:	d8e5      	bhi.n	8012998 <__multiply+0x10c>
 80129cc:	9f01      	ldr	r7, [sp, #4]
 80129ce:	51eb      	str	r3, [r5, r7]
 80129d0:	3504      	adds	r5, #4
 80129d2:	e799      	b.n	8012908 <__multiply+0x7c>
 80129d4:	3e01      	subs	r6, #1
 80129d6:	e79b      	b.n	8012910 <__multiply+0x84>
 80129d8:	08013fc2 	.word	0x08013fc2
 80129dc:	08014033 	.word	0x08014033

080129e0 <__pow5mult>:
 80129e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129e4:	4615      	mov	r5, r2
 80129e6:	f012 0203 	ands.w	r2, r2, #3
 80129ea:	4607      	mov	r7, r0
 80129ec:	460e      	mov	r6, r1
 80129ee:	d007      	beq.n	8012a00 <__pow5mult+0x20>
 80129f0:	4c25      	ldr	r4, [pc, #148]	@ (8012a88 <__pow5mult+0xa8>)
 80129f2:	3a01      	subs	r2, #1
 80129f4:	2300      	movs	r3, #0
 80129f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80129fa:	f7ff fe55 	bl	80126a8 <__multadd>
 80129fe:	4606      	mov	r6, r0
 8012a00:	10ad      	asrs	r5, r5, #2
 8012a02:	d03d      	beq.n	8012a80 <__pow5mult+0xa0>
 8012a04:	69fc      	ldr	r4, [r7, #28]
 8012a06:	b97c      	cbnz	r4, 8012a28 <__pow5mult+0x48>
 8012a08:	2010      	movs	r0, #16
 8012a0a:	f7fc fb8f 	bl	800f12c <malloc>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	61f8      	str	r0, [r7, #28]
 8012a12:	b928      	cbnz	r0, 8012a20 <__pow5mult+0x40>
 8012a14:	4b1d      	ldr	r3, [pc, #116]	@ (8012a8c <__pow5mult+0xac>)
 8012a16:	481e      	ldr	r0, [pc, #120]	@ (8012a90 <__pow5mult+0xb0>)
 8012a18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012a1c:	f7fe fbe2 	bl	80111e4 <__assert_func>
 8012a20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012a24:	6004      	str	r4, [r0, #0]
 8012a26:	60c4      	str	r4, [r0, #12]
 8012a28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012a2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012a30:	b94c      	cbnz	r4, 8012a46 <__pow5mult+0x66>
 8012a32:	f240 2171 	movw	r1, #625	@ 0x271
 8012a36:	4638      	mov	r0, r7
 8012a38:	f7ff ff12 	bl	8012860 <__i2b>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012a42:	4604      	mov	r4, r0
 8012a44:	6003      	str	r3, [r0, #0]
 8012a46:	f04f 0900 	mov.w	r9, #0
 8012a4a:	07eb      	lsls	r3, r5, #31
 8012a4c:	d50a      	bpl.n	8012a64 <__pow5mult+0x84>
 8012a4e:	4631      	mov	r1, r6
 8012a50:	4622      	mov	r2, r4
 8012a52:	4638      	mov	r0, r7
 8012a54:	f7ff ff1a 	bl	801288c <__multiply>
 8012a58:	4631      	mov	r1, r6
 8012a5a:	4680      	mov	r8, r0
 8012a5c:	4638      	mov	r0, r7
 8012a5e:	f7ff fe01 	bl	8012664 <_Bfree>
 8012a62:	4646      	mov	r6, r8
 8012a64:	106d      	asrs	r5, r5, #1
 8012a66:	d00b      	beq.n	8012a80 <__pow5mult+0xa0>
 8012a68:	6820      	ldr	r0, [r4, #0]
 8012a6a:	b938      	cbnz	r0, 8012a7c <__pow5mult+0x9c>
 8012a6c:	4622      	mov	r2, r4
 8012a6e:	4621      	mov	r1, r4
 8012a70:	4638      	mov	r0, r7
 8012a72:	f7ff ff0b 	bl	801288c <__multiply>
 8012a76:	6020      	str	r0, [r4, #0]
 8012a78:	f8c0 9000 	str.w	r9, [r0]
 8012a7c:	4604      	mov	r4, r0
 8012a7e:	e7e4      	b.n	8012a4a <__pow5mult+0x6a>
 8012a80:	4630      	mov	r0, r6
 8012a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a86:	bf00      	nop
 8012a88:	0801408c 	.word	0x0801408c
 8012a8c:	08013f53 	.word	0x08013f53
 8012a90:	08014033 	.word	0x08014033

08012a94 <__lshift>:
 8012a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a98:	460c      	mov	r4, r1
 8012a9a:	6849      	ldr	r1, [r1, #4]
 8012a9c:	6923      	ldr	r3, [r4, #16]
 8012a9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012aa2:	68a3      	ldr	r3, [r4, #8]
 8012aa4:	4607      	mov	r7, r0
 8012aa6:	4691      	mov	r9, r2
 8012aa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012aac:	f108 0601 	add.w	r6, r8, #1
 8012ab0:	42b3      	cmp	r3, r6
 8012ab2:	db0b      	blt.n	8012acc <__lshift+0x38>
 8012ab4:	4638      	mov	r0, r7
 8012ab6:	f7ff fd95 	bl	80125e4 <_Balloc>
 8012aba:	4605      	mov	r5, r0
 8012abc:	b948      	cbnz	r0, 8012ad2 <__lshift+0x3e>
 8012abe:	4602      	mov	r2, r0
 8012ac0:	4b28      	ldr	r3, [pc, #160]	@ (8012b64 <__lshift+0xd0>)
 8012ac2:	4829      	ldr	r0, [pc, #164]	@ (8012b68 <__lshift+0xd4>)
 8012ac4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012ac8:	f7fe fb8c 	bl	80111e4 <__assert_func>
 8012acc:	3101      	adds	r1, #1
 8012ace:	005b      	lsls	r3, r3, #1
 8012ad0:	e7ee      	b.n	8012ab0 <__lshift+0x1c>
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	f100 0114 	add.w	r1, r0, #20
 8012ad8:	f100 0210 	add.w	r2, r0, #16
 8012adc:	4618      	mov	r0, r3
 8012ade:	4553      	cmp	r3, sl
 8012ae0:	db33      	blt.n	8012b4a <__lshift+0xb6>
 8012ae2:	6920      	ldr	r0, [r4, #16]
 8012ae4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ae8:	f104 0314 	add.w	r3, r4, #20
 8012aec:	f019 091f 	ands.w	r9, r9, #31
 8012af0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012af4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012af8:	d02b      	beq.n	8012b52 <__lshift+0xbe>
 8012afa:	f1c9 0e20 	rsb	lr, r9, #32
 8012afe:	468a      	mov	sl, r1
 8012b00:	2200      	movs	r2, #0
 8012b02:	6818      	ldr	r0, [r3, #0]
 8012b04:	fa00 f009 	lsl.w	r0, r0, r9
 8012b08:	4310      	orrs	r0, r2
 8012b0a:	f84a 0b04 	str.w	r0, [sl], #4
 8012b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b12:	459c      	cmp	ip, r3
 8012b14:	fa22 f20e 	lsr.w	r2, r2, lr
 8012b18:	d8f3      	bhi.n	8012b02 <__lshift+0x6e>
 8012b1a:	ebac 0304 	sub.w	r3, ip, r4
 8012b1e:	3b15      	subs	r3, #21
 8012b20:	f023 0303 	bic.w	r3, r3, #3
 8012b24:	3304      	adds	r3, #4
 8012b26:	f104 0015 	add.w	r0, r4, #21
 8012b2a:	4584      	cmp	ip, r0
 8012b2c:	bf38      	it	cc
 8012b2e:	2304      	movcc	r3, #4
 8012b30:	50ca      	str	r2, [r1, r3]
 8012b32:	b10a      	cbz	r2, 8012b38 <__lshift+0xa4>
 8012b34:	f108 0602 	add.w	r6, r8, #2
 8012b38:	3e01      	subs	r6, #1
 8012b3a:	4638      	mov	r0, r7
 8012b3c:	612e      	str	r6, [r5, #16]
 8012b3e:	4621      	mov	r1, r4
 8012b40:	f7ff fd90 	bl	8012664 <_Bfree>
 8012b44:	4628      	mov	r0, r5
 8012b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012b4e:	3301      	adds	r3, #1
 8012b50:	e7c5      	b.n	8012ade <__lshift+0x4a>
 8012b52:	3904      	subs	r1, #4
 8012b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b58:	f841 2f04 	str.w	r2, [r1, #4]!
 8012b5c:	459c      	cmp	ip, r3
 8012b5e:	d8f9      	bhi.n	8012b54 <__lshift+0xc0>
 8012b60:	e7ea      	b.n	8012b38 <__lshift+0xa4>
 8012b62:	bf00      	nop
 8012b64:	08013fc2 	.word	0x08013fc2
 8012b68:	08014033 	.word	0x08014033

08012b6c <__mcmp>:
 8012b6c:	690a      	ldr	r2, [r1, #16]
 8012b6e:	4603      	mov	r3, r0
 8012b70:	6900      	ldr	r0, [r0, #16]
 8012b72:	1a80      	subs	r0, r0, r2
 8012b74:	b530      	push	{r4, r5, lr}
 8012b76:	d10e      	bne.n	8012b96 <__mcmp+0x2a>
 8012b78:	3314      	adds	r3, #20
 8012b7a:	3114      	adds	r1, #20
 8012b7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012b80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012b84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012b88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012b8c:	4295      	cmp	r5, r2
 8012b8e:	d003      	beq.n	8012b98 <__mcmp+0x2c>
 8012b90:	d205      	bcs.n	8012b9e <__mcmp+0x32>
 8012b92:	f04f 30ff 	mov.w	r0, #4294967295
 8012b96:	bd30      	pop	{r4, r5, pc}
 8012b98:	42a3      	cmp	r3, r4
 8012b9a:	d3f3      	bcc.n	8012b84 <__mcmp+0x18>
 8012b9c:	e7fb      	b.n	8012b96 <__mcmp+0x2a>
 8012b9e:	2001      	movs	r0, #1
 8012ba0:	e7f9      	b.n	8012b96 <__mcmp+0x2a>
	...

08012ba4 <__mdiff>:
 8012ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba8:	4689      	mov	r9, r1
 8012baa:	4606      	mov	r6, r0
 8012bac:	4611      	mov	r1, r2
 8012bae:	4648      	mov	r0, r9
 8012bb0:	4614      	mov	r4, r2
 8012bb2:	f7ff ffdb 	bl	8012b6c <__mcmp>
 8012bb6:	1e05      	subs	r5, r0, #0
 8012bb8:	d112      	bne.n	8012be0 <__mdiff+0x3c>
 8012bba:	4629      	mov	r1, r5
 8012bbc:	4630      	mov	r0, r6
 8012bbe:	f7ff fd11 	bl	80125e4 <_Balloc>
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	b928      	cbnz	r0, 8012bd2 <__mdiff+0x2e>
 8012bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8012cc4 <__mdiff+0x120>)
 8012bc8:	f240 2137 	movw	r1, #567	@ 0x237
 8012bcc:	483e      	ldr	r0, [pc, #248]	@ (8012cc8 <__mdiff+0x124>)
 8012bce:	f7fe fb09 	bl	80111e4 <__assert_func>
 8012bd2:	2301      	movs	r3, #1
 8012bd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012bd8:	4610      	mov	r0, r2
 8012bda:	b003      	add	sp, #12
 8012bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be0:	bfbc      	itt	lt
 8012be2:	464b      	movlt	r3, r9
 8012be4:	46a1      	movlt	r9, r4
 8012be6:	4630      	mov	r0, r6
 8012be8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012bec:	bfba      	itte	lt
 8012bee:	461c      	movlt	r4, r3
 8012bf0:	2501      	movlt	r5, #1
 8012bf2:	2500      	movge	r5, #0
 8012bf4:	f7ff fcf6 	bl	80125e4 <_Balloc>
 8012bf8:	4602      	mov	r2, r0
 8012bfa:	b918      	cbnz	r0, 8012c04 <__mdiff+0x60>
 8012bfc:	4b31      	ldr	r3, [pc, #196]	@ (8012cc4 <__mdiff+0x120>)
 8012bfe:	f240 2145 	movw	r1, #581	@ 0x245
 8012c02:	e7e3      	b.n	8012bcc <__mdiff+0x28>
 8012c04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012c08:	6926      	ldr	r6, [r4, #16]
 8012c0a:	60c5      	str	r5, [r0, #12]
 8012c0c:	f109 0310 	add.w	r3, r9, #16
 8012c10:	f109 0514 	add.w	r5, r9, #20
 8012c14:	f104 0e14 	add.w	lr, r4, #20
 8012c18:	f100 0b14 	add.w	fp, r0, #20
 8012c1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012c20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012c24:	9301      	str	r3, [sp, #4]
 8012c26:	46d9      	mov	r9, fp
 8012c28:	f04f 0c00 	mov.w	ip, #0
 8012c2c:	9b01      	ldr	r3, [sp, #4]
 8012c2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012c32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012c36:	9301      	str	r3, [sp, #4]
 8012c38:	fa1f f38a 	uxth.w	r3, sl
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	b283      	uxth	r3, r0
 8012c40:	1acb      	subs	r3, r1, r3
 8012c42:	0c00      	lsrs	r0, r0, #16
 8012c44:	4463      	add	r3, ip
 8012c46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012c4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012c54:	4576      	cmp	r6, lr
 8012c56:	f849 3b04 	str.w	r3, [r9], #4
 8012c5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012c5e:	d8e5      	bhi.n	8012c2c <__mdiff+0x88>
 8012c60:	1b33      	subs	r3, r6, r4
 8012c62:	3b15      	subs	r3, #21
 8012c64:	f023 0303 	bic.w	r3, r3, #3
 8012c68:	3415      	adds	r4, #21
 8012c6a:	3304      	adds	r3, #4
 8012c6c:	42a6      	cmp	r6, r4
 8012c6e:	bf38      	it	cc
 8012c70:	2304      	movcc	r3, #4
 8012c72:	441d      	add	r5, r3
 8012c74:	445b      	add	r3, fp
 8012c76:	461e      	mov	r6, r3
 8012c78:	462c      	mov	r4, r5
 8012c7a:	4544      	cmp	r4, r8
 8012c7c:	d30e      	bcc.n	8012c9c <__mdiff+0xf8>
 8012c7e:	f108 0103 	add.w	r1, r8, #3
 8012c82:	1b49      	subs	r1, r1, r5
 8012c84:	f021 0103 	bic.w	r1, r1, #3
 8012c88:	3d03      	subs	r5, #3
 8012c8a:	45a8      	cmp	r8, r5
 8012c8c:	bf38      	it	cc
 8012c8e:	2100      	movcc	r1, #0
 8012c90:	440b      	add	r3, r1
 8012c92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c96:	b191      	cbz	r1, 8012cbe <__mdiff+0x11a>
 8012c98:	6117      	str	r7, [r2, #16]
 8012c9a:	e79d      	b.n	8012bd8 <__mdiff+0x34>
 8012c9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012ca0:	46e6      	mov	lr, ip
 8012ca2:	0c08      	lsrs	r0, r1, #16
 8012ca4:	fa1c fc81 	uxtah	ip, ip, r1
 8012ca8:	4471      	add	r1, lr
 8012caa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012cae:	b289      	uxth	r1, r1
 8012cb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012cb4:	f846 1b04 	str.w	r1, [r6], #4
 8012cb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012cbc:	e7dd      	b.n	8012c7a <__mdiff+0xd6>
 8012cbe:	3f01      	subs	r7, #1
 8012cc0:	e7e7      	b.n	8012c92 <__mdiff+0xee>
 8012cc2:	bf00      	nop
 8012cc4:	08013fc2 	.word	0x08013fc2
 8012cc8:	08014033 	.word	0x08014033

08012ccc <__ulp>:
 8012ccc:	b082      	sub	sp, #8
 8012cce:	ed8d 0b00 	vstr	d0, [sp]
 8012cd2:	9a01      	ldr	r2, [sp, #4]
 8012cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8012d14 <__ulp+0x48>)
 8012cd6:	4013      	ands	r3, r2
 8012cd8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	dc08      	bgt.n	8012cf2 <__ulp+0x26>
 8012ce0:	425b      	negs	r3, r3
 8012ce2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012ce6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012cea:	da04      	bge.n	8012cf6 <__ulp+0x2a>
 8012cec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012cf0:	4113      	asrs	r3, r2
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	e008      	b.n	8012d08 <__ulp+0x3c>
 8012cf6:	f1a2 0314 	sub.w	r3, r2, #20
 8012cfa:	2b1e      	cmp	r3, #30
 8012cfc:	bfda      	itte	le
 8012cfe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012d02:	40da      	lsrle	r2, r3
 8012d04:	2201      	movgt	r2, #1
 8012d06:	2300      	movs	r3, #0
 8012d08:	4619      	mov	r1, r3
 8012d0a:	4610      	mov	r0, r2
 8012d0c:	ec41 0b10 	vmov	d0, r0, r1
 8012d10:	b002      	add	sp, #8
 8012d12:	4770      	bx	lr
 8012d14:	7ff00000 	.word	0x7ff00000

08012d18 <__b2d>:
 8012d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d1c:	6906      	ldr	r6, [r0, #16]
 8012d1e:	f100 0814 	add.w	r8, r0, #20
 8012d22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012d26:	1f37      	subs	r7, r6, #4
 8012d28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012d2c:	4610      	mov	r0, r2
 8012d2e:	f7ff fd4b 	bl	80127c8 <__hi0bits>
 8012d32:	f1c0 0320 	rsb	r3, r0, #32
 8012d36:	280a      	cmp	r0, #10
 8012d38:	600b      	str	r3, [r1, #0]
 8012d3a:	491b      	ldr	r1, [pc, #108]	@ (8012da8 <__b2d+0x90>)
 8012d3c:	dc15      	bgt.n	8012d6a <__b2d+0x52>
 8012d3e:	f1c0 0c0b 	rsb	ip, r0, #11
 8012d42:	fa22 f30c 	lsr.w	r3, r2, ip
 8012d46:	45b8      	cmp	r8, r7
 8012d48:	ea43 0501 	orr.w	r5, r3, r1
 8012d4c:	bf34      	ite	cc
 8012d4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d52:	2300      	movcs	r3, #0
 8012d54:	3015      	adds	r0, #21
 8012d56:	fa02 f000 	lsl.w	r0, r2, r0
 8012d5a:	fa23 f30c 	lsr.w	r3, r3, ip
 8012d5e:	4303      	orrs	r3, r0
 8012d60:	461c      	mov	r4, r3
 8012d62:	ec45 4b10 	vmov	d0, r4, r5
 8012d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d6a:	45b8      	cmp	r8, r7
 8012d6c:	bf3a      	itte	cc
 8012d6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d72:	f1a6 0708 	subcc.w	r7, r6, #8
 8012d76:	2300      	movcs	r3, #0
 8012d78:	380b      	subs	r0, #11
 8012d7a:	d012      	beq.n	8012da2 <__b2d+0x8a>
 8012d7c:	f1c0 0120 	rsb	r1, r0, #32
 8012d80:	fa23 f401 	lsr.w	r4, r3, r1
 8012d84:	4082      	lsls	r2, r0
 8012d86:	4322      	orrs	r2, r4
 8012d88:	4547      	cmp	r7, r8
 8012d8a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012d8e:	bf8c      	ite	hi
 8012d90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012d94:	2200      	movls	r2, #0
 8012d96:	4083      	lsls	r3, r0
 8012d98:	40ca      	lsrs	r2, r1
 8012d9a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012d9e:	4313      	orrs	r3, r2
 8012da0:	e7de      	b.n	8012d60 <__b2d+0x48>
 8012da2:	ea42 0501 	orr.w	r5, r2, r1
 8012da6:	e7db      	b.n	8012d60 <__b2d+0x48>
 8012da8:	3ff00000 	.word	0x3ff00000

08012dac <__d2b>:
 8012dac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012db0:	460f      	mov	r7, r1
 8012db2:	2101      	movs	r1, #1
 8012db4:	ec59 8b10 	vmov	r8, r9, d0
 8012db8:	4616      	mov	r6, r2
 8012dba:	f7ff fc13 	bl	80125e4 <_Balloc>
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	b930      	cbnz	r0, 8012dd0 <__d2b+0x24>
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	4b23      	ldr	r3, [pc, #140]	@ (8012e54 <__d2b+0xa8>)
 8012dc6:	4824      	ldr	r0, [pc, #144]	@ (8012e58 <__d2b+0xac>)
 8012dc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8012dcc:	f7fe fa0a 	bl	80111e4 <__assert_func>
 8012dd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012dd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012dd8:	b10d      	cbz	r5, 8012dde <__d2b+0x32>
 8012dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012dde:	9301      	str	r3, [sp, #4]
 8012de0:	f1b8 0300 	subs.w	r3, r8, #0
 8012de4:	d023      	beq.n	8012e2e <__d2b+0x82>
 8012de6:	4668      	mov	r0, sp
 8012de8:	9300      	str	r3, [sp, #0]
 8012dea:	f7ff fd0c 	bl	8012806 <__lo0bits>
 8012dee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012df2:	b1d0      	cbz	r0, 8012e2a <__d2b+0x7e>
 8012df4:	f1c0 0320 	rsb	r3, r0, #32
 8012df8:	fa02 f303 	lsl.w	r3, r2, r3
 8012dfc:	430b      	orrs	r3, r1
 8012dfe:	40c2      	lsrs	r2, r0
 8012e00:	6163      	str	r3, [r4, #20]
 8012e02:	9201      	str	r2, [sp, #4]
 8012e04:	9b01      	ldr	r3, [sp, #4]
 8012e06:	61a3      	str	r3, [r4, #24]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	bf0c      	ite	eq
 8012e0c:	2201      	moveq	r2, #1
 8012e0e:	2202      	movne	r2, #2
 8012e10:	6122      	str	r2, [r4, #16]
 8012e12:	b1a5      	cbz	r5, 8012e3e <__d2b+0x92>
 8012e14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012e18:	4405      	add	r5, r0
 8012e1a:	603d      	str	r5, [r7, #0]
 8012e1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012e20:	6030      	str	r0, [r6, #0]
 8012e22:	4620      	mov	r0, r4
 8012e24:	b003      	add	sp, #12
 8012e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e2a:	6161      	str	r1, [r4, #20]
 8012e2c:	e7ea      	b.n	8012e04 <__d2b+0x58>
 8012e2e:	a801      	add	r0, sp, #4
 8012e30:	f7ff fce9 	bl	8012806 <__lo0bits>
 8012e34:	9b01      	ldr	r3, [sp, #4]
 8012e36:	6163      	str	r3, [r4, #20]
 8012e38:	3020      	adds	r0, #32
 8012e3a:	2201      	movs	r2, #1
 8012e3c:	e7e8      	b.n	8012e10 <__d2b+0x64>
 8012e3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012e42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012e46:	6038      	str	r0, [r7, #0]
 8012e48:	6918      	ldr	r0, [r3, #16]
 8012e4a:	f7ff fcbd 	bl	80127c8 <__hi0bits>
 8012e4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012e52:	e7e5      	b.n	8012e20 <__d2b+0x74>
 8012e54:	08013fc2 	.word	0x08013fc2
 8012e58:	08014033 	.word	0x08014033

08012e5c <__ratio>:
 8012e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e60:	b085      	sub	sp, #20
 8012e62:	e9cd 1000 	strd	r1, r0, [sp]
 8012e66:	a902      	add	r1, sp, #8
 8012e68:	f7ff ff56 	bl	8012d18 <__b2d>
 8012e6c:	9800      	ldr	r0, [sp, #0]
 8012e6e:	a903      	add	r1, sp, #12
 8012e70:	ec55 4b10 	vmov	r4, r5, d0
 8012e74:	f7ff ff50 	bl	8012d18 <__b2d>
 8012e78:	9b01      	ldr	r3, [sp, #4]
 8012e7a:	6919      	ldr	r1, [r3, #16]
 8012e7c:	9b00      	ldr	r3, [sp, #0]
 8012e7e:	691b      	ldr	r3, [r3, #16]
 8012e80:	1ac9      	subs	r1, r1, r3
 8012e82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012e86:	1a9b      	subs	r3, r3, r2
 8012e88:	ec5b ab10 	vmov	sl, fp, d0
 8012e8c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	bfce      	itee	gt
 8012e94:	462a      	movgt	r2, r5
 8012e96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012e9a:	465a      	movle	r2, fp
 8012e9c:	462f      	mov	r7, r5
 8012e9e:	46d9      	mov	r9, fp
 8012ea0:	bfcc      	ite	gt
 8012ea2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012ea6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012eaa:	464b      	mov	r3, r9
 8012eac:	4652      	mov	r2, sl
 8012eae:	4620      	mov	r0, r4
 8012eb0:	4639      	mov	r1, r7
 8012eb2:	f7ed fcb3 	bl	800081c <__aeabi_ddiv>
 8012eb6:	ec41 0b10 	vmov	d0, r0, r1
 8012eba:	b005      	add	sp, #20
 8012ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ec0 <__copybits>:
 8012ec0:	3901      	subs	r1, #1
 8012ec2:	b570      	push	{r4, r5, r6, lr}
 8012ec4:	1149      	asrs	r1, r1, #5
 8012ec6:	6914      	ldr	r4, [r2, #16]
 8012ec8:	3101      	adds	r1, #1
 8012eca:	f102 0314 	add.w	r3, r2, #20
 8012ece:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012ed2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012ed6:	1f05      	subs	r5, r0, #4
 8012ed8:	42a3      	cmp	r3, r4
 8012eda:	d30c      	bcc.n	8012ef6 <__copybits+0x36>
 8012edc:	1aa3      	subs	r3, r4, r2
 8012ede:	3b11      	subs	r3, #17
 8012ee0:	f023 0303 	bic.w	r3, r3, #3
 8012ee4:	3211      	adds	r2, #17
 8012ee6:	42a2      	cmp	r2, r4
 8012ee8:	bf88      	it	hi
 8012eea:	2300      	movhi	r3, #0
 8012eec:	4418      	add	r0, r3
 8012eee:	2300      	movs	r3, #0
 8012ef0:	4288      	cmp	r0, r1
 8012ef2:	d305      	bcc.n	8012f00 <__copybits+0x40>
 8012ef4:	bd70      	pop	{r4, r5, r6, pc}
 8012ef6:	f853 6b04 	ldr.w	r6, [r3], #4
 8012efa:	f845 6f04 	str.w	r6, [r5, #4]!
 8012efe:	e7eb      	b.n	8012ed8 <__copybits+0x18>
 8012f00:	f840 3b04 	str.w	r3, [r0], #4
 8012f04:	e7f4      	b.n	8012ef0 <__copybits+0x30>

08012f06 <__any_on>:
 8012f06:	f100 0214 	add.w	r2, r0, #20
 8012f0a:	6900      	ldr	r0, [r0, #16]
 8012f0c:	114b      	asrs	r3, r1, #5
 8012f0e:	4298      	cmp	r0, r3
 8012f10:	b510      	push	{r4, lr}
 8012f12:	db11      	blt.n	8012f38 <__any_on+0x32>
 8012f14:	dd0a      	ble.n	8012f2c <__any_on+0x26>
 8012f16:	f011 011f 	ands.w	r1, r1, #31
 8012f1a:	d007      	beq.n	8012f2c <__any_on+0x26>
 8012f1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012f20:	fa24 f001 	lsr.w	r0, r4, r1
 8012f24:	fa00 f101 	lsl.w	r1, r0, r1
 8012f28:	428c      	cmp	r4, r1
 8012f2a:	d10b      	bne.n	8012f44 <__any_on+0x3e>
 8012f2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012f30:	4293      	cmp	r3, r2
 8012f32:	d803      	bhi.n	8012f3c <__any_on+0x36>
 8012f34:	2000      	movs	r0, #0
 8012f36:	bd10      	pop	{r4, pc}
 8012f38:	4603      	mov	r3, r0
 8012f3a:	e7f7      	b.n	8012f2c <__any_on+0x26>
 8012f3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012f40:	2900      	cmp	r1, #0
 8012f42:	d0f5      	beq.n	8012f30 <__any_on+0x2a>
 8012f44:	2001      	movs	r0, #1
 8012f46:	e7f6      	b.n	8012f36 <__any_on+0x30>

08012f48 <_malloc_usable_size_r>:
 8012f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f4c:	1f18      	subs	r0, r3, #4
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	bfbc      	itt	lt
 8012f52:	580b      	ldrlt	r3, [r1, r0]
 8012f54:	18c0      	addlt	r0, r0, r3
 8012f56:	4770      	bx	lr

08012f58 <_strtol_l.constprop.0>:
 8012f58:	2b24      	cmp	r3, #36	@ 0x24
 8012f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f5e:	4686      	mov	lr, r0
 8012f60:	4690      	mov	r8, r2
 8012f62:	d801      	bhi.n	8012f68 <_strtol_l.constprop.0+0x10>
 8012f64:	2b01      	cmp	r3, #1
 8012f66:	d106      	bne.n	8012f76 <_strtol_l.constprop.0+0x1e>
 8012f68:	f7fe f8f2 	bl	8011150 <__errno>
 8012f6c:	2316      	movs	r3, #22
 8012f6e:	6003      	str	r3, [r0, #0]
 8012f70:	2000      	movs	r0, #0
 8012f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f76:	4834      	ldr	r0, [pc, #208]	@ (8013048 <_strtol_l.constprop.0+0xf0>)
 8012f78:	460d      	mov	r5, r1
 8012f7a:	462a      	mov	r2, r5
 8012f7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f80:	5d06      	ldrb	r6, [r0, r4]
 8012f82:	f016 0608 	ands.w	r6, r6, #8
 8012f86:	d1f8      	bne.n	8012f7a <_strtol_l.constprop.0+0x22>
 8012f88:	2c2d      	cmp	r4, #45	@ 0x2d
 8012f8a:	d12d      	bne.n	8012fe8 <_strtol_l.constprop.0+0x90>
 8012f8c:	782c      	ldrb	r4, [r5, #0]
 8012f8e:	2601      	movs	r6, #1
 8012f90:	1c95      	adds	r5, r2, #2
 8012f92:	f033 0210 	bics.w	r2, r3, #16
 8012f96:	d109      	bne.n	8012fac <_strtol_l.constprop.0+0x54>
 8012f98:	2c30      	cmp	r4, #48	@ 0x30
 8012f9a:	d12a      	bne.n	8012ff2 <_strtol_l.constprop.0+0x9a>
 8012f9c:	782a      	ldrb	r2, [r5, #0]
 8012f9e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012fa2:	2a58      	cmp	r2, #88	@ 0x58
 8012fa4:	d125      	bne.n	8012ff2 <_strtol_l.constprop.0+0x9a>
 8012fa6:	786c      	ldrb	r4, [r5, #1]
 8012fa8:	2310      	movs	r3, #16
 8012faa:	3502      	adds	r5, #2
 8012fac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012fb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	fbbc f9f3 	udiv	r9, ip, r3
 8012fba:	4610      	mov	r0, r2
 8012fbc:	fb03 ca19 	mls	sl, r3, r9, ip
 8012fc0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012fc4:	2f09      	cmp	r7, #9
 8012fc6:	d81b      	bhi.n	8013000 <_strtol_l.constprop.0+0xa8>
 8012fc8:	463c      	mov	r4, r7
 8012fca:	42a3      	cmp	r3, r4
 8012fcc:	dd27      	ble.n	801301e <_strtol_l.constprop.0+0xc6>
 8012fce:	1c57      	adds	r7, r2, #1
 8012fd0:	d007      	beq.n	8012fe2 <_strtol_l.constprop.0+0x8a>
 8012fd2:	4581      	cmp	r9, r0
 8012fd4:	d320      	bcc.n	8013018 <_strtol_l.constprop.0+0xc0>
 8012fd6:	d101      	bne.n	8012fdc <_strtol_l.constprop.0+0x84>
 8012fd8:	45a2      	cmp	sl, r4
 8012fda:	db1d      	blt.n	8013018 <_strtol_l.constprop.0+0xc0>
 8012fdc:	fb00 4003 	mla	r0, r0, r3, r4
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012fe6:	e7eb      	b.n	8012fc0 <_strtol_l.constprop.0+0x68>
 8012fe8:	2c2b      	cmp	r4, #43	@ 0x2b
 8012fea:	bf04      	itt	eq
 8012fec:	782c      	ldrbeq	r4, [r5, #0]
 8012fee:	1c95      	addeq	r5, r2, #2
 8012ff0:	e7cf      	b.n	8012f92 <_strtol_l.constprop.0+0x3a>
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d1da      	bne.n	8012fac <_strtol_l.constprop.0+0x54>
 8012ff6:	2c30      	cmp	r4, #48	@ 0x30
 8012ff8:	bf0c      	ite	eq
 8012ffa:	2308      	moveq	r3, #8
 8012ffc:	230a      	movne	r3, #10
 8012ffe:	e7d5      	b.n	8012fac <_strtol_l.constprop.0+0x54>
 8013000:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013004:	2f19      	cmp	r7, #25
 8013006:	d801      	bhi.n	801300c <_strtol_l.constprop.0+0xb4>
 8013008:	3c37      	subs	r4, #55	@ 0x37
 801300a:	e7de      	b.n	8012fca <_strtol_l.constprop.0+0x72>
 801300c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013010:	2f19      	cmp	r7, #25
 8013012:	d804      	bhi.n	801301e <_strtol_l.constprop.0+0xc6>
 8013014:	3c57      	subs	r4, #87	@ 0x57
 8013016:	e7d8      	b.n	8012fca <_strtol_l.constprop.0+0x72>
 8013018:	f04f 32ff 	mov.w	r2, #4294967295
 801301c:	e7e1      	b.n	8012fe2 <_strtol_l.constprop.0+0x8a>
 801301e:	1c53      	adds	r3, r2, #1
 8013020:	d108      	bne.n	8013034 <_strtol_l.constprop.0+0xdc>
 8013022:	2322      	movs	r3, #34	@ 0x22
 8013024:	f8ce 3000 	str.w	r3, [lr]
 8013028:	4660      	mov	r0, ip
 801302a:	f1b8 0f00 	cmp.w	r8, #0
 801302e:	d0a0      	beq.n	8012f72 <_strtol_l.constprop.0+0x1a>
 8013030:	1e69      	subs	r1, r5, #1
 8013032:	e006      	b.n	8013042 <_strtol_l.constprop.0+0xea>
 8013034:	b106      	cbz	r6, 8013038 <_strtol_l.constprop.0+0xe0>
 8013036:	4240      	negs	r0, r0
 8013038:	f1b8 0f00 	cmp.w	r8, #0
 801303c:	d099      	beq.n	8012f72 <_strtol_l.constprop.0+0x1a>
 801303e:	2a00      	cmp	r2, #0
 8013040:	d1f6      	bne.n	8013030 <_strtol_l.constprop.0+0xd8>
 8013042:	f8c8 1000 	str.w	r1, [r8]
 8013046:	e794      	b.n	8012f72 <_strtol_l.constprop.0+0x1a>
 8013048:	08013dc9 	.word	0x08013dc9

0801304c <_strtol_r>:
 801304c:	f7ff bf84 	b.w	8012f58 <_strtol_l.constprop.0>

08013050 <__ascii_wctomb>:
 8013050:	4603      	mov	r3, r0
 8013052:	4608      	mov	r0, r1
 8013054:	b141      	cbz	r1, 8013068 <__ascii_wctomb+0x18>
 8013056:	2aff      	cmp	r2, #255	@ 0xff
 8013058:	d904      	bls.n	8013064 <__ascii_wctomb+0x14>
 801305a:	228a      	movs	r2, #138	@ 0x8a
 801305c:	601a      	str	r2, [r3, #0]
 801305e:	f04f 30ff 	mov.w	r0, #4294967295
 8013062:	4770      	bx	lr
 8013064:	700a      	strb	r2, [r1, #0]
 8013066:	2001      	movs	r0, #1
 8013068:	4770      	bx	lr

0801306a <__ssputs_r>:
 801306a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801306e:	688e      	ldr	r6, [r1, #8]
 8013070:	461f      	mov	r7, r3
 8013072:	42be      	cmp	r6, r7
 8013074:	680b      	ldr	r3, [r1, #0]
 8013076:	4682      	mov	sl, r0
 8013078:	460c      	mov	r4, r1
 801307a:	4690      	mov	r8, r2
 801307c:	d82d      	bhi.n	80130da <__ssputs_r+0x70>
 801307e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013082:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013086:	d026      	beq.n	80130d6 <__ssputs_r+0x6c>
 8013088:	6965      	ldr	r5, [r4, #20]
 801308a:	6909      	ldr	r1, [r1, #16]
 801308c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013090:	eba3 0901 	sub.w	r9, r3, r1
 8013094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013098:	1c7b      	adds	r3, r7, #1
 801309a:	444b      	add	r3, r9
 801309c:	106d      	asrs	r5, r5, #1
 801309e:	429d      	cmp	r5, r3
 80130a0:	bf38      	it	cc
 80130a2:	461d      	movcc	r5, r3
 80130a4:	0553      	lsls	r3, r2, #21
 80130a6:	d527      	bpl.n	80130f8 <__ssputs_r+0x8e>
 80130a8:	4629      	mov	r1, r5
 80130aa:	f7fc f871 	bl	800f190 <_malloc_r>
 80130ae:	4606      	mov	r6, r0
 80130b0:	b360      	cbz	r0, 801310c <__ssputs_r+0xa2>
 80130b2:	6921      	ldr	r1, [r4, #16]
 80130b4:	464a      	mov	r2, r9
 80130b6:	f7fe f878 	bl	80111aa <memcpy>
 80130ba:	89a3      	ldrh	r3, [r4, #12]
 80130bc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80130c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130c4:	81a3      	strh	r3, [r4, #12]
 80130c6:	6126      	str	r6, [r4, #16]
 80130c8:	6165      	str	r5, [r4, #20]
 80130ca:	444e      	add	r6, r9
 80130cc:	eba5 0509 	sub.w	r5, r5, r9
 80130d0:	6026      	str	r6, [r4, #0]
 80130d2:	60a5      	str	r5, [r4, #8]
 80130d4:	463e      	mov	r6, r7
 80130d6:	42be      	cmp	r6, r7
 80130d8:	d900      	bls.n	80130dc <__ssputs_r+0x72>
 80130da:	463e      	mov	r6, r7
 80130dc:	6820      	ldr	r0, [r4, #0]
 80130de:	4632      	mov	r2, r6
 80130e0:	4641      	mov	r1, r8
 80130e2:	f000 fb7b 	bl	80137dc <memmove>
 80130e6:	68a3      	ldr	r3, [r4, #8]
 80130e8:	1b9b      	subs	r3, r3, r6
 80130ea:	60a3      	str	r3, [r4, #8]
 80130ec:	6823      	ldr	r3, [r4, #0]
 80130ee:	4433      	add	r3, r6
 80130f0:	6023      	str	r3, [r4, #0]
 80130f2:	2000      	movs	r0, #0
 80130f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130f8:	462a      	mov	r2, r5
 80130fa:	f7fc f8dd 	bl	800f2b8 <_realloc_r>
 80130fe:	4606      	mov	r6, r0
 8013100:	2800      	cmp	r0, #0
 8013102:	d1e0      	bne.n	80130c6 <__ssputs_r+0x5c>
 8013104:	6921      	ldr	r1, [r4, #16]
 8013106:	4650      	mov	r0, sl
 8013108:	f7fe fed6 	bl	8011eb8 <_free_r>
 801310c:	230c      	movs	r3, #12
 801310e:	f8ca 3000 	str.w	r3, [sl]
 8013112:	89a3      	ldrh	r3, [r4, #12]
 8013114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013118:	81a3      	strh	r3, [r4, #12]
 801311a:	f04f 30ff 	mov.w	r0, #4294967295
 801311e:	e7e9      	b.n	80130f4 <__ssputs_r+0x8a>

08013120 <_svfiprintf_r>:
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013124:	4698      	mov	r8, r3
 8013126:	898b      	ldrh	r3, [r1, #12]
 8013128:	061b      	lsls	r3, r3, #24
 801312a:	b09d      	sub	sp, #116	@ 0x74
 801312c:	4607      	mov	r7, r0
 801312e:	460d      	mov	r5, r1
 8013130:	4614      	mov	r4, r2
 8013132:	d510      	bpl.n	8013156 <_svfiprintf_r+0x36>
 8013134:	690b      	ldr	r3, [r1, #16]
 8013136:	b973      	cbnz	r3, 8013156 <_svfiprintf_r+0x36>
 8013138:	2140      	movs	r1, #64	@ 0x40
 801313a:	f7fc f829 	bl	800f190 <_malloc_r>
 801313e:	6028      	str	r0, [r5, #0]
 8013140:	6128      	str	r0, [r5, #16]
 8013142:	b930      	cbnz	r0, 8013152 <_svfiprintf_r+0x32>
 8013144:	230c      	movs	r3, #12
 8013146:	603b      	str	r3, [r7, #0]
 8013148:	f04f 30ff 	mov.w	r0, #4294967295
 801314c:	b01d      	add	sp, #116	@ 0x74
 801314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013152:	2340      	movs	r3, #64	@ 0x40
 8013154:	616b      	str	r3, [r5, #20]
 8013156:	2300      	movs	r3, #0
 8013158:	9309      	str	r3, [sp, #36]	@ 0x24
 801315a:	2320      	movs	r3, #32
 801315c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013160:	f8cd 800c 	str.w	r8, [sp, #12]
 8013164:	2330      	movs	r3, #48	@ 0x30
 8013166:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013304 <_svfiprintf_r+0x1e4>
 801316a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801316e:	f04f 0901 	mov.w	r9, #1
 8013172:	4623      	mov	r3, r4
 8013174:	469a      	mov	sl, r3
 8013176:	f813 2b01 	ldrb.w	r2, [r3], #1
 801317a:	b10a      	cbz	r2, 8013180 <_svfiprintf_r+0x60>
 801317c:	2a25      	cmp	r2, #37	@ 0x25
 801317e:	d1f9      	bne.n	8013174 <_svfiprintf_r+0x54>
 8013180:	ebba 0b04 	subs.w	fp, sl, r4
 8013184:	d00b      	beq.n	801319e <_svfiprintf_r+0x7e>
 8013186:	465b      	mov	r3, fp
 8013188:	4622      	mov	r2, r4
 801318a:	4629      	mov	r1, r5
 801318c:	4638      	mov	r0, r7
 801318e:	f7ff ff6c 	bl	801306a <__ssputs_r>
 8013192:	3001      	adds	r0, #1
 8013194:	f000 80a7 	beq.w	80132e6 <_svfiprintf_r+0x1c6>
 8013198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801319a:	445a      	add	r2, fp
 801319c:	9209      	str	r2, [sp, #36]	@ 0x24
 801319e:	f89a 3000 	ldrb.w	r3, [sl]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f000 809f 	beq.w	80132e6 <_svfiprintf_r+0x1c6>
 80131a8:	2300      	movs	r3, #0
 80131aa:	f04f 32ff 	mov.w	r2, #4294967295
 80131ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131b2:	f10a 0a01 	add.w	sl, sl, #1
 80131b6:	9304      	str	r3, [sp, #16]
 80131b8:	9307      	str	r3, [sp, #28]
 80131ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80131be:	931a      	str	r3, [sp, #104]	@ 0x68
 80131c0:	4654      	mov	r4, sl
 80131c2:	2205      	movs	r2, #5
 80131c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131c8:	484e      	ldr	r0, [pc, #312]	@ (8013304 <_svfiprintf_r+0x1e4>)
 80131ca:	f7ec ffe9 	bl	80001a0 <memchr>
 80131ce:	9a04      	ldr	r2, [sp, #16]
 80131d0:	b9d8      	cbnz	r0, 801320a <_svfiprintf_r+0xea>
 80131d2:	06d0      	lsls	r0, r2, #27
 80131d4:	bf44      	itt	mi
 80131d6:	2320      	movmi	r3, #32
 80131d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80131dc:	0711      	lsls	r1, r2, #28
 80131de:	bf44      	itt	mi
 80131e0:	232b      	movmi	r3, #43	@ 0x2b
 80131e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80131e6:	f89a 3000 	ldrb.w	r3, [sl]
 80131ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80131ec:	d015      	beq.n	801321a <_svfiprintf_r+0xfa>
 80131ee:	9a07      	ldr	r2, [sp, #28]
 80131f0:	4654      	mov	r4, sl
 80131f2:	2000      	movs	r0, #0
 80131f4:	f04f 0c0a 	mov.w	ip, #10
 80131f8:	4621      	mov	r1, r4
 80131fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131fe:	3b30      	subs	r3, #48	@ 0x30
 8013200:	2b09      	cmp	r3, #9
 8013202:	d94b      	bls.n	801329c <_svfiprintf_r+0x17c>
 8013204:	b1b0      	cbz	r0, 8013234 <_svfiprintf_r+0x114>
 8013206:	9207      	str	r2, [sp, #28]
 8013208:	e014      	b.n	8013234 <_svfiprintf_r+0x114>
 801320a:	eba0 0308 	sub.w	r3, r0, r8
 801320e:	fa09 f303 	lsl.w	r3, r9, r3
 8013212:	4313      	orrs	r3, r2
 8013214:	9304      	str	r3, [sp, #16]
 8013216:	46a2      	mov	sl, r4
 8013218:	e7d2      	b.n	80131c0 <_svfiprintf_r+0xa0>
 801321a:	9b03      	ldr	r3, [sp, #12]
 801321c:	1d19      	adds	r1, r3, #4
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	9103      	str	r1, [sp, #12]
 8013222:	2b00      	cmp	r3, #0
 8013224:	bfbb      	ittet	lt
 8013226:	425b      	neglt	r3, r3
 8013228:	f042 0202 	orrlt.w	r2, r2, #2
 801322c:	9307      	strge	r3, [sp, #28]
 801322e:	9307      	strlt	r3, [sp, #28]
 8013230:	bfb8      	it	lt
 8013232:	9204      	strlt	r2, [sp, #16]
 8013234:	7823      	ldrb	r3, [r4, #0]
 8013236:	2b2e      	cmp	r3, #46	@ 0x2e
 8013238:	d10a      	bne.n	8013250 <_svfiprintf_r+0x130>
 801323a:	7863      	ldrb	r3, [r4, #1]
 801323c:	2b2a      	cmp	r3, #42	@ 0x2a
 801323e:	d132      	bne.n	80132a6 <_svfiprintf_r+0x186>
 8013240:	9b03      	ldr	r3, [sp, #12]
 8013242:	1d1a      	adds	r2, r3, #4
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	9203      	str	r2, [sp, #12]
 8013248:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801324c:	3402      	adds	r4, #2
 801324e:	9305      	str	r3, [sp, #20]
 8013250:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013314 <_svfiprintf_r+0x1f4>
 8013254:	7821      	ldrb	r1, [r4, #0]
 8013256:	2203      	movs	r2, #3
 8013258:	4650      	mov	r0, sl
 801325a:	f7ec ffa1 	bl	80001a0 <memchr>
 801325e:	b138      	cbz	r0, 8013270 <_svfiprintf_r+0x150>
 8013260:	9b04      	ldr	r3, [sp, #16]
 8013262:	eba0 000a 	sub.w	r0, r0, sl
 8013266:	2240      	movs	r2, #64	@ 0x40
 8013268:	4082      	lsls	r2, r0
 801326a:	4313      	orrs	r3, r2
 801326c:	3401      	adds	r4, #1
 801326e:	9304      	str	r3, [sp, #16]
 8013270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013274:	4824      	ldr	r0, [pc, #144]	@ (8013308 <_svfiprintf_r+0x1e8>)
 8013276:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801327a:	2206      	movs	r2, #6
 801327c:	f7ec ff90 	bl	80001a0 <memchr>
 8013280:	2800      	cmp	r0, #0
 8013282:	d036      	beq.n	80132f2 <_svfiprintf_r+0x1d2>
 8013284:	4b21      	ldr	r3, [pc, #132]	@ (801330c <_svfiprintf_r+0x1ec>)
 8013286:	bb1b      	cbnz	r3, 80132d0 <_svfiprintf_r+0x1b0>
 8013288:	9b03      	ldr	r3, [sp, #12]
 801328a:	3307      	adds	r3, #7
 801328c:	f023 0307 	bic.w	r3, r3, #7
 8013290:	3308      	adds	r3, #8
 8013292:	9303      	str	r3, [sp, #12]
 8013294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013296:	4433      	add	r3, r6
 8013298:	9309      	str	r3, [sp, #36]	@ 0x24
 801329a:	e76a      	b.n	8013172 <_svfiprintf_r+0x52>
 801329c:	fb0c 3202 	mla	r2, ip, r2, r3
 80132a0:	460c      	mov	r4, r1
 80132a2:	2001      	movs	r0, #1
 80132a4:	e7a8      	b.n	80131f8 <_svfiprintf_r+0xd8>
 80132a6:	2300      	movs	r3, #0
 80132a8:	3401      	adds	r4, #1
 80132aa:	9305      	str	r3, [sp, #20]
 80132ac:	4619      	mov	r1, r3
 80132ae:	f04f 0c0a 	mov.w	ip, #10
 80132b2:	4620      	mov	r0, r4
 80132b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132b8:	3a30      	subs	r2, #48	@ 0x30
 80132ba:	2a09      	cmp	r2, #9
 80132bc:	d903      	bls.n	80132c6 <_svfiprintf_r+0x1a6>
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d0c6      	beq.n	8013250 <_svfiprintf_r+0x130>
 80132c2:	9105      	str	r1, [sp, #20]
 80132c4:	e7c4      	b.n	8013250 <_svfiprintf_r+0x130>
 80132c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80132ca:	4604      	mov	r4, r0
 80132cc:	2301      	movs	r3, #1
 80132ce:	e7f0      	b.n	80132b2 <_svfiprintf_r+0x192>
 80132d0:	ab03      	add	r3, sp, #12
 80132d2:	9300      	str	r3, [sp, #0]
 80132d4:	462a      	mov	r2, r5
 80132d6:	4b0e      	ldr	r3, [pc, #56]	@ (8013310 <_svfiprintf_r+0x1f0>)
 80132d8:	a904      	add	r1, sp, #16
 80132da:	4638      	mov	r0, r7
 80132dc:	f7fc fece 	bl	801007c <_printf_float>
 80132e0:	1c42      	adds	r2, r0, #1
 80132e2:	4606      	mov	r6, r0
 80132e4:	d1d6      	bne.n	8013294 <_svfiprintf_r+0x174>
 80132e6:	89ab      	ldrh	r3, [r5, #12]
 80132e8:	065b      	lsls	r3, r3, #25
 80132ea:	f53f af2d 	bmi.w	8013148 <_svfiprintf_r+0x28>
 80132ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80132f0:	e72c      	b.n	801314c <_svfiprintf_r+0x2c>
 80132f2:	ab03      	add	r3, sp, #12
 80132f4:	9300      	str	r3, [sp, #0]
 80132f6:	462a      	mov	r2, r5
 80132f8:	4b05      	ldr	r3, [pc, #20]	@ (8013310 <_svfiprintf_r+0x1f0>)
 80132fa:	a904      	add	r1, sp, #16
 80132fc:	4638      	mov	r0, r7
 80132fe:	f7fd f955 	bl	80105ac <_printf_i>
 8013302:	e7ed      	b.n	80132e0 <_svfiprintf_r+0x1c0>
 8013304:	08014188 	.word	0x08014188
 8013308:	08014192 	.word	0x08014192
 801330c:	0801007d 	.word	0x0801007d
 8013310:	0801306b 	.word	0x0801306b
 8013314:	0801418e 	.word	0x0801418e

08013318 <__sfputc_r>:
 8013318:	6893      	ldr	r3, [r2, #8]
 801331a:	3b01      	subs	r3, #1
 801331c:	2b00      	cmp	r3, #0
 801331e:	b410      	push	{r4}
 8013320:	6093      	str	r3, [r2, #8]
 8013322:	da08      	bge.n	8013336 <__sfputc_r+0x1e>
 8013324:	6994      	ldr	r4, [r2, #24]
 8013326:	42a3      	cmp	r3, r4
 8013328:	db01      	blt.n	801332e <__sfputc_r+0x16>
 801332a:	290a      	cmp	r1, #10
 801332c:	d103      	bne.n	8013336 <__sfputc_r+0x1e>
 801332e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013332:	f7fd be04 	b.w	8010f3e <__swbuf_r>
 8013336:	6813      	ldr	r3, [r2, #0]
 8013338:	1c58      	adds	r0, r3, #1
 801333a:	6010      	str	r0, [r2, #0]
 801333c:	7019      	strb	r1, [r3, #0]
 801333e:	4608      	mov	r0, r1
 8013340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013344:	4770      	bx	lr

08013346 <__sfputs_r>:
 8013346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013348:	4606      	mov	r6, r0
 801334a:	460f      	mov	r7, r1
 801334c:	4614      	mov	r4, r2
 801334e:	18d5      	adds	r5, r2, r3
 8013350:	42ac      	cmp	r4, r5
 8013352:	d101      	bne.n	8013358 <__sfputs_r+0x12>
 8013354:	2000      	movs	r0, #0
 8013356:	e007      	b.n	8013368 <__sfputs_r+0x22>
 8013358:	f814 1b01 	ldrb.w	r1, [r4], #1
 801335c:	463a      	mov	r2, r7
 801335e:	4630      	mov	r0, r6
 8013360:	f7ff ffda 	bl	8013318 <__sfputc_r>
 8013364:	1c43      	adds	r3, r0, #1
 8013366:	d1f3      	bne.n	8013350 <__sfputs_r+0xa>
 8013368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801336c <_vfiprintf_r>:
 801336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013370:	460d      	mov	r5, r1
 8013372:	b09d      	sub	sp, #116	@ 0x74
 8013374:	4614      	mov	r4, r2
 8013376:	4698      	mov	r8, r3
 8013378:	4606      	mov	r6, r0
 801337a:	b118      	cbz	r0, 8013384 <_vfiprintf_r+0x18>
 801337c:	6a03      	ldr	r3, [r0, #32]
 801337e:	b90b      	cbnz	r3, 8013384 <_vfiprintf_r+0x18>
 8013380:	f7fd fcd4 	bl	8010d2c <__sinit>
 8013384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013386:	07d9      	lsls	r1, r3, #31
 8013388:	d405      	bmi.n	8013396 <_vfiprintf_r+0x2a>
 801338a:	89ab      	ldrh	r3, [r5, #12]
 801338c:	059a      	lsls	r2, r3, #22
 801338e:	d402      	bmi.n	8013396 <_vfiprintf_r+0x2a>
 8013390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013392:	f7fd ff08 	bl	80111a6 <__retarget_lock_acquire_recursive>
 8013396:	89ab      	ldrh	r3, [r5, #12]
 8013398:	071b      	lsls	r3, r3, #28
 801339a:	d501      	bpl.n	80133a0 <_vfiprintf_r+0x34>
 801339c:	692b      	ldr	r3, [r5, #16]
 801339e:	b99b      	cbnz	r3, 80133c8 <_vfiprintf_r+0x5c>
 80133a0:	4629      	mov	r1, r5
 80133a2:	4630      	mov	r0, r6
 80133a4:	f7fd fe0a 	bl	8010fbc <__swsetup_r>
 80133a8:	b170      	cbz	r0, 80133c8 <_vfiprintf_r+0x5c>
 80133aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133ac:	07dc      	lsls	r4, r3, #31
 80133ae:	d504      	bpl.n	80133ba <_vfiprintf_r+0x4e>
 80133b0:	f04f 30ff 	mov.w	r0, #4294967295
 80133b4:	b01d      	add	sp, #116	@ 0x74
 80133b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ba:	89ab      	ldrh	r3, [r5, #12]
 80133bc:	0598      	lsls	r0, r3, #22
 80133be:	d4f7      	bmi.n	80133b0 <_vfiprintf_r+0x44>
 80133c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133c2:	f7fd fef1 	bl	80111a8 <__retarget_lock_release_recursive>
 80133c6:	e7f3      	b.n	80133b0 <_vfiprintf_r+0x44>
 80133c8:	2300      	movs	r3, #0
 80133ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80133cc:	2320      	movs	r3, #32
 80133ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80133d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80133d6:	2330      	movs	r3, #48	@ 0x30
 80133d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013588 <_vfiprintf_r+0x21c>
 80133dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80133e0:	f04f 0901 	mov.w	r9, #1
 80133e4:	4623      	mov	r3, r4
 80133e6:	469a      	mov	sl, r3
 80133e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133ec:	b10a      	cbz	r2, 80133f2 <_vfiprintf_r+0x86>
 80133ee:	2a25      	cmp	r2, #37	@ 0x25
 80133f0:	d1f9      	bne.n	80133e6 <_vfiprintf_r+0x7a>
 80133f2:	ebba 0b04 	subs.w	fp, sl, r4
 80133f6:	d00b      	beq.n	8013410 <_vfiprintf_r+0xa4>
 80133f8:	465b      	mov	r3, fp
 80133fa:	4622      	mov	r2, r4
 80133fc:	4629      	mov	r1, r5
 80133fe:	4630      	mov	r0, r6
 8013400:	f7ff ffa1 	bl	8013346 <__sfputs_r>
 8013404:	3001      	adds	r0, #1
 8013406:	f000 80a7 	beq.w	8013558 <_vfiprintf_r+0x1ec>
 801340a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801340c:	445a      	add	r2, fp
 801340e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013410:	f89a 3000 	ldrb.w	r3, [sl]
 8013414:	2b00      	cmp	r3, #0
 8013416:	f000 809f 	beq.w	8013558 <_vfiprintf_r+0x1ec>
 801341a:	2300      	movs	r3, #0
 801341c:	f04f 32ff 	mov.w	r2, #4294967295
 8013420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013424:	f10a 0a01 	add.w	sl, sl, #1
 8013428:	9304      	str	r3, [sp, #16]
 801342a:	9307      	str	r3, [sp, #28]
 801342c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013430:	931a      	str	r3, [sp, #104]	@ 0x68
 8013432:	4654      	mov	r4, sl
 8013434:	2205      	movs	r2, #5
 8013436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801343a:	4853      	ldr	r0, [pc, #332]	@ (8013588 <_vfiprintf_r+0x21c>)
 801343c:	f7ec feb0 	bl	80001a0 <memchr>
 8013440:	9a04      	ldr	r2, [sp, #16]
 8013442:	b9d8      	cbnz	r0, 801347c <_vfiprintf_r+0x110>
 8013444:	06d1      	lsls	r1, r2, #27
 8013446:	bf44      	itt	mi
 8013448:	2320      	movmi	r3, #32
 801344a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801344e:	0713      	lsls	r3, r2, #28
 8013450:	bf44      	itt	mi
 8013452:	232b      	movmi	r3, #43	@ 0x2b
 8013454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013458:	f89a 3000 	ldrb.w	r3, [sl]
 801345c:	2b2a      	cmp	r3, #42	@ 0x2a
 801345e:	d015      	beq.n	801348c <_vfiprintf_r+0x120>
 8013460:	9a07      	ldr	r2, [sp, #28]
 8013462:	4654      	mov	r4, sl
 8013464:	2000      	movs	r0, #0
 8013466:	f04f 0c0a 	mov.w	ip, #10
 801346a:	4621      	mov	r1, r4
 801346c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013470:	3b30      	subs	r3, #48	@ 0x30
 8013472:	2b09      	cmp	r3, #9
 8013474:	d94b      	bls.n	801350e <_vfiprintf_r+0x1a2>
 8013476:	b1b0      	cbz	r0, 80134a6 <_vfiprintf_r+0x13a>
 8013478:	9207      	str	r2, [sp, #28]
 801347a:	e014      	b.n	80134a6 <_vfiprintf_r+0x13a>
 801347c:	eba0 0308 	sub.w	r3, r0, r8
 8013480:	fa09 f303 	lsl.w	r3, r9, r3
 8013484:	4313      	orrs	r3, r2
 8013486:	9304      	str	r3, [sp, #16]
 8013488:	46a2      	mov	sl, r4
 801348a:	e7d2      	b.n	8013432 <_vfiprintf_r+0xc6>
 801348c:	9b03      	ldr	r3, [sp, #12]
 801348e:	1d19      	adds	r1, r3, #4
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	9103      	str	r1, [sp, #12]
 8013494:	2b00      	cmp	r3, #0
 8013496:	bfbb      	ittet	lt
 8013498:	425b      	neglt	r3, r3
 801349a:	f042 0202 	orrlt.w	r2, r2, #2
 801349e:	9307      	strge	r3, [sp, #28]
 80134a0:	9307      	strlt	r3, [sp, #28]
 80134a2:	bfb8      	it	lt
 80134a4:	9204      	strlt	r2, [sp, #16]
 80134a6:	7823      	ldrb	r3, [r4, #0]
 80134a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80134aa:	d10a      	bne.n	80134c2 <_vfiprintf_r+0x156>
 80134ac:	7863      	ldrb	r3, [r4, #1]
 80134ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80134b0:	d132      	bne.n	8013518 <_vfiprintf_r+0x1ac>
 80134b2:	9b03      	ldr	r3, [sp, #12]
 80134b4:	1d1a      	adds	r2, r3, #4
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	9203      	str	r2, [sp, #12]
 80134ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80134be:	3402      	adds	r4, #2
 80134c0:	9305      	str	r3, [sp, #20]
 80134c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013598 <_vfiprintf_r+0x22c>
 80134c6:	7821      	ldrb	r1, [r4, #0]
 80134c8:	2203      	movs	r2, #3
 80134ca:	4650      	mov	r0, sl
 80134cc:	f7ec fe68 	bl	80001a0 <memchr>
 80134d0:	b138      	cbz	r0, 80134e2 <_vfiprintf_r+0x176>
 80134d2:	9b04      	ldr	r3, [sp, #16]
 80134d4:	eba0 000a 	sub.w	r0, r0, sl
 80134d8:	2240      	movs	r2, #64	@ 0x40
 80134da:	4082      	lsls	r2, r0
 80134dc:	4313      	orrs	r3, r2
 80134de:	3401      	adds	r4, #1
 80134e0:	9304      	str	r3, [sp, #16]
 80134e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134e6:	4829      	ldr	r0, [pc, #164]	@ (801358c <_vfiprintf_r+0x220>)
 80134e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80134ec:	2206      	movs	r2, #6
 80134ee:	f7ec fe57 	bl	80001a0 <memchr>
 80134f2:	2800      	cmp	r0, #0
 80134f4:	d03f      	beq.n	8013576 <_vfiprintf_r+0x20a>
 80134f6:	4b26      	ldr	r3, [pc, #152]	@ (8013590 <_vfiprintf_r+0x224>)
 80134f8:	bb1b      	cbnz	r3, 8013542 <_vfiprintf_r+0x1d6>
 80134fa:	9b03      	ldr	r3, [sp, #12]
 80134fc:	3307      	adds	r3, #7
 80134fe:	f023 0307 	bic.w	r3, r3, #7
 8013502:	3308      	adds	r3, #8
 8013504:	9303      	str	r3, [sp, #12]
 8013506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013508:	443b      	add	r3, r7
 801350a:	9309      	str	r3, [sp, #36]	@ 0x24
 801350c:	e76a      	b.n	80133e4 <_vfiprintf_r+0x78>
 801350e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013512:	460c      	mov	r4, r1
 8013514:	2001      	movs	r0, #1
 8013516:	e7a8      	b.n	801346a <_vfiprintf_r+0xfe>
 8013518:	2300      	movs	r3, #0
 801351a:	3401      	adds	r4, #1
 801351c:	9305      	str	r3, [sp, #20]
 801351e:	4619      	mov	r1, r3
 8013520:	f04f 0c0a 	mov.w	ip, #10
 8013524:	4620      	mov	r0, r4
 8013526:	f810 2b01 	ldrb.w	r2, [r0], #1
 801352a:	3a30      	subs	r2, #48	@ 0x30
 801352c:	2a09      	cmp	r2, #9
 801352e:	d903      	bls.n	8013538 <_vfiprintf_r+0x1cc>
 8013530:	2b00      	cmp	r3, #0
 8013532:	d0c6      	beq.n	80134c2 <_vfiprintf_r+0x156>
 8013534:	9105      	str	r1, [sp, #20]
 8013536:	e7c4      	b.n	80134c2 <_vfiprintf_r+0x156>
 8013538:	fb0c 2101 	mla	r1, ip, r1, r2
 801353c:	4604      	mov	r4, r0
 801353e:	2301      	movs	r3, #1
 8013540:	e7f0      	b.n	8013524 <_vfiprintf_r+0x1b8>
 8013542:	ab03      	add	r3, sp, #12
 8013544:	9300      	str	r3, [sp, #0]
 8013546:	462a      	mov	r2, r5
 8013548:	4b12      	ldr	r3, [pc, #72]	@ (8013594 <_vfiprintf_r+0x228>)
 801354a:	a904      	add	r1, sp, #16
 801354c:	4630      	mov	r0, r6
 801354e:	f7fc fd95 	bl	801007c <_printf_float>
 8013552:	4607      	mov	r7, r0
 8013554:	1c78      	adds	r0, r7, #1
 8013556:	d1d6      	bne.n	8013506 <_vfiprintf_r+0x19a>
 8013558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801355a:	07d9      	lsls	r1, r3, #31
 801355c:	d405      	bmi.n	801356a <_vfiprintf_r+0x1fe>
 801355e:	89ab      	ldrh	r3, [r5, #12]
 8013560:	059a      	lsls	r2, r3, #22
 8013562:	d402      	bmi.n	801356a <_vfiprintf_r+0x1fe>
 8013564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013566:	f7fd fe1f 	bl	80111a8 <__retarget_lock_release_recursive>
 801356a:	89ab      	ldrh	r3, [r5, #12]
 801356c:	065b      	lsls	r3, r3, #25
 801356e:	f53f af1f 	bmi.w	80133b0 <_vfiprintf_r+0x44>
 8013572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013574:	e71e      	b.n	80133b4 <_vfiprintf_r+0x48>
 8013576:	ab03      	add	r3, sp, #12
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	462a      	mov	r2, r5
 801357c:	4b05      	ldr	r3, [pc, #20]	@ (8013594 <_vfiprintf_r+0x228>)
 801357e:	a904      	add	r1, sp, #16
 8013580:	4630      	mov	r0, r6
 8013582:	f7fd f813 	bl	80105ac <_printf_i>
 8013586:	e7e4      	b.n	8013552 <_vfiprintf_r+0x1e6>
 8013588:	08014188 	.word	0x08014188
 801358c:	08014192 	.word	0x08014192
 8013590:	0801007d 	.word	0x0801007d
 8013594:	08013347 	.word	0x08013347
 8013598:	0801418e 	.word	0x0801418e

0801359c <__sflush_r>:
 801359c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80135a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a4:	0716      	lsls	r6, r2, #28
 80135a6:	4605      	mov	r5, r0
 80135a8:	460c      	mov	r4, r1
 80135aa:	d454      	bmi.n	8013656 <__sflush_r+0xba>
 80135ac:	684b      	ldr	r3, [r1, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	dc02      	bgt.n	80135b8 <__sflush_r+0x1c>
 80135b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	dd48      	ble.n	801364a <__sflush_r+0xae>
 80135b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80135ba:	2e00      	cmp	r6, #0
 80135bc:	d045      	beq.n	801364a <__sflush_r+0xae>
 80135be:	2300      	movs	r3, #0
 80135c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80135c4:	682f      	ldr	r7, [r5, #0]
 80135c6:	6a21      	ldr	r1, [r4, #32]
 80135c8:	602b      	str	r3, [r5, #0]
 80135ca:	d030      	beq.n	801362e <__sflush_r+0x92>
 80135cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80135ce:	89a3      	ldrh	r3, [r4, #12]
 80135d0:	0759      	lsls	r1, r3, #29
 80135d2:	d505      	bpl.n	80135e0 <__sflush_r+0x44>
 80135d4:	6863      	ldr	r3, [r4, #4]
 80135d6:	1ad2      	subs	r2, r2, r3
 80135d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80135da:	b10b      	cbz	r3, 80135e0 <__sflush_r+0x44>
 80135dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80135de:	1ad2      	subs	r2, r2, r3
 80135e0:	2300      	movs	r3, #0
 80135e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80135e4:	6a21      	ldr	r1, [r4, #32]
 80135e6:	4628      	mov	r0, r5
 80135e8:	47b0      	blx	r6
 80135ea:	1c43      	adds	r3, r0, #1
 80135ec:	89a3      	ldrh	r3, [r4, #12]
 80135ee:	d106      	bne.n	80135fe <__sflush_r+0x62>
 80135f0:	6829      	ldr	r1, [r5, #0]
 80135f2:	291d      	cmp	r1, #29
 80135f4:	d82b      	bhi.n	801364e <__sflush_r+0xb2>
 80135f6:	4a2a      	ldr	r2, [pc, #168]	@ (80136a0 <__sflush_r+0x104>)
 80135f8:	410a      	asrs	r2, r1
 80135fa:	07d6      	lsls	r6, r2, #31
 80135fc:	d427      	bmi.n	801364e <__sflush_r+0xb2>
 80135fe:	2200      	movs	r2, #0
 8013600:	6062      	str	r2, [r4, #4]
 8013602:	04d9      	lsls	r1, r3, #19
 8013604:	6922      	ldr	r2, [r4, #16]
 8013606:	6022      	str	r2, [r4, #0]
 8013608:	d504      	bpl.n	8013614 <__sflush_r+0x78>
 801360a:	1c42      	adds	r2, r0, #1
 801360c:	d101      	bne.n	8013612 <__sflush_r+0x76>
 801360e:	682b      	ldr	r3, [r5, #0]
 8013610:	b903      	cbnz	r3, 8013614 <__sflush_r+0x78>
 8013612:	6560      	str	r0, [r4, #84]	@ 0x54
 8013614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013616:	602f      	str	r7, [r5, #0]
 8013618:	b1b9      	cbz	r1, 801364a <__sflush_r+0xae>
 801361a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801361e:	4299      	cmp	r1, r3
 8013620:	d002      	beq.n	8013628 <__sflush_r+0x8c>
 8013622:	4628      	mov	r0, r5
 8013624:	f7fe fc48 	bl	8011eb8 <_free_r>
 8013628:	2300      	movs	r3, #0
 801362a:	6363      	str	r3, [r4, #52]	@ 0x34
 801362c:	e00d      	b.n	801364a <__sflush_r+0xae>
 801362e:	2301      	movs	r3, #1
 8013630:	4628      	mov	r0, r5
 8013632:	47b0      	blx	r6
 8013634:	4602      	mov	r2, r0
 8013636:	1c50      	adds	r0, r2, #1
 8013638:	d1c9      	bne.n	80135ce <__sflush_r+0x32>
 801363a:	682b      	ldr	r3, [r5, #0]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d0c6      	beq.n	80135ce <__sflush_r+0x32>
 8013640:	2b1d      	cmp	r3, #29
 8013642:	d001      	beq.n	8013648 <__sflush_r+0xac>
 8013644:	2b16      	cmp	r3, #22
 8013646:	d11e      	bne.n	8013686 <__sflush_r+0xea>
 8013648:	602f      	str	r7, [r5, #0]
 801364a:	2000      	movs	r0, #0
 801364c:	e022      	b.n	8013694 <__sflush_r+0xf8>
 801364e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013652:	b21b      	sxth	r3, r3
 8013654:	e01b      	b.n	801368e <__sflush_r+0xf2>
 8013656:	690f      	ldr	r7, [r1, #16]
 8013658:	2f00      	cmp	r7, #0
 801365a:	d0f6      	beq.n	801364a <__sflush_r+0xae>
 801365c:	0793      	lsls	r3, r2, #30
 801365e:	680e      	ldr	r6, [r1, #0]
 8013660:	bf08      	it	eq
 8013662:	694b      	ldreq	r3, [r1, #20]
 8013664:	600f      	str	r7, [r1, #0]
 8013666:	bf18      	it	ne
 8013668:	2300      	movne	r3, #0
 801366a:	eba6 0807 	sub.w	r8, r6, r7
 801366e:	608b      	str	r3, [r1, #8]
 8013670:	f1b8 0f00 	cmp.w	r8, #0
 8013674:	dde9      	ble.n	801364a <__sflush_r+0xae>
 8013676:	6a21      	ldr	r1, [r4, #32]
 8013678:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801367a:	4643      	mov	r3, r8
 801367c:	463a      	mov	r2, r7
 801367e:	4628      	mov	r0, r5
 8013680:	47b0      	blx	r6
 8013682:	2800      	cmp	r0, #0
 8013684:	dc08      	bgt.n	8013698 <__sflush_r+0xfc>
 8013686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801368a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801368e:	81a3      	strh	r3, [r4, #12]
 8013690:	f04f 30ff 	mov.w	r0, #4294967295
 8013694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013698:	4407      	add	r7, r0
 801369a:	eba8 0800 	sub.w	r8, r8, r0
 801369e:	e7e7      	b.n	8013670 <__sflush_r+0xd4>
 80136a0:	dfbffffe 	.word	0xdfbffffe

080136a4 <_fflush_r>:
 80136a4:	b538      	push	{r3, r4, r5, lr}
 80136a6:	690b      	ldr	r3, [r1, #16]
 80136a8:	4605      	mov	r5, r0
 80136aa:	460c      	mov	r4, r1
 80136ac:	b913      	cbnz	r3, 80136b4 <_fflush_r+0x10>
 80136ae:	2500      	movs	r5, #0
 80136b0:	4628      	mov	r0, r5
 80136b2:	bd38      	pop	{r3, r4, r5, pc}
 80136b4:	b118      	cbz	r0, 80136be <_fflush_r+0x1a>
 80136b6:	6a03      	ldr	r3, [r0, #32]
 80136b8:	b90b      	cbnz	r3, 80136be <_fflush_r+0x1a>
 80136ba:	f7fd fb37 	bl	8010d2c <__sinit>
 80136be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d0f3      	beq.n	80136ae <_fflush_r+0xa>
 80136c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80136c8:	07d0      	lsls	r0, r2, #31
 80136ca:	d404      	bmi.n	80136d6 <_fflush_r+0x32>
 80136cc:	0599      	lsls	r1, r3, #22
 80136ce:	d402      	bmi.n	80136d6 <_fflush_r+0x32>
 80136d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136d2:	f7fd fd68 	bl	80111a6 <__retarget_lock_acquire_recursive>
 80136d6:	4628      	mov	r0, r5
 80136d8:	4621      	mov	r1, r4
 80136da:	f7ff ff5f 	bl	801359c <__sflush_r>
 80136de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80136e0:	07da      	lsls	r2, r3, #31
 80136e2:	4605      	mov	r5, r0
 80136e4:	d4e4      	bmi.n	80136b0 <_fflush_r+0xc>
 80136e6:	89a3      	ldrh	r3, [r4, #12]
 80136e8:	059b      	lsls	r3, r3, #22
 80136ea:	d4e1      	bmi.n	80136b0 <_fflush_r+0xc>
 80136ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136ee:	f7fd fd5b 	bl	80111a8 <__retarget_lock_release_recursive>
 80136f2:	e7dd      	b.n	80136b0 <_fflush_r+0xc>

080136f4 <fiprintf>:
 80136f4:	b40e      	push	{r1, r2, r3}
 80136f6:	b503      	push	{r0, r1, lr}
 80136f8:	4601      	mov	r1, r0
 80136fa:	ab03      	add	r3, sp, #12
 80136fc:	4805      	ldr	r0, [pc, #20]	@ (8013714 <fiprintf+0x20>)
 80136fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013702:	6800      	ldr	r0, [r0, #0]
 8013704:	9301      	str	r3, [sp, #4]
 8013706:	f7ff fe31 	bl	801336c <_vfiprintf_r>
 801370a:	b002      	add	sp, #8
 801370c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013710:	b003      	add	sp, #12
 8013712:	4770      	bx	lr
 8013714:	200001b0 	.word	0x200001b0

08013718 <__swhatbuf_r>:
 8013718:	b570      	push	{r4, r5, r6, lr}
 801371a:	460c      	mov	r4, r1
 801371c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013720:	2900      	cmp	r1, #0
 8013722:	b096      	sub	sp, #88	@ 0x58
 8013724:	4615      	mov	r5, r2
 8013726:	461e      	mov	r6, r3
 8013728:	da0d      	bge.n	8013746 <__swhatbuf_r+0x2e>
 801372a:	89a3      	ldrh	r3, [r4, #12]
 801372c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013730:	f04f 0100 	mov.w	r1, #0
 8013734:	bf14      	ite	ne
 8013736:	2340      	movne	r3, #64	@ 0x40
 8013738:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801373c:	2000      	movs	r0, #0
 801373e:	6031      	str	r1, [r6, #0]
 8013740:	602b      	str	r3, [r5, #0]
 8013742:	b016      	add	sp, #88	@ 0x58
 8013744:	bd70      	pop	{r4, r5, r6, pc}
 8013746:	466a      	mov	r2, sp
 8013748:	f000 f862 	bl	8013810 <_fstat_r>
 801374c:	2800      	cmp	r0, #0
 801374e:	dbec      	blt.n	801372a <__swhatbuf_r+0x12>
 8013750:	9901      	ldr	r1, [sp, #4]
 8013752:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013756:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801375a:	4259      	negs	r1, r3
 801375c:	4159      	adcs	r1, r3
 801375e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013762:	e7eb      	b.n	801373c <__swhatbuf_r+0x24>

08013764 <__smakebuf_r>:
 8013764:	898b      	ldrh	r3, [r1, #12]
 8013766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013768:	079d      	lsls	r5, r3, #30
 801376a:	4606      	mov	r6, r0
 801376c:	460c      	mov	r4, r1
 801376e:	d507      	bpl.n	8013780 <__smakebuf_r+0x1c>
 8013770:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013774:	6023      	str	r3, [r4, #0]
 8013776:	6123      	str	r3, [r4, #16]
 8013778:	2301      	movs	r3, #1
 801377a:	6163      	str	r3, [r4, #20]
 801377c:	b003      	add	sp, #12
 801377e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013780:	ab01      	add	r3, sp, #4
 8013782:	466a      	mov	r2, sp
 8013784:	f7ff ffc8 	bl	8013718 <__swhatbuf_r>
 8013788:	9f00      	ldr	r7, [sp, #0]
 801378a:	4605      	mov	r5, r0
 801378c:	4639      	mov	r1, r7
 801378e:	4630      	mov	r0, r6
 8013790:	f7fb fcfe 	bl	800f190 <_malloc_r>
 8013794:	b948      	cbnz	r0, 80137aa <__smakebuf_r+0x46>
 8013796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801379a:	059a      	lsls	r2, r3, #22
 801379c:	d4ee      	bmi.n	801377c <__smakebuf_r+0x18>
 801379e:	f023 0303 	bic.w	r3, r3, #3
 80137a2:	f043 0302 	orr.w	r3, r3, #2
 80137a6:	81a3      	strh	r3, [r4, #12]
 80137a8:	e7e2      	b.n	8013770 <__smakebuf_r+0xc>
 80137aa:	89a3      	ldrh	r3, [r4, #12]
 80137ac:	6020      	str	r0, [r4, #0]
 80137ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137b2:	81a3      	strh	r3, [r4, #12]
 80137b4:	9b01      	ldr	r3, [sp, #4]
 80137b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80137ba:	b15b      	cbz	r3, 80137d4 <__smakebuf_r+0x70>
 80137bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137c0:	4630      	mov	r0, r6
 80137c2:	f000 f837 	bl	8013834 <_isatty_r>
 80137c6:	b128      	cbz	r0, 80137d4 <__smakebuf_r+0x70>
 80137c8:	89a3      	ldrh	r3, [r4, #12]
 80137ca:	f023 0303 	bic.w	r3, r3, #3
 80137ce:	f043 0301 	orr.w	r3, r3, #1
 80137d2:	81a3      	strh	r3, [r4, #12]
 80137d4:	89a3      	ldrh	r3, [r4, #12]
 80137d6:	431d      	orrs	r5, r3
 80137d8:	81a5      	strh	r5, [r4, #12]
 80137da:	e7cf      	b.n	801377c <__smakebuf_r+0x18>

080137dc <memmove>:
 80137dc:	4288      	cmp	r0, r1
 80137de:	b510      	push	{r4, lr}
 80137e0:	eb01 0402 	add.w	r4, r1, r2
 80137e4:	d902      	bls.n	80137ec <memmove+0x10>
 80137e6:	4284      	cmp	r4, r0
 80137e8:	4623      	mov	r3, r4
 80137ea:	d807      	bhi.n	80137fc <memmove+0x20>
 80137ec:	1e43      	subs	r3, r0, #1
 80137ee:	42a1      	cmp	r1, r4
 80137f0:	d008      	beq.n	8013804 <memmove+0x28>
 80137f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137fa:	e7f8      	b.n	80137ee <memmove+0x12>
 80137fc:	4402      	add	r2, r0
 80137fe:	4601      	mov	r1, r0
 8013800:	428a      	cmp	r2, r1
 8013802:	d100      	bne.n	8013806 <memmove+0x2a>
 8013804:	bd10      	pop	{r4, pc}
 8013806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801380a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801380e:	e7f7      	b.n	8013800 <memmove+0x24>

08013810 <_fstat_r>:
 8013810:	b538      	push	{r3, r4, r5, lr}
 8013812:	4d07      	ldr	r5, [pc, #28]	@ (8013830 <_fstat_r+0x20>)
 8013814:	2300      	movs	r3, #0
 8013816:	4604      	mov	r4, r0
 8013818:	4608      	mov	r0, r1
 801381a:	4611      	mov	r1, r2
 801381c:	602b      	str	r3, [r5, #0]
 801381e:	f7f0 feaf 	bl	8004580 <_fstat>
 8013822:	1c43      	adds	r3, r0, #1
 8013824:	d102      	bne.n	801382c <_fstat_r+0x1c>
 8013826:	682b      	ldr	r3, [r5, #0]
 8013828:	b103      	cbz	r3, 801382c <_fstat_r+0x1c>
 801382a:	6023      	str	r3, [r4, #0]
 801382c:	bd38      	pop	{r3, r4, r5, pc}
 801382e:	bf00      	nop
 8013830:	20000a38 	.word	0x20000a38

08013834 <_isatty_r>:
 8013834:	b538      	push	{r3, r4, r5, lr}
 8013836:	4d06      	ldr	r5, [pc, #24]	@ (8013850 <_isatty_r+0x1c>)
 8013838:	2300      	movs	r3, #0
 801383a:	4604      	mov	r4, r0
 801383c:	4608      	mov	r0, r1
 801383e:	602b      	str	r3, [r5, #0]
 8013840:	f7f0 feae 	bl	80045a0 <_isatty>
 8013844:	1c43      	adds	r3, r0, #1
 8013846:	d102      	bne.n	801384e <_isatty_r+0x1a>
 8013848:	682b      	ldr	r3, [r5, #0]
 801384a:	b103      	cbz	r3, 801384e <_isatty_r+0x1a>
 801384c:	6023      	str	r3, [r4, #0]
 801384e:	bd38      	pop	{r3, r4, r5, pc}
 8013850:	20000a38 	.word	0x20000a38

08013854 <abort>:
 8013854:	b508      	push	{r3, lr}
 8013856:	2006      	movs	r0, #6
 8013858:	f000 f82c 	bl	80138b4 <raise>
 801385c:	2001      	movs	r0, #1
 801385e:	f7f0 fe5b 	bl	8004518 <_exit>

08013862 <_raise_r>:
 8013862:	291f      	cmp	r1, #31
 8013864:	b538      	push	{r3, r4, r5, lr}
 8013866:	4605      	mov	r5, r0
 8013868:	460c      	mov	r4, r1
 801386a:	d904      	bls.n	8013876 <_raise_r+0x14>
 801386c:	2316      	movs	r3, #22
 801386e:	6003      	str	r3, [r0, #0]
 8013870:	f04f 30ff 	mov.w	r0, #4294967295
 8013874:	bd38      	pop	{r3, r4, r5, pc}
 8013876:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013878:	b112      	cbz	r2, 8013880 <_raise_r+0x1e>
 801387a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801387e:	b94b      	cbnz	r3, 8013894 <_raise_r+0x32>
 8013880:	4628      	mov	r0, r5
 8013882:	f000 f831 	bl	80138e8 <_getpid_r>
 8013886:	4622      	mov	r2, r4
 8013888:	4601      	mov	r1, r0
 801388a:	4628      	mov	r0, r5
 801388c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013890:	f000 b818 	b.w	80138c4 <_kill_r>
 8013894:	2b01      	cmp	r3, #1
 8013896:	d00a      	beq.n	80138ae <_raise_r+0x4c>
 8013898:	1c59      	adds	r1, r3, #1
 801389a:	d103      	bne.n	80138a4 <_raise_r+0x42>
 801389c:	2316      	movs	r3, #22
 801389e:	6003      	str	r3, [r0, #0]
 80138a0:	2001      	movs	r0, #1
 80138a2:	e7e7      	b.n	8013874 <_raise_r+0x12>
 80138a4:	2100      	movs	r1, #0
 80138a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80138aa:	4620      	mov	r0, r4
 80138ac:	4798      	blx	r3
 80138ae:	2000      	movs	r0, #0
 80138b0:	e7e0      	b.n	8013874 <_raise_r+0x12>
	...

080138b4 <raise>:
 80138b4:	4b02      	ldr	r3, [pc, #8]	@ (80138c0 <raise+0xc>)
 80138b6:	4601      	mov	r1, r0
 80138b8:	6818      	ldr	r0, [r3, #0]
 80138ba:	f7ff bfd2 	b.w	8013862 <_raise_r>
 80138be:	bf00      	nop
 80138c0:	200001b0 	.word	0x200001b0

080138c4 <_kill_r>:
 80138c4:	b538      	push	{r3, r4, r5, lr}
 80138c6:	4d07      	ldr	r5, [pc, #28]	@ (80138e4 <_kill_r+0x20>)
 80138c8:	2300      	movs	r3, #0
 80138ca:	4604      	mov	r4, r0
 80138cc:	4608      	mov	r0, r1
 80138ce:	4611      	mov	r1, r2
 80138d0:	602b      	str	r3, [r5, #0]
 80138d2:	f7f0 fe11 	bl	80044f8 <_kill>
 80138d6:	1c43      	adds	r3, r0, #1
 80138d8:	d102      	bne.n	80138e0 <_kill_r+0x1c>
 80138da:	682b      	ldr	r3, [r5, #0]
 80138dc:	b103      	cbz	r3, 80138e0 <_kill_r+0x1c>
 80138de:	6023      	str	r3, [r4, #0]
 80138e0:	bd38      	pop	{r3, r4, r5, pc}
 80138e2:	bf00      	nop
 80138e4:	20000a38 	.word	0x20000a38

080138e8 <_getpid_r>:
 80138e8:	f7f0 bdfe 	b.w	80044e8 <_getpid>

080138ec <_init>:
 80138ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138ee:	bf00      	nop
 80138f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138f2:	bc08      	pop	{r3}
 80138f4:	469e      	mov	lr, r3
 80138f6:	4770      	bx	lr

080138f8 <_fini>:
 80138f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138fa:	bf00      	nop
 80138fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138fe:	bc08      	pop	{r3}
 8013900:	469e      	mov	lr, r3
 8013902:	4770      	bx	lr
