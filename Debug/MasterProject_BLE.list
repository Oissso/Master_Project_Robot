
MasterProject_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f60  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  080130a0  080130a0  000140a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013a2c  08013a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013a34  08013a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013a38  08013a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000008  08013a3c  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200001f4  08013c28  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000022c  08013c5d  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000240  08013c6e  00015240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a30  08013c6e  00015a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00017000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00017000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08013c6e  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000356a2  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006e3a  00000000  00000000  0004c139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003108  00000000  00000000  00052f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000025ce  00000000  00000000  00056080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002eb1c  00000000  00000000  0005864e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00038b46  00000000  00000000  0008716a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001070fa  00000000  00000000  000bfcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001c6daa  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e4a8  00000000  00000000  001c6df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  001d5298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000240 	.word	0x20000240
 800015c:	00000000 	.word	0x00000000
 8000160:	08013088 	.word	0x08013088

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000244 	.word	0x20000244
 800017c:	08013088 	.word	0x08013088

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <check_command>:
#include <stdbool.h>
#include <stdio.h>

extern bool GPIO_EXTENDER_ProcessCommand(uint8_t *data);

bool check_command(uint8_t *data) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if (data[0] == 0x01) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d101      	bne.n	8000fa8 <check_command+0x14>
		return true;  // Commande valide
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <check_command+0x16>
	}
	return false;  // Commande invalide
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <BLE_ProcessCommand>:
//            return GPIO_EXTENDER_ProcessCommand(gpio_values);
//        }
//    return false;
//}

bool BLE_ProcessCommand(uint8_t *data, uint8_t length) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]

    uint8_t command = data[0];
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	72fb      	strb	r3, [r7, #11]
    uint8_t gpio_value = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	72bb      	strb	r3, [r7, #10]
    printf("GPIO Value: 0x%01X 0x%01X 0x%01X 0x%01X \r\n", data[0],data[1], data[2], data[3]);  // Hexa + décimal);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4603      	mov	r3, r0
 8000fee:	481d      	ldr	r0, [pc, #116]	@ (8001064 <BLE_ProcessCommand+0xac>)
 8000ff0:	f00e fc2c 	bl	800f84c <iprintf>

    if (command == 0x01) {
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d12e      	bne.n	8001058 <BLE_ProcessCommand+0xa0>
        for (int i = 0; i < 4; i++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	e01a      	b.n	8001036 <BLE_ProcessCommand+0x7e>
            gpio_value |= (data[i + 1] & 0x01) << i;  // bits 1 à 4
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3301      	adds	r3, #1
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	b25a      	sxtb	r2, r3
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b25b      	sxtb	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	72bb      	strb	r3, [r7, #10]
            printf("GPIO Value: 0x%01X (%d)\r\n", gpio_value, gpio_value);  // Hexa + décimal
 8001022:	7abb      	ldrb	r3, [r7, #10]
 8001024:	4619      	mov	r1, r3
 8001026:	7abb      	ldrb	r3, [r7, #10]
 8001028:	461a      	mov	r2, r3
 800102a:	480f      	ldr	r0, [pc, #60]	@ (8001068 <BLE_ProcessCommand+0xb0>)
 800102c:	f00e fc0e 	bl	800f84c <iprintf>
        for (int i = 0; i < 4; i++) {
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3301      	adds	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b03      	cmp	r3, #3
 800103a:	dde1      	ble.n	8001000 <BLE_ProcessCommand+0x48>
        }

        printf("GPIO Value: 0x%02X (%d)\r\n", gpio_value, gpio_value);  // Hexa + décimal
 800103c:	7abb      	ldrb	r3, [r7, #10]
 800103e:	4619      	mov	r1, r3
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	461a      	mov	r2, r3
 8001044:	4809      	ldr	r0, [pc, #36]	@ (800106c <BLE_ProcessCommand+0xb4>)
 8001046:	f00e fc01 	bl	800f84c <iprintf>

        return GPIO_EXTENDER_ProcessCommand(&gpio_value);
 800104a:	f107 030a 	add.w	r3, r7, #10
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f80e 	bl	8001070 <GPIO_EXTENDER_ProcessCommand>
 8001054:	4603      	mov	r3, r0
 8001056:	e000      	b.n	800105a <BLE_ProcessCommand+0xa2>
    }

    return false;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	080130a0 	.word	0x080130a0
 8001068:	080130cc 	.word	0x080130cc
 800106c:	080130e8 	.word	0x080130e8

08001070 <GPIO_EXTENDER_ProcessCommand>:
#include <stdbool.h>

extern I2C_HandleTypeDef hi2c1;
#define PCF8574_ADDRESS (0x38 << 1)  // Adresse I2C correcte

bool GPIO_EXTENDER_ProcessCommand(uint8_t *data) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
    uint8_t TxData = *data;  // Convertir la donnée en octet unique
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	73fb      	strb	r3, [r7, #15]

    if (HAL_I2C_Master_Transmit(&hi2c1, PCF8574_ADDRESS, &TxData, 1, 1000) == HAL_OK) {
 800107e:	f107 020f 	add.w	r2, r7, #15
 8001082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	2170      	movs	r1, #112	@ 0x70
 800108c:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <GPIO_EXTENDER_ProcessCommand+0x38>)
 800108e:	f003 fc89 	bl	80049a4 <HAL_I2C_Master_Transmit>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <GPIO_EXTENDER_ProcessCommand+0x2c>
        return true;  // Transmission réussie
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <GPIO_EXTENDER_ProcessCommand+0x2e>
    } else {
        return false;  // Erreur de transmission
 800109c:	2300      	movs	r3, #0
    }
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000410 	.word	0x20000410

080010ac <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80010b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80010ba:	4905      	ldr	r1, [pc, #20]	@ (80010d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4313      	orrs	r3, r2
 80010c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	58000800 	.word	0x58000800

080010d4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010f8:	68fb      	ldr	r3, [r7, #12]
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001106:	b480      	push	{r7}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800110e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001112:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8001116:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001126:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001130:	68fb      	ldr	r3, [r7, #12]
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001142:	f002 fb5f 	bl	8003804 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001146:	f002 fb63 	bl	8003810 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800114a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800114e:	f7ff ffad 	bl	80010ac <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001152:	f00c f91d 	bl	800d390 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001156:	f000 f821 	bl	800119c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800115a:	f000 f8c1 	bl	80012e0 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800115e:	bf00      	nop
}
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001164:	b5b0      	push	{r4, r5, r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <APPD_EnableCPU2+0x34>)
 800116c:	1d3c      	adds	r4, r7, #4
 800116e:	461d      	mov	r5, r3
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001178:	c403      	stmia	r4!, {r0, r1}
 800117a:	8022      	strh	r2, [r4, #0]
 800117c:	3402      	adds	r4, #2
 800117e:	0c13      	lsrs	r3, r2, #16
 8001180:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001182:	f00c f85d 	bl	800d240 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4618      	mov	r0, r3
 800118a:	f00b faee 	bl	800c76a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800118e:	bf00      	nop
}
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bdb0      	pop	{r4, r5, r7, pc}
 8001196:	bf00      	nop
 8001198:	08013104 	.word	0x08013104

0800119c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80011bc:	2300      	movs	r3, #0
 80011be:	77fb      	strb	r3, [r7, #31]
 80011c0:	e036      	b.n	8001230 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	4a43      	ldr	r2, [pc, #268]	@ (80012d4 <APPD_SetCPU2GpioConfig+0x138>)
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	799b      	ldrb	r3, [r3, #6]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d02c      	beq.n	800122a <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	4a40      	ldr	r2, [pc, #256]	@ (80012d4 <APPD_SetCPU2GpioConfig+0x138>)
 80011d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011d8:	4a3f      	ldr	r2, [pc, #252]	@ (80012d8 <APPD_SetCPU2GpioConfig+0x13c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01b      	beq.n	8001216 <APPD_SetCPU2GpioConfig+0x7a>
 80011de:	4a3e      	ldr	r2, [pc, #248]	@ (80012d8 <APPD_SetCPU2GpioConfig+0x13c>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d821      	bhi.n	8001228 <APPD_SetCPU2GpioConfig+0x8c>
 80011e4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011e8:	d003      	beq.n	80011f2 <APPD_SetCPU2GpioConfig+0x56>
 80011ea:	4a3c      	ldr	r2, [pc, #240]	@ (80012dc <APPD_SetCPU2GpioConfig+0x140>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d009      	beq.n	8001204 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 80011f0:	e01a      	b.n	8001228 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	4a37      	ldr	r2, [pc, #220]	@ (80012d4 <APPD_SetCPU2GpioConfig+0x138>)
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	889a      	ldrh	r2, [r3, #4]
 80011fc:	8bbb      	ldrh	r3, [r7, #28]
 80011fe:	4313      	orrs	r3, r2
 8001200:	83bb      	strh	r3, [r7, #28]
          break;
 8001202:	e012      	b.n	800122a <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001204:	7ffb      	ldrb	r3, [r7, #31]
 8001206:	4a33      	ldr	r2, [pc, #204]	@ (80012d4 <APPD_SetCPU2GpioConfig+0x138>)
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	889a      	ldrh	r2, [r3, #4]
 800120e:	8b7b      	ldrh	r3, [r7, #26]
 8001210:	4313      	orrs	r3, r2
 8001212:	837b      	strh	r3, [r7, #26]
          break;
 8001214:	e009      	b.n	800122a <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	4a2e      	ldr	r2, [pc, #184]	@ (80012d4 <APPD_SetCPU2GpioConfig+0x138>)
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	889a      	ldrh	r2, [r3, #4]
 8001220:	8b3b      	ldrh	r3, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	833b      	strh	r3, [r7, #24]
          break;
 8001226:	e000      	b.n	800122a <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001228:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	3301      	adds	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
 8001230:	7ffb      	ldrb	r3, [r7, #31]
 8001232:	2b25      	cmp	r3, #37	@ 0x25
 8001234:	d9c5      	bls.n	80011c2 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001242:	8bbb      	ldrh	r3, [r7, #28]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d014      	beq.n	8001272 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001248:	8bbb      	ldrh	r3, [r7, #28]
 800124a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff ff41 	bl	80010d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff ff57 	bl	8001106 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001260:	f003 f84c 	bl	80042fc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001264:	8bbb      	ldrh	r3, [r7, #28]
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f003 fa93 	bl	8004798 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001272:	8b7b      	ldrh	r3, [r7, #26]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d012      	beq.n	800129e <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001278:	8b7b      	ldrh	r3, [r7, #26]
 800127a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	2002      	movs	r0, #2
 800127e:	f7ff ff29 	bl	80010d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001282:	2002      	movs	r0, #2
 8001284:	f7ff ff3f 	bl	8001106 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4813      	ldr	r0, [pc, #76]	@ (80012dc <APPD_SetCPU2GpioConfig+0x140>)
 800128e:	f003 f835 	bl	80042fc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001292:	8b7b      	ldrh	r3, [r7, #26]
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	@ (80012dc <APPD_SetCPU2GpioConfig+0x140>)
 800129a:	f003 fa7d 	bl	8004798 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800129e:	8b3b      	ldrh	r3, [r7, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 80012a4:	8b3b      	ldrh	r3, [r7, #24]
 80012a6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a8:	2004      	movs	r0, #4
 80012aa:	f7ff ff13 	bl	80010d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80012ae:	2004      	movs	r0, #4
 80012b0:	f7ff ff29 	bl	8001106 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	@ (80012d8 <APPD_SetCPU2GpioConfig+0x13c>)
 80012ba:	f003 f81f 	bl	80042fc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80012be:	8b3b      	ldrh	r3, [r7, #24]
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <APPD_SetCPU2GpioConfig+0x13c>)
 80012c6:	f003 fa67 	bl	8004798 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
}
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	080133d0 	.word	0x080133d0
 80012d8:	48000800 	.word	0x48000800
 80012dc:	48000400 	.word	0x48000400

080012e0 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80012e4:	bf00      	nop
}
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80012f2:	f001 fc91 	bl	8002c18 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 80012f6:	bf00      	nop
}
 80012f8:	bd80      	pop	{r7, pc}

080012fa <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	460b      	mov	r3, r1
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001308:	897a      	ldrh	r2, [r7, #10]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68f9      	ldr	r1, [r7, #12]
 800130e:	2000      	movs	r0, #0
 8001310:	f001 f8c6 	bl	80024a0 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001314:	bf00      	nop
}
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <LL_C2_PWR_SetPowerMode+0x28>)
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800132a:	f023 0207 	bic.w	r2, r3, #7
 800132e:	4905      	ldr	r1, [pc, #20]	@ (8001344 <LL_C2_PWR_SetPowerMode+0x28>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4313      	orrs	r3, r2
 8001334:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	58000400 	.word	0x58000400

08001348 <LL_EXTI_EnableIT_32_63>:
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <LL_EXTI_EnableIT_32_63+0x24>)
 8001352:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001356:	4905      	ldr	r1, [pc, #20]	@ (800136c <LL_EXTI_EnableIT_32_63+0x24>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4313      	orrs	r3, r2
 800135c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	58000800 	.word	0x58000800

08001370 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137c:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800137e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001386:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800138a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001396:	4313      	orrs	r3, r2
 8001398:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	cafecafe 	.word	0xcafecafe

080013ac <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	608b      	str	r3, [r1, #8]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <LL_DBGMCU_GetDeviceID+0x18>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e0042000 	.word	0xe0042000

080013f0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <LL_DBGMCU_GetRevisionID+0x18>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	b29b      	uxth	r3, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e0042000 	.word	0xe0042000

0800140c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <LL_LPM_EnableSleep+0x1c>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <LL_LPM_EnableSleep+0x1c>)
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	6113      	str	r3, [r2, #16]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	22ff      	movs	r2, #255	@ 0xff
 8001438:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	22ca      	movs	r2, #202	@ 0xca
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2253      	movs	r2, #83	@ 0x53
 8001458:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 0207 	bic.w	r2, r3, #7
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <MX_APPE_Config>:
static void RxCpltCallback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <MX_APPE_Config+0x18>)
 8001492:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001496:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001498:	f000 f828 	bl	80014ec <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800149c:	f000 f82d 	bl	80014fa <Config_HSE>

  return;
 80014a0:	bf00      	nop
}
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	58004000 	.word	0x58004000

080014a8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014ac:	f000 f839 	bl	8001522 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014b0:	f000 f852 	bl	8001558 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014b4:	4905      	ldr	r1, [pc, #20]	@ (80014cc <MX_APPE_Init+0x24>)
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fddc 	bl	8002074 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80014bc:	f7ff fe3f 	bl	800113e <APPD_Init>
  RxUART_Init();
 80014c0:	f000 f986 	bl	80017d0 <RxUART_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014c4:	f000 f856 	bl	8001574 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014c8:	bf00      	nop
}
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000560 	.word	0x20000560

080014d0 <Init_Smps>:

void Init_Smps(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014d4:	bf00      	nop
}
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <Init_Exti>:

void Init_Exti(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80014e2:	2050      	movs	r0, #80	@ 0x50
 80014e4:	f7ff ff30 	bl	8001348 <LL_EXTI_EnableIT_32_63>

  return;
 80014e8:	bf00      	nop
}
 80014ea:	bd80      	pop	{r7, pc}

080014ec <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80014f0:	bf00      	nop
}
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001500:	2000      	movs	r0, #0
 8001502:	f00b ff9f 	bl	800d444 <OTP_Read>
 8001506:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	799b      	ldrb	r3, [r3, #6]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff2c 	bl	8001370 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001518:	bf00      	nop
 800151a:	bf00      	nop
}
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <System_Init>:

static void System_Init(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
  Init_Smps();
 8001526:	f7ff ffd3 	bl	80014d0 <Init_Smps>

  Init_Exti();
 800152a:	f7ff ffd8 	bl	80014de <Init_Exti>

  Init_Rtc();
 800152e:	f000 f803 	bl	8001538 <Init_Rtc>

  return;
 8001532:	bf00      	nop
}
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <Init_Rtc+0x1c>)
 800153e:	f7ff ff82 	bl	8001446 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001542:	2100      	movs	r1, #0
 8001544:	4803      	ldr	r0, [pc, #12]	@ (8001554 <Init_Rtc+0x1c>)
 8001546:	f7ff ff8e 	bl	8001466 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800154a:	4802      	ldr	r0, [pc, #8]	@ (8001554 <Init_Rtc+0x1c>)
 800154c:	f7ff ff6e 	bl	800142c <LL_RTC_EnableWriteProtection>

  return;
 8001550:	bf00      	nop
}
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40002800 	.word	0x40002800

08001558 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800155c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001560:	f7ff ff24 	bl	80013ac <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001564:	f00c fefe 	bl	800e364 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001568:	2004      	movs	r0, #4
 800156a:	f7ff fed7 	bl	800131c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800156e:	bf00      	nop
}
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800157a:	f00b fcab 	bl	800ced4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800157e:	4a11      	ldr	r2, [pc, #68]	@ (80015c4 <appe_Tl_Init+0x50>)
 8001580:	2100      	movs	r1, #0
 8001582:	2004      	movs	r0, #4
 8001584:	f00d f82c 	bl	800e5e0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <appe_Tl_Init+0x54>)
 800158a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <appe_Tl_Init+0x58>)
 800158e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	480e      	ldr	r0, [pc, #56]	@ (80015d0 <appe_Tl_Init+0x5c>)
 8001596:	f00b fb5f 	bl	800cc58 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <appe_Tl_Init+0x60>)
 800159c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <appe_Tl_Init+0x64>)
 80015a0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <appe_Tl_Init+0x68>)
 80015a4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015a6:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015aa:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00b fdd1 	bl	800d158 <TL_MM_Init>

  TL_Enable();
 80015b6:	f00b fc87 	bl	800cec8 <TL_Enable>

  return;
 80015ba:	bf00      	nop
}
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	0800cc91 	.word	0x0800cc91
 80015c8:	20030734 	.word	0x20030734
 80015cc:	080015e1 	.word	0x080015e1
 80015d0:	080015f9 	.word	0x080015f9
 80015d4:	2003094c 	.word	0x2003094c
 80015d8:	20030840 	.word	0x20030840
 80015dc:	200301f8 	.word	0x200301f8

080015e0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015ea:	bf00      	nop
}
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	330b      	adds	r3, #11
 8001606:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001612:	2b07      	cmp	r3, #7
 8001614:	d81f      	bhi.n	8001656 <APPE_SysUserEvtRx+0x5e>
 8001616:	a201      	add	r2, pc, #4	@ (adr r2, 800161c <APPE_SysUserEvtRx+0x24>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	0800163d 	.word	0x0800163d
 8001620:	0800164f 	.word	0x0800164f
 8001624:	08001657 	.word	0x08001657
 8001628:	08001657 	.word	0x08001657
 800162c:	08001657 	.word	0x08001657
 8001630:	08001657 	.word	0x08001657
 8001634:	08001657 	.word	0x08001657
 8001638:	08001657 	.word	0x08001657
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4618      	mov	r0, r3
 8001642:	f00b f8bf 	bl	800c7c4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f81b 	bl	8001682 <APPE_SysEvtReadyProcessing>
    break;
 800164c:	e004      	b.n	8001658 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f806 	bl	8001660 <APPE_SysEvtError>
    break;
 8001654:	e000      	b.n	8001658 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001656:	bf00      	nop
  }

  return;
 8001658:	bf00      	nop
}
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	330b      	adds	r3, #11
 800166e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3302      	adds	r3, #2
 8001674:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001676:	bf00      	nop
}
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b08a      	sub	sp, #40	@ 0x28
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	330b      	adds	r3, #11
 80016a6:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	3302      	adds	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11d      	bne.n	80016f2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016b6:	f7ff fd55 	bl	8001164 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016ba:	230f      	movs	r3, #15
 80016bc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016be:	237f      	movs	r3, #127	@ 0x7f
 80016c0:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016c2:	f7ff fe95 	bl	80013f0 <LL_DBGMCU_GetRevisionID>
 80016c6:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016ce:	f7ff fe81 	bl	80013d4 <LL_DBGMCU_GetDeviceID>
 80016d2:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	4618      	mov	r0, r3
 80016e0:	f00b f85a 	bl	800c798 <SHCI_C2_Config>

    APP_BLE_Init();
 80016e4:	f00b ffb8 	bl	800d658 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80016e8:	2100      	movs	r1, #0
 80016ea:	2001      	movs	r0, #1
 80016ec:	f00c fe4c 	bl	800e388 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80016f0:	e007      	b.n	8001702 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d103      	bne.n	8001702 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
  return;
 8001700:	bf00      	nop
 8001702:	bf00      	nop
}
 8001704:	3728      	adds	r7, #40	@ 0x28
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001712:	f002 f853 	bl	80037bc <HAL_GetTick>
 8001716:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001722:	d00a      	beq.n	800173a <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001724:	f002 f862 	bl	80037ec <HAL_GetTickFreq>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	e002      	b.n	800173a <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001734:	f7ff fe6a 	bl	800140c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001738:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800173a:	f002 f83f 	bl	80037bc <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	429a      	cmp	r2, r3
 8001748:	d8f4      	bhi.n	8001734 <HAL_Delay+0x2a>
  }
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f00c fe44 	bl	800e3e8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001768:	bf00      	nop
}
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f00c fe32 	bl	800e3e8 <UTIL_SEQ_Run>
  return;
 8001784:	bf00      	nop
}
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001794:	2100      	movs	r1, #0
 8001796:	2004      	movs	r0, #4
 8001798:	f00c ff44 	bl	800e624 <UTIL_SEQ_SetTask>
  return;
 800179c:	bf00      	nop
}
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017ac:	2002      	movs	r0, #2
 80017ae:	f00c ffa5 	bl	800e6fc <UTIL_SEQ_SetEvt>
  return;
 80017b2:	bf00      	nop
}
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017c2:	2002      	movs	r0, #2
 80017c4:	f00c ffba 	bl	800e73c <UTIL_SEQ_WaitEvt>
  return;
 80017c8:	bf00      	nop
}
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <RxUART_Init>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
static void RxUART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <RxUART_Init+0x14>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	4903      	ldr	r1, [pc, #12]	@ (80017e8 <RxUART_Init+0x18>)
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 fe3c 	bl	8002458 <HW_UART_Receive_IT>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	080017ed 	.word	0x080017ed
 80017e8:	2000025c 	.word	0x2000025c

080017ec <RxCpltCallback>:

static void RxCpltCallback(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <RxCpltCallback+0x50>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	2bff      	cmp	r3, #255	@ 0xff
 80017f6:	d818      	bhi.n	800182a <RxCpltCallback+0x3e>
  {
    if (aRxBuffer[0] == '\r')
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <RxCpltCallback+0x54>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b0d      	cmp	r3, #13
 80017fe:	d109      	bne.n	8001814 <RxCpltCallback+0x28>
    {
      APP_DBG_MSG("received %s\n", CommandString);

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <RxCpltCallback+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8001806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800180a:	2100      	movs	r1, #0
 800180c:	480d      	ldr	r0, [pc, #52]	@ (8001844 <RxCpltCallback+0x58>)
 800180e:	f00e f98d 	bl	800fb2c <memset>
 8001812:	e00a      	b.n	800182a <RxCpltCallback+0x3e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <RxCpltCallback+0x50>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	b291      	uxth	r1, r2
 800181c:	4a07      	ldr	r2, [pc, #28]	@ (800183c <RxCpltCallback+0x50>)
 800181e:	8011      	strh	r1, [r2, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <RxCpltCallback+0x54>)
 8001824:	7819      	ldrb	r1, [r3, #0]
 8001826:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <RxCpltCallback+0x58>)
 8001828:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <RxCpltCallback+0x5c>)
 800182c:	2201      	movs	r2, #1
 800182e:	4904      	ldr	r1, [pc, #16]	@ (8001840 <RxCpltCallback+0x54>)
 8001830:	2000      	movs	r0, #0
 8001832:	f000 fe11 	bl	8002458 <HW_UART_Receive_IT>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000364 	.word	0x20000364
 8001840:	2000025c 	.word	0x2000025c
 8001844:	20000264 	.word	0x20000264
 8001848:	080017ed 	.word	0x080017ed

0800184c <LL_EXTI_EnableIT_0_31>:
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <LL_EXTI_EnableIT_0_31+0x24>)
 8001856:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800185a:	4905      	ldr	r1, [pc, #20]	@ (8001870 <LL_EXTI_EnableIT_0_31+0x24>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4313      	orrs	r3, r2
 8001860:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	58000800 	.word	0x58000800

08001874 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4904      	ldr	r1, [pc, #16]	@ (8001894 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]

}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	58000800 	.word	0x58000800

08001898 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <ReadRtcSsrValue+0x3c>)
 80018a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <ReadRtcSsrValue+0x3c>)
 80018a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80018ae:	e005      	b.n	80018bc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80018b4:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <ReadRtcSsrValue+0x3c>)
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1f5      	bne.n	80018b0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80018c4:	683b      	ldr	r3, [r7, #0]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40002800 	.word	0x40002800

080018d8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	460a      	mov	r2, r1
 80018e2:	71fb      	strb	r3, [r7, #7]
 80018e4:	4613      	mov	r3, r2
 80018e6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80018e8:	79ba      	ldrb	r2, [r7, #6]
 80018ea:	491d      	ldr	r1, [pc, #116]	@ (8001960 <LinkTimerAfter+0x88>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3315      	adds	r3, #21
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d009      	beq.n	8001916 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	4916      	ldr	r1, [pc, #88]	@ (8001960 <LinkTimerAfter+0x88>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3314      	adds	r3, #20
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001916:	79fa      	ldrb	r2, [r7, #7]
 8001918:	4911      	ldr	r1, [pc, #68]	@ (8001960 <LinkTimerAfter+0x88>)
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3315      	adds	r3, #21
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	490c      	ldr	r1, [pc, #48]	@ (8001960 <LinkTimerAfter+0x88>)
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	3314      	adds	r3, #20
 800193a:	79ba      	ldrb	r2, [r7, #6]
 800193c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800193e:	79ba      	ldrb	r2, [r7, #6]
 8001940:	4907      	ldr	r1, [pc, #28]	@ (8001960 <LinkTimerAfter+0x88>)
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3315      	adds	r3, #21
 800194e:	79fa      	ldrb	r2, [r7, #7]
 8001950:	701a      	strb	r2, [r3, #0]

  return;
 8001952:	bf00      	nop
}
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000368 	.word	0x20000368

08001964 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	460a      	mov	r2, r1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	4613      	mov	r3, r2
 8001972:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001974:	4b29      	ldr	r3, [pc, #164]	@ (8001a1c <LinkTimerBefore+0xb8>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	79ba      	ldrb	r2, [r7, #6]
 800197c:	429a      	cmp	r2, r3
 800197e:	d032      	beq.n	80019e6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001980:	79ba      	ldrb	r2, [r7, #6]
 8001982:	4927      	ldr	r1, [pc, #156]	@ (8001a20 <LinkTimerBefore+0xbc>)
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	3314      	adds	r3, #20
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	4922      	ldr	r1, [pc, #136]	@ (8001a20 <LinkTimerBefore+0xbc>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	3315      	adds	r3, #21
 80019a4:	79fa      	ldrb	r2, [r7, #7]
 80019a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80019a8:	79fa      	ldrb	r2, [r7, #7]
 80019aa:	491d      	ldr	r1, [pc, #116]	@ (8001a20 <LinkTimerBefore+0xbc>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	3315      	adds	r3, #21
 80019b8:	79ba      	ldrb	r2, [r7, #6]
 80019ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	4918      	ldr	r1, [pc, #96]	@ (8001a20 <LinkTimerBefore+0xbc>)
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	440b      	add	r3, r1
 80019ca:	3314      	adds	r3, #20
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019d0:	79ba      	ldrb	r2, [r7, #6]
 80019d2:	4913      	ldr	r1, [pc, #76]	@ (8001a20 <LinkTimerBefore+0xbc>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	440b      	add	r3, r1
 80019de:	3314      	adds	r3, #20
 80019e0:	79fa      	ldrb	r2, [r7, #7]
 80019e2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80019e4:	e014      	b.n	8001a10 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	490d      	ldr	r1, [pc, #52]	@ (8001a20 <LinkTimerBefore+0xbc>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	3315      	adds	r3, #21
 80019f6:	79ba      	ldrb	r2, [r7, #6]
 80019f8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019fa:	79ba      	ldrb	r2, [r7, #6]
 80019fc:	4908      	ldr	r1, [pc, #32]	@ (8001a20 <LinkTimerBefore+0xbc>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3314      	adds	r3, #20
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	701a      	strb	r2, [r3, #0]
  return;
 8001a0e:	bf00      	nop
}
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200003f8 	.word	0x200003f8
 8001a20:	20000368 	.word	0x20000368

08001a24 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b68 <linkTimer+0x144>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b06      	cmp	r3, #6
 8001a36:	d118      	bne.n	8001a6a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001a38:	4b4b      	ldr	r3, [pc, #300]	@ (8001b68 <linkTimer+0x144>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b6c <linkTimer+0x148>)
 8001a40:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001a42:	4a49      	ldr	r2, [pc, #292]	@ (8001b68 <linkTimer+0x144>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001a48:	79fa      	ldrb	r2, [r7, #7]
 8001a4a:	4949      	ldr	r1, [pc, #292]	@ (8001b70 <linkTimer+0x14c>)
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	3315      	adds	r3, #21
 8001a58:	2206      	movs	r2, #6
 8001a5a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a5c:	4b45      	ldr	r3, [pc, #276]	@ (8001b74 <linkTimer+0x150>)
 8001a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a62:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	81fb      	strh	r3, [r7, #14]
 8001a68:	e078      	b.n	8001b5c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001a6a:	f000 f909 	bl	8001c80 <ReturnTimeElapsed>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001a72:	79fa      	ldrb	r2, [r7, #7]
 8001a74:	493e      	ldr	r1, [pc, #248]	@ (8001b70 <linkTimer+0x14c>)
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	3308      	adds	r3, #8
 8001a82:	6819      	ldr	r1, [r3, #0]
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	4419      	add	r1, r3
 8001a8a:	4839      	ldr	r0, [pc, #228]	@ (8001b70 <linkTimer+0x14c>)
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4403      	add	r3, r0
 8001a96:	3308      	adds	r3, #8
 8001a98:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001a9a:	79fa      	ldrb	r2, [r7, #7]
 8001a9c:	4934      	ldr	r1, [pc, #208]	@ (8001b70 <linkTimer+0x14c>)
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3308      	adds	r3, #8
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001aae:	4b2e      	ldr	r3, [pc, #184]	@ (8001b68 <linkTimer+0x144>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8001b70 <linkTimer+0x14c>)
 8001ab8:	460b      	mov	r3, r1
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	440b      	add	r3, r1
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d337      	bcc.n	8001b3c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001acc:	4b26      	ldr	r3, [pc, #152]	@ (8001b68 <linkTimer+0x144>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001ad2:	7b7a      	ldrb	r2, [r7, #13]
 8001ad4:	4926      	ldr	r1, [pc, #152]	@ (8001b70 <linkTimer+0x14c>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3315      	adds	r3, #21
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ae6:	e013      	b.n	8001b10 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001ae8:	7b7a      	ldrb	r2, [r7, #13]
 8001aea:	4921      	ldr	r1, [pc, #132]	@ (8001b70 <linkTimer+0x14c>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	3315      	adds	r3, #21
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001afc:	7b7a      	ldrb	r2, [r7, #13]
 8001afe:	491c      	ldr	r1, [pc, #112]	@ (8001b70 <linkTimer+0x14c>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	3315      	adds	r3, #21
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001b10:	7b3b      	ldrb	r3, [r7, #12]
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d00b      	beq.n	8001b2e <linkTimer+0x10a>
 8001b16:	7b3a      	ldrb	r2, [r7, #12]
 8001b18:	4915      	ldr	r1, [pc, #84]	@ (8001b70 <linkTimer+0x14c>)
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	3308      	adds	r3, #8
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d2dc      	bcs.n	8001ae8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001b2e:	7b7a      	ldrb	r2, [r7, #13]
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fecf 	bl	80018d8 <LinkTimerAfter>
 8001b3a:	e00f      	b.n	8001b5c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <linkTimer+0x144>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff0c 	bl	8001964 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <linkTimer+0x144>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <linkTimer+0x148>)
 8001b54:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001b56:	4a04      	ldr	r2, [pc, #16]	@ (8001b68 <linkTimer+0x144>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200003f8 	.word	0x200003f8
 8001b6c:	200003f9 	.word	0x200003f9
 8001b70:	20000368 	.word	0x20000368
 8001b74:	200003fc 	.word	0x200003fc

08001b78 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460a      	mov	r2, r1
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	4613      	mov	r3, r2
 8001b86:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001b88:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <UnlinkTimer+0xf8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d111      	bne.n	8001bb8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b94:	4b36      	ldr	r3, [pc, #216]	@ (8001c70 <UnlinkTimer+0xf8>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b36      	ldr	r3, [pc, #216]	@ (8001c74 <UnlinkTimer+0xfc>)
 8001b9c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	4935      	ldr	r1, [pc, #212]	@ (8001c78 <UnlinkTimer+0x100>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	3315      	adds	r3, #21
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <UnlinkTimer+0xf8>)
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e03e      	b.n	8001c36 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	492f      	ldr	r1, [pc, #188]	@ (8001c78 <UnlinkTimer+0x100>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3314      	adds	r3, #20
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001bcc:	79fa      	ldrb	r2, [r7, #7]
 8001bce:	492a      	ldr	r1, [pc, #168]	@ (8001c78 <UnlinkTimer+0x100>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	3315      	adds	r3, #21
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001be0:	79f9      	ldrb	r1, [r7, #7]
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	4824      	ldr	r0, [pc, #144]	@ (8001c78 <UnlinkTimer+0x100>)
 8001be6:	460b      	mov	r3, r1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	440b      	add	r3, r1
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4403      	add	r3, r0
 8001bf0:	3315      	adds	r3, #21
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2d8      	uxtb	r0, r3
 8001bf6:	4920      	ldr	r1, [pc, #128]	@ (8001c78 <UnlinkTimer+0x100>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3315      	adds	r3, #21
 8001c04:	4602      	mov	r2, r0
 8001c06:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c08:	7bbb      	ldrb	r3, [r7, #14]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d013      	beq.n	8001c36 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001c0e:	79f9      	ldrb	r1, [r7, #7]
 8001c10:	7bba      	ldrb	r2, [r7, #14]
 8001c12:	4819      	ldr	r0, [pc, #100]	@ (8001c78 <UnlinkTimer+0x100>)
 8001c14:	460b      	mov	r3, r1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	440b      	add	r3, r1
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4403      	add	r3, r0
 8001c1e:	3314      	adds	r3, #20
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2d8      	uxtb	r0, r3
 8001c24:	4914      	ldr	r1, [pc, #80]	@ (8001c78 <UnlinkTimer+0x100>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	3314      	adds	r3, #20
 8001c32:	4602      	mov	r2, r0
 8001c34:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	490f      	ldr	r1, [pc, #60]	@ (8001c78 <UnlinkTimer+0x100>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	330c      	adds	r3, #12
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <UnlinkTimer+0xf8>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	d107      	bne.n	8001c64 <UnlinkTimer+0xec>
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d104      	bne.n	8001c64 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <UnlinkTimer+0x104>)
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	601a      	str	r2, [r3, #0]
  }

  return;
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
}
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	200003f8 	.word	0x200003f8
 8001c74:	200003f9 	.word	0x200003f9
 8001c78:	20000368 	.word	0x20000368
 8001c7c:	200003fc 	.word	0x200003fc

08001c80 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <ReturnTimeElapsed+0x70>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d026      	beq.n	8001cde <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001c90:	f7ff fe02 	bl	8001898 <ReadRtcSsrValue>
 8001c94:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001c96:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <ReturnTimeElapsed+0x70>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d805      	bhi.n	8001cac <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <ReturnTimeElapsed+0x70>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	e00a      	b.n	8001cc2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <ReturnTimeElapsed+0x74>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <ReturnTimeElapsed+0x70>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <ReturnTimeElapsed+0x78>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <ReturnTimeElapsed+0x7c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	40d3      	lsrs	r3, r2
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	e001      	b.n	8001ce2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	b29b      	uxth	r3, r3
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200003fc 	.word	0x200003fc
 8001cf4:	20000404 	.word	0x20000404
 8001cf8:	20000402 	.word	0x20000402
 8001cfc:	20000401 	.word	0x20000401

08001d00 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d108      	bne.n	8001d22 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d10:	f7ff fdc2 	bl	8001898 <ReadRtcSsrValue>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a21      	ldr	r2, [pc, #132]	@ (8001d9c <RestartWakeupCounter+0x9c>)
 8001d18:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	f001 fefb 	bl	8003b16 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001d20:	e039      	b.n	8001d96 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d803      	bhi.n	8001d30 <RestartWakeupCounter+0x30>
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <RestartWakeupCounter+0xa0>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d002      	beq.n	8001d36 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d36:	bf00      	nop
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <RestartWakeupCounter+0xa4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f8      	beq.n	8001d38 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d46:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <RestartWakeupCounter+0xa4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <RestartWakeupCounter+0xa4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001d56:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <RestartWakeupCounter+0xa8>)
 8001d5a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d5e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d60:	2003      	movs	r0, #3
 8001d62:	f001 fee6 	bl	8003b32 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <RestartWakeupCounter+0xac>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	0c1b      	lsrs	r3, r3, #16
 8001d6c:	041b      	lsls	r3, r3, #16
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	490e      	ldr	r1, [pc, #56]	@ (8001dac <RestartWakeupCounter+0xac>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d76:	f7ff fd8f 	bl	8001898 <ReadRtcSsrValue>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <RestartWakeupCounter+0x9c>)
 8001d7e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <RestartWakeupCounter+0xa4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <RestartWakeupCounter+0xa4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d8e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001d90:	f3af 8000 	nop.w
  return ;
 8001d94:	bf00      	nop
}
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200003fc 	.word	0x200003fc
 8001da0:	20000401 	.word	0x20000401
 8001da4:	20000560 	.word	0x20000560
 8001da8:	58000800 	.word	0x58000800
 8001dac:	40002800 	.word	0x40002800

08001db0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001db6:	4b45      	ldr	r3, [pc, #276]	@ (8001ecc <RescheduleTimerList+0x11c>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dc2:	d107      	bne.n	8001dd4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001dc4:	bf00      	nop
 8001dc6:	4b42      	ldr	r3, [pc, #264]	@ (8001ed0 <RescheduleTimerList+0x120>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f8      	bne.n	8001dc6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed0 <RescheduleTimerList+0x120>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed0 <RescheduleTimerList+0x120>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001de2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001de4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed4 <RescheduleTimerList+0x124>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	493a      	ldr	r1, [pc, #232]	@ (8001ed8 <RescheduleTimerList+0x128>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3308      	adds	r3, #8
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001dfe:	f7ff ff3f 	bl	8001c80 <ReturnTimeElapsed>
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d205      	bcs.n	8001e1a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e12:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <RescheduleTimerList+0x12c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e04d      	b.n	8001eb6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ee0 <RescheduleTimerList+0x130>)
 8001e1e:	8812      	ldrh	r2, [r2, #0]
 8001e20:	b292      	uxth	r2, r2
 8001e22:	4413      	add	r3, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d906      	bls.n	8001e3a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee0 <RescheduleTimerList+0x130>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001e32:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <RescheduleTimerList+0x12c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e03d      	b.n	8001eb6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e44:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <RescheduleTimerList+0x12c>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e4a:	e034      	b.n	8001eb6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	4922      	ldr	r1, [pc, #136]	@ (8001ed8 <RescheduleTimerList+0x128>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d20a      	bcs.n	8001e7a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	491c      	ldr	r1, [pc, #112]	@ (8001ed8 <RescheduleTimerList+0x128>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	3308      	adds	r3, #8
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e013      	b.n	8001ea2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	4916      	ldr	r1, [pc, #88]	@ (8001ed8 <RescheduleTimerList+0x128>)
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	3308      	adds	r3, #8
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	1ac9      	subs	r1, r1, r3
 8001e92:	4811      	ldr	r0, [pc, #68]	@ (8001ed8 <RescheduleTimerList+0x128>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4403      	add	r3, r0
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <RescheduleTimerList+0x128>)
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3315      	adds	r3, #21
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d1c7      	bne.n	8001e4c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001ebc:	89bb      	ldrh	r3, [r7, #12]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff1e 	bl	8001d00 <RestartWakeupCounter>

  return ;
 8001ec4:	bf00      	nop
}
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40002800 	.word	0x40002800
 8001ed0:	20000560 	.word	0x20000560
 8001ed4:	200003f8 	.word	0x200003f8
 8001ed8:	20000368 	.word	0x20000368
 8001edc:	20000400 	.word	0x20000400
 8001ee0:	20000406 	.word	0x20000406

08001ee4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eea:	f3ef 8310 	mrs	r3, PRIMASK
 8001eee:	617b      	str	r3, [r7, #20]
  return(result);
 8001ef0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ef8:	4b59      	ldr	r3, [pc, #356]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	22ca      	movs	r2, #202	@ 0xca
 8001efe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f00:	4b57      	ldr	r3, [pc, #348]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2253      	movs	r2, #83	@ 0x53
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001f08:	4b55      	ldr	r3, [pc, #340]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b54      	ldr	r3, [pc, #336]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f16:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001f18:	4b52      	ldr	r3, [pc, #328]	@ (8002064 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001f20:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f24:	4950      	ldr	r1, [pc, #320]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	330c      	adds	r3, #12
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d16e      	bne.n	8002018 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001f3a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f3e:	494a      	ldr	r1, [pc, #296]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001f4e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f52:	4945      	ldr	r1, [pc, #276]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3310      	adds	r3, #16
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001f64:	4b41      	ldr	r3, [pc, #260]	@ (800206c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d04c      	beq.n	8002008 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001f6e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f72:	493d      	ldr	r1, [pc, #244]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	330d      	adds	r3, #13
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d124      	bne.n	8001fd2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001f88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fdf2 	bl	8001b78 <UnlinkTimer>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f383 8810 	msr	PRIMASK, r3
}
 8001f9e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001fa0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001fa4:	4930      	ldr	r1, [pc, #192]	@ (8002068 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f9b8 	bl	8002330 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fc0:	4b27      	ldr	r3, [pc, #156]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	22ca      	movs	r2, #202	@ 0xca
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fc8:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2253      	movs	r2, #83	@ 0x53
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fd0:	e012      	b.n	8001ff8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f383 8810 	msr	PRIMASK, r3
}
 8001fdc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001fde:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f920 	bl	8002228 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	22ca      	movs	r2, #202	@ 0xca
 8001fee:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2253      	movs	r2, #83	@ 0x53
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	4619      	mov	r1, r3
 8002000:	69b8      	ldr	r0, [r7, #24]
 8002002:	f000 fa1b 	bl	800243c <HW_TS_RTC_Int_AppNot>
 8002006:	e022      	b.n	800204e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002008:	f7ff fed2 	bl	8001db0 <RescheduleTimerList>
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f383 8810 	msr	PRIMASK, r3
}
 8002016:	e01a      	b.n	800204e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002018:	bf00      	nop
 800201a:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f8      	beq.n	800201a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002028:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002038:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800203a:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800203c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f383 8810 	msr	PRIMASK, r3
}
 800204c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800204e:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	22ff      	movs	r2, #255	@ 0xff
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002056:	bf00      	nop
}
 8002058:	3728      	adds	r7, #40	@ 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000560 	.word	0x20000560
 8002064:	200003f8 	.word	0x200003f8
 8002068:	20000368 	.word	0x20000368
 800206c:	20000400 	.word	0x20000400
 8002070:	58000800 	.word	0x58000800

08002074 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002080:	4b5e      	ldr	r3, [pc, #376]	@ (80021fc <HW_TS_Init+0x188>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	22ca      	movs	r2, #202	@ 0xca
 8002086:	625a      	str	r2, [r3, #36]	@ 0x24
 8002088:	4b5c      	ldr	r3, [pc, #368]	@ (80021fc <HW_TS_Init+0x188>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2253      	movs	r2, #83	@ 0x53
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002090:	4b5b      	ldr	r3, [pc, #364]	@ (8002200 <HW_TS_Init+0x18c>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a5a      	ldr	r2, [pc, #360]	@ (8002200 <HW_TS_Init+0x18c>)
 8002096:	f043 0320 	orr.w	r3, r3, #32
 800209a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800209c:	4b58      	ldr	r3, [pc, #352]	@ (8002200 <HW_TS_Init+0x18c>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f1c3 0304 	rsb	r3, r3, #4
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b55      	ldr	r3, [pc, #340]	@ (8002204 <HW_TS_Init+0x190>)
 80020b0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80020b2:	4b53      	ldr	r3, [pc, #332]	@ (8002200 <HW_TS_Init+0x18c>)
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80020ba:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80020be:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	fa92 f2a2 	rbit	r2, r2
 80020c6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	d101      	bne.n	80020d6 <HW_TS_Init+0x62>
  {
    return 32U;
 80020d2:	2220      	movs	r2, #32
 80020d4:	e003      	b.n	80020de <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	40d3      	lsrs	r3, r2
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b48      	ldr	r3, [pc, #288]	@ (8002208 <HW_TS_Init+0x194>)
 80020e8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80020ea:	4b45      	ldr	r3, [pc, #276]	@ (8002200 <HW_TS_Init+0x18c>)
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b44      	ldr	r3, [pc, #272]	@ (800220c <HW_TS_Init+0x198>)
 80020fc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80020fe:	4b43      	ldr	r3, [pc, #268]	@ (800220c <HW_TS_Init+0x198>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	3b01      	subs	r3, #1
 8002104:	4a40      	ldr	r2, [pc, #256]	@ (8002208 <HW_TS_Init+0x194>)
 8002106:	7812      	ldrb	r2, [r2, #0]
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002110:	4a3c      	ldr	r2, [pc, #240]	@ (8002204 <HW_TS_Init+0x190>)
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	40d3      	lsrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800211e:	4293      	cmp	r3, r2
 8002120:	d904      	bls.n	800212c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002122:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <HW_TS_Init+0x19c>)
 8002124:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002128:	801a      	strh	r2, [r3, #0]
 800212a:	e003      	b.n	8002134 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	b29a      	uxth	r2, r3
 8002130:	4b37      	ldr	r3, [pc, #220]	@ (8002210 <HW_TS_Init+0x19c>)
 8002132:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002134:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002138:	f7ff fb9c 	bl	8001874 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800213c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002140:	f7ff fb84 	bl	800184c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d13d      	bne.n	80021c6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800214a:	4b32      	ldr	r3, [pc, #200]	@ (8002214 <HW_TS_Init+0x1a0>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002150:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <HW_TS_Init+0x1a4>)
 8002152:	f04f 32ff 	mov.w	r2, #4294967295
 8002156:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002158:	2300      	movs	r3, #0
 800215a:	77fb      	strb	r3, [r7, #31]
 800215c:	e00c      	b.n	8002178 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800215e:	7ffa      	ldrb	r2, [r7, #31]
 8002160:	492e      	ldr	r1, [pc, #184]	@ (800221c <HW_TS_Init+0x1a8>)
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	330c      	adds	r3, #12
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002172:	7ffb      	ldrb	r3, [r7, #31]
 8002174:	3301      	adds	r3, #1
 8002176:	77fb      	strb	r3, [r7, #31]
 8002178:	7ffb      	ldrb	r3, [r7, #31]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d9ef      	bls.n	800215e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800217e:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <HW_TS_Init+0x1ac>)
 8002180:	2206      	movs	r2, #6
 8002182:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HW_TS_Init+0x188>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <HW_TS_Init+0x188>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002192:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002194:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <HW_TS_Init+0x188>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <HW_TS_Init+0x188>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80021a4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80021a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <HW_TS_Init+0x1b0>)
 80021a8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021ac:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80021ae:	2003      	movs	r0, #3
 80021b0:	f001 fcbf 	bl	8003b32 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HW_TS_Init+0x188>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <HW_TS_Init+0x188>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e009      	b.n	80021da <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <HW_TS_Init+0x188>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f001 fc9e 	bl	8003b16 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <HW_TS_Init+0x188>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	22ff      	movs	r2, #255	@ 0xff
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80021e2:	2200      	movs	r2, #0
 80021e4:	2103      	movs	r1, #3
 80021e6:	2003      	movs	r0, #3
 80021e8:	f001 fc53 	bl	8003a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021ec:	2003      	movs	r0, #3
 80021ee:	f001 fc6a 	bl	8003ac6 <HAL_NVIC_EnableIRQ>

  return;
 80021f2:	bf00      	nop
}
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000560 	.word	0x20000560
 8002200:	40002800 	.word	0x40002800
 8002204:	20000401 	.word	0x20000401
 8002208:	20000402 	.word	0x20000402
 800220c:	20000404 	.word	0x20000404
 8002210:	20000406 	.word	0x20000406
 8002214:	20000400 	.word	0x20000400
 8002218:	200003fc 	.word	0x200003fc
 800221c:	20000368 	.word	0x20000368
 8002220:	200003f8 	.word	0x200003f8
 8002224:	58000800 	.word	0x58000800

08002228 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002232:	f3ef 8310 	mrs	r3, PRIMASK
 8002236:	60fb      	str	r3, [r7, #12]
  return(result);
 8002238:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800223a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002240:	2003      	movs	r0, #3
 8002242:	f001 fc4e 	bl	8003ae2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002246:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <HW_TS_Stop+0xf0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	22ca      	movs	r2, #202	@ 0xca
 800224c:	625a      	str	r2, [r3, #36]	@ 0x24
 800224e:	4b32      	ldr	r3, [pc, #200]	@ (8002318 <HW_TS_Stop+0xf0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2253      	movs	r2, #83	@ 0x53
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002256:	79fa      	ldrb	r2, [r7, #7]
 8002258:	4930      	ldr	r1, [pc, #192]	@ (800231c <HW_TS_Stop+0xf4>)
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	330c      	adds	r3, #12
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d142      	bne.n	80022f4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fc80 	bl	8001b78 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002278:	4b29      	ldr	r3, [pc, #164]	@ (8002320 <HW_TS_Stop+0xf8>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800227e:	7cfb      	ldrb	r3, [r7, #19]
 8002280:	2b06      	cmp	r3, #6
 8002282:	d12f      	bne.n	80022e4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <HW_TS_Stop+0xfc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002290:	d107      	bne.n	80022a2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002292:	bf00      	nop
 8002294:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <HW_TS_Stop+0xf0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f8      	bne.n	8002294 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HW_TS_Stop+0xf0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <HW_TS_Stop+0xf0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022b0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80022b2:	bf00      	nop
 80022b4:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HW_TS_Stop+0xf0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f8      	beq.n	80022b4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HW_TS_Stop+0xf0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <HW_TS_Stop+0xf0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022d2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80022d4:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <HW_TS_Stop+0x100>)
 80022d6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022da:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80022dc:	2003      	movs	r0, #3
 80022de:	f001 fc28 	bl	8003b32 <HAL_NVIC_ClearPendingIRQ>
 80022e2:	e007      	b.n	80022f4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <HW_TS_Stop+0x104>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	7cfa      	ldrb	r2, [r7, #19]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80022f0:	f7ff fd5e 	bl	8001db0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <HW_TS_Stop+0xf0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	22ff      	movs	r2, #255	@ 0xff
 80022fa:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022fc:	2003      	movs	r0, #3
 80022fe:	f001 fbe2 	bl	8003ac6 <HAL_NVIC_EnableIRQ>
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f383 8810 	msr	PRIMASK, r3
}
 800230c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800230e:	bf00      	nop
}
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000560 	.word	0x20000560
 800231c:	20000368 	.word	0x20000368
 8002320:	200003f8 	.word	0x200003f8
 8002324:	40002800 	.word	0x40002800
 8002328:	58000800 	.word	0x58000800
 800232c:	200003f9 	.word	0x200003f9

08002330 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800233c:	79fa      	ldrb	r2, [r7, #7]
 800233e:	493b      	ldr	r1, [pc, #236]	@ (800242c <HW_TS_Start+0xfc>)
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	330c      	adds	r3, #12
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d103      	bne.n	800235c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff66 	bl	8002228 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800235c:	f3ef 8310 	mrs	r3, PRIMASK
 8002360:	60fb      	str	r3, [r7, #12]
  return(result);
 8002362:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002364:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002366:	b672      	cpsid	i
}
 8002368:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800236a:	2003      	movs	r0, #3
 800236c:	f001 fbb9 	bl	8003ae2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002370:	4b2f      	ldr	r3, [pc, #188]	@ (8002430 <HW_TS_Start+0x100>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	22ca      	movs	r2, #202	@ 0xca
 8002376:	625a      	str	r2, [r3, #36]	@ 0x24
 8002378:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <HW_TS_Start+0x100>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2253      	movs	r2, #83	@ 0x53
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002380:	79fa      	ldrb	r2, [r7, #7]
 8002382:	492a      	ldr	r1, [pc, #168]	@ (800242c <HW_TS_Start+0xfc>)
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	330c      	adds	r3, #12
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	4925      	ldr	r1, [pc, #148]	@ (800242c <HW_TS_Start+0xfc>)
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	3308      	adds	r3, #8
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	4920      	ldr	r1, [pc, #128]	@ (800242c <HW_TS_Start+0xfc>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	3304      	adds	r3, #4
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fb30 	bl	8001a24 <linkTimer>
 80023c4:	4603      	mov	r3, r0
 80023c6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <HW_TS_Start+0x104>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <HW_TS_Start+0x108>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	7c7a      	ldrb	r2, [r7, #17]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d002      	beq.n	80023e0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80023da:	f7ff fce9 	bl	8001db0 <RescheduleTimerList>
 80023de:	e013      	b.n	8002408 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80023e0:	79fa      	ldrb	r2, [r7, #7]
 80023e2:	4912      	ldr	r1, [pc, #72]	@ (800242c <HW_TS_Start+0xfc>)
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	3308      	adds	r3, #8
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	8a7b      	ldrh	r3, [r7, #18]
 80023f4:	79fa      	ldrb	r2, [r7, #7]
 80023f6:	1ac9      	subs	r1, r1, r3
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <HW_TS_Start+0xfc>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4403      	add	r3, r0
 8002404:	3308      	adds	r3, #8
 8002406:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HW_TS_Start+0x100>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	22ff      	movs	r2, #255	@ 0xff
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002410:	2003      	movs	r0, #3
 8002412:	f001 fb58 	bl	8003ac6 <HAL_NVIC_EnableIRQ>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f383 8810 	msr	PRIMASK, r3
}
 8002420:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002422:	bf00      	nop
}
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000368 	.word	0x20000368
 8002430:	20000560 	.word	0x20000560
 8002434:	200003f8 	.word	0x200003f8
 8002438:	200003f9 	.word	0x200003f9

0800243c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	460b      	mov	r3, r1
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4798      	blx	r3

  return;
 800244e:	bf00      	nop
}
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	4613      	mov	r3, r2
 8002468:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10c      	bne.n	800248a <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8002470:	4a08      	ldr	r2, [pc, #32]	@ (8002494 <HW_UART_Receive_IT+0x3c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <HW_UART_Receive_IT+0x40>)
 8002478:	4a08      	ldr	r2, [pc, #32]	@ (800249c <HW_UART_Receive_IT+0x44>)
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	89bb      	ldrh	r3, [r7, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	4805      	ldr	r0, [pc, #20]	@ (8002498 <HW_UART_Receive_IT+0x40>)
 8002484:	f006 fdfc 	bl	8009080 <HAL_UART_Receive_IT>
            break;
 8002488:	e000      	b.n	800248c <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800248a:	bf00      	nop
    }

    return;
 800248c:	bf00      	nop
}
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000408 	.word	0x20000408
 8002498:	200005d0 	.word	0x200005d0
 800249c:	40013800 	.word	0x40013800

080024a0 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	4603      	mov	r3, r0
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	4613      	mov	r3, r2
 80024b0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10e      	bne.n	80024de <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80024c0:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <HW_UART_Transmit_DMA+0x80>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80024c6:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <HW_UART_Transmit_DMA+0x84>)
 80024c8:	4a17      	ldr	r2, [pc, #92]	@ (8002528 <HW_UART_Transmit_DMA+0x88>)
 80024ca:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80024cc:	89bb      	ldrh	r3, [r7, #12]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	4814      	ldr	r0, [pc, #80]	@ (8002524 <HW_UART_Transmit_DMA+0x84>)
 80024d4:	f006 fe20 	bl	8009118 <HAL_UART_Transmit_DMA>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]
            break;
 80024dc:	e000      	b.n	80024e0 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80024de:	bf00      	nop
    }

    switch (hal_status)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d816      	bhi.n	8002514 <HW_UART_Transmit_DMA+0x74>
 80024e6:	a201      	add	r2, pc, #4	@ (adr r2, 80024ec <HW_UART_Transmit_DMA+0x4c>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	080024fd 	.word	0x080024fd
 80024f0:	08002503 	.word	0x08002503
 80024f4:	08002509 	.word	0x08002509
 80024f8:	0800250f 	.word	0x0800250f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80024fc:	2300      	movs	r3, #0
 80024fe:	75bb      	strb	r3, [r7, #22]
            break;
 8002500:	e009      	b.n	8002516 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002502:	2301      	movs	r3, #1
 8002504:	75bb      	strb	r3, [r7, #22]
            break;
 8002506:	e006      	b.n	8002516 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002508:	2302      	movs	r3, #2
 800250a:	75bb      	strb	r3, [r7, #22]
            break;
 800250c:	e003      	b.n	8002516 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800250e:	2303      	movs	r3, #3
 8002510:	75bb      	strb	r3, [r7, #22]
            break;
 8002512:	e000      	b.n	8002516 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002514:	bf00      	nop
    }

    return hw_status;
 8002516:	7dbb      	ldrb	r3, [r7, #22]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	2000040c 	.word	0x2000040c
 8002524:	200005d0 	.word	0x200005d0
 8002528:	40013800 	.word	0x40013800

0800252c <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_UART_RxCpltCallback+0x34>)
 800253c:	429a      	cmp	r2, r3
 800253e:	d107      	bne.n	8002550 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002540:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <HAL_UART_RxCpltCallback+0x38>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002548:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_UART_RxCpltCallback+0x38>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4798      	blx	r3
            }
            break;
 800254e:	e001      	b.n	8002554 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002550:	bf00      	nop
 8002552:	e000      	b.n	8002556 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002554:	bf00      	nop
    }

    return;
 8002556:	bf00      	nop
}
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40013800 	.word	0x40013800
 8002564:	20000408 	.word	0x20000408

08002568 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_UART_TxCpltCallback+0x34>)
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800257c:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <HAL_UART_TxCpltCallback+0x38>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_UART_TxCpltCallback+0x38>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4798      	blx	r3
            }
            break;
 800258a:	e001      	b.n	8002590 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800258c:	bf00      	nop
 800258e:	e000      	b.n	8002592 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002590:	bf00      	nop
    }

    return;
 8002592:	bf00      	nop
}
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40013800 	.word	0x40013800
 80025a0:	2000040c 	.word	0x2000040c

080025a4 <LL_RCC_LSE_SetDriveCapability>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b4:	f023 0218 	bic.w	r2, r3, #24
 80025b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_AHB1_GRP1_EnableClock>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025f4:	68fb      	ldr	r3, [r7, #12]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_AHB2_GRP1_EnableClock>:
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002610:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4313      	orrs	r3, r2
 8002618:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800261e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002626:	68fb      	ldr	r3, [r7, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <check_I2C_Status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t slaveADDR;

void check_I2C_Status(I2C_HandleTypeDef *hi2c) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    uint32_t error = HAL_I2C_GetError(hi2c);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f002 fc6a 	bl	8004f16 <HAL_I2C_GetError>
 8002642:	60f8      	str	r0, [r7, #12]
    HAL_I2C_ModeTypeDef mode = hi2c->Mode;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800264a:	72fb      	strb	r3, [r7, #11]


    // 🔹 Vérification du mode I2C
    printf("Mode I2C actuel : ");
 800264c:	483d      	ldr	r0, [pc, #244]	@ (8002744 <check_I2C_Status+0x110>)
 800264e:	f00d f8fd 	bl	800f84c <iprintf>
    switch (mode) {
 8002652:	7afb      	ldrb	r3, [r7, #11]
 8002654:	2b40      	cmp	r3, #64	@ 0x40
 8002656:	d016      	beq.n	8002686 <check_I2C_Status+0x52>
 8002658:	2b40      	cmp	r3, #64	@ 0x40
 800265a:	dc18      	bgt.n	800268e <check_I2C_Status+0x5a>
 800265c:	2b20      	cmp	r3, #32
 800265e:	d00e      	beq.n	800267e <check_I2C_Status+0x4a>
 8002660:	2b20      	cmp	r3, #32
 8002662:	dc14      	bgt.n	800268e <check_I2C_Status+0x5a>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <check_I2C_Status+0x3a>
 8002668:	2b10      	cmp	r3, #16
 800266a:	d004      	beq.n	8002676 <check_I2C_Status+0x42>
 800266c:	e00f      	b.n	800268e <check_I2C_Status+0x5a>
        case HAL_I2C_MODE_NONE:   printf("Aucune communication\n"); break;
 800266e:	4836      	ldr	r0, [pc, #216]	@ (8002748 <check_I2C_Status+0x114>)
 8002670:	f00d f95c 	bl	800f92c <puts>
 8002674:	e00e      	b.n	8002694 <check_I2C_Status+0x60>
        case HAL_I2C_MODE_MASTER: printf("Mode Maître\n"); break;
 8002676:	4835      	ldr	r0, [pc, #212]	@ (800274c <check_I2C_Status+0x118>)
 8002678:	f00d f958 	bl	800f92c <puts>
 800267c:	e00a      	b.n	8002694 <check_I2C_Status+0x60>
        case HAL_I2C_MODE_SLAVE:  printf("Mode Esclave\n"); break;
 800267e:	4834      	ldr	r0, [pc, #208]	@ (8002750 <check_I2C_Status+0x11c>)
 8002680:	f00d f954 	bl	800f92c <puts>
 8002684:	e006      	b.n	8002694 <check_I2C_Status+0x60>
        case HAL_I2C_MODE_MEM:    printf("Mode Mémoire\n"); break;
 8002686:	4833      	ldr	r0, [pc, #204]	@ (8002754 <check_I2C_Status+0x120>)
 8002688:	f00d f950 	bl	800f92c <puts>
 800268c:	e002      	b.n	8002694 <check_I2C_Status+0x60>
        default: printf("Mode Inconnu\n");
 800268e:	4832      	ldr	r0, [pc, #200]	@ (8002758 <check_I2C_Status+0x124>)
 8002690:	f00d f94c 	bl	800f92c <puts>
    }

    // 🔹 Vérification des erreurs
    if (error == HAL_I2C_ERROR_NONE) {
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <check_I2C_Status+0x6e>
        printf("Aucune erreur I2C\n");
 800269a:	4830      	ldr	r0, [pc, #192]	@ (800275c <check_I2C_Status+0x128>)
 800269c:	f00d f946 	bl	800f92c <puts>
        return;
 80026a0:	e04d      	b.n	800273e <check_I2C_Status+0x10a>
    }

    printf("Erreur I2C detectee : ");
 80026a2:	482f      	ldr	r0, [pc, #188]	@ (8002760 <check_I2C_Status+0x12c>)
 80026a4:	f00d f8d2 	bl	800f84c <iprintf>

    if (error & HAL_I2C_ERROR_BERR)      printf("Bus Error (BERR) ");
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <check_I2C_Status+0x84>
 80026b2:	482c      	ldr	r0, [pc, #176]	@ (8002764 <check_I2C_Status+0x130>)
 80026b4:	f00d f8ca 	bl	800f84c <iprintf>
    if (error & HAL_I2C_ERROR_ARLO)      printf("Arbitration Lost (ARLO) ");
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <check_I2C_Status+0x94>
 80026c2:	4829      	ldr	r0, [pc, #164]	@ (8002768 <check_I2C_Status+0x134>)
 80026c4:	f00d f8c2 	bl	800f84c <iprintf>
    if (error & HAL_I2C_ERROR_AF)        printf("Acknowledge Failure (AF) ");
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <check_I2C_Status+0xa4>
 80026d2:	4826      	ldr	r0, [pc, #152]	@ (800276c <check_I2C_Status+0x138>)
 80026d4:	f00d f8ba 	bl	800f84c <iprintf>
    if (error & HAL_I2C_ERROR_OVR)       printf("Overrun/Underrun (OVR) ");
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <check_I2C_Status+0xb4>
 80026e2:	4823      	ldr	r0, [pc, #140]	@ (8002770 <check_I2C_Status+0x13c>)
 80026e4:	f00d f8b2 	bl	800f84c <iprintf>
    if (error & HAL_I2C_ERROR_DMA)       printf("DMA Transfer Error ");
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <check_I2C_Status+0xc4>
 80026f2:	4820      	ldr	r0, [pc, #128]	@ (8002774 <check_I2C_Status+0x140>)
 80026f4:	f00d f8aa 	bl	800f84c <iprintf>
    if (error & HAL_I2C_ERROR_TIMEOUT)   printf("Timeout Error ");
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <check_I2C_Status+0xd4>
 8002702:	481d      	ldr	r0, [pc, #116]	@ (8002778 <check_I2C_Status+0x144>)
 8002704:	f00d f8a2 	bl	800f84c <iprintf>
    if (error & HAL_I2C_ERROR_SIZE)      printf("Size Management Error ");
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <check_I2C_Status+0xe4>
 8002712:	481a      	ldr	r0, [pc, #104]	@ (800277c <check_I2C_Status+0x148>)
 8002714:	f00d f89a 	bl	800f84c <iprintf>
    if (error & HAL_I2C_ERROR_DMA_PARAM) printf("DMA Parameter Error ");
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <check_I2C_Status+0xf4>
 8002722:	4817      	ldr	r0, [pc, #92]	@ (8002780 <check_I2C_Status+0x14c>)
 8002724:	f00d f892 	bl	800f84c <iprintf>
    if (error & HAL_I2C_ERROR_INVALID_PARAM) printf("Invalid Parameter Error ");
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <check_I2C_Status+0x104>
 8002732:	4814      	ldr	r0, [pc, #80]	@ (8002784 <check_I2C_Status+0x150>)
 8002734:	f00d f88a 	bl	800f84c <iprintf>
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    if (error & HAL_I2C_ERROR_INVALID_CALLBACK) printf("Invalid Callback Error ");
#endif
    printf("\n");
 8002738:	200a      	movs	r0, #10
 800273a:	f00d f899 	bl	800f870 <putchar>
}
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08013120 	.word	0x08013120
 8002748:	08013134 	.word	0x08013134
 800274c:	0801314c 	.word	0x0801314c
 8002750:	0801315c 	.word	0x0801315c
 8002754:	0801316c 	.word	0x0801316c
 8002758:	0801317c 	.word	0x0801317c
 800275c:	0801318c 	.word	0x0801318c
 8002760:	080131a0 	.word	0x080131a0
 8002764:	080131b8 	.word	0x080131b8
 8002768:	080131cc 	.word	0x080131cc
 800276c:	080131e8 	.word	0x080131e8
 8002770:	08013204 	.word	0x08013204
 8002774:	0801321c 	.word	0x0801321c
 8002778:	08013230 	.word	0x08013230
 800277c:	08013240 	.word	0x08013240
 8002780:	08013258 	.word	0x08013258
 8002784:	08013270 	.word	0x08013270

08002788 <scan_I2C_devices>:

void scan_I2C_devices() {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
    printf("\n");
 800278e:	200a      	movs	r0, #10
 8002790:	f00d f86e 	bl	800f870 <putchar>
    printf("Debut du scan I2C...\n");
 8002794:	4816      	ldr	r0, [pc, #88]	@ (80027f0 <scan_I2C_devices+0x68>)
 8002796:	f00d f8c9 	bl	800f92c <puts>

    for (uint8_t address = 1; address < 127; address++) {
 800279a:	2301      	movs	r3, #1
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	e019      	b.n	80027d4 <scan_I2C_devices+0x4c>
        if (HAL_I2C_IsDeviceReady(&hi2c1, address << 1, 3, 100) == HAL_OK) {
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	b299      	uxth	r1, r3
 80027a8:	2364      	movs	r3, #100	@ 0x64
 80027aa:	2203      	movs	r2, #3
 80027ac:	4811      	ldr	r0, [pc, #68]	@ (80027f4 <scan_I2C_devices+0x6c>)
 80027ae:	f002 fa11 	bl	8004bd4 <HAL_I2C_IsDeviceReady>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <scan_I2C_devices+0x46>
            printf("Esclave detecte a l'adresse 0x%X\n", address);
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	4619      	mov	r1, r3
 80027bc:	480e      	ldr	r0, [pc, #56]	@ (80027f8 <scan_I2C_devices+0x70>)
 80027be:	f00d f845 	bl	800f84c <iprintf>
            slaveADDR = address << 1;
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <scan_I2C_devices+0x74>)
 80027cc:	801a      	strh	r2, [r3, #0]
    for (uint8_t address = 1; address < 127; address++) {
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	3301      	adds	r3, #1
 80027d2:	71fb      	strb	r3, [r7, #7]
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	2b7e      	cmp	r3, #126	@ 0x7e
 80027d8:	d9e2      	bls.n	80027a0 <scan_I2C_devices+0x18>
        }
    }
    check_I2C_Status(&hi2c1);
 80027da:	4806      	ldr	r0, [pc, #24]	@ (80027f4 <scan_I2C_devices+0x6c>)
 80027dc:	f7ff ff2a 	bl	8002634 <check_I2C_Status>
    printf("Fin du scan I2C.\n");
 80027e0:	4807      	ldr	r0, [pc, #28]	@ (8002800 <scan_I2C_devices+0x78>)
 80027e2:	f00d f8a3 	bl	800f92c <puts>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	0801328c 	.word	0x0801328c
 80027f4:	20000410 	.word	0x20000410
 80027f8:	080132a4 	.word	0x080132a4
 80027fc:	20000724 	.word	0x20000724
 8002800:	080132c8 	.word	0x080132c8

08002804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002808:	f000 ff6a 	bl	80036e0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800280c:	f7fe fe3e 	bl	800148c <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002810:	f000 f834 	bl	800287c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002814:	f000 f894 	bl	8002940 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002818:	f000 f8f2 	bl	8002a00 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800281c:	f000 fa74 	bl	8002d08 <MX_GPIO_Init>
  MX_DMA_Init();
 8002820:	f000 fa48 	bl	8002cb4 <MX_DMA_Init>
  MX_RTC_Init();
 8002824:	f000 f908 	bl	8002a38 <MX_RTC_Init>
  MX_I2C1_Init();
 8002828:	f000 f8aa 	bl	8002980 <MX_I2C1_Init>
  MX_TIM1_Init();
 800282c:	f000 f938 	bl	8002aa0 <MX_TIM1_Init>
  MX_RF_Init();
 8002830:	f000 f8fa 	bl	8002a28 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_DeInit(&hi2c1);
 8002834:	480f      	ldr	r0, [pc, #60]	@ (8002874 <main+0x70>)
 8002836:	f002 f886 	bl	8004946 <HAL_I2C_DeInit>
  MX_I2C1_Init();
 800283a:	f000 f8a1 	bl	8002980 <MX_I2C1_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800283e:	480e      	ldr	r0, [pc, #56]	@ (8002878 <main+0x74>)
 8002840:	f005 fbb0 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002844:	2100      	movs	r1, #0
 8002846:	480c      	ldr	r0, [pc, #48]	@ (8002878 <main+0x74>)
 8002848:	f005 fc5c 	bl	8008104 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800284c:	2104      	movs	r1, #4
 800284e:	480a      	ldr	r0, [pc, #40]	@ (8002878 <main+0x74>)
 8002850:	f005 fc58 	bl	8008104 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002854:	f7fe fe28 	bl	80014a8 <MX_APPE_Init>
//  }

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002858:	f7fe ff7c 	bl	8001754 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f00b fdc2 	bl	800e3e8 <UTIL_SEQ_Run>

    scan_I2C_devices();
 8002864:	f7ff ff90 	bl	8002788 <scan_I2C_devices>

    HAL_Delay(1000);
 8002868:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800286c:	f7fe ff4d 	bl	800170a <HAL_Delay>
    MX_APPE_Process();
 8002870:	bf00      	nop
 8002872:	e7f1      	b.n	8002858 <main+0x54>
 8002874:	20000410 	.word	0x20000410
 8002878:	20000584 	.word	0x20000584

0800287c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b09a      	sub	sp, #104	@ 0x68
 8002880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	f107 0320 	add.w	r3, r7, #32
 8002886:	2248      	movs	r2, #72	@ 0x48
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f00d f94e 	bl	800fb2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]
 800289e:	615a      	str	r2, [r3, #20]
 80028a0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80028a2:	f003 fb9f 	bl	8005fe4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80028a6:	2010      	movs	r0, #16
 80028a8:	f7ff fe7c 	bl	80025a4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ac:	4b23      	ldr	r3, [pc, #140]	@ (800293c <SystemClock_Config+0xc0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028b4:	4a21      	ldr	r2, [pc, #132]	@ (800293c <SystemClock_Config+0xc0>)
 80028b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b1f      	ldr	r3, [pc, #124]	@ (800293c <SystemClock_Config+0xc0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80028c8:	2327      	movs	r3, #39	@ 0x27
 80028ca:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028d2:	2301      	movs	r3, #1
 80028d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80028dc:	2301      	movs	r3, #1
 80028de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028e0:	2340      	movs	r3, #64	@ 0x40
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80028e4:	2300      	movs	r3, #0
 80028e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80028e8:	23a0      	movs	r3, #160	@ 0xa0
 80028ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f0:	f107 0320 	add.w	r3, r7, #32
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 ff09 	bl	800670c <HAL_RCC_OscConfig>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002900:	f000 fa4a 	bl	8002d98 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002904:	236f      	movs	r3, #111	@ 0x6f
 8002906:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f004 fa65 	bl	8006df4 <HAL_RCC_ClockConfig>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002930:	f000 fa32 	bl	8002d98 <Error_Handler>
  }
}
 8002934:	bf00      	nop
 8002936:	3768      	adds	r7, #104	@ 0x68
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	58000400 	.word	0x58000400

08002940 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b094      	sub	sp, #80	@ 0x50
 8002944:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002946:	463b      	mov	r3, r7
 8002948:	2250      	movs	r2, #80	@ 0x50
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f00d f8ed 	bl	800fb2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002952:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002956:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002958:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800295c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800295e:	2300      	movs	r3, #0
 8002960:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002962:	2300      	movs	r3, #0
 8002964:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002966:	463b      	mov	r3, r7
 8002968:	4618      	mov	r0, r3
 800296a:	f004 fe80 	bl	800766e <HAL_RCCEx_PeriphCLKConfig>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002974:	f000 fa10 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002978:	bf00      	nop
 800297a:	3750      	adds	r7, #80	@ 0x50
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <MX_I2C1_Init+0x74>)
 8002986:	4a1c      	ldr	r2, [pc, #112]	@ (80029f8 <MX_I2C1_Init+0x78>)
 8002988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800298a:	4b1a      	ldr	r3, [pc, #104]	@ (80029f4 <MX_I2C1_Init+0x74>)
 800298c:	4a1b      	ldr	r2, [pc, #108]	@ (80029fc <MX_I2C1_Init+0x7c>)
 800298e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002990:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <MX_I2C1_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002996:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <MX_I2C1_Init+0x74>)
 8002998:	2201      	movs	r2, #1
 800299a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800299c:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <MX_I2C1_Init+0x74>)
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <MX_I2C1_Init+0x74>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029a8:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <MX_I2C1_Init+0x74>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ae:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <MX_I2C1_Init+0x74>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <MX_I2C1_Init+0x74>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029ba:	480e      	ldr	r0, [pc, #56]	@ (80029f4 <MX_I2C1_Init+0x74>)
 80029bc:	f001 ff28 	bl	8004810 <HAL_I2C_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029c6:	f000 f9e7 	bl	8002d98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029ca:	2100      	movs	r1, #0
 80029cc:	4809      	ldr	r0, [pc, #36]	@ (80029f4 <MX_I2C1_Init+0x74>)
 80029ce:	f003 f9eb 	bl	8005da8 <HAL_I2CEx_ConfigAnalogFilter>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029d8:	f000 f9de 	bl	8002d98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029dc:	2100      	movs	r1, #0
 80029de:	4805      	ldr	r0, [pc, #20]	@ (80029f4 <MX_I2C1_Init+0x74>)
 80029e0:	f003 fa2d 	bl	8005e3e <HAL_I2CEx_ConfigDigitalFilter>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029ea:	f000 f9d5 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000410 	.word	0x20000410
 80029f8:	40005400 	.word	0x40005400
 80029fc:	00707cbb 	.word	0x00707cbb

08002a00 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <MX_IPCC_Init+0x20>)
 8002a06:	4a07      	ldr	r2, [pc, #28]	@ (8002a24 <MX_IPCC_Init+0x24>)
 8002a08:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002a0a:	4805      	ldr	r0, [pc, #20]	@ (8002a20 <MX_IPCC_Init+0x20>)
 8002a0c:	f003 fa64 	bl	8005ed8 <HAL_IPCC_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002a16:	f000 f9bf 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000524 	.word	0x20000524
 8002a24:	58000c00 	.word	0x58000c00

08002a28 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a3c:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a3e:	4a17      	ldr	r2, [pc, #92]	@ (8002a9c <MX_RTC_Init+0x64>)
 8002a40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002a4e:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a50:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002a54:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a68:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a6e:	480a      	ldr	r0, [pc, #40]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a70:	f005 f884 	bl	8007b7c <HAL_RTC_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002a7a:	f000 f98d 	bl	8002d98 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	4805      	ldr	r0, [pc, #20]	@ (8002a98 <MX_RTC_Init+0x60>)
 8002a84:	f005 f97a 	bl	8007d7c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002a8e:	f000 f983 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000560 	.word	0x20000560
 8002a9c:	40002800 	.word	0x40002800

08002aa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b09c      	sub	sp, #112	@ 0x70
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	615a      	str	r2, [r3, #20]
 8002ad2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	2234      	movs	r2, #52	@ 0x34
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f00d f826 	bl	800fb2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002ae2:	4a4c      	ldr	r2, [pc, #304]	@ (8002c14 <MX_TIM1_Init+0x174>)
 8002ae4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002ae8:	221f      	movs	r2, #31
 8002aea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aec:	4b48      	ldr	r3, [pc, #288]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8002af2:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002af4:	2263      	movs	r2, #99	@ 0x63
 8002af6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af8:	4b45      	ldr	r3, [pc, #276]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002afe:	4b44      	ldr	r3, [pc, #272]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b04:	4b42      	ldr	r3, [pc, #264]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b0a:	4841      	ldr	r0, [pc, #260]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002b0c:	f005 f9f2 	bl	8007ef4 <HAL_TIM_Base_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002b16:	f000 f93f 	bl	8002d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b1e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b20:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002b24:	4619      	mov	r1, r3
 8002b26:	483a      	ldr	r0, [pc, #232]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002b28:	f005 fcda 	bl	80084e0 <HAL_TIM_ConfigClockSource>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002b32:	f000 f931 	bl	8002d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b36:	4836      	ldr	r0, [pc, #216]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002b38:	f005 fa82 	bl	8008040 <HAL_TIM_PWM_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002b42:	f000 f929 	bl	8002d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b56:	4619      	mov	r1, r3
 8002b58:	482d      	ldr	r0, [pc, #180]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002b5a:	f006 f93b 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002b64:	f000 f918 	bl	8002d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b68:	2360      	movs	r3, #96	@ 0x60
 8002b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 50;
 8002b6c:	2332      	movs	r3, #50	@ 0x32
 8002b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b70:	2300      	movs	r3, #0
 8002b72:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b74:	2300      	movs	r3, #0
 8002b76:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b80:	2300      	movs	r3, #0
 8002b82:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4820      	ldr	r0, [pc, #128]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002b8e:	f005 fb93 	bl	80082b8 <HAL_TIM_PWM_ConfigChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002b98:	f000 f8fe 	bl	8002d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	481a      	ldr	r0, [pc, #104]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002ba6:	f005 fb87 	bl	80082b8 <HAL_TIM_PWM_ConfigChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002bb0:	f000 f8f2 	bl	8002d98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002bda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002bf2:	f006 f94f 	bl	8008e94 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8002bfc:	f000 f8cc 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c00:	4803      	ldr	r0, [pc, #12]	@ (8002c10 <MX_TIM1_Init+0x170>)
 8002c02:	f000 fab5 	bl	8003170 <HAL_TIM_MspPostInit>

}
 8002c06:	bf00      	nop
 8002c08:	3770      	adds	r7, #112	@ 0x70
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000584 	.word	0x20000584
 8002c14:	40012c00 	.word	0x40012c00

08002c18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c1c:	4b23      	ldr	r3, [pc, #140]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c1e:	4a24      	ldr	r2, [pc, #144]	@ (8002cb0 <MX_USART1_UART_Init+0x98>)
 8002c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c22:	4b22      	ldr	r3, [pc, #136]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2a:	4b20      	ldr	r3, [pc, #128]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c30:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c36:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c3e:	220c      	movs	r2, #12
 8002c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002c48:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c4a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c4e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c50:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c56:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c5c:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c62:	4812      	ldr	r0, [pc, #72]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c64:	f006 f9bc 	bl	8008fe0 <HAL_UART_Init>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002c6e:	f000 f893 	bl	8002d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c72:	2100      	movs	r1, #0
 8002c74:	480d      	ldr	r0, [pc, #52]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c76:	f008 fa30 	bl	800b0da <HAL_UARTEx_SetTxFifoThreshold>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002c80:	f000 f88a 	bl	8002d98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c84:	2100      	movs	r1, #0
 8002c86:	4809      	ldr	r0, [pc, #36]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c88:	f008 fa65 	bl	800b156 <HAL_UARTEx_SetRxFifoThreshold>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002c92:	f000 f881 	bl	8002d98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	@ (8002cac <MX_USART1_UART_Init+0x94>)
 8002c98:	f008 f9e6 	bl	800b068 <HAL_UARTEx_DisableFifoMode>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002ca2:	f000 f879 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200005d0 	.word	0x200005d0
 8002cb0:	40013800 	.word	0x40013800

08002cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002cb8:	2004      	movs	r0, #4
 8002cba:	f7ff fc89 	bl	80025d0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f7ff fc86 	bl	80025d0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	200b      	movs	r0, #11
 8002cca:	f000 fee2 	bl	8003a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cce:	200b      	movs	r0, #11
 8002cd0:	f000 fef9 	bl	8003ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	200c      	movs	r0, #12
 8002cda:	f000 feda 	bl	8003a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002cde:	200c      	movs	r0, #12
 8002ce0:	f000 fef1 	bl	8003ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	200d      	movs	r0, #13
 8002cea:	f000 fed2 	bl	8003a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002cee:	200d      	movs	r0, #13
 8002cf0:	f000 fee9 	bl	8003ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	200e      	movs	r0, #14
 8002cfa:	f000 feca 	bl	8003a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002cfe:	200e      	movs	r0, #14
 8002d00:	f000 fee1 	bl	8003ac6 <HAL_NVIC_EnableIRQ>

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1c:	2004      	movs	r0, #4
 8002d1e:	f7ff fc70 	bl	8002602 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	2002      	movs	r0, #2
 8002d24:	f7ff fc6d 	bl	8002602 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f7ff fc6a 	bl	8002602 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2e:	2008      	movs	r0, #8
 8002d30:	f7ff fc67 	bl	8002602 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2122      	movs	r1, #34	@ 0x22
 8002d38:	4814      	ldr	r0, [pc, #80]	@ (8002d8c <MX_GPIO_Init+0x84>)
 8002d3a:	f001 fd2d 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d3e:	2310      	movs	r3, #16
 8002d40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4810      	ldr	r0, [pc, #64]	@ (8002d90 <MX_GPIO_Init+0x88>)
 8002d50:	f001 fad4 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD1_Pin;
 8002d54:	2322      	movs	r3, #34	@ 0x22
 8002d56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4808      	ldr	r0, [pc, #32]	@ (8002d8c <MX_GPIO_Init+0x84>)
 8002d6a:	f001 fac7 	bl	80042fc <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4805      	ldr	r0, [pc, #20]	@ (8002d94 <MX_GPIO_Init+0x8c>)
 8002d80:	f001 fabc 	bl	80042fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	48000400 	.word	0x48000400
 8002d90:	48000800 	.word	0x48000800
 8002d94:	48000c00 	.word	0x48000c00

08002d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d9c:	b672      	cpsid	i
}
 8002d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <Error_Handler+0x8>

08002da4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_AHB2_GRP1_EnableClock>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4013      	ands	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_AHB3_GRP1_EnableClock>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_APB1_GRP1_EnableClock>:
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e36:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_APB1_GRP1_DisableClock>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e72:	4013      	ands	r3, r2
 8002e74:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_APB2_GRP1_EnableClock>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002eb8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002ebc:	f7ff ff9c 	bl	8002df8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	202e      	movs	r0, #46	@ 0x2e
 8002ec6:	f000 fde4 	bl	8003a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002eca:	202e      	movs	r0, #46	@ 0x2e
 8002ecc:	f000 fdfb 	bl	8003ac6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b09c      	sub	sp, #112	@ 0x70
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	2250      	movs	r2, #80	@ 0x50
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f00c fe19 	bl	800fb2c <memset>
  if(hi2c->Instance==I2C1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a48      	ldr	r2, [pc, #288]	@ (8003020 <HAL_I2C_MspInit+0x14c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	f040 8089 	bne.w	8003018 <HAL_I2C_MspInit+0x144>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f06:	2304      	movs	r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f0a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f10:	f107 030c 	add.w	r3, r7, #12
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 fbaa 	bl	800766e <HAL_RCCEx_PeriphCLKConfig>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002f20:	f7ff ff3a 	bl	8002d98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f24:	2002      	movs	r0, #2
 8002f26:	f7ff ff4e 	bl	8002dc6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f30:	2312      	movs	r3, #18
 8002f32:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f34:	2301      	movs	r3, #1
 8002f36:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f44:	4619      	mov	r1, r3
 8002f46:	4837      	ldr	r0, [pc, #220]	@ (8003024 <HAL_I2C_MspInit+0x150>)
 8002f48:	f001 f9d8 	bl	80042fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f4c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002f50:	f7ff ff6b 	bl	8002e2a <LL_APB1_GRP1_EnableClock>

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel3;
 8002f54:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f56:	4a35      	ldr	r2, [pc, #212]	@ (800302c <HAL_I2C_MspInit+0x158>)
 8002f58:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002f5a:	4b33      	ldr	r3, [pc, #204]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f5c:	220b      	movs	r2, #11
 8002f5e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f60:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f62:	2210      	movs	r2, #16
 8002f64:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f66:	4b30      	ldr	r3, [pc, #192]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f6e:	2280      	movs	r2, #128	@ 0x80
 8002f70:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f72:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f78:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f84:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002f8a:	4827      	ldr	r0, [pc, #156]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f8c:	f000 fde0 	bl	8003b50 <HAL_DMA_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 8002f96:	f7ff feff 	bl	8002d98 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a22      	ldr	r2, [pc, #136]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002f9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fa0:	4a21      	ldr	r2, [pc, #132]	@ (8003028 <HAL_I2C_MspInit+0x154>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8002fa6:	4b22      	ldr	r3, [pc, #136]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fa8:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <HAL_I2C_MspInit+0x160>)
 8002faa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002fac:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fae:	220a      	movs	r2, #10
 8002fb0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fca:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002fd0:	4b17      	ldr	r3, [pc, #92]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fd6:	4b16      	ldr	r3, [pc, #88]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002fdc:	4814      	ldr	r0, [pc, #80]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002fde:	f000 fdb7 	bl	8003b50 <HAL_DMA_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_MspInit+0x118>
    {
      Error_Handler();
 8002fe8:	f7ff fed6 	bl	8002d98 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a10      	ldr	r2, [pc, #64]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8003030 <HAL_I2C_MspInit+0x15c>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	201e      	movs	r0, #30
 8002ffe:	f000 fd48 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003002:	201e      	movs	r0, #30
 8003004:	f000 fd5f 	bl	8003ac6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2100      	movs	r1, #0
 800300c:	201f      	movs	r0, #31
 800300e:	f000 fd40 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003012:	201f      	movs	r0, #31
 8003014:	f000 fd57 	bl	8003ac6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003018:	bf00      	nop
 800301a:	3770      	adds	r7, #112	@ 0x70
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40005400 	.word	0x40005400
 8003024:	48000400 	.word	0x48000400
 8003028:	20000464 	.word	0x20000464
 800302c:	40020030 	.word	0x40020030
 8003030:	200004c4 	.word	0x200004c4
 8003034:	40020044 	.word	0x40020044

08003038 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <HAL_I2C_MspDeInit+0x58>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d11d      	bne.n	8003086 <HAL_I2C_MspDeInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800304a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800304e:	f7ff ff05 	bl	8002e5c <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003052:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003056:	480f      	ldr	r0, [pc, #60]	@ (8003094 <HAL_I2C_MspDeInit+0x5c>)
 8003058:	f001 fac0 	bl	80045dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800305c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003060:	480c      	ldr	r0, [pc, #48]	@ (8003094 <HAL_I2C_MspDeInit+0x5c>)
 8003062:	f001 fabb 	bl	80045dc <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fe18 	bl	8003ca0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fe13 	bl	8003ca0 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800307a:	201e      	movs	r0, #30
 800307c:	f000 fd31 	bl	8003ae2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003080:	201f      	movs	r0, #31
 8003082:	f000 fd2e 	bl	8003ae2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40005400 	.word	0x40005400
 8003094:	48000400 	.word	0x48000400

08003098 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0d      	ldr	r2, [pc, #52]	@ (80030dc <HAL_IPCC_MspInit+0x44>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d113      	bne.n	80030d2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80030aa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80030ae:	f7ff fea3 	bl	8002df8 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2100      	movs	r1, #0
 80030b6:	202c      	movs	r0, #44	@ 0x2c
 80030b8:	f000 fceb 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80030bc:	202c      	movs	r0, #44	@ 0x2c
 80030be:	f000 fd02 	bl	8003ac6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	202d      	movs	r0, #45	@ 0x2d
 80030c8:	f000 fce3 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80030cc:	202d      	movs	r0, #45	@ 0x2d
 80030ce:	f000 fcfa 	bl	8003ac6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	58000c00 	.word	0x58000c00

080030e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b096      	sub	sp, #88	@ 0x58
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030e8:	f107 0308 	add.w	r3, r7, #8
 80030ec:	2250      	movs	r2, #80	@ 0x50
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f00c fd1b 	bl	800fb2c <memset>
  if(hrtc->Instance==RTC)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <HAL_RTC_MspInit+0x64>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d11d      	bne.n	800313c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003100:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003104:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003106:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800310a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800310c:	f107 0308 	add.w	r3, r7, #8
 8003110:	4618      	mov	r0, r3
 8003112:	f004 faac 	bl	800766e <HAL_RCCEx_PeriphCLKConfig>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800311c:	f7ff fe3c 	bl	8002d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003120:	f7ff fe40 	bl	8002da4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003124:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003128:	f7ff fe7f 	bl	8002e2a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800312c:	2200      	movs	r2, #0
 800312e:	2100      	movs	r1, #0
 8003130:	2003      	movs	r0, #3
 8003132:	f000 fcae 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003136:	2003      	movs	r0, #3
 8003138:	f000 fcc5 	bl	8003ac6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800313c:	bf00      	nop
 800313e:	3758      	adds	r7, #88	@ 0x58
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40002800 	.word	0x40002800

08003148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a05      	ldr	r2, [pc, #20]	@ (800316c <HAL_TIM_Base_MspInit+0x24>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d103      	bne.n	8003162 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800315a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800315e:	f7ff fe90 	bl	8002e82 <LL_APB2_GRP1_EnableClock>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00

08003170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0d      	ldr	r2, [pc, #52]	@ (80031c4 <HAL_TIM_MspPostInit+0x54>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d114      	bne.n	80031bc <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003192:	2001      	movs	r0, #1
 8003194:	f7ff fe17 	bl	8002dc6 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003198:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f107 030c 	add.w	r3, r7, #12
 80031b2:	4619      	mov	r1, r3
 80031b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031b8:	f001 f8a0 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80031bc:	bf00      	nop
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40012c00 	.word	0x40012c00

080031c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b09c      	sub	sp, #112	@ 0x70
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	2250      	movs	r2, #80	@ 0x50
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f00c fc9f 	bl	800fb2c <memset>
  if(huart->Instance==USART1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a43      	ldr	r2, [pc, #268]	@ (8003300 <HAL_UART_MspInit+0x138>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d17f      	bne.n	80032f8 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031fc:	2300      	movs	r3, #0
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003200:	f107 030c 	add.w	r3, r7, #12
 8003204:	4618      	mov	r0, r3
 8003206:	f004 fa32 	bl	800766e <HAL_RCCEx_PeriphCLKConfig>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003210:	f7ff fdc2 	bl	8002d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003214:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003218:	f7ff fe33 	bl	8002e82 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321c:	2002      	movs	r0, #2
 800321e:	f7ff fdd2 	bl	8002dc6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003222:	23c0      	movs	r3, #192	@ 0xc0
 8003224:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003232:	2307      	movs	r3, #7
 8003234:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003236:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800323a:	4619      	mov	r1, r3
 800323c:	4831      	ldr	r0, [pc, #196]	@ (8003304 <HAL_UART_MspInit+0x13c>)
 800323e:	f001 f85d 	bl	80042fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003242:	4b31      	ldr	r3, [pc, #196]	@ (8003308 <HAL_UART_MspInit+0x140>)
 8003244:	4a31      	ldr	r2, [pc, #196]	@ (800330c <HAL_UART_MspInit+0x144>)
 8003246:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003248:	4b2f      	ldr	r3, [pc, #188]	@ (8003308 <HAL_UART_MspInit+0x140>)
 800324a:	220e      	movs	r2, #14
 800324c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800324e:	4b2e      	ldr	r3, [pc, #184]	@ (8003308 <HAL_UART_MspInit+0x140>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003254:	4b2c      	ldr	r3, [pc, #176]	@ (8003308 <HAL_UART_MspInit+0x140>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800325a:	4b2b      	ldr	r3, [pc, #172]	@ (8003308 <HAL_UART_MspInit+0x140>)
 800325c:	2280      	movs	r2, #128	@ 0x80
 800325e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003260:	4b29      	ldr	r3, [pc, #164]	@ (8003308 <HAL_UART_MspInit+0x140>)
 8003262:	2200      	movs	r2, #0
 8003264:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003266:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <HAL_UART_MspInit+0x140>)
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800326c:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <HAL_UART_MspInit+0x140>)
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003272:	4b25      	ldr	r3, [pc, #148]	@ (8003308 <HAL_UART_MspInit+0x140>)
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003278:	4823      	ldr	r0, [pc, #140]	@ (8003308 <HAL_UART_MspInit+0x140>)
 800327a:	f000 fc69 	bl	8003b50 <HAL_DMA_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003284:	f7ff fd88 	bl	8002d98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a1f      	ldr	r2, [pc, #124]	@ (8003308 <HAL_UART_MspInit+0x140>)
 800328c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003290:	4a1d      	ldr	r2, [pc, #116]	@ (8003308 <HAL_UART_MspInit+0x140>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003296:	4b1e      	ldr	r3, [pc, #120]	@ (8003310 <HAL_UART_MspInit+0x148>)
 8003298:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_UART_MspInit+0x14c>)
 800329a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800329c:	4b1c      	ldr	r3, [pc, #112]	@ (8003310 <HAL_UART_MspInit+0x148>)
 800329e:	220f      	movs	r2, #15
 80032a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032a4:	2210      	movs	r2, #16
 80032a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a8:	4b19      	ldr	r3, [pc, #100]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032ae:	4b18      	ldr	r3, [pc, #96]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032b0:	2280      	movs	r2, #128	@ 0x80
 80032b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b4:	4b16      	ldr	r3, [pc, #88]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ba:	4b15      	ldr	r3, [pc, #84]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80032c0:	4b13      	ldr	r3, [pc, #76]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032c6:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032cc:	4810      	ldr	r0, [pc, #64]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032ce:	f000 fc3f 	bl	8003b50 <HAL_DMA_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 80032d8:	f7ff fd5e 	bl	8002d98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032e0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80032e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003310 <HAL_UART_MspInit+0x148>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	2100      	movs	r1, #0
 80032ec:	2024      	movs	r0, #36	@ 0x24
 80032ee:	f000 fbd0 	bl	8003a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032f2:	2024      	movs	r0, #36	@ 0x24
 80032f4:	f000 fbe7 	bl	8003ac6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80032f8:	bf00      	nop
 80032fa:	3770      	adds	r7, #112	@ 0x70
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40013800 	.word	0x40013800
 8003304:	48000400 	.word	0x48000400
 8003308:	20000664 	.word	0x20000664
 800330c:	40020008 	.word	0x40020008
 8003310:	200006c4 	.word	0x200006c4
 8003314:	4002001c 	.word	0x4002001c

08003318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <NMI_Handler+0x4>

08003320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <HardFault_Handler+0x4>

08003328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <MemManage_Handler+0x4>

08003330 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <BusFault_Handler+0x4>

08003338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <UsageFault_Handler+0x4>

08003340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800336e:	f000 fa11 	bl	8003794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}

08003376 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800337a:	f7fe fdb3 	bl	8001ee4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003388:	4802      	ldr	r0, [pc, #8]	@ (8003394 <DMA1_Channel1_IRQHandler+0x10>)
 800338a:	f000 fe58 	bl	800403e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000664 	.word	0x20000664

08003398 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800339c:	4802      	ldr	r0, [pc, #8]	@ (80033a8 <DMA1_Channel2_IRQHandler+0x10>)
 800339e:	f000 fe4e 	bl	800403e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	200006c4 	.word	0x200006c4

080033ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80033b0:	4802      	ldr	r0, [pc, #8]	@ (80033bc <DMA1_Channel3_IRQHandler+0x10>)
 80033b2:	f000 fe44 	bl	800403e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000464 	.word	0x20000464

080033c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80033c4:	4802      	ldr	r0, [pc, #8]	@ (80033d0 <DMA1_Channel4_IRQHandler+0x10>)
 80033c6:	f000 fe3a 	bl	800403e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200004c4 	.word	0x200004c4

080033d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80033d8:	4802      	ldr	r0, [pc, #8]	@ (80033e4 <I2C1_EV_IRQHandler+0x10>)
 80033da:	f001 fce7 	bl	8004dac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000410 	.word	0x20000410

080033e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80033ec:	4802      	ldr	r0, [pc, #8]	@ (80033f8 <I2C1_ER_IRQHandler+0x10>)
 80033ee:	f001 fcf7 	bl	8004de0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000410 	.word	0x20000410

080033fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003400:	4802      	ldr	r0, [pc, #8]	@ (800340c <USART1_IRQHandler+0x10>)
 8003402:	f005 ff09 	bl	8009218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200005d0 	.word	0x200005d0

08003410 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003414:	f00a fe68 	bl	800e0e8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003420:	f00a fe98 	bl	800e154 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}

08003428 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800342c:	f001 f9cc 	bl	80047c8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}

08003434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return 1;
 8003438:	2301      	movs	r3, #1
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <_kill>:

int _kill(int pid, int sig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800344e:	f00c fbcf 	bl	800fbf0 <__errno>
 8003452:	4603      	mov	r3, r0
 8003454:	2216      	movs	r2, #22
 8003456:	601a      	str	r2, [r3, #0]
  return -1;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <_exit>:

void _exit (int status)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800346c:	f04f 31ff 	mov.w	r1, #4294967295
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ffe7 	bl	8003444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <_exit+0x12>

0800347a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e00a      	b.n	80034a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800348c:	f3af 8000 	nop.w
 8003490:	4601      	mov	r1, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	60ba      	str	r2, [r7, #8]
 8003498:	b2ca      	uxtb	r2, r1
 800349a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3301      	adds	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	dbf0      	blt.n	800348c <_read+0x12>
  }

  return len;
 80034aa:	687b      	ldr	r3, [r7, #4]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034dc:	605a      	str	r2, [r3, #4]
  return 0;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <_isatty>:

int _isatty(int file)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034f4:	2301      	movs	r3, #1
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003524:	4a14      	ldr	r2, [pc, #80]	@ (8003578 <_sbrk+0x5c>)
 8003526:	4b15      	ldr	r3, [pc, #84]	@ (800357c <_sbrk+0x60>)
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003530:	4b13      	ldr	r3, [pc, #76]	@ (8003580 <_sbrk+0x64>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003538:	4b11      	ldr	r3, [pc, #68]	@ (8003580 <_sbrk+0x64>)
 800353a:	4a12      	ldr	r2, [pc, #72]	@ (8003584 <_sbrk+0x68>)
 800353c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800353e:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	429a      	cmp	r2, r3
 800354a:	d207      	bcs.n	800355c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800354c:	f00c fb50 	bl	800fbf0 <__errno>
 8003550:	4603      	mov	r3, r0
 8003552:	220c      	movs	r2, #12
 8003554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	e009      	b.n	8003570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800355c:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <_sbrk+0x64>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003562:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <_sbrk+0x64>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	4a05      	ldr	r2, [pc, #20]	@ (8003580 <_sbrk+0x64>)
 800356c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20030000 	.word	0x20030000
 800357c:	00000400 	.word	0x00000400
 8003580:	20000728 	.word	0x20000728
 8003584:	20000a30 	.word	0x20000a30

08003588 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800358c:	4b24      	ldr	r3, [pc, #144]	@ (8003620 <SystemInit+0x98>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003592:	4a23      	ldr	r2, [pc, #140]	@ (8003620 <SystemInit+0x98>)
 8003594:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003598:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80035b4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80035b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035c0:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <SystemInit+0x9c>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80035c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035d2:	f023 0305 	bic.w	r3, r3, #5
 80035d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80035ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003628 <SystemInit+0xa0>)
 80035f4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003628 <SystemInit+0xa0>)
 80035fc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003608:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800360c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003612:	2200      	movs	r2, #0
 8003614:	619a      	str	r2, [r3, #24]
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00
 8003624:	faf6fefb 	.word	0xfaf6fefb
 8003628:	22041000 	.word	0x22041000

0800362c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800362c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800362e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003630:	3304      	adds	r3, #4

08003632 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003632:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003634:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003636:	d3f9      	bcc.n	800362c <CopyDataInit>
  bx lr
 8003638:	4770      	bx	lr

0800363a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800363a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800363c:	3004      	adds	r0, #4

0800363e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800363e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003640:	d3fb      	bcc.n	800363a <FillZerobss>
  bx lr
 8003642:	4770      	bx	lr

08003644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003644:	480c      	ldr	r0, [pc, #48]	@ (8003678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003646:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003648:	f7ff ff9e 	bl	8003588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800364c:	480b      	ldr	r0, [pc, #44]	@ (800367c <LoopForever+0x6>)
 800364e:	490c      	ldr	r1, [pc, #48]	@ (8003680 <LoopForever+0xa>)
 8003650:	4a0c      	ldr	r2, [pc, #48]	@ (8003684 <LoopForever+0xe>)
 8003652:	2300      	movs	r3, #0
 8003654:	f7ff ffed 	bl	8003632 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003658:	480b      	ldr	r0, [pc, #44]	@ (8003688 <LoopForever+0x12>)
 800365a:	490c      	ldr	r1, [pc, #48]	@ (800368c <LoopForever+0x16>)
 800365c:	4a0c      	ldr	r2, [pc, #48]	@ (8003690 <LoopForever+0x1a>)
 800365e:	2300      	movs	r3, #0
 8003660:	f7ff ffe7 	bl	8003632 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003664:	480b      	ldr	r0, [pc, #44]	@ (8003694 <LoopForever+0x1e>)
 8003666:	490c      	ldr	r1, [pc, #48]	@ (8003698 <LoopForever+0x22>)
 8003668:	2300      	movs	r3, #0
 800366a:	f7ff ffe8 	bl	800363e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800366e:	f00c fac5 	bl	800fbfc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003672:	f7ff f8c7 	bl	8002804 <main>

08003676 <LoopForever>:

LoopForever:
  b LoopForever
 8003676:	e7fe      	b.n	8003676 <LoopForever>
  ldr   r0, =_estack
 8003678:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800367c:	20000008 	.word	0x20000008
 8003680:	200001f4 	.word	0x200001f4
 8003684:	08013a3c 	.word	0x08013a3c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003688:	200301e4 	.word	0x200301e4
 800368c:	20030a67 	.word	0x20030a67
 8003690:	08013c6e 	.word	0x08013c6e
  INIT_BSS _sbss, _ebss
 8003694:	20000240 	.word	0x20000240
 8003698:	20000a30 	.word	0x20000a30

0800369c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800369c:	e7fe      	b.n	800369c <ADC1_IRQHandler>
	...

080036a0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80036a4:	4b05      	ldr	r3, [pc, #20]	@ (80036bc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a04      	ldr	r2, [pc, #16]	@ (80036bc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6053      	str	r3, [r2, #4]
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e0042000 	.word	0xe0042000

080036c0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80036c4:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a04      	ldr	r2, [pc, #16]	@ (80036dc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80036ca:	f043 0302 	orr.w	r3, r3, #2
 80036ce:	6053      	str	r3, [r2, #4]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e0042000 	.word	0xe0042000

080036e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ea:	4b0c      	ldr	r3, [pc, #48]	@ (800371c <HAL_Init+0x3c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a0b      	ldr	r2, [pc, #44]	@ (800371c <HAL_Init+0x3c>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f6:	2003      	movs	r0, #3
 80036f8:	f000 f9c0 	bl	8003a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036fc:	2000      	movs	r0, #0
 80036fe:	f000 f80f 	bl	8003720 <HAL_InitTick>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	71fb      	strb	r3, [r7, #7]
 800370c:	e001      	b.n	8003712 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800370e:	f7ff fbd1 	bl	8002eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003712:	79fb      	ldrb	r3, [r7, #7]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	58004000 	.word	0x58004000

08003720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800372c:	4b17      	ldr	r3, [pc, #92]	@ (800378c <HAL_InitTick+0x6c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d024      	beq.n	800377e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003734:	f003 fd0a 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b14      	ldr	r3, [pc, #80]	@ (800378c <HAL_InitTick+0x6c>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	4619      	mov	r1, r3
 8003740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003744:	fbb3 f3f1 	udiv	r3, r3, r1
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f9d6 	bl	8003afe <HAL_SYSTICK_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10f      	bne.n	8003778 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b0f      	cmp	r3, #15
 800375c:	d809      	bhi.n	8003772 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800375e:	2200      	movs	r2, #0
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	f04f 30ff 	mov.w	r0, #4294967295
 8003766:	f000 f994 	bl	8003a92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800376a:	4a09      	ldr	r2, [pc, #36]	@ (8003790 <HAL_InitTick+0x70>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e007      	b.n	8003782 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	e004      	b.n	8003782 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
 800377c:	e001      	b.n	8003782 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000010 	.word	0x20000010
 8003790:	2000000c 	.word	0x2000000c

08003794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_IncTick+0x20>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_IncTick+0x24>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <HAL_IncTick+0x24>)
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000010 	.word	0x20000010
 80037b8:	2000072c 	.word	0x2000072c

080037bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	2000072c 	.word	0x2000072c

080037d4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80037d8:	4b03      	ldr	r3, [pc, #12]	@ (80037e8 <HAL_GetTickPrio+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	2000000c 	.word	0x2000000c

080037ec <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80037f0:	4b03      	ldr	r3, [pc, #12]	@ (8003800 <HAL_GetTickFreq+0x14>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000010 	.word	0x20000010

08003804 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003808:	f7ff ff4a 	bl	80036a0 <LL_DBGMCU_EnableDBGSleepMode>
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003814:	f7ff ff54 	bl	80036c0 <LL_DBGMCU_EnableDBGStopMode>
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}

0800381c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800384c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384e:	4a04      	ldr	r2, [pc, #16]	@ (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	60d3      	str	r3, [r2, #12]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003868:	4b04      	ldr	r3, [pc, #16]	@ (800387c <__NVIC_GetPriorityGrouping+0x18>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 0307 	and.w	r3, r3, #7
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	2b00      	cmp	r3, #0
 8003890:	db0b      	blt.n	80038aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	4907      	ldr	r1, [pc, #28]	@ (80038b8 <__NVIC_EnableIRQ+0x38>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2001      	movs	r0, #1
 80038a2:	fa00 f202 	lsl.w	r2, r0, r2
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000e100 	.word	0xe000e100

080038bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	db12      	blt.n	80038f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	490a      	ldr	r1, [pc, #40]	@ (8003900 <__NVIC_DisableIRQ+0x44>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2001      	movs	r0, #1
 80038de:	fa00 f202 	lsl.w	r2, r0, r2
 80038e2:	3320      	adds	r3, #32
 80038e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038e8:	f3bf 8f4f 	dsb	sy
}
 80038ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038ee:	f3bf 8f6f 	isb	sy
}
 80038f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100

08003904 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	db0c      	blt.n	8003930 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4907      	ldr	r1, [pc, #28]	@ (800393c <__NVIC_SetPendingIRQ+0x38>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2001      	movs	r0, #1
 8003926:	fa00 f202 	lsl.w	r2, r0, r2
 800392a:	3340      	adds	r3, #64	@ 0x40
 800392c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000e100 	.word	0xe000e100

08003940 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	2b00      	cmp	r3, #0
 8003950:	db0c      	blt.n	800396c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	4907      	ldr	r1, [pc, #28]	@ (8003978 <__NVIC_ClearPendingIRQ+0x38>)
 800395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	2001      	movs	r0, #1
 8003962:	fa00 f202 	lsl.w	r2, r0, r2
 8003966:	3360      	adds	r3, #96	@ 0x60
 8003968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100

0800397c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db0a      	blt.n	80039a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	490c      	ldr	r1, [pc, #48]	@ (80039c8 <__NVIC_SetPriority+0x4c>)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	440b      	add	r3, r1
 80039a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a4:	e00a      	b.n	80039bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4908      	ldr	r1, [pc, #32]	@ (80039cc <__NVIC_SetPriority+0x50>)
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	3b04      	subs	r3, #4
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	440b      	add	r3, r1
 80039ba:	761a      	strb	r2, [r3, #24]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000e100 	.word	0xe000e100
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	@ 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f1c3 0307 	rsb	r3, r3, #7
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	bf28      	it	cs
 80039ee:	2304      	movcs	r3, #4
 80039f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d902      	bls.n	8003a00 <NVIC_EncodePriority+0x30>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3b03      	subs	r3, #3
 80039fe:	e000      	b.n	8003a02 <NVIC_EncodePriority+0x32>
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	401a      	ands	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a18:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	43d9      	mvns	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a28:	4313      	orrs	r3, r2
         );
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3724      	adds	r7, #36	@ 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a48:	d301      	bcc.n	8003a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e00f      	b.n	8003a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a78 <SysTick_Config+0x40>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a56:	210f      	movs	r1, #15
 8003a58:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5c:	f7ff ff8e 	bl	800397c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <SysTick_Config+0x40>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a66:	4b04      	ldr	r3, [pc, #16]	@ (8003a78 <SysTick_Config+0x40>)
 8003a68:	2207      	movs	r2, #7
 8003a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	e000e010 	.word	0xe000e010

08003a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fec9 	bl	800381c <__NVIC_SetPriorityGrouping>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b086      	sub	sp, #24
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa0:	f7ff fee0 	bl	8003864 <__NVIC_GetPriorityGrouping>
 8003aa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	6978      	ldr	r0, [r7, #20]
 8003aac:	f7ff ff90 	bl	80039d0 <NVIC_EncodePriority>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff5f 	bl	800397c <__NVIC_SetPriority>
}
 8003abe:	bf00      	nop
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fed3 	bl	8003880 <__NVIC_EnableIRQ>
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	4603      	mov	r3, r0
 8003aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fee3 	bl	80038bc <__NVIC_DisableIRQ>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ff96 	bl	8003a38 <SysTick_Config>
 8003b0c:	4603      	mov	r3, r0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff feed 	bl	8003904 <__NVIC_SetPendingIRQ>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	4603      	mov	r3, r0
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fefd 	bl	8003940 <__NVIC_ClearPendingIRQ>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e08e      	b.n	8003c80 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_DMA_Init+0x138>)
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d80f      	bhi.n	8003b8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b45      	ldr	r3, [pc, #276]	@ (8003c8c <HAL_DMA_Init+0x13c>)
 8003b76:	4413      	add	r3, r2
 8003b78:	4a45      	ldr	r2, [pc, #276]	@ (8003c90 <HAL_DMA_Init+0x140>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	009a      	lsls	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a42      	ldr	r2, [pc, #264]	@ (8003c94 <HAL_DMA_Init+0x144>)
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b8c:	e00e      	b.n	8003bac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b40      	ldr	r3, [pc, #256]	@ (8003c98 <HAL_DMA_Init+0x148>)
 8003b96:	4413      	add	r3, r2
 8003b98:	4a3d      	ldr	r2, [pc, #244]	@ (8003c90 <HAL_DMA_Init+0x140>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	009a      	lsls	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8003c9c <HAL_DMA_Init+0x14c>)
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fb18 	bl	8004234 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c0c:	d102      	bne.n	8003c14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003c20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d010      	beq.n	8003c56 <HAL_DMA_Init+0x106>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d80c      	bhi.n	8003c56 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fb37 	bl	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	e008      	b.n	8003c68 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40020407 	.word	0x40020407
 8003c8c:	bffdfff8 	.word	0xbffdfff8
 8003c90:	cccccccd 	.word	0xcccccccd
 8003c94:	40020000 	.word	0x40020000
 8003c98:	bffdfbf8 	.word	0xbffdfbf8
 8003c9c:	40020400 	.word	0x40020400

08003ca0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e07b      	b.n	8003daa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8003db4 <HAL_DMA_DeInit+0x114>)
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d80f      	bhi.n	8003cee <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b38      	ldr	r3, [pc, #224]	@ (8003db8 <HAL_DMA_DeInit+0x118>)
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4a38      	ldr	r2, [pc, #224]	@ (8003dbc <HAL_DMA_DeInit+0x11c>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	009a      	lsls	r2, r3, #2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a35      	ldr	r2, [pc, #212]	@ (8003dc0 <HAL_DMA_DeInit+0x120>)
 8003cea:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cec:	e00e      	b.n	8003d0c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b33      	ldr	r3, [pc, #204]	@ (8003dc4 <HAL_DMA_DeInit+0x124>)
 8003cf6:	4413      	add	r3, r2
 8003cf8:	4a30      	ldr	r2, [pc, #192]	@ (8003dbc <HAL_DMA_DeInit+0x11c>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	009a      	lsls	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a2f      	ldr	r2, [pc, #188]	@ (8003dc8 <HAL_DMA_DeInit+0x128>)
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d18:	f003 021c 	and.w	r2, r3, #28
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f202 	lsl.w	r2, r1, r2
 8003d26:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fa83 	bl	8004234 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00f      	beq.n	8003d68 <HAL_DMA_DeInit+0xc8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d80b      	bhi.n	8003d68 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 faad 	bl	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d66:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40020407 	.word	0x40020407
 8003db8:	bffdfff8 	.word	0xbffdfff8
 8003dbc:	cccccccd 	.word	0xcccccccd
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	bffdfbf8 	.word	0xbffdfbf8
 8003dc8:	40020400 	.word	0x40020400

08003dcc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_DMA_Start_IT+0x20>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e066      	b.n	8003eba <HAL_DMA_Start_IT+0xee>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d155      	bne.n	8003eac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f9c7 	bl	80041b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 020e 	orr.w	r2, r2, #14
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e00f      	b.n	8003e64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0204 	bic.w	r2, r2, #4
 8003e52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 020a 	orr.w	r2, r2, #10
 8003e62:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e80:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e005      	b.n	8003eb8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e04f      	b.n	8003f74 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d008      	beq.n	8003ef2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e040      	b.n	8003f74 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 020e 	bic.w	r2, r2, #14
 8003f00:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f003 021c 	and.w	r2, r3, #28
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	2101      	movs	r1, #1
 8003f30:	fa01 f202 	lsl.w	r2, r1, r2
 8003f34:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f3e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00c      	beq.n	8003f62 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f60:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d005      	beq.n	8003fa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e047      	b.n	8004034 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 020e 	bic.w	r2, r2, #14
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd8:	f003 021c 	and.w	r2, r3, #28
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ff0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00c      	beq.n	8004014 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004004:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004008:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004012:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
    }
  }
  return status;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	f003 031c 	and.w	r3, r3, #28
 800405e:	2204      	movs	r2, #4
 8004060:	409a      	lsls	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d026      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x7a>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d021      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d107      	bne.n	8004092 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0204 	bic.w	r2, r2, #4
 8004090:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	f003 021c 	and.w	r2, r3, #28
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	2104      	movs	r1, #4
 80040a0:	fa01 f202 	lsl.w	r2, r1, r2
 80040a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d071      	beq.n	8004192 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040b6:	e06c      	b.n	8004192 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040bc:	f003 031c 	and.w	r3, r3, #28
 80040c0:	2202      	movs	r2, #2
 80040c2:	409a      	lsls	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02e      	beq.n	800412a <HAL_DMA_IRQHandler+0xec>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d029      	beq.n	800412a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 020a 	bic.w	r2, r2, #10
 80040f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004100:	f003 021c 	and.w	r2, r3, #28
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	2102      	movs	r1, #2
 800410a:	fa01 f202 	lsl.w	r2, r1, r2
 800410e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d038      	beq.n	8004192 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004128:	e033      	b.n	8004192 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f003 031c 	and.w	r3, r3, #28
 8004132:	2208      	movs	r2, #8
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d02a      	beq.n	8004194 <HAL_DMA_IRQHandler+0x156>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d025      	beq.n	8004194 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 020e 	bic.w	r2, r2, #14
 8004156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415c:	f003 021c 	and.w	r2, r3, #28
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f202 	lsl.w	r2, r1, r2
 800416a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004192:	bf00      	nop
 8004194:	bf00      	nop
}
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041aa:	b2db      	uxtb	r3, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	f003 021c 	and.w	r2, r3, #28
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	2101      	movs	r1, #1
 80041f0:	fa01 f202 	lsl.w	r2, r1, r2
 80041f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b10      	cmp	r3, #16
 8004204:	d108      	bne.n	8004218 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004216:	e007      	b.n	8004228 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	60da      	str	r2, [r3, #12]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	4b17      	ldr	r3, [pc, #92]	@ (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004244:	429a      	cmp	r2, r3
 8004246:	d80a      	bhi.n	800425e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004254:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6493      	str	r3, [r2, #72]	@ 0x48
 800425c:	e007      	b.n	800426e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	009a      	lsls	r2, r3, #2
 8004266:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3b08      	subs	r3, #8
 8004276:	4a0c      	ldr	r2, [pc, #48]	@ (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a0a      	ldr	r2, [pc, #40]	@ (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004284:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2201      	movs	r2, #1
 800428e:	409a      	lsls	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40020407 	.word	0x40020407
 80042a4:	4002081c 	.word	0x4002081c
 80042a8:	cccccccd 	.word	0xcccccccd
 80042ac:	40020880 	.word	0x40020880

080042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a09      	ldr	r2, [pc, #36]	@ (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80042d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3b01      	subs	r3, #1
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2201      	movs	r2, #1
 80042e0:	409a      	lsls	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	1000823f 	.word	0x1000823f
 80042f8:	40020940 	.word	0x40020940

080042fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800430a:	e14c      	b.n	80045a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	2101      	movs	r1, #1
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 813e 	beq.w	80045a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d005      	beq.n	800433c <HAL_GPIO_Init+0x40>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d130      	bne.n	800439e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004372:	2201      	movs	r2, #1
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0201 	and.w	r2, r3, #1
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d017      	beq.n	80043da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d123      	bne.n	800442e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	08da      	lsrs	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3208      	adds	r2, #8
 80043ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	220f      	movs	r2, #15
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	08da      	lsrs	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3208      	adds	r2, #8
 8004428:	6939      	ldr	r1, [r7, #16]
 800442a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2203      	movs	r2, #3
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0203 	and.w	r2, r3, #3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8098 	beq.w	80045a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004470:	4a54      	ldr	r2, [pc, #336]	@ (80045c4 <HAL_GPIO_Init+0x2c8>)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	3302      	adds	r3, #2
 8004478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	220f      	movs	r2, #15
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800449a:	d019      	beq.n	80044d0 <HAL_GPIO_Init+0x1d4>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a4a      	ldr	r2, [pc, #296]	@ (80045c8 <HAL_GPIO_Init+0x2cc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d013      	beq.n	80044cc <HAL_GPIO_Init+0x1d0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a49      	ldr	r2, [pc, #292]	@ (80045cc <HAL_GPIO_Init+0x2d0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00d      	beq.n	80044c8 <HAL_GPIO_Init+0x1cc>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a48      	ldr	r2, [pc, #288]	@ (80045d0 <HAL_GPIO_Init+0x2d4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <HAL_GPIO_Init+0x1c8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a47      	ldr	r2, [pc, #284]	@ (80045d4 <HAL_GPIO_Init+0x2d8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_GPIO_Init+0x1c4>
 80044bc:	2304      	movs	r3, #4
 80044be:	e008      	b.n	80044d2 <HAL_GPIO_Init+0x1d6>
 80044c0:	2307      	movs	r3, #7
 80044c2:	e006      	b.n	80044d2 <HAL_GPIO_Init+0x1d6>
 80044c4:	2303      	movs	r3, #3
 80044c6:	e004      	b.n	80044d2 <HAL_GPIO_Init+0x1d6>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e002      	b.n	80044d2 <HAL_GPIO_Init+0x1d6>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_GPIO_Init+0x1d6>
 80044d0:	2300      	movs	r3, #0
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	f002 0203 	and.w	r2, r2, #3
 80044d8:	0092      	lsls	r2, r2, #2
 80044da:	4093      	lsls	r3, r2
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044e2:	4938      	ldr	r1, [pc, #224]	@ (80045c4 <HAL_GPIO_Init+0x2c8>)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	3302      	adds	r3, #2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044f0:	4b39      	ldr	r3, [pc, #228]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4013      	ands	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004514:	4a30      	ldr	r2, [pc, #192]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800451a:	4b2f      	ldr	r3, [pc, #188]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	43db      	mvns	r3, r3
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4013      	ands	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800453e:	4a26      	ldr	r2, [pc, #152]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004544:	4b24      	ldr	r3, [pc, #144]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 8004546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800454a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	43db      	mvns	r3, r3
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4013      	ands	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800456a:	4a1b      	ldr	r2, [pc, #108]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004572:	4b19      	ldr	r3, [pc, #100]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 8004574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004598:	4a0f      	ldr	r2, [pc, #60]	@ (80045d8 <HAL_GPIO_Init+0x2dc>)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3301      	adds	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f aeab 	bne.w	800430c <HAL_GPIO_Init+0x10>
  }
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40010000 	.word	0x40010000
 80045c8:	48000400 	.word	0x48000400
 80045cc:	48000800 	.word	0x48000800
 80045d0:	48000c00 	.word	0x48000c00
 80045d4:	48001000 	.word	0x48001000
 80045d8:	58000800 	.word	0x58000800

080045dc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80045ea:	e0bb      	b.n	8004764 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80045ec:	2201      	movs	r2, #1
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80ae 	beq.w	800475e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004602:	4a5f      	ldr	r2, [pc, #380]	@ (8004780 <HAL_GPIO_DeInit+0x1a4>)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	089b      	lsrs	r3, r3, #2
 8004608:	3302      	adds	r3, #2
 800460a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	220f      	movs	r2, #15
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800462a:	d019      	beq.n	8004660 <HAL_GPIO_DeInit+0x84>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a55      	ldr	r2, [pc, #340]	@ (8004784 <HAL_GPIO_DeInit+0x1a8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <HAL_GPIO_DeInit+0x80>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a54      	ldr	r2, [pc, #336]	@ (8004788 <HAL_GPIO_DeInit+0x1ac>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00d      	beq.n	8004658 <HAL_GPIO_DeInit+0x7c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a53      	ldr	r2, [pc, #332]	@ (800478c <HAL_GPIO_DeInit+0x1b0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d007      	beq.n	8004654 <HAL_GPIO_DeInit+0x78>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a52      	ldr	r2, [pc, #328]	@ (8004790 <HAL_GPIO_DeInit+0x1b4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <HAL_GPIO_DeInit+0x74>
 800464c:	2304      	movs	r3, #4
 800464e:	e008      	b.n	8004662 <HAL_GPIO_DeInit+0x86>
 8004650:	2307      	movs	r3, #7
 8004652:	e006      	b.n	8004662 <HAL_GPIO_DeInit+0x86>
 8004654:	2303      	movs	r3, #3
 8004656:	e004      	b.n	8004662 <HAL_GPIO_DeInit+0x86>
 8004658:	2302      	movs	r3, #2
 800465a:	e002      	b.n	8004662 <HAL_GPIO_DeInit+0x86>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_GPIO_DeInit+0x86>
 8004660:	2300      	movs	r3, #0
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	f002 0203 	and.w	r2, r2, #3
 8004668:	0092      	lsls	r2, r2, #2
 800466a:	4093      	lsls	r3, r2
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	429a      	cmp	r2, r3
 8004670:	d136      	bne.n	80046e0 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004672:	4b48      	ldr	r3, [pc, #288]	@ (8004794 <HAL_GPIO_DeInit+0x1b8>)
 8004674:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	43db      	mvns	r3, r3
 800467c:	4945      	ldr	r1, [pc, #276]	@ (8004794 <HAL_GPIO_DeInit+0x1b8>)
 800467e:	4013      	ands	r3, r2
 8004680:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004684:	4b43      	ldr	r3, [pc, #268]	@ (8004794 <HAL_GPIO_DeInit+0x1b8>)
 8004686:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	43db      	mvns	r3, r3
 800468e:	4941      	ldr	r1, [pc, #260]	@ (8004794 <HAL_GPIO_DeInit+0x1b8>)
 8004690:	4013      	ands	r3, r2
 8004692:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004696:	4b3f      	ldr	r3, [pc, #252]	@ (8004794 <HAL_GPIO_DeInit+0x1b8>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	43db      	mvns	r3, r3
 800469e:	493d      	ldr	r1, [pc, #244]	@ (8004794 <HAL_GPIO_DeInit+0x1b8>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80046a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004794 <HAL_GPIO_DeInit+0x1b8>)
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	4939      	ldr	r1, [pc, #228]	@ (8004794 <HAL_GPIO_DeInit+0x1b8>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	220f      	movs	r2, #15
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80046c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004780 <HAL_GPIO_DeInit+0x1a4>)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	3302      	adds	r3, #2
 80046ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	43da      	mvns	r2, r3
 80046d2:	482b      	ldr	r0, [pc, #172]	@ (8004780 <HAL_GPIO_DeInit+0x1a4>)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	400a      	ands	r2, r1
 80046da:	3302      	adds	r3, #2
 80046dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2103      	movs	r1, #3
 80046ea:	fa01 f303 	lsl.w	r3, r1, r3
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	08da      	lsrs	r2, r3, #3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3208      	adds	r2, #8
 80046fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	220f      	movs	r2, #15
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	08d2      	lsrs	r2, r2, #3
 8004714:	4019      	ands	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3208      	adds	r2, #8
 800471a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	2103      	movs	r1, #3
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	401a      	ands	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	2101      	movs	r1, #1
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fa01 f303 	lsl.w	r3, r1, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	2103      	movs	r1, #3
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	401a      	ands	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	3301      	adds	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	f47f af3d 	bne.w	80045ec <HAL_GPIO_DeInit+0x10>
  }
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40010000 	.word	0x40010000
 8004784:	48000400 	.word	0x48000400
 8004788:	48000800 	.word	0x48000800
 800478c:	48000c00 	.word	0x48000c00
 8004790:	48001000 	.word	0x48001000
 8004794:	58000800 	.word	0x58000800

08004798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
 80047a4:	4613      	mov	r3, r2
 80047a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047a8:	787b      	ldrb	r3, [r7, #1]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047ae:	887a      	ldrh	r2, [r7, #2]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047b4:	e002      	b.n	80047bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047b6:	887a      	ldrh	r2, [r7, #2]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80047ce:	4b0a      	ldr	r3, [pc, #40]	@ (80047f8 <HAL_HSEM_IRQHandler+0x30>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80047d4:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <HAL_HSEM_IRQHandler+0x30>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	43db      	mvns	r3, r3
 80047dc:	4906      	ldr	r1, [pc, #24]	@ (80047f8 <HAL_HSEM_IRQHandler+0x30>)
 80047de:	4013      	ands	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80047e2:	4a05      	ldr	r2, [pc, #20]	@ (80047f8 <HAL_HSEM_IRQHandler+0x30>)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f807 	bl	80047fc <HAL_HSEM_FreeCallback>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	58001500 	.word	0x58001500

080047fc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e08d      	b.n	800493e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fe fb4c 	bl	8002ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	@ 0x24
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004860:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004870:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d107      	bne.n	800488a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	e006      	b.n	8004898 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004896:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d108      	bne.n	80048b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	e007      	b.n	80048c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80048d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69d9      	ldr	r1, [r3, #28]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e021      	b.n	800499c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	@ 0x24
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fe fb61 	bl	8003038 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	461a      	mov	r2, r3
 80049b0:	460b      	mov	r3, r1
 80049b2:	817b      	strh	r3, [r7, #10]
 80049b4:	4613      	mov	r3, r2
 80049b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	f040 80fd 	bne.w	8004bc0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_I2C_Master_Transmit+0x30>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e0f6      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x21e>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049dc:	f7fe feee 	bl	80037bc <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2319      	movs	r3, #25
 80049e8:	2201      	movs	r2, #1
 80049ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 ff87 	bl	8005902 <I2C_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0e1      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2221      	movs	r2, #33	@ 0x21
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2210      	movs	r2, #16
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	893a      	ldrh	r2, [r7, #8]
 8004a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2bff      	cmp	r3, #255	@ 0xff
 8004a2e:	d906      	bls.n	8004a3e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	22ff      	movs	r2, #255	@ 0xff
 8004a34:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004a36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e007      	b.n	8004a4e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004a48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a4c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d024      	beq.n	8004aa0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	8979      	ldrh	r1, [r7, #10]
 8004a92:	4b4e      	ldr	r3, [pc, #312]	@ (8004bcc <HAL_I2C_Master_Transmit+0x228>)
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f001 f8f5 	bl	8005c88 <I2C_TransferConfig>
 8004a9e:	e066      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	8979      	ldrh	r1, [r7, #10]
 8004aa8:	4b48      	ldr	r3, [pc, #288]	@ (8004bcc <HAL_I2C_Master_Transmit+0x228>)
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f001 f8ea 	bl	8005c88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004ab4:	e05b      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	6a39      	ldr	r1, [r7, #32]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 ff7a 	bl	80059b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07b      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d034      	beq.n	8004b6e <HAL_I2C_Master_Transmit+0x1ca>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d130      	bne.n	8004b6e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	2200      	movs	r2, #0
 8004b14:	2180      	movs	r1, #128	@ 0x80
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fef3 	bl	8005902 <I2C_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e04d      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2bff      	cmp	r3, #255	@ 0xff
 8004b2e:	d90e      	bls.n	8004b4e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	22ff      	movs	r2, #255	@ 0xff
 8004b34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	8979      	ldrh	r1, [r7, #10]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f001 f89e 	bl	8005c88 <I2C_TransferConfig>
 8004b4c:	e00f      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	8979      	ldrh	r1, [r7, #10]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f001 f88d 	bl	8005c88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d19e      	bne.n	8004ab6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	6a39      	ldr	r1, [r7, #32]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 ff60 	bl	8005a42 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e01a      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2220      	movs	r2, #32
 8004b92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6859      	ldr	r1, [r3, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <HAL_I2C_Master_Transmit+0x22c>)
 8004ba0:	400b      	ands	r3, r1
 8004ba2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
  }
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	80002000 	.word	0x80002000
 8004bd0:	fe00e800 	.word	0xfe00e800

08004bd4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	@ 0x28
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	460b      	mov	r3, r1
 8004be2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	f040 80d6 	bne.w	8004da2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c04:	d101      	bne.n	8004c0a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
 8004c08:	e0cc      	b.n	8004da4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_I2C_IsDeviceReady+0x44>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e0c5      	b.n	8004da4 <HAL_I2C_IsDeviceReady+0x1d0>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2224      	movs	r2, #36	@ 0x24
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d107      	bne.n	8004c46 <HAL_I2C_IsDeviceReady+0x72>
 8004c36:	897b      	ldrh	r3, [r7, #10]
 8004c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004c44:	e006      	b.n	8004c54 <HAL_I2C_IsDeviceReady+0x80>
 8004c46:	897b      	ldrh	r3, [r7, #10]
 8004c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c50:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fe fdaf 	bl	80037bc <HAL_GetTick>
 8004c5e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	bf0c      	ite	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	2300      	movne	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c8c:	e034      	b.n	8004cf8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d01a      	beq.n	8004ccc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fe fd91 	bl	80037bc <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <HAL_I2C_IsDeviceReady+0xd8>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10f      	bne.n	8004ccc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e06b      	b.n	8004da4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	bf0c      	ite	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	2300      	movne	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004cf8:	7ffb      	ldrb	r3, [r7, #31]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d102      	bne.n	8004d04 <HAL_I2C_IsDeviceReady+0x130>
 8004cfe:	7fbb      	ldrb	r3, [r7, #30]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0c4      	beq.n	8004c8e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d01a      	beq.n	8004d48 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fdf0 	bl	8005902 <I2C_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e03b      	b.n	8004da4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2220      	movs	r2, #32
 8004d32:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e02d      	b.n	8004da4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2120      	movs	r1, #32
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fdd5 	bl	8005902 <I2C_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e020      	b.n	8004da4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2210      	movs	r2, #16
 8004d68:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	3301      	adds	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	f63f af56 	bhi.w	8004c2e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8e:	f043 0220 	orr.w	r2, r3, #32
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
  }
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
  }
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00f      	beq.n	8004e22 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e10:	f043 0201 	orr.w	r2, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e20:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00f      	beq.n	8004e4c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3a:	f043 0208 	orr.w	r2, r3, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e4a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00f      	beq.n	8004e76 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e64:	f043 0202 	orr.w	r2, r3, #2
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e74:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 030b 	and.w	r3, r3, #11
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fbe1 	bl	8005650 <I2C_ITError>
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	70fb      	strb	r3, [r7, #3]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <I2C_Slave_ISR_IT+0x24>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e0e2      	b.n	8005118 <I2C_Slave_ISR_IT+0x1ea>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f6e:	6939      	ldr	r1, [r7, #16]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f9b5 	bl	80052e0 <I2C_ITSlaveCplt>
 8004f76:	e0ca      	b.n	800510e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d04b      	beq.n	800501a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d046      	beq.n	800501a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d128      	bne.n	8004fe8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b28      	cmp	r3, #40	@ 0x28
 8004fa0:	d108      	bne.n	8004fb4 <I2C_Slave_ISR_IT+0x86>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fa8:	d104      	bne.n	8004fb4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004faa:	6939      	ldr	r1, [r7, #16]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fafb 	bl	80055a8 <I2C_ITListenCplt>
 8004fb2:	e031      	b.n	8005018 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b29      	cmp	r3, #41	@ 0x29
 8004fbe:	d10e      	bne.n	8004fde <I2C_Slave_ISR_IT+0xb0>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fc6:	d00a      	beq.n	8004fde <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2210      	movs	r2, #16
 8004fce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fc54 	bl	800587e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f926 	bl	8005228 <I2C_ITSlaveSeqCplt>
 8004fdc:	e01c      	b.n	8005018 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004fe6:	e08f      	b.n	8005108 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2210      	movs	r2, #16
 8004fee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff4:	f043 0204 	orr.w	r2, r3, #4
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <I2C_Slave_ISR_IT+0xdc>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005008:	d17e      	bne.n	8005108 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	4619      	mov	r1, r3
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 fb1d 	bl	8005650 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005016:	e077      	b.n	8005108 <I2C_Slave_ISR_IT+0x1da>
 8005018:	e076      	b.n	8005108 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02f      	beq.n	8005084 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800502a:	2b00      	cmp	r3, #0
 800502c:	d02a      	beq.n	8005084 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d018      	beq.n	800506a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d14b      	bne.n	800510c <I2C_Slave_ISR_IT+0x1de>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800507a:	d047      	beq.n	800510c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f8d3 	bl	8005228 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005082:	e043      	b.n	800510c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005098:	6939      	ldr	r1, [r7, #16]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f840 	bl	8005120 <I2C_ITAddrCplt>
 80050a0:	e035      	b.n	800510e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d030      	beq.n	800510e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d02b      	beq.n	800510e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d018      	beq.n	80050f2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	781a      	ldrb	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 80050f0:	e00d      	b.n	800510e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050f8:	d002      	beq.n	8005100 <I2C_Slave_ISR_IT+0x1d2>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f891 	bl	8005228 <I2C_ITSlaveSeqCplt>
 8005106:	e002      	b.n	800510e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005108:	bf00      	nop
 800510a:	e000      	b.n	800510e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800510c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005130:	b2db      	uxtb	r3, r3
 8005132:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005136:	2b28      	cmp	r3, #40	@ 0x28
 8005138:	d16a      	bne.n	8005210 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	b29b      	uxth	r3, r3
 8005154:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005158:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005166:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005174:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d138      	bne.n	80051f0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800517e:	897b      	ldrh	r3, [r7, #10]
 8005180:	09db      	lsrs	r3, r3, #7
 8005182:	b29a      	uxth	r2, r3
 8005184:	89bb      	ldrh	r3, [r7, #12]
 8005186:	4053      	eors	r3, r2
 8005188:	b29b      	uxth	r3, r3
 800518a:	f003 0306 	and.w	r3, r3, #6
 800518e:	2b00      	cmp	r3, #0
 8005190:	d11c      	bne.n	80051cc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005192:	897b      	ldrh	r3, [r7, #10]
 8005194:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d13b      	bne.n	8005220 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2208      	movs	r2, #8
 80051b4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051be:	89ba      	ldrh	r2, [r7, #12]
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff fe7a 	bl	8004ebe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051ca:	e029      	b.n	8005220 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80051cc:	893b      	ldrh	r3, [r7, #8]
 80051ce:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80051d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fd89 	bl	8005cec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051e2:	89ba      	ldrh	r2, [r7, #12]
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fe68 	bl	8004ebe <HAL_I2C_AddrCallback>
}
 80051ee:	e017      	b.n	8005220 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80051f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fd79 	bl	8005cec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005202:	89ba      	ldrh	r2, [r7, #12]
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fe58 	bl	8004ebe <HAL_I2C_AddrCallback>
}
 800520e:	e007      	b.n	8005220 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2208      	movs	r2, #8
 8005216:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d008      	beq.n	800525c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e00c      	b.n	8005276 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005274:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b29      	cmp	r3, #41	@ 0x29
 8005280:	d112      	bne.n	80052a8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2228      	movs	r2, #40	@ 0x28
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2221      	movs	r2, #33	@ 0x21
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005290:	2101      	movs	r1, #1
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fd2a 	bl	8005cec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff fdf8 	bl	8004e96 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80052a6:	e017      	b.n	80052d8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80052b2:	d111      	bne.n	80052d8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2228      	movs	r2, #40	@ 0x28
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2222      	movs	r2, #34	@ 0x22
 80052c0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052c2:	2102      	movs	r1, #2
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fd11 	bl	8005cec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff fde9 	bl	8004eaa <HAL_I2C_SlaveRxCpltCallback>
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005302:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2220      	movs	r2, #32
 800530a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800530c:	7afb      	ldrb	r3, [r7, #11]
 800530e:	2b21      	cmp	r3, #33	@ 0x21
 8005310:	d002      	beq.n	8005318 <I2C_ITSlaveCplt+0x38>
 8005312:	7afb      	ldrb	r3, [r7, #11]
 8005314:	2b29      	cmp	r3, #41	@ 0x29
 8005316:	d108      	bne.n	800532a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005318:	f248 0101 	movw	r1, #32769	@ 0x8001
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fce5 	bl	8005cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2221      	movs	r2, #33	@ 0x21
 8005326:	631a      	str	r2, [r3, #48]	@ 0x30
 8005328:	e019      	b.n	800535e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800532a:	7afb      	ldrb	r3, [r7, #11]
 800532c:	2b22      	cmp	r3, #34	@ 0x22
 800532e:	d002      	beq.n	8005336 <I2C_ITSlaveCplt+0x56>
 8005330:	7afb      	ldrb	r3, [r7, #11]
 8005332:	2b2a      	cmp	r3, #42	@ 0x2a
 8005334:	d108      	bne.n	8005348 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005336:	f248 0102 	movw	r1, #32770	@ 0x8002
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fcd6 	bl	8005cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2222      	movs	r2, #34	@ 0x22
 8005344:	631a      	str	r2, [r3, #48]	@ 0x30
 8005346:	e00a      	b.n	800535e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005348:	7afb      	ldrb	r3, [r7, #11]
 800534a:	2b28      	cmp	r3, #40	@ 0x28
 800534c:	d107      	bne.n	800535e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800534e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fcca 	bl	8005cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800536c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6859      	ldr	r1, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4b89      	ldr	r3, [pc, #548]	@ (80055a0 <I2C_ITSlaveCplt+0x2c0>)
 800537a:	400b      	ands	r3, r1
 800537c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa7d 	bl	800587e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d013      	beq.n	80053b6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800539c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01f      	beq.n	80053e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053b4:	e017      	b.n	80053e6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d012      	beq.n	80053e6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d020      	beq.n	8005432 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 0304 	bic.w	r3, r3, #4
 80053f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005440:	f043 0204 	orr.w	r2, r3, #4
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	d049      	beq.n	80054e6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005458:	2b00      	cmp	r3, #0
 800545a:	d044      	beq.n	80054e6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d128      	bne.n	80054b8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b28      	cmp	r3, #40	@ 0x28
 8005470:	d108      	bne.n	8005484 <I2C_ITSlaveCplt+0x1a4>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005478:	d104      	bne.n	8005484 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800547a:	6979      	ldr	r1, [r7, #20]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f893 	bl	80055a8 <I2C_ITListenCplt>
 8005482:	e030      	b.n	80054e6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b29      	cmp	r3, #41	@ 0x29
 800548e:	d10e      	bne.n	80054ae <I2C_ITSlaveCplt+0x1ce>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005496:	d00a      	beq.n	80054ae <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2210      	movs	r2, #16
 800549e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f9ec 	bl	800587e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff febe 	bl	8005228 <I2C_ITSlaveSeqCplt>
 80054ac:	e01b      	b.n	80054e6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2210      	movs	r2, #16
 80054b4:	61da      	str	r2, [r3, #28]
 80054b6:	e016      	b.n	80054e6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2210      	movs	r2, #16
 80054be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c4:	f043 0204 	orr.w	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <I2C_ITSlaveCplt+0x1fa>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054d8:	d105      	bne.n	80054e6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f8b5 	bl	8005650 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d010      	beq.n	800551e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8a4 	bl	8005650 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b28      	cmp	r3, #40	@ 0x28
 8005512:	d141      	bne.n	8005598 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005514:	6979      	ldr	r1, [r7, #20]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f846 	bl	80055a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800551c:	e03c      	b.n	8005598 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005526:	d014      	beq.n	8005552 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fe7d 	bl	8005228 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1c      	ldr	r2, [pc, #112]	@ (80055a4 <I2C_ITSlaveCplt+0x2c4>)
 8005532:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff fcc5 	bl	8004eda <HAL_I2C_ListenCpltCallback>
}
 8005550:	e022      	b.n	8005598 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b22      	cmp	r3, #34	@ 0x22
 800555c:	d10e      	bne.n	800557c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff fc98 	bl	8004eaa <HAL_I2C_SlaveRxCpltCallback>
}
 800557a:	e00d      	b.n	8005598 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff fc7f 	bl	8004e96 <HAL_I2C_SlaveTxCpltCallback>
}
 8005598:	bf00      	nop
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	fe00e800 	.word	0xfe00e800
 80055a4:	ffff0000 	.word	0xffff0000

080055a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a25      	ldr	r2, [pc, #148]	@ (800564c <I2C_ITListenCplt+0xa4>)
 80055b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d022      	beq.n	8005624 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d012      	beq.n	8005624 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561c:	f043 0204 	orr.w	r2, r3, #4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005624:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fb5f 	bl	8005cec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2210      	movs	r2, #16
 8005634:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fc4b 	bl	8004eda <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	ffff0000 	.word	0xffff0000

08005650 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005660:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a6d      	ldr	r2, [pc, #436]	@ (8005824 <I2C_ITError+0x1d4>)
 800566e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b28      	cmp	r3, #40	@ 0x28
 8005686:	d005      	beq.n	8005694 <I2C_ITError+0x44>
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b29      	cmp	r3, #41	@ 0x29
 800568c:	d002      	beq.n	8005694 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b2a      	cmp	r3, #42	@ 0x2a
 8005692:	d10b      	bne.n	80056ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005694:	2103      	movs	r1, #3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb28 	bl	8005cec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2228      	movs	r2, #40	@ 0x28
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a60      	ldr	r2, [pc, #384]	@ (8005828 <I2C_ITError+0x1d8>)
 80056a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80056aa:	e030      	b.n	800570e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fb1b 	bl	8005cec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f8e1 	bl	800587e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b60      	cmp	r3, #96	@ 0x60
 80056c6:	d01f      	beq.n	8005708 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d114      	bne.n	8005708 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d109      	bne.n	8005700 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2210      	movs	r2, #16
 80056f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	f043 0204 	orr.w	r2, r3, #4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2220      	movs	r2, #32
 8005706:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	2b00      	cmp	r3, #0
 800571a:	d039      	beq.n	8005790 <I2C_ITError+0x140>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b11      	cmp	r3, #17
 8005720:	d002      	beq.n	8005728 <I2C_ITError+0xd8>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b21      	cmp	r3, #33	@ 0x21
 8005726:	d133      	bne.n	8005790 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005736:	d107      	bne.n	8005748 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005746:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe fd25 	bl	800419c <HAL_DMA_GetState>
 8005752:	4603      	mov	r3, r0
 8005754:	2b01      	cmp	r3, #1
 8005756:	d017      	beq.n	8005788 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575c:	4a33      	ldr	r2, [pc, #204]	@ (800582c <I2C_ITError+0x1dc>)
 800575e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fc07 	bl	8003f80 <HAL_DMA_Abort_IT>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d04d      	beq.n	8005814 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005782:	4610      	mov	r0, r2
 8005784:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005786:	e045      	b.n	8005814 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f851 	bl	8005830 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800578e:	e041      	b.n	8005814 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d039      	beq.n	800580c <I2C_ITError+0x1bc>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b12      	cmp	r3, #18
 800579c:	d002      	beq.n	80057a4 <I2C_ITError+0x154>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b22      	cmp	r3, #34	@ 0x22
 80057a2:	d133      	bne.n	800580c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b2:	d107      	bne.n	80057c4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe fce7 	bl	800419c <HAL_DMA_GetState>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d017      	beq.n	8005804 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d8:	4a14      	ldr	r2, [pc, #80]	@ (800582c <I2C_ITError+0x1dc>)
 80057da:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe fbc9 	bl	8003f80 <HAL_DMA_Abort_IT>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d011      	beq.n	8005818 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057fe:	4610      	mov	r0, r2
 8005800:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005802:	e009      	b.n	8005818 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f813 	bl	8005830 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800580a:	e005      	b.n	8005818 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f80f 	bl	8005830 <I2C_TreatErrorCallback>
  }
}
 8005812:	e002      	b.n	800581a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005814:	bf00      	nop
 8005816:	e000      	b.n	800581a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005818:	bf00      	nop
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	ffff0000 	.word	0xffff0000
 8005828:	08004f2f 	.word	0x08004f2f
 800582c:	080058c7 	.word	0x080058c7

08005830 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b60      	cmp	r3, #96	@ 0x60
 8005842:	d10e      	bne.n	8005862 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fb51 	bl	8004f02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005860:	e009      	b.n	8005876 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff fb3c 	bl	8004eee <HAL_I2C_ErrorCallback>
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b02      	cmp	r3, #2
 8005892:	d103      	bne.n	800589c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2200      	movs	r2, #0
 800589a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d007      	beq.n	80058ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	619a      	str	r2, [r3, #24]
  }
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e0:	2200      	movs	r2, #0
 80058e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f0:	2200      	movs	r2, #0
 80058f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff ff9b 	bl	8005830 <I2C_TreatErrorCallback>
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005912:	e03b      	b.n	800598c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f8d5 	bl	8005ac8 <I2C_IsErrorOccurred>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e041      	b.n	80059ac <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d02d      	beq.n	800598c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005930:	f7fd ff44 	bl	80037bc <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d302      	bcc.n	8005946 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d122      	bne.n	800598c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4013      	ands	r3, r2
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	429a      	cmp	r2, r3
 8005962:	d113      	bne.n	800598c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005968:	f043 0220 	orr.w	r2, r3, #32
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e00f      	b.n	80059ac <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d0b4      	beq.n	8005914 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059c0:	e033      	b.n	8005a2a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f87e 	bl	8005ac8 <I2C_IsErrorOccurred>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e031      	b.n	8005a3a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d025      	beq.n	8005a2a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fd feed 	bl	80037bc <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11a      	bne.n	8005a2a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d013      	beq.n	8005a2a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a06:	f043 0220 	orr.w	r2, r3, #32
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e007      	b.n	8005a3a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d1c4      	bne.n	80059c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a4e:	e02f      	b.n	8005ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f837 	bl	8005ac8 <I2C_IsErrorOccurred>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e02d      	b.n	8005ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a64:	f7fd feaa 	bl	80037bc <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d11a      	bne.n	8005ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d013      	beq.n	8005ab0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e007      	b.n	8005ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d1c8      	bne.n	8005a50 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	@ 0x28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d068      	beq.n	8005bc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2210      	movs	r2, #16
 8005afa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005afc:	e049      	b.n	8005b92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b04:	d045      	beq.n	8005b92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b06:	f7fd fe59 	bl	80037bc <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d302      	bcc.n	8005b1c <I2C_IsErrorOccurred+0x54>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d13a      	bne.n	8005b92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b3e:	d121      	bne.n	8005b84 <I2C_IsErrorOccurred+0xbc>
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b46:	d01d      	beq.n	8005b84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b48:	7cfb      	ldrb	r3, [r7, #19]
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d01a      	beq.n	8005b84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b5e:	f7fd fe2d 	bl	80037bc <HAL_GetTick>
 8005b62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b64:	e00e      	b.n	8005b84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b66:	f7fd fe29 	bl	80037bc <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b19      	cmp	r3, #25
 8005b72:	d907      	bls.n	8005b84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	f043 0320 	orr.w	r3, r3, #32
 8005b7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b82:	e006      	b.n	8005b92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d1e9      	bne.n	8005b66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d003      	beq.n	8005ba8 <I2C_IsErrorOccurred+0xe0>
 8005ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0aa      	beq.n	8005afe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d103      	bne.n	8005bb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	f043 0304 	orr.w	r3, r3, #4
 8005bbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f043 0308 	orr.w	r3, r3, #8
 8005c00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	f043 0302 	orr.w	r3, r3, #2
 8005c22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01c      	beq.n	8005c76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7ff fe1e 	bl	800587e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <I2C_IsErrorOccurred+0x1bc>)
 8005c4e:	400b      	ands	r3, r1
 8005c50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3728      	adds	r7, #40	@ 0x28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	fe00e800 	.word	0xfe00e800

08005c88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	817b      	strh	r3, [r7, #10]
 8005c96:	4613      	mov	r3, r2
 8005c98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c9a:	897b      	ldrh	r3, [r7, #10]
 8005c9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ca0:	7a7b      	ldrb	r3, [r7, #9]
 8005ca2:	041b      	lsls	r3, r3, #16
 8005ca4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ca8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005cb6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	0d5b      	lsrs	r3, r3, #21
 8005cc2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005cc6:	4b08      	ldr	r3, [pc, #32]	@ (8005ce8 <I2C_TransferConfig+0x60>)
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	43db      	mvns	r3, r3
 8005ccc:	ea02 0103 	and.w	r1, r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	03ff63ff 	.word	0x03ff63ff

08005cec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005cfc:	887b      	ldrh	r3, [r7, #2]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005d0c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d1a:	2b28      	cmp	r3, #40	@ 0x28
 8005d1c:	d003      	beq.n	8005d26 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005d24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005d26:	887b      	ldrh	r3, [r7, #2]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00f      	beq.n	8005d50 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005d36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d44:	2b28      	cmp	r3, #40	@ 0x28
 8005d46:	d003      	beq.n	8005d50 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005d4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005d50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da03      	bge.n	8005d60 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005d5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005d60:	887b      	ldrh	r3, [r7, #2]
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d103      	bne.n	8005d6e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005d6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d6e:	887b      	ldrh	r3, [r7, #2]
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d103      	bne.n	8005d7c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f043 0320 	orr.w	r3, r3, #32
 8005d7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005d7c:	887b      	ldrh	r3, [r7, #2]
 8005d7e:	2b40      	cmp	r3, #64	@ 0x40
 8005d80:	d103      	bne.n	8005d8a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d88:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	43da      	mvns	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	400a      	ands	r2, r1
 8005d9a:	601a      	str	r2, [r3, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d138      	bne.n	8005e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e032      	b.n	8005e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	@ 0x24
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d139      	bne.n	8005ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e033      	b.n	8005eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2224      	movs	r2, #36	@ 0x24
 8005e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e000      	b.n	8005eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ec8:	2302      	movs	r3, #2
  }
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01e      	beq.n	8005f28 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005eea:	4b13      	ldr	r3, [pc, #76]	@ (8005f38 <HAL_IPCC_Init+0x60>)
 8005eec:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fd f8cc 	bl	8003098 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005f00:	68b8      	ldr	r0, [r7, #8]
 8005f02:	f000 f85b 	bl	8005fbc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f82c 	bl	8005f70 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005f26:	e001      	b.n	8005f2c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	58000c00 	.word	0x58000c00

08005f3c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	4613      	mov	r3, r2
 8005f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e00f      	b.n	8005f9e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb4 <IPCC_SetDefaultCallbacks+0x44>)
 8005f88:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3306      	adds	r3, #6
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	4a08      	ldr	r2, [pc, #32]	@ (8005fb8 <IPCC_SetDefaultCallbacks+0x48>)
 8005f96:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d9ec      	bls.n	8005f7e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	08005f3d 	.word	0x08005f3d
 8005fb8:	08005f57 	.word	0x08005f57

08005fbc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005fd0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	223f      	movs	r2, #63	@ 0x3f
 8005fd6:	609a      	str	r2, [r3, #8]
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fe8:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a04      	ldr	r2, [pc, #16]	@ (8006000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	58000400 	.word	0x58000400

08006004 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006008:	4b04      	ldr	r3, [pc, #16]	@ (800601c <HAL_PWREx_GetVoltageRange+0x18>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	58000400 	.word	0x58000400

08006020 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800602e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006032:	d101      	bne.n	8006038 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <LL_RCC_HSE_Enable>:
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <LL_RCC_HSE_Disable>:
{
 8006062:	b480      	push	{r7}
 8006064:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006074:	6013      	str	r3, [r2, #0]
}
 8006076:	bf00      	nop
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <LL_RCC_HSE_IsReady>:
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006092:	d101      	bne.n	8006098 <LL_RCC_HSE_IsReady+0x18>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <LL_RCC_HSE_IsReady+0x1a>
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <LL_RCC_HSI_Enable>:
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80060a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060b6:	6013      	str	r3, [r2, #0]
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <LL_RCC_HSI_Disable>:
{
 80060c2:	b480      	push	{r7}
 80060c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80060c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d4:	6013      	str	r3, [r2, #0]
}
 80060d6:	bf00      	nop
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <LL_RCC_HSI_IsReady>:
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80060e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f2:	d101      	bne.n	80060f8 <LL_RCC_HSI_IsReady+0x18>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <LL_RCC_HSI_IsReady+0x1a>
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800610c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	061b      	lsls	r3, r3, #24
 800611a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800611e:	4313      	orrs	r3, r2
 8006120:	604b      	str	r3, [r1, #4]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <LL_RCC_HSI48_Enable>:
{
 800612e:	b480      	push	{r7}
 8006130:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006136:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800613a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006146:	bf00      	nop
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <LL_RCC_HSI48_Disable>:
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006158:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800615c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006168:	bf00      	nop
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <LL_RCC_HSI48_IsReady>:
{
 8006172:	b480      	push	{r7}
 8006174:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800617a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b02      	cmp	r3, #2
 8006184:	d101      	bne.n	800618a <LL_RCC_HSI48_IsReady+0x18>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <LL_RCC_HSI48_IsReady+0x1a>
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <LL_RCC_LSE_Enable>:
{
 8006196:	b480      	push	{r7}
 8006198:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800619a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80061ae:	bf00      	nop
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <LL_RCC_LSE_Disable>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <LL_RCC_LSE_EnableBypass>:
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061ea:	f043 0304 	orr.w	r3, r3, #4
 80061ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80061f2:	bf00      	nop
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <LL_RCC_LSE_DisableBypass>:
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006208:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800620c:	f023 0304 	bic.w	r3, r3, #4
 8006210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <LL_RCC_LSE_IsReady>:
{
 800621e:	b480      	push	{r7}
 8006220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d101      	bne.n	8006236 <LL_RCC_LSE_IsReady+0x18>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <LL_RCC_LSE_IsReady+0x1a>
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <LL_RCC_LSI1_Enable>:
{
 8006242:	b480      	push	{r7}
 8006244:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800624a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800624e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800625a:	bf00      	nop
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <LL_RCC_LSI1_Disable>:
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800627c:	bf00      	nop
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LL_RCC_LSI1_IsReady>:
{
 8006286:	b480      	push	{r7}
 8006288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800628a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800628e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b02      	cmp	r3, #2
 8006298:	d101      	bne.n	800629e <LL_RCC_LSI1_IsReady+0x18>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <LL_RCC_LSI1_IsReady+0x1a>
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <LL_RCC_LSI2_Enable>:
{
 80062aa:	b480      	push	{r7}
 80062ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80062ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062ba:	f043 0304 	orr.w	r3, r3, #4
 80062be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80062c2:	bf00      	nop
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <LL_RCC_LSI2_Disable>:
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80062d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062dc:	f023 0304 	bic.w	r3, r3, #4
 80062e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80062e4:	bf00      	nop
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <LL_RCC_LSI2_IsReady>:
{
 80062ee:	b480      	push	{r7}
 80062f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80062f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d101      	bne.n	8006306 <LL_RCC_LSI2_IsReady+0x18>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <LL_RCC_LSI2_IsReady+0x1a>
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <LL_RCC_LSI2_SetTrimming>:
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800631a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800631e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006322:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <LL_RCC_MSI_Enable>:
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	6013      	str	r3, [r2, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <LL_RCC_MSI_Disable>:
{
 800635e:	b480      	push	{r7}
 8006360:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	6013      	str	r3, [r2, #0]
}
 8006372:	bf00      	nop
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <LL_RCC_MSI_IsReady>:
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d101      	bne.n	8006392 <LL_RCC_MSI_IsReady+0x16>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <LL_RCC_MSI_IsReady+0x18>
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <LL_RCC_MSI_SetRange>:
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80063a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	600b      	str	r3, [r1, #0]
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <LL_RCC_MSI_GetRange>:
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80063cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2bb0      	cmp	r3, #176	@ 0xb0
 80063dc:	d901      	bls.n	80063e2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80063de:	23b0      	movs	r3, #176	@ 0xb0
 80063e0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80063e2:	687b      	ldr	r3, [r7, #4]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80063f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800640a:	4313      	orrs	r3, r2
 800640c:	604b      	str	r3, [r1, #4]
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <LL_RCC_SetSysClkSource>:
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f023 0203 	bic.w	r2, r3, #3
 800642c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <LL_RCC_GetSysClkSource>:
{
 8006442:	b480      	push	{r7}
 8006444:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 030c 	and.w	r3, r3, #12
}
 8006450:	4618      	mov	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <LL_RCC_SetAHBPrescaler>:
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800646c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4313      	orrs	r3, r2
 8006474:	608b      	str	r3, [r1, #8]
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800648a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800648e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006492:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006496:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <LL_RCC_SetAHB4Prescaler>:
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80064b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80064be:	f023 020f 	bic.w	r2, r3, #15
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <LL_RCC_SetAPB1Prescaler>:
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80064e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	608b      	str	r3, [r1, #8]
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <LL_RCC_SetAPB2Prescaler>:
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800650c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4313      	orrs	r3, r2
 800651e:	608b      	str	r3, [r1, #8]
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <LL_RCC_GetAHBPrescaler>:
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800653a:	4618      	mov	r0, r3
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <LL_RCC_GetAHB4Prescaler>:
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800654c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006556:	4618      	mov	r0, r3
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <LL_RCC_GetAPB1Prescaler>:
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800656e:	4618      	mov	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <LL_RCC_GetAPB2Prescaler>:
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800657c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006586:	4618      	mov	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800659e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065a2:	6013      	str	r3, [r2, #0]
}
 80065a4:	bf00      	nop
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80065ae:	b480      	push	{r7}
 80065b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80065b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065c0:	6013      	str	r3, [r2, #0]
}
 80065c2:	bf00      	nop
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80065d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065de:	d101      	bne.n	80065e4 <LL_RCC_PLL_IsReady+0x18>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <LL_RCC_PLL_IsReady+0x1a>
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80065f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006600:	4618      	mov	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006618:	4618      	mov	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006622:	b480      	push	{r7}
 8006624:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006630:	4618      	mov	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800663a:	b480      	push	{r7}
 800663c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800663e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0303 	and.w	r3, r3, #3
}
 8006648:	4618      	mov	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006652:	b480      	push	{r7}
 8006654:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006664:	d101      	bne.n	800666a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006676:	b480      	push	{r7}
 8006678:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800667a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800667e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800668a:	d101      	bne.n	8006690 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800668c:	2301      	movs	r3, #1
 800668e:	e000      	b.n	8006692 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80066a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80066a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b0:	d101      	bne.n	80066b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80066c2:	b480      	push	{r7}
 80066c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80066c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066d4:	d101      	bne.n	80066da <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80066e6:	b480      	push	{r7}
 80066e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80066ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066f8:	d101      	bne.n	80066fe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800670c:	b590      	push	{r4, r7, lr}
 800670e:	b08d      	sub	sp, #52	@ 0x34
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e363      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 808d 	beq.w	8006846 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800672c:	f7ff fe89 	bl	8006442 <LL_RCC_GetSysClkSource>
 8006730:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006732:	f7ff ff82 	bl	800663a <LL_RCC_PLL_GetMainSource>
 8006736:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_RCC_OscConfig+0x3e>
 800673e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006740:	2b0c      	cmp	r3, #12
 8006742:	d147      	bne.n	80067d4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	2b01      	cmp	r3, #1
 8006748:	d144      	bne.n	80067d4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e347      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800675a:	f7ff fe34 	bl	80063c6 <LL_RCC_MSI_GetRange>
 800675e:	4603      	mov	r3, r0
 8006760:	429c      	cmp	r4, r3
 8006762:	d914      	bls.n	800678e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fd2f 	bl	80071cc <RCC_SetFlashLatencyFromMSIRange>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e336      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fe0e 	bl	800639e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff fe32 	bl	80063f0 <LL_RCC_MSI_SetCalibTrimming>
 800678c:	e013      	b.n	80067b6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fe03 	bl	800639e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fe27 	bl	80063f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fd10 	bl	80071cc <RCC_SetFlashLatencyFromMSIRange>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e317      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80067b6:	f000 fcc9 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80067ba:	4603      	mov	r3, r0
 80067bc:	4aa4      	ldr	r2, [pc, #656]	@ (8006a50 <HAL_RCC_OscConfig+0x344>)
 80067be:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80067c0:	4ba4      	ldr	r3, [pc, #656]	@ (8006a54 <HAL_RCC_OscConfig+0x348>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fc ffab 	bl	8003720 <HAL_InitTick>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d039      	beq.n	8006844 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e308      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01e      	beq.n	800681a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80067dc:	f7ff fdb0 	bl	8006340 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067e0:	f7fc ffec 	bl	80037bc <HAL_GetTick>
 80067e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067e8:	f7fc ffe8 	bl	80037bc <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e2f5      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80067fa:	f7ff fdbf 	bl	800637c <LL_RCC_MSI_IsReady>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f1      	beq.n	80067e8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff fdc8 	bl	800639e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fdec 	bl	80063f0 <LL_RCC_MSI_SetCalibTrimming>
 8006818:	e015      	b.n	8006846 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800681a:	f7ff fda0 	bl	800635e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800681e:	f7fc ffcd 	bl	80037bc <HAL_GetTick>
 8006822:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006824:	e008      	b.n	8006838 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006826:	f7fc ffc9 	bl	80037bc <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e2d6      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006838:	f7ff fda0 	bl	800637c <LL_RCC_MSI_IsReady>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f1      	bne.n	8006826 <HAL_RCC_OscConfig+0x11a>
 8006842:	e000      	b.n	8006846 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006844:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d047      	beq.n	80068e2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006852:	f7ff fdf6 	bl	8006442 <LL_RCC_GetSysClkSource>
 8006856:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006858:	f7ff feef 	bl	800663a <LL_RCC_PLL_GetMainSource>
 800685c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2b08      	cmp	r3, #8
 8006862:	d005      	beq.n	8006870 <HAL_RCC_OscConfig+0x164>
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	2b0c      	cmp	r3, #12
 8006868:	d108      	bne.n	800687c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d105      	bne.n	800687c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d134      	bne.n	80068e2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e2b4      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006884:	d102      	bne.n	800688c <HAL_RCC_OscConfig+0x180>
 8006886:	f7ff fbdd 	bl	8006044 <LL_RCC_HSE_Enable>
 800688a:	e001      	b.n	8006890 <HAL_RCC_OscConfig+0x184>
 800688c:	f7ff fbe9 	bl	8006062 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d012      	beq.n	80068be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fc ff90 	bl	80037bc <HAL_GetTick>
 800689c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a0:	f7fc ff8c 	bl	80037bc <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b64      	cmp	r3, #100	@ 0x64
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e299      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80068b2:	f7ff fbe5 	bl	8006080 <LL_RCC_HSE_IsReady>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f1      	beq.n	80068a0 <HAL_RCC_OscConfig+0x194>
 80068bc:	e011      	b.n	80068e2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068be:	f7fc ff7d 	bl	80037bc <HAL_GetTick>
 80068c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c6:	f7fc ff79 	bl	80037bc <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b64      	cmp	r3, #100	@ 0x64
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e286      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80068d8:	f7ff fbd2 	bl	8006080 <LL_RCC_HSE_IsReady>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f1      	bne.n	80068c6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d04c      	beq.n	8006988 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ee:	f7ff fda8 	bl	8006442 <LL_RCC_GetSysClkSource>
 80068f2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068f4:	f7ff fea1 	bl	800663a <LL_RCC_PLL_GetMainSource>
 80068f8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d005      	beq.n	800690c <HAL_RCC_OscConfig+0x200>
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b0c      	cmp	r3, #12
 8006904:	d10e      	bne.n	8006924 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d10b      	bne.n	8006924 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e266      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fbf1 	bl	8006104 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006922:	e031      	b.n	8006988 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d019      	beq.n	8006960 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800692c:	f7ff fbba 	bl	80060a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006930:	f7fc ff44 	bl	80037bc <HAL_GetTick>
 8006934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006938:	f7fc ff40 	bl	80037bc <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e24d      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800694a:	f7ff fbc9 	bl	80060e0 <LL_RCC_HSI_IsReady>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0f1      	beq.n	8006938 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff fbd3 	bl	8006104 <LL_RCC_HSI_SetCalibTrimming>
 800695e:	e013      	b.n	8006988 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006960:	f7ff fbaf 	bl	80060c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fc ff2a 	bl	80037bc <HAL_GetTick>
 8006968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800696c:	f7fc ff26 	bl	80037bc <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e233      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800697e:	f7ff fbaf 	bl	80060e0 <LL_RCC_HSI_IsReady>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1f1      	bne.n	800696c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d106      	bne.n	80069a2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 80a3 	beq.w	8006ae8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d076      	beq.n	8006a98 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0310 	and.w	r3, r3, #16
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d046      	beq.n	8006a44 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80069b6:	f7ff fc66 	bl	8006286 <LL_RCC_LSI1_IsReady>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d113      	bne.n	80069e8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80069c0:	f7ff fc3f 	bl	8006242 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069c4:	f7fc fefa 	bl	80037bc <HAL_GetTick>
 80069c8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80069cc:	f7fc fef6 	bl	80037bc <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e203      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80069de:	f7ff fc52 	bl	8006286 <LL_RCC_LSI1_IsReady>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f1      	beq.n	80069cc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80069e8:	f7ff fc5f 	bl	80062aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fc fee6 	bl	80037bc <HAL_GetTick>
 80069f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80069f4:	f7fc fee2 	bl	80037bc <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e1ef      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006a06:	f7ff fc72 	bl	80062ee <LL_RCC_LSI2_IsReady>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0f1      	beq.n	80069f4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fc7c 	bl	8006312 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006a1a:	f7ff fc23 	bl	8006264 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1e:	f7fc fecd 	bl	80037bc <HAL_GetTick>
 8006a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a26:	f7fc fec9 	bl	80037bc <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e1d6      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006a38:	f7ff fc25 	bl	8006286 <LL_RCC_LSI1_IsReady>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f1      	bne.n	8006a26 <HAL_RCC_OscConfig+0x31a>
 8006a42:	e051      	b.n	8006ae8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006a44:	f7ff fbfd 	bl	8006242 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fc feb8 	bl	80037bc <HAL_GetTick>
 8006a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006a4e:	e00c      	b.n	8006a6a <HAL_RCC_OscConfig+0x35e>
 8006a50:	20000008 	.word	0x20000008
 8006a54:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006a58:	f7fc feb0 	bl	80037bc <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e1bd      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006a6a:	f7ff fc0c 	bl	8006286 <LL_RCC_LSI1_IsReady>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f1      	beq.n	8006a58 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006a74:	f7ff fc2a 	bl	80062cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006a7a:	f7fc fe9f 	bl	80037bc <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e1ac      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006a8c:	f7ff fc2f 	bl	80062ee <LL_RCC_LSI2_IsReady>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f1      	bne.n	8006a7a <HAL_RCC_OscConfig+0x36e>
 8006a96:	e027      	b.n	8006ae8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006a98:	f7ff fc18 	bl	80062cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9c:	f7fc fe8e 	bl	80037bc <HAL_GetTick>
 8006aa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006aa4:	f7fc fe8a 	bl	80037bc <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e197      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006ab6:	f7ff fc1a 	bl	80062ee <LL_RCC_LSI2_IsReady>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f1      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006ac0:	f7ff fbd0 	bl	8006264 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac4:	f7fc fe7a 	bl	80037bc <HAL_GetTick>
 8006ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006acc:	f7fc fe76 	bl	80037bc <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e183      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006ade:	f7ff fbd2 	bl	8006286 <LL_RCC_LSI1_IsReady>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1f1      	bne.n	8006acc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d05b      	beq.n	8006bac <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006af4:	4ba7      	ldr	r3, [pc, #668]	@ (8006d94 <HAL_RCC_OscConfig+0x688>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d114      	bne.n	8006b2a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006b00:	f7ff fa70 	bl	8005fe4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b04:	f7fc fe5a 	bl	80037bc <HAL_GetTick>
 8006b08:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b0c:	f7fc fe56 	bl	80037bc <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e163      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b1e:	4b9d      	ldr	r3, [pc, #628]	@ (8006d94 <HAL_RCC_OscConfig+0x688>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d102      	bne.n	8006b38 <HAL_RCC_OscConfig+0x42c>
 8006b32:	f7ff fb30 	bl	8006196 <LL_RCC_LSE_Enable>
 8006b36:	e00c      	b.n	8006b52 <HAL_RCC_OscConfig+0x446>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b05      	cmp	r3, #5
 8006b3e:	d104      	bne.n	8006b4a <HAL_RCC_OscConfig+0x43e>
 8006b40:	f7ff fb4b 	bl	80061da <LL_RCC_LSE_EnableBypass>
 8006b44:	f7ff fb27 	bl	8006196 <LL_RCC_LSE_Enable>
 8006b48:	e003      	b.n	8006b52 <HAL_RCC_OscConfig+0x446>
 8006b4a:	f7ff fb35 	bl	80061b8 <LL_RCC_LSE_Disable>
 8006b4e:	f7ff fb55 	bl	80061fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d014      	beq.n	8006b84 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5a:	f7fc fe2f 	bl	80037bc <HAL_GetTick>
 8006b5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006b60:	e00a      	b.n	8006b78 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b62:	f7fc fe2b 	bl	80037bc <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e136      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006b78:	f7ff fb51 	bl	800621e <LL_RCC_LSE_IsReady>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0ef      	beq.n	8006b62 <HAL_RCC_OscConfig+0x456>
 8006b82:	e013      	b.n	8006bac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b84:	f7fc fe1a 	bl	80037bc <HAL_GetTick>
 8006b88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006b8a:	e00a      	b.n	8006ba2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8c:	f7fc fe16 	bl	80037bc <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e121      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006ba2:	f7ff fb3c 	bl	800621e <LL_RCC_LSE_IsReady>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1ef      	bne.n	8006b8c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02c      	beq.n	8006c12 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d014      	beq.n	8006bea <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bc0:	f7ff fab5 	bl	800612e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc4:	f7fc fdfa 	bl	80037bc <HAL_GetTick>
 8006bc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bcc:	f7fc fdf6 	bl	80037bc <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e103      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006bde:	f7ff fac8 	bl	8006172 <LL_RCC_HSI48_IsReady>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0f1      	beq.n	8006bcc <HAL_RCC_OscConfig+0x4c0>
 8006be8:	e013      	b.n	8006c12 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bea:	f7ff fab1 	bl	8006150 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bee:	f7fc fde5 	bl	80037bc <HAL_GetTick>
 8006bf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bf6:	f7fc fde1 	bl	80037bc <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e0ee      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006c08:	f7ff fab3 	bl	8006172 <LL_RCC_HSI48_IsReady>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f1      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 80e4 	beq.w	8006de4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c1c:	f7ff fc11 	bl	8006442 <LL_RCC_GetSysClkSource>
 8006c20:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	f040 80b4 	bne.w	8006d9c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f003 0203 	and.w	r2, r3, #3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d123      	bne.n	8006c8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d11c      	bne.n	8006c8a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d114      	bne.n	8006c8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d10d      	bne.n	8006c8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d106      	bne.n	8006c8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d05d      	beq.n	8006d46 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	2b0c      	cmp	r3, #12
 8006c8e:	d058      	beq.n	8006d42 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e0a1      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ca2:	f7ff fc84 	bl	80065ae <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ca6:	f7fc fd89 	bl	80037bc <HAL_GetTick>
 8006caa:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cae:	f7fc fd85 	bl	80037bc <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e092      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1ef      	bne.n	8006cae <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	4b30      	ldr	r3, [pc, #192]	@ (8006d98 <HAL_RCC_OscConfig+0x68c>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ce0:	4311      	orrs	r1, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ce6:	0212      	lsls	r2, r2, #8
 8006ce8:	4311      	orrs	r1, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006cee:	4311      	orrs	r1, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006cf4:	4311      	orrs	r1, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d04:	f7ff fc44 	bl	8006590 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d18:	f7fc fd50 	bl	80037bc <HAL_GetTick>
 8006d1c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d20:	f7fc fd4c 	bl	80037bc <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e059      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ef      	beq.n	8006d20 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d40:	e050      	b.n	8006de4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e04f      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d147      	bne.n	8006de4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d54:	f7ff fc1c 	bl	8006590 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d68:	f7fc fd28 	bl	80037bc <HAL_GetTick>
 8006d6c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d70:	f7fc fd24 	bl	80037bc <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e031      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0ef      	beq.n	8006d70 <HAL_RCC_OscConfig+0x664>
 8006d90:	e028      	b.n	8006de4 <HAL_RCC_OscConfig+0x6d8>
 8006d92:	bf00      	nop
 8006d94:	58000400 	.word	0x58000400
 8006d98:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d01e      	beq.n	8006de0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da2:	f7ff fc04 	bl	80065ae <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da6:	f7fc fd09 	bl	80037bc <HAL_GetTick>
 8006daa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dae:	f7fc fd05 	bl	80037bc <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e012      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1ef      	bne.n	8006dae <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dd8:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <HAL_RCC_OscConfig+0x6e4>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	60cb      	str	r3, [r1, #12]
 8006dde:	e001      	b.n	8006de4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3734      	adds	r7, #52	@ 0x34
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd90      	pop	{r4, r7, pc}
 8006dee:	bf00      	nop
 8006df0:	eefefffc 	.word	0xeefefffc

08006df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e12d      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e08:	4b98      	ldr	r3, [pc, #608]	@ (800706c <HAL_RCC_ClockConfig+0x278>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d91b      	bls.n	8006e4e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e16:	4b95      	ldr	r3, [pc, #596]	@ (800706c <HAL_RCC_ClockConfig+0x278>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f023 0207 	bic.w	r2, r3, #7
 8006e1e:	4993      	ldr	r1, [pc, #588]	@ (800706c <HAL_RCC_ClockConfig+0x278>)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e26:	f7fc fcc9 	bl	80037bc <HAL_GetTick>
 8006e2a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2c:	e008      	b.n	8006e40 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e2e:	f7fc fcc5 	bl	80037bc <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e111      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e40:	4b8a      	ldr	r3, [pc, #552]	@ (800706c <HAL_RCC_ClockConfig+0x278>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d1ef      	bne.n	8006e2e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d016      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fafb 	bl	800645a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e64:	f7fc fcaa 	bl	80037bc <HAL_GetTick>
 8006e68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e6c:	f7fc fca6 	bl	80037bc <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e0f2      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e7e:	f7ff fbe8 	bl	8006652 <LL_RCC_IsActiveFlag_HPRE>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f1      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d016      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff faf2 	bl	8006482 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e9e:	f7fc fc8d 	bl	80037bc <HAL_GetTick>
 8006ea2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ea6:	f7fc fc89 	bl	80037bc <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e0d5      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006eb8:	f7ff fbdd 	bl	8006676 <LL_RCC_IsActiveFlag_C2HPRE>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f1      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d016      	beq.n	8006efc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff faeb 	bl	80064ae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ed8:	f7fc fc70 	bl	80037bc <HAL_GetTick>
 8006edc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ee0:	f7fc fc6c 	bl	80037bc <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e0b8      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006ef2:	f7ff fbd3 	bl	800669c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0f1      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d016      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fae5 	bl	80064dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f12:	f7fc fc53 	bl	80037bc <HAL_GetTick>
 8006f16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f1a:	f7fc fc4f 	bl	80037bc <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e09b      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006f2c:	f7ff fbc9 	bl	80066c2 <LL_RCC_IsActiveFlag_PPRE1>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f1      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d017      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fadb 	bl	8006504 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006f4e:	f7fc fc35 	bl	80037bc <HAL_GetTick>
 8006f52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f54:	e008      	b.n	8006f68 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006f56:	f7fc fc31 	bl	80037bc <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e07d      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f68:	f7ff fbbd 	bl	80066e6 <LL_RCC_IsActiveFlag_PPRE2>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0f1      	beq.n	8006f56 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d043      	beq.n	8007006 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d106      	bne.n	8006f94 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006f86:	f7ff f87b 	bl	8006080 <LL_RCC_HSE_IsReady>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d11e      	bne.n	8006fce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e067      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d106      	bne.n	8006faa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006f9c:	f7ff fb16 	bl	80065cc <LL_RCC_PLL_IsReady>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d113      	bne.n	8006fce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e05c      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006fb2:	f7ff f9e3 	bl	800637c <LL_RCC_MSI_IsReady>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d108      	bne.n	8006fce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e051      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006fc0:	f7ff f88e 	bl	80060e0 <LL_RCC_HSI_IsReady>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e04a      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff fa21 	bl	800641a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd8:	f7fc fbf0 	bl	80037bc <HAL_GetTick>
 8006fdc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fde:	e00a      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe0:	f7fc fbec 	bl	80037bc <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e036      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff6:	f7ff fa24 	bl	8006442 <LL_RCC_GetSysClkSource>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	429a      	cmp	r2, r3
 8007004:	d1ec      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007006:	4b19      	ldr	r3, [pc, #100]	@ (800706c <HAL_RCC_ClockConfig+0x278>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d21b      	bcs.n	800704c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007014:	4b15      	ldr	r3, [pc, #84]	@ (800706c <HAL_RCC_ClockConfig+0x278>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f023 0207 	bic.w	r2, r3, #7
 800701c:	4913      	ldr	r1, [pc, #76]	@ (800706c <HAL_RCC_ClockConfig+0x278>)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	4313      	orrs	r3, r2
 8007022:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007024:	f7fc fbca 	bl	80037bc <HAL_GetTick>
 8007028:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800702a:	e008      	b.n	800703e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800702c:	f7fc fbc6 	bl	80037bc <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e012      	b.n	8007064 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703e:	4b0b      	ldr	r3, [pc, #44]	@ (800706c <HAL_RCC_ClockConfig+0x278>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d1ef      	bne.n	800702c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800704c:	f000 f87e 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8007050:	4603      	mov	r3, r0
 8007052:	4a07      	ldr	r2, [pc, #28]	@ (8007070 <HAL_RCC_ClockConfig+0x27c>)
 8007054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007056:	f7fc fbbd 	bl	80037d4 <HAL_GetTickPrio>
 800705a:	4603      	mov	r3, r0
 800705c:	4618      	mov	r0, r3
 800705e:	f7fc fb5f 	bl	8003720 <HAL_InitTick>
 8007062:	4603      	mov	r3, r0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	58004000 	.word	0x58004000
 8007070:	20000008 	.word	0x20000008

08007074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800707a:	f7ff f9e2 	bl	8006442 <LL_RCC_GetSysClkSource>
 800707e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007086:	f7ff f99e 	bl	80063c6 <LL_RCC_MSI_GetRange>
 800708a:	4603      	mov	r3, r0
 800708c:	091b      	lsrs	r3, r3, #4
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	4a2b      	ldr	r2, [pc, #172]	@ (8007140 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	e04b      	b.n	8007134 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d102      	bne.n	80070a8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070a2:	4b28      	ldr	r3, [pc, #160]	@ (8007144 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e045      	b.n	8007134 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d10a      	bne.n	80070c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070ae:	f7fe ffb7 	bl	8006020 <LL_RCC_HSE_IsEnabledDiv2>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d102      	bne.n	80070be <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80070b8:	4b22      	ldr	r3, [pc, #136]	@ (8007144 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e03a      	b.n	8007134 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80070be:	4b22      	ldr	r3, [pc, #136]	@ (8007148 <HAL_RCC_GetSysClockFreq+0xd4>)
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e037      	b.n	8007134 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80070c4:	f7ff fab9 	bl	800663a <LL_RCC_PLL_GetMainSource>
 80070c8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d003      	beq.n	80070d8 <HAL_RCC_GetSysClockFreq+0x64>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d003      	beq.n	80070de <HAL_RCC_GetSysClockFreq+0x6a>
 80070d6:	e00d      	b.n	80070f4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80070d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007144 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070da:	60bb      	str	r3, [r7, #8]
        break;
 80070dc:	e015      	b.n	800710a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070de:	f7fe ff9f 	bl	8006020 <LL_RCC_HSE_IsEnabledDiv2>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d102      	bne.n	80070ee <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80070e8:	4b16      	ldr	r3, [pc, #88]	@ (8007144 <HAL_RCC_GetSysClockFreq+0xd0>)
 80070ea:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80070ec:	e00d      	b.n	800710a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80070ee:	4b16      	ldr	r3, [pc, #88]	@ (8007148 <HAL_RCC_GetSysClockFreq+0xd4>)
 80070f0:	60bb      	str	r3, [r7, #8]
        break;
 80070f2:	e00a      	b.n	800710a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80070f4:	f7ff f967 	bl	80063c6 <LL_RCC_MSI_GetRange>
 80070f8:	4603      	mov	r3, r0
 80070fa:	091b      	lsrs	r3, r3, #4
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	4a0f      	ldr	r2, [pc, #60]	@ (8007140 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007106:	60bb      	str	r3, [r7, #8]
        break;
 8007108:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800710a:	f7ff fa71 	bl	80065f0 <LL_RCC_PLL_GetN>
 800710e:	4602      	mov	r2, r0
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	fb03 f402 	mul.w	r4, r3, r2
 8007116:	f7ff fa84 	bl	8006622 <LL_RCC_PLL_GetDivider>
 800711a:	4603      	mov	r3, r0
 800711c:	091b      	lsrs	r3, r3, #4
 800711e:	3301      	adds	r3, #1
 8007120:	fbb4 f4f3 	udiv	r4, r4, r3
 8007124:	f7ff fa71 	bl	800660a <LL_RCC_PLL_GetR>
 8007128:	4603      	mov	r3, r0
 800712a:	0f5b      	lsrs	r3, r3, #29
 800712c:	3301      	adds	r3, #1
 800712e:	fbb4 f3f3 	udiv	r3, r4, r3
 8007132:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007134:	68fb      	ldr	r3, [r7, #12]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	bd90      	pop	{r4, r7, pc}
 800713e:	bf00      	nop
 8007140:	08013560 	.word	0x08013560
 8007144:	00f42400 	.word	0x00f42400
 8007148:	01e84800 	.word	0x01e84800

0800714c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800714c:	b598      	push	{r3, r4, r7, lr}
 800714e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007150:	f7ff ff90 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8007154:	4604      	mov	r4, r0
 8007156:	f7ff f9e9 	bl	800652c <LL_RCC_GetAHBPrescaler>
 800715a:	4603      	mov	r3, r0
 800715c:	091b      	lsrs	r3, r3, #4
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	4a03      	ldr	r2, [pc, #12]	@ (8007170 <HAL_RCC_GetHCLKFreq+0x24>)
 8007164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007168:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800716c:	4618      	mov	r0, r3
 800716e:	bd98      	pop	{r3, r4, r7, pc}
 8007170:	08013500 	.word	0x08013500

08007174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007174:	b598      	push	{r3, r4, r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007178:	f7ff ffe8 	bl	800714c <HAL_RCC_GetHCLKFreq>
 800717c:	4604      	mov	r4, r0
 800717e:	f7ff f9ef 	bl	8006560 <LL_RCC_GetAPB1Prescaler>
 8007182:	4603      	mov	r3, r0
 8007184:	0a1b      	lsrs	r3, r3, #8
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	4a04      	ldr	r2, [pc, #16]	@ (800719c <HAL_RCC_GetPCLK1Freq+0x28>)
 800718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007190:	f003 031f 	and.w	r3, r3, #31
 8007194:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007198:	4618      	mov	r0, r3
 800719a:	bd98      	pop	{r3, r4, r7, pc}
 800719c:	08013540 	.word	0x08013540

080071a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a0:	b598      	push	{r3, r4, r7, lr}
 80071a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80071a4:	f7ff ffd2 	bl	800714c <HAL_RCC_GetHCLKFreq>
 80071a8:	4604      	mov	r4, r0
 80071aa:	f7ff f9e5 	bl	8006578 <LL_RCC_GetAPB2Prescaler>
 80071ae:	4603      	mov	r3, r0
 80071b0:	0adb      	lsrs	r3, r3, #11
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	4a04      	ldr	r2, [pc, #16]	@ (80071c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071bc:	f003 031f 	and.w	r3, r3, #31
 80071c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	bd98      	pop	{r3, r4, r7, pc}
 80071c8:	08013540 	.word	0x08013540

080071cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2bb0      	cmp	r3, #176	@ 0xb0
 80071d8:	d903      	bls.n	80071e2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80071da:	4b15      	ldr	r3, [pc, #84]	@ (8007230 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	e007      	b.n	80071f2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	4a11      	ldr	r2, [pc, #68]	@ (8007230 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80071ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80071f2:	f7ff f9a7 	bl	8006544 <LL_RCC_GetAHB4Prescaler>
 80071f6:	4603      	mov	r3, r0
 80071f8:	091b      	lsrs	r3, r3, #4
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	4a0d      	ldr	r2, [pc, #52]	@ (8007234 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	fbb2 f3f3 	udiv	r3, r2, r3
 800720a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4a0a      	ldr	r2, [pc, #40]	@ (8007238 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007210:	fba2 2303 	umull	r2, r3, r2, r3
 8007214:	0c9c      	lsrs	r4, r3, #18
 8007216:	f7fe fef5 	bl	8006004 <HAL_PWREx_GetVoltageRange>
 800721a:	4603      	mov	r3, r0
 800721c:	4619      	mov	r1, r3
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f80c 	bl	800723c <RCC_SetFlashLatency>
 8007224:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	bd90      	pop	{r4, r7, pc}
 800722e:	bf00      	nop
 8007230:	08013560 	.word	0x08013560
 8007234:	08013500 	.word	0x08013500
 8007238:	431bde83 	.word	0x431bde83

0800723c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800723c:	b590      	push	{r4, r7, lr}
 800723e:	b093      	sub	sp, #76	@ 0x4c
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007246:	4b37      	ldr	r3, [pc, #220]	@ (8007324 <RCC_SetFlashLatency+0xe8>)
 8007248:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800724c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800724e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007252:	4a35      	ldr	r2, [pc, #212]	@ (8007328 <RCC_SetFlashLatency+0xec>)
 8007254:	f107 031c 	add.w	r3, r7, #28
 8007258:	ca07      	ldmia	r2, {r0, r1, r2}
 800725a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800725e:	4b33      	ldr	r3, [pc, #204]	@ (800732c <RCC_SetFlashLatency+0xf0>)
 8007260:	f107 040c 	add.w	r4, r7, #12
 8007264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800726a:	2300      	movs	r3, #0
 800726c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007274:	d11a      	bne.n	80072ac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007276:	2300      	movs	r3, #0
 8007278:	643b      	str	r3, [r7, #64]	@ 0x40
 800727a:	e013      	b.n	80072a4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800727c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	3348      	adds	r3, #72	@ 0x48
 8007282:	443b      	add	r3, r7
 8007284:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	429a      	cmp	r2, r3
 800728c:	d807      	bhi.n	800729e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800728e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	3348      	adds	r3, #72	@ 0x48
 8007294:	443b      	add	r3, r7
 8007296:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800729a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800729c:	e020      	b.n	80072e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800729e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a0:	3301      	adds	r3, #1
 80072a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80072a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d9e8      	bls.n	800727c <RCC_SetFlashLatency+0x40>
 80072aa:	e019      	b.n	80072e0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80072ac:	2300      	movs	r3, #0
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b0:	e013      	b.n	80072da <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80072b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	3348      	adds	r3, #72	@ 0x48
 80072b8:	443b      	add	r3, r7
 80072ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d807      	bhi.n	80072d4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80072c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	3348      	adds	r3, #72	@ 0x48
 80072ca:	443b      	add	r3, r7
 80072cc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80072d0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80072d2:	e005      	b.n	80072e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80072d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072d6:	3301      	adds	r3, #1
 80072d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d9e8      	bls.n	80072b2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80072e0:	4b13      	ldr	r3, [pc, #76]	@ (8007330 <RCC_SetFlashLatency+0xf4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f023 0207 	bic.w	r2, r3, #7
 80072e8:	4911      	ldr	r1, [pc, #68]	@ (8007330 <RCC_SetFlashLatency+0xf4>)
 80072ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ec:	4313      	orrs	r3, r2
 80072ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072f0:	f7fc fa64 	bl	80037bc <HAL_GetTick>
 80072f4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80072f6:	e008      	b.n	800730a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80072f8:	f7fc fa60 	bl	80037bc <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d901      	bls.n	800730a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e007      	b.n	800731a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800730a:	4b09      	ldr	r3, [pc, #36]	@ (8007330 <RCC_SetFlashLatency+0xf4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007314:	429a      	cmp	r2, r3
 8007316:	d1ef      	bne.n	80072f8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	374c      	adds	r7, #76	@ 0x4c
 800731e:	46bd      	mov	sp, r7
 8007320:	bd90      	pop	{r4, r7, pc}
 8007322:	bf00      	nop
 8007324:	080132dc 	.word	0x080132dc
 8007328:	080132ec 	.word	0x080132ec
 800732c:	080132f8 	.word	0x080132f8
 8007330:	58004000 	.word	0x58004000

08007334 <LL_RCC_LSE_IsEnabled>:
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800733c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <LL_RCC_LSE_IsEnabled+0x18>
 8007348:	2301      	movs	r3, #1
 800734a:	e000      	b.n	800734e <LL_RCC_LSE_IsEnabled+0x1a>
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <LL_RCC_LSE_IsReady>:
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800735c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b02      	cmp	r3, #2
 800736a:	d101      	bne.n	8007370 <LL_RCC_LSE_IsReady+0x18>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <LL_RCC_LSE_IsReady+0x1a>
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <LL_RCC_SetRFWKPClockSource>:
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800738c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007390:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <LL_RCC_SetSMPSClockSource>:
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80073b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b6:	f023 0203 	bic.w	r2, r3, #3
 80073ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <LL_RCC_SetSMPSPrescaler>:
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80073d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80073e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <LL_RCC_SetUSARTClockSource>:
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007408:	f023 0203 	bic.w	r2, r3, #3
 800740c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <LL_RCC_SetLPUARTClockSource>:
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800742c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007434:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007438:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <LL_RCC_SetI2CClockSource>:
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800745c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	091b      	lsrs	r3, r3, #4
 8007464:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007468:	43db      	mvns	r3, r3
 800746a:	401a      	ands	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007478:	4313      	orrs	r3, r2
 800747a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <LL_RCC_SetLPTIMClockSource>:
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007496:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	0c1b      	lsrs	r3, r3, #16
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	43db      	mvns	r3, r3
 80074a2:	401a      	ands	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	041b      	lsls	r3, r3, #16
 80074a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074ac:	4313      	orrs	r3, r2
 80074ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <LL_RCC_SetSAIClockSource>:
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80074c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80074d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4313      	orrs	r3, r2
 80074da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <LL_RCC_SetRNGClockSource>:
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80074f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80074fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <LL_RCC_SetCLK48ClockSource>:
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800751e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007526:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800752a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4313      	orrs	r3, r2
 8007532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <LL_RCC_SetUSBClockSource>:
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff ffe3 	bl	8007516 <LL_RCC_SetCLK48ClockSource>
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <LL_RCC_SetADCClockSource>:
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007568:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800756c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <LL_RCC_SetRTCClockSource>:
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800758c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007594:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4313      	orrs	r3, r2
 80075a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <LL_RCC_GetRTCClockSource>:
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80075b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <LL_RCC_ForceBackupDomainReset>:
{
 80075ca:	b480      	push	{r7}
 80075cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80075ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80075e2:	bf00      	nop
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <LL_RCC_ReleaseBackupDomainReset>:
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80075f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007604:	bf00      	nop
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <LL_RCC_PLLSAI1_Enable>:
{
 800760e:	b480      	push	{r7}
 8007610:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800761c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007620:	6013      	str	r3, [r2, #0]
}
 8007622:	bf00      	nop
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <LL_RCC_PLLSAI1_Disable>:
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800763a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800763e:	6013      	str	r3, [r2, #0]
}
 8007640:	bf00      	nop
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <LL_RCC_PLLSAI1_IsReady>:
{
 800764a:	b480      	push	{r7}
 800764c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800764e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800765c:	d101      	bne.n	8007662 <LL_RCC_PLLSAI1_IsReady+0x18>
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b088      	sub	sp, #32
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007676:	2300      	movs	r3, #0
 8007678:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800767a:	2300      	movs	r3, #0
 800767c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d034      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007692:	d021      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007694:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007698:	d81b      	bhi.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800769a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800769e:	d01d      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80076a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076a4:	d815      	bhi.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80076aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ae:	d110      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80076b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076be:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80076c0:	e00d      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 f947 	bl	800795a <RCCEx_PLLSAI1_ConfigNP>
 80076cc:	4603      	mov	r3, r0
 80076ce:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80076d0:	e005      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	77fb      	strb	r3, [r7, #31]
        break;
 80076d6:	e002      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80076dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076de:	7ffb      	ldrb	r3, [r7, #31]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff fee8 	bl	80074be <LL_RCC_SetSAIClockSource>
 80076ee:	e001      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f0:	7ffb      	ldrb	r3, [r7, #31]
 80076f2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d046      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007700:	f7ff ff56 	bl	80075b0 <LL_RCC_GetRTCClockSource>
 8007704:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	429a      	cmp	r2, r3
 800770e:	d03c      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007710:	f7fe fc68 	bl	8005fe4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d105      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff ff30 	bl	8007584 <LL_RCC_SetRTCClockSource>
 8007724:	e02e      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800772a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800772e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007730:	f7ff ff4b 	bl	80075ca <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007734:	f7ff ff5a 	bl	80075ec <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007750:	f7ff fdf0 	bl	8007334 <LL_RCC_LSE_IsEnabled>
 8007754:	4603      	mov	r3, r0
 8007756:	2b01      	cmp	r3, #1
 8007758:	d114      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800775a:	f7fc f82f 	bl	80037bc <HAL_GetTick>
 800775e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007760:	e00b      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007762:	f7fc f82b 	bl	80037bc <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007770:	4293      	cmp	r3, r2
 8007772:	d902      	bls.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	77fb      	strb	r3, [r7, #31]
              break;
 8007778:	e004      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800777a:	f7ff fded 	bl	8007358 <LL_RCC_LSE_IsReady>
 800777e:	4603      	mov	r3, r0
 8007780:	2b01      	cmp	r3, #1
 8007782:	d1ee      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007784:	7ffb      	ldrb	r3, [r7, #31]
 8007786:	77bb      	strb	r3, [r7, #30]
 8007788:	e001      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778a:	7ffb      	ldrb	r3, [r7, #31]
 800778c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d004      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff fe2a 	bl	80073f8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff fe35 	bl	8007424 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff fe5d 	bl	800748a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d004      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fe52 	bl	800748a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fe2a 	bl	8007450 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff fe1f 	bl	8007450 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781a:	2b00      	cmp	r3, #0
 800781c:	d022      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007822:	4618      	mov	r0, r3
 8007824:	f7ff fe8d 	bl	8007542 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800782c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007830:	d107      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800783c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007840:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007846:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800784a:	d10b      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3304      	adds	r3, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f000 f8dd 	bl	8007a10 <RCCEx_PLLSAI1_ConfigNQ>
 8007856:	4603      	mov	r3, r0
 8007858:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800785a:	7ffb      	ldrb	r3, [r7, #31]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007860:	7ffb      	ldrb	r3, [r7, #31]
 8007862:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800786c:	2b00      	cmp	r3, #0
 800786e:	d02b      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007878:	d008      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007882:	d003      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	2b00      	cmp	r3, #0
 800788a:	d105      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fe2a 	bl	80074ea <LL_RCC_SetRNGClockSource>
 8007896:	e00a      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	2000      	movs	r0, #0
 80078a4:	f7ff fe21 	bl	80074ea <LL_RCC_SetRNGClockSource>
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7ff fe34 	bl	8007516 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80078b6:	d107      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80078b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d022      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff fe3d 	bl	8007558 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078e6:	d107      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80078e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078f6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007900:	d10b      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3304      	adds	r3, #4
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f8dd 	bl	8007ac6 <RCCEx_PLLSAI1_ConfigNR>
 800790c:	4603      	mov	r3, r0
 800790e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007910:	7ffb      	ldrb	r3, [r7, #31]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007916:	7ffb      	ldrb	r3, [r7, #31]
 8007918:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff fd26 	bl	800737c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d009      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff fd45 	bl	80073d0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff fd2c 	bl	80073a8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007950:	7fbb      	ldrb	r3, [r7, #30]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3720      	adds	r7, #32
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007966:	f7ff fe61 	bl	800762c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800796a:	f7fb ff27 	bl	80037bc <HAL_GetTick>
 800796e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007970:	e009      	b.n	8007986 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007972:	f7fb ff23 	bl	80037bc <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d902      	bls.n	8007986 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	73fb      	strb	r3, [r7, #15]
      break;
 8007984:	e004      	b.n	8007990 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007986:	f7ff fe60 	bl	800764a <LL_RCC_PLLSAI1_IsReady>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f0      	bne.n	8007972 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d137      	bne.n	8007a06 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079aa:	4313      	orrs	r3, r2
 80079ac:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80079ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079c0:	4313      	orrs	r3, r2
 80079c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80079c4:	f7ff fe23 	bl	800760e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079c8:	f7fb fef8 	bl	80037bc <HAL_GetTick>
 80079cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079ce:	e009      	b.n	80079e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079d0:	f7fb fef4 	bl	80037bc <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d902      	bls.n	80079e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	73fb      	strb	r3, [r7, #15]
        break;
 80079e2:	e004      	b.n	80079ee <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079e4:	f7ff fe31 	bl	800764a <LL_RCC_PLLSAI1_IsReady>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d1f0      	bne.n	80079d0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d108      	bne.n	8007a06 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80079f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a02:	4313      	orrs	r3, r2
 8007a04:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007a1c:	f7ff fe06 	bl	800762c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a20:	f7fb fecc 	bl	80037bc <HAL_GetTick>
 8007a24:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a26:	e009      	b.n	8007a3c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a28:	f7fb fec8 	bl	80037bc <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d902      	bls.n	8007a3c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	73fb      	strb	r3, [r7, #15]
      break;
 8007a3a:	e004      	b.n	8007a46 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007a3c:	f7ff fe05 	bl	800764a <LL_RCC_PLLSAI1_IsReady>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1f0      	bne.n	8007a28 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d137      	bne.n	8007abc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	021b      	lsls	r3, r3, #8
 8007a5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a60:	4313      	orrs	r3, r2
 8007a62:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a76:	4313      	orrs	r3, r2
 8007a78:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007a7a:	f7ff fdc8 	bl	800760e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a7e:	f7fb fe9d 	bl	80037bc <HAL_GetTick>
 8007a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a84:	e009      	b.n	8007a9a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a86:	f7fb fe99 	bl	80037bc <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d902      	bls.n	8007a9a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	73fb      	strb	r3, [r7, #15]
        break;
 8007a98:	e004      	b.n	8007aa4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a9a:	f7ff fdd6 	bl	800764a <LL_RCC_PLLSAI1_IsReady>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d1f0      	bne.n	8007a86 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d108      	bne.n	8007abc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007ad2:	f7ff fdab 	bl	800762c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ad6:	f7fb fe71 	bl	80037bc <HAL_GetTick>
 8007ada:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007adc:	e009      	b.n	8007af2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ade:	f7fb fe6d 	bl	80037bc <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d902      	bls.n	8007af2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e004      	b.n	8007afc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007af2:	f7ff fdaa 	bl	800764a <LL_RCC_PLLSAI1_IsReady>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1f0      	bne.n	8007ade <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d137      	bne.n	8007b72 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b16:	4313      	orrs	r3, r2
 8007b18:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007b30:	f7ff fd6d 	bl	800760e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b34:	f7fb fe42 	bl	80037bc <HAL_GetTick>
 8007b38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b3a:	e009      	b.n	8007b50 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b3c:	f7fb fe3e 	bl	80037bc <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d902      	bls.n	8007b50 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8007b4e:	e004      	b.n	8007b5a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007b50:	f7ff fd7b 	bl	800764a <LL_RCC_PLLSAI1_IsReady>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d1f0      	bne.n	8007b3c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d108      	bne.n	8007b72 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b64:	691a      	ldr	r2, [r3, #16]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e09f      	b.n	8007cce <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fb fa9c 	bl	80030e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007bb0:	4b49      	ldr	r3, [pc, #292]	@ (8007cd8 <HAL_RTC_Init+0x15c>)
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b10      	cmp	r3, #16
 8007bba:	d07e      	beq.n	8007cba <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	22ca      	movs	r2, #202	@ 0xca
 8007bc2:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2253      	movs	r2, #83	@ 0x53
 8007bca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f8ab 	bl	8007d28 <RTC_EnterInitMode>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	22ff      	movs	r2, #255	@ 0xff
 8007bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2204      	movs	r2, #4
 8007be4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	73fb      	strb	r3, [r7, #15]
 8007bec:	e067      	b.n	8007cbe <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6812      	ldr	r2, [r2, #0]
 8007bf8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c00:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6899      	ldr	r1, [r3, #8]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	431a      	orrs	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	431a      	orrs	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68d2      	ldr	r2, [r2, #12]
 8007c28:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6919      	ldr	r1, [r3, #16]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	041a      	lsls	r2, r3, #16
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c4c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0203 	bic.w	r2, r2, #3
 8007c5c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69da      	ldr	r2, [r3, #28]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d113      	bne.n	8007cac <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f829 	bl	8007cdc <HAL_RTC_WaitForSynchro>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00d      	beq.n	8007cac <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	22ff      	movs	r2, #255	@ 0xff
 8007c96:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e010      	b.n	8007cce <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	22ff      	movs	r2, #255	@ 0xff
 8007cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73fb      	strb	r3, [r7, #15]
 8007cb8:	e001      	b.n	8007cbe <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d103      	bne.n	8007ccc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40002800 	.word	0x40002800

08007cdc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007cf2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007cf4:	f7fb fd62 	bl	80037bc <HAL_GetTick>
 8007cf8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007cfa:	e009      	b.n	8007d10 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cfc:	f7fb fd5e 	bl	80037bc <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d0a:	d901      	bls.n	8007d10 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e007      	b.n	8007d20 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0ee      	beq.n	8007cfc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d119      	bne.n	8007d72 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f04f 32ff 	mov.w	r2, #4294967295
 8007d46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d48:	f7fb fd38 	bl	80037bc <HAL_GetTick>
 8007d4c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d4e:	e009      	b.n	8007d64 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007d50:	f7fb fd34 	bl	80037bc <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d5e:	d901      	bls.n	8007d64 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e007      	b.n	8007d74 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0ee      	beq.n	8007d50 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d101      	bne.n	8007d96 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007d92:	2302      	movs	r3, #2
 8007d94:	e0a8      	b.n	8007ee8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2202      	movs	r2, #2
 8007da2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	22ca      	movs	r2, #202	@ 0xca
 8007dac:	625a      	str	r2, [r3, #36]	@ 0x24
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2253      	movs	r2, #83	@ 0x53
 8007db4:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d020      	beq.n	8007e06 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007dc4:	f7fb fcfa 	bl	80037bc <HAL_GetTick>
 8007dc8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007dca:	e015      	b.n	8007df8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007dcc:	f7fb fcf6 	bl	80037bc <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dda:	d90d      	bls.n	8007df8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	22ff      	movs	r2, #255	@ 0xff
 8007de2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2203      	movs	r2, #3
 8007de8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e077      	b.n	8007ee8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e2      	bne.n	8007dcc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e14:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007e26:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007e28:	f7fb fcc8 	bl	80037bc <HAL_GetTick>
 8007e2c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007e2e:	e015      	b.n	8007e5c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e30:	f7fb fcc4 	bl	80037bc <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e3e:	d90d      	bls.n	8007e5c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	22ff      	movs	r2, #255	@ 0xff
 8007e46:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e045      	b.n	8007ee8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0e2      	beq.n	8007e30 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0207 	bic.w	r2, r2, #7
 8007e80:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6899      	ldr	r1, [r3, #8]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007e92:	4b17      	ldr	r3, [pc, #92]	@ (8007ef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e98:	4a15      	ldr	r2, [pc, #84]	@ (8007ef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007e9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e9e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007ea2:	4b13      	ldr	r3, [pc, #76]	@ (8007ef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a12      	ldr	r2, [pc, #72]	@ (8007ef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007ea8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007eac:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689a      	ldr	r2, [r3, #8]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ebc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ecc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	22ff      	movs	r2, #255	@ 0xff
 8007ed4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	58000800 	.word	0x58000800

08007ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e049      	b.n	8007f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fb f914 	bl	8003148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f000 fb9e 	bl	8008674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d001      	beq.n	8007fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e036      	b.n	800802a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a17      	ldr	r2, [pc, #92]	@ (8008038 <HAL_TIM_Base_Start_IT+0x94>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <HAL_TIM_Base_Start_IT+0x44>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe6:	d115      	bne.n	8008014 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	4b13      	ldr	r3, [pc, #76]	@ (800803c <HAL_TIM_Base_Start_IT+0x98>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b06      	cmp	r3, #6
 8007ff8:	d015      	beq.n	8008026 <HAL_TIM_Base_Start_IT+0x82>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008000:	d011      	beq.n	8008026 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0201 	orr.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008012:	e008      	b.n	8008026 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	e000      	b.n	8008028 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	40012c00 	.word	0x40012c00
 800803c:	00010007 	.word	0x00010007

08008040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e049      	b.n	80080e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f841 	bl	80080ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3304      	adds	r3, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f000 faf8 	bl	8008674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d109      	bne.n	8008128 <HAL_TIM_PWM_Start+0x24>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b01      	cmp	r3, #1
 800811e:	bf14      	ite	ne
 8008120:	2301      	movne	r3, #1
 8008122:	2300      	moveq	r3, #0
 8008124:	b2db      	uxtb	r3, r3
 8008126:	e03c      	b.n	80081a2 <HAL_TIM_PWM_Start+0x9e>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b04      	cmp	r3, #4
 800812c:	d109      	bne.n	8008142 <HAL_TIM_PWM_Start+0x3e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b01      	cmp	r3, #1
 8008138:	bf14      	ite	ne
 800813a:	2301      	movne	r3, #1
 800813c:	2300      	moveq	r3, #0
 800813e:	b2db      	uxtb	r3, r3
 8008140:	e02f      	b.n	80081a2 <HAL_TIM_PWM_Start+0x9e>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b08      	cmp	r3, #8
 8008146:	d109      	bne.n	800815c <HAL_TIM_PWM_Start+0x58>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b01      	cmp	r3, #1
 8008152:	bf14      	ite	ne
 8008154:	2301      	movne	r3, #1
 8008156:	2300      	moveq	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	e022      	b.n	80081a2 <HAL_TIM_PWM_Start+0x9e>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b0c      	cmp	r3, #12
 8008160:	d109      	bne.n	8008176 <HAL_TIM_PWM_Start+0x72>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b01      	cmp	r3, #1
 800816c:	bf14      	ite	ne
 800816e:	2301      	movne	r3, #1
 8008170:	2300      	moveq	r3, #0
 8008172:	b2db      	uxtb	r3, r3
 8008174:	e015      	b.n	80081a2 <HAL_TIM_PWM_Start+0x9e>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b10      	cmp	r3, #16
 800817a:	d109      	bne.n	8008190 <HAL_TIM_PWM_Start+0x8c>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	bf14      	ite	ne
 8008188:	2301      	movne	r3, #1
 800818a:	2300      	moveq	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	e008      	b.n	80081a2 <HAL_TIM_PWM_Start+0x9e>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	bf14      	ite	ne
 800819c:	2301      	movne	r3, #1
 800819e:	2300      	moveq	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e079      	b.n	800829e <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d104      	bne.n	80081ba <HAL_TIM_PWM_Start+0xb6>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b8:	e023      	b.n	8008202 <HAL_TIM_PWM_Start+0xfe>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d104      	bne.n	80081ca <HAL_TIM_PWM_Start+0xc6>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081c8:	e01b      	b.n	8008202 <HAL_TIM_PWM_Start+0xfe>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d104      	bne.n	80081da <HAL_TIM_PWM_Start+0xd6>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081d8:	e013      	b.n	8008202 <HAL_TIM_PWM_Start+0xfe>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b0c      	cmp	r3, #12
 80081de:	d104      	bne.n	80081ea <HAL_TIM_PWM_Start+0xe6>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081e8:	e00b      	b.n	8008202 <HAL_TIM_PWM_Start+0xfe>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d104      	bne.n	80081fa <HAL_TIM_PWM_Start+0xf6>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081f8:	e003      	b.n	8008202 <HAL_TIM_PWM_Start+0xfe>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2202      	movs	r2, #2
 80081fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2201      	movs	r2, #1
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fdbc 	bl	8008d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a24      	ldr	r2, [pc, #144]	@ (80082a8 <HAL_TIM_PWM_Start+0x1a4>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d009      	beq.n	800822e <HAL_TIM_PWM_Start+0x12a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a23      	ldr	r2, [pc, #140]	@ (80082ac <HAL_TIM_PWM_Start+0x1a8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d004      	beq.n	800822e <HAL_TIM_PWM_Start+0x12a>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a21      	ldr	r2, [pc, #132]	@ (80082b0 <HAL_TIM_PWM_Start+0x1ac>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d101      	bne.n	8008232 <HAL_TIM_PWM_Start+0x12e>
 800822e:	2301      	movs	r3, #1
 8008230:	e000      	b.n	8008234 <HAL_TIM_PWM_Start+0x130>
 8008232:	2300      	movs	r3, #0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008246:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a16      	ldr	r2, [pc, #88]	@ (80082a8 <HAL_TIM_PWM_Start+0x1a4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_TIM_PWM_Start+0x158>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825a:	d115      	bne.n	8008288 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	4b14      	ldr	r3, [pc, #80]	@ (80082b4 <HAL_TIM_PWM_Start+0x1b0>)
 8008264:	4013      	ands	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b06      	cmp	r3, #6
 800826c:	d015      	beq.n	800829a <HAL_TIM_PWM_Start+0x196>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008274:	d011      	beq.n	800829a <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0201 	orr.w	r2, r2, #1
 8008284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008286:	e008      	b.n	800829a <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0201 	orr.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	e000      	b.n	800829c <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	40012c00 	.word	0x40012c00
 80082ac:	40014400 	.word	0x40014400
 80082b0:	40014800 	.word	0x40014800
 80082b4:	00010007 	.word	0x00010007

080082b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d101      	bne.n	80082d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082d2:	2302      	movs	r3, #2
 80082d4:	e0ff      	b.n	80084d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b14      	cmp	r3, #20
 80082e2:	f200 80f0 	bhi.w	80084c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80082e6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	08008341 	.word	0x08008341
 80082f0:	080084c7 	.word	0x080084c7
 80082f4:	080084c7 	.word	0x080084c7
 80082f8:	080084c7 	.word	0x080084c7
 80082fc:	08008381 	.word	0x08008381
 8008300:	080084c7 	.word	0x080084c7
 8008304:	080084c7 	.word	0x080084c7
 8008308:	080084c7 	.word	0x080084c7
 800830c:	080083c3 	.word	0x080083c3
 8008310:	080084c7 	.word	0x080084c7
 8008314:	080084c7 	.word	0x080084c7
 8008318:	080084c7 	.word	0x080084c7
 800831c:	08008403 	.word	0x08008403
 8008320:	080084c7 	.word	0x080084c7
 8008324:	080084c7 	.word	0x080084c7
 8008328:	080084c7 	.word	0x080084c7
 800832c:	08008445 	.word	0x08008445
 8008330:	080084c7 	.word	0x080084c7
 8008334:	080084c7 	.word	0x080084c7
 8008338:	080084c7 	.word	0x080084c7
 800833c:	08008485 	.word	0x08008485
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fa04 	bl	8008754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0208 	orr.w	r2, r2, #8
 800835a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0204 	bic.w	r2, r2, #4
 800836a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6999      	ldr	r1, [r3, #24]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	691a      	ldr	r2, [r3, #16]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	619a      	str	r2, [r3, #24]
      break;
 800837e:	e0a5      	b.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fa60 	bl	800884c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800839a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6999      	ldr	r1, [r3, #24]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	021a      	lsls	r2, r3, #8
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	430a      	orrs	r2, r1
 80083be:	619a      	str	r2, [r3, #24]
      break;
 80083c0:	e084      	b.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fab9 	bl	8008940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69da      	ldr	r2, [r3, #28]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0208 	orr.w	r2, r2, #8
 80083dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69da      	ldr	r2, [r3, #28]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0204 	bic.w	r2, r2, #4
 80083ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69d9      	ldr	r1, [r3, #28]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	61da      	str	r2, [r3, #28]
      break;
 8008400:	e064      	b.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fb11 	bl	8008a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69da      	ldr	r2, [r3, #28]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800841c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69da      	ldr	r2, [r3, #28]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800842c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69d9      	ldr	r1, [r3, #28]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	021a      	lsls	r2, r3, #8
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	61da      	str	r2, [r3, #28]
      break;
 8008442:	e043      	b.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	4618      	mov	r0, r3
 800844c:	f000 fb4e 	bl	8008aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0208 	orr.w	r2, r2, #8
 800845e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0204 	bic.w	r2, r2, #4
 800846e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	691a      	ldr	r2, [r3, #16]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008482:	e023      	b.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68b9      	ldr	r1, [r7, #8]
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fb86 	bl	8008b9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800849e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	021a      	lsls	r2, r3, #8
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80084c4:	e002      	b.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	75fb      	strb	r3, [r7, #23]
      break;
 80084ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop

080084e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_TIM_ConfigClockSource+0x1c>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e0b6      	b.n	800866a <HAL_TIM_ConfigClockSource+0x18a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800851a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800851e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008538:	d03e      	beq.n	80085b8 <HAL_TIM_ConfigClockSource+0xd8>
 800853a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800853e:	f200 8087 	bhi.w	8008650 <HAL_TIM_ConfigClockSource+0x170>
 8008542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008546:	f000 8086 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x176>
 800854a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800854e:	d87f      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x170>
 8008550:	2b70      	cmp	r3, #112	@ 0x70
 8008552:	d01a      	beq.n	800858a <HAL_TIM_ConfigClockSource+0xaa>
 8008554:	2b70      	cmp	r3, #112	@ 0x70
 8008556:	d87b      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x170>
 8008558:	2b60      	cmp	r3, #96	@ 0x60
 800855a:	d050      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x11e>
 800855c:	2b60      	cmp	r3, #96	@ 0x60
 800855e:	d877      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x170>
 8008560:	2b50      	cmp	r3, #80	@ 0x50
 8008562:	d03c      	beq.n	80085de <HAL_TIM_ConfigClockSource+0xfe>
 8008564:	2b50      	cmp	r3, #80	@ 0x50
 8008566:	d873      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x170>
 8008568:	2b40      	cmp	r3, #64	@ 0x40
 800856a:	d058      	beq.n	800861e <HAL_TIM_ConfigClockSource+0x13e>
 800856c:	2b40      	cmp	r3, #64	@ 0x40
 800856e:	d86f      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x170>
 8008570:	2b30      	cmp	r3, #48	@ 0x30
 8008572:	d064      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15e>
 8008574:	2b30      	cmp	r3, #48	@ 0x30
 8008576:	d86b      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x170>
 8008578:	2b20      	cmp	r3, #32
 800857a:	d060      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15e>
 800857c:	2b20      	cmp	r3, #32
 800857e:	d867      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x170>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d05c      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15e>
 8008584:	2b10      	cmp	r3, #16
 8008586:	d05a      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15e>
 8008588:	e062      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800859a:	f000 fbd5 	bl	8008d48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	609a      	str	r2, [r3, #8]
      break;
 80085b6:	e04f      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085c8:	f000 fbbe 	bl	8008d48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085da:	609a      	str	r2, [r3, #8]
      break;
 80085dc:	e03c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ea:	461a      	mov	r2, r3
 80085ec:	f000 fb30 	bl	8008c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2150      	movs	r1, #80	@ 0x50
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fb89 	bl	8008d0e <TIM_ITRx_SetConfig>
      break;
 80085fc:	e02c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800860a:	461a      	mov	r2, r3
 800860c:	f000 fb4f 	bl	8008cae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2160      	movs	r1, #96	@ 0x60
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fb79 	bl	8008d0e <TIM_ITRx_SetConfig>
      break;
 800861c:	e01c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800862a:	461a      	mov	r2, r3
 800862c:	f000 fb10 	bl	8008c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2140      	movs	r1, #64	@ 0x40
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fb69 	bl	8008d0e <TIM_ITRx_SetConfig>
      break;
 800863c:	e00c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f000 fb60 	bl	8008d0e <TIM_ITRx_SetConfig>
      break;
 800864e:	e003      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
      break;
 8008654:	e000      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a30      	ldr	r2, [pc, #192]	@ (8008748 <TIM_Base_SetConfig+0xd4>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <TIM_Base_SetConfig+0x20>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008692:	d108      	bne.n	80086a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a27      	ldr	r2, [pc, #156]	@ (8008748 <TIM_Base_SetConfig+0xd4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00b      	beq.n	80086c6 <TIM_Base_SetConfig+0x52>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b4:	d007      	beq.n	80086c6 <TIM_Base_SetConfig+0x52>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a24      	ldr	r2, [pc, #144]	@ (800874c <TIM_Base_SetConfig+0xd8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d003      	beq.n	80086c6 <TIM_Base_SetConfig+0x52>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a23      	ldr	r2, [pc, #140]	@ (8008750 <TIM_Base_SetConfig+0xdc>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d108      	bne.n	80086d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a12      	ldr	r2, [pc, #72]	@ (8008748 <TIM_Base_SetConfig+0xd4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <TIM_Base_SetConfig+0xa0>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a11      	ldr	r2, [pc, #68]	@ (800874c <TIM_Base_SetConfig+0xd8>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_Base_SetConfig+0xa0>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a10      	ldr	r2, [pc, #64]	@ (8008750 <TIM_Base_SetConfig+0xdc>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d103      	bne.n	800871c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b01      	cmp	r3, #1
 800872c:	d105      	bne.n	800873a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f023 0201 	bic.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	611a      	str	r2, [r3, #16]
  }
}
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40012c00 	.word	0x40012c00
 800874c:	40014400 	.word	0x40014400
 8008750:	40014800 	.word	0x40014800

08008754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	f023 0201 	bic.w	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0303 	bic.w	r3, r3, #3
 800878e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f023 0302 	bic.w	r3, r3, #2
 80087a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a24      	ldr	r2, [pc, #144]	@ (8008840 <TIM_OC1_SetConfig+0xec>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <TIM_OC1_SetConfig+0x70>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a23      	ldr	r2, [pc, #140]	@ (8008844 <TIM_OC1_SetConfig+0xf0>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_OC1_SetConfig+0x70>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a22      	ldr	r2, [pc, #136]	@ (8008848 <TIM_OC1_SetConfig+0xf4>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d10c      	bne.n	80087de <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f023 0308 	bic.w	r3, r3, #8
 80087ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f023 0304 	bic.w	r3, r3, #4
 80087dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a17      	ldr	r2, [pc, #92]	@ (8008840 <TIM_OC1_SetConfig+0xec>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <TIM_OC1_SetConfig+0xa2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a17      	ldr	r2, [pc, #92]	@ (8008848 <TIM_OC1_SetConfig+0xf4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_OC1_SetConfig+0xa2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a14      	ldr	r2, [pc, #80]	@ (8008844 <TIM_OC1_SetConfig+0xf0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d111      	bne.n	800881a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4313      	orrs	r3, r2
 800880e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	621a      	str	r2, [r3, #32]
}
 8008834:	bf00      	nop
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	40012c00 	.word	0x40012c00
 8008844:	40014800 	.word	0x40014800
 8008848:	40014400 	.word	0x40014400

0800884c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	f023 0210 	bic.w	r2, r3, #16
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800887a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800887e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f023 0320 	bic.w	r3, r3, #32
 800889a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	011b      	lsls	r3, r3, #4
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a22      	ldr	r2, [pc, #136]	@ (8008934 <TIM_OC2_SetConfig+0xe8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d10d      	bne.n	80088cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a19      	ldr	r2, [pc, #100]	@ (8008934 <TIM_OC2_SetConfig+0xe8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d007      	beq.n	80088e4 <TIM_OC2_SetConfig+0x98>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a18      	ldr	r2, [pc, #96]	@ (8008938 <TIM_OC2_SetConfig+0xec>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <TIM_OC2_SetConfig+0x98>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a17      	ldr	r2, [pc, #92]	@ (800893c <TIM_OC2_SetConfig+0xf0>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d113      	bne.n	800890c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	4313      	orrs	r3, r2
 800890a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	621a      	str	r2, [r3, #32]
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	40012c00 	.word	0x40012c00
 8008938:	40014400 	.word	0x40014400
 800893c:	40014800 	.word	0x40014800

08008940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800896e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800898c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	021b      	lsls	r3, r3, #8
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	4313      	orrs	r3, r2
 8008998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a21      	ldr	r2, [pc, #132]	@ (8008a24 <TIM_OC3_SetConfig+0xe4>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d10d      	bne.n	80089be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a18      	ldr	r2, [pc, #96]	@ (8008a24 <TIM_OC3_SetConfig+0xe4>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d007      	beq.n	80089d6 <TIM_OC3_SetConfig+0x96>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a17      	ldr	r2, [pc, #92]	@ (8008a28 <TIM_OC3_SetConfig+0xe8>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d003      	beq.n	80089d6 <TIM_OC3_SetConfig+0x96>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a16      	ldr	r2, [pc, #88]	@ (8008a2c <TIM_OC3_SetConfig+0xec>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d113      	bne.n	80089fe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	621a      	str	r2, [r3, #32]
}
 8008a18:	bf00      	nop
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	40012c00 	.word	0x40012c00
 8008a28:	40014400 	.word	0x40014400
 8008a2c:	40014800 	.word	0x40014800

08008a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	031b      	lsls	r3, r3, #12
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a14      	ldr	r2, [pc, #80]	@ (8008ae0 <TIM_OC4_SetConfig+0xb0>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d007      	beq.n	8008aa4 <TIM_OC4_SetConfig+0x74>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a13      	ldr	r2, [pc, #76]	@ (8008ae4 <TIM_OC4_SetConfig+0xb4>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d003      	beq.n	8008aa4 <TIM_OC4_SetConfig+0x74>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a12      	ldr	r2, [pc, #72]	@ (8008ae8 <TIM_OC4_SetConfig+0xb8>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d109      	bne.n	8008ab8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	019b      	lsls	r3, r3, #6
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	621a      	str	r2, [r3, #32]
}
 8008ad2:	bf00      	nop
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	40012c00 	.word	0x40012c00
 8008ae4:	40014400 	.word	0x40014400
 8008ae8:	40014800 	.word	0x40014800

08008aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008b30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	041b      	lsls	r3, r3, #16
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a13      	ldr	r2, [pc, #76]	@ (8008b90 <TIM_OC5_SetConfig+0xa4>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d007      	beq.n	8008b56 <TIM_OC5_SetConfig+0x6a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a12      	ldr	r2, [pc, #72]	@ (8008b94 <TIM_OC5_SetConfig+0xa8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d003      	beq.n	8008b56 <TIM_OC5_SetConfig+0x6a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a11      	ldr	r2, [pc, #68]	@ (8008b98 <TIM_OC5_SetConfig+0xac>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d109      	bne.n	8008b6a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	621a      	str	r2, [r3, #32]
}
 8008b84:	bf00      	nop
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	40012c00 	.word	0x40012c00
 8008b94:	40014400 	.word	0x40014400
 8008b98:	40014800 	.word	0x40014800

08008b9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	051b      	lsls	r3, r3, #20
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a14      	ldr	r2, [pc, #80]	@ (8008c44 <TIM_OC6_SetConfig+0xa8>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d007      	beq.n	8008c08 <TIM_OC6_SetConfig+0x6c>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a13      	ldr	r2, [pc, #76]	@ (8008c48 <TIM_OC6_SetConfig+0xac>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d003      	beq.n	8008c08 <TIM_OC6_SetConfig+0x6c>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a12      	ldr	r2, [pc, #72]	@ (8008c4c <TIM_OC6_SetConfig+0xb0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d109      	bne.n	8008c1c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	029b      	lsls	r3, r3, #10
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	40012c00 	.word	0x40012c00
 8008c48:	40014400 	.word	0x40014400
 8008c4c:	40014800 	.word	0x40014800

08008c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	f023 0201 	bic.w	r2, r3, #1
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f023 030a 	bic.w	r3, r3, #10
 8008c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	621a      	str	r2, [r3, #32]
}
 8008ca2:	bf00      	nop
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b087      	sub	sp, #28
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	f023 0210 	bic.w	r2, r3, #16
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	031b      	lsls	r3, r3, #12
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008cea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	621a      	str	r2, [r3, #32]
}
 8008d02:	bf00      	nop
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	f043 0307 	orr.w	r3, r3, #7
 8008d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	609a      	str	r2, [r3, #8]
}
 8008d3c:	bf00      	nop
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	021a      	lsls	r2, r3, #8
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	609a      	str	r2, [r3, #8]
}
 8008d7c:	bf00      	nop
 8008d7e:	371c      	adds	r7, #28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f003 031f 	and.w	r3, r3, #31
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a1a      	ldr	r2, [r3, #32]
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	43db      	mvns	r3, r3
 8008daa:	401a      	ands	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a1a      	ldr	r2, [r3, #32]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f003 031f 	and.w	r3, r3, #31
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	621a      	str	r2, [r3, #32]
}
 8008dc6:	bf00      	nop
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
	...

08008dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e04a      	b.n	8008e82 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a1f      	ldr	r2, [pc, #124]	@ (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d108      	bne.n	8008e28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a12      	ldr	r2, [pc, #72]	@ (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d004      	beq.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e54:	d10c      	bne.n	8008e70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40012c00 	.word	0x40012c00

08008e94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e06e      	b.n	8008f8e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	041b      	lsls	r3, r3, #16
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a17      	ldr	r2, [pc, #92]	@ (8008f9c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d11c      	bne.n	8008f7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4c:	051b      	lsls	r3, r3, #20
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	40012c00 	.word	0x40012c00

08008fa0 <LL_RCC_GetUSARTClockSource>:
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4013      	ands	r3, r2
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <LL_RCC_GetLPUARTClockSource>:
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4013      	ands	r3, r2
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e042      	b.n	8009078 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d106      	bne.n	800900a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fa f8df 	bl	80031c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2224      	movs	r2, #36	@ 0x24
 800900e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0201 	bic.w	r2, r2, #1
 8009020:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fe7e 	bl	8009d2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fc53 	bl	80098dc <UART_SetConfig>
 8009036:	4603      	mov	r3, r0
 8009038:	2b01      	cmp	r3, #1
 800903a:	d101      	bne.n	8009040 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e01b      	b.n	8009078 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800904e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800905e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0201 	orr.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fefd 	bl	8009e70 <UART_CheckIdleState>
 8009076:	4603      	mov	r3, r0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08a      	sub	sp, #40	@ 0x28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4613      	mov	r3, r2
 800908c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009094:	2b20      	cmp	r3, #32
 8009096:	d137      	bne.n	8009108 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_UART_Receive_IT+0x24>
 800909e:	88fb      	ldrh	r3, [r7, #6]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e030      	b.n	800910a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a18      	ldr	r2, [pc, #96]	@ (8009114 <HAL_UART_Receive_IT+0x94>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d01f      	beq.n	80090f8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d018      	beq.n	80090f8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	613b      	str	r3, [r7, #16]
   return(result);
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80090da:	627b      	str	r3, [r7, #36]	@ 0x24
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	623b      	str	r3, [r7, #32]
 80090e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	69f9      	ldr	r1, [r7, #28]
 80090ea:	6a3a      	ldr	r2, [r7, #32]
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	461a      	mov	r2, r3
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 ffce 	bl	800a0a0 <UART_Start_Receive_IT>
 8009104:	4603      	mov	r3, r0
 8009106:	e000      	b.n	800910a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009108:	2302      	movs	r3, #2
  }
}
 800910a:	4618      	mov	r0, r3
 800910c:	3728      	adds	r7, #40	@ 0x28
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	40008000 	.word	0x40008000

08009118 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08a      	sub	sp, #40	@ 0x28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800912c:	2b20      	cmp	r3, #32
 800912e:	d167      	bne.n	8009200 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <HAL_UART_Transmit_DMA+0x24>
 8009136:	88fb      	ldrh	r3, [r7, #6]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e060      	b.n	8009202 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	88fa      	ldrh	r2, [r7, #6]
 800914a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	88fa      	ldrh	r2, [r7, #6]
 8009152:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2221      	movs	r2, #33	@ 0x21
 8009162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d028      	beq.n	80091c0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009172:	4a26      	ldr	r2, [pc, #152]	@ (800920c <HAL_UART_Transmit_DMA+0xf4>)
 8009174:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800917a:	4a25      	ldr	r2, [pc, #148]	@ (8009210 <HAL_UART_Transmit_DMA+0xf8>)
 800917c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009182:	4a24      	ldr	r2, [pc, #144]	@ (8009214 <HAL_UART_Transmit_DMA+0xfc>)
 8009184:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800918a:	2200      	movs	r2, #0
 800918c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009196:	4619      	mov	r1, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3328      	adds	r3, #40	@ 0x28
 800919e:	461a      	mov	r2, r3
 80091a0:	88fb      	ldrh	r3, [r7, #6]
 80091a2:	f7fa fe13 	bl	8003dcc <HAL_DMA_Start_IT>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d009      	beq.n	80091c0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2210      	movs	r2, #16
 80091b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2220      	movs	r2, #32
 80091b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e020      	b.n	8009202 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2240      	movs	r2, #64	@ 0x40
 80091c6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	613b      	str	r3, [r7, #16]
   return(result);
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091de:	627b      	str	r3, [r7, #36]	@ 0x24
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3308      	adds	r3, #8
 80091e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e8:	623a      	str	r2, [r7, #32]
 80091ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	69f9      	ldr	r1, [r7, #28]
 80091ee:	6a3a      	ldr	r2, [r7, #32]
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e5      	bne.n	80091c8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	e000      	b.n	8009202 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009200:	2302      	movs	r3, #2
  }
}
 8009202:	4618      	mov	r0, r3
 8009204:	3728      	adds	r7, #40	@ 0x28
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	0800a433 	.word	0x0800a433
 8009210:	0800a4cd 	.word	0x0800a4cd
 8009214:	0800a4e9 	.word	0x0800a4e9

08009218 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b0ba      	sub	sp, #232	@ 0xe8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800923e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009242:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009246:	4013      	ands	r3, r2
 8009248:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800924c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009250:	2b00      	cmp	r3, #0
 8009252:	d11b      	bne.n	800928c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d015      	beq.n	800928c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009264:	f003 0320 	and.w	r3, r3, #32
 8009268:	2b00      	cmp	r3, #0
 800926a:	d105      	bne.n	8009278 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800926c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 8300 	beq.w	8009882 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
      }
      return;
 800928a:	e2fa      	b.n	8009882 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800928c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8123 	beq.w	80094dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009296:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800929a:	4b8d      	ldr	r3, [pc, #564]	@ (80094d0 <HAL_UART_IRQHandler+0x2b8>)
 800929c:	4013      	ands	r3, r2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80092a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80092a6:	4b8b      	ldr	r3, [pc, #556]	@ (80094d4 <HAL_UART_IRQHandler+0x2bc>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8116 	beq.w	80094dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d011      	beq.n	80092e0 <HAL_UART_IRQHandler+0xc8>
 80092bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2201      	movs	r2, #1
 80092ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d6:	f043 0201 	orr.w	r2, r3, #1
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d011      	beq.n	8009310 <HAL_UART_IRQHandler+0xf8>
 80092ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2202      	movs	r2, #2
 80092fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009306:	f043 0204 	orr.w	r2, r3, #4
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009314:	f003 0304 	and.w	r3, r3, #4
 8009318:	2b00      	cmp	r3, #0
 800931a:	d011      	beq.n	8009340 <HAL_UART_IRQHandler+0x128>
 800931c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00b      	beq.n	8009340 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2204      	movs	r2, #4
 800932e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009336:	f043 0202 	orr.w	r2, r3, #2
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b00      	cmp	r3, #0
 800934a:	d017      	beq.n	800937c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800934c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b00      	cmp	r3, #0
 8009356:	d105      	bne.n	8009364 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009358:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800935c:	4b5c      	ldr	r3, [pc, #368]	@ (80094d0 <HAL_UART_IRQHandler+0x2b8>)
 800935e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2208      	movs	r2, #8
 800936a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009372:	f043 0208 	orr.w	r2, r3, #8
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009384:	2b00      	cmp	r3, #0
 8009386:	d012      	beq.n	80093ae <HAL_UART_IRQHandler+0x196>
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800938c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800939c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093a4:	f043 0220 	orr.w	r2, r3, #32
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 8266 	beq.w	8009886 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d013      	beq.n	80093ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d105      	bne.n	80093de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009402:	2b40      	cmp	r3, #64	@ 0x40
 8009404:	d005      	beq.n	8009412 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800940a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800940e:	2b00      	cmp	r3, #0
 8009410:	d054      	beq.n	80094bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 ffa7 	bl	800a366 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009422:	2b40      	cmp	r3, #64	@ 0x40
 8009424:	d146      	bne.n	80094b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3308      	adds	r3, #8
 800942c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800943c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3308      	adds	r3, #8
 800944e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009452:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800945e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800946a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1d9      	bne.n	8009426 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009478:	2b00      	cmp	r3, #0
 800947a:	d017      	beq.n	80094ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009482:	4a15      	ldr	r2, [pc, #84]	@ (80094d8 <HAL_UART_IRQHandler+0x2c0>)
 8009484:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800948c:	4618      	mov	r0, r3
 800948e:	f7fa fd77 	bl	8003f80 <HAL_DMA_Abort_IT>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d019      	beq.n	80094cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800949e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80094a6:	4610      	mov	r0, r2
 80094a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094aa:	e00f      	b.n	80094cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f9ff 	bl	80098b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b2:	e00b      	b.n	80094cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f9fb 	bl	80098b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ba:	e007      	b.n	80094cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f9f7 	bl	80098b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80094ca:	e1dc      	b.n	8009886 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094cc:	bf00      	nop
    return;
 80094ce:	e1da      	b.n	8009886 <HAL_UART_IRQHandler+0x66e>
 80094d0:	10000001 	.word	0x10000001
 80094d4:	04000120 	.word	0x04000120
 80094d8:	0800a569 	.word	0x0800a569

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	f040 8170 	bne.w	80097c6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ea:	f003 0310 	and.w	r3, r3, #16
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 8169 	beq.w	80097c6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094f8:	f003 0310 	and.w	r3, r3, #16
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8162 	beq.w	80097c6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2210      	movs	r2, #16
 8009508:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009514:	2b40      	cmp	r3, #64	@ 0x40
 8009516:	f040 80d8 	bne.w	80096ca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009528:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 80af 	beq.w	8009690 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009538:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800953c:	429a      	cmp	r2, r3
 800953e:	f080 80a7 	bcs.w	8009690 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009548:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0320 	and.w	r3, r3, #32
 800955a:	2b00      	cmp	r3, #0
 800955c:	f040 8087 	bne.w	800966e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009574:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800957c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800958a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800958e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009592:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009596:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800959a:	e841 2300 	strex	r3, r2, [r1]
 800959e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80095a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1da      	bne.n	8009560 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3308      	adds	r3, #8
 80095b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095bc:	f023 0301 	bic.w	r3, r3, #1
 80095c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3308      	adds	r3, #8
 80095ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80095ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80095d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80095d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80095e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e1      	bne.n	80095aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3308      	adds	r3, #8
 80095ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80095f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3308      	adds	r3, #8
 8009606:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800960a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800960c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009610:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e3      	bne.n	80095e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2220      	movs	r2, #32
 8009622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800963a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800963c:	f023 0310 	bic.w	r3, r3, #16
 8009640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	461a      	mov	r2, r3
 800964a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800964e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009650:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009654:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800965c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e4      	bne.n	800962c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009668:	4618      	mov	r0, r3
 800966a:	f7fa fc2a 	bl	8003ec2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2202      	movs	r2, #2
 8009672:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009680:	b29b      	uxth	r3, r3
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	b29b      	uxth	r3, r3
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f91b 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800968e:	e0fc      	b.n	800988a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800969a:	429a      	cmp	r2, r3
 800969c:	f040 80f5 	bne.w	800988a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b20      	cmp	r3, #32
 80096b0:	f040 80eb 	bne.w	800988a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2202      	movs	r2, #2
 80096b8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f8fe 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
      return;
 80096c8:	e0df      	b.n	800988a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80d1 	beq.w	800988e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80096ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 80cc 	beq.w	800988e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fe:	e853 3f00 	ldrex	r3, [r3]
 8009702:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800970a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009718:	647b      	str	r3, [r7, #68]	@ 0x44
 800971a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800971e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009720:	e841 2300 	strex	r3, r2, [r1]
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1e4      	bne.n	80096f6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3308      	adds	r3, #8
 8009732:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	623b      	str	r3, [r7, #32]
   return(result);
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009742:	f023 0301 	bic.w	r3, r3, #1
 8009746:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3308      	adds	r3, #8
 8009750:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009754:	633a      	str	r2, [r7, #48]	@ 0x30
 8009756:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009758:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800975a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800975c:	e841 2300 	strex	r3, r2, [r1]
 8009760:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1e1      	bne.n	800972c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2220      	movs	r2, #32
 800976c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	60fb      	str	r3, [r7, #12]
   return(result);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f023 0310 	bic.w	r3, r3, #16
 8009790:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	461a      	mov	r2, r3
 800979a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	69b9      	ldr	r1, [r7, #24]
 80097a4:	69fa      	ldr	r2, [r7, #28]
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	617b      	str	r3, [r7, #20]
   return(result);
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e4      	bne.n	800977c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2202      	movs	r2, #2
 80097b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f880 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097c4:	e063      	b.n	800988e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00e      	beq.n	80097f0 <HAL_UART_IRQHandler+0x5d8>
 80097d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d008      	beq.n	80097f0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80097e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f001 fc1f 	bl	800b02c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097ee:	e051      	b.n	8009894 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80097f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d014      	beq.n	8009826 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009804:	2b00      	cmp	r3, #0
 8009806:	d105      	bne.n	8009814 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800980c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d008      	beq.n	8009826 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009818:	2b00      	cmp	r3, #0
 800981a:	d03a      	beq.n	8009892 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	4798      	blx	r3
    }
    return;
 8009824:	e035      	b.n	8009892 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800982a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800982e:	2b00      	cmp	r3, #0
 8009830:	d009      	beq.n	8009846 <HAL_UART_IRQHandler+0x62e>
 8009832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fea8 	bl	800a594 <UART_EndTransmit_IT>
    return;
 8009844:	e026      	b.n	8009894 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800984a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d009      	beq.n	8009866 <HAL_UART_IRQHandler+0x64e>
 8009852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009856:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 fbf8 	bl	800b054 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009864:	e016      	b.n	8009894 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800986a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d010      	beq.n	8009894 <HAL_UART_IRQHandler+0x67c>
 8009872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009876:	2b00      	cmp	r3, #0
 8009878:	da0c      	bge.n	8009894 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f001 fbe0 	bl	800b040 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009880:	e008      	b.n	8009894 <HAL_UART_IRQHandler+0x67c>
      return;
 8009882:	bf00      	nop
 8009884:	e006      	b.n	8009894 <HAL_UART_IRQHandler+0x67c>
    return;
 8009886:	bf00      	nop
 8009888:	e004      	b.n	8009894 <HAL_UART_IRQHandler+0x67c>
      return;
 800988a:	bf00      	nop
 800988c:	e002      	b.n	8009894 <HAL_UART_IRQHandler+0x67c>
      return;
 800988e:	bf00      	nop
 8009890:	e000      	b.n	8009894 <HAL_UART_IRQHandler+0x67c>
    return;
 8009892:	bf00      	nop
  }
}
 8009894:	37e8      	adds	r7, #232	@ 0xe8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop

0800989c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098e0:	b08c      	sub	sp, #48	@ 0x30
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	431a      	orrs	r2, r3
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	431a      	orrs	r2, r3
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	4313      	orrs	r3, r2
 8009902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4baf      	ldr	r3, [pc, #700]	@ (8009bc8 <UART_SetConfig+0x2ec>)
 800990c:	4013      	ands	r3, r2
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009914:	430b      	orrs	r3, r1
 8009916:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4aa4      	ldr	r2, [pc, #656]	@ (8009bcc <UART_SetConfig+0x2f0>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d004      	beq.n	8009948 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009944:	4313      	orrs	r3, r2
 8009946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009952:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	6812      	ldr	r2, [r2, #0]
 800995a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800995c:	430b      	orrs	r3, r1
 800995e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009966:	f023 010f 	bic.w	r1, r3, #15
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a95      	ldr	r2, [pc, #596]	@ (8009bd0 <UART_SetConfig+0x2f4>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d125      	bne.n	80099cc <UART_SetConfig+0xf0>
 8009980:	2003      	movs	r0, #3
 8009982:	f7ff fb0d 	bl	8008fa0 <LL_RCC_GetUSARTClockSource>
 8009986:	4603      	mov	r3, r0
 8009988:	2b03      	cmp	r3, #3
 800998a:	d81b      	bhi.n	80099c4 <UART_SetConfig+0xe8>
 800998c:	a201      	add	r2, pc, #4	@ (adr r2, 8009994 <UART_SetConfig+0xb8>)
 800998e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009992:	bf00      	nop
 8009994:	080099a5 	.word	0x080099a5
 8009998:	080099b5 	.word	0x080099b5
 800999c:	080099ad 	.word	0x080099ad
 80099a0:	080099bd 	.word	0x080099bd
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099aa:	e042      	b.n	8009a32 <UART_SetConfig+0x156>
 80099ac:	2302      	movs	r3, #2
 80099ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099b2:	e03e      	b.n	8009a32 <UART_SetConfig+0x156>
 80099b4:	2304      	movs	r3, #4
 80099b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ba:	e03a      	b.n	8009a32 <UART_SetConfig+0x156>
 80099bc:	2308      	movs	r3, #8
 80099be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099c2:	e036      	b.n	8009a32 <UART_SetConfig+0x156>
 80099c4:	2310      	movs	r3, #16
 80099c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ca:	e032      	b.n	8009a32 <UART_SetConfig+0x156>
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a7e      	ldr	r2, [pc, #504]	@ (8009bcc <UART_SetConfig+0x2f0>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d12a      	bne.n	8009a2c <UART_SetConfig+0x150>
 80099d6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80099da:	f7ff faf1 	bl	8008fc0 <LL_RCC_GetLPUARTClockSource>
 80099de:	4603      	mov	r3, r0
 80099e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099e4:	d01a      	beq.n	8009a1c <UART_SetConfig+0x140>
 80099e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099ea:	d81b      	bhi.n	8009a24 <UART_SetConfig+0x148>
 80099ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f0:	d00c      	beq.n	8009a0c <UART_SetConfig+0x130>
 80099f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f6:	d815      	bhi.n	8009a24 <UART_SetConfig+0x148>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <UART_SetConfig+0x128>
 80099fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a00:	d008      	beq.n	8009a14 <UART_SetConfig+0x138>
 8009a02:	e00f      	b.n	8009a24 <UART_SetConfig+0x148>
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a0a:	e012      	b.n	8009a32 <UART_SetConfig+0x156>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a12:	e00e      	b.n	8009a32 <UART_SetConfig+0x156>
 8009a14:	2304      	movs	r3, #4
 8009a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a1a:	e00a      	b.n	8009a32 <UART_SetConfig+0x156>
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a22:	e006      	b.n	8009a32 <UART_SetConfig+0x156>
 8009a24:	2310      	movs	r3, #16
 8009a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2a:	e002      	b.n	8009a32 <UART_SetConfig+0x156>
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a65      	ldr	r2, [pc, #404]	@ (8009bcc <UART_SetConfig+0x2f0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	f040 8097 	bne.w	8009b6c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a42:	2b08      	cmp	r3, #8
 8009a44:	d823      	bhi.n	8009a8e <UART_SetConfig+0x1b2>
 8009a46:	a201      	add	r2, pc, #4	@ (adr r2, 8009a4c <UART_SetConfig+0x170>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009a71 	.word	0x08009a71
 8009a50:	08009a8f 	.word	0x08009a8f
 8009a54:	08009a79 	.word	0x08009a79
 8009a58:	08009a8f 	.word	0x08009a8f
 8009a5c:	08009a7f 	.word	0x08009a7f
 8009a60:	08009a8f 	.word	0x08009a8f
 8009a64:	08009a8f 	.word	0x08009a8f
 8009a68:	08009a8f 	.word	0x08009a8f
 8009a6c:	08009a87 	.word	0x08009a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a70:	f7fd fb80 	bl	8007174 <HAL_RCC_GetPCLK1Freq>
 8009a74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a76:	e010      	b.n	8009a9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a78:	4b56      	ldr	r3, [pc, #344]	@ (8009bd4 <UART_SetConfig+0x2f8>)
 8009a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a7c:	e00d      	b.n	8009a9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a7e:	f7fd faf9 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8009a82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a84:	e009      	b.n	8009a9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a8c:	e005      	b.n	8009a9a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 812b 	beq.w	8009cf8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8009bd8 <UART_SetConfig+0x2fc>)
 8009aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aac:	461a      	mov	r2, r3
 8009aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ab4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	4613      	mov	r3, r2
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	4413      	add	r3, r2
 8009ac0:	69ba      	ldr	r2, [r7, #24]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d305      	bcc.n	8009ad2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d903      	bls.n	8009ada <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ad8:	e10e      	b.n	8009cf8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	2200      	movs	r2, #0
 8009ade:	60bb      	str	r3, [r7, #8]
 8009ae0:	60fa      	str	r2, [r7, #12]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8009bd8 <UART_SetConfig+0x2fc>)
 8009ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	2200      	movs	r2, #0
 8009af0:	603b      	str	r3, [r7, #0]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009afc:	f7f7 f89c 	bl	8000c38 <__aeabi_uldivmod>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4610      	mov	r0, r2
 8009b06:	4619      	mov	r1, r3
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	f04f 0300 	mov.w	r3, #0
 8009b10:	020b      	lsls	r3, r1, #8
 8009b12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b16:	0202      	lsls	r2, r0, #8
 8009b18:	6979      	ldr	r1, [r7, #20]
 8009b1a:	6849      	ldr	r1, [r1, #4]
 8009b1c:	0849      	lsrs	r1, r1, #1
 8009b1e:	2000      	movs	r0, #0
 8009b20:	460c      	mov	r4, r1
 8009b22:	4605      	mov	r5, r0
 8009b24:	eb12 0804 	adds.w	r8, r2, r4
 8009b28:	eb43 0905 	adc.w	r9, r3, r5
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	469a      	mov	sl, r3
 8009b34:	4693      	mov	fp, r2
 8009b36:	4652      	mov	r2, sl
 8009b38:	465b      	mov	r3, fp
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	f7f7 f87b 	bl	8000c38 <__aeabi_uldivmod>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4613      	mov	r3, r2
 8009b48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b50:	d308      	bcc.n	8009b64 <UART_SetConfig+0x288>
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b58:	d204      	bcs.n	8009b64 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6a3a      	ldr	r2, [r7, #32]
 8009b60:	60da      	str	r2, [r3, #12]
 8009b62:	e0c9      	b.n	8009cf8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b6a:	e0c5      	b.n	8009cf8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b74:	d16d      	bne.n	8009c52 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009b76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	2b07      	cmp	r3, #7
 8009b7e:	d82d      	bhi.n	8009bdc <UART_SetConfig+0x300>
 8009b80:	a201      	add	r2, pc, #4	@ (adr r2, 8009b88 <UART_SetConfig+0x2ac>)
 8009b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b86:	bf00      	nop
 8009b88:	08009ba9 	.word	0x08009ba9
 8009b8c:	08009bb1 	.word	0x08009bb1
 8009b90:	08009bdd 	.word	0x08009bdd
 8009b94:	08009bb7 	.word	0x08009bb7
 8009b98:	08009bdd 	.word	0x08009bdd
 8009b9c:	08009bdd 	.word	0x08009bdd
 8009ba0:	08009bdd 	.word	0x08009bdd
 8009ba4:	08009bbf 	.word	0x08009bbf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ba8:	f7fd fafa 	bl	80071a0 <HAL_RCC_GetPCLK2Freq>
 8009bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bae:	e01b      	b.n	8009be8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bb0:	4b08      	ldr	r3, [pc, #32]	@ (8009bd4 <UART_SetConfig+0x2f8>)
 8009bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bb4:	e018      	b.n	8009be8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bb6:	f7fd fa5d 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8009bba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bbc:	e014      	b.n	8009be8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bc4:	e010      	b.n	8009be8 <UART_SetConfig+0x30c>
 8009bc6:	bf00      	nop
 8009bc8:	cfff69f3 	.word	0xcfff69f3
 8009bcc:	40008000 	.word	0x40008000
 8009bd0:	40013800 	.word	0x40013800
 8009bd4:	00f42400 	.word	0x00f42400
 8009bd8:	080135a0 	.word	0x080135a0
      default:
        pclk = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009be6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 8084 	beq.w	8009cf8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8009d24 <UART_SetConfig+0x448>)
 8009bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c02:	005a      	lsls	r2, r3, #1
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	085b      	lsrs	r3, r3, #1
 8009c0a:	441a      	add	r2, r3
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c14:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	2b0f      	cmp	r3, #15
 8009c1a:	d916      	bls.n	8009c4a <UART_SetConfig+0x36e>
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c22:	d212      	bcs.n	8009c4a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f023 030f 	bic.w	r3, r3, #15
 8009c2c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	085b      	lsrs	r3, r3, #1
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f003 0307 	and.w	r3, r3, #7
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	8bfb      	ldrh	r3, [r7, #30]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	8bfa      	ldrh	r2, [r7, #30]
 8009c46:	60da      	str	r2, [r3, #12]
 8009c48:	e056      	b.n	8009cf8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c50:	e052      	b.n	8009cf8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c56:	3b01      	subs	r3, #1
 8009c58:	2b07      	cmp	r3, #7
 8009c5a:	d822      	bhi.n	8009ca2 <UART_SetConfig+0x3c6>
 8009c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c64 <UART_SetConfig+0x388>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009c85 	.word	0x08009c85
 8009c68:	08009c8d 	.word	0x08009c8d
 8009c6c:	08009ca3 	.word	0x08009ca3
 8009c70:	08009c93 	.word	0x08009c93
 8009c74:	08009ca3 	.word	0x08009ca3
 8009c78:	08009ca3 	.word	0x08009ca3
 8009c7c:	08009ca3 	.word	0x08009ca3
 8009c80:	08009c9b 	.word	0x08009c9b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c84:	f7fd fa8c 	bl	80071a0 <HAL_RCC_GetPCLK2Freq>
 8009c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c8a:	e010      	b.n	8009cae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c8c:	4b26      	ldr	r3, [pc, #152]	@ (8009d28 <UART_SetConfig+0x44c>)
 8009c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c90:	e00d      	b.n	8009cae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c92:	f7fd f9ef 	bl	8007074 <HAL_RCC_GetSysClockFreq>
 8009c96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c98:	e009      	b.n	8009cae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ca0:	e005      	b.n	8009cae <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cac:	bf00      	nop
    }

    if (pclk != 0U)
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d021      	beq.n	8009cf8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8009d24 <UART_SetConfig+0x448>)
 8009cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	085b      	lsrs	r3, r3, #1
 8009ccc:	441a      	add	r2, r3
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	2b0f      	cmp	r3, #15
 8009cdc:	d909      	bls.n	8009cf2 <UART_SetConfig+0x416>
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ce4:	d205      	bcs.n	8009cf2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	60da      	str	r2, [r3, #12]
 8009cf0:	e002      	b.n	8009cf8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2200      	movs	r2, #0
 8009d12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3730      	adds	r7, #48	@ 0x30
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d22:	bf00      	nop
 8009d24:	080135a0 	.word	0x080135a0
 8009d28:	00f42400 	.word	0x00f42400

08009d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d38:	f003 0308 	and.w	r3, r3, #8
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00a      	beq.n	8009d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d7c:	f003 0302 	and.w	r3, r3, #2
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00a      	beq.n	8009d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	f003 0304 	and.w	r3, r3, #4
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc0:	f003 0310 	and.w	r3, r3, #16
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00a      	beq.n	8009dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de2:	f003 0320 	and.w	r3, r3, #32
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00a      	beq.n	8009e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d01a      	beq.n	8009e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e2a:	d10a      	bne.n	8009e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	605a      	str	r2, [r3, #4]
  }
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b098      	sub	sp, #96	@ 0x60
 8009e74:	af02      	add	r7, sp, #8
 8009e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e80:	f7f9 fc9c 	bl	80037bc <HAL_GetTick>
 8009e84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0308 	and.w	r3, r3, #8
 8009e90:	2b08      	cmp	r3, #8
 8009e92:	d12f      	bne.n	8009ef4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f88e 	bl	8009fc4 <UART_WaitOnFlagUntilTimeout>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d022      	beq.n	8009ef4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ece:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e6      	bne.n	8009eae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e063      	b.n	8009fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0304 	and.w	r3, r3, #4
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d149      	bne.n	8009f96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f857 	bl	8009fc4 <UART_WaitOnFlagUntilTimeout>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d03c      	beq.n	8009f96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	623b      	str	r3, [r7, #32]
   return(result);
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e6      	bne.n	8009f1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3308      	adds	r3, #8
 8009f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	e853 3f00 	ldrex	r3, [r3]
 8009f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f023 0301 	bic.w	r3, r3, #1
 8009f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f6e:	61fa      	str	r2, [r7, #28]
 8009f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	69b9      	ldr	r1, [r7, #24]
 8009f74:	69fa      	ldr	r2, [r7, #28]
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1e5      	bne.n	8009f4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e012      	b.n	8009fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3758      	adds	r7, #88	@ 0x58
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fd4:	e04f      	b.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fdc:	d04b      	beq.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fde:	f7f9 fbed 	bl	80037bc <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d302      	bcc.n	8009ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e04e      	b.n	800a096 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0304 	and.w	r3, r3, #4
 800a002:	2b00      	cmp	r3, #0
 800a004:	d037      	beq.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b80      	cmp	r3, #128	@ 0x80
 800a00a:	d034      	beq.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b40      	cmp	r3, #64	@ 0x40
 800a010:	d031      	beq.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	f003 0308 	and.w	r3, r3, #8
 800a01c:	2b08      	cmp	r3, #8
 800a01e:	d110      	bne.n	800a042 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2208      	movs	r2, #8
 800a026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f99c 	bl	800a366 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2208      	movs	r2, #8
 800a032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e029      	b.n	800a096 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a04c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a050:	d111      	bne.n	800a076 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a05a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 f982 	bl	800a366 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2220      	movs	r2, #32
 800a066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e00f      	b.n	800a096 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	4013      	ands	r3, r2
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	429a      	cmp	r2, r3
 800a084:	bf0c      	ite	eq
 800a086:	2301      	moveq	r3, #1
 800a088:	2300      	movne	r3, #0
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	429a      	cmp	r2, r3
 800a092:	d0a0      	beq.n	8009fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b0a3      	sub	sp, #140	@ 0x8c
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	88fa      	ldrh	r2, [r7, #6]
 800a0b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	88fa      	ldrh	r2, [r7, #6]
 800a0c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0d2:	d10e      	bne.n	800a0f2 <UART_Start_Receive_IT+0x52>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d105      	bne.n	800a0e8 <UART_Start_Receive_IT+0x48>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a0e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a0e6:	e02d      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	22ff      	movs	r2, #255	@ 0xff
 800a0ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a0f0:	e028      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10d      	bne.n	800a116 <UART_Start_Receive_IT+0x76>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d104      	bne.n	800a10c <UART_Start_Receive_IT+0x6c>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	22ff      	movs	r2, #255	@ 0xff
 800a106:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a10a:	e01b      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	227f      	movs	r2, #127	@ 0x7f
 800a110:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a114:	e016      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a11e:	d10d      	bne.n	800a13c <UART_Start_Receive_IT+0x9c>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d104      	bne.n	800a132 <UART_Start_Receive_IT+0x92>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	227f      	movs	r2, #127	@ 0x7f
 800a12c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a130:	e008      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	223f      	movs	r2, #63	@ 0x3f
 800a136:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a13a:	e003      	b.n	800a144 <UART_Start_Receive_IT+0xa4>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2222      	movs	r2, #34	@ 0x22
 800a150:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3308      	adds	r3, #8
 800a15a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a15e:	e853 3f00 	ldrex	r3, [r3]
 800a162:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a164:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a166:	f043 0301 	orr.w	r3, r3, #1
 800a16a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3308      	adds	r3, #8
 800a174:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a178:	673a      	str	r2, [r7, #112]	@ 0x70
 800a17a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a17e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a186:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e3      	bne.n	800a154 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a194:	d14f      	bne.n	800a236 <UART_Start_Receive_IT+0x196>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a19c:	88fa      	ldrh	r2, [r7, #6]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d349      	bcc.n	800a236 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1aa:	d107      	bne.n	800a1bc <UART_Start_Receive_IT+0x11c>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d103      	bne.n	800a1bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4a47      	ldr	r2, [pc, #284]	@ (800a2d4 <UART_Start_Receive_IT+0x234>)
 800a1b8:	675a      	str	r2, [r3, #116]	@ 0x74
 800a1ba:	e002      	b.n	800a1c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4a46      	ldr	r2, [pc, #280]	@ (800a2d8 <UART_Start_Receive_IT+0x238>)
 800a1c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d01a      	beq.n	800a200 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a1ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1ee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a1f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a1f4:	e841 2300 	strex	r3, r2, [r1]
 800a1f8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a1fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e4      	bne.n	800a1ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3308      	adds	r3, #8
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a216:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3308      	adds	r3, #8
 800a21e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a220:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a222:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a224:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a228:	e841 2300 	strex	r3, r2, [r1]
 800a22c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e5      	bne.n	800a200 <UART_Start_Receive_IT+0x160>
 800a234:	e046      	b.n	800a2c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a23e:	d107      	bne.n	800a250 <UART_Start_Receive_IT+0x1b0>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d103      	bne.n	800a250 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4a24      	ldr	r2, [pc, #144]	@ (800a2dc <UART_Start_Receive_IT+0x23c>)
 800a24c:	675a      	str	r2, [r3, #116]	@ 0x74
 800a24e:	e002      	b.n	800a256 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4a23      	ldr	r2, [pc, #140]	@ (800a2e0 <UART_Start_Receive_IT+0x240>)
 800a254:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d019      	beq.n	800a292 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a266:	e853 3f00 	ldrex	r3, [r3]
 800a26a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a272:	677b      	str	r3, [r7, #116]	@ 0x74
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	461a      	mov	r2, r3
 800a27a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a27c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a27e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e6      	bne.n	800a25e <UART_Start_Receive_IT+0x1be>
 800a290:	e018      	b.n	800a2c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	e853 3f00 	ldrex	r3, [r3]
 800a29e:	613b      	str	r3, [r7, #16]
   return(result);
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f043 0320 	orr.w	r3, r3, #32
 800a2a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2b0:	623b      	str	r3, [r7, #32]
 800a2b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	69f9      	ldr	r1, [r7, #28]
 800a2b6:	6a3a      	ldr	r2, [r7, #32]
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e6      	bne.n	800a292 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	378c      	adds	r7, #140	@ 0x8c
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	0800acc1 	.word	0x0800acc1
 800a2d8:	0800a95d 	.word	0x0800a95d
 800a2dc:	0800a7a5 	.word	0x0800a7a5
 800a2e0:	0800a5ed 	.word	0x0800a5ed

0800a2e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b08f      	sub	sp, #60	@ 0x3c
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a300:	637b      	str	r3, [r7, #52]	@ 0x34
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a30c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e6      	bne.n	800a2ec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3308      	adds	r3, #8
 800a324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	e853 3f00 	ldrex	r3, [r3]
 800a32c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a334:	633b      	str	r3, [r7, #48]	@ 0x30
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3308      	adds	r3, #8
 800a33c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a33e:	61ba      	str	r2, [r7, #24]
 800a340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a342:	6979      	ldr	r1, [r7, #20]
 800a344:	69ba      	ldr	r2, [r7, #24]
 800a346:	e841 2300 	strex	r3, r2, [r1]
 800a34a:	613b      	str	r3, [r7, #16]
   return(result);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1e5      	bne.n	800a31e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2220      	movs	r2, #32
 800a356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a35a:	bf00      	nop
 800a35c:	373c      	adds	r7, #60	@ 0x3c
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a366:	b480      	push	{r7}
 800a368:	b095      	sub	sp, #84	@ 0x54
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a376:	e853 3f00 	ldrex	r3, [r3]
 800a37a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a38c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a38e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a390:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a392:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a394:	e841 2300 	strex	r3, r2, [r1]
 800a398:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1e6      	bne.n	800a36e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	e853 3f00 	ldrex	r3, [r3]
 800a3ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3b6:	f023 0301 	bic.w	r3, r3, #1
 800a3ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e3      	bne.n	800a3a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d118      	bne.n	800a412 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	e853 3f00 	ldrex	r3, [r3]
 800a3ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	f023 0310 	bic.w	r3, r3, #16
 800a3f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3fe:	61bb      	str	r3, [r7, #24]
 800a400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a402:	6979      	ldr	r1, [r7, #20]
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	613b      	str	r3, [r7, #16]
   return(result);
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1e6      	bne.n	800a3e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2220      	movs	r2, #32
 800a416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a426:	bf00      	nop
 800a428:	3754      	adds	r7, #84	@ 0x54
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b090      	sub	sp, #64	@ 0x40
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d137      	bne.n	800a4be <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a450:	2200      	movs	r2, #0
 800a452:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3308      	adds	r3, #8
 800a45c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a460:	e853 3f00 	ldrex	r3, [r3]
 800a464:	623b      	str	r3, [r7, #32]
   return(result);
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a46c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3308      	adds	r3, #8
 800a474:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a476:	633a      	str	r2, [r7, #48]	@ 0x30
 800a478:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a47c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e5      	bne.n	800a456 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	e853 3f00 	ldrex	r3, [r3]
 800a496:	60fb      	str	r3, [r7, #12]
   return(result);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a49e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a8:	61fb      	str	r3, [r7, #28]
 800a4aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	69b9      	ldr	r1, [r7, #24]
 800a4ae:	69fa      	ldr	r2, [r7, #28]
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	617b      	str	r3, [r7, #20]
   return(result);
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e6      	bne.n	800a48a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4bc:	e002      	b.n	800a4c4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a4be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a4c0:	f7f8 f852 	bl	8002568 <HAL_UART_TxCpltCallback>
}
 800a4c4:	bf00      	nop
 800a4c6:	3740      	adds	r7, #64	@ 0x40
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7ff f9de 	bl	800989c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4e0:	bf00      	nop
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a504:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a510:	2b80      	cmp	r3, #128	@ 0x80
 800a512:	d109      	bne.n	800a528 <UART_DMAError+0x40>
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	2b21      	cmp	r3, #33	@ 0x21
 800a518:	d106      	bne.n	800a528 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a522:	6978      	ldr	r0, [r7, #20]
 800a524:	f7ff fede 	bl	800a2e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a532:	2b40      	cmp	r3, #64	@ 0x40
 800a534:	d109      	bne.n	800a54a <UART_DMAError+0x62>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b22      	cmp	r3, #34	@ 0x22
 800a53a:	d106      	bne.n	800a54a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a544:	6978      	ldr	r0, [r7, #20]
 800a546:	f7ff ff0e 	bl	800a366 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a550:	f043 0210 	orr.w	r2, r3, #16
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a55a:	6978      	ldr	r0, [r7, #20]
 800a55c:	f7ff f9a8 	bl	80098b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a560:	bf00      	nop
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a574:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff f992 	bl	80098b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	e853 3f00 	ldrex	r3, [r3]
 800a5a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5b0:	61fb      	str	r3, [r7, #28]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	61bb      	str	r3, [r7, #24]
 800a5bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5be:	6979      	ldr	r1, [r7, #20]
 800a5c0:	69ba      	ldr	r2, [r7, #24]
 800a5c2:	e841 2300 	strex	r3, r2, [r1]
 800a5c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e6      	bne.n	800a59c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7f7 ffc3 	bl	8002568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5e2:	bf00      	nop
 800a5e4:	3720      	adds	r7, #32
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b09c      	sub	sp, #112	@ 0x70
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a5fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a604:	2b22      	cmp	r3, #34	@ 0x22
 800a606:	f040 80be 	bne.w	800a786 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a610:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a614:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a618:	b2d9      	uxtb	r1, r3
 800a61a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a624:	400a      	ands	r2, r1
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f040 80a1 	bne.w	800a796 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a672:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a674:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a678:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e6      	bne.n	800a654 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3308      	adds	r3, #8
 800a68c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a698:	f023 0301 	bic.w	r3, r3, #1
 800a69c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a6a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a6a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e5      	bne.n	800a686 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a33      	ldr	r2, [pc, #204]	@ (800a7a0 <UART_RxISR_8BIT+0x1b4>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d01f      	beq.n	800a718 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ee:	e853 3f00 	ldrex	r3, [r3]
 800a6f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	461a      	mov	r2, r3
 800a702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a704:	633b      	str	r3, [r7, #48]	@ 0x30
 800a706:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a708:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a70a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a70c:	e841 2300 	strex	r3, r2, [r1]
 800a710:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1e6      	bne.n	800a6e6 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d12e      	bne.n	800a77e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	60fb      	str	r3, [r7, #12]
   return(result);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f023 0310 	bic.w	r3, r3, #16
 800a73a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a744:	61fb      	str	r3, [r7, #28]
 800a746:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	69b9      	ldr	r1, [r7, #24]
 800a74a:	69fa      	ldr	r2, [r7, #28]
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	617b      	str	r3, [r7, #20]
   return(result);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e6      	bne.n	800a726 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	f003 0310 	and.w	r3, r3, #16
 800a762:	2b10      	cmp	r3, #16
 800a764:	d103      	bne.n	800a76e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2210      	movs	r2, #16
 800a76c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a774:	4619      	mov	r1, r3
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff f8a4 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a77c:	e00b      	b.n	800a796 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7f7 fed4 	bl	800252c <HAL_UART_RxCpltCallback>
}
 800a784:	e007      	b.n	800a796 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	699a      	ldr	r2, [r3, #24]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f042 0208 	orr.w	r2, r2, #8
 800a794:	619a      	str	r2, [r3, #24]
}
 800a796:	bf00      	nop
 800a798:	3770      	adds	r7, #112	@ 0x70
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	40008000 	.word	0x40008000

0800a7a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b09c      	sub	sp, #112	@ 0x70
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7bc:	2b22      	cmp	r3, #34	@ 0x22
 800a7be:	f040 80be 	bne.w	800a93e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a7d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a7d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a7da:	4013      	ands	r3, r2
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7e6:	1c9a      	adds	r2, r3, #2
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a804:	b29b      	uxth	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	f040 80a1 	bne.w	800a94e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a81c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a820:	667b      	str	r3, [r7, #100]	@ 0x64
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a82a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a82c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a830:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e6      	bne.n	800a80c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3308      	adds	r3, #8
 800a844:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a848:	e853 3f00 	ldrex	r3, [r3]
 800a84c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a850:	f023 0301 	bic.w	r3, r3, #1
 800a854:	663b      	str	r3, [r7, #96]	@ 0x60
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3308      	adds	r3, #8
 800a85c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a85e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a862:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a864:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a866:	e841 2300 	strex	r3, r2, [r1]
 800a86a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1e5      	bne.n	800a83e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2220      	movs	r2, #32
 800a876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a33      	ldr	r2, [pc, #204]	@ (800a958 <UART_RxISR_16BIT+0x1b4>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d01f      	beq.n	800a8d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d018      	beq.n	800a8d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8c4:	e841 2300 	strex	r3, r2, [r1]
 800a8c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d1e6      	bne.n	800a89e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d12e      	bne.n	800a936 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	e853 3f00 	ldrex	r3, [r3]
 800a8ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	f023 0310 	bic.w	r3, r3, #16
 800a8f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8fc:	61bb      	str	r3, [r7, #24]
 800a8fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a900:	6979      	ldr	r1, [r7, #20]
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	e841 2300 	strex	r3, r2, [r1]
 800a908:	613b      	str	r3, [r7, #16]
   return(result);
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1e6      	bne.n	800a8de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	f003 0310 	and.w	r3, r3, #16
 800a91a:	2b10      	cmp	r3, #16
 800a91c:	d103      	bne.n	800a926 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2210      	movs	r2, #16
 800a924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7fe ffc8 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a934:	e00b      	b.n	800a94e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7f7 fdf8 	bl	800252c <HAL_UART_RxCpltCallback>
}
 800a93c:	e007      	b.n	800a94e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	699a      	ldr	r2, [r3, #24]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f042 0208 	orr.w	r2, r2, #8
 800a94c:	619a      	str	r2, [r3, #24]
}
 800a94e:	bf00      	nop
 800a950:	3770      	adds	r7, #112	@ 0x70
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	40008000 	.word	0x40008000

0800a95c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b0ac      	sub	sp, #176	@ 0xb0
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a96a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	69db      	ldr	r3, [r3, #28]
 800a974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a992:	2b22      	cmp	r3, #34	@ 0x22
 800a994:	f040 8183 	bne.w	800ac9e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a99e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a9a2:	e126      	b.n	800abf2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9aa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a9ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a9b2:	b2d9      	uxtb	r1, r3
 800a9b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9be:	400a      	ands	r2, r1
 800a9c0:	b2d2      	uxtb	r2, r2
 800a9c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a9ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d053      	beq.n	800aa9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d011      	beq.n	800aa26 <UART_RxISR_8BIT_FIFOEN+0xca>
 800aa02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aa06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00b      	beq.n	800aa26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2201      	movs	r2, #1
 800aa14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa1c:	f043 0201 	orr.w	r2, r3, #1
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d011      	beq.n	800aa56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800aa32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00b      	beq.n	800aa56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2202      	movs	r2, #2
 800aa44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa4c:	f043 0204 	orr.w	r2, r3, #4
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d011      	beq.n	800aa86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800aa62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00b      	beq.n	800aa86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2204      	movs	r2, #4
 800aa74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa7c:	f043 0202 	orr.w	r2, r3, #2
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d006      	beq.n	800aa9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7fe ff0d 	bl	80098b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f040 80a3 	bne.w	800abf2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aab4:	e853 3f00 	ldrex	r3, [r3]
 800aab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800aaba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aabc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	461a      	mov	r2, r3
 800aaca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aace:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aad0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800aad4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800aadc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e4      	bne.n	800aaac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3308      	adds	r3, #8
 800aae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800aaf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aaf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aaf8:	f023 0301 	bic.w	r3, r3, #1
 800aafc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3308      	adds	r3, #8
 800ab06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab0a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ab0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ab10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ab12:	e841 2300 	strex	r3, r2, [r1]
 800ab16:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ab18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1e1      	bne.n	800aae2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2220      	movs	r2, #32
 800ab22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a60      	ldr	r2, [pc, #384]	@ (800acb8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d021      	beq.n	800ab80 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d01a      	beq.n	800ab80 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab52:	e853 3f00 	ldrex	r3, [r3]
 800ab56:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ab58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ab6c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab6e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab74:	e841 2300 	strex	r3, r2, [r1]
 800ab78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ab7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1e4      	bne.n	800ab4a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d130      	bne.n	800abea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab96:	e853 3f00 	ldrex	r3, [r3]
 800ab9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	f023 0310 	bic.w	r3, r3, #16
 800aba2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800abb0:	643b      	str	r3, [r7, #64]	@ 0x40
 800abb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abb8:	e841 2300 	strex	r3, r2, [r1]
 800abbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e4      	bne.n	800ab8e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	f003 0310 	and.w	r3, r3, #16
 800abce:	2b10      	cmp	r3, #16
 800abd0:	d103      	bne.n	800abda <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2210      	movs	r2, #16
 800abd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7fe fe6e 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800abe8:	e00e      	b.n	800ac08 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7f7 fc9e 	bl	800252c <HAL_UART_RxCpltCallback>
        break;
 800abf0:	e00a      	b.n	800ac08 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800abf2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d006      	beq.n	800ac08 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800abfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f47f aece 	bne.w	800a9a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac0e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ac12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d049      	beq.n	800acae <UART_RxISR_8BIT_FIFOEN+0x352>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac20:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d242      	bcs.n	800acae <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	e853 3f00 	ldrex	r3, [r3]
 800ac36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3308      	adds	r3, #8
 800ac48:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ac4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e3      	bne.n	800ac28 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a16      	ldr	r2, [pc, #88]	@ (800acbc <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ac64:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	e853 3f00 	ldrex	r3, [r3]
 800ac72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f043 0320 	orr.w	r3, r3, #32
 800ac7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ac88:	61bb      	str	r3, [r7, #24]
 800ac8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	6979      	ldr	r1, [r7, #20]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	613b      	str	r3, [r7, #16]
   return(result);
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e4      	bne.n	800ac66 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac9c:	e007      	b.n	800acae <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	699a      	ldr	r2, [r3, #24]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f042 0208 	orr.w	r2, r2, #8
 800acac:	619a      	str	r2, [r3, #24]
}
 800acae:	bf00      	nop
 800acb0:	37b0      	adds	r7, #176	@ 0xb0
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	40008000 	.word	0x40008000
 800acbc:	0800a5ed 	.word	0x0800a5ed

0800acc0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b0ae      	sub	sp, #184	@ 0xb8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800acce:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acf6:	2b22      	cmp	r3, #34	@ 0x22
 800acf8:	f040 8187 	bne.w	800b00a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad02:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad06:	e12a      	b.n	800af5e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad0e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ad1a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ad1e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ad22:	4013      	ands	r3, r2
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ad2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad30:	1c9a      	adds	r2, r3, #2
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ad52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d053      	beq.n	800ae06 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d011      	beq.n	800ad8e <UART_RxISR_16BIT_FIFOEN+0xce>
 800ad6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00b      	beq.n	800ad8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad84:	f043 0201 	orr.w	r2, r3, #1
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d011      	beq.n	800adbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ad9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2202      	movs	r2, #2
 800adac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adb4:	f043 0204 	orr.w	r2, r3, #4
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800adc2:	f003 0304 	and.w	r3, r3, #4
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d011      	beq.n	800adee <UART_RxISR_16BIT_FIFOEN+0x12e>
 800adca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00b      	beq.n	800adee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2204      	movs	r2, #4
 800addc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ade4:	f043 0202 	orr.w	r2, r3, #2
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d006      	beq.n	800ae06 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7fe fd59 	bl	80098b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f040 80a5 	bne.w	800af5e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae1c:	e853 3f00 	ldrex	r3, [r3]
 800ae20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ae3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ae42:	e841 2300 	strex	r3, r2, [r1]
 800ae46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1e2      	bne.n	800ae14 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3308      	adds	r3, #8
 800ae54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae58:	e853 3f00 	ldrex	r3, [r3]
 800ae5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae64:	f023 0301 	bic.w	r3, r3, #1
 800ae68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3308      	adds	r3, #8
 800ae72:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ae76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae7e:	e841 2300 	strex	r3, r2, [r1]
 800ae82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e1      	bne.n	800ae4e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a60      	ldr	r2, [pc, #384]	@ (800b024 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d021      	beq.n	800aeec <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d01a      	beq.n	800aeec <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aebe:	e853 3f00 	ldrex	r3, [r3]
 800aec2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aec6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aeca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	461a      	mov	r2, r3
 800aed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aed8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aeda:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aedc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aede:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aee0:	e841 2300 	strex	r3, r2, [r1]
 800aee4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e4      	bne.n	800aeb6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d130      	bne.n	800af56 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af02:	e853 3f00 	ldrex	r3, [r3]
 800af06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af0a:	f023 0310 	bic.w	r3, r3, #16
 800af0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af24:	e841 2300 	strex	r3, r2, [r1]
 800af28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e4      	bne.n	800aefa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	f003 0310 	and.w	r3, r3, #16
 800af3a:	2b10      	cmp	r3, #16
 800af3c:	d103      	bne.n	800af46 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2210      	movs	r2, #16
 800af44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7fe fcb8 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800af54:	e00e      	b.n	800af74 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7f7 fae8 	bl	800252c <HAL_UART_RxCpltCallback>
        break;
 800af5c:	e00a      	b.n	800af74 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af5e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800af62:	2b00      	cmp	r3, #0
 800af64:	d006      	beq.n	800af74 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800af66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af6a:	f003 0320 	and.w	r3, r3, #32
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f47f aeca 	bne.w	800ad08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af7a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800af7e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800af82:	2b00      	cmp	r3, #0
 800af84:	d049      	beq.n	800b01a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af8c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800af90:	429a      	cmp	r2, r3
 800af92:	d242      	bcs.n	800b01a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9e:	e853 3f00 	ldrex	r3, [r3]
 800afa2:	623b      	str	r3, [r7, #32]
   return(result);
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3308      	adds	r3, #8
 800afb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800afb8:	633a      	str	r2, [r7, #48]	@ 0x30
 800afba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afc0:	e841 2300 	strex	r3, r2, [r1]
 800afc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1e3      	bne.n	800af94 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4a16      	ldr	r2, [pc, #88]	@ (800b028 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800afd0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	e853 3f00 	ldrex	r3, [r3]
 800afde:	60fb      	str	r3, [r7, #12]
   return(result);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f043 0320 	orr.w	r3, r3, #32
 800afe6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aff4:	61fb      	str	r3, [r7, #28]
 800aff6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff8:	69b9      	ldr	r1, [r7, #24]
 800affa:	69fa      	ldr	r2, [r7, #28]
 800affc:	e841 2300 	strex	r3, r2, [r1]
 800b000:	617b      	str	r3, [r7, #20]
   return(result);
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1e4      	bne.n	800afd2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b008:	e007      	b.n	800b01a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	699a      	ldr	r2, [r3, #24]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f042 0208 	orr.w	r2, r2, #8
 800b018:	619a      	str	r2, [r3, #24]
}
 800b01a:	bf00      	nop
 800b01c:	37b8      	adds	r7, #184	@ 0xb8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	40008000 	.word	0x40008000
 800b028:	0800a7a5 	.word	0x0800a7a5

0800b02c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b076:	2b01      	cmp	r3, #1
 800b078:	d101      	bne.n	800b07e <HAL_UARTEx_DisableFifoMode+0x16>
 800b07a:	2302      	movs	r3, #2
 800b07c:	e027      	b.n	800b0ce <HAL_UARTEx_DisableFifoMode+0x66>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2224      	movs	r2, #36	@ 0x24
 800b08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f022 0201 	bic.w	r2, r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b0ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d101      	bne.n	800b0f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	e02d      	b.n	800b14e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2224      	movs	r2, #36	@ 0x24
 800b0fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f022 0201 	bic.w	r2, r2, #1
 800b118:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f850 	bl	800b1d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2220      	movs	r2, #32
 800b140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e02d      	b.n	800b1ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2224      	movs	r2, #36	@ 0x24
 800b17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0201 	bic.w	r2, r2, #1
 800b194:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f812 	bl	800b1d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d108      	bne.n	800b1f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1f4:	e031      	b.n	800b25a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1f6:	2308      	movs	r3, #8
 800b1f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1fa:	2308      	movs	r3, #8
 800b1fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	0e5b      	lsrs	r3, r3, #25
 800b206:	b2db      	uxtb	r3, r3
 800b208:	f003 0307 	and.w	r3, r3, #7
 800b20c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	0f5b      	lsrs	r3, r3, #29
 800b216:	b2db      	uxtb	r3, r3
 800b218:	f003 0307 	and.w	r3, r3, #7
 800b21c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b21e:	7bbb      	ldrb	r3, [r7, #14]
 800b220:	7b3a      	ldrb	r2, [r7, #12]
 800b222:	4911      	ldr	r1, [pc, #68]	@ (800b268 <UARTEx_SetNbDataToProcess+0x94>)
 800b224:	5c8a      	ldrb	r2, [r1, r2]
 800b226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b22a:	7b3a      	ldrb	r2, [r7, #12]
 800b22c:	490f      	ldr	r1, [pc, #60]	@ (800b26c <UARTEx_SetNbDataToProcess+0x98>)
 800b22e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b230:	fb93 f3f2 	sdiv	r3, r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	7b7a      	ldrb	r2, [r7, #13]
 800b240:	4909      	ldr	r1, [pc, #36]	@ (800b268 <UARTEx_SetNbDataToProcess+0x94>)
 800b242:	5c8a      	ldrb	r2, [r1, r2]
 800b244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b248:	7b7a      	ldrb	r2, [r7, #13]
 800b24a:	4908      	ldr	r1, [pc, #32]	@ (800b26c <UARTEx_SetNbDataToProcess+0x98>)
 800b24c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b24e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b252:	b29a      	uxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b25a:	bf00      	nop
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	080135b8 	.word	0x080135b8
 800b26c:	080135c0 	.word	0x080135c0

0800b270 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b27a:	f107 0308 	add.w	r3, r7, #8
 800b27e:	2218      	movs	r2, #24
 800b280:	2100      	movs	r1, #0
 800b282:	4618      	mov	r0, r3
 800b284:	f001 f92d 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b288:	233f      	movs	r3, #63	@ 0x3f
 800b28a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800b28c:	2381      	movs	r3, #129	@ 0x81
 800b28e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b290:	1dfb      	adds	r3, r7, #7
 800b292:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b294:	2301      	movs	r3, #1
 800b296:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b298:	f107 0308 	add.w	r3, r7, #8
 800b29c:	2100      	movs	r1, #0
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f001 fba8 	bl	800c9f4 <hci_send_req>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	da01      	bge.n	800b2ae <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b2aa:	23ff      	movs	r3, #255	@ 0xff
 800b2ac:	e000      	b.n	800b2b0 <aci_gap_set_non_discoverable+0x40>
  return status;
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800b2b8:	b5b0      	push	{r4, r5, r7, lr}
 800b2ba:	b0ce      	sub	sp, #312	@ 0x138
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	4605      	mov	r5, r0
 800b2c0:	460c      	mov	r4, r1
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b2ca:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800b2ce:	462a      	mov	r2, r5
 800b2d0:	701a      	strb	r2, [r3, #0]
 800b2d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b2d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b2da:	4622      	mov	r2, r4
 800b2dc:	801a      	strh	r2, [r3, #0]
 800b2de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b2e2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	801a      	strh	r2, [r3, #0]
 800b2ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b2ee:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800b2f2:	460a      	mov	r2, r1
 800b2f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800b2f6:	f107 0310 	add.w	r3, r7, #16
 800b2fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800b2fe:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800b302:	3308      	adds	r3, #8
 800b304:	f107 0210 	add.w	r2, r7, #16
 800b308:	4413      	add	r3, r2
 800b30a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800b30e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800b312:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800b316:	4413      	add	r3, r2
 800b318:	3309      	adds	r3, #9
 800b31a:	f107 0210 	add.w	r2, r7, #16
 800b31e:	4413      	add	r3, r2
 800b320:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b324:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b328:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b32c:	2200      	movs	r2, #0
 800b32e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800b336:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b33a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800b33e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800b342:	7812      	ldrb	r2, [r2, #0]
 800b344:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b346:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b34a:	3301      	adds	r3, #1
 800b34c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800b350:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b354:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800b358:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800b35c:	8812      	ldrh	r2, [r2, #0]
 800b35e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800b362:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b366:	3302      	adds	r3, #2
 800b368:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800b36c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b370:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800b374:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800b378:	8812      	ldrh	r2, [r2, #0]
 800b37a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800b37e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b382:	3302      	adds	r3, #2
 800b384:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800b388:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b38c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800b390:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800b394:	7812      	ldrb	r2, [r2, #0]
 800b396:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b398:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b39c:	3301      	adds	r3, #1
 800b39e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800b3a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b3a6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800b3aa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b3ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800b3b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b3ba:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800b3be:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800b3c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800b3ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800b3d4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f001 f872 	bl	800c4c2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800b3de:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800b3e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800b3ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b3f0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800b3f4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b3f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800b400:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b404:	3301      	adds	r3, #1
 800b406:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800b40a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800b40e:	4618      	mov	r0, r3
 800b410:	f001 f857 	bl	800c4c2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800b414:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800b418:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b41c:	4413      	add	r3, r2
 800b41e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800b422:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b426:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800b42a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b42c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b430:	3302      	adds	r3, #2
 800b432:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800b436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b43a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800b43e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800b440:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b444:	3302      	adds	r3, #2
 800b446:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b44a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b44e:	2218      	movs	r2, #24
 800b450:	2100      	movs	r1, #0
 800b452:	4618      	mov	r0, r3
 800b454:	f001 f845 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b458:	233f      	movs	r3, #63	@ 0x3f
 800b45a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800b45e:	2383      	movs	r3, #131	@ 0x83
 800b460:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b464:	f107 0310 	add.w	r3, r7, #16
 800b468:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b46c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b470:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b474:	f107 030f 	add.w	r3, r7, #15
 800b478:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b47c:	2301      	movs	r3, #1
 800b47e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b482:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b486:	2100      	movs	r1, #0
 800b488:	4618      	mov	r0, r3
 800b48a:	f001 fab3 	bl	800c9f4 <hci_send_req>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	da01      	bge.n	800b498 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800b494:	23ff      	movs	r3, #255	@ 0xff
 800b496:	e004      	b.n	800b4a2 <aci_gap_set_discoverable+0x1ea>
  return status;
 800b498:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b49c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b4a0:	781b      	ldrb	r3, [r3, #0]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bdb0      	pop	{r4, r5, r7, pc}

0800b4ac <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b0cc      	sub	sp, #304	@ 0x130
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b4bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800b4be:	f107 0310 	add.w	r3, r7, #16
 800b4c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b4c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800b4d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b4dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b4e0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b4e4:	7812      	ldrb	r2, [r2, #0]
 800b4e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b4e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b4f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b4f6:	2218      	movs	r2, #24
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f000 fff1 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b500:	233f      	movs	r3, #63	@ 0x3f
 800b502:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800b506:	2385      	movs	r3, #133	@ 0x85
 800b508:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b50c:	f107 0310 	add.w	r3, r7, #16
 800b510:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b514:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b518:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b51c:	f107 030f 	add.w	r3, r7, #15
 800b520:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b524:	2301      	movs	r3, #1
 800b526:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b52a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b52e:	2100      	movs	r1, #0
 800b530:	4618      	mov	r0, r3
 800b532:	f001 fa5f 	bl	800c9f4 <hci_send_req>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	da01      	bge.n	800b540 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800b53c:	23ff      	movs	r3, #255	@ 0xff
 800b53e:	e004      	b.n	800b54a <aci_gap_set_io_capability+0x9e>
  return status;
 800b540:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b544:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b548:	781b      	ldrb	r3, [r3, #0]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800b554:	b5b0      	push	{r4, r5, r7, lr}
 800b556:	b0cc      	sub	sp, #304	@ 0x130
 800b558:	af00      	add	r7, sp, #0
 800b55a:	4605      	mov	r5, r0
 800b55c:	460c      	mov	r4, r1
 800b55e:	4610      	mov	r0, r2
 800b560:	4619      	mov	r1, r3
 800b562:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b566:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b56a:	462a      	mov	r2, r5
 800b56c:	701a      	strb	r2, [r3, #0]
 800b56e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b572:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b576:	4622      	mov	r2, r4
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b57e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800b582:	4602      	mov	r2, r0
 800b584:	701a      	strb	r2, [r3, #0]
 800b586:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b58a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b58e:	460a      	mov	r2, r1
 800b590:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800b592:	f107 0310 	add.w	r3, r7, #16
 800b596:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b59a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b59e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800b5ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b5b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b5b4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b5b8:	7812      	ldrb	r2, [r2, #0]
 800b5ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b5bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800b5c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b5ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b5ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b5d2:	7812      	ldrb	r2, [r2, #0]
 800b5d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b5d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b5da:	3301      	adds	r3, #1
 800b5dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800b5e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b5e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b5e8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800b5ec:	7812      	ldrb	r2, [r2, #0]
 800b5ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b5f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800b5fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b5fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b602:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800b606:	7812      	ldrb	r2, [r2, #0]
 800b608:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800b60a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b60e:	3301      	adds	r3, #1
 800b610:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800b614:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b618:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800b61c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b61e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b622:	3301      	adds	r3, #1
 800b624:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800b628:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b62c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800b630:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b632:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b636:	3301      	adds	r3, #1
 800b638:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800b63c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b640:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800b644:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b646:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b64a:	3301      	adds	r3, #1
 800b64c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800b650:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b654:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800b658:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800b65c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b660:	3304      	adds	r3, #4
 800b662:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800b666:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b66a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800b66e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800b670:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b674:	3301      	adds	r3, #1
 800b676:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b67a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b67e:	2218      	movs	r2, #24
 800b680:	2100      	movs	r1, #0
 800b682:	4618      	mov	r0, r3
 800b684:	f000 ff2d 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b688:	233f      	movs	r3, #63	@ 0x3f
 800b68a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800b68e:	2386      	movs	r3, #134	@ 0x86
 800b690:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b694:	f107 0310 	add.w	r3, r7, #16
 800b698:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b69c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b6a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b6a4:	f107 030f 	add.w	r3, r7, #15
 800b6a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b6b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f001 f99b 	bl	800c9f4 <hci_send_req>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	da01      	bge.n	800b6c8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800b6c4:	23ff      	movs	r3, #255	@ 0xff
 800b6c6:	e004      	b.n	800b6d2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800b6c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b6cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b6d0:	781b      	ldrb	r3, [r3, #0]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bdb0      	pop	{r4, r5, r7, pc}

0800b6dc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b0cc      	sub	sp, #304	@ 0x130
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b6e8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b6ec:	6019      	str	r1, [r3, #0]
 800b6ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b6f2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b6f6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800b6f8:	f107 0310 	add.w	r3, r7, #16
 800b6fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b700:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b704:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b708:	2200      	movs	r2, #0
 800b70a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b712:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b716:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b71a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b71e:	8812      	ldrh	r2, [r2, #0]
 800b720:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b722:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b726:	3302      	adds	r3, #2
 800b728:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800b72c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b730:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b734:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800b738:	6812      	ldr	r2, [r2, #0]
 800b73a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800b73e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b742:	3304      	adds	r3, #4
 800b744:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b748:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b74c:	2218      	movs	r2, #24
 800b74e:	2100      	movs	r1, #0
 800b750:	4618      	mov	r0, r3
 800b752:	f000 fec6 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b756:	233f      	movs	r3, #63	@ 0x3f
 800b758:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800b75c:	2388      	movs	r3, #136	@ 0x88
 800b75e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b762:	f107 0310 	add.w	r3, r7, #16
 800b766:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b76a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b76e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b772:	f107 030f 	add.w	r3, r7, #15
 800b776:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b77a:	2301      	movs	r3, #1
 800b77c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b780:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b784:	2100      	movs	r1, #0
 800b786:	4618      	mov	r0, r3
 800b788:	f001 f934 	bl	800c9f4 <hci_send_req>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	da01      	bge.n	800b796 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800b792:	23ff      	movs	r3, #255	@ 0xff
 800b794:	e004      	b.n	800b7a0 <aci_gap_pass_key_resp+0xc4>
  return status;
 800b796:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b79a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b79e:	781b      	ldrb	r3, [r3, #0]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800b7aa:	b590      	push	{r4, r7, lr}
 800b7ac:	b0cd      	sub	sp, #308	@ 0x134
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	4608      	mov	r0, r1
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b7ba:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b7c4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b7c8:	4622      	mov	r2, r4
 800b7ca:	701a      	strb	r2, [r3, #0]
 800b7cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b7d0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	701a      	strb	r2, [r3, #0]
 800b7d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b7dc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800b7e0:	460a      	mov	r2, r1
 800b7e2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800b7e4:	f107 0310 	add.w	r3, r7, #16
 800b7e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b7ec:	f107 0308 	add.w	r3, r7, #8
 800b7f0:	2207      	movs	r2, #7
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fe74 	bl	800c4e2 <Osal_MemSet>
  int index_input = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800b800:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b804:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b808:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b80c:	7812      	ldrb	r2, [r2, #0]
 800b80e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b810:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b814:	3301      	adds	r3, #1
 800b816:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800b81a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b81e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b822:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b826:	7812      	ldrb	r2, [r2, #0]
 800b828:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b82a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b82e:	3301      	adds	r3, #1
 800b830:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800b834:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b838:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b83c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800b840:	7812      	ldrb	r2, [r2, #0]
 800b842:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b848:	3301      	adds	r3, #1
 800b84a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b84e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b852:	2218      	movs	r2, #24
 800b854:	2100      	movs	r1, #0
 800b856:	4618      	mov	r0, r3
 800b858:	f000 fe43 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b85c:	233f      	movs	r3, #63	@ 0x3f
 800b85e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800b862:	238a      	movs	r3, #138	@ 0x8a
 800b864:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b868:	f107 0310 	add.w	r3, r7, #16
 800b86c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b870:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b874:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800b878:	f107 0308 	add.w	r3, r7, #8
 800b87c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800b880:	2307      	movs	r3, #7
 800b882:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b886:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b88a:	2100      	movs	r1, #0
 800b88c:	4618      	mov	r0, r3
 800b88e:	f001 f8b1 	bl	800c9f4 <hci_send_req>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	da01      	bge.n	800b89c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800b898:	23ff      	movs	r3, #255	@ 0xff
 800b89a:	e02e      	b.n	800b8fa <aci_gap_init+0x150>
  if ( resp.Status )
 800b89c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b8a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <aci_gap_init+0x10c>
    return resp.Status;
 800b8aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b8ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	e021      	b.n	800b8fa <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800b8b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b8ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b8be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b8c8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800b8d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b8d4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b8d8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b8e2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800b8e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b8e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b8ec:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800b8f6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800b900:	46bd      	mov	sp, r7
 800b902:	bd90      	pop	{r4, r7, pc}

0800b904 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b0cc      	sub	sp, #304	@ 0x130
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4602      	mov	r2, r0
 800b90c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b910:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b914:	6019      	str	r1, [r3, #0]
 800b916:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b91a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b91e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800b920:	f107 0310 	add.w	r3, r7, #16
 800b924:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b928:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b92c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b930:	2200      	movs	r2, #0
 800b932:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b934:	2300      	movs	r3, #0
 800b936:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800b93a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b93e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b942:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b946:	7812      	ldrb	r2, [r2, #0]
 800b948:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b94a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b94e:	3301      	adds	r3, #1
 800b950:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800b954:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b958:	1c58      	adds	r0, r3, #1
 800b95a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b95e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b962:	781a      	ldrb	r2, [r3, #0]
 800b964:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b968:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b96c:	6819      	ldr	r1, [r3, #0]
 800b96e:	f000 fda8 	bl	800c4c2 <Osal_MemCpy>
  index_input += AdvDataLen;
 800b972:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b976:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b980:	4413      	add	r3, r2
 800b982:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b986:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b98a:	2218      	movs	r2, #24
 800b98c:	2100      	movs	r1, #0
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fda7 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b994:	233f      	movs	r3, #63	@ 0x3f
 800b996:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800b99a:	238e      	movs	r3, #142	@ 0x8e
 800b99c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b9a0:	f107 0310 	add.w	r3, r7, #16
 800b9a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b9a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b9ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b9b0:	f107 030f 	add.w	r3, r7, #15
 800b9b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b9be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f001 f815 	bl	800c9f4 <hci_send_req>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	da01      	bge.n	800b9d4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800b9d0:	23ff      	movs	r3, #255	@ 0xff
 800b9d2:	e004      	b.n	800b9de <aci_gap_update_adv_data+0xda>
  return status;
 800b9d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b9d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b9dc:	781b      	ldrb	r3, [r3, #0]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b9f2:	f107 0308 	add.w	r3, r7, #8
 800b9f6:	2218      	movs	r2, #24
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 fd71 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ba00:	233f      	movs	r3, #63	@ 0x3f
 800ba02:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ba04:	2392      	movs	r3, #146	@ 0x92
 800ba06:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ba08:	1dfb      	adds	r3, r7, #7
 800ba0a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ba10:	f107 0308 	add.w	r3, r7, #8
 800ba14:	2100      	movs	r1, #0
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 ffec 	bl	800c9f4 <hci_send_req>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	da01      	bge.n	800ba26 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ba22:	23ff      	movs	r3, #255	@ 0xff
 800ba24:	e000      	b.n	800ba28 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800ba26:	79fb      	ldrb	r3, [r7, #7]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3720      	adds	r7, #32
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b0cc      	sub	sp, #304	@ 0x130
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4602      	mov	r2, r0
 800ba38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ba3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ba40:	801a      	strh	r2, [r3, #0]
 800ba42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ba46:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ba4a:	460a      	mov	r2, r1
 800ba4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800ba4e:	f107 0310 	add.w	r3, r7, #16
 800ba52:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ba56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ba5a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ba5e:	2200      	movs	r2, #0
 800ba60:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ba68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ba6c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ba70:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ba74:	8812      	ldrh	r2, [r2, #0]
 800ba76:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ba78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ba7c:	3302      	adds	r3, #2
 800ba7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800ba82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ba86:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ba8a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ba8e:	7812      	ldrb	r2, [r2, #0]
 800ba90:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ba92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ba96:	3301      	adds	r3, #1
 800ba98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ba9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800baa0:	2218      	movs	r2, #24
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f000 fd1c 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800baaa:	233f      	movs	r3, #63	@ 0x3f
 800baac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800bab0:	23a5      	movs	r3, #165	@ 0xa5
 800bab2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800bab6:	f107 0310 	add.w	r3, r7, #16
 800baba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800babe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bac2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800bac6:	f107 030f 	add.w	r3, r7, #15
 800baca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800bace:	2301      	movs	r3, #1
 800bad0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bad8:	2100      	movs	r1, #0
 800bada:	4618      	mov	r0, r3
 800badc:	f000 ff8a 	bl	800c9f4 <hci_send_req>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	da01      	bge.n	800baea <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800bae6:	23ff      	movs	r3, #255	@ 0xff
 800bae8:	e004      	b.n	800baf4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800baea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800baee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800baf2:	781b      	ldrb	r3, [r3, #0]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b088      	sub	sp, #32
 800bb02:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bb08:	f107 0308 	add.w	r3, r7, #8
 800bb0c:	2218      	movs	r2, #24
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 fce6 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800bb16:	233f      	movs	r3, #63	@ 0x3f
 800bb18:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800bb1a:	f240 1301 	movw	r3, #257	@ 0x101
 800bb1e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bb20:	1dfb      	adds	r3, r7, #7
 800bb22:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800bb24:	2301      	movs	r3, #1
 800bb26:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bb28:	f107 0308 	add.w	r3, r7, #8
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 ff60 	bl	800c9f4 <hci_send_req>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	da01      	bge.n	800bb3e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800bb3a:	23ff      	movs	r3, #255	@ 0xff
 800bb3c:	e000      	b.n	800bb40 <aci_gatt_init+0x42>
  return status;
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3720      	adds	r7, #32
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800bb48:	b590      	push	{r4, r7, lr}
 800bb4a:	b0cf      	sub	sp, #316	@ 0x13c
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	4604      	mov	r4, r0
 800bb50:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800bb54:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800bb58:	6001      	str	r1, [r0, #0]
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb62:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800bb66:	4622      	mov	r2, r4
 800bb68:	701a      	strb	r2, [r3, #0]
 800bb6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb6e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800bb72:	4602      	mov	r2, r0
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb7a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800bb7e:	460a      	mov	r2, r1
 800bb80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800bb82:	f107 0310 	add.w	r3, r7, #16
 800bb86:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800bb8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb8e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d00a      	beq.n	800bbae <aci_gatt_add_service+0x66>
 800bb98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb9c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b02      	cmp	r3, #2
 800bba4:	d101      	bne.n	800bbaa <aci_gatt_add_service+0x62>
 800bba6:	2311      	movs	r3, #17
 800bba8:	e002      	b.n	800bbb0 <aci_gatt_add_service+0x68>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e000      	b.n	800bbb0 <aci_gatt_add_service+0x68>
 800bbae:	2303      	movs	r3, #3
 800bbb0:	f107 0210 	add.w	r2, r7, #16
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800bbba:	f107 030c 	add.w	r3, r7, #12
 800bbbe:	2203      	movs	r2, #3
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 fc8d 	bl	800c4e2 <Osal_MemSet>
  int index_input = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800bbce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800bbd2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800bbd6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800bbda:	7812      	ldrb	r2, [r2, #0]
 800bbdc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bbde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800bbe8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bbec:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d002      	beq.n	800bbfc <aci_gatt_add_service+0xb4>
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d004      	beq.n	800bc04 <aci_gatt_add_service+0xbc>
 800bbfa:	e007      	b.n	800bc0c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800bc02:	e005      	b.n	800bc10 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800bc04:	2310      	movs	r3, #16
 800bc06:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800bc0a:	e001      	b.n	800bc10 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800bc0c:	2397      	movs	r3, #151	@ 0x97
 800bc0e:	e06c      	b.n	800bcea <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800bc10:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800bc14:	1c58      	adds	r0, r3, #1
 800bc16:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800bc1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bc1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bc22:	6819      	ldr	r1, [r3, #0]
 800bc24:	f000 fc4d 	bl	800c4c2 <Osal_MemCpy>
    index_input += size;
 800bc28:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800bc2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800bc30:	4413      	add	r3, r2
 800bc32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800bc36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bc3a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800bc3e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800bc42:	7812      	ldrb	r2, [r2, #0]
 800bc44:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800bc46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800bc50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bc54:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800bc58:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800bc5c:	7812      	ldrb	r2, [r2, #0]
 800bc5e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800bc60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bc64:	3301      	adds	r3, #1
 800bc66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bc6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bc6e:	2218      	movs	r2, #24
 800bc70:	2100      	movs	r1, #0
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 fc35 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800bc78:	233f      	movs	r3, #63	@ 0x3f
 800bc7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800bc7e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800bc82:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800bc86:	f107 0310 	add.w	r3, r7, #16
 800bc8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800bc8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bc92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800bc96:	f107 030c 	add.w	r3, r7, #12
 800bc9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800bc9e:	2303      	movs	r3, #3
 800bca0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bca4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bca8:	2100      	movs	r1, #0
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 fea2 	bl	800c9f4 <hci_send_req>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	da01      	bge.n	800bcba <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800bcb6:	23ff      	movs	r3, #255	@ 0xff
 800bcb8:	e017      	b.n	800bcea <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800bcba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bcbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d005      	beq.n	800bcd4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800bcc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bccc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	e00a      	b.n	800bcea <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800bcd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bcd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bcdc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800bce6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd90      	pop	{r4, r7, pc}

0800bcf4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800bcf4:	b590      	push	{r4, r7, lr}
 800bcf6:	b0d1      	sub	sp, #324	@ 0x144
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	4608      	mov	r0, r1
 800bcfe:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800bd02:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800bd06:	600a      	str	r2, [r1, #0]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd0e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800bd12:	4622      	mov	r2, r4
 800bd14:	801a      	strh	r2, [r3, #0]
 800bd16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd1a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800bd1e:	4602      	mov	r2, r0
 800bd20:	701a      	strb	r2, [r3, #0]
 800bd22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd26:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800bd2e:	f107 0318 	add.w	r3, r7, #24
 800bd32:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800bd36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd3a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d00a      	beq.n	800bd5a <aci_gatt_add_char+0x66>
 800bd44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd48:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d101      	bne.n	800bd56 <aci_gatt_add_char+0x62>
 800bd52:	2313      	movs	r3, #19
 800bd54:	e002      	b.n	800bd5c <aci_gatt_add_char+0x68>
 800bd56:	2303      	movs	r3, #3
 800bd58:	e000      	b.n	800bd5c <aci_gatt_add_char+0x68>
 800bd5a:	2305      	movs	r3, #5
 800bd5c:	f107 0218 	add.w	r2, r7, #24
 800bd60:	4413      	add	r3, r2
 800bd62:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800bd66:	f107 0314 	add.w	r3, r7, #20
 800bd6a:	2203      	movs	r2, #3
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 fbb7 	bl	800c4e2 <Osal_MemSet>
  int index_input = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800bd7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800bd7e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800bd82:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800bd86:	8812      	ldrh	r2, [r2, #0]
 800bd88:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bd8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800bd8e:	3302      	adds	r3, #2
 800bd90:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800bd94:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800bd98:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800bd9c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800bda0:	7812      	ldrb	r2, [r2, #0]
 800bda2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800bda4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800bda8:	3301      	adds	r3, #1
 800bdaa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800bdae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bdb2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d002      	beq.n	800bdc2 <aci_gatt_add_char+0xce>
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d004      	beq.n	800bdca <aci_gatt_add_char+0xd6>
 800bdc0:	e007      	b.n	800bdd2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800bdc8:	e005      	b.n	800bdd6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800bdca:	2310      	movs	r3, #16
 800bdcc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800bdd0:	e001      	b.n	800bdd6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800bdd2:	2397      	movs	r3, #151	@ 0x97
 800bdd4:	e091      	b.n	800befa <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800bdd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800bdda:	1cd8      	adds	r0, r3, #3
 800bddc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800bde0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bde4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bde8:	6819      	ldr	r1, [r3, #0]
 800bdea:	f000 fb6a 	bl	800c4c2 <Osal_MemCpy>
    index_input += size;
 800bdee:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800bdf2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800bdf6:	4413      	add	r3, r2
 800bdf8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800bdfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800be00:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800be04:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800be08:	8812      	ldrh	r2, [r2, #0]
 800be0a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800be0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800be10:	3302      	adds	r3, #2
 800be12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800be16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800be1a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800be1e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800be20:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800be24:	3301      	adds	r3, #1
 800be26:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800be2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800be2e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800be32:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800be34:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800be38:	3301      	adds	r3, #1
 800be3a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800be3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800be42:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800be46:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800be48:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800be4c:	3301      	adds	r3, #1
 800be4e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800be52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800be56:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800be5a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800be5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800be60:	3301      	adds	r3, #1
 800be62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800be66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800be6a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800be6e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800be70:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800be74:	3301      	adds	r3, #1
 800be76:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800be7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800be7e:	2218      	movs	r2, #24
 800be80:	2100      	movs	r1, #0
 800be82:	4618      	mov	r0, r3
 800be84:	f000 fb2d 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800be88:	233f      	movs	r3, #63	@ 0x3f
 800be8a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800be8e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800be92:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800be96:	f107 0318 	add.w	r3, r7, #24
 800be9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800be9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800bea2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800bea6:	f107 0314 	add.w	r3, r7, #20
 800beaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800beae:	2303      	movs	r3, #3
 800beb0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800beb4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800beb8:	2100      	movs	r1, #0
 800beba:	4618      	mov	r0, r3
 800bebc:	f000 fd9a 	bl	800c9f4 <hci_send_req>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	da01      	bge.n	800beca <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800bec6:	23ff      	movs	r3, #255	@ 0xff
 800bec8:	e017      	b.n	800befa <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800beca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bece:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800bed8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bedc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	e00a      	b.n	800befa <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800bee4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bee8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800beec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800bef6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd90      	pop	{r4, r7, pc}

0800bf04 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800bf04:	b5b0      	push	{r4, r5, r7, lr}
 800bf06:	b0cc      	sub	sp, #304	@ 0x130
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	4610      	mov	r0, r2
 800bf10:	4619      	mov	r1, r3
 800bf12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf16:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800bf1a:	462a      	mov	r2, r5
 800bf1c:	801a      	strh	r2, [r3, #0]
 800bf1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bf26:	4622      	mov	r2, r4
 800bf28:	801a      	strh	r2, [r3, #0]
 800bf2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf2e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800bf32:	4602      	mov	r2, r0
 800bf34:	701a      	strb	r2, [r3, #0]
 800bf36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf3a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800bf3e:	460a      	mov	r2, r1
 800bf40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800bf42:	f107 0310 	add.w	r3, r7, #16
 800bf46:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800bf4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf4e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800bf52:	2200      	movs	r2, #0
 800bf54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800bf5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bf60:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800bf64:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800bf68:	8812      	ldrh	r2, [r2, #0]
 800bf6a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bf6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bf70:	3302      	adds	r3, #2
 800bf72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800bf76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bf7a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800bf7e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800bf82:	8812      	ldrh	r2, [r2, #0]
 800bf84:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800bf86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bf8a:	3302      	adds	r3, #2
 800bf8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800bf90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bf94:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800bf98:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800bf9c:	7812      	ldrb	r2, [r2, #0]
 800bf9e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800bfa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800bfaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bfae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800bfb2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800bfb6:	7812      	ldrb	r2, [r2, #0]
 800bfb8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bfba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800bfc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800bfc8:	1d98      	adds	r0, r3, #6
 800bfca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bfce:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800bfda:	f000 fa72 	bl	800c4c2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800bfde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bfe2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800bfec:	4413      	add	r3, r2
 800bfee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bff2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bff6:	2218      	movs	r2, #24
 800bff8:	2100      	movs	r1, #0
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 fa71 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c000:	233f      	movs	r3, #63	@ 0x3f
 800c002:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800c006:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800c00a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c00e:	f107 0310 	add.w	r3, r7, #16
 800c012:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c016:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c01a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c01e:	f107 030f 	add.w	r3, r7, #15
 800c022:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c026:	2301      	movs	r3, #1
 800c028:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c02c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c030:	2100      	movs	r1, #0
 800c032:	4618      	mov	r0, r3
 800c034:	f000 fcde 	bl	800c9f4 <hci_send_req>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	da01      	bge.n	800c042 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800c03e:	23ff      	movs	r3, #255	@ 0xff
 800c040:	e004      	b.n	800c04c <aci_gatt_update_char_value+0x148>
  return status;
 800c042:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c046:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c04a:	781b      	ldrb	r3, [r3, #0]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c052:	46bd      	mov	sp, r7
 800c054:	bdb0      	pop	{r4, r5, r7, pc}

0800c056 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b0cc      	sub	sp, #304	@ 0x130
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	4602      	mov	r2, r0
 800c05e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c062:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c066:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800c068:	f107 0310 	add.w	r3, r7, #16
 800c06c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c070:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c074:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c078:	2200      	movs	r2, #0
 800c07a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c07c:	2300      	movs	r3, #0
 800c07e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c082:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c086:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c08a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c08e:	8812      	ldrh	r2, [r2, #0]
 800c090:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c092:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c096:	3302      	adds	r3, #2
 800c098:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c09c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c0a0:	2218      	movs	r2, #24
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 fa1c 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c0aa:	233f      	movs	r3, #63	@ 0x3f
 800c0ac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800c0b0:	f240 1325 	movw	r3, #293	@ 0x125
 800c0b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c0b8:	f107 0310 	add.w	r3, r7, #16
 800c0bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c0c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c0c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c0c8:	f107 030f 	add.w	r3, r7, #15
 800c0cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c0d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 fc89 	bl	800c9f4 <hci_send_req>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	da01      	bge.n	800c0ec <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800c0e8:	23ff      	movs	r3, #255	@ 0xff
 800c0ea:	e004      	b.n	800c0f6 <aci_gatt_confirm_indication+0xa0>
  return status;
 800c0ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c0f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c0f4:	781b      	ldrb	r3, [r3, #0]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b0cc      	sub	sp, #304	@ 0x130
 800c104:	af00      	add	r7, sp, #0
 800c106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c10a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c114:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c118:	4602      	mov	r2, r0
 800c11a:	701a      	strb	r2, [r3, #0]
 800c11c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c120:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c124:	460a      	mov	r2, r1
 800c126:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800c128:	f107 0310 	add.w	r3, r7, #16
 800c12c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c130:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c134:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c138:	2200      	movs	r2, #0
 800c13a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800c142:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c146:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c14a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c14e:	7812      	ldrb	r2, [r2, #0]
 800c150:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c152:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c156:	3301      	adds	r3, #1
 800c158:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800c15c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c160:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c164:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c168:	7812      	ldrb	r2, [r2, #0]
 800c16a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c16c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c170:	3301      	adds	r3, #1
 800c172:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800c176:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c17a:	1c98      	adds	r0, r3, #2
 800c17c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c180:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c184:	781a      	ldrb	r2, [r3, #0]
 800c186:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c18a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c18e:	6819      	ldr	r1, [r3, #0]
 800c190:	f000 f997 	bl	800c4c2 <Osal_MemCpy>
  index_input += Length;
 800c194:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c198:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c1a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c1ac:	2218      	movs	r2, #24
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 f996 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c1b6:	233f      	movs	r3, #63	@ 0x3f
 800c1b8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800c1bc:	230c      	movs	r3, #12
 800c1be:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c1c2:	f107 0310 	add.w	r3, r7, #16
 800c1c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c1ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c1ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c1d2:	f107 030f 	add.w	r3, r7, #15
 800c1d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c1e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 fc04 	bl	800c9f4 <hci_send_req>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	da01      	bge.n	800c1f6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800c1f2:	23ff      	movs	r3, #255	@ 0xff
 800c1f4:	e004      	b.n	800c200 <aci_hal_write_config_data+0x100>
  return status;
 800c1f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c1fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c1fe:	781b      	ldrb	r3, [r3, #0]
}
 800c200:	4618      	mov	r0, r3
 800c202:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b0cc      	sub	sp, #304	@ 0x130
 800c20e:	af00      	add	r7, sp, #0
 800c210:	4602      	mov	r2, r0
 800c212:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c216:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c21a:	701a      	strb	r2, [r3, #0]
 800c21c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c220:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c224:	460a      	mov	r2, r1
 800c226:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800c228:	f107 0310 	add.w	r3, r7, #16
 800c22c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c230:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c234:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c238:	2200      	movs	r2, #0
 800c23a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800c242:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c246:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c24a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c24e:	7812      	ldrb	r2, [r2, #0]
 800c250:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c252:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c256:	3301      	adds	r3, #1
 800c258:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800c25c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c260:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c264:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c268:	7812      	ldrb	r2, [r2, #0]
 800c26a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c26c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c270:	3301      	adds	r3, #1
 800c272:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c27a:	2218      	movs	r2, #24
 800c27c:	2100      	movs	r1, #0
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f92f 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c284:	233f      	movs	r3, #63	@ 0x3f
 800c286:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800c28a:	230f      	movs	r3, #15
 800c28c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c290:	f107 0310 	add.w	r3, r7, #16
 800c294:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c298:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c29c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c2a0:	f107 030f 	add.w	r3, r7, #15
 800c2a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c2ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f000 fb9d 	bl	800c9f4 <hci_send_req>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	da01      	bge.n	800c2c4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800c2c0:	23ff      	movs	r3, #255	@ 0xff
 800c2c2:	e004      	b.n	800c2ce <aci_hal_set_tx_power_level+0xc4>
  return status;
 800c2c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c2c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c2cc:	781b      	ldrb	r3, [r3, #0]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b0cc      	sub	sp, #304	@ 0x130
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4602      	mov	r2, r0
 800c2e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c2e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c2e8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800c2ea:	f107 0310 	add.w	r3, r7, #16
 800c2ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c2f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c2f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800c304:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c308:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c30c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c310:	8812      	ldrh	r2, [r2, #0]
 800c312:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c314:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c318:	3302      	adds	r3, #2
 800c31a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c31e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c322:	2218      	movs	r2, #24
 800c324:	2100      	movs	r1, #0
 800c326:	4618      	mov	r0, r3
 800c328:	f000 f8db 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c32c:	233f      	movs	r3, #63	@ 0x3f
 800c32e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800c332:	2318      	movs	r3, #24
 800c334:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c338:	f107 0310 	add.w	r3, r7, #16
 800c33c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c340:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c344:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c348:	f107 030f 	add.w	r3, r7, #15
 800c34c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c350:	2301      	movs	r3, #1
 800c352:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c356:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c35a:	2100      	movs	r1, #0
 800c35c:	4618      	mov	r0, r3
 800c35e:	f000 fb49 	bl	800c9f4 <hci_send_req>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	da01      	bge.n	800c36c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800c368:	23ff      	movs	r3, #255	@ 0xff
 800c36a:	e004      	b.n	800c376 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800c36c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c370:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c374:	781b      	ldrb	r3, [r3, #0]
}
 800c376:	4618      	mov	r0, r3
 800c378:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c38a:	f107 0308 	add.w	r3, r7, #8
 800c38e:	2218      	movs	r2, #24
 800c390:	2100      	movs	r1, #0
 800c392:	4618      	mov	r0, r3
 800c394:	f000 f8a5 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x03;
 800c398:	2303      	movs	r3, #3
 800c39a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800c39c:	2303      	movs	r3, #3
 800c39e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c3a0:	1dfb      	adds	r3, r7, #7
 800c3a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c3a8:	f107 0308 	add.w	r3, r7, #8
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 fb20 	bl	800c9f4 <hci_send_req>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	da01      	bge.n	800c3be <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c3ba:	23ff      	movs	r3, #255	@ 0xff
 800c3bc:	e000      	b.n	800c3c0 <hci_reset+0x40>
  return status;
 800c3be:	79fb      	ldrb	r3, [r7, #7]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3720      	adds	r7, #32
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800c3c8:	b590      	push	{r4, r7, lr}
 800c3ca:	b0cd      	sub	sp, #308	@ 0x134
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c3d8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c3dc:	4622      	mov	r2, r4
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c3e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	701a      	strb	r2, [r3, #0]
 800c3ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c3f0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800c3f4:	460a      	mov	r2, r1
 800c3f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800c3f8:	f107 0310 	add.w	r3, r7, #16
 800c3fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c400:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c404:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c408:	2200      	movs	r2, #0
 800c40a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800c412:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c416:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c41a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c41e:	7812      	ldrb	r2, [r2, #0]
 800c420:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c422:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c426:	3301      	adds	r3, #1
 800c428:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800c42c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c430:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c434:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c438:	7812      	ldrb	r2, [r2, #0]
 800c43a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c43c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c440:	3301      	adds	r3, #1
 800c442:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800c446:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c44a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c44e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800c452:	7812      	ldrb	r2, [r2, #0]
 800c454:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c456:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c45a:	3301      	adds	r3, #1
 800c45c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c460:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c464:	2218      	movs	r2, #24
 800c466:	2100      	movs	r1, #0
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 f83a 	bl	800c4e2 <Osal_MemSet>
  rq.ogf = 0x08;
 800c46e:	2308      	movs	r3, #8
 800c470:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800c474:	2331      	movs	r3, #49	@ 0x31
 800c476:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c47a:	f107 0310 	add.w	r3, r7, #16
 800c47e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c482:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c486:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c48a:	f107 030f 	add.w	r3, r7, #15
 800c48e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c492:	2301      	movs	r3, #1
 800c494:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c498:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c49c:	2100      	movs	r1, #0
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 faa8 	bl	800c9f4 <hci_send_req>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	da01      	bge.n	800c4ae <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800c4aa:	23ff      	movs	r3, #255	@ 0xff
 800c4ac:	e004      	b.n	800c4b8 <hci_le_set_default_phy+0xf0>
  return status;
 800c4ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c4b2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c4b6:	781b      	ldrb	r3, [r3, #0]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd90      	pop	{r4, r7, pc}

0800c4c2 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b084      	sub	sp, #16
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	60f8      	str	r0, [r7, #12]
 800c4ca:	60b9      	str	r1, [r7, #8]
 800c4cc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	68b9      	ldr	r1, [r7, #8]
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f003 fbb9 	bl	800fc4a <memcpy>
 800c4d8:	4603      	mov	r3, r0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	60b9      	str	r1, [r7, #8]
 800c4ec:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	68b9      	ldr	r1, [r7, #8]
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f003 fb1a 	bl	800fb2c <memset>
 800c4f8:	4603      	mov	r3, r0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800c502:	b480      	push	{r7}
 800c504:	af00      	add	r7, sp, #0
  return;
 800c506:	bf00      	nop
}
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800c510:	b480      	push	{r7}
 800c512:	af00      	add	r7, sp, #0
  return;
 800c514:	bf00      	nop
}
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr

0800c51e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800c51e:	b480      	push	{r7}
 800c520:	af00      	add	r7, sp, #0
  return;
 800c522:	bf00      	nop
}
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800c52c:	b480      	push	{r7}
 800c52e:	af00      	add	r7, sp, #0
  return;
 800c530:	bf00      	nop
}
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800c53a:	b480      	push	{r7}
 800c53c:	af00      	add	r7, sp, #0
  return;
 800c53e:	bf00      	nop
}
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800c548:	b480      	push	{r7}
 800c54a:	af00      	add	r7, sp, #0
  return;
 800c54c:	bf00      	nop
}
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800c556:	b480      	push	{r7}
 800c558:	af00      	add	r7, sp, #0
  return;
 800c55a:	bf00      	nop
}
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800c564:	b480      	push	{r7}
 800c566:	af00      	add	r7, sp, #0
  return;
 800c568:	bf00      	nop
}
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800c572:	b480      	push	{r7}
 800c574:	af00      	add	r7, sp, #0
  return;
 800c576:	bf00      	nop
}
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800c580:	b480      	push	{r7}
 800c582:	af00      	add	r7, sp, #0
  return;
 800c584:	bf00      	nop
}
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800c58e:	b480      	push	{r7}
 800c590:	af00      	add	r7, sp, #0
  return;
 800c592:	bf00      	nop
}
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800c59c:	b480      	push	{r7}
 800c59e:	af00      	add	r7, sp, #0
  return;
 800c5a0:	bf00      	nop
}
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	af00      	add	r7, sp, #0
  return;
 800c5ae:	bf00      	nop
}
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	af00      	add	r7, sp, #0
  return;
 800c5bc:	bf00      	nop
}
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	af00      	add	r7, sp, #0
  return;
 800c5ca:	bf00      	nop
}
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	af00      	add	r7, sp, #0
  return;
 800c5d8:	bf00      	nop
}
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	af00      	add	r7, sp, #0
  return;
 800c5e6:	bf00      	nop
}
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800c5f4:	4b04      	ldr	r3, [pc, #16]	@ (800c608 <SVCCTL_Init+0x18>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800c5fa:	4b04      	ldr	r3, [pc, #16]	@ (800c60c <SVCCTL_Init+0x1c>)
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800c600:	f000 f806 	bl	800c610 <SVCCTL_SvcInit>

  return;
 800c604:	bf00      	nop
}
 800c606:	bd80      	pop	{r7, pc}
 800c608:	200001f4 	.word	0x200001f4
 800c60c:	20000214 	.word	0x20000214

0800c610 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
  BAS_Init();
 800c614:	f7ff ff75 	bl	800c502 <BAS_Init>

  BLS_Init();
 800c618:	f7ff ff7a 	bl	800c510 <BLS_Init>

  CRS_STM_Init();
 800c61c:	f7ff ff7f 	bl	800c51e <CRS_STM_Init>

  DIS_Init();
 800c620:	f7ff ff84 	bl	800c52c <DIS_Init>

  EDS_STM_Init();
 800c624:	f7ff ff89 	bl	800c53a <EDS_STM_Init>

  HIDS_Init();
 800c628:	f7ff ff8e 	bl	800c548 <HIDS_Init>

  HRS_Init();
 800c62c:	f7ff ff93 	bl	800c556 <HRS_Init>

  HTS_Init();
 800c630:	f7ff ff98 	bl	800c564 <HTS_Init>

  IAS_Init();
 800c634:	f7ff ff9d 	bl	800c572 <IAS_Init>

  LLS_Init();
 800c638:	f7ff ffa2 	bl	800c580 <LLS_Init>

  TPS_Init();
 800c63c:	f7ff ffa7 	bl	800c58e <TPS_Init>

  MOTENV_STM_Init();
 800c640:	f7ff ffac 	bl	800c59c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c644:	f7ff ffb1 	bl	800c5aa <P2PS_STM_Init>

  ZDD_STM_Init();
 800c648:	f7ff ffb6 	bl	800c5b8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800c64c:	f7ff ffbb 	bl	800c5c6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c650:	f7ff ffc7 	bl	800c5e2 <BVOPUS_STM_Init>

  MESH_Init();
 800c654:	f7ff ffbe 	bl	800c5d4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c658:	f001 fbc6 	bl	800dde8 <SVCCTL_InitCustomSvc>
  
  return;
 800c65c:	bf00      	nop
}
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800c668:	4b09      	ldr	r3, [pc, #36]	@ (800c690 <SVCCTL_RegisterSvcHandler+0x30>)
 800c66a:	7f1b      	ldrb	r3, [r3, #28]
 800c66c:	4619      	mov	r1, r3
 800c66e:	4a08      	ldr	r2, [pc, #32]	@ (800c690 <SVCCTL_RegisterSvcHandler+0x30>)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800c676:	4b06      	ldr	r3, [pc, #24]	@ (800c690 <SVCCTL_RegisterSvcHandler+0x30>)
 800c678:	7f1b      	ldrb	r3, [r3, #28]
 800c67a:	3301      	adds	r3, #1
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	4b04      	ldr	r3, [pc, #16]	@ (800c690 <SVCCTL_RegisterSvcHandler+0x30>)
 800c680:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800c682:	bf00      	nop
}
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	200001f4 	.word	0x200001f4

0800c694 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	2bff      	cmp	r3, #255	@ 0xff
 800c6ac:	d125      	bne.n	800c6fa <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	3302      	adds	r3, #2
 800c6b2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	881b      	ldrh	r3, [r3, #0]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c6be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c6c2:	d118      	bne.n	800c6f6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	757b      	strb	r3, [r7, #21]
 800c6c8:	e00d      	b.n	800c6e6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c6ca:	7d7b      	ldrb	r3, [r7, #21]
 800c6cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c738 <SVCCTL_UserEvtRx+0xa4>)
 800c6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	4798      	blx	r3
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d108      	bne.n	800c6f2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c6e0:	7d7b      	ldrb	r3, [r7, #21]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	757b      	strb	r3, [r7, #21]
 800c6e6:	4b14      	ldr	r3, [pc, #80]	@ (800c738 <SVCCTL_UserEvtRx+0xa4>)
 800c6e8:	7f1b      	ldrb	r3, [r3, #28]
 800c6ea:	7d7a      	ldrb	r2, [r7, #21]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d3ec      	bcc.n	800c6ca <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800c6f0:	e002      	b.n	800c6f8 <SVCCTL_UserEvtRx+0x64>
              break;
 800c6f2:	bf00      	nop
          break;
 800c6f4:	e000      	b.n	800c6f8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800c6f6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800c6f8:	e000      	b.n	800c6fc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800c6fa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800c6fc:	7dfb      	ldrb	r3, [r7, #23]
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d00f      	beq.n	800c722 <SVCCTL_UserEvtRx+0x8e>
 800c702:	2b02      	cmp	r3, #2
 800c704:	dc10      	bgt.n	800c728 <SVCCTL_UserEvtRx+0x94>
 800c706:	2b00      	cmp	r3, #0
 800c708:	d002      	beq.n	800c710 <SVCCTL_UserEvtRx+0x7c>
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d006      	beq.n	800c71c <SVCCTL_UserEvtRx+0x88>
 800c70e:	e00b      	b.n	800c728 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fffb 	bl	800d70c <SVCCTL_App_Notification>
 800c716:	4603      	mov	r3, r0
 800c718:	75bb      	strb	r3, [r7, #22]
      break;
 800c71a:	e008      	b.n	800c72e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c71c:	2301      	movs	r3, #1
 800c71e:	75bb      	strb	r3, [r7, #22]
      break;
 800c720:	e005      	b.n	800c72e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c722:	2300      	movs	r3, #0
 800c724:	75bb      	strb	r3, [r7, #22]
      break;
 800c726:	e002      	b.n	800c72e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c728:	2301      	movs	r3, #1
 800c72a:	75bb      	strb	r3, [r7, #22]
      break;
 800c72c:	bf00      	nop
  }

  return (return_status);
 800c72e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	200001f4 	.word	0x200001f4

0800c73c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c744:	f107 030c 	add.w	r3, r7, #12
 800c748:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	212e      	movs	r1, #46	@ 0x2e
 800c754:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800c758:	f000 fae8 	bl	800cd2c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	330b      	adds	r3, #11
 800c760:	78db      	ldrb	r3, [r3, #3]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3720      	adds	r7, #32
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b088      	sub	sp, #32
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c772:	f107 030c 	add.w	r3, r7, #12
 800c776:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	210f      	movs	r1, #15
 800c782:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800c786:	f000 fad1 	bl	800cd2c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	330b      	adds	r3, #11
 800c78e:	78db      	ldrb	r3, [r3, #3]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3720      	adds	r7, #32
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b088      	sub	sp, #32
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c7a0:	f107 030c 	add.w	r3, r7, #12
 800c7a4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	2110      	movs	r1, #16
 800c7ac:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800c7b0:	f000 fabc 	bl	800cd2c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	330b      	adds	r3, #11
 800c7b8:	78db      	ldrb	r3, [r3, #3]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3720      	adds	r7, #32
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
	...

0800c7c4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b08b      	sub	sp, #44	@ 0x2c
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800c7ec:	4b4a      	ldr	r3, [pc, #296]	@ (800c918 <SHCI_GetWirelessFwInfo+0x154>)
 800c7ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c7f4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800c7fe:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a44      	ldr	r2, [pc, #272]	@ (800c91c <SHCI_GetWirelessFwInfo+0x158>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d10f      	bne.n	800c830 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	699b      	ldr	r3, [r3, #24]
 800c81a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	69db      	ldr	r3, [r3, #28]
 800c820:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	617b      	str	r3, [r7, #20]
 800c82e:	e01a      	b.n	800c866 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800c838:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800c83c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c868:	0e1b      	lsrs	r3, r3, #24
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c872:	0c1b      	lsrs	r3, r3, #16
 800c874:	b2da      	uxtb	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87c:	0a1b      	lsrs	r3, r3, #8
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800c884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c886:	091b      	lsrs	r3, r3, #4
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	f003 030f 	and.w	r3, r3, #15
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800c894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f003 030f 	and.w	r3, r3, #15
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c8a2:	6a3b      	ldr	r3, [r7, #32]
 800c8a4:	0e1b      	lsrs	r3, r3, #24
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	0c1b      	lsrs	r3, r3, #16
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	0a1b      	lsrs	r3, r3, #8
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	0e1b      	lsrs	r3, r3, #24
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	0c1b      	lsrs	r3, r3, #16
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	0a1b      	lsrs	r3, r3, #8
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	0e1b      	lsrs	r3, r3, #24
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	0c1b      	lsrs	r3, r3, #16
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	b2da      	uxtb	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	372c      	adds	r7, #44	@ 0x2c
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr
 800c918:	58004000 	.word	0x58004000
 800c91c:	a94656b9 	.word	0xa94656b9

0800c920 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	4a08      	ldr	r2, [pc, #32]	@ (800c950 <hci_init+0x30>)
 800c930:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800c932:	4a08      	ldr	r2, [pc, #32]	@ (800c954 <hci_init+0x34>)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800c938:	4806      	ldr	r0, [pc, #24]	@ (800c954 <hci_init+0x34>)
 800c93a:	f000 f979 	bl	800cc30 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4618      	mov	r0, r3
 800c944:	f000 f8da 	bl	800cafc <TlInit>

  return;
 800c948:	bf00      	nop
}
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	20000758 	.word	0x20000758
 800c954:	20000730 	.word	0x20000730

0800c958 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c95e:	4822      	ldr	r0, [pc, #136]	@ (800c9e8 <hci_user_evt_proc+0x90>)
 800c960:	f000 fda8 	bl	800d4b4 <LST_is_empty>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d12b      	bne.n	800c9c2 <hci_user_evt_proc+0x6a>
 800c96a:	4b20      	ldr	r3, [pc, #128]	@ (800c9ec <hci_user_evt_proc+0x94>)
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d027      	beq.n	800c9c2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c972:	f107 030c 	add.w	r3, r7, #12
 800c976:	4619      	mov	r1, r3
 800c978:	481b      	ldr	r0, [pc, #108]	@ (800c9e8 <hci_user_evt_proc+0x90>)
 800c97a:	f000 fe2a 	bl	800d5d2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800c97e:	4b1c      	ldr	r3, [pc, #112]	@ (800c9f0 <hci_user_evt_proc+0x98>)
 800c980:	69db      	ldr	r3, [r3, #28]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00c      	beq.n	800c9a0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800c98a:	2301      	movs	r3, #1
 800c98c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c98e:	4b18      	ldr	r3, [pc, #96]	@ (800c9f0 <hci_user_evt_proc+0x98>)
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	1d3a      	adds	r2, r7, #4
 800c994:	4610      	mov	r0, r2
 800c996:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800c998:	793a      	ldrb	r2, [r7, #4]
 800c99a:	4b14      	ldr	r3, [pc, #80]	@ (800c9ec <hci_user_evt_proc+0x94>)
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	e002      	b.n	800c9a6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c9a0:	4b12      	ldr	r3, [pc, #72]	@ (800c9ec <hci_user_evt_proc+0x94>)
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c9a6:	4b11      	ldr	r3, [pc, #68]	@ (800c9ec <hci_user_evt_proc+0x94>)
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d004      	beq.n	800c9b8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 fc0d 	bl	800d1d0 <TL_MM_EvtDone>
 800c9b6:	e004      	b.n	800c9c2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	480a      	ldr	r0, [pc, #40]	@ (800c9e8 <hci_user_evt_proc+0x90>)
 800c9be:	f000 fd9b 	bl	800d4f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c9c2:	4809      	ldr	r0, [pc, #36]	@ (800c9e8 <hci_user_evt_proc+0x90>)
 800c9c4:	f000 fd76 	bl	800d4b4 <LST_is_empty>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d107      	bne.n	800c9de <hci_user_evt_proc+0x86>
 800c9ce:	4b07      	ldr	r3, [pc, #28]	@ (800c9ec <hci_user_evt_proc+0x94>)
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d003      	beq.n	800c9de <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c9d6:	4804      	ldr	r0, [pc, #16]	@ (800c9e8 <hci_user_evt_proc+0x90>)
 800c9d8:	f001 f8be 	bl	800db58 <hci_notify_asynch_evt>
  }


  return;
 800c9dc:	bf00      	nop
 800c9de:	bf00      	nop
}
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	2000021c 	.word	0x2000021c
 800c9ec:	20000228 	.word	0x20000228
 800c9f0:	20000730 	.word	0x20000730

0800c9f4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ca00:	2000      	movs	r0, #0
 800ca02:	f000 f8d1 	bl	800cba8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ca06:	2300      	movs	r3, #0
 800ca08:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	885b      	ldrh	r3, [r3, #2]
 800ca0e:	b21b      	sxth	r3, r3
 800ca10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca14:	b21a      	sxth	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	029b      	lsls	r3, r3, #10
 800ca1c:	b21b      	sxth	r3, r3
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	b21b      	sxth	r3, r3
 800ca22:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800ca24:	4b33      	ldr	r3, [pc, #204]	@ (800caf4 <hci_send_req+0x100>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	b2d9      	uxtb	r1, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689a      	ldr	r2, [r3, #8]
 800ca34:	8bbb      	ldrh	r3, [r7, #28]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 f890 	bl	800cb5c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ca3c:	e04e      	b.n	800cadc <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ca3e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800ca42:	f001 f8a0 	bl	800db86 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ca46:	e043      	b.n	800cad0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ca48:	f107 030c 	add.w	r3, r7, #12
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	482a      	ldr	r0, [pc, #168]	@ (800caf8 <hci_send_req+0x104>)
 800ca50:	f000 fdbf 	bl	800d5d2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	7a5b      	ldrb	r3, [r3, #9]
 800ca58:	2b0f      	cmp	r3, #15
 800ca5a:	d114      	bne.n	800ca86 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	330b      	adds	r3, #11
 800ca60:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	885b      	ldrh	r3, [r3, #2]
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	8bba      	ldrh	r2, [r7, #28]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d104      	bne.n	800ca78 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	693a      	ldr	r2, [r7, #16]
 800ca74:	7812      	ldrb	r2, [r2, #0]
 800ca76:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	785b      	ldrb	r3, [r3, #1]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d027      	beq.n	800cad0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ca80:	2301      	movs	r3, #1
 800ca82:	77fb      	strb	r3, [r7, #31]
 800ca84:	e024      	b.n	800cad0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	330b      	adds	r3, #11
 800ca8a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	8bba      	ldrh	r2, [r7, #28]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d114      	bne.n	800cac4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	7a9b      	ldrb	r3, [r3, #10]
 800ca9e:	3b03      	subs	r3, #3
 800caa0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	695a      	ldr	r2, [r3, #20]
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	bfa8      	it	ge
 800caac:	461a      	movge	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6918      	ldr	r0, [r3, #16]
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	1cd9      	adds	r1, r3, #3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	695b      	ldr	r3, [r3, #20]
 800cabe:	461a      	mov	r2, r3
 800cac0:	f003 f8c3 	bl	800fc4a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800cacc:	2301      	movs	r3, #1
 800cace:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800cad0:	4809      	ldr	r0, [pc, #36]	@ (800caf8 <hci_send_req+0x104>)
 800cad2:	f000 fcef 	bl	800d4b4 <LST_is_empty>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d0b5      	beq.n	800ca48 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800cadc:	7ffb      	ldrb	r3, [r7, #31]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0ad      	beq.n	800ca3e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800cae2:	2001      	movs	r0, #1
 800cae4:	f000 f860 	bl	800cba8 <NotifyCmdStatus>

  return 0;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3720      	adds	r7, #32
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	2000075c 	.word	0x2000075c
 800caf8:	20000750 	.word	0x20000750

0800cafc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b086      	sub	sp, #24
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800cb04:	480f      	ldr	r0, [pc, #60]	@ (800cb44 <TlInit+0x48>)
 800cb06:	f000 fcc5 	bl	800d494 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800cb0a:	4a0f      	ldr	r2, [pc, #60]	@ (800cb48 <TlInit+0x4c>)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800cb10:	480e      	ldr	r0, [pc, #56]	@ (800cb4c <TlInit+0x50>)
 800cb12:	f000 fcbf 	bl	800d494 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800cb16:	4b0e      	ldr	r3, [pc, #56]	@ (800cb50 <TlInit+0x54>)
 800cb18:	2201      	movs	r2, #1
 800cb1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800cb1c:	4b0d      	ldr	r3, [pc, #52]	@ (800cb54 <TlInit+0x58>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00a      	beq.n	800cb3a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800cb28:	4b0b      	ldr	r3, [pc, #44]	@ (800cb58 <TlInit+0x5c>)
 800cb2a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800cb2c:	4b09      	ldr	r3, [pc, #36]	@ (800cb54 <TlInit+0x58>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f107 0208 	add.w	r2, r7, #8
 800cb34:	4610      	mov	r0, r2
 800cb36:	4798      	blx	r3
  }

  return;
 800cb38:	bf00      	nop
 800cb3a:	bf00      	nop
}
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	20000750 	.word	0x20000750
 800cb48:	20000224 	.word	0x20000224
 800cb4c:	2000021c 	.word	0x2000021c
 800cb50:	20000228 	.word	0x20000228
 800cb54:	20000730 	.word	0x20000730
 800cb58:	0800cbe9 	.word	0x0800cbe9

0800cb5c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	4603      	mov	r3, r0
 800cb64:	603a      	str	r2, [r7, #0]
 800cb66:	80fb      	strh	r3, [r7, #6]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800cb6c:	4b0c      	ldr	r3, [pc, #48]	@ (800cba0 <SendCmd+0x44>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	88fa      	ldrh	r2, [r7, #6]
 800cb72:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800cb76:	4b0a      	ldr	r3, [pc, #40]	@ (800cba0 <SendCmd+0x44>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	797a      	ldrb	r2, [r7, #5]
 800cb7c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800cb7e:	4b08      	ldr	r3, [pc, #32]	@ (800cba0 <SendCmd+0x44>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	330c      	adds	r3, #12
 800cb84:	797a      	ldrb	r2, [r7, #5]
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f003 f85e 	bl	800fc4a <memcpy>

  hciContext.io.Send(0,0);
 800cb8e:	4b05      	ldr	r3, [pc, #20]	@ (800cba4 <SendCmd+0x48>)
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	2100      	movs	r1, #0
 800cb94:	2000      	movs	r0, #0
 800cb96:	4798      	blx	r3

  return;
 800cb98:	bf00      	nop
}
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	20000224 	.word	0x20000224
 800cba4:	20000730 	.word	0x20000730

0800cba8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800cbb2:	79fb      	ldrb	r3, [r7, #7]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d108      	bne.n	800cbca <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800cbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe4 <NotifyCmdStatus+0x3c>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00d      	beq.n	800cbdc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800cbc0:	4b08      	ldr	r3, [pc, #32]	@ (800cbe4 <NotifyCmdStatus+0x3c>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800cbc8:	e008      	b.n	800cbdc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800cbca:	4b06      	ldr	r3, [pc, #24]	@ (800cbe4 <NotifyCmdStatus+0x3c>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d004      	beq.n	800cbdc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800cbd2:	4b04      	ldr	r3, [pc, #16]	@ (800cbe4 <NotifyCmdStatus+0x3c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	4798      	blx	r3
  return;
 800cbda:	bf00      	nop
 800cbdc:	bf00      	nop
}
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	20000758 	.word	0x20000758

0800cbe8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	7a5b      	ldrb	r3, [r3, #9]
 800cbf4:	2b0f      	cmp	r3, #15
 800cbf6:	d003      	beq.n	800cc00 <TlEvtReceived+0x18>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	7a5b      	ldrb	r3, [r3, #9]
 800cbfc:	2b0e      	cmp	r3, #14
 800cbfe:	d107      	bne.n	800cc10 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800cc00:	6879      	ldr	r1, [r7, #4]
 800cc02:	4809      	ldr	r0, [pc, #36]	@ (800cc28 <TlEvtReceived+0x40>)
 800cc04:	f000 fc9e 	bl	800d544 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800cc08:	2000      	movs	r0, #0
 800cc0a:	f000 ffb1 	bl	800db70 <hci_cmd_resp_release>
 800cc0e:	e006      	b.n	800cc1e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800cc10:	6879      	ldr	r1, [r7, #4]
 800cc12:	4806      	ldr	r0, [pc, #24]	@ (800cc2c <TlEvtReceived+0x44>)
 800cc14:	f000 fc96 	bl	800d544 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800cc18:	4804      	ldr	r0, [pc, #16]	@ (800cc2c <TlEvtReceived+0x44>)
 800cc1a:	f000 ff9d 	bl	800db58 <hci_notify_asynch_evt>
  }

  return;
 800cc1e:	bf00      	nop
}
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20000750 	.word	0x20000750
 800cc2c:	2000021c 	.word	0x2000021c

0800cc30 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4a05      	ldr	r2, [pc, #20]	@ (800cc50 <hci_register_io_bus+0x20>)
 800cc3c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a04      	ldr	r2, [pc, #16]	@ (800cc54 <hci_register_io_bus+0x24>)
 800cc42:	611a      	str	r2, [r3, #16]

  return;
 800cc44:	bf00      	nop
}
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	0800cf49 	.word	0x0800cf49
 800cc54:	0800cfb1 	.word	0x0800cfb1

0800cc58 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	4a08      	ldr	r2, [pc, #32]	@ (800cc88 <shci_init+0x30>)
 800cc68:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800cc6a:	4a08      	ldr	r2, [pc, #32]	@ (800cc8c <shci_init+0x34>)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800cc70:	4806      	ldr	r0, [pc, #24]	@ (800cc8c <shci_init+0x34>)
 800cc72:	f000 f915 	bl	800cea0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 f898 	bl	800cdb0 <TlInit>

  return;
 800cc80:	bf00      	nop
}
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	20000780 	.word	0x20000780
 800cc8c:	20000760 	.word	0x20000760

0800cc90 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800cc96:	4822      	ldr	r0, [pc, #136]	@ (800cd20 <shci_user_evt_proc+0x90>)
 800cc98:	f000 fc0c 	bl	800d4b4 <LST_is_empty>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d12b      	bne.n	800ccfa <shci_user_evt_proc+0x6a>
 800cca2:	4b20      	ldr	r3, [pc, #128]	@ (800cd24 <shci_user_evt_proc+0x94>)
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d027      	beq.n	800ccfa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ccaa:	f107 030c 	add.w	r3, r7, #12
 800ccae:	4619      	mov	r1, r3
 800ccb0:	481b      	ldr	r0, [pc, #108]	@ (800cd20 <shci_user_evt_proc+0x90>)
 800ccb2:	f000 fc8e 	bl	800d5d2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800ccb6:	4b1c      	ldr	r3, [pc, #112]	@ (800cd28 <shci_user_evt_proc+0x98>)
 800ccb8:	69db      	ldr	r3, [r3, #28]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00c      	beq.n	800ccd8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ccc6:	4b18      	ldr	r3, [pc, #96]	@ (800cd28 <shci_user_evt_proc+0x98>)
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	1d3a      	adds	r2, r7, #4
 800cccc:	4610      	mov	r0, r2
 800ccce:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800ccd0:	793a      	ldrb	r2, [r7, #4]
 800ccd2:	4b14      	ldr	r3, [pc, #80]	@ (800cd24 <shci_user_evt_proc+0x94>)
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	e002      	b.n	800ccde <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ccd8:	4b12      	ldr	r3, [pc, #72]	@ (800cd24 <shci_user_evt_proc+0x94>)
 800ccda:	2201      	movs	r2, #1
 800ccdc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800ccde:	4b11      	ldr	r3, [pc, #68]	@ (800cd24 <shci_user_evt_proc+0x94>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d004      	beq.n	800ccf0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 fa71 	bl	800d1d0 <TL_MM_EvtDone>
 800ccee:	e004      	b.n	800ccfa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	480a      	ldr	r0, [pc, #40]	@ (800cd20 <shci_user_evt_proc+0x90>)
 800ccf6:	f000 fbff 	bl	800d4f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ccfa:	4809      	ldr	r0, [pc, #36]	@ (800cd20 <shci_user_evt_proc+0x90>)
 800ccfc:	f000 fbda 	bl	800d4b4 <LST_is_empty>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d107      	bne.n	800cd16 <shci_user_evt_proc+0x86>
 800cd06:	4b07      	ldr	r3, [pc, #28]	@ (800cd24 <shci_user_evt_proc+0x94>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800cd0e:	4804      	ldr	r0, [pc, #16]	@ (800cd20 <shci_user_evt_proc+0x90>)
 800cd10:	f7f4 fd3c 	bl	800178c <shci_notify_asynch_evt>
  }


  return;
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop
}
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	2000022c 	.word	0x2000022c
 800cd24:	2000023c 	.word	0x2000023c
 800cd28:	20000760 	.word	0x20000760

0800cd2c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60ba      	str	r2, [r7, #8]
 800cd34:	607b      	str	r3, [r7, #4]
 800cd36:	4603      	mov	r3, r0
 800cd38:	81fb      	strh	r3, [r7, #14]
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800cd3e:	2000      	movs	r0, #0
 800cd40:	f000 f868 	bl	800ce14 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800cd44:	4b17      	ldr	r3, [pc, #92]	@ (800cda4 <shci_send+0x78>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	89fa      	ldrh	r2, [r7, #14]
 800cd4a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800cd4e:	4b15      	ldr	r3, [pc, #84]	@ (800cda4 <shci_send+0x78>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	7b7a      	ldrb	r2, [r7, #13]
 800cd54:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800cd56:	4b13      	ldr	r3, [pc, #76]	@ (800cda4 <shci_send+0x78>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	330c      	adds	r3, #12
 800cd5c:	7b7a      	ldrb	r2, [r7, #13]
 800cd5e:	68b9      	ldr	r1, [r7, #8]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f002 ff72 	bl	800fc4a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800cd66:	4b10      	ldr	r3, [pc, #64]	@ (800cda8 <shci_send+0x7c>)
 800cd68:	2201      	movs	r2, #1
 800cd6a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800cd6c:	4b0f      	ldr	r3, [pc, #60]	@ (800cdac <shci_send+0x80>)
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	2100      	movs	r1, #0
 800cd72:	2000      	movs	r0, #0
 800cd74:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800cd76:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800cd7a:	f7f4 fd1e 	bl	80017ba <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f103 0008 	add.w	r0, r3, #8
 800cd84:	4b07      	ldr	r3, [pc, #28]	@ (800cda4 <shci_send+0x78>)
 800cd86:	6819      	ldr	r1, [r3, #0]
 800cd88:	4b06      	ldr	r3, [pc, #24]	@ (800cda4 <shci_send+0x78>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	789b      	ldrb	r3, [r3, #2]
 800cd8e:	3303      	adds	r3, #3
 800cd90:	461a      	mov	r2, r3
 800cd92:	f002 ff5a 	bl	800fc4a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800cd96:	2001      	movs	r0, #1
 800cd98:	f000 f83c 	bl	800ce14 <Cmd_SetStatus>

  return;
 800cd9c:	bf00      	nop
}
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	20000238 	.word	0x20000238
 800cda8:	20000784 	.word	0x20000784
 800cdac:	20000760 	.word	0x20000760

0800cdb0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800cdb8:	4a10      	ldr	r2, [pc, #64]	@ (800cdfc <TlInit+0x4c>)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800cdbe:	4810      	ldr	r0, [pc, #64]	@ (800ce00 <TlInit+0x50>)
 800cdc0:	f000 fb68 	bl	800d494 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800cdc4:	2001      	movs	r0, #1
 800cdc6:	f000 f825 	bl	800ce14 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800cdca:	4b0e      	ldr	r3, [pc, #56]	@ (800ce04 <TlInit+0x54>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800cdd0:	4b0d      	ldr	r3, [pc, #52]	@ (800ce08 <TlInit+0x58>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00c      	beq.n	800cdf2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800cddc:	4b0b      	ldr	r3, [pc, #44]	@ (800ce0c <TlInit+0x5c>)
 800cdde:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800cde0:	4b0b      	ldr	r3, [pc, #44]	@ (800ce10 <TlInit+0x60>)
 800cde2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800cde4:	4b08      	ldr	r3, [pc, #32]	@ (800ce08 <TlInit+0x58>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f107 020c 	add.w	r2, r7, #12
 800cdec:	4610      	mov	r0, r2
 800cdee:	4798      	blx	r3
  }

  return;
 800cdf0:	bf00      	nop
 800cdf2:	bf00      	nop
}
 800cdf4:	3718      	adds	r7, #24
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20000238 	.word	0x20000238
 800ce00:	2000022c 	.word	0x2000022c
 800ce04:	2000023c 	.word	0x2000023c
 800ce08:	20000760 	.word	0x20000760
 800ce0c:	0800ce65 	.word	0x0800ce65
 800ce10:	0800ce7d 	.word	0x0800ce7d

0800ce14 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ce1e:	79fb      	ldrb	r3, [r7, #7]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10b      	bne.n	800ce3c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ce24:	4b0d      	ldr	r3, [pc, #52]	@ (800ce5c <Cmd_SetStatus+0x48>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d003      	beq.n	800ce34 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ce2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce5c <Cmd_SetStatus+0x48>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2000      	movs	r0, #0
 800ce32:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ce34:	4b0a      	ldr	r3, [pc, #40]	@ (800ce60 <Cmd_SetStatus+0x4c>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ce3a:	e00b      	b.n	800ce54 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ce3c:	4b08      	ldr	r3, [pc, #32]	@ (800ce60 <Cmd_SetStatus+0x4c>)
 800ce3e:	2201      	movs	r2, #1
 800ce40:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ce42:	4b06      	ldr	r3, [pc, #24]	@ (800ce5c <Cmd_SetStatus+0x48>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d004      	beq.n	800ce54 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ce4a:	4b04      	ldr	r3, [pc, #16]	@ (800ce5c <Cmd_SetStatus+0x48>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2001      	movs	r0, #1
 800ce50:	4798      	blx	r3
  return;
 800ce52:	bf00      	nop
 800ce54:	bf00      	nop
}
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	20000780 	.word	0x20000780
 800ce60:	20000234 	.word	0x20000234

0800ce64 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	f7f4 fc99 	bl	80017a4 <shci_cmd_resp_release>

  return;
 800ce72:	bf00      	nop
}
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ce84:	6879      	ldr	r1, [r7, #4]
 800ce86:	4805      	ldr	r0, [pc, #20]	@ (800ce9c <TlUserEvtReceived+0x20>)
 800ce88:	f000 fb5c 	bl	800d544 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ce8c:	4803      	ldr	r0, [pc, #12]	@ (800ce9c <TlUserEvtReceived+0x20>)
 800ce8e:	f7f4 fc7d 	bl	800178c <shci_notify_asynch_evt>

  return;
 800ce92:	bf00      	nop
}
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	2000022c 	.word	0x2000022c

0800cea0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4a05      	ldr	r2, [pc, #20]	@ (800cec0 <shci_register_io_bus+0x20>)
 800ceac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a04      	ldr	r2, [pc, #16]	@ (800cec4 <shci_register_io_bus+0x24>)
 800ceb2:	611a      	str	r2, [r3, #16]

  return;
 800ceb4:	bf00      	nop
}
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	0800d05d 	.word	0x0800d05d
 800cec4:	0800d0b1 	.word	0x0800d0b1

0800cec8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800cecc:	f001 f978 	bl	800e1c0 <HW_IPCC_Enable>

  return;
 800ced0:	bf00      	nop
}
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <TL_Init>:


void TL_Init( void )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ced8:	4b10      	ldr	r3, [pc, #64]	@ (800cf1c <TL_Init+0x48>)
 800ceda:	4a11      	ldr	r2, [pc, #68]	@ (800cf20 <TL_Init+0x4c>)
 800cedc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800cede:	4b0f      	ldr	r3, [pc, #60]	@ (800cf1c <TL_Init+0x48>)
 800cee0:	4a10      	ldr	r2, [pc, #64]	@ (800cf24 <TL_Init+0x50>)
 800cee2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800cee4:	4b0d      	ldr	r3, [pc, #52]	@ (800cf1c <TL_Init+0x48>)
 800cee6:	4a10      	ldr	r2, [pc, #64]	@ (800cf28 <TL_Init+0x54>)
 800cee8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ceea:	4b0c      	ldr	r3, [pc, #48]	@ (800cf1c <TL_Init+0x48>)
 800ceec:	4a0f      	ldr	r2, [pc, #60]	@ (800cf2c <TL_Init+0x58>)
 800ceee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800cef0:	4b0a      	ldr	r3, [pc, #40]	@ (800cf1c <TL_Init+0x48>)
 800cef2:	4a0f      	ldr	r2, [pc, #60]	@ (800cf30 <TL_Init+0x5c>)
 800cef4:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800cef6:	4b09      	ldr	r3, [pc, #36]	@ (800cf1c <TL_Init+0x48>)
 800cef8:	4a0e      	ldr	r2, [pc, #56]	@ (800cf34 <TL_Init+0x60>)
 800cefa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800cefc:	4b07      	ldr	r3, [pc, #28]	@ (800cf1c <TL_Init+0x48>)
 800cefe:	4a0e      	ldr	r2, [pc, #56]	@ (800cf38 <TL_Init+0x64>)
 800cf00:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800cf02:	4b06      	ldr	r3, [pc, #24]	@ (800cf1c <TL_Init+0x48>)
 800cf04:	4a0d      	ldr	r2, [pc, #52]	@ (800cf3c <TL_Init+0x68>)
 800cf06:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800cf08:	4b04      	ldr	r3, [pc, #16]	@ (800cf1c <TL_Init+0x48>)
 800cf0a:	4a0d      	ldr	r2, [pc, #52]	@ (800cf40 <TL_Init+0x6c>)
 800cf0c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800cf0e:	4b03      	ldr	r3, [pc, #12]	@ (800cf1c <TL_Init+0x48>)
 800cf10:	4a0c      	ldr	r2, [pc, #48]	@ (800cf44 <TL_Init+0x70>)
 800cf12:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800cf14:	f001 f968 	bl	800e1e8 <HW_IPCC_Init>

  return;
 800cf18:	bf00      	nop
}
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	20030000 	.word	0x20030000
 800cf20:	20030028 	.word	0x20030028
 800cf24:	20030048 	.word	0x20030048
 800cf28:	20030058 	.word	0x20030058
 800cf2c:	20030068 	.word	0x20030068
 800cf30:	20030070 	.word	0x20030070
 800cf34:	20030078 	.word	0x20030078
 800cf38:	20030080 	.word	0x20030080
 800cf3c:	2003009c 	.word	0x2003009c
 800cf40:	200300a0 	.word	0x200300a0
 800cf44:	200300ac 	.word	0x200300ac

0800cf48 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800cf54:	4811      	ldr	r0, [pc, #68]	@ (800cf9c <TL_BLE_Init+0x54>)
 800cf56:	f000 fa9d 	bl	800d494 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800cf5a:	4b11      	ldr	r3, [pc, #68]	@ (800cfa0 <TL_BLE_Init+0x58>)
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	689a      	ldr	r2, [r3, #8]
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	68da      	ldr	r2, [r3, #12]
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	4a0c      	ldr	r2, [pc, #48]	@ (800cfa4 <TL_BLE_Init+0x5c>)
 800cf74:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	4a08      	ldr	r2, [pc, #32]	@ (800cf9c <TL_BLE_Init+0x54>)
 800cf7a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800cf7c:	f001 f94a 	bl	800e214 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a08      	ldr	r2, [pc, #32]	@ (800cfa8 <TL_BLE_Init+0x60>)
 800cf86:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	4a07      	ldr	r2, [pc, #28]	@ (800cfac <TL_BLE_Init+0x64>)
 800cf8e:	6013      	str	r3, [r2, #0]

  return 0;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	200300c8 	.word	0x200300c8
 800cfa0:	20030000 	.word	0x20030000
 800cfa4:	20030a58 	.word	0x20030a58
 800cfa8:	20000790 	.word	0x20000790
 800cfac:	20000794 	.word	0x20000794

0800cfb0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800cfbc:	4b09      	ldr	r3, [pc, #36]	@ (800cfe4 <TL_BLE_SendCmd+0x34>)
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800cfc6:	4b07      	ldr	r3, [pc, #28]	@ (800cfe4 <TL_BLE_SendCmd+0x34>)
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	2001      	movs	r0, #1
 800cfd0:	f000 f96c 	bl	800d2ac <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800cfd4:	f001 f928 	bl	800e228 <HW_IPCC_BLE_SendCmd>

  return 0;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3708      	adds	r7, #8
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	20030000 	.word	0x20030000

0800cfe8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800cfee:	e01c      	b.n	800d02a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800cff0:	1d3b      	adds	r3, r7, #4
 800cff2:	4619      	mov	r1, r3
 800cff4:	4812      	ldr	r0, [pc, #72]	@ (800d040 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800cff6:	f000 faec 	bl	800d5d2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	7a5b      	ldrb	r3, [r3, #9]
 800cffe:	2b0f      	cmp	r3, #15
 800d000:	d003      	beq.n	800d00a <HW_IPCC_BLE_RxEvtNot+0x22>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	7a5b      	ldrb	r3, [r3, #9]
 800d006:	2b0e      	cmp	r3, #14
 800d008:	d105      	bne.n	800d016 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4619      	mov	r1, r3
 800d00e:	2002      	movs	r0, #2
 800d010:	f000 f94c 	bl	800d2ac <OutputDbgTrace>
 800d014:	e004      	b.n	800d020 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4619      	mov	r1, r3
 800d01a:	2003      	movs	r0, #3
 800d01c:	f000 f946 	bl	800d2ac <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800d020:	4b08      	ldr	r3, [pc, #32]	@ (800d044 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	4610      	mov	r0, r2
 800d028:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d02a:	4805      	ldr	r0, [pc, #20]	@ (800d040 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800d02c:	f000 fa42 	bl	800d4b4 <LST_is_empty>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d0dc      	beq.n	800cff0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800d036:	bf00      	nop
}
 800d038:	3708      	adds	r7, #8
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	200300c8 	.word	0x200300c8
 800d044:	20000790 	.word	0x20000790

0800d048 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800d04c:	4b02      	ldr	r3, [pc, #8]	@ (800d058 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4798      	blx	r3

  return;
 800d052:	bf00      	nop
}
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	20000794 	.word	0x20000794

0800d05c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800d068:	480d      	ldr	r0, [pc, #52]	@ (800d0a0 <TL_SYS_Init+0x44>)
 800d06a:	f000 fa13 	bl	800d494 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800d06e:	4b0d      	ldr	r3, [pc, #52]	@ (800d0a4 <TL_SYS_Init+0x48>)
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	689a      	ldr	r2, [r3, #8]
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	4a08      	ldr	r2, [pc, #32]	@ (800d0a0 <TL_SYS_Init+0x44>)
 800d080:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800d082:	f001 f8f3 	bl	800e26c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a07      	ldr	r2, [pc, #28]	@ (800d0a8 <TL_SYS_Init+0x4c>)
 800d08c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	4a06      	ldr	r2, [pc, #24]	@ (800d0ac <TL_SYS_Init+0x50>)
 800d094:	6013      	str	r3, [r2, #0]

  return 0;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	200300d0 	.word	0x200300d0
 800d0a4:	20030000 	.word	0x20030000
 800d0a8:	20000798 	.word	0x20000798
 800d0ac:	2000079c 	.word	0x2000079c

0800d0b0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800d0bc:	4b09      	ldr	r3, [pc, #36]	@ (800d0e4 <TL_SYS_SendCmd+0x34>)
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2210      	movs	r2, #16
 800d0c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800d0c6:	4b07      	ldr	r3, [pc, #28]	@ (800d0e4 <TL_SYS_SendCmd+0x34>)
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	2004      	movs	r0, #4
 800d0d0:	f000 f8ec 	bl	800d2ac <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800d0d4:	f001 f8d4 	bl	800e280 <HW_IPCC_SYS_SendCmd>

  return 0;
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	20030000 	.word	0x20030000

0800d0e8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d0ec:	4b07      	ldr	r3, [pc, #28]	@ (800d10c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	2005      	movs	r0, #5
 800d0f6:	f000 f8d9 	bl	800d2ac <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d0fa:	4b05      	ldr	r3, [pc, #20]	@ (800d110 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a03      	ldr	r2, [pc, #12]	@ (800d10c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d100:	68d2      	ldr	r2, [r2, #12]
 800d102:	6812      	ldr	r2, [r2, #0]
 800d104:	4610      	mov	r0, r2
 800d106:	4798      	blx	r3

  return;
 800d108:	bf00      	nop
}
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	20030000 	.word	0x20030000
 800d110:	20000798 	.word	0x20000798

0800d114 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d11a:	e00e      	b.n	800d13a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d11c:	1d3b      	adds	r3, r7, #4
 800d11e:	4619      	mov	r1, r3
 800d120:	480b      	ldr	r0, [pc, #44]	@ (800d150 <HW_IPCC_SYS_EvtNot+0x3c>)
 800d122:	f000 fa56 	bl	800d5d2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4619      	mov	r1, r3
 800d12a:	2006      	movs	r0, #6
 800d12c:	f000 f8be 	bl	800d2ac <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d130:	4b08      	ldr	r3, [pc, #32]	@ (800d154 <HW_IPCC_SYS_EvtNot+0x40>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	4610      	mov	r0, r2
 800d138:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d13a:	4805      	ldr	r0, [pc, #20]	@ (800d150 <HW_IPCC_SYS_EvtNot+0x3c>)
 800d13c:	f000 f9ba 	bl	800d4b4 <LST_is_empty>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d0ea      	beq.n	800d11c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800d146:	bf00      	nop
}
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	200300d0 	.word	0x200300d0
 800d154:	2000079c 	.word	0x2000079c

0800d158 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800d160:	4817      	ldr	r0, [pc, #92]	@ (800d1c0 <TL_MM_Init+0x68>)
 800d162:	f000 f997 	bl	800d494 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800d166:	4817      	ldr	r0, [pc, #92]	@ (800d1c4 <TL_MM_Init+0x6c>)
 800d168:	f000 f994 	bl	800d494 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800d16c:	4b16      	ldr	r3, [pc, #88]	@ (800d1c8 <TL_MM_Init+0x70>)
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	4a16      	ldr	r2, [pc, #88]	@ (800d1cc <TL_MM_Init+0x74>)
 800d172:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800d174:	4b15      	ldr	r3, [pc, #84]	@ (800d1cc <TL_MM_Init+0x74>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	6892      	ldr	r2, [r2, #8]
 800d17c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800d17e:	4b13      	ldr	r3, [pc, #76]	@ (800d1cc <TL_MM_Init+0x74>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	68d2      	ldr	r2, [r2, #12]
 800d186:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800d188:	4b10      	ldr	r3, [pc, #64]	@ (800d1cc <TL_MM_Init+0x74>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a0c      	ldr	r2, [pc, #48]	@ (800d1c0 <TL_MM_Init+0x68>)
 800d18e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800d190:	4b0e      	ldr	r3, [pc, #56]	@ (800d1cc <TL_MM_Init+0x74>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	6812      	ldr	r2, [r2, #0]
 800d198:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800d19a:	4b0c      	ldr	r3, [pc, #48]	@ (800d1cc <TL_MM_Init+0x74>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	6852      	ldr	r2, [r2, #4]
 800d1a2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800d1a4:	4b09      	ldr	r3, [pc, #36]	@ (800d1cc <TL_MM_Init+0x74>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	6912      	ldr	r2, [r2, #16]
 800d1ac:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800d1ae:	4b07      	ldr	r3, [pc, #28]	@ (800d1cc <TL_MM_Init+0x74>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	6952      	ldr	r2, [r2, #20]
 800d1b6:	619a      	str	r2, [r3, #24]

  return;
 800d1b8:	bf00      	nop
}
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	200300b8 	.word	0x200300b8
 800d1c4:	20000788 	.word	0x20000788
 800d1c8:	20030000 	.word	0x20030000
 800d1cc:	200007a0 	.word	0x200007a0

0800d1d0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800d1d8:	6879      	ldr	r1, [r7, #4]
 800d1da:	4807      	ldr	r0, [pc, #28]	@ (800d1f8 <TL_MM_EvtDone+0x28>)
 800d1dc:	f000 f9b2 	bl	800d544 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	f000 f862 	bl	800d2ac <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800d1e8:	4804      	ldr	r0, [pc, #16]	@ (800d1fc <TL_MM_EvtDone+0x2c>)
 800d1ea:	f001 f86f 	bl	800e2cc <HW_IPCC_MM_SendFreeBuf>

  return;
 800d1ee:	bf00      	nop
}
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	20000788 	.word	0x20000788
 800d1fc:	0800d201 	.word	0x0800d201

0800d200 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d206:	e00c      	b.n	800d222 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800d208:	1d3b      	adds	r3, r7, #4
 800d20a:	4619      	mov	r1, r3
 800d20c:	480a      	ldr	r0, [pc, #40]	@ (800d238 <SendFreeBuf+0x38>)
 800d20e:	f000 f9e0 	bl	800d5d2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800d212:	4b0a      	ldr	r3, [pc, #40]	@ (800d23c <SendFreeBuf+0x3c>)
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	4611      	mov	r1, r2
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 f991 	bl	800d544 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d222:	4805      	ldr	r0, [pc, #20]	@ (800d238 <SendFreeBuf+0x38>)
 800d224:	f000 f946 	bl	800d4b4 <LST_is_empty>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0ec      	beq.n	800d208 <SendFreeBuf+0x8>
  }

  return;
 800d22e:	bf00      	nop
}
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	20000788 	.word	0x20000788
 800d23c:	20030000 	.word	0x20030000

0800d240 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800d244:	4805      	ldr	r0, [pc, #20]	@ (800d25c <TL_TRACES_Init+0x1c>)
 800d246:	f000 f925 	bl	800d494 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800d24a:	4b05      	ldr	r3, [pc, #20]	@ (800d260 <TL_TRACES_Init+0x20>)
 800d24c:	695b      	ldr	r3, [r3, #20]
 800d24e:	4a03      	ldr	r2, [pc, #12]	@ (800d25c <TL_TRACES_Init+0x1c>)
 800d250:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800d252:	f001 f871 	bl	800e338 <HW_IPCC_TRACES_Init>

  return;
 800d256:	bf00      	nop
}
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	200300c0 	.word	0x200300c0
 800d260:	20030000 	.word	0x20030000

0800d264 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d26a:	e008      	b.n	800d27e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800d26c:	1d3b      	adds	r3, r7, #4
 800d26e:	4619      	mov	r1, r3
 800d270:	4808      	ldr	r0, [pc, #32]	@ (800d294 <HW_IPCC_TRACES_EvtNot+0x30>)
 800d272:	f000 f9ae 	bl	800d5d2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 f80d 	bl	800d298 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d27e:	4805      	ldr	r0, [pc, #20]	@ (800d294 <HW_IPCC_TRACES_EvtNot+0x30>)
 800d280:	f000 f918 	bl	800d4b4 <LST_is_empty>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d0f0      	beq.n	800d26c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800d28a:	bf00      	nop
}
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	200300c0 	.word	0x200300c0

0800d298 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	6039      	str	r1, [r7, #0]
 800d2b6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800d2b8:	79fb      	ldrb	r3, [r7, #7]
 800d2ba:	2b06      	cmp	r3, #6
 800d2bc:	d845      	bhi.n	800d34a <OutputDbgTrace+0x9e>
 800d2be:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c4 <OutputDbgTrace+0x18>)
 800d2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c4:	0800d2e1 	.word	0x0800d2e1
 800d2c8:	0800d305 	.word	0x0800d305
 800d2cc:	0800d30b 	.word	0x0800d30b
 800d2d0:	0800d31f 	.word	0x0800d31f
 800d2d4:	0800d32b 	.word	0x0800d32b
 800d2d8:	0800d331 	.word	0x0800d331
 800d2dc:	0800d33f 	.word	0x0800d33f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	7a5b      	ldrb	r3, [r3, #9]
 800d2e8:	2bff      	cmp	r3, #255	@ 0xff
 800d2ea:	d005      	beq.n	800d2f8 <OutputDbgTrace+0x4c>
 800d2ec:	2bff      	cmp	r3, #255	@ 0xff
 800d2ee:	dc05      	bgt.n	800d2fc <OutputDbgTrace+0x50>
 800d2f0:	2b0e      	cmp	r3, #14
 800d2f2:	d005      	beq.n	800d300 <OutputDbgTrace+0x54>
 800d2f4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800d2f6:	e001      	b.n	800d2fc <OutputDbgTrace+0x50>
          break;
 800d2f8:	bf00      	nop
 800d2fa:	e027      	b.n	800d34c <OutputDbgTrace+0xa0>
          break;
 800d2fc:	bf00      	nop
 800d2fe:	e025      	b.n	800d34c <OutputDbgTrace+0xa0>
          break;
 800d300:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800d302:	e023      	b.n	800d34c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d308:	e020      	b.n	800d34c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	7a5b      	ldrb	r3, [r3, #9]
 800d312:	2b0e      	cmp	r3, #14
 800d314:	d001      	beq.n	800d31a <OutputDbgTrace+0x6e>
 800d316:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800d318:	e000      	b.n	800d31c <OutputDbgTrace+0x70>
          break;
 800d31a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d31c:	e016      	b.n	800d34c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	7a5b      	ldrb	r3, [r3, #9]
 800d326:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d328:	e010      	b.n	800d34c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d32e:	e00d      	b.n	800d34c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	7a5b      	ldrb	r3, [r3, #9]
 800d338:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800d33a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d33c:	e006      	b.n	800d34c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	7a5b      	ldrb	r3, [r3, #9]
 800d346:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d348:	e000      	b.n	800d34c <OutputDbgTrace+0xa0>

    default:
      break;
 800d34a:	bf00      	nop
  }

  return;
 800d34c:	bf00      	nop
}
 800d34e:	3714      	adds	r7, #20
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d35e:	f3ef 8310 	mrs	r3, PRIMASK
 800d362:	607b      	str	r3, [r7, #4]
  return(result);
 800d364:	687b      	ldr	r3, [r7, #4]
    DbgTracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }

#else
  BACKUP_PRIMASK();
 800d366:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d368:	b672      	cpsid	i
}
 800d36a:	bf00      	nop

  DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  DbgTracePeripheralReady = SET;
 800d36c:	4b07      	ldr	r3, [pc, #28]	@ (800d38c <DbgTrace_TxCpltCallback+0x34>)
 800d36e:	2201      	movs	r2, #1
 800d370:	701a      	strb	r2, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	f383 8810 	msr	PRIMASK, r3
}
 800d37c:	bf00      	nop

  RESTORE_PRIMASK();
#endif
}
 800d37e:	bf00      	nop
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	20000011 	.word	0x20000011

0800d390 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	af00      	add	r7, sp, #0
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800d394:	f7f3 ffab 	bl	80012ee <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
#endif 
#endif
  return;
 800d398:	bf00      	nop
}
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	68b9      	ldr	r1, [r7, #8]
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f000 f805 	bl	800d3bc <DbgTraceWrite>
 800d3b2:	4603      	mov	r3, r0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b088      	sub	sp, #32
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d3d0:	617b      	str	r3, [r7, #20]
  return(result);
 800d3d2:	697b      	ldr	r3, [r7, #20]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800d3d4:	61bb      	str	r3, [r7, #24]

  /* Ignore flushes */
  if ( handle == -1 )
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3dc:	d102      	bne.n	800d3e4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	61fb      	str	r3, [r7, #28]
 800d3e2:	e026      	b.n	800d432 <DbgTraceWrite+0x76>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d006      	beq.n	800d3f8 <DbgTraceWrite+0x3c>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d003      	beq.n	800d3f8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800d3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3f4:	61fb      	str	r3, [r7, #28]
 800d3f6:	e01c      	b.n	800d432 <DbgTraceWrite+0x76>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d019      	beq.n	800d432 <DbgTraceWrite+0x76>
  {
    chars_written = bufSize;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d402:	b672      	cpsid	i
}
 800d404:	bf00      	nop
    {
      RESTORE_PRIMASK();
    }
#else
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    DbgTracePeripheralReady = RESET;
 800d406:	4b0d      	ldr	r3, [pc, #52]	@ (800d43c <DbgTraceWrite+0x80>)
 800d408:	2200      	movs	r2, #0
 800d40a:	701a      	strb	r2, [r3, #0]
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f383 8810 	msr	PRIMASK, r3
}
 800d416:	bf00      	nop
    RESTORE_PRIMASK();

    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	4a08      	ldr	r2, [pc, #32]	@ (800d440 <DbgTraceWrite+0x84>)
 800d41e:	4619      	mov	r1, r3
 800d420:	68b8      	ldr	r0, [r7, #8]
 800d422:	f7f3 ff6a 	bl	80012fa <DbgOutputTraces>
    while (!DbgTracePeripheralReady);
 800d426:	bf00      	nop
 800d428:	4b04      	ldr	r3, [pc, #16]	@ (800d43c <DbgTraceWrite+0x80>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d0fa      	beq.n	800d428 <DbgTraceWrite+0x6c>
#endif
    /* CS END */
  }
  return ( chars_written );
 800d432:	69fb      	ldr	r3, [r7, #28]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	20000011 	.word	0x20000011
 800d440:	0800d359 	.word	0x0800d359

0800d444 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	4603      	mov	r3, r0
 800d44c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800d44e:	4b0f      	ldr	r3, [pc, #60]	@ (800d48c <OTP_Read+0x48>)
 800d450:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d452:	e002      	b.n	800d45a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	3b08      	subs	r3, #8
 800d458:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	3307      	adds	r3, #7
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	79fa      	ldrb	r2, [r7, #7]
 800d462:	429a      	cmp	r2, r3
 800d464:	d003      	beq.n	800d46e <OTP_Read+0x2a>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	4a09      	ldr	r2, [pc, #36]	@ (800d490 <OTP_Read+0x4c>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d1f2      	bne.n	800d454 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	3307      	adds	r3, #7
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	79fa      	ldrb	r2, [r7, #7]
 800d476:	429a      	cmp	r2, r3
 800d478:	d001      	beq.n	800d47e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800d47a:	2300      	movs	r3, #0
 800d47c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800d47e:	68fb      	ldr	r3, [r7, #12]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3714      	adds	r7, #20
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	1fff73f8 	.word	0x1fff73f8
 800d490:	1fff7000 	.word	0x1fff7000

0800d494 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	605a      	str	r2, [r3, #4]
}
 800d4a8:	bf00      	nop
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4bc:	f3ef 8310 	mrs	r3, PRIMASK
 800d4c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d4c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d4c6:	b672      	cpsid	i
}
 800d4c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d102      	bne.n	800d4da <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	75fb      	strb	r3, [r7, #23]
 800d4d8:	e001      	b.n	800d4de <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	75fb      	strb	r3, [r7, #23]
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	f383 8810 	msr	PRIMASK, r3
}
 800d4e8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	371c      	adds	r7, #28
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b087      	sub	sp, #28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d502:	f3ef 8310 	mrs	r3, PRIMASK
 800d506:	60fb      	str	r3, [r7, #12]
  return(result);
 800d508:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d50a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d50c:	b672      	cpsid	i
}
 800d50e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	605a      	str	r2, [r3, #4]
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	f383 8810 	msr	PRIMASK, r3
}
 800d536:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d538:	bf00      	nop
 800d53a:	371c      	adds	r7, #28
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d544:	b480      	push	{r7}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d54e:	f3ef 8310 	mrs	r3, PRIMASK
 800d552:	60fb      	str	r3, [r7, #12]
  return(result);
 800d554:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d558:	b672      	cpsid	i
}
 800d55a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685a      	ldr	r2, [r3, #4]
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	683a      	ldr	r2, [r7, #0]
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	f383 8810 	msr	PRIMASK, r3
}
 800d582:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d584:	bf00      	nop
 800d586:	371c      	adds	r7, #28
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d590:	b480      	push	{r7}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d598:	f3ef 8310 	mrs	r3, PRIMASK
 800d59c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d59e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d5a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d5a2:	b672      	cpsid	i
}
 800d5a4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	6812      	ldr	r2, [r2, #0]
 800d5ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	6852      	ldr	r2, [r2, #4]
 800d5b8:	605a      	str	r2, [r3, #4]
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	f383 8810 	msr	PRIMASK, r3
}
 800d5c4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d5c6:	bf00      	nop
 800d5c8:	371c      	adds	r7, #28
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b086      	sub	sp, #24
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d5e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d5e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d5e6:	b672      	cpsid	i
}
 800d5e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7ff ffca 	bl	800d590 <LST_remove_node>
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	f383 8810 	msr	PRIMASK, r3
}
 800d606:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d608:	bf00      	nop
 800d60a:	3718      	adds	r7, #24
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800d610:	b480      	push	{r7}
 800d612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800d614:	4b03      	ldr	r3, [pc, #12]	@ (800d624 <LL_FLASH_GetUDN+0x14>)
 800d616:	681b      	ldr	r3, [r3, #0]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	1fff7580 	.word	0x1fff7580

0800d628 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800d628:	b480      	push	{r7}
 800d62a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800d62c:	4b03      	ldr	r3, [pc, #12]	@ (800d63c <LL_FLASH_GetDeviceID+0x14>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	b2db      	uxtb	r3, r3
}
 800d632:	4618      	mov	r0, r3
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	1fff7584 	.word	0x1fff7584

0800d640 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800d640:	b480      	push	{r7}
 800d642:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800d644:	4b03      	ldr	r3, [pc, #12]	@ (800d654 <LL_FLASH_GetSTCompanyID+0x14>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	0a1b      	lsrs	r3, r3, #8
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr
 800d654:	1fff7584 	.word	0x1fff7584

0800d658 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800d658:	b5b0      	push	{r4, r5, r7, lr}
 800d65a:	b090      	sub	sp, #64	@ 0x40
 800d65c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d65e:	2392      	movs	r3, #146	@ 0x92
 800d660:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800d664:	4b25      	ldr	r3, [pc, #148]	@ (800d6fc <APP_BLE_Init+0xa4>)
 800d666:	1d3c      	adds	r4, r7, #4
 800d668:	461d      	mov	r5, r3
 800d66a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d66c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d66e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d67a:	c403      	stmia	r4!, {r0, r1}
 800d67c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800d67e:	f000 f913 	bl	800d8a8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800d682:	2101      	movs	r1, #1
 800d684:	2002      	movs	r0, #2
 800d686:	f000 fe7f 	bl	800e388 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800d68a:	4a1d      	ldr	r2, [pc, #116]	@ (800d700 <APP_BLE_Init+0xa8>)
 800d68c:	2100      	movs	r1, #0
 800d68e:	2002      	movs	r0, #2
 800d690:	f000 ffa6 	bl	800e5e0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800d694:	1d3b      	adds	r3, r7, #4
 800d696:	4618      	mov	r0, r3
 800d698:	f7ff f850 	bl	800c73c <SHCI_C2_BLE_Init>
 800d69c:	4603      	mov	r3, r0
 800d69e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800d6a2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800d6aa:	f7f5 fb75 	bl	8002d98 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800d6ae:	f000 f911 	bl	800d8d4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800d6b2:	f7fe ff9d 	bl	800c5f0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d6b6:	4b13      	ldr	r3, [pc, #76]	@ (800d704 <APP_BLE_Init+0xac>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800d6be:	4b11      	ldr	r3, [pc, #68]	@ (800d704 <APP_BLE_Init+0xac>)
 800d6c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6c4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800d6c6:	4a10      	ldr	r2, [pc, #64]	@ (800d708 <APP_BLE_Init+0xb0>)
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	2001      	movs	r0, #1
 800d6cc:	f000 ff88 	bl	800e5e0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800d6d0:	2006      	movs	r0, #6
 800d6d2:	f7fe fe01 	bl	800c2d8 <aci_hal_set_radio_activity_mask>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800d6dc:	f000 fac5 	bl	800dc6a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800d6e0:	4b08      	ldr	r3, [pc, #32]	@ (800d704 <APP_BLE_Init+0xac>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800d6e6:	4b07      	ldr	r3, [pc, #28]	@ (800d704 <APP_BLE_Init+0xac>)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	f000 f9a5 	bl	800da3c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800d6f2:	bf00      	nop
}
 800d6f4:	3740      	adds	r7, #64	@ 0x40
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bdb0      	pop	{r4, r5, r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	08013308 	.word	0x08013308
 800d700:	0800c959 	.word	0x0800c959
 800d704:	200007ac 	.word	0x200007ac
 800d708:	0800db25 	.word	0x0800db25

0800d70c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08a      	sub	sp, #40	@ 0x28
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800d714:	2392      	movs	r3, #146	@ 0x92
 800d716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	3301      	adds	r3, #1
 800d71e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800d720:	6a3b      	ldr	r3, [r7, #32]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2bff      	cmp	r3, #255	@ 0xff
 800d726:	d053      	beq.n	800d7d0 <SVCCTL_App_Notification+0xc4>
 800d728:	2bff      	cmp	r3, #255	@ 0xff
 800d72a:	f300 80af 	bgt.w	800d88c <SVCCTL_App_Notification+0x180>
 800d72e:	2b05      	cmp	r3, #5
 800d730:	d002      	beq.n	800d738 <SVCCTL_App_Notification+0x2c>
 800d732:	2b3e      	cmp	r3, #62	@ 0x3e
 800d734:	d020      	beq.n	800d778 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800d736:	e0a9      	b.n	800d88c <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800d738:	6a3b      	ldr	r3, [r7, #32]
 800d73a:	3302      	adds	r3, #2
 800d73c:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d744:	b29a      	uxth	r2, r3
 800d746:	4b55      	ldr	r3, [pc, #340]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d748:	8adb      	ldrh	r3, [r3, #22]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d106      	bne.n	800d75c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800d74e:	4b53      	ldr	r3, [pc, #332]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d750:	2200      	movs	r2, #0
 800d752:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d754:	4b51      	ldr	r3, [pc, #324]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d756:	2200      	movs	r2, #0
 800d758:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800d75c:	2001      	movs	r0, #1
 800d75e:	f000 f96d 	bl	800da3c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800d762:	4b4f      	ldr	r3, [pc, #316]	@ (800d8a0 <SVCCTL_App_Notification+0x194>)
 800d764:	2201      	movs	r2, #1
 800d766:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d768:	4b4c      	ldr	r3, [pc, #304]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d76a:	8ada      	ldrh	r2, [r3, #22]
 800d76c:	4b4c      	ldr	r3, [pc, #304]	@ (800d8a0 <SVCCTL_App_Notification+0x194>)
 800d76e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800d770:	484b      	ldr	r0, [pc, #300]	@ (800d8a0 <SVCCTL_App_Notification+0x194>)
 800d772:	f000 fa66 	bl	800dc42 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800d776:	e08c      	b.n	800d892 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	3302      	adds	r3, #2
 800d77c:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d001      	beq.n	800d78a <SVCCTL_App_Notification+0x7e>
 800d786:	2b03      	cmp	r3, #3
          break;
 800d788:	e021      	b.n	800d7ce <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	3301      	adds	r3, #1
 800d78e:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800d790:	4b42      	ldr	r3, [pc, #264]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d792:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d796:	2b04      	cmp	r3, #4
 800d798:	d104      	bne.n	800d7a4 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800d79a:	4b40      	ldr	r3, [pc, #256]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d79c:	2206      	movs	r2, #6
 800d79e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800d7a2:	e003      	b.n	800d7ac <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800d7a4:	4b3d      	ldr	r3, [pc, #244]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d7a6:	2205      	movs	r2, #5
 800d7a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	4b39      	ldr	r3, [pc, #228]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d7b6:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800d7b8:	4b39      	ldr	r3, [pc, #228]	@ (800d8a0 <SVCCTL_App_Notification+0x194>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d7be:	4b37      	ldr	r3, [pc, #220]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d7c0:	8ada      	ldrh	r2, [r3, #22]
 800d7c2:	4b37      	ldr	r3, [pc, #220]	@ (800d8a0 <SVCCTL_App_Notification+0x194>)
 800d7c4:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800d7c6:	4836      	ldr	r0, [pc, #216]	@ (800d8a0 <SVCCTL_App_Notification+0x194>)
 800d7c8:	f000 fa3b 	bl	800dc42 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800d7cc:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800d7ce:	e060      	b.n	800d892 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	3302      	adds	r3, #2
 800d7d4:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d047      	beq.n	800d874 <SVCCTL_App_Notification+0x168>
 800d7e4:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	dc51      	bgt.n	800d890 <SVCCTL_App_Notification+0x184>
 800d7ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7f0:	d046      	beq.n	800d880 <SVCCTL_App_Notification+0x174>
 800d7f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7f6:	dc4b      	bgt.n	800d890 <SVCCTL_App_Notification+0x184>
 800d7f8:	2b04      	cmp	r3, #4
 800d7fa:	d043      	beq.n	800d884 <SVCCTL_App_Notification+0x178>
 800d7fc:	2b04      	cmp	r3, #4
 800d7fe:	db47      	blt.n	800d890 <SVCCTL_App_Notification+0x184>
 800d800:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d804:	4293      	cmp	r3, r2
 800d806:	dc43      	bgt.n	800d890 <SVCCTL_App_Notification+0x184>
 800d808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d80c:	dd40      	ble.n	800d890 <SVCCTL_App_Notification+0x184>
 800d80e:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800d812:	2b09      	cmp	r3, #9
 800d814:	d83c      	bhi.n	800d890 <SVCCTL_App_Notification+0x184>
 800d816:	a201      	add	r2, pc, #4	@ (adr r2, 800d81c <SVCCTL_App_Notification+0x110>)
 800d818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81c:	0800d86d 	.word	0x0800d86d
 800d820:	0800d845 	.word	0x0800d845
 800d824:	0800d891 	.word	0x0800d891
 800d828:	0800d891 	.word	0x0800d891
 800d82c:	0800d891 	.word	0x0800d891
 800d830:	0800d891 	.word	0x0800d891
 800d834:	0800d889 	.word	0x0800d889
 800d838:	0800d891 	.word	0x0800d891
 800d83c:	0800d859 	.word	0x0800d859
 800d840:	0800d889 	.word	0x0800d889
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800d844:	4b15      	ldr	r3, [pc, #84]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d846:	8adb      	ldrh	r3, [r3, #22]
 800d848:	4916      	ldr	r1, [pc, #88]	@ (800d8a4 <SVCCTL_App_Notification+0x198>)
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fd ff46 	bl	800b6dc <aci_gap_pass_key_resp>
 800d850:	4603      	mov	r3, r0
 800d852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800d856:	e018      	b.n	800d88a <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800d858:	4b10      	ldr	r3, [pc, #64]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d85a:	8adb      	ldrh	r3, [r3, #22]
 800d85c:	2101      	movs	r1, #1
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe f8e6 	bl	800ba30 <aci_gap_numeric_comparison_value_confirm_yesno>
 800d864:	4603      	mov	r3, r0
 800d866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800d86a:	e00e      	b.n	800d88a <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	3302      	adds	r3, #2
 800d870:	61bb      	str	r3, [r7, #24]
          break;
 800d872:	e00a      	b.n	800d88a <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800d874:	4b09      	ldr	r3, [pc, #36]	@ (800d89c <SVCCTL_App_Notification+0x190>)
 800d876:	8adb      	ldrh	r3, [r3, #22]
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fe fbec 	bl	800c056 <aci_gatt_confirm_indication>
        break;
 800d87e:	e004      	b.n	800d88a <SVCCTL_App_Notification+0x17e>
          break;
 800d880:	bf00      	nop
 800d882:	e005      	b.n	800d890 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800d884:	bf00      	nop
 800d886:	e003      	b.n	800d890 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800d888:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d88a:	e001      	b.n	800d890 <SVCCTL_App_Notification+0x184>
      break;
 800d88c:	bf00      	nop
 800d88e:	e000      	b.n	800d892 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d890:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800d892:	2301      	movs	r3, #1
}
 800d894:	4618      	mov	r0, r3
 800d896:	3728      	adds	r7, #40	@ 0x28
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	200007ac 	.word	0x200007ac
 800d8a0:	20000830 	.word	0x20000830
 800d8a4:	0001b207 	.word	0x0001b207

0800d8a8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800d8ae:	4b06      	ldr	r3, [pc, #24]	@ (800d8c8 <Ble_Tl_Init+0x20>)
 800d8b0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800d8b2:	4b06      	ldr	r3, [pc, #24]	@ (800d8cc <Ble_Tl_Init+0x24>)
 800d8b4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800d8b6:	463b      	mov	r3, r7
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	4805      	ldr	r0, [pc, #20]	@ (800d8d0 <Ble_Tl_Init+0x28>)
 800d8bc:	f7ff f830 	bl	800c920 <hci_init>

  return;
 800d8c0:	bf00      	nop
}
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	200300d8 	.word	0x200300d8
 800d8cc:	0800dbd5 	.word	0x0800dbd5
 800d8d0:	0800db9d 	.word	0x0800db9d

0800d8d4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800d8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8d6:	b08d      	sub	sp, #52	@ 0x34
 800d8d8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800d8da:	2300      	movs	r3, #0
 800d8dc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d8de:	2392      	movs	r3, #146	@ 0x92
 800d8e0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800d8e2:	f7fe fd4d 	bl	800c380 <hci_reset>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800d8ea:	f000 f8d7 	bl	800da9c <BleGetBdAddress>
 800d8ee:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800d8f0:	693a      	ldr	r2, [r7, #16]
 800d8f2:	2106      	movs	r1, #6
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	f7fe fc03 	bl	800c100 <aci_hal_write_config_data>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800d8fe:	4a4a      	ldr	r2, [pc, #296]	@ (800da28 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800d900:	2110      	movs	r1, #16
 800d902:	2018      	movs	r0, #24
 800d904:	f7fe fbfc 	bl	800c100 <aci_hal_write_config_data>
 800d908:	4603      	mov	r3, r0
 800d90a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800d90c:	4a47      	ldr	r2, [pc, #284]	@ (800da2c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800d90e:	2110      	movs	r1, #16
 800d910:	2008      	movs	r0, #8
 800d912:	f7fe fbf5 	bl	800c100 <aci_hal_write_config_data>
 800d916:	4603      	mov	r3, r0
 800d918:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800d91a:	2118      	movs	r1, #24
 800d91c:	2001      	movs	r0, #1
 800d91e:	f7fe fc74 	bl	800c20a <aci_hal_set_tx_power_level>
 800d922:	4603      	mov	r3, r0
 800d924:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800d926:	f7fe f8ea 	bl	800bafe <aci_gatt_init>
 800d92a:	4603      	mov	r3, r0
 800d92c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800d92e:	2300      	movs	r3, #0
 800d930:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	f043 0301 	orr.w	r3, r3, #1
 800d938:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800d93a:	7bfb      	ldrb	r3, [r7, #15]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d01f      	beq.n	800d980 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800d940:	4b3b      	ldr	r3, [pc, #236]	@ (800da30 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800d942:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800d944:	1dba      	adds	r2, r7, #6
 800d946:	7bf8      	ldrb	r0, [r7, #15]
 800d948:	1cbb      	adds	r3, r7, #2
 800d94a:	9301      	str	r3, [sp, #4]
 800d94c:	1d3b      	adds	r3, r7, #4
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	4613      	mov	r3, r2
 800d952:	2208      	movs	r2, #8
 800d954:	2100      	movs	r1, #0
 800d956:	f7fd ff28 	bl	800b7aa <aci_gap_init>
 800d95a:	4603      	mov	r3, r0
 800d95c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800d95e:	88fc      	ldrh	r4, [r7, #6]
 800d960:	88bd      	ldrh	r5, [r7, #4]
 800d962:	68b8      	ldr	r0, [r7, #8]
 800d964:	f7f2 fc5c 	bl	8000220 <strlen>
 800d968:	4603      	mov	r3, r0
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	4613      	mov	r3, r2
 800d972:	2200      	movs	r2, #0
 800d974:	4629      	mov	r1, r5
 800d976:	4620      	mov	r0, r4
 800d978:	f7fe fac4 	bl	800bf04 <aci_gatt_update_char_value>
 800d97c:	4603      	mov	r3, r0
 800d97e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800d980:	88f8      	ldrh	r0, [r7, #6]
 800d982:	8879      	ldrh	r1, [r7, #2]
 800d984:	463b      	mov	r3, r7
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	2302      	movs	r3, #2
 800d98a:	2200      	movs	r2, #0
 800d98c:	f7fe faba 	bl	800bf04 <aci_gatt_update_char_value>
 800d990:	4603      	mov	r3, r0
 800d992:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800d994:	2202      	movs	r2, #2
 800d996:	2102      	movs	r1, #2
 800d998:	2000      	movs	r0, #0
 800d99a:	f7fe fd15 	bl	800c3c8 <hci_le_set_default_phy>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800d9a2:	4b24      	ldr	r3, [pc, #144]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800d9a8:	4b22      	ldr	r3, [pc, #136]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fd fd7d 	bl	800b4ac <aci_gap_set_io_capability>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800d9b6:	4b1f      	ldr	r3, [pc, #124]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800d9bc:	4b1d      	ldr	r3, [pc, #116]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9be:	2208      	movs	r2, #8
 800d9c0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800d9c2:	4b1c      	ldr	r3, [pc, #112]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9c4:	2210      	movs	r2, #16
 800d9c6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800d9c8:	4b1a      	ldr	r3, [pc, #104]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800d9ce:	4b19      	ldr	r3, [pc, #100]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9d0:	4a19      	ldr	r2, [pc, #100]	@ (800da38 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800d9d2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800d9d4:	4b17      	ldr	r3, [pc, #92]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800d9da:	4b16      	ldr	r3, [pc, #88]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9dc:	789c      	ldrb	r4, [r3, #2]
 800d9de:	4b15      	ldr	r3, [pc, #84]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9e0:	785d      	ldrb	r5, [r3, #1]
 800d9e2:	4b14      	ldr	r3, [pc, #80]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9e4:	791b      	ldrb	r3, [r3, #4]
 800d9e6:	4a13      	ldr	r2, [pc, #76]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9e8:	7952      	ldrb	r2, [r2, #5]
 800d9ea:	4912      	ldr	r1, [pc, #72]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9ec:	78c9      	ldrb	r1, [r1, #3]
 800d9ee:	4811      	ldr	r0, [pc, #68]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800d9f0:	6880      	ldr	r0, [r0, #8]
 800d9f2:	2600      	movs	r6, #0
 800d9f4:	9604      	str	r6, [sp, #16]
 800d9f6:	9003      	str	r0, [sp, #12]
 800d9f8:	9102      	str	r1, [sp, #8]
 800d9fa:	9201      	str	r2, [sp, #4]
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	2300      	movs	r3, #0
 800da00:	2201      	movs	r2, #1
 800da02:	4629      	mov	r1, r5
 800da04:	4620      	mov	r0, r4
 800da06:	f7fd fda5 	bl	800b554 <aci_gap_set_authentication_requirement>
 800da0a:	4603      	mov	r3, r0
 800da0c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800da0e:	4b09      	ldr	r3, [pc, #36]	@ (800da34 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800da10:	789b      	ldrb	r3, [r3, #2]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d003      	beq.n	800da1e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800da16:	f7fd ffe7 	bl	800b9e8 <aci_gap_configure_filter_accept_list>
 800da1a:	4603      	mov	r3, r0
 800da1c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800da1e:	bf00      	nop
 800da20:	371c      	adds	r7, #28
 800da22:	46bd      	mov	sp, r7
 800da24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da26:	bf00      	nop
 800da28:	080135d0 	.word	0x080135d0
 800da2c:	080135e0 	.word	0x080135e0
 800da30:	08013344 	.word	0x08013344
 800da34:	200007ac 	.word	0x200007ac
 800da38:	0001b207 	.word	0x0001b207

0800da3c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b08c      	sub	sp, #48	@ 0x30
 800da40:	af08      	add	r7, sp, #32
 800da42:	4603      	mov	r3, r0
 800da44:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800da46:	2392      	movs	r3, #146	@ 0x92
 800da48:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800da4a:	4a12      	ldr	r2, [pc, #72]	@ (800da94 <Adv_Request+0x58>)
 800da4c:	79fb      	ldrb	r3, [r7, #7]
 800da4e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800da52:	2300      	movs	r3, #0
 800da54:	9306      	str	r3, [sp, #24]
 800da56:	2300      	movs	r3, #0
 800da58:	9305      	str	r3, [sp, #20]
 800da5a:	2300      	movs	r3, #0
 800da5c:	9304      	str	r3, [sp, #16]
 800da5e:	2300      	movs	r3, #0
 800da60:	9303      	str	r3, [sp, #12]
 800da62:	2300      	movs	r3, #0
 800da64:	9302      	str	r3, [sp, #8]
 800da66:	2300      	movs	r3, #0
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	2300      	movs	r3, #0
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	2300      	movs	r3, #0
 800da70:	22a0      	movs	r2, #160	@ 0xa0
 800da72:	2180      	movs	r1, #128	@ 0x80
 800da74:	2000      	movs	r0, #0
 800da76:	f7fd fc1f 	bl	800b2b8 <aci_gap_set_discoverable>
 800da7a:	4603      	mov	r3, r0
 800da7c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800da7e:	4906      	ldr	r1, [pc, #24]	@ (800da98 <Adv_Request+0x5c>)
 800da80:	200c      	movs	r0, #12
 800da82:	f7fd ff3f 	bl	800b904 <aci_gap_update_adv_data>
 800da86:	4603      	mov	r3, r0
 800da88:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800da8a:	bf00      	nop
}
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	200007ac 	.word	0x200007ac
 800da98:	20000014 	.word	0x20000014

0800da9c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800daa2:	f7ff fdb5 	bl	800d610 <LL_FLASH_GetUDN>
 800daa6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daae:	d023      	beq.n	800daf8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800dab0:	f7ff fdc6 	bl	800d640 <LL_FLASH_GetSTCompanyID>
 800dab4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800dab6:	f7ff fdb7 	bl	800d628 <LL_FLASH_GetDeviceID>
 800daba:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	4b16      	ldr	r3, [pc, #88]	@ (800db1c <BleGetBdAddress+0x80>)
 800dac2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	0a1b      	lsrs	r3, r3, #8
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	4b14      	ldr	r3, [pc, #80]	@ (800db1c <BleGetBdAddress+0x80>)
 800dacc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	4b12      	ldr	r3, [pc, #72]	@ (800db1c <BleGetBdAddress+0x80>)
 800dad4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	4b10      	ldr	r3, [pc, #64]	@ (800db1c <BleGetBdAddress+0x80>)
 800dadc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	0a1b      	lsrs	r3, r3, #8
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	4b0d      	ldr	r3, [pc, #52]	@ (800db1c <BleGetBdAddress+0x80>)
 800dae6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	0c1b      	lsrs	r3, r3, #16
 800daec:	b2da      	uxtb	r2, r3
 800daee:	4b0b      	ldr	r3, [pc, #44]	@ (800db1c <BleGetBdAddress+0x80>)
 800daf0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800daf2:	4b0a      	ldr	r3, [pc, #40]	@ (800db1c <BleGetBdAddress+0x80>)
 800daf4:	617b      	str	r3, [r7, #20]
 800daf6:	e00b      	b.n	800db10 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800daf8:	2000      	movs	r0, #0
 800dafa:	f7ff fca3 	bl	800d444 <OTP_Read>
 800dafe:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	617b      	str	r3, [r7, #20]
 800db0a:	e001      	b.n	800db10 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800db0c:	4b04      	ldr	r3, [pc, #16]	@ (800db20 <BleGetBdAddress+0x84>)
 800db0e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800db10:	697b      	ldr	r3, [r7, #20]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3718      	adds	r7, #24
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	200007a4 	.word	0x200007a4
 800db20:	080135c8 	.word	0x080135c8

0800db24 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800db2a:	4b0a      	ldr	r3, [pc, #40]	@ (800db54 <Adv_Cancel+0x30>)
 800db2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800db30:	2b05      	cmp	r3, #5
 800db32:	d00a      	beq.n	800db4a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800db34:	2392      	movs	r3, #146	@ 0x92
 800db36:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800db38:	f7fd fb9a 	bl	800b270 <aci_gap_set_non_discoverable>
 800db3c:	4603      	mov	r3, r0
 800db3e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800db40:	4b04      	ldr	r3, [pc, #16]	@ (800db54 <Adv_Cancel+0x30>)
 800db42:	2200      	movs	r2, #0
 800db44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800db48:	bf00      	nop
 800db4a:	bf00      	nop
}
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	200007ac 	.word	0x200007ac

0800db58 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800db60:	2100      	movs	r1, #0
 800db62:	2002      	movs	r0, #2
 800db64:	f000 fd5e 	bl	800e624 <UTIL_SEQ_SetTask>

  return;
 800db68:	bf00      	nop
}
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800db78:	2001      	movs	r0, #1
 800db7a:	f000 fdbf 	bl	800e6fc <UTIL_SEQ_SetEvt>

  return;
 800db7e:	bf00      	nop
}
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800db8e:	2001      	movs	r0, #1
 800db90:	f000 fdd4 	bl	800e73c <UTIL_SEQ_WaitEvt>

  return;
 800db94:	bf00      	nop
}
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	3308      	adds	r3, #8
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fe fd70 	bl	800c694 <SVCCTL_UserEvtRx>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800dbb8:	7afb      	ldrb	r3, [r7, #11]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d003      	beq.n	800dbc6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800dbc4:	e003      	b.n	800dbce <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	701a      	strb	r2, [r3, #0]
  return;
 800dbcc:	bf00      	nop
}
 800dbce:	3710      	adds	r7, #16
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	4603      	mov	r3, r0
 800dbdc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800dbde:	79fb      	ldrb	r3, [r7, #7]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <BLE_StatusNot+0x16>
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d006      	beq.n	800dbf6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800dbe8:	e00b      	b.n	800dc02 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800dbea:	2303      	movs	r3, #3
 800dbec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f000 fd44 	bl	800e67c <UTIL_SEQ_PauseTask>
      break;
 800dbf4:	e005      	b.n	800dc02 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f000 fd5e 	bl	800e6bc <UTIL_SEQ_ResumeTask>
      break;
 800dc00:	bf00      	nop
  }

  return;
 800dc02:	bf00      	nop
}
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d006      	beq.n	800dc28 <Custom_STM_App_Notification+0x1e>
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	dc06      	bgt.n	800dc2c <Custom_STM_App_Notification+0x22>
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d006      	beq.n	800dc30 <Custom_STM_App_Notification+0x26>
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d006      	beq.n	800dc34 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800dc26:	e001      	b.n	800dc2c <Custom_STM_App_Notification+0x22>
      break;
 800dc28:	bf00      	nop
 800dc2a:	e004      	b.n	800dc36 <Custom_STM_App_Notification+0x2c>
      break;
 800dc2c:	bf00      	nop
 800dc2e:	e002      	b.n	800dc36 <Custom_STM_App_Notification+0x2c>
      break;
 800dc30:	bf00      	nop
 800dc32:	e000      	b.n	800dc36 <Custom_STM_App_Notification+0x2c>
      break;
 800dc34:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800dc36:	bf00      	nop
}
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b083      	sub	sp, #12
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d002      	beq.n	800dc58 <Custom_APP_Notification+0x16>
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d002      	beq.n	800dc5c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800dc56:	e002      	b.n	800dc5e <Custom_APP_Notification+0x1c>
      break;
 800dc58:	bf00      	nop
 800dc5a:	e000      	b.n	800dc5e <Custom_APP_Notification+0x1c>
      break;
 800dc5c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800dc5e:	bf00      	nop
}
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800dc6e:	bf00      	nop
}
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b08e      	sub	sp, #56	@ 0x38
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800dc80:	2300      	movs	r3, #0
 800dc82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  switch (event_pckt->evt)
 800dc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	2bff      	cmp	r3, #255	@ 0xff
 800dc92:	f040 8097 	bne.w	800ddc4 <Custom_STM_Event_Handler+0x14c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800dc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc98:	3302      	adds	r3, #2
 800dc9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      switch (blecore_evt->ecode)
 800dc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc9e:	881b      	ldrh	r3, [r3, #0]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800dca6:	2b1a      	cmp	r3, #26
 800dca8:	f200 808a 	bhi.w	800ddc0 <Custom_STM_Event_Handler+0x148>
 800dcac:	a201      	add	r2, pc, #4	@ (adr r2, 800dcb4 <Custom_STM_Event_Handler+0x3c>)
 800dcae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb2:	bf00      	nop
 800dcb4:	0800dd21 	.word	0x0800dd21
 800dcb8:	0800ddc1 	.word	0x0800ddc1
 800dcbc:	0800ddc1 	.word	0x0800ddc1
 800dcc0:	0800ddc1 	.word	0x0800ddc1
 800dcc4:	0800ddc1 	.word	0x0800ddc1
 800dcc8:	0800ddc1 	.word	0x0800ddc1
 800dccc:	0800ddc1 	.word	0x0800ddc1
 800dcd0:	0800ddc1 	.word	0x0800ddc1
 800dcd4:	0800ddc1 	.word	0x0800ddc1
 800dcd8:	0800ddc1 	.word	0x0800ddc1
 800dcdc:	0800ddc1 	.word	0x0800ddc1
 800dce0:	0800ddc1 	.word	0x0800ddc1
 800dce4:	0800ddc1 	.word	0x0800ddc1
 800dce8:	0800ddc1 	.word	0x0800ddc1
 800dcec:	0800ddc1 	.word	0x0800ddc1
 800dcf0:	0800ddc1 	.word	0x0800ddc1
 800dcf4:	0800ddc1 	.word	0x0800ddc1
 800dcf8:	0800ddc1 	.word	0x0800ddc1
 800dcfc:	0800ddc1 	.word	0x0800ddc1
 800dd00:	0800ddc1 	.word	0x0800ddc1
 800dd04:	0800ddc1 	.word	0x0800ddc1
 800dd08:	0800ddc1 	.word	0x0800ddc1
 800dd0c:	0800ddc1 	.word	0x0800ddc1
 800dd10:	0800ddc1 	.word	0x0800ddc1
 800dd14:	0800ddc1 	.word	0x0800ddc1
 800dd18:	0800ddc1 	.word	0x0800ddc1
 800dd1c:	0800dda3 	.word	0x0800dda3
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800dd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd22:	3302      	adds	r3, #2
 800dd24:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800dd26:	6a3b      	ldr	r3, [r7, #32]
 800dd28:	885b      	ldrh	r3, [r3, #2]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	4b29      	ldr	r3, [pc, #164]	@ (800ddd4 <Custom_STM_Event_Handler+0x15c>)
 800dd30:	885b      	ldrh	r3, [r3, #2]
 800dd32:	3301      	adds	r3, #1
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d102      	bne.n	800dd3e <Custom_STM_Event_Handler+0xc6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          APP_DBG_MSG(">> BLE Write Detected!\n");
		  APP_DBG_MSG(">> Received Data (%d bytes): ", attribute_modified->Attr_Data_Length);

		  for (int i = 0; i < attribute_modified->Attr_Data_Length; i++) {
 800dd3e:	2300      	movs	r3, #0
 800dd40:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd42:	e002      	b.n	800dd4a <Custom_STM_Event_Handler+0xd2>
 800dd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd46:	3301      	adds	r3, #1
 800dd48:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd4a:	6a3b      	ldr	r3, [r7, #32]
 800dd4c:	88db      	ldrh	r3, [r3, #6]
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	461a      	mov	r2, r3
 800dd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd54:	4293      	cmp	r3, r2
 800dd56:	dbf5      	blt.n	800dd44 <Custom_STM_Event_Handler+0xcc>
			  APP_DBG_MSG("%02X ", attribute_modified->Attr_Data[i]);
		  }
		  APP_DBG_MSG("\n");

		  if (check_command(attribute_modified->Attr_Data)) {
 800dd58:	6a3b      	ldr	r3, [r7, #32]
 800dd5a:	3308      	adds	r3, #8
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7f3 f919 	bl	8000f94 <check_command>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d003      	beq.n	800dd70 <Custom_STM_Event_Handler+0xf8>
				printf(">> Command detected!\n");
 800dd68:	481b      	ldr	r0, [pc, #108]	@ (800ddd8 <Custom_STM_Event_Handler+0x160>)
 800dd6a:	f001 fddf 	bl	800f92c <puts>
 800dd6e:	e002      	b.n	800dd76 <Custom_STM_Event_Handler+0xfe>
			} else {
				printf(">> Command not detected!\n");
 800dd70:	481a      	ldr	r0, [pc, #104]	@ (800dddc <Custom_STM_Event_Handler+0x164>)
 800dd72:	f001 fddb 	bl	800f92c <puts>
			}

		  if (BLE_ProcessCommand(attribute_modified->Attr_Data, attribute_modified->Attr_Data_Length))
 800dd76:	6a3b      	ldr	r3, [r7, #32]
 800dd78:	f103 0208 	add.w	r2, r3, #8
 800dd7c:	6a3b      	ldr	r3, [r7, #32]
 800dd7e:	88db      	ldrh	r3, [r3, #6]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	4619      	mov	r1, r3
 800dd86:	4610      	mov	r0, r2
 800dd88:	f7f3 f916 	bl	8000fb8 <BLE_ProcessCommand>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d003      	beq.n	800dd9a <Custom_STM_Event_Handler+0x122>
		          {
		              printf(">> Action déclenchée suite à la commande\n");
 800dd92:	4813      	ldr	r0, [pc, #76]	@ (800dde0 <Custom_STM_Event_Handler+0x168>)
 800dd94:	f001 fdca 	bl	800f92c <puts>
				printf(">> Aucune action déclenchée\n");
			}


          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800dd98:	e013      	b.n	800ddc2 <Custom_STM_Event_Handler+0x14a>
				printf(">> Aucune action déclenchée\n");
 800dd9a:	4812      	ldr	r0, [pc, #72]	@ (800dde4 <Custom_STM_Event_Handler+0x16c>)
 800dd9c:	f001 fdc6 	bl	800f92c <puts>
          break;
 800dda0:	e00f      	b.n	800ddc2 <Custom_STM_Event_Handler+0x14a>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800dda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda4:	3302      	adds	r3, #2
 800dda6:	627b      	str	r3, [r7, #36]	@ 0x24
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800dda8:	2302      	movs	r3, #2
 800ddaa:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800ddac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 800ddb4:	f107 030c 	add.w	r3, r7, #12
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7ff ff26 	bl	800dc0a <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800ddbe:	e000      	b.n	800ddc2 <Custom_STM_Event_Handler+0x14a>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800ddc0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ddc2:	e000      	b.n	800ddc6 <Custom_STM_Event_Handler+0x14e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800ddc4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800ddc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3738      	adds	r7, #56	@ 0x38
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	20000834 	.word	0x20000834
 800ddd8:	08013350 	.word	0x08013350
 800dddc:	08013368 	.word	0x08013368
 800dde0:	08013384 	.word	0x08013384
 800dde4:	080133b0 	.word	0x080133b0

0800dde8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b08c      	sub	sp, #48	@ 0x30
 800ddec:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ddee:	2392      	movs	r3, #146	@ 0x92
 800ddf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800ddf2:	4834      	ldr	r0, [pc, #208]	@ (800dec4 <SVCCTL_InitCustomSvc+0xdc>)
 800ddf4:	f7fe fc34 	bl	800c660 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800ddf8:	2303      	movs	r3, #3
 800ddfa:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MY_CUSTOM_SVC_UUID(uuid.Char_UUID_128);
 800ddfc:	238f      	movs	r3, #143	@ 0x8f
 800ddfe:	713b      	strb	r3, [r7, #4]
 800de00:	23e5      	movs	r3, #229	@ 0xe5
 800de02:	717b      	strb	r3, [r7, #5]
 800de04:	23b3      	movs	r3, #179	@ 0xb3
 800de06:	71bb      	strb	r3, [r7, #6]
 800de08:	23d5      	movs	r3, #213	@ 0xd5
 800de0a:	71fb      	strb	r3, [r7, #7]
 800de0c:	232e      	movs	r3, #46	@ 0x2e
 800de0e:	723b      	strb	r3, [r7, #8]
 800de10:	237f      	movs	r3, #127	@ 0x7f
 800de12:	727b      	strb	r3, [r7, #9]
 800de14:	234a      	movs	r3, #74	@ 0x4a
 800de16:	72bb      	strb	r3, [r7, #10]
 800de18:	2398      	movs	r3, #152	@ 0x98
 800de1a:	72fb      	strb	r3, [r7, #11]
 800de1c:	232a      	movs	r3, #42	@ 0x2a
 800de1e:	733b      	strb	r3, [r7, #12]
 800de20:	2348      	movs	r3, #72	@ 0x48
 800de22:	737b      	strb	r3, [r7, #13]
 800de24:	237a      	movs	r3, #122	@ 0x7a
 800de26:	73bb      	strb	r3, [r7, #14]
 800de28:	23cc      	movs	r3, #204	@ 0xcc
 800de2a:	73fb      	strb	r3, [r7, #15]
 800de2c:	2300      	movs	r3, #0
 800de2e:	743b      	strb	r3, [r7, #16]
 800de30:	2300      	movs	r3, #0
 800de32:	747b      	strb	r3, [r7, #17]
 800de34:	2300      	movs	r3, #0
 800de36:	74bb      	strb	r3, [r7, #18]
 800de38:	2300      	movs	r3, #0
 800de3a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800de3c:	7dbb      	ldrb	r3, [r7, #22]
 800de3e:	1d39      	adds	r1, r7, #4
 800de40:	4a21      	ldr	r2, [pc, #132]	@ (800dec8 <SVCCTL_InitCustomSvc+0xe0>)
 800de42:	9200      	str	r2, [sp, #0]
 800de44:	2201      	movs	r2, #1
 800de46:	2002      	movs	r0, #2
 800de48:	f7fd fe7e 	bl	800bb48 <aci_gatt_add_service>
 800de4c:	4603      	mov	r3, r0
 800de4e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  MY_CHAR
   */
  COPY_MY_CHAR_UUID(uuid.Char_UUID_128);
 800de50:	2319      	movs	r3, #25
 800de52:	713b      	strb	r3, [r7, #4]
 800de54:	23ed      	movs	r3, #237	@ 0xed
 800de56:	717b      	strb	r3, [r7, #5]
 800de58:	2382      	movs	r3, #130	@ 0x82
 800de5a:	71bb      	strb	r3, [r7, #6]
 800de5c:	23ae      	movs	r3, #174	@ 0xae
 800de5e:	71fb      	strb	r3, [r7, #7]
 800de60:	23ed      	movs	r3, #237	@ 0xed
 800de62:	723b      	strb	r3, [r7, #8]
 800de64:	2321      	movs	r3, #33	@ 0x21
 800de66:	727b      	strb	r3, [r7, #9]
 800de68:	234c      	movs	r3, #76	@ 0x4c
 800de6a:	72bb      	strb	r3, [r7, #10]
 800de6c:	239d      	movs	r3, #157	@ 0x9d
 800de6e:	72fb      	strb	r3, [r7, #11]
 800de70:	2341      	movs	r3, #65	@ 0x41
 800de72:	733b      	strb	r3, [r7, #12]
 800de74:	2345      	movs	r3, #69	@ 0x45
 800de76:	737b      	strb	r3, [r7, #13]
 800de78:	2322      	movs	r3, #34	@ 0x22
 800de7a:	73bb      	strb	r3, [r7, #14]
 800de7c:	238e      	movs	r3, #142	@ 0x8e
 800de7e:	73fb      	strb	r3, [r7, #15]
 800de80:	2300      	movs	r3, #0
 800de82:	743b      	strb	r3, [r7, #16]
 800de84:	2300      	movs	r3, #0
 800de86:	747b      	strb	r3, [r7, #17]
 800de88:	2300      	movs	r3, #0
 800de8a:	74bb      	strb	r3, [r7, #18]
 800de8c:	2300      	movs	r3, #0
 800de8e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_Custom_SvcHdle,
 800de90:	4b0d      	ldr	r3, [pc, #52]	@ (800dec8 <SVCCTL_InitCustomSvc+0xe0>)
 800de92:	8818      	ldrh	r0, [r3, #0]
 800de94:	4b0d      	ldr	r3, [pc, #52]	@ (800decc <SVCCTL_InitCustomSvc+0xe4>)
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	1d3a      	adds	r2, r7, #4
 800de9a:	490d      	ldr	r1, [pc, #52]	@ (800ded0 <SVCCTL_InitCustomSvc+0xe8>)
 800de9c:	9105      	str	r1, [sp, #20]
 800de9e:	2100      	movs	r1, #0
 800dea0:	9104      	str	r1, [sp, #16]
 800dea2:	2110      	movs	r1, #16
 800dea4:	9103      	str	r1, [sp, #12]
 800dea6:	2101      	movs	r1, #1
 800dea8:	9102      	str	r1, [sp, #8]
 800deaa:	2100      	movs	r1, #0
 800deac:	9101      	str	r1, [sp, #4]
 800deae:	210a      	movs	r1, #10
 800deb0:	9100      	str	r1, [sp, #0]
 800deb2:	2102      	movs	r1, #2
 800deb4:	f7fd ff1e 	bl	800bcf4 <aci_gatt_add_char>
 800deb8:	4603      	mov	r3, r0
 800deba:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800debc:	bf00      	nop
}
 800debe:	3718      	adds	r7, #24
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	0800dc79 	.word	0x0800dc79
 800dec8:	20000834 	.word	0x20000834
 800decc:	20000020 	.word	0x20000020
 800ded0:	20000836 	.word	0x20000836

0800ded4 <LL_PWR_EnableBootC2>:
{
 800ded4:	b480      	push	{r7}
 800ded6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800ded8:	4b05      	ldr	r3, [pc, #20]	@ (800def0 <LL_PWR_EnableBootC2+0x1c>)
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	4a04      	ldr	r2, [pc, #16]	@ (800def0 <LL_PWR_EnableBootC2+0x1c>)
 800dede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dee2:	60d3      	str	r3, [r2, #12]
}
 800dee4:	bf00      	nop
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop
 800def0:	58000400 	.word	0x58000400

0800def4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800defc:	4b06      	ldr	r3, [pc, #24]	@ (800df18 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800defe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800df02:	4905      	ldr	r1, [pc, #20]	@ (800df18 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4313      	orrs	r3, r2
 800df08:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800df0c:	bf00      	nop
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr
 800df18:	58000800 	.word	0x58000800

0800df1c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800df24:	4b05      	ldr	r3, [pc, #20]	@ (800df3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800df26:	6a1a      	ldr	r2, [r3, #32]
 800df28:	4904      	ldr	r1, [pc, #16]	@ (800df3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4313      	orrs	r3, r2
 800df2e:	620b      	str	r3, [r1, #32]
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	58000800 	.word	0x58000800

0800df40 <LL_AHB3_GRP1_EnableClock>:
{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800df48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	4313      	orrs	r3, r2
 800df56:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800df58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	4013      	ands	r3, r2
 800df62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800df64:	68fb      	ldr	r3, [r7, #12]
}
 800df66:	bf00      	nop
 800df68:	3714      	adds	r7, #20
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr

0800df72 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800df72:	b480      	push	{r7}
 800df74:	b085      	sub	sp, #20
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800df7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df7e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800df82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4313      	orrs	r3, r2
 800df8a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800df8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df92:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4013      	ands	r3, r2
 800df9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800df9c:	68fb      	ldr	r3, [r7, #12]
}
 800df9e:	bf00      	nop
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800dfaa:	b480      	push	{r7}
 800dfac:	b083      	sub	sp, #12
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	601a      	str	r2, [r3, #0]
}
 800dfbe:	bf00      	nop
 800dfc0:	370c      	adds	r7, #12
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800dfca:	b480      	push	{r7}
 800dfcc:	b083      	sub	sp, #12
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f043 0201 	orr.w	r2, r3, #1
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	601a      	str	r2, [r3, #0]
}
 800dfde:	bf00      	nop
 800dfe0:	370c      	adds	r7, #12
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr

0800dfea <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800dfea:	b480      	push	{r7}
 800dfec:	b083      	sub	sp, #12
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
 800dff2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	041b      	lsls	r3, r3, #16
 800dffc:	43db      	mvns	r3, r3
 800dffe:	401a      	ands	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	605a      	str	r2, [r3, #4]
}
 800e004:	bf00      	nop
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	685a      	ldr	r2, [r3, #4]
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	041b      	lsls	r3, r3, #16
 800e022:	431a      	orrs	r2, r3
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	605a      	str	r2, [r3, #4]
}
 800e028:	bf00      	nop
 800e02a:	370c      	adds	r7, #12
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	685a      	ldr	r2, [r3, #4]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	43db      	mvns	r3, r3
 800e046:	401a      	ands	r2, r3
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	605a      	str	r2, [r3, #4]
}
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	609a      	str	r2, [r3, #8]
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	041a      	lsls	r2, r3, #16
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	609a      	str	r2, [r3, #8]
}
 800e086:	bf00      	nop
 800e088:	370c      	adds	r7, #12
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e092:	b480      	push	{r7}
 800e094:	b083      	sub	sp, #12
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68da      	ldr	r2, [r3, #12]
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	4013      	ands	r3, r2
 800e0a4:	683a      	ldr	r2, [r7, #0]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d101      	bne.n	800e0ae <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e000      	b.n	800e0b0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	69da      	ldr	r2, [r3, #28]
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	683a      	ldr	r2, [r7, #0]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d101      	bne.n	800e0d8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e000      	b.n	800e0da <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr
	...

0800e0e8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e0ec:	2102      	movs	r1, #2
 800e0ee:	4818      	ldr	r0, [pc, #96]	@ (800e150 <HW_IPCC_Rx_Handler+0x68>)
 800e0f0:	f7ff ffe4 	bl	800e0bc <LL_C2_IPCC_IsActiveFlag_CHx>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d008      	beq.n	800e10c <HW_IPCC_Rx_Handler+0x24>
 800e0fa:	4b15      	ldr	r3, [pc, #84]	@ (800e150 <HW_IPCC_Rx_Handler+0x68>)
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	f003 0302 	and.w	r3, r3, #2
 800e102:	2b00      	cmp	r3, #0
 800e104:	d102      	bne.n	800e10c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800e106:	f000 f8d5 	bl	800e2b4 <HW_IPCC_SYS_EvtHandler>
 800e10a:	e01e      	b.n	800e14a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e10c:	2101      	movs	r1, #1
 800e10e:	4810      	ldr	r0, [pc, #64]	@ (800e150 <HW_IPCC_Rx_Handler+0x68>)
 800e110:	f7ff ffd4 	bl	800e0bc <LL_C2_IPCC_IsActiveFlag_CHx>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d008      	beq.n	800e12c <HW_IPCC_Rx_Handler+0x44>
 800e11a:	4b0d      	ldr	r3, [pc, #52]	@ (800e150 <HW_IPCC_Rx_Handler+0x68>)
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	f003 0301 	and.w	r3, r3, #1
 800e122:	2b00      	cmp	r3, #0
 800e124:	d102      	bne.n	800e12c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800e126:	f000 f889 	bl	800e23c <HW_IPCC_BLE_EvtHandler>
 800e12a:	e00e      	b.n	800e14a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e12c:	2108      	movs	r1, #8
 800e12e:	4808      	ldr	r0, [pc, #32]	@ (800e150 <HW_IPCC_Rx_Handler+0x68>)
 800e130:	f7ff ffc4 	bl	800e0bc <LL_C2_IPCC_IsActiveFlag_CHx>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d008      	beq.n	800e14c <HW_IPCC_Rx_Handler+0x64>
 800e13a:	4b05      	ldr	r3, [pc, #20]	@ (800e150 <HW_IPCC_Rx_Handler+0x68>)
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	f003 0308 	and.w	r3, r3, #8
 800e142:	2b00      	cmp	r3, #0
 800e144:	d102      	bne.n	800e14c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e146:	f000 f901 	bl	800e34c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e14a:	bf00      	nop
 800e14c:	bf00      	nop
}
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	58000c00 	.word	0x58000c00

0800e154 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e158:	2102      	movs	r1, #2
 800e15a:	4818      	ldr	r0, [pc, #96]	@ (800e1bc <HW_IPCC_Tx_Handler+0x68>)
 800e15c:	f7ff ff99 	bl	800e092 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d108      	bne.n	800e178 <HW_IPCC_Tx_Handler+0x24>
 800e166:	4b15      	ldr	r3, [pc, #84]	@ (800e1bc <HW_IPCC_Tx_Handler+0x68>)
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d102      	bne.n	800e178 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e172:	f000 f893 	bl	800e29c <HW_IPCC_SYS_CmdEvtHandler>
 800e176:	e01e      	b.n	800e1b6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800e178:	2108      	movs	r1, #8
 800e17a:	4810      	ldr	r0, [pc, #64]	@ (800e1bc <HW_IPCC_Tx_Handler+0x68>)
 800e17c:	f7ff ff89 	bl	800e092 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d108      	bne.n	800e198 <HW_IPCC_Tx_Handler+0x44>
 800e186:	4b0d      	ldr	r3, [pc, #52]	@ (800e1bc <HW_IPCC_Tx_Handler+0x68>)
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d102      	bne.n	800e198 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800e192:	f000 f8bd 	bl	800e310 <HW_IPCC_MM_FreeBufHandler>
 800e196:	e00e      	b.n	800e1b6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800e198:	2120      	movs	r1, #32
 800e19a:	4808      	ldr	r0, [pc, #32]	@ (800e1bc <HW_IPCC_Tx_Handler+0x68>)
 800e19c:	f7ff ff79 	bl	800e092 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d108      	bne.n	800e1b8 <HW_IPCC_Tx_Handler+0x64>
 800e1a6:	4b05      	ldr	r3, [pc, #20]	@ (800e1bc <HW_IPCC_Tx_Handler+0x68>)
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d102      	bne.n	800e1b8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800e1b2:	f000 f84f 	bl	800e254 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800e1b6:	bf00      	nop
 800e1b8:	bf00      	nop
}
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	58000c00 	.word	0x58000c00

0800e1c0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800e1c4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e1c8:	f7ff fed3 	bl	800df72 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e1cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e1d0:	f7ff fea4 	bl	800df1c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e1d4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e1d8:	f7ff fe8c 	bl	800def4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e1dc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e1de:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e1e0:	f7ff fe78 	bl	800ded4 <LL_PWR_EnableBootC2>

  return;
 800e1e4:	bf00      	nop
}
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e1ec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e1f0:	f7ff fea6 	bl	800df40 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e1f4:	4806      	ldr	r0, [pc, #24]	@ (800e210 <HW_IPCC_Init+0x28>)
 800e1f6:	f7ff fee8 	bl	800dfca <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e1fa:	4805      	ldr	r0, [pc, #20]	@ (800e210 <HW_IPCC_Init+0x28>)
 800e1fc:	f7ff fed5 	bl	800dfaa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e200:	202c      	movs	r0, #44	@ 0x2c
 800e202:	f7f5 fc60 	bl	8003ac6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e206:	202d      	movs	r0, #45	@ 0x2d
 800e208:	f7f5 fc5d 	bl	8003ac6 <HAL_NVIC_EnableIRQ>

  return;
 800e20c:	bf00      	nop
}
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	58000c00 	.word	0x58000c00

0800e214 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e218:	2101      	movs	r1, #1
 800e21a:	4802      	ldr	r0, [pc, #8]	@ (800e224 <HW_IPCC_BLE_Init+0x10>)
 800e21c:	f7ff ff0a 	bl	800e034 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e220:	bf00      	nop
}
 800e222:	bd80      	pop	{r7, pc}
 800e224:	58000c00 	.word	0x58000c00

0800e228 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e22c:	2101      	movs	r1, #1
 800e22e:	4802      	ldr	r0, [pc, #8]	@ (800e238 <HW_IPCC_BLE_SendCmd+0x10>)
 800e230:	f7ff ff20 	bl	800e074 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e234:	bf00      	nop
}
 800e236:	bd80      	pop	{r7, pc}
 800e238:	58000c00 	.word	0x58000c00

0800e23c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800e240:	f7fe fed2 	bl	800cfe8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e244:	2101      	movs	r1, #1
 800e246:	4802      	ldr	r0, [pc, #8]	@ (800e250 <HW_IPCC_BLE_EvtHandler+0x14>)
 800e248:	f7ff ff06 	bl	800e058 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e24c:	bf00      	nop
}
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	58000c00 	.word	0x58000c00

0800e254 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800e258:	2120      	movs	r1, #32
 800e25a:	4803      	ldr	r0, [pc, #12]	@ (800e268 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800e25c:	f7ff fed8 	bl	800e010 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800e260:	f7fe fef2 	bl	800d048 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800e264:	bf00      	nop
}
 800e266:	bd80      	pop	{r7, pc}
 800e268:	58000c00 	.word	0x58000c00

0800e26c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e270:	2102      	movs	r1, #2
 800e272:	4802      	ldr	r0, [pc, #8]	@ (800e27c <HW_IPCC_SYS_Init+0x10>)
 800e274:	f7ff fede 	bl	800e034 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e278:	bf00      	nop
}
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	58000c00 	.word	0x58000c00

0800e280 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e284:	2102      	movs	r1, #2
 800e286:	4804      	ldr	r0, [pc, #16]	@ (800e298 <HW_IPCC_SYS_SendCmd+0x18>)
 800e288:	f7ff fef4 	bl	800e074 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e28c:	2102      	movs	r1, #2
 800e28e:	4802      	ldr	r0, [pc, #8]	@ (800e298 <HW_IPCC_SYS_SendCmd+0x18>)
 800e290:	f7ff feab 	bl	800dfea <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e294:	bf00      	nop
}
 800e296:	bd80      	pop	{r7, pc}
 800e298:	58000c00 	.word	0x58000c00

0800e29c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e2a0:	2102      	movs	r1, #2
 800e2a2:	4803      	ldr	r0, [pc, #12]	@ (800e2b0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800e2a4:	f7ff feb4 	bl	800e010 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800e2a8:	f7fe ff1e 	bl	800d0e8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800e2ac:	bf00      	nop
}
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	58000c00 	.word	0x58000c00

0800e2b4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800e2b8:	f7fe ff2c 	bl	800d114 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e2bc:	2102      	movs	r1, #2
 800e2be:	4802      	ldr	r0, [pc, #8]	@ (800e2c8 <HW_IPCC_SYS_EvtHandler+0x14>)
 800e2c0:	f7ff feca 	bl	800e058 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e2c4:	bf00      	nop
}
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	58000c00 	.word	0x58000c00

0800e2cc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e2d4:	2108      	movs	r1, #8
 800e2d6:	480c      	ldr	r0, [pc, #48]	@ (800e308 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e2d8:	f7ff fedb 	bl	800e092 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d007      	beq.n	800e2f2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e2e2:	4a0a      	ldr	r2, [pc, #40]	@ (800e30c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e2e8:	2108      	movs	r1, #8
 800e2ea:	4807      	ldr	r0, [pc, #28]	@ (800e308 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e2ec:	f7ff fe7d 	bl	800dfea <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e2f0:	e006      	b.n	800e300 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e2f6:	2108      	movs	r1, #8
 800e2f8:	4803      	ldr	r0, [pc, #12]	@ (800e308 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e2fa:	f7ff febb 	bl	800e074 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e2fe:	bf00      	nop
}
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	58000c00 	.word	0x58000c00
 800e30c:	20000838 	.word	0x20000838

0800e310 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e314:	2108      	movs	r1, #8
 800e316:	4806      	ldr	r0, [pc, #24]	@ (800e330 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e318:	f7ff fe7a 	bl	800e010 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800e31c:	4b05      	ldr	r3, [pc, #20]	@ (800e334 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e322:	2108      	movs	r1, #8
 800e324:	4802      	ldr	r0, [pc, #8]	@ (800e330 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e326:	f7ff fea5 	bl	800e074 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e32a:	bf00      	nop
}
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	58000c00 	.word	0x58000c00
 800e334:	20000838 	.word	0x20000838

0800e338 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e33c:	2108      	movs	r1, #8
 800e33e:	4802      	ldr	r0, [pc, #8]	@ (800e348 <HW_IPCC_TRACES_Init+0x10>)
 800e340:	f7ff fe78 	bl	800e034 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e344:	bf00      	nop
}
 800e346:	bd80      	pop	{r7, pc}
 800e348:	58000c00 	.word	0x58000c00

0800e34c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800e350:	f7fe ff88 	bl	800d264 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e354:	2108      	movs	r1, #8
 800e356:	4802      	ldr	r0, [pc, #8]	@ (800e360 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800e358:	f7ff fe7e 	bl	800e058 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e35c:	bf00      	nop
}
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	58000c00 	.word	0x58000c00

0800e364 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800e364:	b480      	push	{r7}
 800e366:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e368:	4b05      	ldr	r3, [pc, #20]	@ (800e380 <UTIL_LPM_Init+0x1c>)
 800e36a:	2200      	movs	r2, #0
 800e36c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e36e:	4b05      	ldr	r3, [pc, #20]	@ (800e384 <UTIL_LPM_Init+0x20>)
 800e370:	2200      	movs	r2, #0
 800e372:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e374:	bf00      	nop
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr
 800e37e:	bf00      	nop
 800e380:	2000083c 	.word	0x2000083c
 800e384:	20000840 	.word	0x20000840

0800e388 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e388:	b480      	push	{r7}
 800e38a:	b087      	sub	sp, #28
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	460b      	mov	r3, r1
 800e392:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e394:	f3ef 8310 	mrs	r3, PRIMASK
 800e398:	613b      	str	r3, [r7, #16]
  return(result);
 800e39a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800e39c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e39e:	b672      	cpsid	i
}
 800e3a0:	bf00      	nop
  
  switch(state)
 800e3a2:	78fb      	ldrb	r3, [r7, #3]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d008      	beq.n	800e3ba <UTIL_LPM_SetOffMode+0x32>
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d10e      	bne.n	800e3ca <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800e3ac:	4b0d      	ldr	r3, [pc, #52]	@ (800e3e4 <UTIL_LPM_SetOffMode+0x5c>)
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	4a0b      	ldr	r2, [pc, #44]	@ (800e3e4 <UTIL_LPM_SetOffMode+0x5c>)
 800e3b6:	6013      	str	r3, [r2, #0]
      break;
 800e3b8:	e008      	b.n	800e3cc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	43da      	mvns	r2, r3
 800e3be:	4b09      	ldr	r3, [pc, #36]	@ (800e3e4 <UTIL_LPM_SetOffMode+0x5c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4013      	ands	r3, r2
 800e3c4:	4a07      	ldr	r2, [pc, #28]	@ (800e3e4 <UTIL_LPM_SetOffMode+0x5c>)
 800e3c6:	6013      	str	r3, [r2, #0]
      break;
 800e3c8:	e000      	b.n	800e3cc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800e3ca:	bf00      	nop
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f383 8810 	msr	PRIMASK, r3
}
 800e3d6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e3d8:	bf00      	nop
 800e3da:	371c      	adds	r7, #28
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	20000840 	.word	0x20000840

0800e3e8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b090      	sub	sp, #64	@ 0x40
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800e3f0:	4b73      	ldr	r3, [pc, #460]	@ (800e5c0 <UTIL_SEQ_Run+0x1d8>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800e3f6:	4b72      	ldr	r3, [pc, #456]	@ (800e5c0 <UTIL_SEQ_Run+0x1d8>)
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4013      	ands	r3, r2
 800e3fe:	4a70      	ldr	r2, [pc, #448]	@ (800e5c0 <UTIL_SEQ_Run+0x1d8>)
 800e400:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800e402:	4b70      	ldr	r3, [pc, #448]	@ (800e5c4 <UTIL_SEQ_Run+0x1dc>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e408:	4b6f      	ldr	r3, [pc, #444]	@ (800e5c8 <UTIL_SEQ_Run+0x1e0>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e40e:	4b6f      	ldr	r3, [pc, #444]	@ (800e5cc <UTIL_SEQ_Run+0x1e4>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800e414:	4b6e      	ldr	r3, [pc, #440]	@ (800e5d0 <UTIL_SEQ_Run+0x1e8>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e41a:	e08d      	b.n	800e538 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800e41c:	2300      	movs	r3, #0
 800e41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e420:	e002      	b.n	800e428 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800e422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e424:	3301      	adds	r3, #1
 800e426:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e428:	4a6a      	ldr	r2, [pc, #424]	@ (800e5d4 <UTIL_SEQ_Run+0x1ec>)
 800e42a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e42c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e432:	401a      	ands	r2, r3
 800e434:	4b62      	ldr	r3, [pc, #392]	@ (800e5c0 <UTIL_SEQ_Run+0x1d8>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	4013      	ands	r3, r2
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d0f1      	beq.n	800e422 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800e43e:	4a65      	ldr	r2, [pc, #404]	@ (800e5d4 <UTIL_SEQ_Run+0x1ec>)
 800e440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e442:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e448:	401a      	ands	r2, r3
 800e44a:	4b5d      	ldr	r3, [pc, #372]	@ (800e5c0 <UTIL_SEQ_Run+0x1d8>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4013      	ands	r3, r2
 800e450:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800e452:	4a60      	ldr	r2, [pc, #384]	@ (800e5d4 <UTIL_SEQ_Run+0x1ec>)
 800e454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e456:	00db      	lsls	r3, r3, #3
 800e458:	4413      	add	r3, r2
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45e:	4013      	ands	r3, r2
 800e460:	2b00      	cmp	r3, #0
 800e462:	d106      	bne.n	800e472 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800e464:	4a5b      	ldr	r2, [pc, #364]	@ (800e5d4 <UTIL_SEQ_Run+0x1ec>)
 800e466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e468:	00db      	lsls	r3, r3, #3
 800e46a:	4413      	add	r3, r2
 800e46c:	f04f 32ff 	mov.w	r2, #4294967295
 800e470:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e472:	4a58      	ldr	r2, [pc, #352]	@ (800e5d4 <UTIL_SEQ_Run+0x1ec>)
 800e474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e476:	00db      	lsls	r3, r3, #3
 800e478:	4413      	add	r3, r2
 800e47a:	685a      	ldr	r2, [r3, #4]
 800e47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47e:	4013      	ands	r3, r2
 800e480:	4618      	mov	r0, r3
 800e482:	f000 f9b3 	bl	800e7ec <SEQ_BitPosition>
 800e486:	4603      	mov	r3, r0
 800e488:	461a      	mov	r2, r3
 800e48a:	4b53      	ldr	r3, [pc, #332]	@ (800e5d8 <UTIL_SEQ_Run+0x1f0>)
 800e48c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e48e:	4a51      	ldr	r2, [pc, #324]	@ (800e5d4 <UTIL_SEQ_Run+0x1ec>)
 800e490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	4413      	add	r3, r2
 800e496:	685a      	ldr	r2, [r3, #4]
 800e498:	4b4f      	ldr	r3, [pc, #316]	@ (800e5d8 <UTIL_SEQ_Run+0x1f0>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2101      	movs	r1, #1
 800e49e:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a2:	43db      	mvns	r3, r3
 800e4a4:	401a      	ands	r2, r3
 800e4a6:	494b      	ldr	r1, [pc, #300]	@ (800e5d4 <UTIL_SEQ_Run+0x1ec>)
 800e4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4aa:	00db      	lsls	r3, r3, #3
 800e4ac:	440b      	add	r3, r1
 800e4ae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4b0:	f3ef 8310 	mrs	r3, PRIMASK
 800e4b4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e4b6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e4b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e4ba:	b672      	cpsid	i
}
 800e4bc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e4be:	4b46      	ldr	r3, [pc, #280]	@ (800e5d8 <UTIL_SEQ_Run+0x1f0>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4c8:	43da      	mvns	r2, r3
 800e4ca:	4b3e      	ldr	r3, [pc, #248]	@ (800e5c4 <UTIL_SEQ_Run+0x1dc>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	4a3c      	ldr	r2, [pc, #240]	@ (800e5c4 <UTIL_SEQ_Run+0x1dc>)
 800e4d2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e4d4:	2302      	movs	r3, #2
 800e4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4d8:	e013      	b.n	800e502 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	4a3d      	ldr	r2, [pc, #244]	@ (800e5d4 <UTIL_SEQ_Run+0x1ec>)
 800e4e0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e4e4:	4b3c      	ldr	r3, [pc, #240]	@ (800e5d8 <UTIL_SEQ_Run+0x1f0>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ee:	43da      	mvns	r2, r3
 800e4f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	400a      	ands	r2, r1
 800e4f6:	4937      	ldr	r1, [pc, #220]	@ (800e5d4 <UTIL_SEQ_Run+0x1ec>)
 800e4f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4fe:	3b01      	subs	r3, #1
 800e500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e504:	2b00      	cmp	r3, #0
 800e506:	d1e8      	bne.n	800e4da <UTIL_SEQ_Run+0xf2>
 800e508:	6a3b      	ldr	r3, [r7, #32]
 800e50a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	f383 8810 	msr	PRIMASK, r3
}
 800e512:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800e514:	4b30      	ldr	r3, [pc, #192]	@ (800e5d8 <UTIL_SEQ_Run+0x1f0>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4a30      	ldr	r2, [pc, #192]	@ (800e5dc <UTIL_SEQ_Run+0x1f4>)
 800e51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e51e:	4798      	blx	r3

    local_taskset = TaskSet;
 800e520:	4b28      	ldr	r3, [pc, #160]	@ (800e5c4 <UTIL_SEQ_Run+0x1dc>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800e526:	4b28      	ldr	r3, [pc, #160]	@ (800e5c8 <UTIL_SEQ_Run+0x1e0>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800e52c:	4b27      	ldr	r3, [pc, #156]	@ (800e5cc <UTIL_SEQ_Run+0x1e4>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800e532:	4b27      	ldr	r3, [pc, #156]	@ (800e5d0 <UTIL_SEQ_Run+0x1e8>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e538:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53c:	401a      	ands	r2, r3
 800e53e:	4b20      	ldr	r3, [pc, #128]	@ (800e5c0 <UTIL_SEQ_Run+0x1d8>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4013      	ands	r3, r2
 800e544:	2b00      	cmp	r3, #0
 800e546:	d005      	beq.n	800e554 <UTIL_SEQ_Run+0x16c>
 800e548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54c:	4013      	ands	r3, r2
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f43f af64 	beq.w	800e41c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e554:	4b20      	ldr	r3, [pc, #128]	@ (800e5d8 <UTIL_SEQ_Run+0x1f0>)
 800e556:	f04f 32ff 	mov.w	r2, #4294967295
 800e55a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800e55c:	f000 f938 	bl	800e7d0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e560:	f3ef 8310 	mrs	r3, PRIMASK
 800e564:	613b      	str	r3, [r7, #16]
  return(result);
 800e566:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800e568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e56a:	b672      	cpsid	i
}
 800e56c:	bf00      	nop
  local_taskset = TaskSet;
 800e56e:	4b15      	ldr	r3, [pc, #84]	@ (800e5c4 <UTIL_SEQ_Run+0x1dc>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e574:	4b14      	ldr	r3, [pc, #80]	@ (800e5c8 <UTIL_SEQ_Run+0x1e0>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e57a:	4b14      	ldr	r3, [pc, #80]	@ (800e5cc <UTIL_SEQ_Run+0x1e4>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800e580:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e584:	401a      	ands	r2, r3
 800e586:	4b0e      	ldr	r3, [pc, #56]	@ (800e5c0 <UTIL_SEQ_Run+0x1d8>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4013      	ands	r3, r2
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d107      	bne.n	800e5a0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800e590:	4b0f      	ldr	r3, [pc, #60]	@ (800e5d0 <UTIL_SEQ_Run+0x1e8>)
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e596:	4013      	ands	r3, r2
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800e59c:	f7f3 f8e2 	bl	8001764 <UTIL_SEQ_Idle>
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f383 8810 	msr	PRIMASK, r3
}
 800e5aa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800e5ac:	f000 f917 	bl	800e7de <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800e5b0:	4a03      	ldr	r2, [pc, #12]	@ (800e5c0 <UTIL_SEQ_Run+0x1d8>)
 800e5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b4:	6013      	str	r3, [r2, #0]

  return;
 800e5b6:	bf00      	nop
}
 800e5b8:	3740      	adds	r7, #64	@ 0x40
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20000028 	.word	0x20000028
 800e5c4:	20000844 	.word	0x20000844
 800e5c8:	20000848 	.word	0x20000848
 800e5cc:	20000024 	.word	0x20000024
 800e5d0:	2000084c 	.word	0x2000084c
 800e5d4:	200008d4 	.word	0x200008d4
 800e5d8:	20000850 	.word	0x20000850
 800e5dc:	20000854 	.word	0x20000854

0800e5e0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b088      	sub	sp, #32
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5ec:	f3ef 8310 	mrs	r3, PRIMASK
 800e5f0:	617b      	str	r3, [r7, #20]
  return(result);
 800e5f2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800e5f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5f6:	b672      	cpsid	i
}
 800e5f8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f000 f8f6 	bl	800e7ec <SEQ_BitPosition>
 800e600:	4603      	mov	r3, r0
 800e602:	4619      	mov	r1, r3
 800e604:	4a06      	ldr	r2, [pc, #24]	@ (800e620 <UTIL_SEQ_RegTask+0x40>)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	f383 8810 	msr	PRIMASK, r3
}
 800e616:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800e618:	bf00      	nop
}
 800e61a:	3720      	adds	r7, #32
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	20000854 	.word	0x20000854

0800e624 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800e624:	b480      	push	{r7}
 800e626:	b087      	sub	sp, #28
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e62e:	f3ef 8310 	mrs	r3, PRIMASK
 800e632:	60fb      	str	r3, [r7, #12]
  return(result);
 800e634:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e638:	b672      	cpsid	i
}
 800e63a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800e63c:	4b0d      	ldr	r3, [pc, #52]	@ (800e674 <UTIL_SEQ_SetTask+0x50>)
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4313      	orrs	r3, r2
 800e644:	4a0b      	ldr	r2, [pc, #44]	@ (800e674 <UTIL_SEQ_SetTask+0x50>)
 800e646:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e648:	4a0b      	ldr	r2, [pc, #44]	@ (800e678 <UTIL_SEQ_SetTask+0x54>)
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	431a      	orrs	r2, r3
 800e654:	4908      	ldr	r1, [pc, #32]	@ (800e678 <UTIL_SEQ_SetTask+0x54>)
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	f383 8810 	msr	PRIMASK, r3
}
 800e666:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e668:	bf00      	nop
}
 800e66a:	371c      	adds	r7, #28
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr
 800e674:	20000844 	.word	0x20000844
 800e678:	200008d4 	.word	0x200008d4

0800e67c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e67c:	b480      	push	{r7}
 800e67e:	b087      	sub	sp, #28
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e684:	f3ef 8310 	mrs	r3, PRIMASK
 800e688:	60fb      	str	r3, [r7, #12]
  return(result);
 800e68a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e68c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e68e:	b672      	cpsid	i
}
 800e690:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	43da      	mvns	r2, r3
 800e696:	4b08      	ldr	r3, [pc, #32]	@ (800e6b8 <UTIL_SEQ_PauseTask+0x3c>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4013      	ands	r3, r2
 800e69c:	4a06      	ldr	r2, [pc, #24]	@ (800e6b8 <UTIL_SEQ_PauseTask+0x3c>)
 800e69e:	6013      	str	r3, [r2, #0]
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	f383 8810 	msr	PRIMASK, r3
}
 800e6aa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e6ac:	bf00      	nop
}
 800e6ae:	371c      	adds	r7, #28
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	20000024 	.word	0x20000024

0800e6bc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b087      	sub	sp, #28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6c4:	f3ef 8310 	mrs	r3, PRIMASK
 800e6c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e6cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6ce:	b672      	cpsid	i
}
 800e6d0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800e6d2:	4b09      	ldr	r3, [pc, #36]	@ (800e6f8 <UTIL_SEQ_ResumeTask+0x3c>)
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	4a07      	ldr	r2, [pc, #28]	@ (800e6f8 <UTIL_SEQ_ResumeTask+0x3c>)
 800e6dc:	6013      	str	r3, [r2, #0]
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	f383 8810 	msr	PRIMASK, r3
}
 800e6e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e6ea:	bf00      	nop
}
 800e6ec:	371c      	adds	r7, #28
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	20000024 	.word	0x20000024

0800e6fc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b087      	sub	sp, #28
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e704:	f3ef 8310 	mrs	r3, PRIMASK
 800e708:	60fb      	str	r3, [r7, #12]
  return(result);
 800e70a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e70c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e70e:	b672      	cpsid	i
}
 800e710:	bf00      	nop

  EvtSet |= EvtId_bm;
 800e712:	4b09      	ldr	r3, [pc, #36]	@ (800e738 <UTIL_SEQ_SetEvt+0x3c>)
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4313      	orrs	r3, r2
 800e71a:	4a07      	ldr	r2, [pc, #28]	@ (800e738 <UTIL_SEQ_SetEvt+0x3c>)
 800e71c:	6013      	str	r3, [r2, #0]
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	f383 8810 	msr	PRIMASK, r3
}
 800e728:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e72a:	bf00      	nop
}
 800e72c:	371c      	adds	r7, #28
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr
 800e736:	bf00      	nop
 800e738:	20000848 	.word	0x20000848

0800e73c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b088      	sub	sp, #32
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800e744:	4b1f      	ldr	r3, [pc, #124]	@ (800e7c4 <UTIL_SEQ_WaitEvt+0x88>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800e74a:	4b1e      	ldr	r3, [pc, #120]	@ (800e7c4 <UTIL_SEQ_WaitEvt+0x88>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e752:	d102      	bne.n	800e75a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800e754:	2300      	movs	r3, #0
 800e756:	61fb      	str	r3, [r7, #28]
 800e758:	e005      	b.n	800e766 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800e75a:	4b1a      	ldr	r3, [pc, #104]	@ (800e7c4 <UTIL_SEQ_WaitEvt+0x88>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2201      	movs	r2, #1
 800e760:	fa02 f303 	lsl.w	r3, r2, r3
 800e764:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800e766:	4b18      	ldr	r3, [pc, #96]	@ (800e7c8 <UTIL_SEQ_WaitEvt+0x8c>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800e76c:	4a16      	ldr	r2, [pc, #88]	@ (800e7c8 <UTIL_SEQ_WaitEvt+0x8c>)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800e772:	e003      	b.n	800e77c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800e774:	6879      	ldr	r1, [r7, #4]
 800e776:	69f8      	ldr	r0, [r7, #28]
 800e778:	f7f2 fffb 	bl	8001772 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800e77c:	4b13      	ldr	r3, [pc, #76]	@ (800e7cc <UTIL_SEQ_WaitEvt+0x90>)
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4013      	ands	r3, r2
 800e784:	2b00      	cmp	r3, #0
 800e786:	d0f5      	beq.n	800e774 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800e788:	4a0e      	ldr	r2, [pc, #56]	@ (800e7c4 <UTIL_SEQ_WaitEvt+0x88>)
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e78e:	f3ef 8310 	mrs	r3, PRIMASK
 800e792:	60bb      	str	r3, [r7, #8]
  return(result);
 800e794:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e798:	b672      	cpsid	i
}
 800e79a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	43da      	mvns	r2, r3
 800e7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e7cc <UTIL_SEQ_WaitEvt+0x90>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	4a09      	ldr	r2, [pc, #36]	@ (800e7cc <UTIL_SEQ_WaitEvt+0x90>)
 800e7a8:	6013      	str	r3, [r2, #0]
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f383 8810 	msr	PRIMASK, r3
}
 800e7b4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800e7b6:	4a04      	ldr	r2, [pc, #16]	@ (800e7c8 <UTIL_SEQ_WaitEvt+0x8c>)
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	6013      	str	r3, [r2, #0]
  return;
 800e7bc:	bf00      	nop
}
 800e7be:	3720      	adds	r7, #32
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	20000850 	.word	0x20000850
 800e7c8:	2000084c 	.word	0x2000084c
 800e7cc:	20000848 	.word	0x20000848

0800e7d0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e7d4:	bf00      	nop
}
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800e7de:	b480      	push	{r7}
 800e7e0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e7e2:	bf00      	nop
}
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr

0800e7ec <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e802:	d204      	bcs.n	800e80e <SEQ_BitPosition+0x22>
 800e804:	2310      	movs	r3, #16
 800e806:	73fb      	strb	r3, [r7, #15]
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	041b      	lsls	r3, r3, #16
 800e80c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e814:	d205      	bcs.n	800e822 <SEQ_BitPosition+0x36>
 800e816:	7bfb      	ldrb	r3, [r7, #15]
 800e818:	3308      	adds	r3, #8
 800e81a:	73fb      	strb	r3, [r7, #15]
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	021b      	lsls	r3, r3, #8
 800e820:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e828:	d205      	bcs.n	800e836 <SEQ_BitPosition+0x4a>
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
 800e82c:	3304      	adds	r3, #4
 800e82e:	73fb      	strb	r3, [r7, #15]
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	011b      	lsls	r3, r3, #4
 800e834:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	0f1b      	lsrs	r3, r3, #28
 800e83a:	4a07      	ldr	r2, [pc, #28]	@ (800e858 <SEQ_BitPosition+0x6c>)
 800e83c:	5cd2      	ldrb	r2, [r2, r3]
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
 800e840:	4413      	add	r3, r2
 800e842:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800e844:	7bfb      	ldrb	r3, [r7, #15]
 800e846:	f1c3 031f 	rsb	r3, r3, #31
 800e84a:	b2db      	uxtb	r3, r3
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3714      	adds	r7, #20
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	080135f0 	.word	0x080135f0

0800e85c <_calloc_r>:
 800e85c:	b570      	push	{r4, r5, r6, lr}
 800e85e:	fba1 5402 	umull	r5, r4, r1, r2
 800e862:	b93c      	cbnz	r4, 800e874 <_calloc_r+0x18>
 800e864:	4629      	mov	r1, r5
 800e866:	f000 f837 	bl	800e8d8 <_malloc_r>
 800e86a:	4606      	mov	r6, r0
 800e86c:	b928      	cbnz	r0, 800e87a <_calloc_r+0x1e>
 800e86e:	2600      	movs	r6, #0
 800e870:	4630      	mov	r0, r6
 800e872:	bd70      	pop	{r4, r5, r6, pc}
 800e874:	220c      	movs	r2, #12
 800e876:	6002      	str	r2, [r0, #0]
 800e878:	e7f9      	b.n	800e86e <_calloc_r+0x12>
 800e87a:	462a      	mov	r2, r5
 800e87c:	4621      	mov	r1, r4
 800e87e:	f001 f955 	bl	800fb2c <memset>
 800e882:	e7f5      	b.n	800e870 <_calloc_r+0x14>

0800e884 <malloc>:
 800e884:	4b02      	ldr	r3, [pc, #8]	@ (800e890 <malloc+0xc>)
 800e886:	4601      	mov	r1, r0
 800e888:	6818      	ldr	r0, [r3, #0]
 800e88a:	f000 b825 	b.w	800e8d8 <_malloc_r>
 800e88e:	bf00      	nop
 800e890:	20000038 	.word	0x20000038

0800e894 <sbrk_aligned>:
 800e894:	b570      	push	{r4, r5, r6, lr}
 800e896:	4e0f      	ldr	r6, [pc, #60]	@ (800e8d4 <sbrk_aligned+0x40>)
 800e898:	460c      	mov	r4, r1
 800e89a:	6831      	ldr	r1, [r6, #0]
 800e89c:	4605      	mov	r5, r0
 800e89e:	b911      	cbnz	r1, 800e8a6 <sbrk_aligned+0x12>
 800e8a0:	f001 f984 	bl	800fbac <_sbrk_r>
 800e8a4:	6030      	str	r0, [r6, #0]
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	f001 f97f 	bl	800fbac <_sbrk_r>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	d103      	bne.n	800e8ba <sbrk_aligned+0x26>
 800e8b2:	f04f 34ff 	mov.w	r4, #4294967295
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ba:	1cc4      	adds	r4, r0, #3
 800e8bc:	f024 0403 	bic.w	r4, r4, #3
 800e8c0:	42a0      	cmp	r0, r4
 800e8c2:	d0f8      	beq.n	800e8b6 <sbrk_aligned+0x22>
 800e8c4:	1a21      	subs	r1, r4, r0
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f001 f970 	bl	800fbac <_sbrk_r>
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	d1f2      	bne.n	800e8b6 <sbrk_aligned+0x22>
 800e8d0:	e7ef      	b.n	800e8b2 <sbrk_aligned+0x1e>
 800e8d2:	bf00      	nop
 800e8d4:	200008e4 	.word	0x200008e4

0800e8d8 <_malloc_r>:
 800e8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8dc:	1ccd      	adds	r5, r1, #3
 800e8de:	f025 0503 	bic.w	r5, r5, #3
 800e8e2:	3508      	adds	r5, #8
 800e8e4:	2d0c      	cmp	r5, #12
 800e8e6:	bf38      	it	cc
 800e8e8:	250c      	movcc	r5, #12
 800e8ea:	2d00      	cmp	r5, #0
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	db01      	blt.n	800e8f4 <_malloc_r+0x1c>
 800e8f0:	42a9      	cmp	r1, r5
 800e8f2:	d904      	bls.n	800e8fe <_malloc_r+0x26>
 800e8f4:	230c      	movs	r3, #12
 800e8f6:	6033      	str	r3, [r6, #0]
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e9d4 <_malloc_r+0xfc>
 800e902:	f000 f869 	bl	800e9d8 <__malloc_lock>
 800e906:	f8d8 3000 	ldr.w	r3, [r8]
 800e90a:	461c      	mov	r4, r3
 800e90c:	bb44      	cbnz	r4, 800e960 <_malloc_r+0x88>
 800e90e:	4629      	mov	r1, r5
 800e910:	4630      	mov	r0, r6
 800e912:	f7ff ffbf 	bl	800e894 <sbrk_aligned>
 800e916:	1c43      	adds	r3, r0, #1
 800e918:	4604      	mov	r4, r0
 800e91a:	d158      	bne.n	800e9ce <_malloc_r+0xf6>
 800e91c:	f8d8 4000 	ldr.w	r4, [r8]
 800e920:	4627      	mov	r7, r4
 800e922:	2f00      	cmp	r7, #0
 800e924:	d143      	bne.n	800e9ae <_malloc_r+0xd6>
 800e926:	2c00      	cmp	r4, #0
 800e928:	d04b      	beq.n	800e9c2 <_malloc_r+0xea>
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	4639      	mov	r1, r7
 800e92e:	4630      	mov	r0, r6
 800e930:	eb04 0903 	add.w	r9, r4, r3
 800e934:	f001 f93a 	bl	800fbac <_sbrk_r>
 800e938:	4581      	cmp	r9, r0
 800e93a:	d142      	bne.n	800e9c2 <_malloc_r+0xea>
 800e93c:	6821      	ldr	r1, [r4, #0]
 800e93e:	1a6d      	subs	r5, r5, r1
 800e940:	4629      	mov	r1, r5
 800e942:	4630      	mov	r0, r6
 800e944:	f7ff ffa6 	bl	800e894 <sbrk_aligned>
 800e948:	3001      	adds	r0, #1
 800e94a:	d03a      	beq.n	800e9c2 <_malloc_r+0xea>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	442b      	add	r3, r5
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	f8d8 3000 	ldr.w	r3, [r8]
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	bb62      	cbnz	r2, 800e9b4 <_malloc_r+0xdc>
 800e95a:	f8c8 7000 	str.w	r7, [r8]
 800e95e:	e00f      	b.n	800e980 <_malloc_r+0xa8>
 800e960:	6822      	ldr	r2, [r4, #0]
 800e962:	1b52      	subs	r2, r2, r5
 800e964:	d420      	bmi.n	800e9a8 <_malloc_r+0xd0>
 800e966:	2a0b      	cmp	r2, #11
 800e968:	d917      	bls.n	800e99a <_malloc_r+0xc2>
 800e96a:	1961      	adds	r1, r4, r5
 800e96c:	42a3      	cmp	r3, r4
 800e96e:	6025      	str	r5, [r4, #0]
 800e970:	bf18      	it	ne
 800e972:	6059      	strne	r1, [r3, #4]
 800e974:	6863      	ldr	r3, [r4, #4]
 800e976:	bf08      	it	eq
 800e978:	f8c8 1000 	streq.w	r1, [r8]
 800e97c:	5162      	str	r2, [r4, r5]
 800e97e:	604b      	str	r3, [r1, #4]
 800e980:	4630      	mov	r0, r6
 800e982:	f000 f82f 	bl	800e9e4 <__malloc_unlock>
 800e986:	f104 000b 	add.w	r0, r4, #11
 800e98a:	1d23      	adds	r3, r4, #4
 800e98c:	f020 0007 	bic.w	r0, r0, #7
 800e990:	1ac2      	subs	r2, r0, r3
 800e992:	bf1c      	itt	ne
 800e994:	1a1b      	subne	r3, r3, r0
 800e996:	50a3      	strne	r3, [r4, r2]
 800e998:	e7af      	b.n	800e8fa <_malloc_r+0x22>
 800e99a:	6862      	ldr	r2, [r4, #4]
 800e99c:	42a3      	cmp	r3, r4
 800e99e:	bf0c      	ite	eq
 800e9a0:	f8c8 2000 	streq.w	r2, [r8]
 800e9a4:	605a      	strne	r2, [r3, #4]
 800e9a6:	e7eb      	b.n	800e980 <_malloc_r+0xa8>
 800e9a8:	4623      	mov	r3, r4
 800e9aa:	6864      	ldr	r4, [r4, #4]
 800e9ac:	e7ae      	b.n	800e90c <_malloc_r+0x34>
 800e9ae:	463c      	mov	r4, r7
 800e9b0:	687f      	ldr	r7, [r7, #4]
 800e9b2:	e7b6      	b.n	800e922 <_malloc_r+0x4a>
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	42a3      	cmp	r3, r4
 800e9ba:	d1fb      	bne.n	800e9b4 <_malloc_r+0xdc>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	6053      	str	r3, [r2, #4]
 800e9c0:	e7de      	b.n	800e980 <_malloc_r+0xa8>
 800e9c2:	230c      	movs	r3, #12
 800e9c4:	6033      	str	r3, [r6, #0]
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f000 f80c 	bl	800e9e4 <__malloc_unlock>
 800e9cc:	e794      	b.n	800e8f8 <_malloc_r+0x20>
 800e9ce:	6005      	str	r5, [r0, #0]
 800e9d0:	e7d6      	b.n	800e980 <_malloc_r+0xa8>
 800e9d2:	bf00      	nop
 800e9d4:	200008e8 	.word	0x200008e8

0800e9d8 <__malloc_lock>:
 800e9d8:	4801      	ldr	r0, [pc, #4]	@ (800e9e0 <__malloc_lock+0x8>)
 800e9da:	f001 b934 	b.w	800fc46 <__retarget_lock_acquire_recursive>
 800e9de:	bf00      	nop
 800e9e0:	20000a2c 	.word	0x20000a2c

0800e9e4 <__malloc_unlock>:
 800e9e4:	4801      	ldr	r0, [pc, #4]	@ (800e9ec <__malloc_unlock+0x8>)
 800e9e6:	f001 b92f 	b.w	800fc48 <__retarget_lock_release_recursive>
 800e9ea:	bf00      	nop
 800e9ec:	20000a2c 	.word	0x20000a2c

0800e9f0 <__cvt>:
 800e9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9f4:	ec57 6b10 	vmov	r6, r7, d0
 800e9f8:	2f00      	cmp	r7, #0
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	463b      	mov	r3, r7
 800ea00:	bfbb      	ittet	lt
 800ea02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ea06:	461f      	movlt	r7, r3
 800ea08:	2300      	movge	r3, #0
 800ea0a:	232d      	movlt	r3, #45	@ 0x2d
 800ea0c:	700b      	strb	r3, [r1, #0]
 800ea0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ea14:	4691      	mov	r9, r2
 800ea16:	f023 0820 	bic.w	r8, r3, #32
 800ea1a:	bfbc      	itt	lt
 800ea1c:	4632      	movlt	r2, r6
 800ea1e:	4616      	movlt	r6, r2
 800ea20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ea24:	d005      	beq.n	800ea32 <__cvt+0x42>
 800ea26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ea2a:	d100      	bne.n	800ea2e <__cvt+0x3e>
 800ea2c:	3401      	adds	r4, #1
 800ea2e:	2102      	movs	r1, #2
 800ea30:	e000      	b.n	800ea34 <__cvt+0x44>
 800ea32:	2103      	movs	r1, #3
 800ea34:	ab03      	add	r3, sp, #12
 800ea36:	9301      	str	r3, [sp, #4]
 800ea38:	ab02      	add	r3, sp, #8
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	ec47 6b10 	vmov	d0, r6, r7
 800ea40:	4653      	mov	r3, sl
 800ea42:	4622      	mov	r2, r4
 800ea44:	f001 f9bc 	bl	800fdc0 <_dtoa_r>
 800ea48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ea4c:	4605      	mov	r5, r0
 800ea4e:	d119      	bne.n	800ea84 <__cvt+0x94>
 800ea50:	f019 0f01 	tst.w	r9, #1
 800ea54:	d00e      	beq.n	800ea74 <__cvt+0x84>
 800ea56:	eb00 0904 	add.w	r9, r0, r4
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	4630      	mov	r0, r6
 800ea60:	4639      	mov	r1, r7
 800ea62:	f7f2 f809 	bl	8000a78 <__aeabi_dcmpeq>
 800ea66:	b108      	cbz	r0, 800ea6c <__cvt+0x7c>
 800ea68:	f8cd 900c 	str.w	r9, [sp, #12]
 800ea6c:	2230      	movs	r2, #48	@ 0x30
 800ea6e:	9b03      	ldr	r3, [sp, #12]
 800ea70:	454b      	cmp	r3, r9
 800ea72:	d31e      	bcc.n	800eab2 <__cvt+0xc2>
 800ea74:	9b03      	ldr	r3, [sp, #12]
 800ea76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea78:	1b5b      	subs	r3, r3, r5
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	6013      	str	r3, [r2, #0]
 800ea7e:	b004      	add	sp, #16
 800ea80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ea88:	eb00 0904 	add.w	r9, r0, r4
 800ea8c:	d1e5      	bne.n	800ea5a <__cvt+0x6a>
 800ea8e:	7803      	ldrb	r3, [r0, #0]
 800ea90:	2b30      	cmp	r3, #48	@ 0x30
 800ea92:	d10a      	bne.n	800eaaa <__cvt+0xba>
 800ea94:	2200      	movs	r2, #0
 800ea96:	2300      	movs	r3, #0
 800ea98:	4630      	mov	r0, r6
 800ea9a:	4639      	mov	r1, r7
 800ea9c:	f7f1 ffec 	bl	8000a78 <__aeabi_dcmpeq>
 800eaa0:	b918      	cbnz	r0, 800eaaa <__cvt+0xba>
 800eaa2:	f1c4 0401 	rsb	r4, r4, #1
 800eaa6:	f8ca 4000 	str.w	r4, [sl]
 800eaaa:	f8da 3000 	ldr.w	r3, [sl]
 800eaae:	4499      	add	r9, r3
 800eab0:	e7d3      	b.n	800ea5a <__cvt+0x6a>
 800eab2:	1c59      	adds	r1, r3, #1
 800eab4:	9103      	str	r1, [sp, #12]
 800eab6:	701a      	strb	r2, [r3, #0]
 800eab8:	e7d9      	b.n	800ea6e <__cvt+0x7e>

0800eaba <__exponent>:
 800eaba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eabc:	2900      	cmp	r1, #0
 800eabe:	bfba      	itte	lt
 800eac0:	4249      	neglt	r1, r1
 800eac2:	232d      	movlt	r3, #45	@ 0x2d
 800eac4:	232b      	movge	r3, #43	@ 0x2b
 800eac6:	2909      	cmp	r1, #9
 800eac8:	7002      	strb	r2, [r0, #0]
 800eaca:	7043      	strb	r3, [r0, #1]
 800eacc:	dd29      	ble.n	800eb22 <__exponent+0x68>
 800eace:	f10d 0307 	add.w	r3, sp, #7
 800ead2:	461d      	mov	r5, r3
 800ead4:	270a      	movs	r7, #10
 800ead6:	461a      	mov	r2, r3
 800ead8:	fbb1 f6f7 	udiv	r6, r1, r7
 800eadc:	fb07 1416 	mls	r4, r7, r6, r1
 800eae0:	3430      	adds	r4, #48	@ 0x30
 800eae2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eae6:	460c      	mov	r4, r1
 800eae8:	2c63      	cmp	r4, #99	@ 0x63
 800eaea:	f103 33ff 	add.w	r3, r3, #4294967295
 800eaee:	4631      	mov	r1, r6
 800eaf0:	dcf1      	bgt.n	800ead6 <__exponent+0x1c>
 800eaf2:	3130      	adds	r1, #48	@ 0x30
 800eaf4:	1e94      	subs	r4, r2, #2
 800eaf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eafa:	1c41      	adds	r1, r0, #1
 800eafc:	4623      	mov	r3, r4
 800eafe:	42ab      	cmp	r3, r5
 800eb00:	d30a      	bcc.n	800eb18 <__exponent+0x5e>
 800eb02:	f10d 0309 	add.w	r3, sp, #9
 800eb06:	1a9b      	subs	r3, r3, r2
 800eb08:	42ac      	cmp	r4, r5
 800eb0a:	bf88      	it	hi
 800eb0c:	2300      	movhi	r3, #0
 800eb0e:	3302      	adds	r3, #2
 800eb10:	4403      	add	r3, r0
 800eb12:	1a18      	subs	r0, r3, r0
 800eb14:	b003      	add	sp, #12
 800eb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb18:	f813 6b01 	ldrb.w	r6, [r3], #1
 800eb1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800eb20:	e7ed      	b.n	800eafe <__exponent+0x44>
 800eb22:	2330      	movs	r3, #48	@ 0x30
 800eb24:	3130      	adds	r1, #48	@ 0x30
 800eb26:	7083      	strb	r3, [r0, #2]
 800eb28:	70c1      	strb	r1, [r0, #3]
 800eb2a:	1d03      	adds	r3, r0, #4
 800eb2c:	e7f1      	b.n	800eb12 <__exponent+0x58>
	...

0800eb30 <_printf_float>:
 800eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb34:	b08d      	sub	sp, #52	@ 0x34
 800eb36:	460c      	mov	r4, r1
 800eb38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800eb3c:	4616      	mov	r6, r2
 800eb3e:	461f      	mov	r7, r3
 800eb40:	4605      	mov	r5, r0
 800eb42:	f000 fffb 	bl	800fb3c <_localeconv_r>
 800eb46:	6803      	ldr	r3, [r0, #0]
 800eb48:	9304      	str	r3, [sp, #16]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7f1 fb68 	bl	8000220 <strlen>
 800eb50:	2300      	movs	r3, #0
 800eb52:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb54:	f8d8 3000 	ldr.w	r3, [r8]
 800eb58:	9005      	str	r0, [sp, #20]
 800eb5a:	3307      	adds	r3, #7
 800eb5c:	f023 0307 	bic.w	r3, r3, #7
 800eb60:	f103 0208 	add.w	r2, r3, #8
 800eb64:	f894 a018 	ldrb.w	sl, [r4, #24]
 800eb68:	f8d4 b000 	ldr.w	fp, [r4]
 800eb6c:	f8c8 2000 	str.w	r2, [r8]
 800eb70:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800eb78:	9307      	str	r3, [sp, #28]
 800eb7a:	f8cd 8018 	str.w	r8, [sp, #24]
 800eb7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800eb82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb86:	4b9c      	ldr	r3, [pc, #624]	@ (800edf8 <_printf_float+0x2c8>)
 800eb88:	f04f 32ff 	mov.w	r2, #4294967295
 800eb8c:	f7f1 ffa6 	bl	8000adc <__aeabi_dcmpun>
 800eb90:	bb70      	cbnz	r0, 800ebf0 <_printf_float+0xc0>
 800eb92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb96:	4b98      	ldr	r3, [pc, #608]	@ (800edf8 <_printf_float+0x2c8>)
 800eb98:	f04f 32ff 	mov.w	r2, #4294967295
 800eb9c:	f7f1 ff80 	bl	8000aa0 <__aeabi_dcmple>
 800eba0:	bb30      	cbnz	r0, 800ebf0 <_printf_float+0xc0>
 800eba2:	2200      	movs	r2, #0
 800eba4:	2300      	movs	r3, #0
 800eba6:	4640      	mov	r0, r8
 800eba8:	4649      	mov	r1, r9
 800ebaa:	f7f1 ff6f 	bl	8000a8c <__aeabi_dcmplt>
 800ebae:	b110      	cbz	r0, 800ebb6 <_printf_float+0x86>
 800ebb0:	232d      	movs	r3, #45	@ 0x2d
 800ebb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebb6:	4a91      	ldr	r2, [pc, #580]	@ (800edfc <_printf_float+0x2cc>)
 800ebb8:	4b91      	ldr	r3, [pc, #580]	@ (800ee00 <_printf_float+0x2d0>)
 800ebba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ebbe:	bf94      	ite	ls
 800ebc0:	4690      	movls	r8, r2
 800ebc2:	4698      	movhi	r8, r3
 800ebc4:	2303      	movs	r3, #3
 800ebc6:	6123      	str	r3, [r4, #16]
 800ebc8:	f02b 0304 	bic.w	r3, fp, #4
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	f04f 0900 	mov.w	r9, #0
 800ebd2:	9700      	str	r7, [sp, #0]
 800ebd4:	4633      	mov	r3, r6
 800ebd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ebd8:	4621      	mov	r1, r4
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f000 f9d2 	bl	800ef84 <_printf_common>
 800ebe0:	3001      	adds	r0, #1
 800ebe2:	f040 808d 	bne.w	800ed00 <_printf_float+0x1d0>
 800ebe6:	f04f 30ff 	mov.w	r0, #4294967295
 800ebea:	b00d      	add	sp, #52	@ 0x34
 800ebec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf0:	4642      	mov	r2, r8
 800ebf2:	464b      	mov	r3, r9
 800ebf4:	4640      	mov	r0, r8
 800ebf6:	4649      	mov	r1, r9
 800ebf8:	f7f1 ff70 	bl	8000adc <__aeabi_dcmpun>
 800ebfc:	b140      	cbz	r0, 800ec10 <_printf_float+0xe0>
 800ebfe:	464b      	mov	r3, r9
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	bfbc      	itt	lt
 800ec04:	232d      	movlt	r3, #45	@ 0x2d
 800ec06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ec0a:	4a7e      	ldr	r2, [pc, #504]	@ (800ee04 <_printf_float+0x2d4>)
 800ec0c:	4b7e      	ldr	r3, [pc, #504]	@ (800ee08 <_printf_float+0x2d8>)
 800ec0e:	e7d4      	b.n	800ebba <_printf_float+0x8a>
 800ec10:	6863      	ldr	r3, [r4, #4]
 800ec12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ec16:	9206      	str	r2, [sp, #24]
 800ec18:	1c5a      	adds	r2, r3, #1
 800ec1a:	d13b      	bne.n	800ec94 <_printf_float+0x164>
 800ec1c:	2306      	movs	r3, #6
 800ec1e:	6063      	str	r3, [r4, #4]
 800ec20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ec24:	2300      	movs	r3, #0
 800ec26:	6022      	str	r2, [r4, #0]
 800ec28:	9303      	str	r3, [sp, #12]
 800ec2a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ec2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ec30:	ab09      	add	r3, sp, #36	@ 0x24
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	6861      	ldr	r1, [r4, #4]
 800ec36:	ec49 8b10 	vmov	d0, r8, r9
 800ec3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ec3e:	4628      	mov	r0, r5
 800ec40:	f7ff fed6 	bl	800e9f0 <__cvt>
 800ec44:	9b06      	ldr	r3, [sp, #24]
 800ec46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec48:	2b47      	cmp	r3, #71	@ 0x47
 800ec4a:	4680      	mov	r8, r0
 800ec4c:	d129      	bne.n	800eca2 <_printf_float+0x172>
 800ec4e:	1cc8      	adds	r0, r1, #3
 800ec50:	db02      	blt.n	800ec58 <_printf_float+0x128>
 800ec52:	6863      	ldr	r3, [r4, #4]
 800ec54:	4299      	cmp	r1, r3
 800ec56:	dd41      	ble.n	800ecdc <_printf_float+0x1ac>
 800ec58:	f1aa 0a02 	sub.w	sl, sl, #2
 800ec5c:	fa5f fa8a 	uxtb.w	sl, sl
 800ec60:	3901      	subs	r1, #1
 800ec62:	4652      	mov	r2, sl
 800ec64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ec68:	9109      	str	r1, [sp, #36]	@ 0x24
 800ec6a:	f7ff ff26 	bl	800eaba <__exponent>
 800ec6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ec70:	1813      	adds	r3, r2, r0
 800ec72:	2a01      	cmp	r2, #1
 800ec74:	4681      	mov	r9, r0
 800ec76:	6123      	str	r3, [r4, #16]
 800ec78:	dc02      	bgt.n	800ec80 <_printf_float+0x150>
 800ec7a:	6822      	ldr	r2, [r4, #0]
 800ec7c:	07d2      	lsls	r2, r2, #31
 800ec7e:	d501      	bpl.n	800ec84 <_printf_float+0x154>
 800ec80:	3301      	adds	r3, #1
 800ec82:	6123      	str	r3, [r4, #16]
 800ec84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d0a2      	beq.n	800ebd2 <_printf_float+0xa2>
 800ec8c:	232d      	movs	r3, #45	@ 0x2d
 800ec8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec92:	e79e      	b.n	800ebd2 <_printf_float+0xa2>
 800ec94:	9a06      	ldr	r2, [sp, #24]
 800ec96:	2a47      	cmp	r2, #71	@ 0x47
 800ec98:	d1c2      	bne.n	800ec20 <_printf_float+0xf0>
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d1c0      	bne.n	800ec20 <_printf_float+0xf0>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e7bd      	b.n	800ec1e <_printf_float+0xee>
 800eca2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eca6:	d9db      	bls.n	800ec60 <_printf_float+0x130>
 800eca8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ecac:	d118      	bne.n	800ece0 <_printf_float+0x1b0>
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	6863      	ldr	r3, [r4, #4]
 800ecb2:	dd0b      	ble.n	800eccc <_printf_float+0x19c>
 800ecb4:	6121      	str	r1, [r4, #16]
 800ecb6:	b913      	cbnz	r3, 800ecbe <_printf_float+0x18e>
 800ecb8:	6822      	ldr	r2, [r4, #0]
 800ecba:	07d0      	lsls	r0, r2, #31
 800ecbc:	d502      	bpl.n	800ecc4 <_printf_float+0x194>
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	440b      	add	r3, r1
 800ecc2:	6123      	str	r3, [r4, #16]
 800ecc4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ecc6:	f04f 0900 	mov.w	r9, #0
 800ecca:	e7db      	b.n	800ec84 <_printf_float+0x154>
 800eccc:	b913      	cbnz	r3, 800ecd4 <_printf_float+0x1a4>
 800ecce:	6822      	ldr	r2, [r4, #0]
 800ecd0:	07d2      	lsls	r2, r2, #31
 800ecd2:	d501      	bpl.n	800ecd8 <_printf_float+0x1a8>
 800ecd4:	3302      	adds	r3, #2
 800ecd6:	e7f4      	b.n	800ecc2 <_printf_float+0x192>
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e7f2      	b.n	800ecc2 <_printf_float+0x192>
 800ecdc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ece0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ece2:	4299      	cmp	r1, r3
 800ece4:	db05      	blt.n	800ecf2 <_printf_float+0x1c2>
 800ece6:	6823      	ldr	r3, [r4, #0]
 800ece8:	6121      	str	r1, [r4, #16]
 800ecea:	07d8      	lsls	r0, r3, #31
 800ecec:	d5ea      	bpl.n	800ecc4 <_printf_float+0x194>
 800ecee:	1c4b      	adds	r3, r1, #1
 800ecf0:	e7e7      	b.n	800ecc2 <_printf_float+0x192>
 800ecf2:	2900      	cmp	r1, #0
 800ecf4:	bfd4      	ite	le
 800ecf6:	f1c1 0202 	rsble	r2, r1, #2
 800ecfa:	2201      	movgt	r2, #1
 800ecfc:	4413      	add	r3, r2
 800ecfe:	e7e0      	b.n	800ecc2 <_printf_float+0x192>
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	055a      	lsls	r2, r3, #21
 800ed04:	d407      	bmi.n	800ed16 <_printf_float+0x1e6>
 800ed06:	6923      	ldr	r3, [r4, #16]
 800ed08:	4642      	mov	r2, r8
 800ed0a:	4631      	mov	r1, r6
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	47b8      	blx	r7
 800ed10:	3001      	adds	r0, #1
 800ed12:	d12b      	bne.n	800ed6c <_printf_float+0x23c>
 800ed14:	e767      	b.n	800ebe6 <_printf_float+0xb6>
 800ed16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ed1a:	f240 80dd 	bls.w	800eed8 <_printf_float+0x3a8>
 800ed1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ed22:	2200      	movs	r2, #0
 800ed24:	2300      	movs	r3, #0
 800ed26:	f7f1 fea7 	bl	8000a78 <__aeabi_dcmpeq>
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	d033      	beq.n	800ed96 <_printf_float+0x266>
 800ed2e:	4a37      	ldr	r2, [pc, #220]	@ (800ee0c <_printf_float+0x2dc>)
 800ed30:	2301      	movs	r3, #1
 800ed32:	4631      	mov	r1, r6
 800ed34:	4628      	mov	r0, r5
 800ed36:	47b8      	blx	r7
 800ed38:	3001      	adds	r0, #1
 800ed3a:	f43f af54 	beq.w	800ebe6 <_printf_float+0xb6>
 800ed3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ed42:	4543      	cmp	r3, r8
 800ed44:	db02      	blt.n	800ed4c <_printf_float+0x21c>
 800ed46:	6823      	ldr	r3, [r4, #0]
 800ed48:	07d8      	lsls	r0, r3, #31
 800ed4a:	d50f      	bpl.n	800ed6c <_printf_float+0x23c>
 800ed4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed50:	4631      	mov	r1, r6
 800ed52:	4628      	mov	r0, r5
 800ed54:	47b8      	blx	r7
 800ed56:	3001      	adds	r0, #1
 800ed58:	f43f af45 	beq.w	800ebe6 <_printf_float+0xb6>
 800ed5c:	f04f 0900 	mov.w	r9, #0
 800ed60:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed64:	f104 0a1a 	add.w	sl, r4, #26
 800ed68:	45c8      	cmp	r8, r9
 800ed6a:	dc09      	bgt.n	800ed80 <_printf_float+0x250>
 800ed6c:	6823      	ldr	r3, [r4, #0]
 800ed6e:	079b      	lsls	r3, r3, #30
 800ed70:	f100 8103 	bmi.w	800ef7a <_printf_float+0x44a>
 800ed74:	68e0      	ldr	r0, [r4, #12]
 800ed76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed78:	4298      	cmp	r0, r3
 800ed7a:	bfb8      	it	lt
 800ed7c:	4618      	movlt	r0, r3
 800ed7e:	e734      	b.n	800ebea <_printf_float+0xba>
 800ed80:	2301      	movs	r3, #1
 800ed82:	4652      	mov	r2, sl
 800ed84:	4631      	mov	r1, r6
 800ed86:	4628      	mov	r0, r5
 800ed88:	47b8      	blx	r7
 800ed8a:	3001      	adds	r0, #1
 800ed8c:	f43f af2b 	beq.w	800ebe6 <_printf_float+0xb6>
 800ed90:	f109 0901 	add.w	r9, r9, #1
 800ed94:	e7e8      	b.n	800ed68 <_printf_float+0x238>
 800ed96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	dc39      	bgt.n	800ee10 <_printf_float+0x2e0>
 800ed9c:	4a1b      	ldr	r2, [pc, #108]	@ (800ee0c <_printf_float+0x2dc>)
 800ed9e:	2301      	movs	r3, #1
 800eda0:	4631      	mov	r1, r6
 800eda2:	4628      	mov	r0, r5
 800eda4:	47b8      	blx	r7
 800eda6:	3001      	adds	r0, #1
 800eda8:	f43f af1d 	beq.w	800ebe6 <_printf_float+0xb6>
 800edac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800edb0:	ea59 0303 	orrs.w	r3, r9, r3
 800edb4:	d102      	bne.n	800edbc <_printf_float+0x28c>
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	07d9      	lsls	r1, r3, #31
 800edba:	d5d7      	bpl.n	800ed6c <_printf_float+0x23c>
 800edbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edc0:	4631      	mov	r1, r6
 800edc2:	4628      	mov	r0, r5
 800edc4:	47b8      	blx	r7
 800edc6:	3001      	adds	r0, #1
 800edc8:	f43f af0d 	beq.w	800ebe6 <_printf_float+0xb6>
 800edcc:	f04f 0a00 	mov.w	sl, #0
 800edd0:	f104 0b1a 	add.w	fp, r4, #26
 800edd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edd6:	425b      	negs	r3, r3
 800edd8:	4553      	cmp	r3, sl
 800edda:	dc01      	bgt.n	800ede0 <_printf_float+0x2b0>
 800eddc:	464b      	mov	r3, r9
 800edde:	e793      	b.n	800ed08 <_printf_float+0x1d8>
 800ede0:	2301      	movs	r3, #1
 800ede2:	465a      	mov	r2, fp
 800ede4:	4631      	mov	r1, r6
 800ede6:	4628      	mov	r0, r5
 800ede8:	47b8      	blx	r7
 800edea:	3001      	adds	r0, #1
 800edec:	f43f aefb 	beq.w	800ebe6 <_printf_float+0xb6>
 800edf0:	f10a 0a01 	add.w	sl, sl, #1
 800edf4:	e7ee      	b.n	800edd4 <_printf_float+0x2a4>
 800edf6:	bf00      	nop
 800edf8:	7fefffff 	.word	0x7fefffff
 800edfc:	08013600 	.word	0x08013600
 800ee00:	08013604 	.word	0x08013604
 800ee04:	08013608 	.word	0x08013608
 800ee08:	0801360c 	.word	0x0801360c
 800ee0c:	08013610 	.word	0x08013610
 800ee10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ee12:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ee16:	4553      	cmp	r3, sl
 800ee18:	bfa8      	it	ge
 800ee1a:	4653      	movge	r3, sl
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	4699      	mov	r9, r3
 800ee20:	dc36      	bgt.n	800ee90 <_printf_float+0x360>
 800ee22:	f04f 0b00 	mov.w	fp, #0
 800ee26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee2a:	f104 021a 	add.w	r2, r4, #26
 800ee2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ee30:	9306      	str	r3, [sp, #24]
 800ee32:	eba3 0309 	sub.w	r3, r3, r9
 800ee36:	455b      	cmp	r3, fp
 800ee38:	dc31      	bgt.n	800ee9e <_printf_float+0x36e>
 800ee3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee3c:	459a      	cmp	sl, r3
 800ee3e:	dc3a      	bgt.n	800eeb6 <_printf_float+0x386>
 800ee40:	6823      	ldr	r3, [r4, #0]
 800ee42:	07da      	lsls	r2, r3, #31
 800ee44:	d437      	bmi.n	800eeb6 <_printf_float+0x386>
 800ee46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee48:	ebaa 0903 	sub.w	r9, sl, r3
 800ee4c:	9b06      	ldr	r3, [sp, #24]
 800ee4e:	ebaa 0303 	sub.w	r3, sl, r3
 800ee52:	4599      	cmp	r9, r3
 800ee54:	bfa8      	it	ge
 800ee56:	4699      	movge	r9, r3
 800ee58:	f1b9 0f00 	cmp.w	r9, #0
 800ee5c:	dc33      	bgt.n	800eec6 <_printf_float+0x396>
 800ee5e:	f04f 0800 	mov.w	r8, #0
 800ee62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee66:	f104 0b1a 	add.w	fp, r4, #26
 800ee6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee6c:	ebaa 0303 	sub.w	r3, sl, r3
 800ee70:	eba3 0309 	sub.w	r3, r3, r9
 800ee74:	4543      	cmp	r3, r8
 800ee76:	f77f af79 	ble.w	800ed6c <_printf_float+0x23c>
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	465a      	mov	r2, fp
 800ee7e:	4631      	mov	r1, r6
 800ee80:	4628      	mov	r0, r5
 800ee82:	47b8      	blx	r7
 800ee84:	3001      	adds	r0, #1
 800ee86:	f43f aeae 	beq.w	800ebe6 <_printf_float+0xb6>
 800ee8a:	f108 0801 	add.w	r8, r8, #1
 800ee8e:	e7ec      	b.n	800ee6a <_printf_float+0x33a>
 800ee90:	4642      	mov	r2, r8
 800ee92:	4631      	mov	r1, r6
 800ee94:	4628      	mov	r0, r5
 800ee96:	47b8      	blx	r7
 800ee98:	3001      	adds	r0, #1
 800ee9a:	d1c2      	bne.n	800ee22 <_printf_float+0x2f2>
 800ee9c:	e6a3      	b.n	800ebe6 <_printf_float+0xb6>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	4631      	mov	r1, r6
 800eea2:	4628      	mov	r0, r5
 800eea4:	9206      	str	r2, [sp, #24]
 800eea6:	47b8      	blx	r7
 800eea8:	3001      	adds	r0, #1
 800eeaa:	f43f ae9c 	beq.w	800ebe6 <_printf_float+0xb6>
 800eeae:	9a06      	ldr	r2, [sp, #24]
 800eeb0:	f10b 0b01 	add.w	fp, fp, #1
 800eeb4:	e7bb      	b.n	800ee2e <_printf_float+0x2fe>
 800eeb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eeba:	4631      	mov	r1, r6
 800eebc:	4628      	mov	r0, r5
 800eebe:	47b8      	blx	r7
 800eec0:	3001      	adds	r0, #1
 800eec2:	d1c0      	bne.n	800ee46 <_printf_float+0x316>
 800eec4:	e68f      	b.n	800ebe6 <_printf_float+0xb6>
 800eec6:	9a06      	ldr	r2, [sp, #24]
 800eec8:	464b      	mov	r3, r9
 800eeca:	4442      	add	r2, r8
 800eecc:	4631      	mov	r1, r6
 800eece:	4628      	mov	r0, r5
 800eed0:	47b8      	blx	r7
 800eed2:	3001      	adds	r0, #1
 800eed4:	d1c3      	bne.n	800ee5e <_printf_float+0x32e>
 800eed6:	e686      	b.n	800ebe6 <_printf_float+0xb6>
 800eed8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eedc:	f1ba 0f01 	cmp.w	sl, #1
 800eee0:	dc01      	bgt.n	800eee6 <_printf_float+0x3b6>
 800eee2:	07db      	lsls	r3, r3, #31
 800eee4:	d536      	bpl.n	800ef54 <_printf_float+0x424>
 800eee6:	2301      	movs	r3, #1
 800eee8:	4642      	mov	r2, r8
 800eeea:	4631      	mov	r1, r6
 800eeec:	4628      	mov	r0, r5
 800eeee:	47b8      	blx	r7
 800eef0:	3001      	adds	r0, #1
 800eef2:	f43f ae78 	beq.w	800ebe6 <_printf_float+0xb6>
 800eef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eefa:	4631      	mov	r1, r6
 800eefc:	4628      	mov	r0, r5
 800eefe:	47b8      	blx	r7
 800ef00:	3001      	adds	r0, #1
 800ef02:	f43f ae70 	beq.w	800ebe6 <_printf_float+0xb6>
 800ef06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef12:	f7f1 fdb1 	bl	8000a78 <__aeabi_dcmpeq>
 800ef16:	b9c0      	cbnz	r0, 800ef4a <_printf_float+0x41a>
 800ef18:	4653      	mov	r3, sl
 800ef1a:	f108 0201 	add.w	r2, r8, #1
 800ef1e:	4631      	mov	r1, r6
 800ef20:	4628      	mov	r0, r5
 800ef22:	47b8      	blx	r7
 800ef24:	3001      	adds	r0, #1
 800ef26:	d10c      	bne.n	800ef42 <_printf_float+0x412>
 800ef28:	e65d      	b.n	800ebe6 <_printf_float+0xb6>
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	465a      	mov	r2, fp
 800ef2e:	4631      	mov	r1, r6
 800ef30:	4628      	mov	r0, r5
 800ef32:	47b8      	blx	r7
 800ef34:	3001      	adds	r0, #1
 800ef36:	f43f ae56 	beq.w	800ebe6 <_printf_float+0xb6>
 800ef3a:	f108 0801 	add.w	r8, r8, #1
 800ef3e:	45d0      	cmp	r8, sl
 800ef40:	dbf3      	blt.n	800ef2a <_printf_float+0x3fa>
 800ef42:	464b      	mov	r3, r9
 800ef44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ef48:	e6df      	b.n	800ed0a <_printf_float+0x1da>
 800ef4a:	f04f 0800 	mov.w	r8, #0
 800ef4e:	f104 0b1a 	add.w	fp, r4, #26
 800ef52:	e7f4      	b.n	800ef3e <_printf_float+0x40e>
 800ef54:	2301      	movs	r3, #1
 800ef56:	4642      	mov	r2, r8
 800ef58:	e7e1      	b.n	800ef1e <_printf_float+0x3ee>
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	464a      	mov	r2, r9
 800ef5e:	4631      	mov	r1, r6
 800ef60:	4628      	mov	r0, r5
 800ef62:	47b8      	blx	r7
 800ef64:	3001      	adds	r0, #1
 800ef66:	f43f ae3e 	beq.w	800ebe6 <_printf_float+0xb6>
 800ef6a:	f108 0801 	add.w	r8, r8, #1
 800ef6e:	68e3      	ldr	r3, [r4, #12]
 800ef70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ef72:	1a5b      	subs	r3, r3, r1
 800ef74:	4543      	cmp	r3, r8
 800ef76:	dcf0      	bgt.n	800ef5a <_printf_float+0x42a>
 800ef78:	e6fc      	b.n	800ed74 <_printf_float+0x244>
 800ef7a:	f04f 0800 	mov.w	r8, #0
 800ef7e:	f104 0919 	add.w	r9, r4, #25
 800ef82:	e7f4      	b.n	800ef6e <_printf_float+0x43e>

0800ef84 <_printf_common>:
 800ef84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef88:	4616      	mov	r6, r2
 800ef8a:	4698      	mov	r8, r3
 800ef8c:	688a      	ldr	r2, [r1, #8]
 800ef8e:	690b      	ldr	r3, [r1, #16]
 800ef90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef94:	4293      	cmp	r3, r2
 800ef96:	bfb8      	it	lt
 800ef98:	4613      	movlt	r3, r2
 800ef9a:	6033      	str	r3, [r6, #0]
 800ef9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800efa0:	4607      	mov	r7, r0
 800efa2:	460c      	mov	r4, r1
 800efa4:	b10a      	cbz	r2, 800efaa <_printf_common+0x26>
 800efa6:	3301      	adds	r3, #1
 800efa8:	6033      	str	r3, [r6, #0]
 800efaa:	6823      	ldr	r3, [r4, #0]
 800efac:	0699      	lsls	r1, r3, #26
 800efae:	bf42      	ittt	mi
 800efb0:	6833      	ldrmi	r3, [r6, #0]
 800efb2:	3302      	addmi	r3, #2
 800efb4:	6033      	strmi	r3, [r6, #0]
 800efb6:	6825      	ldr	r5, [r4, #0]
 800efb8:	f015 0506 	ands.w	r5, r5, #6
 800efbc:	d106      	bne.n	800efcc <_printf_common+0x48>
 800efbe:	f104 0a19 	add.w	sl, r4, #25
 800efc2:	68e3      	ldr	r3, [r4, #12]
 800efc4:	6832      	ldr	r2, [r6, #0]
 800efc6:	1a9b      	subs	r3, r3, r2
 800efc8:	42ab      	cmp	r3, r5
 800efca:	dc26      	bgt.n	800f01a <_printf_common+0x96>
 800efcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800efd0:	6822      	ldr	r2, [r4, #0]
 800efd2:	3b00      	subs	r3, #0
 800efd4:	bf18      	it	ne
 800efd6:	2301      	movne	r3, #1
 800efd8:	0692      	lsls	r2, r2, #26
 800efda:	d42b      	bmi.n	800f034 <_printf_common+0xb0>
 800efdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800efe0:	4641      	mov	r1, r8
 800efe2:	4638      	mov	r0, r7
 800efe4:	47c8      	blx	r9
 800efe6:	3001      	adds	r0, #1
 800efe8:	d01e      	beq.n	800f028 <_printf_common+0xa4>
 800efea:	6823      	ldr	r3, [r4, #0]
 800efec:	6922      	ldr	r2, [r4, #16]
 800efee:	f003 0306 	and.w	r3, r3, #6
 800eff2:	2b04      	cmp	r3, #4
 800eff4:	bf02      	ittt	eq
 800eff6:	68e5      	ldreq	r5, [r4, #12]
 800eff8:	6833      	ldreq	r3, [r6, #0]
 800effa:	1aed      	subeq	r5, r5, r3
 800effc:	68a3      	ldr	r3, [r4, #8]
 800effe:	bf0c      	ite	eq
 800f000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f004:	2500      	movne	r5, #0
 800f006:	4293      	cmp	r3, r2
 800f008:	bfc4      	itt	gt
 800f00a:	1a9b      	subgt	r3, r3, r2
 800f00c:	18ed      	addgt	r5, r5, r3
 800f00e:	2600      	movs	r6, #0
 800f010:	341a      	adds	r4, #26
 800f012:	42b5      	cmp	r5, r6
 800f014:	d11a      	bne.n	800f04c <_printf_common+0xc8>
 800f016:	2000      	movs	r0, #0
 800f018:	e008      	b.n	800f02c <_printf_common+0xa8>
 800f01a:	2301      	movs	r3, #1
 800f01c:	4652      	mov	r2, sl
 800f01e:	4641      	mov	r1, r8
 800f020:	4638      	mov	r0, r7
 800f022:	47c8      	blx	r9
 800f024:	3001      	adds	r0, #1
 800f026:	d103      	bne.n	800f030 <_printf_common+0xac>
 800f028:	f04f 30ff 	mov.w	r0, #4294967295
 800f02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f030:	3501      	adds	r5, #1
 800f032:	e7c6      	b.n	800efc2 <_printf_common+0x3e>
 800f034:	18e1      	adds	r1, r4, r3
 800f036:	1c5a      	adds	r2, r3, #1
 800f038:	2030      	movs	r0, #48	@ 0x30
 800f03a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f03e:	4422      	add	r2, r4
 800f040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f044:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f048:	3302      	adds	r3, #2
 800f04a:	e7c7      	b.n	800efdc <_printf_common+0x58>
 800f04c:	2301      	movs	r3, #1
 800f04e:	4622      	mov	r2, r4
 800f050:	4641      	mov	r1, r8
 800f052:	4638      	mov	r0, r7
 800f054:	47c8      	blx	r9
 800f056:	3001      	adds	r0, #1
 800f058:	d0e6      	beq.n	800f028 <_printf_common+0xa4>
 800f05a:	3601      	adds	r6, #1
 800f05c:	e7d9      	b.n	800f012 <_printf_common+0x8e>
	...

0800f060 <_printf_i>:
 800f060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f064:	7e0f      	ldrb	r7, [r1, #24]
 800f066:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f068:	2f78      	cmp	r7, #120	@ 0x78
 800f06a:	4691      	mov	r9, r2
 800f06c:	4680      	mov	r8, r0
 800f06e:	460c      	mov	r4, r1
 800f070:	469a      	mov	sl, r3
 800f072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f076:	d807      	bhi.n	800f088 <_printf_i+0x28>
 800f078:	2f62      	cmp	r7, #98	@ 0x62
 800f07a:	d80a      	bhi.n	800f092 <_printf_i+0x32>
 800f07c:	2f00      	cmp	r7, #0
 800f07e:	f000 80d2 	beq.w	800f226 <_printf_i+0x1c6>
 800f082:	2f58      	cmp	r7, #88	@ 0x58
 800f084:	f000 80b9 	beq.w	800f1fa <_printf_i+0x19a>
 800f088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f08c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f090:	e03a      	b.n	800f108 <_printf_i+0xa8>
 800f092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f096:	2b15      	cmp	r3, #21
 800f098:	d8f6      	bhi.n	800f088 <_printf_i+0x28>
 800f09a:	a101      	add	r1, pc, #4	@ (adr r1, 800f0a0 <_printf_i+0x40>)
 800f09c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0a0:	0800f0f9 	.word	0x0800f0f9
 800f0a4:	0800f10d 	.word	0x0800f10d
 800f0a8:	0800f089 	.word	0x0800f089
 800f0ac:	0800f089 	.word	0x0800f089
 800f0b0:	0800f089 	.word	0x0800f089
 800f0b4:	0800f089 	.word	0x0800f089
 800f0b8:	0800f10d 	.word	0x0800f10d
 800f0bc:	0800f089 	.word	0x0800f089
 800f0c0:	0800f089 	.word	0x0800f089
 800f0c4:	0800f089 	.word	0x0800f089
 800f0c8:	0800f089 	.word	0x0800f089
 800f0cc:	0800f20d 	.word	0x0800f20d
 800f0d0:	0800f137 	.word	0x0800f137
 800f0d4:	0800f1c7 	.word	0x0800f1c7
 800f0d8:	0800f089 	.word	0x0800f089
 800f0dc:	0800f089 	.word	0x0800f089
 800f0e0:	0800f22f 	.word	0x0800f22f
 800f0e4:	0800f089 	.word	0x0800f089
 800f0e8:	0800f137 	.word	0x0800f137
 800f0ec:	0800f089 	.word	0x0800f089
 800f0f0:	0800f089 	.word	0x0800f089
 800f0f4:	0800f1cf 	.word	0x0800f1cf
 800f0f8:	6833      	ldr	r3, [r6, #0]
 800f0fa:	1d1a      	adds	r2, r3, #4
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	6032      	str	r2, [r6, #0]
 800f100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f108:	2301      	movs	r3, #1
 800f10a:	e09d      	b.n	800f248 <_printf_i+0x1e8>
 800f10c:	6833      	ldr	r3, [r6, #0]
 800f10e:	6820      	ldr	r0, [r4, #0]
 800f110:	1d19      	adds	r1, r3, #4
 800f112:	6031      	str	r1, [r6, #0]
 800f114:	0606      	lsls	r6, r0, #24
 800f116:	d501      	bpl.n	800f11c <_printf_i+0xbc>
 800f118:	681d      	ldr	r5, [r3, #0]
 800f11a:	e003      	b.n	800f124 <_printf_i+0xc4>
 800f11c:	0645      	lsls	r5, r0, #25
 800f11e:	d5fb      	bpl.n	800f118 <_printf_i+0xb8>
 800f120:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f124:	2d00      	cmp	r5, #0
 800f126:	da03      	bge.n	800f130 <_printf_i+0xd0>
 800f128:	232d      	movs	r3, #45	@ 0x2d
 800f12a:	426d      	negs	r5, r5
 800f12c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f130:	4859      	ldr	r0, [pc, #356]	@ (800f298 <_printf_i+0x238>)
 800f132:	230a      	movs	r3, #10
 800f134:	e011      	b.n	800f15a <_printf_i+0xfa>
 800f136:	6821      	ldr	r1, [r4, #0]
 800f138:	6833      	ldr	r3, [r6, #0]
 800f13a:	0608      	lsls	r0, r1, #24
 800f13c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f140:	d402      	bmi.n	800f148 <_printf_i+0xe8>
 800f142:	0649      	lsls	r1, r1, #25
 800f144:	bf48      	it	mi
 800f146:	b2ad      	uxthmi	r5, r5
 800f148:	2f6f      	cmp	r7, #111	@ 0x6f
 800f14a:	4853      	ldr	r0, [pc, #332]	@ (800f298 <_printf_i+0x238>)
 800f14c:	6033      	str	r3, [r6, #0]
 800f14e:	bf14      	ite	ne
 800f150:	230a      	movne	r3, #10
 800f152:	2308      	moveq	r3, #8
 800f154:	2100      	movs	r1, #0
 800f156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f15a:	6866      	ldr	r6, [r4, #4]
 800f15c:	60a6      	str	r6, [r4, #8]
 800f15e:	2e00      	cmp	r6, #0
 800f160:	bfa2      	ittt	ge
 800f162:	6821      	ldrge	r1, [r4, #0]
 800f164:	f021 0104 	bicge.w	r1, r1, #4
 800f168:	6021      	strge	r1, [r4, #0]
 800f16a:	b90d      	cbnz	r5, 800f170 <_printf_i+0x110>
 800f16c:	2e00      	cmp	r6, #0
 800f16e:	d04b      	beq.n	800f208 <_printf_i+0x1a8>
 800f170:	4616      	mov	r6, r2
 800f172:	fbb5 f1f3 	udiv	r1, r5, r3
 800f176:	fb03 5711 	mls	r7, r3, r1, r5
 800f17a:	5dc7      	ldrb	r7, [r0, r7]
 800f17c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f180:	462f      	mov	r7, r5
 800f182:	42bb      	cmp	r3, r7
 800f184:	460d      	mov	r5, r1
 800f186:	d9f4      	bls.n	800f172 <_printf_i+0x112>
 800f188:	2b08      	cmp	r3, #8
 800f18a:	d10b      	bne.n	800f1a4 <_printf_i+0x144>
 800f18c:	6823      	ldr	r3, [r4, #0]
 800f18e:	07df      	lsls	r7, r3, #31
 800f190:	d508      	bpl.n	800f1a4 <_printf_i+0x144>
 800f192:	6923      	ldr	r3, [r4, #16]
 800f194:	6861      	ldr	r1, [r4, #4]
 800f196:	4299      	cmp	r1, r3
 800f198:	bfde      	ittt	le
 800f19a:	2330      	movle	r3, #48	@ 0x30
 800f19c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f1a4:	1b92      	subs	r2, r2, r6
 800f1a6:	6122      	str	r2, [r4, #16]
 800f1a8:	f8cd a000 	str.w	sl, [sp]
 800f1ac:	464b      	mov	r3, r9
 800f1ae:	aa03      	add	r2, sp, #12
 800f1b0:	4621      	mov	r1, r4
 800f1b2:	4640      	mov	r0, r8
 800f1b4:	f7ff fee6 	bl	800ef84 <_printf_common>
 800f1b8:	3001      	adds	r0, #1
 800f1ba:	d14a      	bne.n	800f252 <_printf_i+0x1f2>
 800f1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c0:	b004      	add	sp, #16
 800f1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	f043 0320 	orr.w	r3, r3, #32
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	4833      	ldr	r0, [pc, #204]	@ (800f29c <_printf_i+0x23c>)
 800f1d0:	2778      	movs	r7, #120	@ 0x78
 800f1d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f1d6:	6823      	ldr	r3, [r4, #0]
 800f1d8:	6831      	ldr	r1, [r6, #0]
 800f1da:	061f      	lsls	r7, r3, #24
 800f1dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800f1e0:	d402      	bmi.n	800f1e8 <_printf_i+0x188>
 800f1e2:	065f      	lsls	r7, r3, #25
 800f1e4:	bf48      	it	mi
 800f1e6:	b2ad      	uxthmi	r5, r5
 800f1e8:	6031      	str	r1, [r6, #0]
 800f1ea:	07d9      	lsls	r1, r3, #31
 800f1ec:	bf44      	itt	mi
 800f1ee:	f043 0320 	orrmi.w	r3, r3, #32
 800f1f2:	6023      	strmi	r3, [r4, #0]
 800f1f4:	b11d      	cbz	r5, 800f1fe <_printf_i+0x19e>
 800f1f6:	2310      	movs	r3, #16
 800f1f8:	e7ac      	b.n	800f154 <_printf_i+0xf4>
 800f1fa:	4827      	ldr	r0, [pc, #156]	@ (800f298 <_printf_i+0x238>)
 800f1fc:	e7e9      	b.n	800f1d2 <_printf_i+0x172>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	f023 0320 	bic.w	r3, r3, #32
 800f204:	6023      	str	r3, [r4, #0]
 800f206:	e7f6      	b.n	800f1f6 <_printf_i+0x196>
 800f208:	4616      	mov	r6, r2
 800f20a:	e7bd      	b.n	800f188 <_printf_i+0x128>
 800f20c:	6833      	ldr	r3, [r6, #0]
 800f20e:	6825      	ldr	r5, [r4, #0]
 800f210:	6961      	ldr	r1, [r4, #20]
 800f212:	1d18      	adds	r0, r3, #4
 800f214:	6030      	str	r0, [r6, #0]
 800f216:	062e      	lsls	r6, r5, #24
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	d501      	bpl.n	800f220 <_printf_i+0x1c0>
 800f21c:	6019      	str	r1, [r3, #0]
 800f21e:	e002      	b.n	800f226 <_printf_i+0x1c6>
 800f220:	0668      	lsls	r0, r5, #25
 800f222:	d5fb      	bpl.n	800f21c <_printf_i+0x1bc>
 800f224:	8019      	strh	r1, [r3, #0]
 800f226:	2300      	movs	r3, #0
 800f228:	6123      	str	r3, [r4, #16]
 800f22a:	4616      	mov	r6, r2
 800f22c:	e7bc      	b.n	800f1a8 <_printf_i+0x148>
 800f22e:	6833      	ldr	r3, [r6, #0]
 800f230:	1d1a      	adds	r2, r3, #4
 800f232:	6032      	str	r2, [r6, #0]
 800f234:	681e      	ldr	r6, [r3, #0]
 800f236:	6862      	ldr	r2, [r4, #4]
 800f238:	2100      	movs	r1, #0
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7f0 ffa0 	bl	8000180 <memchr>
 800f240:	b108      	cbz	r0, 800f246 <_printf_i+0x1e6>
 800f242:	1b80      	subs	r0, r0, r6
 800f244:	6060      	str	r0, [r4, #4]
 800f246:	6863      	ldr	r3, [r4, #4]
 800f248:	6123      	str	r3, [r4, #16]
 800f24a:	2300      	movs	r3, #0
 800f24c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f250:	e7aa      	b.n	800f1a8 <_printf_i+0x148>
 800f252:	6923      	ldr	r3, [r4, #16]
 800f254:	4632      	mov	r2, r6
 800f256:	4649      	mov	r1, r9
 800f258:	4640      	mov	r0, r8
 800f25a:	47d0      	blx	sl
 800f25c:	3001      	adds	r0, #1
 800f25e:	d0ad      	beq.n	800f1bc <_printf_i+0x15c>
 800f260:	6823      	ldr	r3, [r4, #0]
 800f262:	079b      	lsls	r3, r3, #30
 800f264:	d413      	bmi.n	800f28e <_printf_i+0x22e>
 800f266:	68e0      	ldr	r0, [r4, #12]
 800f268:	9b03      	ldr	r3, [sp, #12]
 800f26a:	4298      	cmp	r0, r3
 800f26c:	bfb8      	it	lt
 800f26e:	4618      	movlt	r0, r3
 800f270:	e7a6      	b.n	800f1c0 <_printf_i+0x160>
 800f272:	2301      	movs	r3, #1
 800f274:	4632      	mov	r2, r6
 800f276:	4649      	mov	r1, r9
 800f278:	4640      	mov	r0, r8
 800f27a:	47d0      	blx	sl
 800f27c:	3001      	adds	r0, #1
 800f27e:	d09d      	beq.n	800f1bc <_printf_i+0x15c>
 800f280:	3501      	adds	r5, #1
 800f282:	68e3      	ldr	r3, [r4, #12]
 800f284:	9903      	ldr	r1, [sp, #12]
 800f286:	1a5b      	subs	r3, r3, r1
 800f288:	42ab      	cmp	r3, r5
 800f28a:	dcf2      	bgt.n	800f272 <_printf_i+0x212>
 800f28c:	e7eb      	b.n	800f266 <_printf_i+0x206>
 800f28e:	2500      	movs	r5, #0
 800f290:	f104 0619 	add.w	r6, r4, #25
 800f294:	e7f5      	b.n	800f282 <_printf_i+0x222>
 800f296:	bf00      	nop
 800f298:	08013612 	.word	0x08013612
 800f29c:	08013623 	.word	0x08013623

0800f2a0 <_scanf_float>:
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	b087      	sub	sp, #28
 800f2a6:	4617      	mov	r7, r2
 800f2a8:	9303      	str	r3, [sp, #12]
 800f2aa:	688b      	ldr	r3, [r1, #8]
 800f2ac:	1e5a      	subs	r2, r3, #1
 800f2ae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f2b2:	bf81      	itttt	hi
 800f2b4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f2b8:	eb03 0b05 	addhi.w	fp, r3, r5
 800f2bc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f2c0:	608b      	strhi	r3, [r1, #8]
 800f2c2:	680b      	ldr	r3, [r1, #0]
 800f2c4:	460a      	mov	r2, r1
 800f2c6:	f04f 0500 	mov.w	r5, #0
 800f2ca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f2ce:	f842 3b1c 	str.w	r3, [r2], #28
 800f2d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f2d6:	4680      	mov	r8, r0
 800f2d8:	460c      	mov	r4, r1
 800f2da:	bf98      	it	ls
 800f2dc:	f04f 0b00 	movls.w	fp, #0
 800f2e0:	9201      	str	r2, [sp, #4]
 800f2e2:	4616      	mov	r6, r2
 800f2e4:	46aa      	mov	sl, r5
 800f2e6:	46a9      	mov	r9, r5
 800f2e8:	9502      	str	r5, [sp, #8]
 800f2ea:	68a2      	ldr	r2, [r4, #8]
 800f2ec:	b152      	cbz	r2, 800f304 <_scanf_float+0x64>
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	2b4e      	cmp	r3, #78	@ 0x4e
 800f2f4:	d864      	bhi.n	800f3c0 <_scanf_float+0x120>
 800f2f6:	2b40      	cmp	r3, #64	@ 0x40
 800f2f8:	d83c      	bhi.n	800f374 <_scanf_float+0xd4>
 800f2fa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f2fe:	b2c8      	uxtb	r0, r1
 800f300:	280e      	cmp	r0, #14
 800f302:	d93a      	bls.n	800f37a <_scanf_float+0xda>
 800f304:	f1b9 0f00 	cmp.w	r9, #0
 800f308:	d003      	beq.n	800f312 <_scanf_float+0x72>
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f310:	6023      	str	r3, [r4, #0]
 800f312:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f316:	f1ba 0f01 	cmp.w	sl, #1
 800f31a:	f200 8117 	bhi.w	800f54c <_scanf_float+0x2ac>
 800f31e:	9b01      	ldr	r3, [sp, #4]
 800f320:	429e      	cmp	r6, r3
 800f322:	f200 8108 	bhi.w	800f536 <_scanf_float+0x296>
 800f326:	2001      	movs	r0, #1
 800f328:	b007      	add	sp, #28
 800f32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f332:	2a0d      	cmp	r2, #13
 800f334:	d8e6      	bhi.n	800f304 <_scanf_float+0x64>
 800f336:	a101      	add	r1, pc, #4	@ (adr r1, 800f33c <_scanf_float+0x9c>)
 800f338:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f33c:	0800f483 	.word	0x0800f483
 800f340:	0800f305 	.word	0x0800f305
 800f344:	0800f305 	.word	0x0800f305
 800f348:	0800f305 	.word	0x0800f305
 800f34c:	0800f4e3 	.word	0x0800f4e3
 800f350:	0800f4bb 	.word	0x0800f4bb
 800f354:	0800f305 	.word	0x0800f305
 800f358:	0800f305 	.word	0x0800f305
 800f35c:	0800f491 	.word	0x0800f491
 800f360:	0800f305 	.word	0x0800f305
 800f364:	0800f305 	.word	0x0800f305
 800f368:	0800f305 	.word	0x0800f305
 800f36c:	0800f305 	.word	0x0800f305
 800f370:	0800f449 	.word	0x0800f449
 800f374:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f378:	e7db      	b.n	800f332 <_scanf_float+0x92>
 800f37a:	290e      	cmp	r1, #14
 800f37c:	d8c2      	bhi.n	800f304 <_scanf_float+0x64>
 800f37e:	a001      	add	r0, pc, #4	@ (adr r0, 800f384 <_scanf_float+0xe4>)
 800f380:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f384:	0800f439 	.word	0x0800f439
 800f388:	0800f305 	.word	0x0800f305
 800f38c:	0800f439 	.word	0x0800f439
 800f390:	0800f4cf 	.word	0x0800f4cf
 800f394:	0800f305 	.word	0x0800f305
 800f398:	0800f3e1 	.word	0x0800f3e1
 800f39c:	0800f41f 	.word	0x0800f41f
 800f3a0:	0800f41f 	.word	0x0800f41f
 800f3a4:	0800f41f 	.word	0x0800f41f
 800f3a8:	0800f41f 	.word	0x0800f41f
 800f3ac:	0800f41f 	.word	0x0800f41f
 800f3b0:	0800f41f 	.word	0x0800f41f
 800f3b4:	0800f41f 	.word	0x0800f41f
 800f3b8:	0800f41f 	.word	0x0800f41f
 800f3bc:	0800f41f 	.word	0x0800f41f
 800f3c0:	2b6e      	cmp	r3, #110	@ 0x6e
 800f3c2:	d809      	bhi.n	800f3d8 <_scanf_float+0x138>
 800f3c4:	2b60      	cmp	r3, #96	@ 0x60
 800f3c6:	d8b2      	bhi.n	800f32e <_scanf_float+0x8e>
 800f3c8:	2b54      	cmp	r3, #84	@ 0x54
 800f3ca:	d07b      	beq.n	800f4c4 <_scanf_float+0x224>
 800f3cc:	2b59      	cmp	r3, #89	@ 0x59
 800f3ce:	d199      	bne.n	800f304 <_scanf_float+0x64>
 800f3d0:	2d07      	cmp	r5, #7
 800f3d2:	d197      	bne.n	800f304 <_scanf_float+0x64>
 800f3d4:	2508      	movs	r5, #8
 800f3d6:	e02c      	b.n	800f432 <_scanf_float+0x192>
 800f3d8:	2b74      	cmp	r3, #116	@ 0x74
 800f3da:	d073      	beq.n	800f4c4 <_scanf_float+0x224>
 800f3dc:	2b79      	cmp	r3, #121	@ 0x79
 800f3de:	e7f6      	b.n	800f3ce <_scanf_float+0x12e>
 800f3e0:	6821      	ldr	r1, [r4, #0]
 800f3e2:	05c8      	lsls	r0, r1, #23
 800f3e4:	d51b      	bpl.n	800f41e <_scanf_float+0x17e>
 800f3e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f3ea:	6021      	str	r1, [r4, #0]
 800f3ec:	f109 0901 	add.w	r9, r9, #1
 800f3f0:	f1bb 0f00 	cmp.w	fp, #0
 800f3f4:	d003      	beq.n	800f3fe <_scanf_float+0x15e>
 800f3f6:	3201      	adds	r2, #1
 800f3f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f3fc:	60a2      	str	r2, [r4, #8]
 800f3fe:	68a3      	ldr	r3, [r4, #8]
 800f400:	3b01      	subs	r3, #1
 800f402:	60a3      	str	r3, [r4, #8]
 800f404:	6923      	ldr	r3, [r4, #16]
 800f406:	3301      	adds	r3, #1
 800f408:	6123      	str	r3, [r4, #16]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	3b01      	subs	r3, #1
 800f40e:	2b00      	cmp	r3, #0
 800f410:	607b      	str	r3, [r7, #4]
 800f412:	f340 8087 	ble.w	800f524 <_scanf_float+0x284>
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	3301      	adds	r3, #1
 800f41a:	603b      	str	r3, [r7, #0]
 800f41c:	e765      	b.n	800f2ea <_scanf_float+0x4a>
 800f41e:	eb1a 0105 	adds.w	r1, sl, r5
 800f422:	f47f af6f 	bne.w	800f304 <_scanf_float+0x64>
 800f426:	6822      	ldr	r2, [r4, #0]
 800f428:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f42c:	6022      	str	r2, [r4, #0]
 800f42e:	460d      	mov	r5, r1
 800f430:	468a      	mov	sl, r1
 800f432:	f806 3b01 	strb.w	r3, [r6], #1
 800f436:	e7e2      	b.n	800f3fe <_scanf_float+0x15e>
 800f438:	6822      	ldr	r2, [r4, #0]
 800f43a:	0610      	lsls	r0, r2, #24
 800f43c:	f57f af62 	bpl.w	800f304 <_scanf_float+0x64>
 800f440:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f444:	6022      	str	r2, [r4, #0]
 800f446:	e7f4      	b.n	800f432 <_scanf_float+0x192>
 800f448:	f1ba 0f00 	cmp.w	sl, #0
 800f44c:	d10e      	bne.n	800f46c <_scanf_float+0x1cc>
 800f44e:	f1b9 0f00 	cmp.w	r9, #0
 800f452:	d10e      	bne.n	800f472 <_scanf_float+0x1d2>
 800f454:	6822      	ldr	r2, [r4, #0]
 800f456:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f45a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f45e:	d108      	bne.n	800f472 <_scanf_float+0x1d2>
 800f460:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f464:	6022      	str	r2, [r4, #0]
 800f466:	f04f 0a01 	mov.w	sl, #1
 800f46a:	e7e2      	b.n	800f432 <_scanf_float+0x192>
 800f46c:	f1ba 0f02 	cmp.w	sl, #2
 800f470:	d055      	beq.n	800f51e <_scanf_float+0x27e>
 800f472:	2d01      	cmp	r5, #1
 800f474:	d002      	beq.n	800f47c <_scanf_float+0x1dc>
 800f476:	2d04      	cmp	r5, #4
 800f478:	f47f af44 	bne.w	800f304 <_scanf_float+0x64>
 800f47c:	3501      	adds	r5, #1
 800f47e:	b2ed      	uxtb	r5, r5
 800f480:	e7d7      	b.n	800f432 <_scanf_float+0x192>
 800f482:	f1ba 0f01 	cmp.w	sl, #1
 800f486:	f47f af3d 	bne.w	800f304 <_scanf_float+0x64>
 800f48a:	f04f 0a02 	mov.w	sl, #2
 800f48e:	e7d0      	b.n	800f432 <_scanf_float+0x192>
 800f490:	b97d      	cbnz	r5, 800f4b2 <_scanf_float+0x212>
 800f492:	f1b9 0f00 	cmp.w	r9, #0
 800f496:	f47f af38 	bne.w	800f30a <_scanf_float+0x6a>
 800f49a:	6822      	ldr	r2, [r4, #0]
 800f49c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f4a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f4a4:	f040 8108 	bne.w	800f6b8 <_scanf_float+0x418>
 800f4a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f4ac:	6022      	str	r2, [r4, #0]
 800f4ae:	2501      	movs	r5, #1
 800f4b0:	e7bf      	b.n	800f432 <_scanf_float+0x192>
 800f4b2:	2d03      	cmp	r5, #3
 800f4b4:	d0e2      	beq.n	800f47c <_scanf_float+0x1dc>
 800f4b6:	2d05      	cmp	r5, #5
 800f4b8:	e7de      	b.n	800f478 <_scanf_float+0x1d8>
 800f4ba:	2d02      	cmp	r5, #2
 800f4bc:	f47f af22 	bne.w	800f304 <_scanf_float+0x64>
 800f4c0:	2503      	movs	r5, #3
 800f4c2:	e7b6      	b.n	800f432 <_scanf_float+0x192>
 800f4c4:	2d06      	cmp	r5, #6
 800f4c6:	f47f af1d 	bne.w	800f304 <_scanf_float+0x64>
 800f4ca:	2507      	movs	r5, #7
 800f4cc:	e7b1      	b.n	800f432 <_scanf_float+0x192>
 800f4ce:	6822      	ldr	r2, [r4, #0]
 800f4d0:	0591      	lsls	r1, r2, #22
 800f4d2:	f57f af17 	bpl.w	800f304 <_scanf_float+0x64>
 800f4d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f4da:	6022      	str	r2, [r4, #0]
 800f4dc:	f8cd 9008 	str.w	r9, [sp, #8]
 800f4e0:	e7a7      	b.n	800f432 <_scanf_float+0x192>
 800f4e2:	6822      	ldr	r2, [r4, #0]
 800f4e4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f4e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f4ec:	d006      	beq.n	800f4fc <_scanf_float+0x25c>
 800f4ee:	0550      	lsls	r0, r2, #21
 800f4f0:	f57f af08 	bpl.w	800f304 <_scanf_float+0x64>
 800f4f4:	f1b9 0f00 	cmp.w	r9, #0
 800f4f8:	f000 80de 	beq.w	800f6b8 <_scanf_float+0x418>
 800f4fc:	0591      	lsls	r1, r2, #22
 800f4fe:	bf58      	it	pl
 800f500:	9902      	ldrpl	r1, [sp, #8]
 800f502:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f506:	bf58      	it	pl
 800f508:	eba9 0101 	subpl.w	r1, r9, r1
 800f50c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f510:	bf58      	it	pl
 800f512:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f516:	6022      	str	r2, [r4, #0]
 800f518:	f04f 0900 	mov.w	r9, #0
 800f51c:	e789      	b.n	800f432 <_scanf_float+0x192>
 800f51e:	f04f 0a03 	mov.w	sl, #3
 800f522:	e786      	b.n	800f432 <_scanf_float+0x192>
 800f524:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f528:	4639      	mov	r1, r7
 800f52a:	4640      	mov	r0, r8
 800f52c:	4798      	blx	r3
 800f52e:	2800      	cmp	r0, #0
 800f530:	f43f aedb 	beq.w	800f2ea <_scanf_float+0x4a>
 800f534:	e6e6      	b.n	800f304 <_scanf_float+0x64>
 800f536:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f53a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f53e:	463a      	mov	r2, r7
 800f540:	4640      	mov	r0, r8
 800f542:	4798      	blx	r3
 800f544:	6923      	ldr	r3, [r4, #16]
 800f546:	3b01      	subs	r3, #1
 800f548:	6123      	str	r3, [r4, #16]
 800f54a:	e6e8      	b.n	800f31e <_scanf_float+0x7e>
 800f54c:	1e6b      	subs	r3, r5, #1
 800f54e:	2b06      	cmp	r3, #6
 800f550:	d824      	bhi.n	800f59c <_scanf_float+0x2fc>
 800f552:	2d02      	cmp	r5, #2
 800f554:	d836      	bhi.n	800f5c4 <_scanf_float+0x324>
 800f556:	9b01      	ldr	r3, [sp, #4]
 800f558:	429e      	cmp	r6, r3
 800f55a:	f67f aee4 	bls.w	800f326 <_scanf_float+0x86>
 800f55e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f562:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f566:	463a      	mov	r2, r7
 800f568:	4640      	mov	r0, r8
 800f56a:	4798      	blx	r3
 800f56c:	6923      	ldr	r3, [r4, #16]
 800f56e:	3b01      	subs	r3, #1
 800f570:	6123      	str	r3, [r4, #16]
 800f572:	e7f0      	b.n	800f556 <_scanf_float+0x2b6>
 800f574:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f578:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f57c:	463a      	mov	r2, r7
 800f57e:	4640      	mov	r0, r8
 800f580:	4798      	blx	r3
 800f582:	6923      	ldr	r3, [r4, #16]
 800f584:	3b01      	subs	r3, #1
 800f586:	6123      	str	r3, [r4, #16]
 800f588:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f58c:	fa5f fa8a 	uxtb.w	sl, sl
 800f590:	f1ba 0f02 	cmp.w	sl, #2
 800f594:	d1ee      	bne.n	800f574 <_scanf_float+0x2d4>
 800f596:	3d03      	subs	r5, #3
 800f598:	b2ed      	uxtb	r5, r5
 800f59a:	1b76      	subs	r6, r6, r5
 800f59c:	6823      	ldr	r3, [r4, #0]
 800f59e:	05da      	lsls	r2, r3, #23
 800f5a0:	d530      	bpl.n	800f604 <_scanf_float+0x364>
 800f5a2:	055b      	lsls	r3, r3, #21
 800f5a4:	d511      	bpl.n	800f5ca <_scanf_float+0x32a>
 800f5a6:	9b01      	ldr	r3, [sp, #4]
 800f5a8:	429e      	cmp	r6, r3
 800f5aa:	f67f aebc 	bls.w	800f326 <_scanf_float+0x86>
 800f5ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5b6:	463a      	mov	r2, r7
 800f5b8:	4640      	mov	r0, r8
 800f5ba:	4798      	blx	r3
 800f5bc:	6923      	ldr	r3, [r4, #16]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	6123      	str	r3, [r4, #16]
 800f5c2:	e7f0      	b.n	800f5a6 <_scanf_float+0x306>
 800f5c4:	46aa      	mov	sl, r5
 800f5c6:	46b3      	mov	fp, r6
 800f5c8:	e7de      	b.n	800f588 <_scanf_float+0x2e8>
 800f5ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f5ce:	6923      	ldr	r3, [r4, #16]
 800f5d0:	2965      	cmp	r1, #101	@ 0x65
 800f5d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f5d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800f5da:	6123      	str	r3, [r4, #16]
 800f5dc:	d00c      	beq.n	800f5f8 <_scanf_float+0x358>
 800f5de:	2945      	cmp	r1, #69	@ 0x45
 800f5e0:	d00a      	beq.n	800f5f8 <_scanf_float+0x358>
 800f5e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5e6:	463a      	mov	r2, r7
 800f5e8:	4640      	mov	r0, r8
 800f5ea:	4798      	blx	r3
 800f5ec:	6923      	ldr	r3, [r4, #16]
 800f5ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	1eb5      	subs	r5, r6, #2
 800f5f6:	6123      	str	r3, [r4, #16]
 800f5f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f5fc:	463a      	mov	r2, r7
 800f5fe:	4640      	mov	r0, r8
 800f600:	4798      	blx	r3
 800f602:	462e      	mov	r6, r5
 800f604:	6822      	ldr	r2, [r4, #0]
 800f606:	f012 0210 	ands.w	r2, r2, #16
 800f60a:	d001      	beq.n	800f610 <_scanf_float+0x370>
 800f60c:	2000      	movs	r0, #0
 800f60e:	e68b      	b.n	800f328 <_scanf_float+0x88>
 800f610:	7032      	strb	r2, [r6, #0]
 800f612:	6823      	ldr	r3, [r4, #0]
 800f614:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f61c:	d11c      	bne.n	800f658 <_scanf_float+0x3b8>
 800f61e:	9b02      	ldr	r3, [sp, #8]
 800f620:	454b      	cmp	r3, r9
 800f622:	eba3 0209 	sub.w	r2, r3, r9
 800f626:	d123      	bne.n	800f670 <_scanf_float+0x3d0>
 800f628:	9901      	ldr	r1, [sp, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	4640      	mov	r0, r8
 800f62e:	f002 fc8b 	bl	8011f48 <_strtod_r>
 800f632:	9b03      	ldr	r3, [sp, #12]
 800f634:	6821      	ldr	r1, [r4, #0]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f011 0f02 	tst.w	r1, #2
 800f63c:	ec57 6b10 	vmov	r6, r7, d0
 800f640:	f103 0204 	add.w	r2, r3, #4
 800f644:	d01f      	beq.n	800f686 <_scanf_float+0x3e6>
 800f646:	9903      	ldr	r1, [sp, #12]
 800f648:	600a      	str	r2, [r1, #0]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	e9c3 6700 	strd	r6, r7, [r3]
 800f650:	68e3      	ldr	r3, [r4, #12]
 800f652:	3301      	adds	r3, #1
 800f654:	60e3      	str	r3, [r4, #12]
 800f656:	e7d9      	b.n	800f60c <_scanf_float+0x36c>
 800f658:	9b04      	ldr	r3, [sp, #16]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d0e4      	beq.n	800f628 <_scanf_float+0x388>
 800f65e:	9905      	ldr	r1, [sp, #20]
 800f660:	230a      	movs	r3, #10
 800f662:	3101      	adds	r1, #1
 800f664:	4640      	mov	r0, r8
 800f666:	f002 fcef 	bl	8012048 <_strtol_r>
 800f66a:	9b04      	ldr	r3, [sp, #16]
 800f66c:	9e05      	ldr	r6, [sp, #20]
 800f66e:	1ac2      	subs	r2, r0, r3
 800f670:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f674:	429e      	cmp	r6, r3
 800f676:	bf28      	it	cs
 800f678:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f67c:	4910      	ldr	r1, [pc, #64]	@ (800f6c0 <_scanf_float+0x420>)
 800f67e:	4630      	mov	r0, r6
 800f680:	f000 f95c 	bl	800f93c <siprintf>
 800f684:	e7d0      	b.n	800f628 <_scanf_float+0x388>
 800f686:	f011 0f04 	tst.w	r1, #4
 800f68a:	9903      	ldr	r1, [sp, #12]
 800f68c:	600a      	str	r2, [r1, #0]
 800f68e:	d1dc      	bne.n	800f64a <_scanf_float+0x3aa>
 800f690:	681d      	ldr	r5, [r3, #0]
 800f692:	4632      	mov	r2, r6
 800f694:	463b      	mov	r3, r7
 800f696:	4630      	mov	r0, r6
 800f698:	4639      	mov	r1, r7
 800f69a:	f7f1 fa1f 	bl	8000adc <__aeabi_dcmpun>
 800f69e:	b128      	cbz	r0, 800f6ac <_scanf_float+0x40c>
 800f6a0:	4808      	ldr	r0, [pc, #32]	@ (800f6c4 <_scanf_float+0x424>)
 800f6a2:	f000 fae1 	bl	800fc68 <nanf>
 800f6a6:	ed85 0a00 	vstr	s0, [r5]
 800f6aa:	e7d1      	b.n	800f650 <_scanf_float+0x3b0>
 800f6ac:	4630      	mov	r0, r6
 800f6ae:	4639      	mov	r1, r7
 800f6b0:	f7f1 fa72 	bl	8000b98 <__aeabi_d2f>
 800f6b4:	6028      	str	r0, [r5, #0]
 800f6b6:	e7cb      	b.n	800f650 <_scanf_float+0x3b0>
 800f6b8:	f04f 0900 	mov.w	r9, #0
 800f6bc:	e629      	b.n	800f312 <_scanf_float+0x72>
 800f6be:	bf00      	nop
 800f6c0:	08013634 	.word	0x08013634
 800f6c4:	08013674 	.word	0x08013674

0800f6c8 <std>:
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	b510      	push	{r4, lr}
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	e9c0 3300 	strd	r3, r3, [r0]
 800f6d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f6d6:	6083      	str	r3, [r0, #8]
 800f6d8:	8181      	strh	r1, [r0, #12]
 800f6da:	6643      	str	r3, [r0, #100]	@ 0x64
 800f6dc:	81c2      	strh	r2, [r0, #14]
 800f6de:	6183      	str	r3, [r0, #24]
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	2208      	movs	r2, #8
 800f6e4:	305c      	adds	r0, #92	@ 0x5c
 800f6e6:	f000 fa21 	bl	800fb2c <memset>
 800f6ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f720 <std+0x58>)
 800f6ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800f6ee:	4b0d      	ldr	r3, [pc, #52]	@ (800f724 <std+0x5c>)
 800f6f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f6f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f728 <std+0x60>)
 800f6f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f72c <std+0x64>)
 800f6f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f730 <std+0x68>)
 800f6fc:	6224      	str	r4, [r4, #32]
 800f6fe:	429c      	cmp	r4, r3
 800f700:	d006      	beq.n	800f710 <std+0x48>
 800f702:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f706:	4294      	cmp	r4, r2
 800f708:	d002      	beq.n	800f710 <std+0x48>
 800f70a:	33d0      	adds	r3, #208	@ 0xd0
 800f70c:	429c      	cmp	r4, r3
 800f70e:	d105      	bne.n	800f71c <std+0x54>
 800f710:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f718:	f000 ba94 	b.w	800fc44 <__retarget_lock_init_recursive>
 800f71c:	bd10      	pop	{r4, pc}
 800f71e:	bf00      	nop
 800f720:	0800f97d 	.word	0x0800f97d
 800f724:	0800f99f 	.word	0x0800f99f
 800f728:	0800f9d7 	.word	0x0800f9d7
 800f72c:	0800f9fb 	.word	0x0800f9fb
 800f730:	200008ec 	.word	0x200008ec

0800f734 <stdio_exit_handler>:
 800f734:	4a02      	ldr	r2, [pc, #8]	@ (800f740 <stdio_exit_handler+0xc>)
 800f736:	4903      	ldr	r1, [pc, #12]	@ (800f744 <stdio_exit_handler+0x10>)
 800f738:	4803      	ldr	r0, [pc, #12]	@ (800f748 <stdio_exit_handler+0x14>)
 800f73a:	f000 b869 	b.w	800f810 <_fwalk_sglue>
 800f73e:	bf00      	nop
 800f740:	2000002c 	.word	0x2000002c
 800f744:	08012689 	.word	0x08012689
 800f748:	2000003c 	.word	0x2000003c

0800f74c <cleanup_stdio>:
 800f74c:	6841      	ldr	r1, [r0, #4]
 800f74e:	4b0c      	ldr	r3, [pc, #48]	@ (800f780 <cleanup_stdio+0x34>)
 800f750:	4299      	cmp	r1, r3
 800f752:	b510      	push	{r4, lr}
 800f754:	4604      	mov	r4, r0
 800f756:	d001      	beq.n	800f75c <cleanup_stdio+0x10>
 800f758:	f002 ff96 	bl	8012688 <_fflush_r>
 800f75c:	68a1      	ldr	r1, [r4, #8]
 800f75e:	4b09      	ldr	r3, [pc, #36]	@ (800f784 <cleanup_stdio+0x38>)
 800f760:	4299      	cmp	r1, r3
 800f762:	d002      	beq.n	800f76a <cleanup_stdio+0x1e>
 800f764:	4620      	mov	r0, r4
 800f766:	f002 ff8f 	bl	8012688 <_fflush_r>
 800f76a:	68e1      	ldr	r1, [r4, #12]
 800f76c:	4b06      	ldr	r3, [pc, #24]	@ (800f788 <cleanup_stdio+0x3c>)
 800f76e:	4299      	cmp	r1, r3
 800f770:	d004      	beq.n	800f77c <cleanup_stdio+0x30>
 800f772:	4620      	mov	r0, r4
 800f774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f778:	f002 bf86 	b.w	8012688 <_fflush_r>
 800f77c:	bd10      	pop	{r4, pc}
 800f77e:	bf00      	nop
 800f780:	200008ec 	.word	0x200008ec
 800f784:	20000954 	.word	0x20000954
 800f788:	200009bc 	.word	0x200009bc

0800f78c <global_stdio_init.part.0>:
 800f78c:	b510      	push	{r4, lr}
 800f78e:	4b0b      	ldr	r3, [pc, #44]	@ (800f7bc <global_stdio_init.part.0+0x30>)
 800f790:	4c0b      	ldr	r4, [pc, #44]	@ (800f7c0 <global_stdio_init.part.0+0x34>)
 800f792:	4a0c      	ldr	r2, [pc, #48]	@ (800f7c4 <global_stdio_init.part.0+0x38>)
 800f794:	601a      	str	r2, [r3, #0]
 800f796:	4620      	mov	r0, r4
 800f798:	2200      	movs	r2, #0
 800f79a:	2104      	movs	r1, #4
 800f79c:	f7ff ff94 	bl	800f6c8 <std>
 800f7a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	2109      	movs	r1, #9
 800f7a8:	f7ff ff8e 	bl	800f6c8 <std>
 800f7ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f7b0:	2202      	movs	r2, #2
 800f7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7b6:	2112      	movs	r1, #18
 800f7b8:	f7ff bf86 	b.w	800f6c8 <std>
 800f7bc:	20000a24 	.word	0x20000a24
 800f7c0:	200008ec 	.word	0x200008ec
 800f7c4:	0800f735 	.word	0x0800f735

0800f7c8 <__sfp_lock_acquire>:
 800f7c8:	4801      	ldr	r0, [pc, #4]	@ (800f7d0 <__sfp_lock_acquire+0x8>)
 800f7ca:	f000 ba3c 	b.w	800fc46 <__retarget_lock_acquire_recursive>
 800f7ce:	bf00      	nop
 800f7d0:	20000a2d 	.word	0x20000a2d

0800f7d4 <__sfp_lock_release>:
 800f7d4:	4801      	ldr	r0, [pc, #4]	@ (800f7dc <__sfp_lock_release+0x8>)
 800f7d6:	f000 ba37 	b.w	800fc48 <__retarget_lock_release_recursive>
 800f7da:	bf00      	nop
 800f7dc:	20000a2d 	.word	0x20000a2d

0800f7e0 <__sinit>:
 800f7e0:	b510      	push	{r4, lr}
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	f7ff fff0 	bl	800f7c8 <__sfp_lock_acquire>
 800f7e8:	6a23      	ldr	r3, [r4, #32]
 800f7ea:	b11b      	cbz	r3, 800f7f4 <__sinit+0x14>
 800f7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7f0:	f7ff bff0 	b.w	800f7d4 <__sfp_lock_release>
 800f7f4:	4b04      	ldr	r3, [pc, #16]	@ (800f808 <__sinit+0x28>)
 800f7f6:	6223      	str	r3, [r4, #32]
 800f7f8:	4b04      	ldr	r3, [pc, #16]	@ (800f80c <__sinit+0x2c>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d1f5      	bne.n	800f7ec <__sinit+0xc>
 800f800:	f7ff ffc4 	bl	800f78c <global_stdio_init.part.0>
 800f804:	e7f2      	b.n	800f7ec <__sinit+0xc>
 800f806:	bf00      	nop
 800f808:	0800f74d 	.word	0x0800f74d
 800f80c:	20000a24 	.word	0x20000a24

0800f810 <_fwalk_sglue>:
 800f810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f814:	4607      	mov	r7, r0
 800f816:	4688      	mov	r8, r1
 800f818:	4614      	mov	r4, r2
 800f81a:	2600      	movs	r6, #0
 800f81c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f820:	f1b9 0901 	subs.w	r9, r9, #1
 800f824:	d505      	bpl.n	800f832 <_fwalk_sglue+0x22>
 800f826:	6824      	ldr	r4, [r4, #0]
 800f828:	2c00      	cmp	r4, #0
 800f82a:	d1f7      	bne.n	800f81c <_fwalk_sglue+0xc>
 800f82c:	4630      	mov	r0, r6
 800f82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f832:	89ab      	ldrh	r3, [r5, #12]
 800f834:	2b01      	cmp	r3, #1
 800f836:	d907      	bls.n	800f848 <_fwalk_sglue+0x38>
 800f838:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f83c:	3301      	adds	r3, #1
 800f83e:	d003      	beq.n	800f848 <_fwalk_sglue+0x38>
 800f840:	4629      	mov	r1, r5
 800f842:	4638      	mov	r0, r7
 800f844:	47c0      	blx	r8
 800f846:	4306      	orrs	r6, r0
 800f848:	3568      	adds	r5, #104	@ 0x68
 800f84a:	e7e9      	b.n	800f820 <_fwalk_sglue+0x10>

0800f84c <iprintf>:
 800f84c:	b40f      	push	{r0, r1, r2, r3}
 800f84e:	b507      	push	{r0, r1, r2, lr}
 800f850:	4906      	ldr	r1, [pc, #24]	@ (800f86c <iprintf+0x20>)
 800f852:	ab04      	add	r3, sp, #16
 800f854:	6808      	ldr	r0, [r1, #0]
 800f856:	f853 2b04 	ldr.w	r2, [r3], #4
 800f85a:	6881      	ldr	r1, [r0, #8]
 800f85c:	9301      	str	r3, [sp, #4]
 800f85e:	f002 fd77 	bl	8012350 <_vfiprintf_r>
 800f862:	b003      	add	sp, #12
 800f864:	f85d eb04 	ldr.w	lr, [sp], #4
 800f868:	b004      	add	sp, #16
 800f86a:	4770      	bx	lr
 800f86c:	20000038 	.word	0x20000038

0800f870 <putchar>:
 800f870:	4b02      	ldr	r3, [pc, #8]	@ (800f87c <putchar+0xc>)
 800f872:	4601      	mov	r1, r0
 800f874:	6818      	ldr	r0, [r3, #0]
 800f876:	6882      	ldr	r2, [r0, #8]
 800f878:	f002 bfa2 	b.w	80127c0 <_putc_r>
 800f87c:	20000038 	.word	0x20000038

0800f880 <_puts_r>:
 800f880:	6a03      	ldr	r3, [r0, #32]
 800f882:	b570      	push	{r4, r5, r6, lr}
 800f884:	6884      	ldr	r4, [r0, #8]
 800f886:	4605      	mov	r5, r0
 800f888:	460e      	mov	r6, r1
 800f88a:	b90b      	cbnz	r3, 800f890 <_puts_r+0x10>
 800f88c:	f7ff ffa8 	bl	800f7e0 <__sinit>
 800f890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f892:	07db      	lsls	r3, r3, #31
 800f894:	d405      	bmi.n	800f8a2 <_puts_r+0x22>
 800f896:	89a3      	ldrh	r3, [r4, #12]
 800f898:	0598      	lsls	r0, r3, #22
 800f89a:	d402      	bmi.n	800f8a2 <_puts_r+0x22>
 800f89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f89e:	f000 f9d2 	bl	800fc46 <__retarget_lock_acquire_recursive>
 800f8a2:	89a3      	ldrh	r3, [r4, #12]
 800f8a4:	0719      	lsls	r1, r3, #28
 800f8a6:	d502      	bpl.n	800f8ae <_puts_r+0x2e>
 800f8a8:	6923      	ldr	r3, [r4, #16]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d135      	bne.n	800f91a <_puts_r+0x9a>
 800f8ae:	4621      	mov	r1, r4
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	f000 f8e5 	bl	800fa80 <__swsetup_r>
 800f8b6:	b380      	cbz	r0, 800f91a <_puts_r+0x9a>
 800f8b8:	f04f 35ff 	mov.w	r5, #4294967295
 800f8bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f8be:	07da      	lsls	r2, r3, #31
 800f8c0:	d405      	bmi.n	800f8ce <_puts_r+0x4e>
 800f8c2:	89a3      	ldrh	r3, [r4, #12]
 800f8c4:	059b      	lsls	r3, r3, #22
 800f8c6:	d402      	bmi.n	800f8ce <_puts_r+0x4e>
 800f8c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8ca:	f000 f9bd 	bl	800fc48 <__retarget_lock_release_recursive>
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	bd70      	pop	{r4, r5, r6, pc}
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	da04      	bge.n	800f8e0 <_puts_r+0x60>
 800f8d6:	69a2      	ldr	r2, [r4, #24]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	dc17      	bgt.n	800f90c <_puts_r+0x8c>
 800f8dc:	290a      	cmp	r1, #10
 800f8de:	d015      	beq.n	800f90c <_puts_r+0x8c>
 800f8e0:	6823      	ldr	r3, [r4, #0]
 800f8e2:	1c5a      	adds	r2, r3, #1
 800f8e4:	6022      	str	r2, [r4, #0]
 800f8e6:	7019      	strb	r1, [r3, #0]
 800f8e8:	68a3      	ldr	r3, [r4, #8]
 800f8ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	60a3      	str	r3, [r4, #8]
 800f8f2:	2900      	cmp	r1, #0
 800f8f4:	d1ed      	bne.n	800f8d2 <_puts_r+0x52>
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	da11      	bge.n	800f91e <_puts_r+0x9e>
 800f8fa:	4622      	mov	r2, r4
 800f8fc:	210a      	movs	r1, #10
 800f8fe:	4628      	mov	r0, r5
 800f900:	f000 f87f 	bl	800fa02 <__swbuf_r>
 800f904:	3001      	adds	r0, #1
 800f906:	d0d7      	beq.n	800f8b8 <_puts_r+0x38>
 800f908:	250a      	movs	r5, #10
 800f90a:	e7d7      	b.n	800f8bc <_puts_r+0x3c>
 800f90c:	4622      	mov	r2, r4
 800f90e:	4628      	mov	r0, r5
 800f910:	f000 f877 	bl	800fa02 <__swbuf_r>
 800f914:	3001      	adds	r0, #1
 800f916:	d1e7      	bne.n	800f8e8 <_puts_r+0x68>
 800f918:	e7ce      	b.n	800f8b8 <_puts_r+0x38>
 800f91a:	3e01      	subs	r6, #1
 800f91c:	e7e4      	b.n	800f8e8 <_puts_r+0x68>
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	1c5a      	adds	r2, r3, #1
 800f922:	6022      	str	r2, [r4, #0]
 800f924:	220a      	movs	r2, #10
 800f926:	701a      	strb	r2, [r3, #0]
 800f928:	e7ee      	b.n	800f908 <_puts_r+0x88>
	...

0800f92c <puts>:
 800f92c:	4b02      	ldr	r3, [pc, #8]	@ (800f938 <puts+0xc>)
 800f92e:	4601      	mov	r1, r0
 800f930:	6818      	ldr	r0, [r3, #0]
 800f932:	f7ff bfa5 	b.w	800f880 <_puts_r>
 800f936:	bf00      	nop
 800f938:	20000038 	.word	0x20000038

0800f93c <siprintf>:
 800f93c:	b40e      	push	{r1, r2, r3}
 800f93e:	b500      	push	{lr}
 800f940:	b09c      	sub	sp, #112	@ 0x70
 800f942:	ab1d      	add	r3, sp, #116	@ 0x74
 800f944:	9002      	str	r0, [sp, #8]
 800f946:	9006      	str	r0, [sp, #24]
 800f948:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f94c:	4809      	ldr	r0, [pc, #36]	@ (800f974 <siprintf+0x38>)
 800f94e:	9107      	str	r1, [sp, #28]
 800f950:	9104      	str	r1, [sp, #16]
 800f952:	4909      	ldr	r1, [pc, #36]	@ (800f978 <siprintf+0x3c>)
 800f954:	f853 2b04 	ldr.w	r2, [r3], #4
 800f958:	9105      	str	r1, [sp, #20]
 800f95a:	6800      	ldr	r0, [r0, #0]
 800f95c:	9301      	str	r3, [sp, #4]
 800f95e:	a902      	add	r1, sp, #8
 800f960:	f002 fbd0 	bl	8012104 <_svfiprintf_r>
 800f964:	9b02      	ldr	r3, [sp, #8]
 800f966:	2200      	movs	r2, #0
 800f968:	701a      	strb	r2, [r3, #0]
 800f96a:	b01c      	add	sp, #112	@ 0x70
 800f96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f970:	b003      	add	sp, #12
 800f972:	4770      	bx	lr
 800f974:	20000038 	.word	0x20000038
 800f978:	ffff0208 	.word	0xffff0208

0800f97c <__sread>:
 800f97c:	b510      	push	{r4, lr}
 800f97e:	460c      	mov	r4, r1
 800f980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f984:	f000 f900 	bl	800fb88 <_read_r>
 800f988:	2800      	cmp	r0, #0
 800f98a:	bfab      	itete	ge
 800f98c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f98e:	89a3      	ldrhlt	r3, [r4, #12]
 800f990:	181b      	addge	r3, r3, r0
 800f992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f996:	bfac      	ite	ge
 800f998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f99a:	81a3      	strhlt	r3, [r4, #12]
 800f99c:	bd10      	pop	{r4, pc}

0800f99e <__swrite>:
 800f99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a2:	461f      	mov	r7, r3
 800f9a4:	898b      	ldrh	r3, [r1, #12]
 800f9a6:	05db      	lsls	r3, r3, #23
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	460c      	mov	r4, r1
 800f9ac:	4616      	mov	r6, r2
 800f9ae:	d505      	bpl.n	800f9bc <__swrite+0x1e>
 800f9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b4:	2302      	movs	r3, #2
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f000 f8d4 	bl	800fb64 <_lseek_r>
 800f9bc:	89a3      	ldrh	r3, [r4, #12]
 800f9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f9c6:	81a3      	strh	r3, [r4, #12]
 800f9c8:	4632      	mov	r2, r6
 800f9ca:	463b      	mov	r3, r7
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d2:	f000 b8fb 	b.w	800fbcc <_write_r>

0800f9d6 <__sseek>:
 800f9d6:	b510      	push	{r4, lr}
 800f9d8:	460c      	mov	r4, r1
 800f9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9de:	f000 f8c1 	bl	800fb64 <_lseek_r>
 800f9e2:	1c43      	adds	r3, r0, #1
 800f9e4:	89a3      	ldrh	r3, [r4, #12]
 800f9e6:	bf15      	itete	ne
 800f9e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f9ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f9ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f9f2:	81a3      	strheq	r3, [r4, #12]
 800f9f4:	bf18      	it	ne
 800f9f6:	81a3      	strhne	r3, [r4, #12]
 800f9f8:	bd10      	pop	{r4, pc}

0800f9fa <__sclose>:
 800f9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9fe:	f000 b8a1 	b.w	800fb44 <_close_r>

0800fa02 <__swbuf_r>:
 800fa02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa04:	460e      	mov	r6, r1
 800fa06:	4614      	mov	r4, r2
 800fa08:	4605      	mov	r5, r0
 800fa0a:	b118      	cbz	r0, 800fa14 <__swbuf_r+0x12>
 800fa0c:	6a03      	ldr	r3, [r0, #32]
 800fa0e:	b90b      	cbnz	r3, 800fa14 <__swbuf_r+0x12>
 800fa10:	f7ff fee6 	bl	800f7e0 <__sinit>
 800fa14:	69a3      	ldr	r3, [r4, #24]
 800fa16:	60a3      	str	r3, [r4, #8]
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	071a      	lsls	r2, r3, #28
 800fa1c:	d501      	bpl.n	800fa22 <__swbuf_r+0x20>
 800fa1e:	6923      	ldr	r3, [r4, #16]
 800fa20:	b943      	cbnz	r3, 800fa34 <__swbuf_r+0x32>
 800fa22:	4621      	mov	r1, r4
 800fa24:	4628      	mov	r0, r5
 800fa26:	f000 f82b 	bl	800fa80 <__swsetup_r>
 800fa2a:	b118      	cbz	r0, 800fa34 <__swbuf_r+0x32>
 800fa2c:	f04f 37ff 	mov.w	r7, #4294967295
 800fa30:	4638      	mov	r0, r7
 800fa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa34:	6823      	ldr	r3, [r4, #0]
 800fa36:	6922      	ldr	r2, [r4, #16]
 800fa38:	1a98      	subs	r0, r3, r2
 800fa3a:	6963      	ldr	r3, [r4, #20]
 800fa3c:	b2f6      	uxtb	r6, r6
 800fa3e:	4283      	cmp	r3, r0
 800fa40:	4637      	mov	r7, r6
 800fa42:	dc05      	bgt.n	800fa50 <__swbuf_r+0x4e>
 800fa44:	4621      	mov	r1, r4
 800fa46:	4628      	mov	r0, r5
 800fa48:	f002 fe1e 	bl	8012688 <_fflush_r>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d1ed      	bne.n	800fa2c <__swbuf_r+0x2a>
 800fa50:	68a3      	ldr	r3, [r4, #8]
 800fa52:	3b01      	subs	r3, #1
 800fa54:	60a3      	str	r3, [r4, #8]
 800fa56:	6823      	ldr	r3, [r4, #0]
 800fa58:	1c5a      	adds	r2, r3, #1
 800fa5a:	6022      	str	r2, [r4, #0]
 800fa5c:	701e      	strb	r6, [r3, #0]
 800fa5e:	6962      	ldr	r2, [r4, #20]
 800fa60:	1c43      	adds	r3, r0, #1
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d004      	beq.n	800fa70 <__swbuf_r+0x6e>
 800fa66:	89a3      	ldrh	r3, [r4, #12]
 800fa68:	07db      	lsls	r3, r3, #31
 800fa6a:	d5e1      	bpl.n	800fa30 <__swbuf_r+0x2e>
 800fa6c:	2e0a      	cmp	r6, #10
 800fa6e:	d1df      	bne.n	800fa30 <__swbuf_r+0x2e>
 800fa70:	4621      	mov	r1, r4
 800fa72:	4628      	mov	r0, r5
 800fa74:	f002 fe08 	bl	8012688 <_fflush_r>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d0d9      	beq.n	800fa30 <__swbuf_r+0x2e>
 800fa7c:	e7d6      	b.n	800fa2c <__swbuf_r+0x2a>
	...

0800fa80 <__swsetup_r>:
 800fa80:	b538      	push	{r3, r4, r5, lr}
 800fa82:	4b29      	ldr	r3, [pc, #164]	@ (800fb28 <__swsetup_r+0xa8>)
 800fa84:	4605      	mov	r5, r0
 800fa86:	6818      	ldr	r0, [r3, #0]
 800fa88:	460c      	mov	r4, r1
 800fa8a:	b118      	cbz	r0, 800fa94 <__swsetup_r+0x14>
 800fa8c:	6a03      	ldr	r3, [r0, #32]
 800fa8e:	b90b      	cbnz	r3, 800fa94 <__swsetup_r+0x14>
 800fa90:	f7ff fea6 	bl	800f7e0 <__sinit>
 800fa94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa98:	0719      	lsls	r1, r3, #28
 800fa9a:	d422      	bmi.n	800fae2 <__swsetup_r+0x62>
 800fa9c:	06da      	lsls	r2, r3, #27
 800fa9e:	d407      	bmi.n	800fab0 <__swsetup_r+0x30>
 800faa0:	2209      	movs	r2, #9
 800faa2:	602a      	str	r2, [r5, #0]
 800faa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800faa8:	81a3      	strh	r3, [r4, #12]
 800faaa:	f04f 30ff 	mov.w	r0, #4294967295
 800faae:	e033      	b.n	800fb18 <__swsetup_r+0x98>
 800fab0:	0758      	lsls	r0, r3, #29
 800fab2:	d512      	bpl.n	800fada <__swsetup_r+0x5a>
 800fab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fab6:	b141      	cbz	r1, 800faca <__swsetup_r+0x4a>
 800fab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fabc:	4299      	cmp	r1, r3
 800fabe:	d002      	beq.n	800fac6 <__swsetup_r+0x46>
 800fac0:	4628      	mov	r0, r5
 800fac2:	f000 ff41 	bl	8010948 <_free_r>
 800fac6:	2300      	movs	r3, #0
 800fac8:	6363      	str	r3, [r4, #52]	@ 0x34
 800faca:	89a3      	ldrh	r3, [r4, #12]
 800facc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fad0:	81a3      	strh	r3, [r4, #12]
 800fad2:	2300      	movs	r3, #0
 800fad4:	6063      	str	r3, [r4, #4]
 800fad6:	6923      	ldr	r3, [r4, #16]
 800fad8:	6023      	str	r3, [r4, #0]
 800fada:	89a3      	ldrh	r3, [r4, #12]
 800fadc:	f043 0308 	orr.w	r3, r3, #8
 800fae0:	81a3      	strh	r3, [r4, #12]
 800fae2:	6923      	ldr	r3, [r4, #16]
 800fae4:	b94b      	cbnz	r3, 800fafa <__swsetup_r+0x7a>
 800fae6:	89a3      	ldrh	r3, [r4, #12]
 800fae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800faec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800faf0:	d003      	beq.n	800fafa <__swsetup_r+0x7a>
 800faf2:	4621      	mov	r1, r4
 800faf4:	4628      	mov	r0, r5
 800faf6:	f002 fe27 	bl	8012748 <__smakebuf_r>
 800fafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fafe:	f013 0201 	ands.w	r2, r3, #1
 800fb02:	d00a      	beq.n	800fb1a <__swsetup_r+0x9a>
 800fb04:	2200      	movs	r2, #0
 800fb06:	60a2      	str	r2, [r4, #8]
 800fb08:	6962      	ldr	r2, [r4, #20]
 800fb0a:	4252      	negs	r2, r2
 800fb0c:	61a2      	str	r2, [r4, #24]
 800fb0e:	6922      	ldr	r2, [r4, #16]
 800fb10:	b942      	cbnz	r2, 800fb24 <__swsetup_r+0xa4>
 800fb12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb16:	d1c5      	bne.n	800faa4 <__swsetup_r+0x24>
 800fb18:	bd38      	pop	{r3, r4, r5, pc}
 800fb1a:	0799      	lsls	r1, r3, #30
 800fb1c:	bf58      	it	pl
 800fb1e:	6962      	ldrpl	r2, [r4, #20]
 800fb20:	60a2      	str	r2, [r4, #8]
 800fb22:	e7f4      	b.n	800fb0e <__swsetup_r+0x8e>
 800fb24:	2000      	movs	r0, #0
 800fb26:	e7f7      	b.n	800fb18 <__swsetup_r+0x98>
 800fb28:	20000038 	.word	0x20000038

0800fb2c <memset>:
 800fb2c:	4402      	add	r2, r0
 800fb2e:	4603      	mov	r3, r0
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d100      	bne.n	800fb36 <memset+0xa>
 800fb34:	4770      	bx	lr
 800fb36:	f803 1b01 	strb.w	r1, [r3], #1
 800fb3a:	e7f9      	b.n	800fb30 <memset+0x4>

0800fb3c <_localeconv_r>:
 800fb3c:	4800      	ldr	r0, [pc, #0]	@ (800fb40 <_localeconv_r+0x4>)
 800fb3e:	4770      	bx	lr
 800fb40:	20000178 	.word	0x20000178

0800fb44 <_close_r>:
 800fb44:	b538      	push	{r3, r4, r5, lr}
 800fb46:	4d06      	ldr	r5, [pc, #24]	@ (800fb60 <_close_r+0x1c>)
 800fb48:	2300      	movs	r3, #0
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	4608      	mov	r0, r1
 800fb4e:	602b      	str	r3, [r5, #0]
 800fb50:	f7f3 fcb0 	bl	80034b4 <_close>
 800fb54:	1c43      	adds	r3, r0, #1
 800fb56:	d102      	bne.n	800fb5e <_close_r+0x1a>
 800fb58:	682b      	ldr	r3, [r5, #0]
 800fb5a:	b103      	cbz	r3, 800fb5e <_close_r+0x1a>
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	bd38      	pop	{r3, r4, r5, pc}
 800fb60:	20000a28 	.word	0x20000a28

0800fb64 <_lseek_r>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	4d07      	ldr	r5, [pc, #28]	@ (800fb84 <_lseek_r+0x20>)
 800fb68:	4604      	mov	r4, r0
 800fb6a:	4608      	mov	r0, r1
 800fb6c:	4611      	mov	r1, r2
 800fb6e:	2200      	movs	r2, #0
 800fb70:	602a      	str	r2, [r5, #0]
 800fb72:	461a      	mov	r2, r3
 800fb74:	f7f3 fcc5 	bl	8003502 <_lseek>
 800fb78:	1c43      	adds	r3, r0, #1
 800fb7a:	d102      	bne.n	800fb82 <_lseek_r+0x1e>
 800fb7c:	682b      	ldr	r3, [r5, #0]
 800fb7e:	b103      	cbz	r3, 800fb82 <_lseek_r+0x1e>
 800fb80:	6023      	str	r3, [r4, #0]
 800fb82:	bd38      	pop	{r3, r4, r5, pc}
 800fb84:	20000a28 	.word	0x20000a28

0800fb88 <_read_r>:
 800fb88:	b538      	push	{r3, r4, r5, lr}
 800fb8a:	4d07      	ldr	r5, [pc, #28]	@ (800fba8 <_read_r+0x20>)
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	4608      	mov	r0, r1
 800fb90:	4611      	mov	r1, r2
 800fb92:	2200      	movs	r2, #0
 800fb94:	602a      	str	r2, [r5, #0]
 800fb96:	461a      	mov	r2, r3
 800fb98:	f7f3 fc6f 	bl	800347a <_read>
 800fb9c:	1c43      	adds	r3, r0, #1
 800fb9e:	d102      	bne.n	800fba6 <_read_r+0x1e>
 800fba0:	682b      	ldr	r3, [r5, #0]
 800fba2:	b103      	cbz	r3, 800fba6 <_read_r+0x1e>
 800fba4:	6023      	str	r3, [r4, #0]
 800fba6:	bd38      	pop	{r3, r4, r5, pc}
 800fba8:	20000a28 	.word	0x20000a28

0800fbac <_sbrk_r>:
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	4d06      	ldr	r5, [pc, #24]	@ (800fbc8 <_sbrk_r+0x1c>)
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	4608      	mov	r0, r1
 800fbb6:	602b      	str	r3, [r5, #0]
 800fbb8:	f7f3 fcb0 	bl	800351c <_sbrk>
 800fbbc:	1c43      	adds	r3, r0, #1
 800fbbe:	d102      	bne.n	800fbc6 <_sbrk_r+0x1a>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	b103      	cbz	r3, 800fbc6 <_sbrk_r+0x1a>
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	bd38      	pop	{r3, r4, r5, pc}
 800fbc8:	20000a28 	.word	0x20000a28

0800fbcc <_write_r>:
 800fbcc:	b538      	push	{r3, r4, r5, lr}
 800fbce:	4d07      	ldr	r5, [pc, #28]	@ (800fbec <_write_r+0x20>)
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	4608      	mov	r0, r1
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	602a      	str	r2, [r5, #0]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	f7fd fbde 	bl	800d39c <_write>
 800fbe0:	1c43      	adds	r3, r0, #1
 800fbe2:	d102      	bne.n	800fbea <_write_r+0x1e>
 800fbe4:	682b      	ldr	r3, [r5, #0]
 800fbe6:	b103      	cbz	r3, 800fbea <_write_r+0x1e>
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	bd38      	pop	{r3, r4, r5, pc}
 800fbec:	20000a28 	.word	0x20000a28

0800fbf0 <__errno>:
 800fbf0:	4b01      	ldr	r3, [pc, #4]	@ (800fbf8 <__errno+0x8>)
 800fbf2:	6818      	ldr	r0, [r3, #0]
 800fbf4:	4770      	bx	lr
 800fbf6:	bf00      	nop
 800fbf8:	20000038 	.word	0x20000038

0800fbfc <__libc_init_array>:
 800fbfc:	b570      	push	{r4, r5, r6, lr}
 800fbfe:	4d0d      	ldr	r5, [pc, #52]	@ (800fc34 <__libc_init_array+0x38>)
 800fc00:	4c0d      	ldr	r4, [pc, #52]	@ (800fc38 <__libc_init_array+0x3c>)
 800fc02:	1b64      	subs	r4, r4, r5
 800fc04:	10a4      	asrs	r4, r4, #2
 800fc06:	2600      	movs	r6, #0
 800fc08:	42a6      	cmp	r6, r4
 800fc0a:	d109      	bne.n	800fc20 <__libc_init_array+0x24>
 800fc0c:	4d0b      	ldr	r5, [pc, #44]	@ (800fc3c <__libc_init_array+0x40>)
 800fc0e:	4c0c      	ldr	r4, [pc, #48]	@ (800fc40 <__libc_init_array+0x44>)
 800fc10:	f003 fa3a 	bl	8013088 <_init>
 800fc14:	1b64      	subs	r4, r4, r5
 800fc16:	10a4      	asrs	r4, r4, #2
 800fc18:	2600      	movs	r6, #0
 800fc1a:	42a6      	cmp	r6, r4
 800fc1c:	d105      	bne.n	800fc2a <__libc_init_array+0x2e>
 800fc1e:	bd70      	pop	{r4, r5, r6, pc}
 800fc20:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc24:	4798      	blx	r3
 800fc26:	3601      	adds	r6, #1
 800fc28:	e7ee      	b.n	800fc08 <__libc_init_array+0xc>
 800fc2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc2e:	4798      	blx	r3
 800fc30:	3601      	adds	r6, #1
 800fc32:	e7f2      	b.n	800fc1a <__libc_init_array+0x1e>
 800fc34:	08013a34 	.word	0x08013a34
 800fc38:	08013a34 	.word	0x08013a34
 800fc3c:	08013a34 	.word	0x08013a34
 800fc40:	08013a38 	.word	0x08013a38

0800fc44 <__retarget_lock_init_recursive>:
 800fc44:	4770      	bx	lr

0800fc46 <__retarget_lock_acquire_recursive>:
 800fc46:	4770      	bx	lr

0800fc48 <__retarget_lock_release_recursive>:
 800fc48:	4770      	bx	lr

0800fc4a <memcpy>:
 800fc4a:	440a      	add	r2, r1
 800fc4c:	4291      	cmp	r1, r2
 800fc4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc52:	d100      	bne.n	800fc56 <memcpy+0xc>
 800fc54:	4770      	bx	lr
 800fc56:	b510      	push	{r4, lr}
 800fc58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc60:	4291      	cmp	r1, r2
 800fc62:	d1f9      	bne.n	800fc58 <memcpy+0xe>
 800fc64:	bd10      	pop	{r4, pc}
	...

0800fc68 <nanf>:
 800fc68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fc70 <nanf+0x8>
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	7fc00000 	.word	0x7fc00000

0800fc74 <__assert_func>:
 800fc74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc76:	4614      	mov	r4, r2
 800fc78:	461a      	mov	r2, r3
 800fc7a:	4b09      	ldr	r3, [pc, #36]	@ (800fca0 <__assert_func+0x2c>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4605      	mov	r5, r0
 800fc80:	68d8      	ldr	r0, [r3, #12]
 800fc82:	b954      	cbnz	r4, 800fc9a <__assert_func+0x26>
 800fc84:	4b07      	ldr	r3, [pc, #28]	@ (800fca4 <__assert_func+0x30>)
 800fc86:	461c      	mov	r4, r3
 800fc88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc8c:	9100      	str	r1, [sp, #0]
 800fc8e:	462b      	mov	r3, r5
 800fc90:	4905      	ldr	r1, [pc, #20]	@ (800fca8 <__assert_func+0x34>)
 800fc92:	f002 fd21 	bl	80126d8 <fiprintf>
 800fc96:	f002 fe1f 	bl	80128d8 <abort>
 800fc9a:	4b04      	ldr	r3, [pc, #16]	@ (800fcac <__assert_func+0x38>)
 800fc9c:	e7f4      	b.n	800fc88 <__assert_func+0x14>
 800fc9e:	bf00      	nop
 800fca0:	20000038 	.word	0x20000038
 800fca4:	08013674 	.word	0x08013674
 800fca8:	08013646 	.word	0x08013646
 800fcac:	08013639 	.word	0x08013639

0800fcb0 <quorem>:
 800fcb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb4:	6903      	ldr	r3, [r0, #16]
 800fcb6:	690c      	ldr	r4, [r1, #16]
 800fcb8:	42a3      	cmp	r3, r4
 800fcba:	4607      	mov	r7, r0
 800fcbc:	db7e      	blt.n	800fdbc <quorem+0x10c>
 800fcbe:	3c01      	subs	r4, #1
 800fcc0:	f101 0814 	add.w	r8, r1, #20
 800fcc4:	00a3      	lsls	r3, r4, #2
 800fcc6:	f100 0514 	add.w	r5, r0, #20
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fcd0:	9301      	str	r3, [sp, #4]
 800fcd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fcd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fce2:	fbb2 f6f3 	udiv	r6, r2, r3
 800fce6:	d32e      	bcc.n	800fd46 <quorem+0x96>
 800fce8:	f04f 0a00 	mov.w	sl, #0
 800fcec:	46c4      	mov	ip, r8
 800fcee:	46ae      	mov	lr, r5
 800fcf0:	46d3      	mov	fp, sl
 800fcf2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fcf6:	b298      	uxth	r0, r3
 800fcf8:	fb06 a000 	mla	r0, r6, r0, sl
 800fcfc:	0c02      	lsrs	r2, r0, #16
 800fcfe:	0c1b      	lsrs	r3, r3, #16
 800fd00:	fb06 2303 	mla	r3, r6, r3, r2
 800fd04:	f8de 2000 	ldr.w	r2, [lr]
 800fd08:	b280      	uxth	r0, r0
 800fd0a:	b292      	uxth	r2, r2
 800fd0c:	1a12      	subs	r2, r2, r0
 800fd0e:	445a      	add	r2, fp
 800fd10:	f8de 0000 	ldr.w	r0, [lr]
 800fd14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fd1e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fd22:	b292      	uxth	r2, r2
 800fd24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fd28:	45e1      	cmp	r9, ip
 800fd2a:	f84e 2b04 	str.w	r2, [lr], #4
 800fd2e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fd32:	d2de      	bcs.n	800fcf2 <quorem+0x42>
 800fd34:	9b00      	ldr	r3, [sp, #0]
 800fd36:	58eb      	ldr	r3, [r5, r3]
 800fd38:	b92b      	cbnz	r3, 800fd46 <quorem+0x96>
 800fd3a:	9b01      	ldr	r3, [sp, #4]
 800fd3c:	3b04      	subs	r3, #4
 800fd3e:	429d      	cmp	r5, r3
 800fd40:	461a      	mov	r2, r3
 800fd42:	d32f      	bcc.n	800fda4 <quorem+0xf4>
 800fd44:	613c      	str	r4, [r7, #16]
 800fd46:	4638      	mov	r0, r7
 800fd48:	f001 f90c 	bl	8010f64 <__mcmp>
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	db25      	blt.n	800fd9c <quorem+0xec>
 800fd50:	4629      	mov	r1, r5
 800fd52:	2000      	movs	r0, #0
 800fd54:	f858 2b04 	ldr.w	r2, [r8], #4
 800fd58:	f8d1 c000 	ldr.w	ip, [r1]
 800fd5c:	fa1f fe82 	uxth.w	lr, r2
 800fd60:	fa1f f38c 	uxth.w	r3, ip
 800fd64:	eba3 030e 	sub.w	r3, r3, lr
 800fd68:	4403      	add	r3, r0
 800fd6a:	0c12      	lsrs	r2, r2, #16
 800fd6c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fd70:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd7a:	45c1      	cmp	r9, r8
 800fd7c:	f841 3b04 	str.w	r3, [r1], #4
 800fd80:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fd84:	d2e6      	bcs.n	800fd54 <quorem+0xa4>
 800fd86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd8e:	b922      	cbnz	r2, 800fd9a <quorem+0xea>
 800fd90:	3b04      	subs	r3, #4
 800fd92:	429d      	cmp	r5, r3
 800fd94:	461a      	mov	r2, r3
 800fd96:	d30b      	bcc.n	800fdb0 <quorem+0x100>
 800fd98:	613c      	str	r4, [r7, #16]
 800fd9a:	3601      	adds	r6, #1
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	b003      	add	sp, #12
 800fda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda4:	6812      	ldr	r2, [r2, #0]
 800fda6:	3b04      	subs	r3, #4
 800fda8:	2a00      	cmp	r2, #0
 800fdaa:	d1cb      	bne.n	800fd44 <quorem+0x94>
 800fdac:	3c01      	subs	r4, #1
 800fdae:	e7c6      	b.n	800fd3e <quorem+0x8e>
 800fdb0:	6812      	ldr	r2, [r2, #0]
 800fdb2:	3b04      	subs	r3, #4
 800fdb4:	2a00      	cmp	r2, #0
 800fdb6:	d1ef      	bne.n	800fd98 <quorem+0xe8>
 800fdb8:	3c01      	subs	r4, #1
 800fdba:	e7ea      	b.n	800fd92 <quorem+0xe2>
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	e7ee      	b.n	800fd9e <quorem+0xee>

0800fdc0 <_dtoa_r>:
 800fdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc4:	69c7      	ldr	r7, [r0, #28]
 800fdc6:	b099      	sub	sp, #100	@ 0x64
 800fdc8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fdcc:	ec55 4b10 	vmov	r4, r5, d0
 800fdd0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fdd2:	9109      	str	r1, [sp, #36]	@ 0x24
 800fdd4:	4683      	mov	fp, r0
 800fdd6:	920e      	str	r2, [sp, #56]	@ 0x38
 800fdd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fdda:	b97f      	cbnz	r7, 800fdfc <_dtoa_r+0x3c>
 800fddc:	2010      	movs	r0, #16
 800fdde:	f7fe fd51 	bl	800e884 <malloc>
 800fde2:	4602      	mov	r2, r0
 800fde4:	f8cb 001c 	str.w	r0, [fp, #28]
 800fde8:	b920      	cbnz	r0, 800fdf4 <_dtoa_r+0x34>
 800fdea:	4ba7      	ldr	r3, [pc, #668]	@ (8010088 <_dtoa_r+0x2c8>)
 800fdec:	21ef      	movs	r1, #239	@ 0xef
 800fdee:	48a7      	ldr	r0, [pc, #668]	@ (801008c <_dtoa_r+0x2cc>)
 800fdf0:	f7ff ff40 	bl	800fc74 <__assert_func>
 800fdf4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fdf8:	6007      	str	r7, [r0, #0]
 800fdfa:	60c7      	str	r7, [r0, #12]
 800fdfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fe00:	6819      	ldr	r1, [r3, #0]
 800fe02:	b159      	cbz	r1, 800fe1c <_dtoa_r+0x5c>
 800fe04:	685a      	ldr	r2, [r3, #4]
 800fe06:	604a      	str	r2, [r1, #4]
 800fe08:	2301      	movs	r3, #1
 800fe0a:	4093      	lsls	r3, r2
 800fe0c:	608b      	str	r3, [r1, #8]
 800fe0e:	4658      	mov	r0, fp
 800fe10:	f000 fe24 	bl	8010a5c <_Bfree>
 800fe14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	601a      	str	r2, [r3, #0]
 800fe1c:	1e2b      	subs	r3, r5, #0
 800fe1e:	bfb9      	ittee	lt
 800fe20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fe24:	9303      	strlt	r3, [sp, #12]
 800fe26:	2300      	movge	r3, #0
 800fe28:	6033      	strge	r3, [r6, #0]
 800fe2a:	9f03      	ldr	r7, [sp, #12]
 800fe2c:	4b98      	ldr	r3, [pc, #608]	@ (8010090 <_dtoa_r+0x2d0>)
 800fe2e:	bfbc      	itt	lt
 800fe30:	2201      	movlt	r2, #1
 800fe32:	6032      	strlt	r2, [r6, #0]
 800fe34:	43bb      	bics	r3, r7
 800fe36:	d112      	bne.n	800fe5e <_dtoa_r+0x9e>
 800fe38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fe3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fe3e:	6013      	str	r3, [r2, #0]
 800fe40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe44:	4323      	orrs	r3, r4
 800fe46:	f000 854d 	beq.w	80108e4 <_dtoa_r+0xb24>
 800fe4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fe4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80100a4 <_dtoa_r+0x2e4>
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f000 854f 	beq.w	80108f4 <_dtoa_r+0xb34>
 800fe56:	f10a 0303 	add.w	r3, sl, #3
 800fe5a:	f000 bd49 	b.w	80108f0 <_dtoa_r+0xb30>
 800fe5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe62:	2200      	movs	r2, #0
 800fe64:	ec51 0b17 	vmov	r0, r1, d7
 800fe68:	2300      	movs	r3, #0
 800fe6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fe6e:	f7f0 fe03 	bl	8000a78 <__aeabi_dcmpeq>
 800fe72:	4680      	mov	r8, r0
 800fe74:	b158      	cbz	r0, 800fe8e <_dtoa_r+0xce>
 800fe76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fe78:	2301      	movs	r3, #1
 800fe7a:	6013      	str	r3, [r2, #0]
 800fe7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fe7e:	b113      	cbz	r3, 800fe86 <_dtoa_r+0xc6>
 800fe80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fe82:	4b84      	ldr	r3, [pc, #528]	@ (8010094 <_dtoa_r+0x2d4>)
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80100a8 <_dtoa_r+0x2e8>
 800fe8a:	f000 bd33 	b.w	80108f4 <_dtoa_r+0xb34>
 800fe8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fe92:	aa16      	add	r2, sp, #88	@ 0x58
 800fe94:	a917      	add	r1, sp, #92	@ 0x5c
 800fe96:	4658      	mov	r0, fp
 800fe98:	f001 f984 	bl	80111a4 <__d2b>
 800fe9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fea0:	4681      	mov	r9, r0
 800fea2:	2e00      	cmp	r6, #0
 800fea4:	d077      	beq.n	800ff96 <_dtoa_r+0x1d6>
 800fea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fea8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800feac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800feb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800feb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800feb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800febc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fec0:	4619      	mov	r1, r3
 800fec2:	2200      	movs	r2, #0
 800fec4:	4b74      	ldr	r3, [pc, #464]	@ (8010098 <_dtoa_r+0x2d8>)
 800fec6:	f7f0 f9b7 	bl	8000238 <__aeabi_dsub>
 800feca:	a369      	add	r3, pc, #420	@ (adr r3, 8010070 <_dtoa_r+0x2b0>)
 800fecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed0:	f7f0 fb6a 	bl	80005a8 <__aeabi_dmul>
 800fed4:	a368      	add	r3, pc, #416	@ (adr r3, 8010078 <_dtoa_r+0x2b8>)
 800fed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feda:	f7f0 f9af 	bl	800023c <__adddf3>
 800fede:	4604      	mov	r4, r0
 800fee0:	4630      	mov	r0, r6
 800fee2:	460d      	mov	r5, r1
 800fee4:	f7f0 faf6 	bl	80004d4 <__aeabi_i2d>
 800fee8:	a365      	add	r3, pc, #404	@ (adr r3, 8010080 <_dtoa_r+0x2c0>)
 800feea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feee:	f7f0 fb5b 	bl	80005a8 <__aeabi_dmul>
 800fef2:	4602      	mov	r2, r0
 800fef4:	460b      	mov	r3, r1
 800fef6:	4620      	mov	r0, r4
 800fef8:	4629      	mov	r1, r5
 800fefa:	f7f0 f99f 	bl	800023c <__adddf3>
 800fefe:	4604      	mov	r4, r0
 800ff00:	460d      	mov	r5, r1
 800ff02:	f7f0 fe01 	bl	8000b08 <__aeabi_d2iz>
 800ff06:	2200      	movs	r2, #0
 800ff08:	4607      	mov	r7, r0
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	4629      	mov	r1, r5
 800ff10:	f7f0 fdbc 	bl	8000a8c <__aeabi_dcmplt>
 800ff14:	b140      	cbz	r0, 800ff28 <_dtoa_r+0x168>
 800ff16:	4638      	mov	r0, r7
 800ff18:	f7f0 fadc 	bl	80004d4 <__aeabi_i2d>
 800ff1c:	4622      	mov	r2, r4
 800ff1e:	462b      	mov	r3, r5
 800ff20:	f7f0 fdaa 	bl	8000a78 <__aeabi_dcmpeq>
 800ff24:	b900      	cbnz	r0, 800ff28 <_dtoa_r+0x168>
 800ff26:	3f01      	subs	r7, #1
 800ff28:	2f16      	cmp	r7, #22
 800ff2a:	d851      	bhi.n	800ffd0 <_dtoa_r+0x210>
 800ff2c:	4b5b      	ldr	r3, [pc, #364]	@ (801009c <_dtoa_r+0x2dc>)
 800ff2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff3a:	f7f0 fda7 	bl	8000a8c <__aeabi_dcmplt>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d048      	beq.n	800ffd4 <_dtoa_r+0x214>
 800ff42:	3f01      	subs	r7, #1
 800ff44:	2300      	movs	r3, #0
 800ff46:	9312      	str	r3, [sp, #72]	@ 0x48
 800ff48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ff4a:	1b9b      	subs	r3, r3, r6
 800ff4c:	1e5a      	subs	r2, r3, #1
 800ff4e:	bf44      	itt	mi
 800ff50:	f1c3 0801 	rsbmi	r8, r3, #1
 800ff54:	2300      	movmi	r3, #0
 800ff56:	9208      	str	r2, [sp, #32]
 800ff58:	bf54      	ite	pl
 800ff5a:	f04f 0800 	movpl.w	r8, #0
 800ff5e:	9308      	strmi	r3, [sp, #32]
 800ff60:	2f00      	cmp	r7, #0
 800ff62:	db39      	blt.n	800ffd8 <_dtoa_r+0x218>
 800ff64:	9b08      	ldr	r3, [sp, #32]
 800ff66:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ff68:	443b      	add	r3, r7
 800ff6a:	9308      	str	r3, [sp, #32]
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff72:	2b09      	cmp	r3, #9
 800ff74:	d864      	bhi.n	8010040 <_dtoa_r+0x280>
 800ff76:	2b05      	cmp	r3, #5
 800ff78:	bfc4      	itt	gt
 800ff7a:	3b04      	subgt	r3, #4
 800ff7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ff7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff80:	f1a3 0302 	sub.w	r3, r3, #2
 800ff84:	bfcc      	ite	gt
 800ff86:	2400      	movgt	r4, #0
 800ff88:	2401      	movle	r4, #1
 800ff8a:	2b03      	cmp	r3, #3
 800ff8c:	d863      	bhi.n	8010056 <_dtoa_r+0x296>
 800ff8e:	e8df f003 	tbb	[pc, r3]
 800ff92:	372a      	.short	0x372a
 800ff94:	5535      	.short	0x5535
 800ff96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ff9a:	441e      	add	r6, r3
 800ff9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ffa0:	2b20      	cmp	r3, #32
 800ffa2:	bfc1      	itttt	gt
 800ffa4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ffa8:	409f      	lslgt	r7, r3
 800ffaa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ffae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ffb2:	bfd6      	itet	le
 800ffb4:	f1c3 0320 	rsble	r3, r3, #32
 800ffb8:	ea47 0003 	orrgt.w	r0, r7, r3
 800ffbc:	fa04 f003 	lslle.w	r0, r4, r3
 800ffc0:	f7f0 fa78 	bl	80004b4 <__aeabi_ui2d>
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ffca:	3e01      	subs	r6, #1
 800ffcc:	9214      	str	r2, [sp, #80]	@ 0x50
 800ffce:	e777      	b.n	800fec0 <_dtoa_r+0x100>
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	e7b8      	b.n	800ff46 <_dtoa_r+0x186>
 800ffd4:	9012      	str	r0, [sp, #72]	@ 0x48
 800ffd6:	e7b7      	b.n	800ff48 <_dtoa_r+0x188>
 800ffd8:	427b      	negs	r3, r7
 800ffda:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffdc:	2300      	movs	r3, #0
 800ffde:	eba8 0807 	sub.w	r8, r8, r7
 800ffe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ffe4:	e7c4      	b.n	800ff70 <_dtoa_r+0x1b0>
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ffea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	dc35      	bgt.n	801005c <_dtoa_r+0x29c>
 800fff0:	2301      	movs	r3, #1
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	9307      	str	r3, [sp, #28]
 800fff6:	461a      	mov	r2, r3
 800fff8:	920e      	str	r2, [sp, #56]	@ 0x38
 800fffa:	e00b      	b.n	8010014 <_dtoa_r+0x254>
 800fffc:	2301      	movs	r3, #1
 800fffe:	e7f3      	b.n	800ffe8 <_dtoa_r+0x228>
 8010000:	2300      	movs	r3, #0
 8010002:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010006:	18fb      	adds	r3, r7, r3
 8010008:	9300      	str	r3, [sp, #0]
 801000a:	3301      	adds	r3, #1
 801000c:	2b01      	cmp	r3, #1
 801000e:	9307      	str	r3, [sp, #28]
 8010010:	bfb8      	it	lt
 8010012:	2301      	movlt	r3, #1
 8010014:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010018:	2100      	movs	r1, #0
 801001a:	2204      	movs	r2, #4
 801001c:	f102 0514 	add.w	r5, r2, #20
 8010020:	429d      	cmp	r5, r3
 8010022:	d91f      	bls.n	8010064 <_dtoa_r+0x2a4>
 8010024:	6041      	str	r1, [r0, #4]
 8010026:	4658      	mov	r0, fp
 8010028:	f000 fcd8 	bl	80109dc <_Balloc>
 801002c:	4682      	mov	sl, r0
 801002e:	2800      	cmp	r0, #0
 8010030:	d13c      	bne.n	80100ac <_dtoa_r+0x2ec>
 8010032:	4b1b      	ldr	r3, [pc, #108]	@ (80100a0 <_dtoa_r+0x2e0>)
 8010034:	4602      	mov	r2, r0
 8010036:	f240 11af 	movw	r1, #431	@ 0x1af
 801003a:	e6d8      	b.n	800fdee <_dtoa_r+0x2e>
 801003c:	2301      	movs	r3, #1
 801003e:	e7e0      	b.n	8010002 <_dtoa_r+0x242>
 8010040:	2401      	movs	r4, #1
 8010042:	2300      	movs	r3, #0
 8010044:	9309      	str	r3, [sp, #36]	@ 0x24
 8010046:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010048:	f04f 33ff 	mov.w	r3, #4294967295
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	9307      	str	r3, [sp, #28]
 8010050:	2200      	movs	r2, #0
 8010052:	2312      	movs	r3, #18
 8010054:	e7d0      	b.n	800fff8 <_dtoa_r+0x238>
 8010056:	2301      	movs	r3, #1
 8010058:	930b      	str	r3, [sp, #44]	@ 0x2c
 801005a:	e7f5      	b.n	8010048 <_dtoa_r+0x288>
 801005c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801005e:	9300      	str	r3, [sp, #0]
 8010060:	9307      	str	r3, [sp, #28]
 8010062:	e7d7      	b.n	8010014 <_dtoa_r+0x254>
 8010064:	3101      	adds	r1, #1
 8010066:	0052      	lsls	r2, r2, #1
 8010068:	e7d8      	b.n	801001c <_dtoa_r+0x25c>
 801006a:	bf00      	nop
 801006c:	f3af 8000 	nop.w
 8010070:	636f4361 	.word	0x636f4361
 8010074:	3fd287a7 	.word	0x3fd287a7
 8010078:	8b60c8b3 	.word	0x8b60c8b3
 801007c:	3fc68a28 	.word	0x3fc68a28
 8010080:	509f79fb 	.word	0x509f79fb
 8010084:	3fd34413 	.word	0x3fd34413
 8010088:	08013682 	.word	0x08013682
 801008c:	08013699 	.word	0x08013699
 8010090:	7ff00000 	.word	0x7ff00000
 8010094:	08013611 	.word	0x08013611
 8010098:	3ff80000 	.word	0x3ff80000
 801009c:	08013790 	.word	0x08013790
 80100a0:	080136f1 	.word	0x080136f1
 80100a4:	0801367e 	.word	0x0801367e
 80100a8:	08013610 	.word	0x08013610
 80100ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80100b0:	6018      	str	r0, [r3, #0]
 80100b2:	9b07      	ldr	r3, [sp, #28]
 80100b4:	2b0e      	cmp	r3, #14
 80100b6:	f200 80a4 	bhi.w	8010202 <_dtoa_r+0x442>
 80100ba:	2c00      	cmp	r4, #0
 80100bc:	f000 80a1 	beq.w	8010202 <_dtoa_r+0x442>
 80100c0:	2f00      	cmp	r7, #0
 80100c2:	dd33      	ble.n	801012c <_dtoa_r+0x36c>
 80100c4:	4bad      	ldr	r3, [pc, #692]	@ (801037c <_dtoa_r+0x5bc>)
 80100c6:	f007 020f 	and.w	r2, r7, #15
 80100ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100ce:	ed93 7b00 	vldr	d7, [r3]
 80100d2:	05f8      	lsls	r0, r7, #23
 80100d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80100d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80100dc:	d516      	bpl.n	801010c <_dtoa_r+0x34c>
 80100de:	4ba8      	ldr	r3, [pc, #672]	@ (8010380 <_dtoa_r+0x5c0>)
 80100e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80100e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80100e8:	f7f0 fb88 	bl	80007fc <__aeabi_ddiv>
 80100ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100f0:	f004 040f 	and.w	r4, r4, #15
 80100f4:	2603      	movs	r6, #3
 80100f6:	4da2      	ldr	r5, [pc, #648]	@ (8010380 <_dtoa_r+0x5c0>)
 80100f8:	b954      	cbnz	r4, 8010110 <_dtoa_r+0x350>
 80100fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010102:	f7f0 fb7b 	bl	80007fc <__aeabi_ddiv>
 8010106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801010a:	e028      	b.n	801015e <_dtoa_r+0x39e>
 801010c:	2602      	movs	r6, #2
 801010e:	e7f2      	b.n	80100f6 <_dtoa_r+0x336>
 8010110:	07e1      	lsls	r1, r4, #31
 8010112:	d508      	bpl.n	8010126 <_dtoa_r+0x366>
 8010114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010118:	e9d5 2300 	ldrd	r2, r3, [r5]
 801011c:	f7f0 fa44 	bl	80005a8 <__aeabi_dmul>
 8010120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010124:	3601      	adds	r6, #1
 8010126:	1064      	asrs	r4, r4, #1
 8010128:	3508      	adds	r5, #8
 801012a:	e7e5      	b.n	80100f8 <_dtoa_r+0x338>
 801012c:	f000 80d2 	beq.w	80102d4 <_dtoa_r+0x514>
 8010130:	427c      	negs	r4, r7
 8010132:	4b92      	ldr	r3, [pc, #584]	@ (801037c <_dtoa_r+0x5bc>)
 8010134:	4d92      	ldr	r5, [pc, #584]	@ (8010380 <_dtoa_r+0x5c0>)
 8010136:	f004 020f 	and.w	r2, r4, #15
 801013a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801013e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010142:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010146:	f7f0 fa2f 	bl	80005a8 <__aeabi_dmul>
 801014a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801014e:	1124      	asrs	r4, r4, #4
 8010150:	2300      	movs	r3, #0
 8010152:	2602      	movs	r6, #2
 8010154:	2c00      	cmp	r4, #0
 8010156:	f040 80b2 	bne.w	80102be <_dtoa_r+0x4fe>
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1d3      	bne.n	8010106 <_dtoa_r+0x346>
 801015e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010160:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010164:	2b00      	cmp	r3, #0
 8010166:	f000 80b7 	beq.w	80102d8 <_dtoa_r+0x518>
 801016a:	4b86      	ldr	r3, [pc, #536]	@ (8010384 <_dtoa_r+0x5c4>)
 801016c:	2200      	movs	r2, #0
 801016e:	4620      	mov	r0, r4
 8010170:	4629      	mov	r1, r5
 8010172:	f7f0 fc8b 	bl	8000a8c <__aeabi_dcmplt>
 8010176:	2800      	cmp	r0, #0
 8010178:	f000 80ae 	beq.w	80102d8 <_dtoa_r+0x518>
 801017c:	9b07      	ldr	r3, [sp, #28]
 801017e:	2b00      	cmp	r3, #0
 8010180:	f000 80aa 	beq.w	80102d8 <_dtoa_r+0x518>
 8010184:	9b00      	ldr	r3, [sp, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	dd37      	ble.n	80101fa <_dtoa_r+0x43a>
 801018a:	1e7b      	subs	r3, r7, #1
 801018c:	9304      	str	r3, [sp, #16]
 801018e:	4620      	mov	r0, r4
 8010190:	4b7d      	ldr	r3, [pc, #500]	@ (8010388 <_dtoa_r+0x5c8>)
 8010192:	2200      	movs	r2, #0
 8010194:	4629      	mov	r1, r5
 8010196:	f7f0 fa07 	bl	80005a8 <__aeabi_dmul>
 801019a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801019e:	9c00      	ldr	r4, [sp, #0]
 80101a0:	3601      	adds	r6, #1
 80101a2:	4630      	mov	r0, r6
 80101a4:	f7f0 f996 	bl	80004d4 <__aeabi_i2d>
 80101a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101ac:	f7f0 f9fc 	bl	80005a8 <__aeabi_dmul>
 80101b0:	4b76      	ldr	r3, [pc, #472]	@ (801038c <_dtoa_r+0x5cc>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	f7f0 f842 	bl	800023c <__adddf3>
 80101b8:	4605      	mov	r5, r0
 80101ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80101be:	2c00      	cmp	r4, #0
 80101c0:	f040 808d 	bne.w	80102de <_dtoa_r+0x51e>
 80101c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101c8:	4b71      	ldr	r3, [pc, #452]	@ (8010390 <_dtoa_r+0x5d0>)
 80101ca:	2200      	movs	r2, #0
 80101cc:	f7f0 f834 	bl	8000238 <__aeabi_dsub>
 80101d0:	4602      	mov	r2, r0
 80101d2:	460b      	mov	r3, r1
 80101d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80101d8:	462a      	mov	r2, r5
 80101da:	4633      	mov	r3, r6
 80101dc:	f7f0 fc74 	bl	8000ac8 <__aeabi_dcmpgt>
 80101e0:	2800      	cmp	r0, #0
 80101e2:	f040 828b 	bne.w	80106fc <_dtoa_r+0x93c>
 80101e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101ea:	462a      	mov	r2, r5
 80101ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80101f0:	f7f0 fc4c 	bl	8000a8c <__aeabi_dcmplt>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	f040 8128 	bne.w	801044a <_dtoa_r+0x68a>
 80101fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80101fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010202:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010204:	2b00      	cmp	r3, #0
 8010206:	f2c0 815a 	blt.w	80104be <_dtoa_r+0x6fe>
 801020a:	2f0e      	cmp	r7, #14
 801020c:	f300 8157 	bgt.w	80104be <_dtoa_r+0x6fe>
 8010210:	4b5a      	ldr	r3, [pc, #360]	@ (801037c <_dtoa_r+0x5bc>)
 8010212:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010216:	ed93 7b00 	vldr	d7, [r3]
 801021a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801021c:	2b00      	cmp	r3, #0
 801021e:	ed8d 7b00 	vstr	d7, [sp]
 8010222:	da03      	bge.n	801022c <_dtoa_r+0x46c>
 8010224:	9b07      	ldr	r3, [sp, #28]
 8010226:	2b00      	cmp	r3, #0
 8010228:	f340 8101 	ble.w	801042e <_dtoa_r+0x66e>
 801022c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010230:	4656      	mov	r6, sl
 8010232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010236:	4620      	mov	r0, r4
 8010238:	4629      	mov	r1, r5
 801023a:	f7f0 fadf 	bl	80007fc <__aeabi_ddiv>
 801023e:	f7f0 fc63 	bl	8000b08 <__aeabi_d2iz>
 8010242:	4680      	mov	r8, r0
 8010244:	f7f0 f946 	bl	80004d4 <__aeabi_i2d>
 8010248:	e9dd 2300 	ldrd	r2, r3, [sp]
 801024c:	f7f0 f9ac 	bl	80005a8 <__aeabi_dmul>
 8010250:	4602      	mov	r2, r0
 8010252:	460b      	mov	r3, r1
 8010254:	4620      	mov	r0, r4
 8010256:	4629      	mov	r1, r5
 8010258:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801025c:	f7ef ffec 	bl	8000238 <__aeabi_dsub>
 8010260:	f806 4b01 	strb.w	r4, [r6], #1
 8010264:	9d07      	ldr	r5, [sp, #28]
 8010266:	eba6 040a 	sub.w	r4, r6, sl
 801026a:	42a5      	cmp	r5, r4
 801026c:	4602      	mov	r2, r0
 801026e:	460b      	mov	r3, r1
 8010270:	f040 8117 	bne.w	80104a2 <_dtoa_r+0x6e2>
 8010274:	f7ef ffe2 	bl	800023c <__adddf3>
 8010278:	e9dd 2300 	ldrd	r2, r3, [sp]
 801027c:	4604      	mov	r4, r0
 801027e:	460d      	mov	r5, r1
 8010280:	f7f0 fc22 	bl	8000ac8 <__aeabi_dcmpgt>
 8010284:	2800      	cmp	r0, #0
 8010286:	f040 80f9 	bne.w	801047c <_dtoa_r+0x6bc>
 801028a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801028e:	4620      	mov	r0, r4
 8010290:	4629      	mov	r1, r5
 8010292:	f7f0 fbf1 	bl	8000a78 <__aeabi_dcmpeq>
 8010296:	b118      	cbz	r0, 80102a0 <_dtoa_r+0x4e0>
 8010298:	f018 0f01 	tst.w	r8, #1
 801029c:	f040 80ee 	bne.w	801047c <_dtoa_r+0x6bc>
 80102a0:	4649      	mov	r1, r9
 80102a2:	4658      	mov	r0, fp
 80102a4:	f000 fbda 	bl	8010a5c <_Bfree>
 80102a8:	2300      	movs	r3, #0
 80102aa:	7033      	strb	r3, [r6, #0]
 80102ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80102ae:	3701      	adds	r7, #1
 80102b0:	601f      	str	r7, [r3, #0]
 80102b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	f000 831d 	beq.w	80108f4 <_dtoa_r+0xb34>
 80102ba:	601e      	str	r6, [r3, #0]
 80102bc:	e31a      	b.n	80108f4 <_dtoa_r+0xb34>
 80102be:	07e2      	lsls	r2, r4, #31
 80102c0:	d505      	bpl.n	80102ce <_dtoa_r+0x50e>
 80102c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80102c6:	f7f0 f96f 	bl	80005a8 <__aeabi_dmul>
 80102ca:	3601      	adds	r6, #1
 80102cc:	2301      	movs	r3, #1
 80102ce:	1064      	asrs	r4, r4, #1
 80102d0:	3508      	adds	r5, #8
 80102d2:	e73f      	b.n	8010154 <_dtoa_r+0x394>
 80102d4:	2602      	movs	r6, #2
 80102d6:	e742      	b.n	801015e <_dtoa_r+0x39e>
 80102d8:	9c07      	ldr	r4, [sp, #28]
 80102da:	9704      	str	r7, [sp, #16]
 80102dc:	e761      	b.n	80101a2 <_dtoa_r+0x3e2>
 80102de:	4b27      	ldr	r3, [pc, #156]	@ (801037c <_dtoa_r+0x5bc>)
 80102e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80102e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80102e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80102ea:	4454      	add	r4, sl
 80102ec:	2900      	cmp	r1, #0
 80102ee:	d053      	beq.n	8010398 <_dtoa_r+0x5d8>
 80102f0:	4928      	ldr	r1, [pc, #160]	@ (8010394 <_dtoa_r+0x5d4>)
 80102f2:	2000      	movs	r0, #0
 80102f4:	f7f0 fa82 	bl	80007fc <__aeabi_ddiv>
 80102f8:	4633      	mov	r3, r6
 80102fa:	462a      	mov	r2, r5
 80102fc:	f7ef ff9c 	bl	8000238 <__aeabi_dsub>
 8010300:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010304:	4656      	mov	r6, sl
 8010306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801030a:	f7f0 fbfd 	bl	8000b08 <__aeabi_d2iz>
 801030e:	4605      	mov	r5, r0
 8010310:	f7f0 f8e0 	bl	80004d4 <__aeabi_i2d>
 8010314:	4602      	mov	r2, r0
 8010316:	460b      	mov	r3, r1
 8010318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801031c:	f7ef ff8c 	bl	8000238 <__aeabi_dsub>
 8010320:	3530      	adds	r5, #48	@ 0x30
 8010322:	4602      	mov	r2, r0
 8010324:	460b      	mov	r3, r1
 8010326:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801032a:	f806 5b01 	strb.w	r5, [r6], #1
 801032e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010332:	f7f0 fbab 	bl	8000a8c <__aeabi_dcmplt>
 8010336:	2800      	cmp	r0, #0
 8010338:	d171      	bne.n	801041e <_dtoa_r+0x65e>
 801033a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801033e:	4911      	ldr	r1, [pc, #68]	@ (8010384 <_dtoa_r+0x5c4>)
 8010340:	2000      	movs	r0, #0
 8010342:	f7ef ff79 	bl	8000238 <__aeabi_dsub>
 8010346:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801034a:	f7f0 fb9f 	bl	8000a8c <__aeabi_dcmplt>
 801034e:	2800      	cmp	r0, #0
 8010350:	f040 8095 	bne.w	801047e <_dtoa_r+0x6be>
 8010354:	42a6      	cmp	r6, r4
 8010356:	f43f af50 	beq.w	80101fa <_dtoa_r+0x43a>
 801035a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801035e:	4b0a      	ldr	r3, [pc, #40]	@ (8010388 <_dtoa_r+0x5c8>)
 8010360:	2200      	movs	r2, #0
 8010362:	f7f0 f921 	bl	80005a8 <__aeabi_dmul>
 8010366:	4b08      	ldr	r3, [pc, #32]	@ (8010388 <_dtoa_r+0x5c8>)
 8010368:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801036c:	2200      	movs	r2, #0
 801036e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010372:	f7f0 f919 	bl	80005a8 <__aeabi_dmul>
 8010376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801037a:	e7c4      	b.n	8010306 <_dtoa_r+0x546>
 801037c:	08013790 	.word	0x08013790
 8010380:	08013768 	.word	0x08013768
 8010384:	3ff00000 	.word	0x3ff00000
 8010388:	40240000 	.word	0x40240000
 801038c:	401c0000 	.word	0x401c0000
 8010390:	40140000 	.word	0x40140000
 8010394:	3fe00000 	.word	0x3fe00000
 8010398:	4631      	mov	r1, r6
 801039a:	4628      	mov	r0, r5
 801039c:	f7f0 f904 	bl	80005a8 <__aeabi_dmul>
 80103a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80103a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80103a6:	4656      	mov	r6, sl
 80103a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103ac:	f7f0 fbac 	bl	8000b08 <__aeabi_d2iz>
 80103b0:	4605      	mov	r5, r0
 80103b2:	f7f0 f88f 	bl	80004d4 <__aeabi_i2d>
 80103b6:	4602      	mov	r2, r0
 80103b8:	460b      	mov	r3, r1
 80103ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103be:	f7ef ff3b 	bl	8000238 <__aeabi_dsub>
 80103c2:	3530      	adds	r5, #48	@ 0x30
 80103c4:	f806 5b01 	strb.w	r5, [r6], #1
 80103c8:	4602      	mov	r2, r0
 80103ca:	460b      	mov	r3, r1
 80103cc:	42a6      	cmp	r6, r4
 80103ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80103d2:	f04f 0200 	mov.w	r2, #0
 80103d6:	d124      	bne.n	8010422 <_dtoa_r+0x662>
 80103d8:	4bac      	ldr	r3, [pc, #688]	@ (801068c <_dtoa_r+0x8cc>)
 80103da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80103de:	f7ef ff2d 	bl	800023c <__adddf3>
 80103e2:	4602      	mov	r2, r0
 80103e4:	460b      	mov	r3, r1
 80103e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103ea:	f7f0 fb6d 	bl	8000ac8 <__aeabi_dcmpgt>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	d145      	bne.n	801047e <_dtoa_r+0x6be>
 80103f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80103f6:	49a5      	ldr	r1, [pc, #660]	@ (801068c <_dtoa_r+0x8cc>)
 80103f8:	2000      	movs	r0, #0
 80103fa:	f7ef ff1d 	bl	8000238 <__aeabi_dsub>
 80103fe:	4602      	mov	r2, r0
 8010400:	460b      	mov	r3, r1
 8010402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010406:	f7f0 fb41 	bl	8000a8c <__aeabi_dcmplt>
 801040a:	2800      	cmp	r0, #0
 801040c:	f43f aef5 	beq.w	80101fa <_dtoa_r+0x43a>
 8010410:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010412:	1e73      	subs	r3, r6, #1
 8010414:	9315      	str	r3, [sp, #84]	@ 0x54
 8010416:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801041a:	2b30      	cmp	r3, #48	@ 0x30
 801041c:	d0f8      	beq.n	8010410 <_dtoa_r+0x650>
 801041e:	9f04      	ldr	r7, [sp, #16]
 8010420:	e73e      	b.n	80102a0 <_dtoa_r+0x4e0>
 8010422:	4b9b      	ldr	r3, [pc, #620]	@ (8010690 <_dtoa_r+0x8d0>)
 8010424:	f7f0 f8c0 	bl	80005a8 <__aeabi_dmul>
 8010428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801042c:	e7bc      	b.n	80103a8 <_dtoa_r+0x5e8>
 801042e:	d10c      	bne.n	801044a <_dtoa_r+0x68a>
 8010430:	4b98      	ldr	r3, [pc, #608]	@ (8010694 <_dtoa_r+0x8d4>)
 8010432:	2200      	movs	r2, #0
 8010434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010438:	f7f0 f8b6 	bl	80005a8 <__aeabi_dmul>
 801043c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010440:	f7f0 fb38 	bl	8000ab4 <__aeabi_dcmpge>
 8010444:	2800      	cmp	r0, #0
 8010446:	f000 8157 	beq.w	80106f8 <_dtoa_r+0x938>
 801044a:	2400      	movs	r4, #0
 801044c:	4625      	mov	r5, r4
 801044e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010450:	43db      	mvns	r3, r3
 8010452:	9304      	str	r3, [sp, #16]
 8010454:	4656      	mov	r6, sl
 8010456:	2700      	movs	r7, #0
 8010458:	4621      	mov	r1, r4
 801045a:	4658      	mov	r0, fp
 801045c:	f000 fafe 	bl	8010a5c <_Bfree>
 8010460:	2d00      	cmp	r5, #0
 8010462:	d0dc      	beq.n	801041e <_dtoa_r+0x65e>
 8010464:	b12f      	cbz	r7, 8010472 <_dtoa_r+0x6b2>
 8010466:	42af      	cmp	r7, r5
 8010468:	d003      	beq.n	8010472 <_dtoa_r+0x6b2>
 801046a:	4639      	mov	r1, r7
 801046c:	4658      	mov	r0, fp
 801046e:	f000 faf5 	bl	8010a5c <_Bfree>
 8010472:	4629      	mov	r1, r5
 8010474:	4658      	mov	r0, fp
 8010476:	f000 faf1 	bl	8010a5c <_Bfree>
 801047a:	e7d0      	b.n	801041e <_dtoa_r+0x65e>
 801047c:	9704      	str	r7, [sp, #16]
 801047e:	4633      	mov	r3, r6
 8010480:	461e      	mov	r6, r3
 8010482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010486:	2a39      	cmp	r2, #57	@ 0x39
 8010488:	d107      	bne.n	801049a <_dtoa_r+0x6da>
 801048a:	459a      	cmp	sl, r3
 801048c:	d1f8      	bne.n	8010480 <_dtoa_r+0x6c0>
 801048e:	9a04      	ldr	r2, [sp, #16]
 8010490:	3201      	adds	r2, #1
 8010492:	9204      	str	r2, [sp, #16]
 8010494:	2230      	movs	r2, #48	@ 0x30
 8010496:	f88a 2000 	strb.w	r2, [sl]
 801049a:	781a      	ldrb	r2, [r3, #0]
 801049c:	3201      	adds	r2, #1
 801049e:	701a      	strb	r2, [r3, #0]
 80104a0:	e7bd      	b.n	801041e <_dtoa_r+0x65e>
 80104a2:	4b7b      	ldr	r3, [pc, #492]	@ (8010690 <_dtoa_r+0x8d0>)
 80104a4:	2200      	movs	r2, #0
 80104a6:	f7f0 f87f 	bl	80005a8 <__aeabi_dmul>
 80104aa:	2200      	movs	r2, #0
 80104ac:	2300      	movs	r3, #0
 80104ae:	4604      	mov	r4, r0
 80104b0:	460d      	mov	r5, r1
 80104b2:	f7f0 fae1 	bl	8000a78 <__aeabi_dcmpeq>
 80104b6:	2800      	cmp	r0, #0
 80104b8:	f43f aebb 	beq.w	8010232 <_dtoa_r+0x472>
 80104bc:	e6f0      	b.n	80102a0 <_dtoa_r+0x4e0>
 80104be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80104c0:	2a00      	cmp	r2, #0
 80104c2:	f000 80db 	beq.w	801067c <_dtoa_r+0x8bc>
 80104c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104c8:	2a01      	cmp	r2, #1
 80104ca:	f300 80bf 	bgt.w	801064c <_dtoa_r+0x88c>
 80104ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80104d0:	2a00      	cmp	r2, #0
 80104d2:	f000 80b7 	beq.w	8010644 <_dtoa_r+0x884>
 80104d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80104da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80104dc:	4646      	mov	r6, r8
 80104de:	9a08      	ldr	r2, [sp, #32]
 80104e0:	2101      	movs	r1, #1
 80104e2:	441a      	add	r2, r3
 80104e4:	4658      	mov	r0, fp
 80104e6:	4498      	add	r8, r3
 80104e8:	9208      	str	r2, [sp, #32]
 80104ea:	f000 fbb5 	bl	8010c58 <__i2b>
 80104ee:	4605      	mov	r5, r0
 80104f0:	b15e      	cbz	r6, 801050a <_dtoa_r+0x74a>
 80104f2:	9b08      	ldr	r3, [sp, #32]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	dd08      	ble.n	801050a <_dtoa_r+0x74a>
 80104f8:	42b3      	cmp	r3, r6
 80104fa:	9a08      	ldr	r2, [sp, #32]
 80104fc:	bfa8      	it	ge
 80104fe:	4633      	movge	r3, r6
 8010500:	eba8 0803 	sub.w	r8, r8, r3
 8010504:	1af6      	subs	r6, r6, r3
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	9308      	str	r3, [sp, #32]
 801050a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801050c:	b1f3      	cbz	r3, 801054c <_dtoa_r+0x78c>
 801050e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010510:	2b00      	cmp	r3, #0
 8010512:	f000 80b7 	beq.w	8010684 <_dtoa_r+0x8c4>
 8010516:	b18c      	cbz	r4, 801053c <_dtoa_r+0x77c>
 8010518:	4629      	mov	r1, r5
 801051a:	4622      	mov	r2, r4
 801051c:	4658      	mov	r0, fp
 801051e:	f000 fc5b 	bl	8010dd8 <__pow5mult>
 8010522:	464a      	mov	r2, r9
 8010524:	4601      	mov	r1, r0
 8010526:	4605      	mov	r5, r0
 8010528:	4658      	mov	r0, fp
 801052a:	f000 fbab 	bl	8010c84 <__multiply>
 801052e:	4649      	mov	r1, r9
 8010530:	9004      	str	r0, [sp, #16]
 8010532:	4658      	mov	r0, fp
 8010534:	f000 fa92 	bl	8010a5c <_Bfree>
 8010538:	9b04      	ldr	r3, [sp, #16]
 801053a:	4699      	mov	r9, r3
 801053c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801053e:	1b1a      	subs	r2, r3, r4
 8010540:	d004      	beq.n	801054c <_dtoa_r+0x78c>
 8010542:	4649      	mov	r1, r9
 8010544:	4658      	mov	r0, fp
 8010546:	f000 fc47 	bl	8010dd8 <__pow5mult>
 801054a:	4681      	mov	r9, r0
 801054c:	2101      	movs	r1, #1
 801054e:	4658      	mov	r0, fp
 8010550:	f000 fb82 	bl	8010c58 <__i2b>
 8010554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010556:	4604      	mov	r4, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 81cf 	beq.w	80108fc <_dtoa_r+0xb3c>
 801055e:	461a      	mov	r2, r3
 8010560:	4601      	mov	r1, r0
 8010562:	4658      	mov	r0, fp
 8010564:	f000 fc38 	bl	8010dd8 <__pow5mult>
 8010568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801056a:	2b01      	cmp	r3, #1
 801056c:	4604      	mov	r4, r0
 801056e:	f300 8095 	bgt.w	801069c <_dtoa_r+0x8dc>
 8010572:	9b02      	ldr	r3, [sp, #8]
 8010574:	2b00      	cmp	r3, #0
 8010576:	f040 8087 	bne.w	8010688 <_dtoa_r+0x8c8>
 801057a:	9b03      	ldr	r3, [sp, #12]
 801057c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010580:	2b00      	cmp	r3, #0
 8010582:	f040 8089 	bne.w	8010698 <_dtoa_r+0x8d8>
 8010586:	9b03      	ldr	r3, [sp, #12]
 8010588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801058c:	0d1b      	lsrs	r3, r3, #20
 801058e:	051b      	lsls	r3, r3, #20
 8010590:	b12b      	cbz	r3, 801059e <_dtoa_r+0x7de>
 8010592:	9b08      	ldr	r3, [sp, #32]
 8010594:	3301      	adds	r3, #1
 8010596:	9308      	str	r3, [sp, #32]
 8010598:	f108 0801 	add.w	r8, r8, #1
 801059c:	2301      	movs	r3, #1
 801059e:	930a      	str	r3, [sp, #40]	@ 0x28
 80105a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	f000 81b0 	beq.w	8010908 <_dtoa_r+0xb48>
 80105a8:	6923      	ldr	r3, [r4, #16]
 80105aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105ae:	6918      	ldr	r0, [r3, #16]
 80105b0:	f000 fb06 	bl	8010bc0 <__hi0bits>
 80105b4:	f1c0 0020 	rsb	r0, r0, #32
 80105b8:	9b08      	ldr	r3, [sp, #32]
 80105ba:	4418      	add	r0, r3
 80105bc:	f010 001f 	ands.w	r0, r0, #31
 80105c0:	d077      	beq.n	80106b2 <_dtoa_r+0x8f2>
 80105c2:	f1c0 0320 	rsb	r3, r0, #32
 80105c6:	2b04      	cmp	r3, #4
 80105c8:	dd6b      	ble.n	80106a2 <_dtoa_r+0x8e2>
 80105ca:	9b08      	ldr	r3, [sp, #32]
 80105cc:	f1c0 001c 	rsb	r0, r0, #28
 80105d0:	4403      	add	r3, r0
 80105d2:	4480      	add	r8, r0
 80105d4:	4406      	add	r6, r0
 80105d6:	9308      	str	r3, [sp, #32]
 80105d8:	f1b8 0f00 	cmp.w	r8, #0
 80105dc:	dd05      	ble.n	80105ea <_dtoa_r+0x82a>
 80105de:	4649      	mov	r1, r9
 80105e0:	4642      	mov	r2, r8
 80105e2:	4658      	mov	r0, fp
 80105e4:	f000 fc52 	bl	8010e8c <__lshift>
 80105e8:	4681      	mov	r9, r0
 80105ea:	9b08      	ldr	r3, [sp, #32]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	dd05      	ble.n	80105fc <_dtoa_r+0x83c>
 80105f0:	4621      	mov	r1, r4
 80105f2:	461a      	mov	r2, r3
 80105f4:	4658      	mov	r0, fp
 80105f6:	f000 fc49 	bl	8010e8c <__lshift>
 80105fa:	4604      	mov	r4, r0
 80105fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d059      	beq.n	80106b6 <_dtoa_r+0x8f6>
 8010602:	4621      	mov	r1, r4
 8010604:	4648      	mov	r0, r9
 8010606:	f000 fcad 	bl	8010f64 <__mcmp>
 801060a:	2800      	cmp	r0, #0
 801060c:	da53      	bge.n	80106b6 <_dtoa_r+0x8f6>
 801060e:	1e7b      	subs	r3, r7, #1
 8010610:	9304      	str	r3, [sp, #16]
 8010612:	4649      	mov	r1, r9
 8010614:	2300      	movs	r3, #0
 8010616:	220a      	movs	r2, #10
 8010618:	4658      	mov	r0, fp
 801061a:	f000 fa41 	bl	8010aa0 <__multadd>
 801061e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010620:	4681      	mov	r9, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	f000 8172 	beq.w	801090c <_dtoa_r+0xb4c>
 8010628:	2300      	movs	r3, #0
 801062a:	4629      	mov	r1, r5
 801062c:	220a      	movs	r2, #10
 801062e:	4658      	mov	r0, fp
 8010630:	f000 fa36 	bl	8010aa0 <__multadd>
 8010634:	9b00      	ldr	r3, [sp, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	4605      	mov	r5, r0
 801063a:	dc67      	bgt.n	801070c <_dtoa_r+0x94c>
 801063c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801063e:	2b02      	cmp	r3, #2
 8010640:	dc41      	bgt.n	80106c6 <_dtoa_r+0x906>
 8010642:	e063      	b.n	801070c <_dtoa_r+0x94c>
 8010644:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010646:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801064a:	e746      	b.n	80104da <_dtoa_r+0x71a>
 801064c:	9b07      	ldr	r3, [sp, #28]
 801064e:	1e5c      	subs	r4, r3, #1
 8010650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010652:	42a3      	cmp	r3, r4
 8010654:	bfbf      	itttt	lt
 8010656:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010658:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801065a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801065c:	1ae3      	sublt	r3, r4, r3
 801065e:	bfb4      	ite	lt
 8010660:	18d2      	addlt	r2, r2, r3
 8010662:	1b1c      	subge	r4, r3, r4
 8010664:	9b07      	ldr	r3, [sp, #28]
 8010666:	bfbc      	itt	lt
 8010668:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801066a:	2400      	movlt	r4, #0
 801066c:	2b00      	cmp	r3, #0
 801066e:	bfb5      	itete	lt
 8010670:	eba8 0603 	sublt.w	r6, r8, r3
 8010674:	9b07      	ldrge	r3, [sp, #28]
 8010676:	2300      	movlt	r3, #0
 8010678:	4646      	movge	r6, r8
 801067a:	e730      	b.n	80104de <_dtoa_r+0x71e>
 801067c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801067e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010680:	4646      	mov	r6, r8
 8010682:	e735      	b.n	80104f0 <_dtoa_r+0x730>
 8010684:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010686:	e75c      	b.n	8010542 <_dtoa_r+0x782>
 8010688:	2300      	movs	r3, #0
 801068a:	e788      	b.n	801059e <_dtoa_r+0x7de>
 801068c:	3fe00000 	.word	0x3fe00000
 8010690:	40240000 	.word	0x40240000
 8010694:	40140000 	.word	0x40140000
 8010698:	9b02      	ldr	r3, [sp, #8]
 801069a:	e780      	b.n	801059e <_dtoa_r+0x7de>
 801069c:	2300      	movs	r3, #0
 801069e:	930a      	str	r3, [sp, #40]	@ 0x28
 80106a0:	e782      	b.n	80105a8 <_dtoa_r+0x7e8>
 80106a2:	d099      	beq.n	80105d8 <_dtoa_r+0x818>
 80106a4:	9a08      	ldr	r2, [sp, #32]
 80106a6:	331c      	adds	r3, #28
 80106a8:	441a      	add	r2, r3
 80106aa:	4498      	add	r8, r3
 80106ac:	441e      	add	r6, r3
 80106ae:	9208      	str	r2, [sp, #32]
 80106b0:	e792      	b.n	80105d8 <_dtoa_r+0x818>
 80106b2:	4603      	mov	r3, r0
 80106b4:	e7f6      	b.n	80106a4 <_dtoa_r+0x8e4>
 80106b6:	9b07      	ldr	r3, [sp, #28]
 80106b8:	9704      	str	r7, [sp, #16]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	dc20      	bgt.n	8010700 <_dtoa_r+0x940>
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	dd1e      	ble.n	8010704 <_dtoa_r+0x944>
 80106c6:	9b00      	ldr	r3, [sp, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f47f aec0 	bne.w	801044e <_dtoa_r+0x68e>
 80106ce:	4621      	mov	r1, r4
 80106d0:	2205      	movs	r2, #5
 80106d2:	4658      	mov	r0, fp
 80106d4:	f000 f9e4 	bl	8010aa0 <__multadd>
 80106d8:	4601      	mov	r1, r0
 80106da:	4604      	mov	r4, r0
 80106dc:	4648      	mov	r0, r9
 80106de:	f000 fc41 	bl	8010f64 <__mcmp>
 80106e2:	2800      	cmp	r0, #0
 80106e4:	f77f aeb3 	ble.w	801044e <_dtoa_r+0x68e>
 80106e8:	4656      	mov	r6, sl
 80106ea:	2331      	movs	r3, #49	@ 0x31
 80106ec:	f806 3b01 	strb.w	r3, [r6], #1
 80106f0:	9b04      	ldr	r3, [sp, #16]
 80106f2:	3301      	adds	r3, #1
 80106f4:	9304      	str	r3, [sp, #16]
 80106f6:	e6ae      	b.n	8010456 <_dtoa_r+0x696>
 80106f8:	9c07      	ldr	r4, [sp, #28]
 80106fa:	9704      	str	r7, [sp, #16]
 80106fc:	4625      	mov	r5, r4
 80106fe:	e7f3      	b.n	80106e8 <_dtoa_r+0x928>
 8010700:	9b07      	ldr	r3, [sp, #28]
 8010702:	9300      	str	r3, [sp, #0]
 8010704:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010706:	2b00      	cmp	r3, #0
 8010708:	f000 8104 	beq.w	8010914 <_dtoa_r+0xb54>
 801070c:	2e00      	cmp	r6, #0
 801070e:	dd05      	ble.n	801071c <_dtoa_r+0x95c>
 8010710:	4629      	mov	r1, r5
 8010712:	4632      	mov	r2, r6
 8010714:	4658      	mov	r0, fp
 8010716:	f000 fbb9 	bl	8010e8c <__lshift>
 801071a:	4605      	mov	r5, r0
 801071c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801071e:	2b00      	cmp	r3, #0
 8010720:	d05a      	beq.n	80107d8 <_dtoa_r+0xa18>
 8010722:	6869      	ldr	r1, [r5, #4]
 8010724:	4658      	mov	r0, fp
 8010726:	f000 f959 	bl	80109dc <_Balloc>
 801072a:	4606      	mov	r6, r0
 801072c:	b928      	cbnz	r0, 801073a <_dtoa_r+0x97a>
 801072e:	4b84      	ldr	r3, [pc, #528]	@ (8010940 <_dtoa_r+0xb80>)
 8010730:	4602      	mov	r2, r0
 8010732:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010736:	f7ff bb5a 	b.w	800fdee <_dtoa_r+0x2e>
 801073a:	692a      	ldr	r2, [r5, #16]
 801073c:	3202      	adds	r2, #2
 801073e:	0092      	lsls	r2, r2, #2
 8010740:	f105 010c 	add.w	r1, r5, #12
 8010744:	300c      	adds	r0, #12
 8010746:	f7ff fa80 	bl	800fc4a <memcpy>
 801074a:	2201      	movs	r2, #1
 801074c:	4631      	mov	r1, r6
 801074e:	4658      	mov	r0, fp
 8010750:	f000 fb9c 	bl	8010e8c <__lshift>
 8010754:	f10a 0301 	add.w	r3, sl, #1
 8010758:	9307      	str	r3, [sp, #28]
 801075a:	9b00      	ldr	r3, [sp, #0]
 801075c:	4453      	add	r3, sl
 801075e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010760:	9b02      	ldr	r3, [sp, #8]
 8010762:	f003 0301 	and.w	r3, r3, #1
 8010766:	462f      	mov	r7, r5
 8010768:	930a      	str	r3, [sp, #40]	@ 0x28
 801076a:	4605      	mov	r5, r0
 801076c:	9b07      	ldr	r3, [sp, #28]
 801076e:	4621      	mov	r1, r4
 8010770:	3b01      	subs	r3, #1
 8010772:	4648      	mov	r0, r9
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	f7ff fa9b 	bl	800fcb0 <quorem>
 801077a:	4639      	mov	r1, r7
 801077c:	9002      	str	r0, [sp, #8]
 801077e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010782:	4648      	mov	r0, r9
 8010784:	f000 fbee 	bl	8010f64 <__mcmp>
 8010788:	462a      	mov	r2, r5
 801078a:	9008      	str	r0, [sp, #32]
 801078c:	4621      	mov	r1, r4
 801078e:	4658      	mov	r0, fp
 8010790:	f000 fc04 	bl	8010f9c <__mdiff>
 8010794:	68c2      	ldr	r2, [r0, #12]
 8010796:	4606      	mov	r6, r0
 8010798:	bb02      	cbnz	r2, 80107dc <_dtoa_r+0xa1c>
 801079a:	4601      	mov	r1, r0
 801079c:	4648      	mov	r0, r9
 801079e:	f000 fbe1 	bl	8010f64 <__mcmp>
 80107a2:	4602      	mov	r2, r0
 80107a4:	4631      	mov	r1, r6
 80107a6:	4658      	mov	r0, fp
 80107a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80107aa:	f000 f957 	bl	8010a5c <_Bfree>
 80107ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80107b2:	9e07      	ldr	r6, [sp, #28]
 80107b4:	ea43 0102 	orr.w	r1, r3, r2
 80107b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107ba:	4319      	orrs	r1, r3
 80107bc:	d110      	bne.n	80107e0 <_dtoa_r+0xa20>
 80107be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80107c2:	d029      	beq.n	8010818 <_dtoa_r+0xa58>
 80107c4:	9b08      	ldr	r3, [sp, #32]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	dd02      	ble.n	80107d0 <_dtoa_r+0xa10>
 80107ca:	9b02      	ldr	r3, [sp, #8]
 80107cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80107d0:	9b00      	ldr	r3, [sp, #0]
 80107d2:	f883 8000 	strb.w	r8, [r3]
 80107d6:	e63f      	b.n	8010458 <_dtoa_r+0x698>
 80107d8:	4628      	mov	r0, r5
 80107da:	e7bb      	b.n	8010754 <_dtoa_r+0x994>
 80107dc:	2201      	movs	r2, #1
 80107de:	e7e1      	b.n	80107a4 <_dtoa_r+0x9e4>
 80107e0:	9b08      	ldr	r3, [sp, #32]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	db04      	blt.n	80107f0 <_dtoa_r+0xa30>
 80107e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80107e8:	430b      	orrs	r3, r1
 80107ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80107ec:	430b      	orrs	r3, r1
 80107ee:	d120      	bne.n	8010832 <_dtoa_r+0xa72>
 80107f0:	2a00      	cmp	r2, #0
 80107f2:	dded      	ble.n	80107d0 <_dtoa_r+0xa10>
 80107f4:	4649      	mov	r1, r9
 80107f6:	2201      	movs	r2, #1
 80107f8:	4658      	mov	r0, fp
 80107fa:	f000 fb47 	bl	8010e8c <__lshift>
 80107fe:	4621      	mov	r1, r4
 8010800:	4681      	mov	r9, r0
 8010802:	f000 fbaf 	bl	8010f64 <__mcmp>
 8010806:	2800      	cmp	r0, #0
 8010808:	dc03      	bgt.n	8010812 <_dtoa_r+0xa52>
 801080a:	d1e1      	bne.n	80107d0 <_dtoa_r+0xa10>
 801080c:	f018 0f01 	tst.w	r8, #1
 8010810:	d0de      	beq.n	80107d0 <_dtoa_r+0xa10>
 8010812:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010816:	d1d8      	bne.n	80107ca <_dtoa_r+0xa0a>
 8010818:	9a00      	ldr	r2, [sp, #0]
 801081a:	2339      	movs	r3, #57	@ 0x39
 801081c:	7013      	strb	r3, [r2, #0]
 801081e:	4633      	mov	r3, r6
 8010820:	461e      	mov	r6, r3
 8010822:	3b01      	subs	r3, #1
 8010824:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010828:	2a39      	cmp	r2, #57	@ 0x39
 801082a:	d052      	beq.n	80108d2 <_dtoa_r+0xb12>
 801082c:	3201      	adds	r2, #1
 801082e:	701a      	strb	r2, [r3, #0]
 8010830:	e612      	b.n	8010458 <_dtoa_r+0x698>
 8010832:	2a00      	cmp	r2, #0
 8010834:	dd07      	ble.n	8010846 <_dtoa_r+0xa86>
 8010836:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801083a:	d0ed      	beq.n	8010818 <_dtoa_r+0xa58>
 801083c:	9a00      	ldr	r2, [sp, #0]
 801083e:	f108 0301 	add.w	r3, r8, #1
 8010842:	7013      	strb	r3, [r2, #0]
 8010844:	e608      	b.n	8010458 <_dtoa_r+0x698>
 8010846:	9b07      	ldr	r3, [sp, #28]
 8010848:	9a07      	ldr	r2, [sp, #28]
 801084a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801084e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010850:	4293      	cmp	r3, r2
 8010852:	d028      	beq.n	80108a6 <_dtoa_r+0xae6>
 8010854:	4649      	mov	r1, r9
 8010856:	2300      	movs	r3, #0
 8010858:	220a      	movs	r2, #10
 801085a:	4658      	mov	r0, fp
 801085c:	f000 f920 	bl	8010aa0 <__multadd>
 8010860:	42af      	cmp	r7, r5
 8010862:	4681      	mov	r9, r0
 8010864:	f04f 0300 	mov.w	r3, #0
 8010868:	f04f 020a 	mov.w	r2, #10
 801086c:	4639      	mov	r1, r7
 801086e:	4658      	mov	r0, fp
 8010870:	d107      	bne.n	8010882 <_dtoa_r+0xac2>
 8010872:	f000 f915 	bl	8010aa0 <__multadd>
 8010876:	4607      	mov	r7, r0
 8010878:	4605      	mov	r5, r0
 801087a:	9b07      	ldr	r3, [sp, #28]
 801087c:	3301      	adds	r3, #1
 801087e:	9307      	str	r3, [sp, #28]
 8010880:	e774      	b.n	801076c <_dtoa_r+0x9ac>
 8010882:	f000 f90d 	bl	8010aa0 <__multadd>
 8010886:	4629      	mov	r1, r5
 8010888:	4607      	mov	r7, r0
 801088a:	2300      	movs	r3, #0
 801088c:	220a      	movs	r2, #10
 801088e:	4658      	mov	r0, fp
 8010890:	f000 f906 	bl	8010aa0 <__multadd>
 8010894:	4605      	mov	r5, r0
 8010896:	e7f0      	b.n	801087a <_dtoa_r+0xaba>
 8010898:	9b00      	ldr	r3, [sp, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	bfcc      	ite	gt
 801089e:	461e      	movgt	r6, r3
 80108a0:	2601      	movle	r6, #1
 80108a2:	4456      	add	r6, sl
 80108a4:	2700      	movs	r7, #0
 80108a6:	4649      	mov	r1, r9
 80108a8:	2201      	movs	r2, #1
 80108aa:	4658      	mov	r0, fp
 80108ac:	f000 faee 	bl	8010e8c <__lshift>
 80108b0:	4621      	mov	r1, r4
 80108b2:	4681      	mov	r9, r0
 80108b4:	f000 fb56 	bl	8010f64 <__mcmp>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	dcb0      	bgt.n	801081e <_dtoa_r+0xa5e>
 80108bc:	d102      	bne.n	80108c4 <_dtoa_r+0xb04>
 80108be:	f018 0f01 	tst.w	r8, #1
 80108c2:	d1ac      	bne.n	801081e <_dtoa_r+0xa5e>
 80108c4:	4633      	mov	r3, r6
 80108c6:	461e      	mov	r6, r3
 80108c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108cc:	2a30      	cmp	r2, #48	@ 0x30
 80108ce:	d0fa      	beq.n	80108c6 <_dtoa_r+0xb06>
 80108d0:	e5c2      	b.n	8010458 <_dtoa_r+0x698>
 80108d2:	459a      	cmp	sl, r3
 80108d4:	d1a4      	bne.n	8010820 <_dtoa_r+0xa60>
 80108d6:	9b04      	ldr	r3, [sp, #16]
 80108d8:	3301      	adds	r3, #1
 80108da:	9304      	str	r3, [sp, #16]
 80108dc:	2331      	movs	r3, #49	@ 0x31
 80108de:	f88a 3000 	strb.w	r3, [sl]
 80108e2:	e5b9      	b.n	8010458 <_dtoa_r+0x698>
 80108e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80108e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010944 <_dtoa_r+0xb84>
 80108ea:	b11b      	cbz	r3, 80108f4 <_dtoa_r+0xb34>
 80108ec:	f10a 0308 	add.w	r3, sl, #8
 80108f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80108f2:	6013      	str	r3, [r2, #0]
 80108f4:	4650      	mov	r0, sl
 80108f6:	b019      	add	sp, #100	@ 0x64
 80108f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108fe:	2b01      	cmp	r3, #1
 8010900:	f77f ae37 	ble.w	8010572 <_dtoa_r+0x7b2>
 8010904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010906:	930a      	str	r3, [sp, #40]	@ 0x28
 8010908:	2001      	movs	r0, #1
 801090a:	e655      	b.n	80105b8 <_dtoa_r+0x7f8>
 801090c:	9b00      	ldr	r3, [sp, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	f77f aed6 	ble.w	80106c0 <_dtoa_r+0x900>
 8010914:	4656      	mov	r6, sl
 8010916:	4621      	mov	r1, r4
 8010918:	4648      	mov	r0, r9
 801091a:	f7ff f9c9 	bl	800fcb0 <quorem>
 801091e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010922:	f806 8b01 	strb.w	r8, [r6], #1
 8010926:	9b00      	ldr	r3, [sp, #0]
 8010928:	eba6 020a 	sub.w	r2, r6, sl
 801092c:	4293      	cmp	r3, r2
 801092e:	ddb3      	ble.n	8010898 <_dtoa_r+0xad8>
 8010930:	4649      	mov	r1, r9
 8010932:	2300      	movs	r3, #0
 8010934:	220a      	movs	r2, #10
 8010936:	4658      	mov	r0, fp
 8010938:	f000 f8b2 	bl	8010aa0 <__multadd>
 801093c:	4681      	mov	r9, r0
 801093e:	e7ea      	b.n	8010916 <_dtoa_r+0xb56>
 8010940:	080136f1 	.word	0x080136f1
 8010944:	08013675 	.word	0x08013675

08010948 <_free_r>:
 8010948:	b538      	push	{r3, r4, r5, lr}
 801094a:	4605      	mov	r5, r0
 801094c:	2900      	cmp	r1, #0
 801094e:	d041      	beq.n	80109d4 <_free_r+0x8c>
 8010950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010954:	1f0c      	subs	r4, r1, #4
 8010956:	2b00      	cmp	r3, #0
 8010958:	bfb8      	it	lt
 801095a:	18e4      	addlt	r4, r4, r3
 801095c:	f7fe f83c 	bl	800e9d8 <__malloc_lock>
 8010960:	4a1d      	ldr	r2, [pc, #116]	@ (80109d8 <_free_r+0x90>)
 8010962:	6813      	ldr	r3, [r2, #0]
 8010964:	b933      	cbnz	r3, 8010974 <_free_r+0x2c>
 8010966:	6063      	str	r3, [r4, #4]
 8010968:	6014      	str	r4, [r2, #0]
 801096a:	4628      	mov	r0, r5
 801096c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010970:	f7fe b838 	b.w	800e9e4 <__malloc_unlock>
 8010974:	42a3      	cmp	r3, r4
 8010976:	d908      	bls.n	801098a <_free_r+0x42>
 8010978:	6820      	ldr	r0, [r4, #0]
 801097a:	1821      	adds	r1, r4, r0
 801097c:	428b      	cmp	r3, r1
 801097e:	bf01      	itttt	eq
 8010980:	6819      	ldreq	r1, [r3, #0]
 8010982:	685b      	ldreq	r3, [r3, #4]
 8010984:	1809      	addeq	r1, r1, r0
 8010986:	6021      	streq	r1, [r4, #0]
 8010988:	e7ed      	b.n	8010966 <_free_r+0x1e>
 801098a:	461a      	mov	r2, r3
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	b10b      	cbz	r3, 8010994 <_free_r+0x4c>
 8010990:	42a3      	cmp	r3, r4
 8010992:	d9fa      	bls.n	801098a <_free_r+0x42>
 8010994:	6811      	ldr	r1, [r2, #0]
 8010996:	1850      	adds	r0, r2, r1
 8010998:	42a0      	cmp	r0, r4
 801099a:	d10b      	bne.n	80109b4 <_free_r+0x6c>
 801099c:	6820      	ldr	r0, [r4, #0]
 801099e:	4401      	add	r1, r0
 80109a0:	1850      	adds	r0, r2, r1
 80109a2:	4283      	cmp	r3, r0
 80109a4:	6011      	str	r1, [r2, #0]
 80109a6:	d1e0      	bne.n	801096a <_free_r+0x22>
 80109a8:	6818      	ldr	r0, [r3, #0]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	6053      	str	r3, [r2, #4]
 80109ae:	4408      	add	r0, r1
 80109b0:	6010      	str	r0, [r2, #0]
 80109b2:	e7da      	b.n	801096a <_free_r+0x22>
 80109b4:	d902      	bls.n	80109bc <_free_r+0x74>
 80109b6:	230c      	movs	r3, #12
 80109b8:	602b      	str	r3, [r5, #0]
 80109ba:	e7d6      	b.n	801096a <_free_r+0x22>
 80109bc:	6820      	ldr	r0, [r4, #0]
 80109be:	1821      	adds	r1, r4, r0
 80109c0:	428b      	cmp	r3, r1
 80109c2:	bf04      	itt	eq
 80109c4:	6819      	ldreq	r1, [r3, #0]
 80109c6:	685b      	ldreq	r3, [r3, #4]
 80109c8:	6063      	str	r3, [r4, #4]
 80109ca:	bf04      	itt	eq
 80109cc:	1809      	addeq	r1, r1, r0
 80109ce:	6021      	streq	r1, [r4, #0]
 80109d0:	6054      	str	r4, [r2, #4]
 80109d2:	e7ca      	b.n	801096a <_free_r+0x22>
 80109d4:	bd38      	pop	{r3, r4, r5, pc}
 80109d6:	bf00      	nop
 80109d8:	200008e8 	.word	0x200008e8

080109dc <_Balloc>:
 80109dc:	b570      	push	{r4, r5, r6, lr}
 80109de:	69c6      	ldr	r6, [r0, #28]
 80109e0:	4604      	mov	r4, r0
 80109e2:	460d      	mov	r5, r1
 80109e4:	b976      	cbnz	r6, 8010a04 <_Balloc+0x28>
 80109e6:	2010      	movs	r0, #16
 80109e8:	f7fd ff4c 	bl	800e884 <malloc>
 80109ec:	4602      	mov	r2, r0
 80109ee:	61e0      	str	r0, [r4, #28]
 80109f0:	b920      	cbnz	r0, 80109fc <_Balloc+0x20>
 80109f2:	4b18      	ldr	r3, [pc, #96]	@ (8010a54 <_Balloc+0x78>)
 80109f4:	4818      	ldr	r0, [pc, #96]	@ (8010a58 <_Balloc+0x7c>)
 80109f6:	216b      	movs	r1, #107	@ 0x6b
 80109f8:	f7ff f93c 	bl	800fc74 <__assert_func>
 80109fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a00:	6006      	str	r6, [r0, #0]
 8010a02:	60c6      	str	r6, [r0, #12]
 8010a04:	69e6      	ldr	r6, [r4, #28]
 8010a06:	68f3      	ldr	r3, [r6, #12]
 8010a08:	b183      	cbz	r3, 8010a2c <_Balloc+0x50>
 8010a0a:	69e3      	ldr	r3, [r4, #28]
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a12:	b9b8      	cbnz	r0, 8010a44 <_Balloc+0x68>
 8010a14:	2101      	movs	r1, #1
 8010a16:	fa01 f605 	lsl.w	r6, r1, r5
 8010a1a:	1d72      	adds	r2, r6, #5
 8010a1c:	0092      	lsls	r2, r2, #2
 8010a1e:	4620      	mov	r0, r4
 8010a20:	f7fd ff1c 	bl	800e85c <_calloc_r>
 8010a24:	b160      	cbz	r0, 8010a40 <_Balloc+0x64>
 8010a26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a2a:	e00e      	b.n	8010a4a <_Balloc+0x6e>
 8010a2c:	2221      	movs	r2, #33	@ 0x21
 8010a2e:	2104      	movs	r1, #4
 8010a30:	4620      	mov	r0, r4
 8010a32:	f7fd ff13 	bl	800e85c <_calloc_r>
 8010a36:	69e3      	ldr	r3, [r4, #28]
 8010a38:	60f0      	str	r0, [r6, #12]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d1e4      	bne.n	8010a0a <_Balloc+0x2e>
 8010a40:	2000      	movs	r0, #0
 8010a42:	bd70      	pop	{r4, r5, r6, pc}
 8010a44:	6802      	ldr	r2, [r0, #0]
 8010a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a50:	e7f7      	b.n	8010a42 <_Balloc+0x66>
 8010a52:	bf00      	nop
 8010a54:	08013682 	.word	0x08013682
 8010a58:	08013702 	.word	0x08013702

08010a5c <_Bfree>:
 8010a5c:	b570      	push	{r4, r5, r6, lr}
 8010a5e:	69c6      	ldr	r6, [r0, #28]
 8010a60:	4605      	mov	r5, r0
 8010a62:	460c      	mov	r4, r1
 8010a64:	b976      	cbnz	r6, 8010a84 <_Bfree+0x28>
 8010a66:	2010      	movs	r0, #16
 8010a68:	f7fd ff0c 	bl	800e884 <malloc>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	61e8      	str	r0, [r5, #28]
 8010a70:	b920      	cbnz	r0, 8010a7c <_Bfree+0x20>
 8010a72:	4b09      	ldr	r3, [pc, #36]	@ (8010a98 <_Bfree+0x3c>)
 8010a74:	4809      	ldr	r0, [pc, #36]	@ (8010a9c <_Bfree+0x40>)
 8010a76:	218f      	movs	r1, #143	@ 0x8f
 8010a78:	f7ff f8fc 	bl	800fc74 <__assert_func>
 8010a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a80:	6006      	str	r6, [r0, #0]
 8010a82:	60c6      	str	r6, [r0, #12]
 8010a84:	b13c      	cbz	r4, 8010a96 <_Bfree+0x3a>
 8010a86:	69eb      	ldr	r3, [r5, #28]
 8010a88:	6862      	ldr	r2, [r4, #4]
 8010a8a:	68db      	ldr	r3, [r3, #12]
 8010a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a90:	6021      	str	r1, [r4, #0]
 8010a92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a96:	bd70      	pop	{r4, r5, r6, pc}
 8010a98:	08013682 	.word	0x08013682
 8010a9c:	08013702 	.word	0x08013702

08010aa0 <__multadd>:
 8010aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa4:	690d      	ldr	r5, [r1, #16]
 8010aa6:	4607      	mov	r7, r0
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	461e      	mov	r6, r3
 8010aac:	f101 0c14 	add.w	ip, r1, #20
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8010ab6:	b299      	uxth	r1, r3
 8010ab8:	fb02 6101 	mla	r1, r2, r1, r6
 8010abc:	0c1e      	lsrs	r6, r3, #16
 8010abe:	0c0b      	lsrs	r3, r1, #16
 8010ac0:	fb02 3306 	mla	r3, r2, r6, r3
 8010ac4:	b289      	uxth	r1, r1
 8010ac6:	3001      	adds	r0, #1
 8010ac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010acc:	4285      	cmp	r5, r0
 8010ace:	f84c 1b04 	str.w	r1, [ip], #4
 8010ad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ad6:	dcec      	bgt.n	8010ab2 <__multadd+0x12>
 8010ad8:	b30e      	cbz	r6, 8010b1e <__multadd+0x7e>
 8010ada:	68a3      	ldr	r3, [r4, #8]
 8010adc:	42ab      	cmp	r3, r5
 8010ade:	dc19      	bgt.n	8010b14 <__multadd+0x74>
 8010ae0:	6861      	ldr	r1, [r4, #4]
 8010ae2:	4638      	mov	r0, r7
 8010ae4:	3101      	adds	r1, #1
 8010ae6:	f7ff ff79 	bl	80109dc <_Balloc>
 8010aea:	4680      	mov	r8, r0
 8010aec:	b928      	cbnz	r0, 8010afa <__multadd+0x5a>
 8010aee:	4602      	mov	r2, r0
 8010af0:	4b0c      	ldr	r3, [pc, #48]	@ (8010b24 <__multadd+0x84>)
 8010af2:	480d      	ldr	r0, [pc, #52]	@ (8010b28 <__multadd+0x88>)
 8010af4:	21ba      	movs	r1, #186	@ 0xba
 8010af6:	f7ff f8bd 	bl	800fc74 <__assert_func>
 8010afa:	6922      	ldr	r2, [r4, #16]
 8010afc:	3202      	adds	r2, #2
 8010afe:	f104 010c 	add.w	r1, r4, #12
 8010b02:	0092      	lsls	r2, r2, #2
 8010b04:	300c      	adds	r0, #12
 8010b06:	f7ff f8a0 	bl	800fc4a <memcpy>
 8010b0a:	4621      	mov	r1, r4
 8010b0c:	4638      	mov	r0, r7
 8010b0e:	f7ff ffa5 	bl	8010a5c <_Bfree>
 8010b12:	4644      	mov	r4, r8
 8010b14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b18:	3501      	adds	r5, #1
 8010b1a:	615e      	str	r6, [r3, #20]
 8010b1c:	6125      	str	r5, [r4, #16]
 8010b1e:	4620      	mov	r0, r4
 8010b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b24:	080136f1 	.word	0x080136f1
 8010b28:	08013702 	.word	0x08013702

08010b2c <__s2b>:
 8010b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b30:	460c      	mov	r4, r1
 8010b32:	4615      	mov	r5, r2
 8010b34:	461f      	mov	r7, r3
 8010b36:	2209      	movs	r2, #9
 8010b38:	3308      	adds	r3, #8
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b40:	2100      	movs	r1, #0
 8010b42:	2201      	movs	r2, #1
 8010b44:	429a      	cmp	r2, r3
 8010b46:	db09      	blt.n	8010b5c <__s2b+0x30>
 8010b48:	4630      	mov	r0, r6
 8010b4a:	f7ff ff47 	bl	80109dc <_Balloc>
 8010b4e:	b940      	cbnz	r0, 8010b62 <__s2b+0x36>
 8010b50:	4602      	mov	r2, r0
 8010b52:	4b19      	ldr	r3, [pc, #100]	@ (8010bb8 <__s2b+0x8c>)
 8010b54:	4819      	ldr	r0, [pc, #100]	@ (8010bbc <__s2b+0x90>)
 8010b56:	21d3      	movs	r1, #211	@ 0xd3
 8010b58:	f7ff f88c 	bl	800fc74 <__assert_func>
 8010b5c:	0052      	lsls	r2, r2, #1
 8010b5e:	3101      	adds	r1, #1
 8010b60:	e7f0      	b.n	8010b44 <__s2b+0x18>
 8010b62:	9b08      	ldr	r3, [sp, #32]
 8010b64:	6143      	str	r3, [r0, #20]
 8010b66:	2d09      	cmp	r5, #9
 8010b68:	f04f 0301 	mov.w	r3, #1
 8010b6c:	6103      	str	r3, [r0, #16]
 8010b6e:	dd16      	ble.n	8010b9e <__s2b+0x72>
 8010b70:	f104 0909 	add.w	r9, r4, #9
 8010b74:	46c8      	mov	r8, r9
 8010b76:	442c      	add	r4, r5
 8010b78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010b7c:	4601      	mov	r1, r0
 8010b7e:	3b30      	subs	r3, #48	@ 0x30
 8010b80:	220a      	movs	r2, #10
 8010b82:	4630      	mov	r0, r6
 8010b84:	f7ff ff8c 	bl	8010aa0 <__multadd>
 8010b88:	45a0      	cmp	r8, r4
 8010b8a:	d1f5      	bne.n	8010b78 <__s2b+0x4c>
 8010b8c:	f1a5 0408 	sub.w	r4, r5, #8
 8010b90:	444c      	add	r4, r9
 8010b92:	1b2d      	subs	r5, r5, r4
 8010b94:	1963      	adds	r3, r4, r5
 8010b96:	42bb      	cmp	r3, r7
 8010b98:	db04      	blt.n	8010ba4 <__s2b+0x78>
 8010b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b9e:	340a      	adds	r4, #10
 8010ba0:	2509      	movs	r5, #9
 8010ba2:	e7f6      	b.n	8010b92 <__s2b+0x66>
 8010ba4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010ba8:	4601      	mov	r1, r0
 8010baa:	3b30      	subs	r3, #48	@ 0x30
 8010bac:	220a      	movs	r2, #10
 8010bae:	4630      	mov	r0, r6
 8010bb0:	f7ff ff76 	bl	8010aa0 <__multadd>
 8010bb4:	e7ee      	b.n	8010b94 <__s2b+0x68>
 8010bb6:	bf00      	nop
 8010bb8:	080136f1 	.word	0x080136f1
 8010bbc:	08013702 	.word	0x08013702

08010bc0 <__hi0bits>:
 8010bc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	bf36      	itet	cc
 8010bc8:	0403      	lslcc	r3, r0, #16
 8010bca:	2000      	movcs	r0, #0
 8010bcc:	2010      	movcc	r0, #16
 8010bce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010bd2:	bf3c      	itt	cc
 8010bd4:	021b      	lslcc	r3, r3, #8
 8010bd6:	3008      	addcc	r0, #8
 8010bd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010bdc:	bf3c      	itt	cc
 8010bde:	011b      	lslcc	r3, r3, #4
 8010be0:	3004      	addcc	r0, #4
 8010be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010be6:	bf3c      	itt	cc
 8010be8:	009b      	lslcc	r3, r3, #2
 8010bea:	3002      	addcc	r0, #2
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	db05      	blt.n	8010bfc <__hi0bits+0x3c>
 8010bf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010bf4:	f100 0001 	add.w	r0, r0, #1
 8010bf8:	bf08      	it	eq
 8010bfa:	2020      	moveq	r0, #32
 8010bfc:	4770      	bx	lr

08010bfe <__lo0bits>:
 8010bfe:	6803      	ldr	r3, [r0, #0]
 8010c00:	4602      	mov	r2, r0
 8010c02:	f013 0007 	ands.w	r0, r3, #7
 8010c06:	d00b      	beq.n	8010c20 <__lo0bits+0x22>
 8010c08:	07d9      	lsls	r1, r3, #31
 8010c0a:	d421      	bmi.n	8010c50 <__lo0bits+0x52>
 8010c0c:	0798      	lsls	r0, r3, #30
 8010c0e:	bf49      	itett	mi
 8010c10:	085b      	lsrmi	r3, r3, #1
 8010c12:	089b      	lsrpl	r3, r3, #2
 8010c14:	2001      	movmi	r0, #1
 8010c16:	6013      	strmi	r3, [r2, #0]
 8010c18:	bf5c      	itt	pl
 8010c1a:	6013      	strpl	r3, [r2, #0]
 8010c1c:	2002      	movpl	r0, #2
 8010c1e:	4770      	bx	lr
 8010c20:	b299      	uxth	r1, r3
 8010c22:	b909      	cbnz	r1, 8010c28 <__lo0bits+0x2a>
 8010c24:	0c1b      	lsrs	r3, r3, #16
 8010c26:	2010      	movs	r0, #16
 8010c28:	b2d9      	uxtb	r1, r3
 8010c2a:	b909      	cbnz	r1, 8010c30 <__lo0bits+0x32>
 8010c2c:	3008      	adds	r0, #8
 8010c2e:	0a1b      	lsrs	r3, r3, #8
 8010c30:	0719      	lsls	r1, r3, #28
 8010c32:	bf04      	itt	eq
 8010c34:	091b      	lsreq	r3, r3, #4
 8010c36:	3004      	addeq	r0, #4
 8010c38:	0799      	lsls	r1, r3, #30
 8010c3a:	bf04      	itt	eq
 8010c3c:	089b      	lsreq	r3, r3, #2
 8010c3e:	3002      	addeq	r0, #2
 8010c40:	07d9      	lsls	r1, r3, #31
 8010c42:	d403      	bmi.n	8010c4c <__lo0bits+0x4e>
 8010c44:	085b      	lsrs	r3, r3, #1
 8010c46:	f100 0001 	add.w	r0, r0, #1
 8010c4a:	d003      	beq.n	8010c54 <__lo0bits+0x56>
 8010c4c:	6013      	str	r3, [r2, #0]
 8010c4e:	4770      	bx	lr
 8010c50:	2000      	movs	r0, #0
 8010c52:	4770      	bx	lr
 8010c54:	2020      	movs	r0, #32
 8010c56:	4770      	bx	lr

08010c58 <__i2b>:
 8010c58:	b510      	push	{r4, lr}
 8010c5a:	460c      	mov	r4, r1
 8010c5c:	2101      	movs	r1, #1
 8010c5e:	f7ff febd 	bl	80109dc <_Balloc>
 8010c62:	4602      	mov	r2, r0
 8010c64:	b928      	cbnz	r0, 8010c72 <__i2b+0x1a>
 8010c66:	4b05      	ldr	r3, [pc, #20]	@ (8010c7c <__i2b+0x24>)
 8010c68:	4805      	ldr	r0, [pc, #20]	@ (8010c80 <__i2b+0x28>)
 8010c6a:	f240 1145 	movw	r1, #325	@ 0x145
 8010c6e:	f7ff f801 	bl	800fc74 <__assert_func>
 8010c72:	2301      	movs	r3, #1
 8010c74:	6144      	str	r4, [r0, #20]
 8010c76:	6103      	str	r3, [r0, #16]
 8010c78:	bd10      	pop	{r4, pc}
 8010c7a:	bf00      	nop
 8010c7c:	080136f1 	.word	0x080136f1
 8010c80:	08013702 	.word	0x08013702

08010c84 <__multiply>:
 8010c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c88:	4614      	mov	r4, r2
 8010c8a:	690a      	ldr	r2, [r1, #16]
 8010c8c:	6923      	ldr	r3, [r4, #16]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	bfa8      	it	ge
 8010c92:	4623      	movge	r3, r4
 8010c94:	460f      	mov	r7, r1
 8010c96:	bfa4      	itt	ge
 8010c98:	460c      	movge	r4, r1
 8010c9a:	461f      	movge	r7, r3
 8010c9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010ca0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010ca4:	68a3      	ldr	r3, [r4, #8]
 8010ca6:	6861      	ldr	r1, [r4, #4]
 8010ca8:	eb0a 0609 	add.w	r6, sl, r9
 8010cac:	42b3      	cmp	r3, r6
 8010cae:	b085      	sub	sp, #20
 8010cb0:	bfb8      	it	lt
 8010cb2:	3101      	addlt	r1, #1
 8010cb4:	f7ff fe92 	bl	80109dc <_Balloc>
 8010cb8:	b930      	cbnz	r0, 8010cc8 <__multiply+0x44>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	4b44      	ldr	r3, [pc, #272]	@ (8010dd0 <__multiply+0x14c>)
 8010cbe:	4845      	ldr	r0, [pc, #276]	@ (8010dd4 <__multiply+0x150>)
 8010cc0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010cc4:	f7fe ffd6 	bl	800fc74 <__assert_func>
 8010cc8:	f100 0514 	add.w	r5, r0, #20
 8010ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010cd0:	462b      	mov	r3, r5
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	4543      	cmp	r3, r8
 8010cd6:	d321      	bcc.n	8010d1c <__multiply+0x98>
 8010cd8:	f107 0114 	add.w	r1, r7, #20
 8010cdc:	f104 0214 	add.w	r2, r4, #20
 8010ce0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010ce4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010ce8:	9302      	str	r3, [sp, #8]
 8010cea:	1b13      	subs	r3, r2, r4
 8010cec:	3b15      	subs	r3, #21
 8010cee:	f023 0303 	bic.w	r3, r3, #3
 8010cf2:	3304      	adds	r3, #4
 8010cf4:	f104 0715 	add.w	r7, r4, #21
 8010cf8:	42ba      	cmp	r2, r7
 8010cfa:	bf38      	it	cc
 8010cfc:	2304      	movcc	r3, #4
 8010cfe:	9301      	str	r3, [sp, #4]
 8010d00:	9b02      	ldr	r3, [sp, #8]
 8010d02:	9103      	str	r1, [sp, #12]
 8010d04:	428b      	cmp	r3, r1
 8010d06:	d80c      	bhi.n	8010d22 <__multiply+0x9e>
 8010d08:	2e00      	cmp	r6, #0
 8010d0a:	dd03      	ble.n	8010d14 <__multiply+0x90>
 8010d0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d05b      	beq.n	8010dcc <__multiply+0x148>
 8010d14:	6106      	str	r6, [r0, #16]
 8010d16:	b005      	add	sp, #20
 8010d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d1c:	f843 2b04 	str.w	r2, [r3], #4
 8010d20:	e7d8      	b.n	8010cd4 <__multiply+0x50>
 8010d22:	f8b1 a000 	ldrh.w	sl, [r1]
 8010d26:	f1ba 0f00 	cmp.w	sl, #0
 8010d2a:	d024      	beq.n	8010d76 <__multiply+0xf2>
 8010d2c:	f104 0e14 	add.w	lr, r4, #20
 8010d30:	46a9      	mov	r9, r5
 8010d32:	f04f 0c00 	mov.w	ip, #0
 8010d36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d3a:	f8d9 3000 	ldr.w	r3, [r9]
 8010d3e:	fa1f fb87 	uxth.w	fp, r7
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	fb0a 330b 	mla	r3, sl, fp, r3
 8010d48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010d4c:	f8d9 7000 	ldr.w	r7, [r9]
 8010d50:	4463      	add	r3, ip
 8010d52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010d56:	fb0a c70b 	mla	r7, sl, fp, ip
 8010d5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010d64:	4572      	cmp	r2, lr
 8010d66:	f849 3b04 	str.w	r3, [r9], #4
 8010d6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010d6e:	d8e2      	bhi.n	8010d36 <__multiply+0xb2>
 8010d70:	9b01      	ldr	r3, [sp, #4]
 8010d72:	f845 c003 	str.w	ip, [r5, r3]
 8010d76:	9b03      	ldr	r3, [sp, #12]
 8010d78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010d7c:	3104      	adds	r1, #4
 8010d7e:	f1b9 0f00 	cmp.w	r9, #0
 8010d82:	d021      	beq.n	8010dc8 <__multiply+0x144>
 8010d84:	682b      	ldr	r3, [r5, #0]
 8010d86:	f104 0c14 	add.w	ip, r4, #20
 8010d8a:	46ae      	mov	lr, r5
 8010d8c:	f04f 0a00 	mov.w	sl, #0
 8010d90:	f8bc b000 	ldrh.w	fp, [ip]
 8010d94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010d98:	fb09 770b 	mla	r7, r9, fp, r7
 8010d9c:	4457      	add	r7, sl
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010da4:	f84e 3b04 	str.w	r3, [lr], #4
 8010da8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010db0:	f8be 3000 	ldrh.w	r3, [lr]
 8010db4:	fb09 330a 	mla	r3, r9, sl, r3
 8010db8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010dbc:	4562      	cmp	r2, ip
 8010dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010dc2:	d8e5      	bhi.n	8010d90 <__multiply+0x10c>
 8010dc4:	9f01      	ldr	r7, [sp, #4]
 8010dc6:	51eb      	str	r3, [r5, r7]
 8010dc8:	3504      	adds	r5, #4
 8010dca:	e799      	b.n	8010d00 <__multiply+0x7c>
 8010dcc:	3e01      	subs	r6, #1
 8010dce:	e79b      	b.n	8010d08 <__multiply+0x84>
 8010dd0:	080136f1 	.word	0x080136f1
 8010dd4:	08013702 	.word	0x08013702

08010dd8 <__pow5mult>:
 8010dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ddc:	4615      	mov	r5, r2
 8010dde:	f012 0203 	ands.w	r2, r2, #3
 8010de2:	4607      	mov	r7, r0
 8010de4:	460e      	mov	r6, r1
 8010de6:	d007      	beq.n	8010df8 <__pow5mult+0x20>
 8010de8:	4c25      	ldr	r4, [pc, #148]	@ (8010e80 <__pow5mult+0xa8>)
 8010dea:	3a01      	subs	r2, #1
 8010dec:	2300      	movs	r3, #0
 8010dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010df2:	f7ff fe55 	bl	8010aa0 <__multadd>
 8010df6:	4606      	mov	r6, r0
 8010df8:	10ad      	asrs	r5, r5, #2
 8010dfa:	d03d      	beq.n	8010e78 <__pow5mult+0xa0>
 8010dfc:	69fc      	ldr	r4, [r7, #28]
 8010dfe:	b97c      	cbnz	r4, 8010e20 <__pow5mult+0x48>
 8010e00:	2010      	movs	r0, #16
 8010e02:	f7fd fd3f 	bl	800e884 <malloc>
 8010e06:	4602      	mov	r2, r0
 8010e08:	61f8      	str	r0, [r7, #28]
 8010e0a:	b928      	cbnz	r0, 8010e18 <__pow5mult+0x40>
 8010e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8010e84 <__pow5mult+0xac>)
 8010e0e:	481e      	ldr	r0, [pc, #120]	@ (8010e88 <__pow5mult+0xb0>)
 8010e10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010e14:	f7fe ff2e 	bl	800fc74 <__assert_func>
 8010e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e1c:	6004      	str	r4, [r0, #0]
 8010e1e:	60c4      	str	r4, [r0, #12]
 8010e20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e28:	b94c      	cbnz	r4, 8010e3e <__pow5mult+0x66>
 8010e2a:	f240 2171 	movw	r1, #625	@ 0x271
 8010e2e:	4638      	mov	r0, r7
 8010e30:	f7ff ff12 	bl	8010c58 <__i2b>
 8010e34:	2300      	movs	r3, #0
 8010e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	6003      	str	r3, [r0, #0]
 8010e3e:	f04f 0900 	mov.w	r9, #0
 8010e42:	07eb      	lsls	r3, r5, #31
 8010e44:	d50a      	bpl.n	8010e5c <__pow5mult+0x84>
 8010e46:	4631      	mov	r1, r6
 8010e48:	4622      	mov	r2, r4
 8010e4a:	4638      	mov	r0, r7
 8010e4c:	f7ff ff1a 	bl	8010c84 <__multiply>
 8010e50:	4631      	mov	r1, r6
 8010e52:	4680      	mov	r8, r0
 8010e54:	4638      	mov	r0, r7
 8010e56:	f7ff fe01 	bl	8010a5c <_Bfree>
 8010e5a:	4646      	mov	r6, r8
 8010e5c:	106d      	asrs	r5, r5, #1
 8010e5e:	d00b      	beq.n	8010e78 <__pow5mult+0xa0>
 8010e60:	6820      	ldr	r0, [r4, #0]
 8010e62:	b938      	cbnz	r0, 8010e74 <__pow5mult+0x9c>
 8010e64:	4622      	mov	r2, r4
 8010e66:	4621      	mov	r1, r4
 8010e68:	4638      	mov	r0, r7
 8010e6a:	f7ff ff0b 	bl	8010c84 <__multiply>
 8010e6e:	6020      	str	r0, [r4, #0]
 8010e70:	f8c0 9000 	str.w	r9, [r0]
 8010e74:	4604      	mov	r4, r0
 8010e76:	e7e4      	b.n	8010e42 <__pow5mult+0x6a>
 8010e78:	4630      	mov	r0, r6
 8010e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e7e:	bf00      	nop
 8010e80:	0801375c 	.word	0x0801375c
 8010e84:	08013682 	.word	0x08013682
 8010e88:	08013702 	.word	0x08013702

08010e8c <__lshift>:
 8010e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e90:	460c      	mov	r4, r1
 8010e92:	6849      	ldr	r1, [r1, #4]
 8010e94:	6923      	ldr	r3, [r4, #16]
 8010e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e9a:	68a3      	ldr	r3, [r4, #8]
 8010e9c:	4607      	mov	r7, r0
 8010e9e:	4691      	mov	r9, r2
 8010ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ea4:	f108 0601 	add.w	r6, r8, #1
 8010ea8:	42b3      	cmp	r3, r6
 8010eaa:	db0b      	blt.n	8010ec4 <__lshift+0x38>
 8010eac:	4638      	mov	r0, r7
 8010eae:	f7ff fd95 	bl	80109dc <_Balloc>
 8010eb2:	4605      	mov	r5, r0
 8010eb4:	b948      	cbnz	r0, 8010eca <__lshift+0x3e>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	4b28      	ldr	r3, [pc, #160]	@ (8010f5c <__lshift+0xd0>)
 8010eba:	4829      	ldr	r0, [pc, #164]	@ (8010f60 <__lshift+0xd4>)
 8010ebc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010ec0:	f7fe fed8 	bl	800fc74 <__assert_func>
 8010ec4:	3101      	adds	r1, #1
 8010ec6:	005b      	lsls	r3, r3, #1
 8010ec8:	e7ee      	b.n	8010ea8 <__lshift+0x1c>
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f100 0114 	add.w	r1, r0, #20
 8010ed0:	f100 0210 	add.w	r2, r0, #16
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	4553      	cmp	r3, sl
 8010ed8:	db33      	blt.n	8010f42 <__lshift+0xb6>
 8010eda:	6920      	ldr	r0, [r4, #16]
 8010edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ee0:	f104 0314 	add.w	r3, r4, #20
 8010ee4:	f019 091f 	ands.w	r9, r9, #31
 8010ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010eec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ef0:	d02b      	beq.n	8010f4a <__lshift+0xbe>
 8010ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8010ef6:	468a      	mov	sl, r1
 8010ef8:	2200      	movs	r2, #0
 8010efa:	6818      	ldr	r0, [r3, #0]
 8010efc:	fa00 f009 	lsl.w	r0, r0, r9
 8010f00:	4310      	orrs	r0, r2
 8010f02:	f84a 0b04 	str.w	r0, [sl], #4
 8010f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f0a:	459c      	cmp	ip, r3
 8010f0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f10:	d8f3      	bhi.n	8010efa <__lshift+0x6e>
 8010f12:	ebac 0304 	sub.w	r3, ip, r4
 8010f16:	3b15      	subs	r3, #21
 8010f18:	f023 0303 	bic.w	r3, r3, #3
 8010f1c:	3304      	adds	r3, #4
 8010f1e:	f104 0015 	add.w	r0, r4, #21
 8010f22:	4584      	cmp	ip, r0
 8010f24:	bf38      	it	cc
 8010f26:	2304      	movcc	r3, #4
 8010f28:	50ca      	str	r2, [r1, r3]
 8010f2a:	b10a      	cbz	r2, 8010f30 <__lshift+0xa4>
 8010f2c:	f108 0602 	add.w	r6, r8, #2
 8010f30:	3e01      	subs	r6, #1
 8010f32:	4638      	mov	r0, r7
 8010f34:	612e      	str	r6, [r5, #16]
 8010f36:	4621      	mov	r1, r4
 8010f38:	f7ff fd90 	bl	8010a5c <_Bfree>
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f46:	3301      	adds	r3, #1
 8010f48:	e7c5      	b.n	8010ed6 <__lshift+0x4a>
 8010f4a:	3904      	subs	r1, #4
 8010f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f50:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f54:	459c      	cmp	ip, r3
 8010f56:	d8f9      	bhi.n	8010f4c <__lshift+0xc0>
 8010f58:	e7ea      	b.n	8010f30 <__lshift+0xa4>
 8010f5a:	bf00      	nop
 8010f5c:	080136f1 	.word	0x080136f1
 8010f60:	08013702 	.word	0x08013702

08010f64 <__mcmp>:
 8010f64:	690a      	ldr	r2, [r1, #16]
 8010f66:	4603      	mov	r3, r0
 8010f68:	6900      	ldr	r0, [r0, #16]
 8010f6a:	1a80      	subs	r0, r0, r2
 8010f6c:	b530      	push	{r4, r5, lr}
 8010f6e:	d10e      	bne.n	8010f8e <__mcmp+0x2a>
 8010f70:	3314      	adds	r3, #20
 8010f72:	3114      	adds	r1, #20
 8010f74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010f78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010f7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010f80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010f84:	4295      	cmp	r5, r2
 8010f86:	d003      	beq.n	8010f90 <__mcmp+0x2c>
 8010f88:	d205      	bcs.n	8010f96 <__mcmp+0x32>
 8010f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f8e:	bd30      	pop	{r4, r5, pc}
 8010f90:	42a3      	cmp	r3, r4
 8010f92:	d3f3      	bcc.n	8010f7c <__mcmp+0x18>
 8010f94:	e7fb      	b.n	8010f8e <__mcmp+0x2a>
 8010f96:	2001      	movs	r0, #1
 8010f98:	e7f9      	b.n	8010f8e <__mcmp+0x2a>
	...

08010f9c <__mdiff>:
 8010f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa0:	4689      	mov	r9, r1
 8010fa2:	4606      	mov	r6, r0
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	4648      	mov	r0, r9
 8010fa8:	4614      	mov	r4, r2
 8010faa:	f7ff ffdb 	bl	8010f64 <__mcmp>
 8010fae:	1e05      	subs	r5, r0, #0
 8010fb0:	d112      	bne.n	8010fd8 <__mdiff+0x3c>
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	f7ff fd11 	bl	80109dc <_Balloc>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	b928      	cbnz	r0, 8010fca <__mdiff+0x2e>
 8010fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80110bc <__mdiff+0x120>)
 8010fc0:	f240 2137 	movw	r1, #567	@ 0x237
 8010fc4:	483e      	ldr	r0, [pc, #248]	@ (80110c0 <__mdiff+0x124>)
 8010fc6:	f7fe fe55 	bl	800fc74 <__assert_func>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010fd0:	4610      	mov	r0, r2
 8010fd2:	b003      	add	sp, #12
 8010fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd8:	bfbc      	itt	lt
 8010fda:	464b      	movlt	r3, r9
 8010fdc:	46a1      	movlt	r9, r4
 8010fde:	4630      	mov	r0, r6
 8010fe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010fe4:	bfba      	itte	lt
 8010fe6:	461c      	movlt	r4, r3
 8010fe8:	2501      	movlt	r5, #1
 8010fea:	2500      	movge	r5, #0
 8010fec:	f7ff fcf6 	bl	80109dc <_Balloc>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	b918      	cbnz	r0, 8010ffc <__mdiff+0x60>
 8010ff4:	4b31      	ldr	r3, [pc, #196]	@ (80110bc <__mdiff+0x120>)
 8010ff6:	f240 2145 	movw	r1, #581	@ 0x245
 8010ffa:	e7e3      	b.n	8010fc4 <__mdiff+0x28>
 8010ffc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011000:	6926      	ldr	r6, [r4, #16]
 8011002:	60c5      	str	r5, [r0, #12]
 8011004:	f109 0310 	add.w	r3, r9, #16
 8011008:	f109 0514 	add.w	r5, r9, #20
 801100c:	f104 0e14 	add.w	lr, r4, #20
 8011010:	f100 0b14 	add.w	fp, r0, #20
 8011014:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011018:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801101c:	9301      	str	r3, [sp, #4]
 801101e:	46d9      	mov	r9, fp
 8011020:	f04f 0c00 	mov.w	ip, #0
 8011024:	9b01      	ldr	r3, [sp, #4]
 8011026:	f85e 0b04 	ldr.w	r0, [lr], #4
 801102a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801102e:	9301      	str	r3, [sp, #4]
 8011030:	fa1f f38a 	uxth.w	r3, sl
 8011034:	4619      	mov	r1, r3
 8011036:	b283      	uxth	r3, r0
 8011038:	1acb      	subs	r3, r1, r3
 801103a:	0c00      	lsrs	r0, r0, #16
 801103c:	4463      	add	r3, ip
 801103e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011042:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011046:	b29b      	uxth	r3, r3
 8011048:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801104c:	4576      	cmp	r6, lr
 801104e:	f849 3b04 	str.w	r3, [r9], #4
 8011052:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011056:	d8e5      	bhi.n	8011024 <__mdiff+0x88>
 8011058:	1b33      	subs	r3, r6, r4
 801105a:	3b15      	subs	r3, #21
 801105c:	f023 0303 	bic.w	r3, r3, #3
 8011060:	3415      	adds	r4, #21
 8011062:	3304      	adds	r3, #4
 8011064:	42a6      	cmp	r6, r4
 8011066:	bf38      	it	cc
 8011068:	2304      	movcc	r3, #4
 801106a:	441d      	add	r5, r3
 801106c:	445b      	add	r3, fp
 801106e:	461e      	mov	r6, r3
 8011070:	462c      	mov	r4, r5
 8011072:	4544      	cmp	r4, r8
 8011074:	d30e      	bcc.n	8011094 <__mdiff+0xf8>
 8011076:	f108 0103 	add.w	r1, r8, #3
 801107a:	1b49      	subs	r1, r1, r5
 801107c:	f021 0103 	bic.w	r1, r1, #3
 8011080:	3d03      	subs	r5, #3
 8011082:	45a8      	cmp	r8, r5
 8011084:	bf38      	it	cc
 8011086:	2100      	movcc	r1, #0
 8011088:	440b      	add	r3, r1
 801108a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801108e:	b191      	cbz	r1, 80110b6 <__mdiff+0x11a>
 8011090:	6117      	str	r7, [r2, #16]
 8011092:	e79d      	b.n	8010fd0 <__mdiff+0x34>
 8011094:	f854 1b04 	ldr.w	r1, [r4], #4
 8011098:	46e6      	mov	lr, ip
 801109a:	0c08      	lsrs	r0, r1, #16
 801109c:	fa1c fc81 	uxtah	ip, ip, r1
 80110a0:	4471      	add	r1, lr
 80110a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80110a6:	b289      	uxth	r1, r1
 80110a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80110ac:	f846 1b04 	str.w	r1, [r6], #4
 80110b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80110b4:	e7dd      	b.n	8011072 <__mdiff+0xd6>
 80110b6:	3f01      	subs	r7, #1
 80110b8:	e7e7      	b.n	801108a <__mdiff+0xee>
 80110ba:	bf00      	nop
 80110bc:	080136f1 	.word	0x080136f1
 80110c0:	08013702 	.word	0x08013702

080110c4 <__ulp>:
 80110c4:	b082      	sub	sp, #8
 80110c6:	ed8d 0b00 	vstr	d0, [sp]
 80110ca:	9a01      	ldr	r2, [sp, #4]
 80110cc:	4b0f      	ldr	r3, [pc, #60]	@ (801110c <__ulp+0x48>)
 80110ce:	4013      	ands	r3, r2
 80110d0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	dc08      	bgt.n	80110ea <__ulp+0x26>
 80110d8:	425b      	negs	r3, r3
 80110da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80110de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80110e2:	da04      	bge.n	80110ee <__ulp+0x2a>
 80110e4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80110e8:	4113      	asrs	r3, r2
 80110ea:	2200      	movs	r2, #0
 80110ec:	e008      	b.n	8011100 <__ulp+0x3c>
 80110ee:	f1a2 0314 	sub.w	r3, r2, #20
 80110f2:	2b1e      	cmp	r3, #30
 80110f4:	bfda      	itte	le
 80110f6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80110fa:	40da      	lsrle	r2, r3
 80110fc:	2201      	movgt	r2, #1
 80110fe:	2300      	movs	r3, #0
 8011100:	4619      	mov	r1, r3
 8011102:	4610      	mov	r0, r2
 8011104:	ec41 0b10 	vmov	d0, r0, r1
 8011108:	b002      	add	sp, #8
 801110a:	4770      	bx	lr
 801110c:	7ff00000 	.word	0x7ff00000

08011110 <__b2d>:
 8011110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011114:	6906      	ldr	r6, [r0, #16]
 8011116:	f100 0814 	add.w	r8, r0, #20
 801111a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801111e:	1f37      	subs	r7, r6, #4
 8011120:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011124:	4610      	mov	r0, r2
 8011126:	f7ff fd4b 	bl	8010bc0 <__hi0bits>
 801112a:	f1c0 0320 	rsb	r3, r0, #32
 801112e:	280a      	cmp	r0, #10
 8011130:	600b      	str	r3, [r1, #0]
 8011132:	491b      	ldr	r1, [pc, #108]	@ (80111a0 <__b2d+0x90>)
 8011134:	dc15      	bgt.n	8011162 <__b2d+0x52>
 8011136:	f1c0 0c0b 	rsb	ip, r0, #11
 801113a:	fa22 f30c 	lsr.w	r3, r2, ip
 801113e:	45b8      	cmp	r8, r7
 8011140:	ea43 0501 	orr.w	r5, r3, r1
 8011144:	bf34      	ite	cc
 8011146:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801114a:	2300      	movcs	r3, #0
 801114c:	3015      	adds	r0, #21
 801114e:	fa02 f000 	lsl.w	r0, r2, r0
 8011152:	fa23 f30c 	lsr.w	r3, r3, ip
 8011156:	4303      	orrs	r3, r0
 8011158:	461c      	mov	r4, r3
 801115a:	ec45 4b10 	vmov	d0, r4, r5
 801115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011162:	45b8      	cmp	r8, r7
 8011164:	bf3a      	itte	cc
 8011166:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801116a:	f1a6 0708 	subcc.w	r7, r6, #8
 801116e:	2300      	movcs	r3, #0
 8011170:	380b      	subs	r0, #11
 8011172:	d012      	beq.n	801119a <__b2d+0x8a>
 8011174:	f1c0 0120 	rsb	r1, r0, #32
 8011178:	fa23 f401 	lsr.w	r4, r3, r1
 801117c:	4082      	lsls	r2, r0
 801117e:	4322      	orrs	r2, r4
 8011180:	4547      	cmp	r7, r8
 8011182:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011186:	bf8c      	ite	hi
 8011188:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801118c:	2200      	movls	r2, #0
 801118e:	4083      	lsls	r3, r0
 8011190:	40ca      	lsrs	r2, r1
 8011192:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011196:	4313      	orrs	r3, r2
 8011198:	e7de      	b.n	8011158 <__b2d+0x48>
 801119a:	ea42 0501 	orr.w	r5, r2, r1
 801119e:	e7db      	b.n	8011158 <__b2d+0x48>
 80111a0:	3ff00000 	.word	0x3ff00000

080111a4 <__d2b>:
 80111a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80111a8:	460f      	mov	r7, r1
 80111aa:	2101      	movs	r1, #1
 80111ac:	ec59 8b10 	vmov	r8, r9, d0
 80111b0:	4616      	mov	r6, r2
 80111b2:	f7ff fc13 	bl	80109dc <_Balloc>
 80111b6:	4604      	mov	r4, r0
 80111b8:	b930      	cbnz	r0, 80111c8 <__d2b+0x24>
 80111ba:	4602      	mov	r2, r0
 80111bc:	4b23      	ldr	r3, [pc, #140]	@ (801124c <__d2b+0xa8>)
 80111be:	4824      	ldr	r0, [pc, #144]	@ (8011250 <__d2b+0xac>)
 80111c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80111c4:	f7fe fd56 	bl	800fc74 <__assert_func>
 80111c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80111cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111d0:	b10d      	cbz	r5, 80111d6 <__d2b+0x32>
 80111d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80111d6:	9301      	str	r3, [sp, #4]
 80111d8:	f1b8 0300 	subs.w	r3, r8, #0
 80111dc:	d023      	beq.n	8011226 <__d2b+0x82>
 80111de:	4668      	mov	r0, sp
 80111e0:	9300      	str	r3, [sp, #0]
 80111e2:	f7ff fd0c 	bl	8010bfe <__lo0bits>
 80111e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80111ea:	b1d0      	cbz	r0, 8011222 <__d2b+0x7e>
 80111ec:	f1c0 0320 	rsb	r3, r0, #32
 80111f0:	fa02 f303 	lsl.w	r3, r2, r3
 80111f4:	430b      	orrs	r3, r1
 80111f6:	40c2      	lsrs	r2, r0
 80111f8:	6163      	str	r3, [r4, #20]
 80111fa:	9201      	str	r2, [sp, #4]
 80111fc:	9b01      	ldr	r3, [sp, #4]
 80111fe:	61a3      	str	r3, [r4, #24]
 8011200:	2b00      	cmp	r3, #0
 8011202:	bf0c      	ite	eq
 8011204:	2201      	moveq	r2, #1
 8011206:	2202      	movne	r2, #2
 8011208:	6122      	str	r2, [r4, #16]
 801120a:	b1a5      	cbz	r5, 8011236 <__d2b+0x92>
 801120c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011210:	4405      	add	r5, r0
 8011212:	603d      	str	r5, [r7, #0]
 8011214:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011218:	6030      	str	r0, [r6, #0]
 801121a:	4620      	mov	r0, r4
 801121c:	b003      	add	sp, #12
 801121e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011222:	6161      	str	r1, [r4, #20]
 8011224:	e7ea      	b.n	80111fc <__d2b+0x58>
 8011226:	a801      	add	r0, sp, #4
 8011228:	f7ff fce9 	bl	8010bfe <__lo0bits>
 801122c:	9b01      	ldr	r3, [sp, #4]
 801122e:	6163      	str	r3, [r4, #20]
 8011230:	3020      	adds	r0, #32
 8011232:	2201      	movs	r2, #1
 8011234:	e7e8      	b.n	8011208 <__d2b+0x64>
 8011236:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801123a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801123e:	6038      	str	r0, [r7, #0]
 8011240:	6918      	ldr	r0, [r3, #16]
 8011242:	f7ff fcbd 	bl	8010bc0 <__hi0bits>
 8011246:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801124a:	e7e5      	b.n	8011218 <__d2b+0x74>
 801124c:	080136f1 	.word	0x080136f1
 8011250:	08013702 	.word	0x08013702

08011254 <__ratio>:
 8011254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011258:	b085      	sub	sp, #20
 801125a:	e9cd 1000 	strd	r1, r0, [sp]
 801125e:	a902      	add	r1, sp, #8
 8011260:	f7ff ff56 	bl	8011110 <__b2d>
 8011264:	9800      	ldr	r0, [sp, #0]
 8011266:	a903      	add	r1, sp, #12
 8011268:	ec55 4b10 	vmov	r4, r5, d0
 801126c:	f7ff ff50 	bl	8011110 <__b2d>
 8011270:	9b01      	ldr	r3, [sp, #4]
 8011272:	6919      	ldr	r1, [r3, #16]
 8011274:	9b00      	ldr	r3, [sp, #0]
 8011276:	691b      	ldr	r3, [r3, #16]
 8011278:	1ac9      	subs	r1, r1, r3
 801127a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801127e:	1a9b      	subs	r3, r3, r2
 8011280:	ec5b ab10 	vmov	sl, fp, d0
 8011284:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011288:	2b00      	cmp	r3, #0
 801128a:	bfce      	itee	gt
 801128c:	462a      	movgt	r2, r5
 801128e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011292:	465a      	movle	r2, fp
 8011294:	462f      	mov	r7, r5
 8011296:	46d9      	mov	r9, fp
 8011298:	bfcc      	ite	gt
 801129a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801129e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80112a2:	464b      	mov	r3, r9
 80112a4:	4652      	mov	r2, sl
 80112a6:	4620      	mov	r0, r4
 80112a8:	4639      	mov	r1, r7
 80112aa:	f7ef faa7 	bl	80007fc <__aeabi_ddiv>
 80112ae:	ec41 0b10 	vmov	d0, r0, r1
 80112b2:	b005      	add	sp, #20
 80112b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080112b8 <__copybits>:
 80112b8:	3901      	subs	r1, #1
 80112ba:	b570      	push	{r4, r5, r6, lr}
 80112bc:	1149      	asrs	r1, r1, #5
 80112be:	6914      	ldr	r4, [r2, #16]
 80112c0:	3101      	adds	r1, #1
 80112c2:	f102 0314 	add.w	r3, r2, #20
 80112c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80112ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80112ce:	1f05      	subs	r5, r0, #4
 80112d0:	42a3      	cmp	r3, r4
 80112d2:	d30c      	bcc.n	80112ee <__copybits+0x36>
 80112d4:	1aa3      	subs	r3, r4, r2
 80112d6:	3b11      	subs	r3, #17
 80112d8:	f023 0303 	bic.w	r3, r3, #3
 80112dc:	3211      	adds	r2, #17
 80112de:	42a2      	cmp	r2, r4
 80112e0:	bf88      	it	hi
 80112e2:	2300      	movhi	r3, #0
 80112e4:	4418      	add	r0, r3
 80112e6:	2300      	movs	r3, #0
 80112e8:	4288      	cmp	r0, r1
 80112ea:	d305      	bcc.n	80112f8 <__copybits+0x40>
 80112ec:	bd70      	pop	{r4, r5, r6, pc}
 80112ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80112f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80112f6:	e7eb      	b.n	80112d0 <__copybits+0x18>
 80112f8:	f840 3b04 	str.w	r3, [r0], #4
 80112fc:	e7f4      	b.n	80112e8 <__copybits+0x30>

080112fe <__any_on>:
 80112fe:	f100 0214 	add.w	r2, r0, #20
 8011302:	6900      	ldr	r0, [r0, #16]
 8011304:	114b      	asrs	r3, r1, #5
 8011306:	4298      	cmp	r0, r3
 8011308:	b510      	push	{r4, lr}
 801130a:	db11      	blt.n	8011330 <__any_on+0x32>
 801130c:	dd0a      	ble.n	8011324 <__any_on+0x26>
 801130e:	f011 011f 	ands.w	r1, r1, #31
 8011312:	d007      	beq.n	8011324 <__any_on+0x26>
 8011314:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011318:	fa24 f001 	lsr.w	r0, r4, r1
 801131c:	fa00 f101 	lsl.w	r1, r0, r1
 8011320:	428c      	cmp	r4, r1
 8011322:	d10b      	bne.n	801133c <__any_on+0x3e>
 8011324:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011328:	4293      	cmp	r3, r2
 801132a:	d803      	bhi.n	8011334 <__any_on+0x36>
 801132c:	2000      	movs	r0, #0
 801132e:	bd10      	pop	{r4, pc}
 8011330:	4603      	mov	r3, r0
 8011332:	e7f7      	b.n	8011324 <__any_on+0x26>
 8011334:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011338:	2900      	cmp	r1, #0
 801133a:	d0f5      	beq.n	8011328 <__any_on+0x2a>
 801133c:	2001      	movs	r0, #1
 801133e:	e7f6      	b.n	801132e <__any_on+0x30>

08011340 <sulp>:
 8011340:	b570      	push	{r4, r5, r6, lr}
 8011342:	4604      	mov	r4, r0
 8011344:	460d      	mov	r5, r1
 8011346:	ec45 4b10 	vmov	d0, r4, r5
 801134a:	4616      	mov	r6, r2
 801134c:	f7ff feba 	bl	80110c4 <__ulp>
 8011350:	ec51 0b10 	vmov	r0, r1, d0
 8011354:	b17e      	cbz	r6, 8011376 <sulp+0x36>
 8011356:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801135a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801135e:	2b00      	cmp	r3, #0
 8011360:	dd09      	ble.n	8011376 <sulp+0x36>
 8011362:	051b      	lsls	r3, r3, #20
 8011364:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011368:	2400      	movs	r4, #0
 801136a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801136e:	4622      	mov	r2, r4
 8011370:	462b      	mov	r3, r5
 8011372:	f7ef f919 	bl	80005a8 <__aeabi_dmul>
 8011376:	ec41 0b10 	vmov	d0, r0, r1
 801137a:	bd70      	pop	{r4, r5, r6, pc}
 801137c:	0000      	movs	r0, r0
	...

08011380 <_strtod_l>:
 8011380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011384:	b09f      	sub	sp, #124	@ 0x7c
 8011386:	460c      	mov	r4, r1
 8011388:	9217      	str	r2, [sp, #92]	@ 0x5c
 801138a:	2200      	movs	r2, #0
 801138c:	921a      	str	r2, [sp, #104]	@ 0x68
 801138e:	9005      	str	r0, [sp, #20]
 8011390:	f04f 0a00 	mov.w	sl, #0
 8011394:	f04f 0b00 	mov.w	fp, #0
 8011398:	460a      	mov	r2, r1
 801139a:	9219      	str	r2, [sp, #100]	@ 0x64
 801139c:	7811      	ldrb	r1, [r2, #0]
 801139e:	292b      	cmp	r1, #43	@ 0x2b
 80113a0:	d04a      	beq.n	8011438 <_strtod_l+0xb8>
 80113a2:	d838      	bhi.n	8011416 <_strtod_l+0x96>
 80113a4:	290d      	cmp	r1, #13
 80113a6:	d832      	bhi.n	801140e <_strtod_l+0x8e>
 80113a8:	2908      	cmp	r1, #8
 80113aa:	d832      	bhi.n	8011412 <_strtod_l+0x92>
 80113ac:	2900      	cmp	r1, #0
 80113ae:	d03b      	beq.n	8011428 <_strtod_l+0xa8>
 80113b0:	2200      	movs	r2, #0
 80113b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80113b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80113b6:	782a      	ldrb	r2, [r5, #0]
 80113b8:	2a30      	cmp	r2, #48	@ 0x30
 80113ba:	f040 80b3 	bne.w	8011524 <_strtod_l+0x1a4>
 80113be:	786a      	ldrb	r2, [r5, #1]
 80113c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80113c4:	2a58      	cmp	r2, #88	@ 0x58
 80113c6:	d16e      	bne.n	80114a6 <_strtod_l+0x126>
 80113c8:	9302      	str	r3, [sp, #8]
 80113ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113cc:	9301      	str	r3, [sp, #4]
 80113ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	4a8e      	ldr	r2, [pc, #568]	@ (801160c <_strtod_l+0x28c>)
 80113d4:	9805      	ldr	r0, [sp, #20]
 80113d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80113d8:	a919      	add	r1, sp, #100	@ 0x64
 80113da:	f001 faeb 	bl	80129b4 <__gethex>
 80113de:	f010 060f 	ands.w	r6, r0, #15
 80113e2:	4604      	mov	r4, r0
 80113e4:	d005      	beq.n	80113f2 <_strtod_l+0x72>
 80113e6:	2e06      	cmp	r6, #6
 80113e8:	d128      	bne.n	801143c <_strtod_l+0xbc>
 80113ea:	3501      	adds	r5, #1
 80113ec:	2300      	movs	r3, #0
 80113ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80113f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80113f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	f040 858e 	bne.w	8011f16 <_strtod_l+0xb96>
 80113fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113fc:	b1cb      	cbz	r3, 8011432 <_strtod_l+0xb2>
 80113fe:	4652      	mov	r2, sl
 8011400:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011404:	ec43 2b10 	vmov	d0, r2, r3
 8011408:	b01f      	add	sp, #124	@ 0x7c
 801140a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801140e:	2920      	cmp	r1, #32
 8011410:	d1ce      	bne.n	80113b0 <_strtod_l+0x30>
 8011412:	3201      	adds	r2, #1
 8011414:	e7c1      	b.n	801139a <_strtod_l+0x1a>
 8011416:	292d      	cmp	r1, #45	@ 0x2d
 8011418:	d1ca      	bne.n	80113b0 <_strtod_l+0x30>
 801141a:	2101      	movs	r1, #1
 801141c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801141e:	1c51      	adds	r1, r2, #1
 8011420:	9119      	str	r1, [sp, #100]	@ 0x64
 8011422:	7852      	ldrb	r2, [r2, #1]
 8011424:	2a00      	cmp	r2, #0
 8011426:	d1c5      	bne.n	80113b4 <_strtod_l+0x34>
 8011428:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801142a:	9419      	str	r4, [sp, #100]	@ 0x64
 801142c:	2b00      	cmp	r3, #0
 801142e:	f040 8570 	bne.w	8011f12 <_strtod_l+0xb92>
 8011432:	4652      	mov	r2, sl
 8011434:	465b      	mov	r3, fp
 8011436:	e7e5      	b.n	8011404 <_strtod_l+0x84>
 8011438:	2100      	movs	r1, #0
 801143a:	e7ef      	b.n	801141c <_strtod_l+0x9c>
 801143c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801143e:	b13a      	cbz	r2, 8011450 <_strtod_l+0xd0>
 8011440:	2135      	movs	r1, #53	@ 0x35
 8011442:	a81c      	add	r0, sp, #112	@ 0x70
 8011444:	f7ff ff38 	bl	80112b8 <__copybits>
 8011448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801144a:	9805      	ldr	r0, [sp, #20]
 801144c:	f7ff fb06 	bl	8010a5c <_Bfree>
 8011450:	3e01      	subs	r6, #1
 8011452:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011454:	2e04      	cmp	r6, #4
 8011456:	d806      	bhi.n	8011466 <_strtod_l+0xe6>
 8011458:	e8df f006 	tbb	[pc, r6]
 801145c:	201d0314 	.word	0x201d0314
 8011460:	14          	.byte	0x14
 8011461:	00          	.byte	0x00
 8011462:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011466:	05e1      	lsls	r1, r4, #23
 8011468:	bf48      	it	mi
 801146a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801146e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011472:	0d1b      	lsrs	r3, r3, #20
 8011474:	051b      	lsls	r3, r3, #20
 8011476:	2b00      	cmp	r3, #0
 8011478:	d1bb      	bne.n	80113f2 <_strtod_l+0x72>
 801147a:	f7fe fbb9 	bl	800fbf0 <__errno>
 801147e:	2322      	movs	r3, #34	@ 0x22
 8011480:	6003      	str	r3, [r0, #0]
 8011482:	e7b6      	b.n	80113f2 <_strtod_l+0x72>
 8011484:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011488:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801148c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011490:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011494:	e7e7      	b.n	8011466 <_strtod_l+0xe6>
 8011496:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011614 <_strtod_l+0x294>
 801149a:	e7e4      	b.n	8011466 <_strtod_l+0xe6>
 801149c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80114a0:	f04f 3aff 	mov.w	sl, #4294967295
 80114a4:	e7df      	b.n	8011466 <_strtod_l+0xe6>
 80114a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114a8:	1c5a      	adds	r2, r3, #1
 80114aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80114ac:	785b      	ldrb	r3, [r3, #1]
 80114ae:	2b30      	cmp	r3, #48	@ 0x30
 80114b0:	d0f9      	beq.n	80114a6 <_strtod_l+0x126>
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d09d      	beq.n	80113f2 <_strtod_l+0x72>
 80114b6:	2301      	movs	r3, #1
 80114b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80114ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80114be:	2300      	movs	r3, #0
 80114c0:	9308      	str	r3, [sp, #32]
 80114c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80114c4:	461f      	mov	r7, r3
 80114c6:	220a      	movs	r2, #10
 80114c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80114ca:	7805      	ldrb	r5, [r0, #0]
 80114cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80114d0:	b2d9      	uxtb	r1, r3
 80114d2:	2909      	cmp	r1, #9
 80114d4:	d928      	bls.n	8011528 <_strtod_l+0x1a8>
 80114d6:	494e      	ldr	r1, [pc, #312]	@ (8011610 <_strtod_l+0x290>)
 80114d8:	2201      	movs	r2, #1
 80114da:	f001 f9bf 	bl	801285c <strncmp>
 80114de:	2800      	cmp	r0, #0
 80114e0:	d032      	beq.n	8011548 <_strtod_l+0x1c8>
 80114e2:	2000      	movs	r0, #0
 80114e4:	462a      	mov	r2, r5
 80114e6:	4681      	mov	r9, r0
 80114e8:	463d      	mov	r5, r7
 80114ea:	4603      	mov	r3, r0
 80114ec:	2a65      	cmp	r2, #101	@ 0x65
 80114ee:	d001      	beq.n	80114f4 <_strtod_l+0x174>
 80114f0:	2a45      	cmp	r2, #69	@ 0x45
 80114f2:	d114      	bne.n	801151e <_strtod_l+0x19e>
 80114f4:	b91d      	cbnz	r5, 80114fe <_strtod_l+0x17e>
 80114f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114f8:	4302      	orrs	r2, r0
 80114fa:	d095      	beq.n	8011428 <_strtod_l+0xa8>
 80114fc:	2500      	movs	r5, #0
 80114fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011500:	1c62      	adds	r2, r4, #1
 8011502:	9219      	str	r2, [sp, #100]	@ 0x64
 8011504:	7862      	ldrb	r2, [r4, #1]
 8011506:	2a2b      	cmp	r2, #43	@ 0x2b
 8011508:	d077      	beq.n	80115fa <_strtod_l+0x27a>
 801150a:	2a2d      	cmp	r2, #45	@ 0x2d
 801150c:	d07b      	beq.n	8011606 <_strtod_l+0x286>
 801150e:	f04f 0c00 	mov.w	ip, #0
 8011512:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011516:	2909      	cmp	r1, #9
 8011518:	f240 8082 	bls.w	8011620 <_strtod_l+0x2a0>
 801151c:	9419      	str	r4, [sp, #100]	@ 0x64
 801151e:	f04f 0800 	mov.w	r8, #0
 8011522:	e0a2      	b.n	801166a <_strtod_l+0x2ea>
 8011524:	2300      	movs	r3, #0
 8011526:	e7c7      	b.n	80114b8 <_strtod_l+0x138>
 8011528:	2f08      	cmp	r7, #8
 801152a:	bfd5      	itete	le
 801152c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801152e:	9908      	ldrgt	r1, [sp, #32]
 8011530:	fb02 3301 	mlale	r3, r2, r1, r3
 8011534:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011538:	f100 0001 	add.w	r0, r0, #1
 801153c:	bfd4      	ite	le
 801153e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011540:	9308      	strgt	r3, [sp, #32]
 8011542:	3701      	adds	r7, #1
 8011544:	9019      	str	r0, [sp, #100]	@ 0x64
 8011546:	e7bf      	b.n	80114c8 <_strtod_l+0x148>
 8011548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801154a:	1c5a      	adds	r2, r3, #1
 801154c:	9219      	str	r2, [sp, #100]	@ 0x64
 801154e:	785a      	ldrb	r2, [r3, #1]
 8011550:	b37f      	cbz	r7, 80115b2 <_strtod_l+0x232>
 8011552:	4681      	mov	r9, r0
 8011554:	463d      	mov	r5, r7
 8011556:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801155a:	2b09      	cmp	r3, #9
 801155c:	d912      	bls.n	8011584 <_strtod_l+0x204>
 801155e:	2301      	movs	r3, #1
 8011560:	e7c4      	b.n	80114ec <_strtod_l+0x16c>
 8011562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011564:	1c5a      	adds	r2, r3, #1
 8011566:	9219      	str	r2, [sp, #100]	@ 0x64
 8011568:	785a      	ldrb	r2, [r3, #1]
 801156a:	3001      	adds	r0, #1
 801156c:	2a30      	cmp	r2, #48	@ 0x30
 801156e:	d0f8      	beq.n	8011562 <_strtod_l+0x1e2>
 8011570:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011574:	2b08      	cmp	r3, #8
 8011576:	f200 84d3 	bhi.w	8011f20 <_strtod_l+0xba0>
 801157a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801157c:	930c      	str	r3, [sp, #48]	@ 0x30
 801157e:	4681      	mov	r9, r0
 8011580:	2000      	movs	r0, #0
 8011582:	4605      	mov	r5, r0
 8011584:	3a30      	subs	r2, #48	@ 0x30
 8011586:	f100 0301 	add.w	r3, r0, #1
 801158a:	d02a      	beq.n	80115e2 <_strtod_l+0x262>
 801158c:	4499      	add	r9, r3
 801158e:	eb00 0c05 	add.w	ip, r0, r5
 8011592:	462b      	mov	r3, r5
 8011594:	210a      	movs	r1, #10
 8011596:	4563      	cmp	r3, ip
 8011598:	d10d      	bne.n	80115b6 <_strtod_l+0x236>
 801159a:	1c69      	adds	r1, r5, #1
 801159c:	4401      	add	r1, r0
 801159e:	4428      	add	r0, r5
 80115a0:	2808      	cmp	r0, #8
 80115a2:	dc16      	bgt.n	80115d2 <_strtod_l+0x252>
 80115a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80115a6:	230a      	movs	r3, #10
 80115a8:	fb03 2300 	mla	r3, r3, r0, r2
 80115ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80115ae:	2300      	movs	r3, #0
 80115b0:	e018      	b.n	80115e4 <_strtod_l+0x264>
 80115b2:	4638      	mov	r0, r7
 80115b4:	e7da      	b.n	801156c <_strtod_l+0x1ec>
 80115b6:	2b08      	cmp	r3, #8
 80115b8:	f103 0301 	add.w	r3, r3, #1
 80115bc:	dc03      	bgt.n	80115c6 <_strtod_l+0x246>
 80115be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80115c0:	434e      	muls	r6, r1
 80115c2:	960a      	str	r6, [sp, #40]	@ 0x28
 80115c4:	e7e7      	b.n	8011596 <_strtod_l+0x216>
 80115c6:	2b10      	cmp	r3, #16
 80115c8:	bfde      	ittt	le
 80115ca:	9e08      	ldrle	r6, [sp, #32]
 80115cc:	434e      	mulle	r6, r1
 80115ce:	9608      	strle	r6, [sp, #32]
 80115d0:	e7e1      	b.n	8011596 <_strtod_l+0x216>
 80115d2:	280f      	cmp	r0, #15
 80115d4:	dceb      	bgt.n	80115ae <_strtod_l+0x22e>
 80115d6:	9808      	ldr	r0, [sp, #32]
 80115d8:	230a      	movs	r3, #10
 80115da:	fb03 2300 	mla	r3, r3, r0, r2
 80115de:	9308      	str	r3, [sp, #32]
 80115e0:	e7e5      	b.n	80115ae <_strtod_l+0x22e>
 80115e2:	4629      	mov	r1, r5
 80115e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80115e6:	1c50      	adds	r0, r2, #1
 80115e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80115ea:	7852      	ldrb	r2, [r2, #1]
 80115ec:	4618      	mov	r0, r3
 80115ee:	460d      	mov	r5, r1
 80115f0:	e7b1      	b.n	8011556 <_strtod_l+0x1d6>
 80115f2:	f04f 0900 	mov.w	r9, #0
 80115f6:	2301      	movs	r3, #1
 80115f8:	e77d      	b.n	80114f6 <_strtod_l+0x176>
 80115fa:	f04f 0c00 	mov.w	ip, #0
 80115fe:	1ca2      	adds	r2, r4, #2
 8011600:	9219      	str	r2, [sp, #100]	@ 0x64
 8011602:	78a2      	ldrb	r2, [r4, #2]
 8011604:	e785      	b.n	8011512 <_strtod_l+0x192>
 8011606:	f04f 0c01 	mov.w	ip, #1
 801160a:	e7f8      	b.n	80115fe <_strtod_l+0x27e>
 801160c:	08013870 	.word	0x08013870
 8011610:	08013858 	.word	0x08013858
 8011614:	7ff00000 	.word	0x7ff00000
 8011618:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801161a:	1c51      	adds	r1, r2, #1
 801161c:	9119      	str	r1, [sp, #100]	@ 0x64
 801161e:	7852      	ldrb	r2, [r2, #1]
 8011620:	2a30      	cmp	r2, #48	@ 0x30
 8011622:	d0f9      	beq.n	8011618 <_strtod_l+0x298>
 8011624:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011628:	2908      	cmp	r1, #8
 801162a:	f63f af78 	bhi.w	801151e <_strtod_l+0x19e>
 801162e:	3a30      	subs	r2, #48	@ 0x30
 8011630:	920e      	str	r2, [sp, #56]	@ 0x38
 8011632:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011634:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011636:	f04f 080a 	mov.w	r8, #10
 801163a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801163c:	1c56      	adds	r6, r2, #1
 801163e:	9619      	str	r6, [sp, #100]	@ 0x64
 8011640:	7852      	ldrb	r2, [r2, #1]
 8011642:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011646:	f1be 0f09 	cmp.w	lr, #9
 801164a:	d939      	bls.n	80116c0 <_strtod_l+0x340>
 801164c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801164e:	1a76      	subs	r6, r6, r1
 8011650:	2e08      	cmp	r6, #8
 8011652:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011656:	dc03      	bgt.n	8011660 <_strtod_l+0x2e0>
 8011658:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801165a:	4588      	cmp	r8, r1
 801165c:	bfa8      	it	ge
 801165e:	4688      	movge	r8, r1
 8011660:	f1bc 0f00 	cmp.w	ip, #0
 8011664:	d001      	beq.n	801166a <_strtod_l+0x2ea>
 8011666:	f1c8 0800 	rsb	r8, r8, #0
 801166a:	2d00      	cmp	r5, #0
 801166c:	d14e      	bne.n	801170c <_strtod_l+0x38c>
 801166e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011670:	4308      	orrs	r0, r1
 8011672:	f47f aebe 	bne.w	80113f2 <_strtod_l+0x72>
 8011676:	2b00      	cmp	r3, #0
 8011678:	f47f aed6 	bne.w	8011428 <_strtod_l+0xa8>
 801167c:	2a69      	cmp	r2, #105	@ 0x69
 801167e:	d028      	beq.n	80116d2 <_strtod_l+0x352>
 8011680:	dc25      	bgt.n	80116ce <_strtod_l+0x34e>
 8011682:	2a49      	cmp	r2, #73	@ 0x49
 8011684:	d025      	beq.n	80116d2 <_strtod_l+0x352>
 8011686:	2a4e      	cmp	r2, #78	@ 0x4e
 8011688:	f47f aece 	bne.w	8011428 <_strtod_l+0xa8>
 801168c:	499b      	ldr	r1, [pc, #620]	@ (80118fc <_strtod_l+0x57c>)
 801168e:	a819      	add	r0, sp, #100	@ 0x64
 8011690:	f001 fbb2 	bl	8012df8 <__match>
 8011694:	2800      	cmp	r0, #0
 8011696:	f43f aec7 	beq.w	8011428 <_strtod_l+0xa8>
 801169a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	2b28      	cmp	r3, #40	@ 0x28
 80116a0:	d12e      	bne.n	8011700 <_strtod_l+0x380>
 80116a2:	4997      	ldr	r1, [pc, #604]	@ (8011900 <_strtod_l+0x580>)
 80116a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80116a6:	a819      	add	r0, sp, #100	@ 0x64
 80116a8:	f001 fbba 	bl	8012e20 <__hexnan>
 80116ac:	2805      	cmp	r0, #5
 80116ae:	d127      	bne.n	8011700 <_strtod_l+0x380>
 80116b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80116b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80116b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80116ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80116be:	e698      	b.n	80113f2 <_strtod_l+0x72>
 80116c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80116c2:	fb08 2101 	mla	r1, r8, r1, r2
 80116c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80116ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80116cc:	e7b5      	b.n	801163a <_strtod_l+0x2ba>
 80116ce:	2a6e      	cmp	r2, #110	@ 0x6e
 80116d0:	e7da      	b.n	8011688 <_strtod_l+0x308>
 80116d2:	498c      	ldr	r1, [pc, #560]	@ (8011904 <_strtod_l+0x584>)
 80116d4:	a819      	add	r0, sp, #100	@ 0x64
 80116d6:	f001 fb8f 	bl	8012df8 <__match>
 80116da:	2800      	cmp	r0, #0
 80116dc:	f43f aea4 	beq.w	8011428 <_strtod_l+0xa8>
 80116e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80116e2:	4989      	ldr	r1, [pc, #548]	@ (8011908 <_strtod_l+0x588>)
 80116e4:	3b01      	subs	r3, #1
 80116e6:	a819      	add	r0, sp, #100	@ 0x64
 80116e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80116ea:	f001 fb85 	bl	8012df8 <__match>
 80116ee:	b910      	cbnz	r0, 80116f6 <_strtod_l+0x376>
 80116f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80116f2:	3301      	adds	r3, #1
 80116f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80116f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011918 <_strtod_l+0x598>
 80116fa:	f04f 0a00 	mov.w	sl, #0
 80116fe:	e678      	b.n	80113f2 <_strtod_l+0x72>
 8011700:	4882      	ldr	r0, [pc, #520]	@ (801190c <_strtod_l+0x58c>)
 8011702:	f001 f8e1 	bl	80128c8 <nan>
 8011706:	ec5b ab10 	vmov	sl, fp, d0
 801170a:	e672      	b.n	80113f2 <_strtod_l+0x72>
 801170c:	eba8 0309 	sub.w	r3, r8, r9
 8011710:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011712:	9309      	str	r3, [sp, #36]	@ 0x24
 8011714:	2f00      	cmp	r7, #0
 8011716:	bf08      	it	eq
 8011718:	462f      	moveq	r7, r5
 801171a:	2d10      	cmp	r5, #16
 801171c:	462c      	mov	r4, r5
 801171e:	bfa8      	it	ge
 8011720:	2410      	movge	r4, #16
 8011722:	f7ee fec7 	bl	80004b4 <__aeabi_ui2d>
 8011726:	2d09      	cmp	r5, #9
 8011728:	4682      	mov	sl, r0
 801172a:	468b      	mov	fp, r1
 801172c:	dc13      	bgt.n	8011756 <_strtod_l+0x3d6>
 801172e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011730:	2b00      	cmp	r3, #0
 8011732:	f43f ae5e 	beq.w	80113f2 <_strtod_l+0x72>
 8011736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011738:	dd78      	ble.n	801182c <_strtod_l+0x4ac>
 801173a:	2b16      	cmp	r3, #22
 801173c:	dc5f      	bgt.n	80117fe <_strtod_l+0x47e>
 801173e:	4974      	ldr	r1, [pc, #464]	@ (8011910 <_strtod_l+0x590>)
 8011740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011748:	4652      	mov	r2, sl
 801174a:	465b      	mov	r3, fp
 801174c:	f7ee ff2c 	bl	80005a8 <__aeabi_dmul>
 8011750:	4682      	mov	sl, r0
 8011752:	468b      	mov	fp, r1
 8011754:	e64d      	b.n	80113f2 <_strtod_l+0x72>
 8011756:	4b6e      	ldr	r3, [pc, #440]	@ (8011910 <_strtod_l+0x590>)
 8011758:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801175c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011760:	f7ee ff22 	bl	80005a8 <__aeabi_dmul>
 8011764:	4682      	mov	sl, r0
 8011766:	9808      	ldr	r0, [sp, #32]
 8011768:	468b      	mov	fp, r1
 801176a:	f7ee fea3 	bl	80004b4 <__aeabi_ui2d>
 801176e:	4602      	mov	r2, r0
 8011770:	460b      	mov	r3, r1
 8011772:	4650      	mov	r0, sl
 8011774:	4659      	mov	r1, fp
 8011776:	f7ee fd61 	bl	800023c <__adddf3>
 801177a:	2d0f      	cmp	r5, #15
 801177c:	4682      	mov	sl, r0
 801177e:	468b      	mov	fp, r1
 8011780:	ddd5      	ble.n	801172e <_strtod_l+0x3ae>
 8011782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011784:	1b2c      	subs	r4, r5, r4
 8011786:	441c      	add	r4, r3
 8011788:	2c00      	cmp	r4, #0
 801178a:	f340 8096 	ble.w	80118ba <_strtod_l+0x53a>
 801178e:	f014 030f 	ands.w	r3, r4, #15
 8011792:	d00a      	beq.n	80117aa <_strtod_l+0x42a>
 8011794:	495e      	ldr	r1, [pc, #376]	@ (8011910 <_strtod_l+0x590>)
 8011796:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801179a:	4652      	mov	r2, sl
 801179c:	465b      	mov	r3, fp
 801179e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117a2:	f7ee ff01 	bl	80005a8 <__aeabi_dmul>
 80117a6:	4682      	mov	sl, r0
 80117a8:	468b      	mov	fp, r1
 80117aa:	f034 040f 	bics.w	r4, r4, #15
 80117ae:	d073      	beq.n	8011898 <_strtod_l+0x518>
 80117b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80117b4:	dd48      	ble.n	8011848 <_strtod_l+0x4c8>
 80117b6:	2400      	movs	r4, #0
 80117b8:	46a0      	mov	r8, r4
 80117ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80117bc:	46a1      	mov	r9, r4
 80117be:	9a05      	ldr	r2, [sp, #20]
 80117c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011918 <_strtod_l+0x598>
 80117c4:	2322      	movs	r3, #34	@ 0x22
 80117c6:	6013      	str	r3, [r2, #0]
 80117c8:	f04f 0a00 	mov.w	sl, #0
 80117cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f43f ae0f 	beq.w	80113f2 <_strtod_l+0x72>
 80117d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80117d6:	9805      	ldr	r0, [sp, #20]
 80117d8:	f7ff f940 	bl	8010a5c <_Bfree>
 80117dc:	9805      	ldr	r0, [sp, #20]
 80117de:	4649      	mov	r1, r9
 80117e0:	f7ff f93c 	bl	8010a5c <_Bfree>
 80117e4:	9805      	ldr	r0, [sp, #20]
 80117e6:	4641      	mov	r1, r8
 80117e8:	f7ff f938 	bl	8010a5c <_Bfree>
 80117ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80117ee:	9805      	ldr	r0, [sp, #20]
 80117f0:	f7ff f934 	bl	8010a5c <_Bfree>
 80117f4:	9805      	ldr	r0, [sp, #20]
 80117f6:	4621      	mov	r1, r4
 80117f8:	f7ff f930 	bl	8010a5c <_Bfree>
 80117fc:	e5f9      	b.n	80113f2 <_strtod_l+0x72>
 80117fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011800:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011804:	4293      	cmp	r3, r2
 8011806:	dbbc      	blt.n	8011782 <_strtod_l+0x402>
 8011808:	4c41      	ldr	r4, [pc, #260]	@ (8011910 <_strtod_l+0x590>)
 801180a:	f1c5 050f 	rsb	r5, r5, #15
 801180e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011812:	4652      	mov	r2, sl
 8011814:	465b      	mov	r3, fp
 8011816:	e9d1 0100 	ldrd	r0, r1, [r1]
 801181a:	f7ee fec5 	bl	80005a8 <__aeabi_dmul>
 801181e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011820:	1b5d      	subs	r5, r3, r5
 8011822:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011826:	e9d4 2300 	ldrd	r2, r3, [r4]
 801182a:	e78f      	b.n	801174c <_strtod_l+0x3cc>
 801182c:	3316      	adds	r3, #22
 801182e:	dba8      	blt.n	8011782 <_strtod_l+0x402>
 8011830:	4b37      	ldr	r3, [pc, #220]	@ (8011910 <_strtod_l+0x590>)
 8011832:	eba9 0808 	sub.w	r8, r9, r8
 8011836:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801183a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801183e:	4650      	mov	r0, sl
 8011840:	4659      	mov	r1, fp
 8011842:	f7ee ffdb 	bl	80007fc <__aeabi_ddiv>
 8011846:	e783      	b.n	8011750 <_strtod_l+0x3d0>
 8011848:	4b32      	ldr	r3, [pc, #200]	@ (8011914 <_strtod_l+0x594>)
 801184a:	9308      	str	r3, [sp, #32]
 801184c:	2300      	movs	r3, #0
 801184e:	1124      	asrs	r4, r4, #4
 8011850:	4650      	mov	r0, sl
 8011852:	4659      	mov	r1, fp
 8011854:	461e      	mov	r6, r3
 8011856:	2c01      	cmp	r4, #1
 8011858:	dc21      	bgt.n	801189e <_strtod_l+0x51e>
 801185a:	b10b      	cbz	r3, 8011860 <_strtod_l+0x4e0>
 801185c:	4682      	mov	sl, r0
 801185e:	468b      	mov	fp, r1
 8011860:	492c      	ldr	r1, [pc, #176]	@ (8011914 <_strtod_l+0x594>)
 8011862:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011866:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801186a:	4652      	mov	r2, sl
 801186c:	465b      	mov	r3, fp
 801186e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011872:	f7ee fe99 	bl	80005a8 <__aeabi_dmul>
 8011876:	4b28      	ldr	r3, [pc, #160]	@ (8011918 <_strtod_l+0x598>)
 8011878:	460a      	mov	r2, r1
 801187a:	400b      	ands	r3, r1
 801187c:	4927      	ldr	r1, [pc, #156]	@ (801191c <_strtod_l+0x59c>)
 801187e:	428b      	cmp	r3, r1
 8011880:	4682      	mov	sl, r0
 8011882:	d898      	bhi.n	80117b6 <_strtod_l+0x436>
 8011884:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011888:	428b      	cmp	r3, r1
 801188a:	bf86      	itte	hi
 801188c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011920 <_strtod_l+0x5a0>
 8011890:	f04f 3aff 	movhi.w	sl, #4294967295
 8011894:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011898:	2300      	movs	r3, #0
 801189a:	9308      	str	r3, [sp, #32]
 801189c:	e07a      	b.n	8011994 <_strtod_l+0x614>
 801189e:	07e2      	lsls	r2, r4, #31
 80118a0:	d505      	bpl.n	80118ae <_strtod_l+0x52e>
 80118a2:	9b08      	ldr	r3, [sp, #32]
 80118a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a8:	f7ee fe7e 	bl	80005a8 <__aeabi_dmul>
 80118ac:	2301      	movs	r3, #1
 80118ae:	9a08      	ldr	r2, [sp, #32]
 80118b0:	3208      	adds	r2, #8
 80118b2:	3601      	adds	r6, #1
 80118b4:	1064      	asrs	r4, r4, #1
 80118b6:	9208      	str	r2, [sp, #32]
 80118b8:	e7cd      	b.n	8011856 <_strtod_l+0x4d6>
 80118ba:	d0ed      	beq.n	8011898 <_strtod_l+0x518>
 80118bc:	4264      	negs	r4, r4
 80118be:	f014 020f 	ands.w	r2, r4, #15
 80118c2:	d00a      	beq.n	80118da <_strtod_l+0x55a>
 80118c4:	4b12      	ldr	r3, [pc, #72]	@ (8011910 <_strtod_l+0x590>)
 80118c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118ca:	4650      	mov	r0, sl
 80118cc:	4659      	mov	r1, fp
 80118ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d2:	f7ee ff93 	bl	80007fc <__aeabi_ddiv>
 80118d6:	4682      	mov	sl, r0
 80118d8:	468b      	mov	fp, r1
 80118da:	1124      	asrs	r4, r4, #4
 80118dc:	d0dc      	beq.n	8011898 <_strtod_l+0x518>
 80118de:	2c1f      	cmp	r4, #31
 80118e0:	dd20      	ble.n	8011924 <_strtod_l+0x5a4>
 80118e2:	2400      	movs	r4, #0
 80118e4:	46a0      	mov	r8, r4
 80118e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80118e8:	46a1      	mov	r9, r4
 80118ea:	9a05      	ldr	r2, [sp, #20]
 80118ec:	2322      	movs	r3, #34	@ 0x22
 80118ee:	f04f 0a00 	mov.w	sl, #0
 80118f2:	f04f 0b00 	mov.w	fp, #0
 80118f6:	6013      	str	r3, [r2, #0]
 80118f8:	e768      	b.n	80117cc <_strtod_l+0x44c>
 80118fa:	bf00      	nop
 80118fc:	0801360d 	.word	0x0801360d
 8011900:	0801385c 	.word	0x0801385c
 8011904:	08013605 	.word	0x08013605
 8011908:	08013678 	.word	0x08013678
 801190c:	08013674 	.word	0x08013674
 8011910:	08013790 	.word	0x08013790
 8011914:	08013768 	.word	0x08013768
 8011918:	7ff00000 	.word	0x7ff00000
 801191c:	7ca00000 	.word	0x7ca00000
 8011920:	7fefffff 	.word	0x7fefffff
 8011924:	f014 0310 	ands.w	r3, r4, #16
 8011928:	bf18      	it	ne
 801192a:	236a      	movne	r3, #106	@ 0x6a
 801192c:	4ea9      	ldr	r6, [pc, #676]	@ (8011bd4 <_strtod_l+0x854>)
 801192e:	9308      	str	r3, [sp, #32]
 8011930:	4650      	mov	r0, sl
 8011932:	4659      	mov	r1, fp
 8011934:	2300      	movs	r3, #0
 8011936:	07e2      	lsls	r2, r4, #31
 8011938:	d504      	bpl.n	8011944 <_strtod_l+0x5c4>
 801193a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801193e:	f7ee fe33 	bl	80005a8 <__aeabi_dmul>
 8011942:	2301      	movs	r3, #1
 8011944:	1064      	asrs	r4, r4, #1
 8011946:	f106 0608 	add.w	r6, r6, #8
 801194a:	d1f4      	bne.n	8011936 <_strtod_l+0x5b6>
 801194c:	b10b      	cbz	r3, 8011952 <_strtod_l+0x5d2>
 801194e:	4682      	mov	sl, r0
 8011950:	468b      	mov	fp, r1
 8011952:	9b08      	ldr	r3, [sp, #32]
 8011954:	b1b3      	cbz	r3, 8011984 <_strtod_l+0x604>
 8011956:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801195a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801195e:	2b00      	cmp	r3, #0
 8011960:	4659      	mov	r1, fp
 8011962:	dd0f      	ble.n	8011984 <_strtod_l+0x604>
 8011964:	2b1f      	cmp	r3, #31
 8011966:	dd55      	ble.n	8011a14 <_strtod_l+0x694>
 8011968:	2b34      	cmp	r3, #52	@ 0x34
 801196a:	bfde      	ittt	le
 801196c:	f04f 33ff 	movle.w	r3, #4294967295
 8011970:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011974:	4093      	lslle	r3, r2
 8011976:	f04f 0a00 	mov.w	sl, #0
 801197a:	bfcc      	ite	gt
 801197c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011980:	ea03 0b01 	andle.w	fp, r3, r1
 8011984:	2200      	movs	r2, #0
 8011986:	2300      	movs	r3, #0
 8011988:	4650      	mov	r0, sl
 801198a:	4659      	mov	r1, fp
 801198c:	f7ef f874 	bl	8000a78 <__aeabi_dcmpeq>
 8011990:	2800      	cmp	r0, #0
 8011992:	d1a6      	bne.n	80118e2 <_strtod_l+0x562>
 8011994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011996:	9300      	str	r3, [sp, #0]
 8011998:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801199a:	9805      	ldr	r0, [sp, #20]
 801199c:	462b      	mov	r3, r5
 801199e:	463a      	mov	r2, r7
 80119a0:	f7ff f8c4 	bl	8010b2c <__s2b>
 80119a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80119a6:	2800      	cmp	r0, #0
 80119a8:	f43f af05 	beq.w	80117b6 <_strtod_l+0x436>
 80119ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119ae:	2a00      	cmp	r2, #0
 80119b0:	eba9 0308 	sub.w	r3, r9, r8
 80119b4:	bfa8      	it	ge
 80119b6:	2300      	movge	r3, #0
 80119b8:	9312      	str	r3, [sp, #72]	@ 0x48
 80119ba:	2400      	movs	r4, #0
 80119bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80119c0:	9316      	str	r3, [sp, #88]	@ 0x58
 80119c2:	46a0      	mov	r8, r4
 80119c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119c6:	9805      	ldr	r0, [sp, #20]
 80119c8:	6859      	ldr	r1, [r3, #4]
 80119ca:	f7ff f807 	bl	80109dc <_Balloc>
 80119ce:	4681      	mov	r9, r0
 80119d0:	2800      	cmp	r0, #0
 80119d2:	f43f aef4 	beq.w	80117be <_strtod_l+0x43e>
 80119d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119d8:	691a      	ldr	r2, [r3, #16]
 80119da:	3202      	adds	r2, #2
 80119dc:	f103 010c 	add.w	r1, r3, #12
 80119e0:	0092      	lsls	r2, r2, #2
 80119e2:	300c      	adds	r0, #12
 80119e4:	f7fe f931 	bl	800fc4a <memcpy>
 80119e8:	ec4b ab10 	vmov	d0, sl, fp
 80119ec:	9805      	ldr	r0, [sp, #20]
 80119ee:	aa1c      	add	r2, sp, #112	@ 0x70
 80119f0:	a91b      	add	r1, sp, #108	@ 0x6c
 80119f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80119f6:	f7ff fbd5 	bl	80111a4 <__d2b>
 80119fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80119fc:	2800      	cmp	r0, #0
 80119fe:	f43f aede 	beq.w	80117be <_strtod_l+0x43e>
 8011a02:	9805      	ldr	r0, [sp, #20]
 8011a04:	2101      	movs	r1, #1
 8011a06:	f7ff f927 	bl	8010c58 <__i2b>
 8011a0a:	4680      	mov	r8, r0
 8011a0c:	b948      	cbnz	r0, 8011a22 <_strtod_l+0x6a2>
 8011a0e:	f04f 0800 	mov.w	r8, #0
 8011a12:	e6d4      	b.n	80117be <_strtod_l+0x43e>
 8011a14:	f04f 32ff 	mov.w	r2, #4294967295
 8011a18:	fa02 f303 	lsl.w	r3, r2, r3
 8011a1c:	ea03 0a0a 	and.w	sl, r3, sl
 8011a20:	e7b0      	b.n	8011984 <_strtod_l+0x604>
 8011a22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011a24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011a26:	2d00      	cmp	r5, #0
 8011a28:	bfab      	itete	ge
 8011a2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011a2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011a2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011a30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011a32:	bfac      	ite	ge
 8011a34:	18ef      	addge	r7, r5, r3
 8011a36:	1b5e      	sublt	r6, r3, r5
 8011a38:	9b08      	ldr	r3, [sp, #32]
 8011a3a:	1aed      	subs	r5, r5, r3
 8011a3c:	4415      	add	r5, r2
 8011a3e:	4b66      	ldr	r3, [pc, #408]	@ (8011bd8 <_strtod_l+0x858>)
 8011a40:	3d01      	subs	r5, #1
 8011a42:	429d      	cmp	r5, r3
 8011a44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011a48:	da50      	bge.n	8011aec <_strtod_l+0x76c>
 8011a4a:	1b5b      	subs	r3, r3, r5
 8011a4c:	2b1f      	cmp	r3, #31
 8011a4e:	eba2 0203 	sub.w	r2, r2, r3
 8011a52:	f04f 0101 	mov.w	r1, #1
 8011a56:	dc3d      	bgt.n	8011ad4 <_strtod_l+0x754>
 8011a58:	fa01 f303 	lsl.w	r3, r1, r3
 8011a5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011a5e:	2300      	movs	r3, #0
 8011a60:	9310      	str	r3, [sp, #64]	@ 0x40
 8011a62:	18bd      	adds	r5, r7, r2
 8011a64:	9b08      	ldr	r3, [sp, #32]
 8011a66:	42af      	cmp	r7, r5
 8011a68:	4416      	add	r6, r2
 8011a6a:	441e      	add	r6, r3
 8011a6c:	463b      	mov	r3, r7
 8011a6e:	bfa8      	it	ge
 8011a70:	462b      	movge	r3, r5
 8011a72:	42b3      	cmp	r3, r6
 8011a74:	bfa8      	it	ge
 8011a76:	4633      	movge	r3, r6
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	bfc2      	ittt	gt
 8011a7c:	1aed      	subgt	r5, r5, r3
 8011a7e:	1af6      	subgt	r6, r6, r3
 8011a80:	1aff      	subgt	r7, r7, r3
 8011a82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	dd16      	ble.n	8011ab6 <_strtod_l+0x736>
 8011a88:	4641      	mov	r1, r8
 8011a8a:	9805      	ldr	r0, [sp, #20]
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	f7ff f9a3 	bl	8010dd8 <__pow5mult>
 8011a92:	4680      	mov	r8, r0
 8011a94:	2800      	cmp	r0, #0
 8011a96:	d0ba      	beq.n	8011a0e <_strtod_l+0x68e>
 8011a98:	4601      	mov	r1, r0
 8011a9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011a9c:	9805      	ldr	r0, [sp, #20]
 8011a9e:	f7ff f8f1 	bl	8010c84 <__multiply>
 8011aa2:	900e      	str	r0, [sp, #56]	@ 0x38
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	f43f ae8a 	beq.w	80117be <_strtod_l+0x43e>
 8011aaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011aac:	9805      	ldr	r0, [sp, #20]
 8011aae:	f7fe ffd5 	bl	8010a5c <_Bfree>
 8011ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ab4:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ab6:	2d00      	cmp	r5, #0
 8011ab8:	dc1d      	bgt.n	8011af6 <_strtod_l+0x776>
 8011aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	dd23      	ble.n	8011b08 <_strtod_l+0x788>
 8011ac0:	4649      	mov	r1, r9
 8011ac2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011ac4:	9805      	ldr	r0, [sp, #20]
 8011ac6:	f7ff f987 	bl	8010dd8 <__pow5mult>
 8011aca:	4681      	mov	r9, r0
 8011acc:	b9e0      	cbnz	r0, 8011b08 <_strtod_l+0x788>
 8011ace:	f04f 0900 	mov.w	r9, #0
 8011ad2:	e674      	b.n	80117be <_strtod_l+0x43e>
 8011ad4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011ad8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011adc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011ae0:	35e2      	adds	r5, #226	@ 0xe2
 8011ae2:	fa01 f305 	lsl.w	r3, r1, r5
 8011ae6:	9310      	str	r3, [sp, #64]	@ 0x40
 8011ae8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011aea:	e7ba      	b.n	8011a62 <_strtod_l+0x6e2>
 8011aec:	2300      	movs	r3, #0
 8011aee:	9310      	str	r3, [sp, #64]	@ 0x40
 8011af0:	2301      	movs	r3, #1
 8011af2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011af4:	e7b5      	b.n	8011a62 <_strtod_l+0x6e2>
 8011af6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011af8:	9805      	ldr	r0, [sp, #20]
 8011afa:	462a      	mov	r2, r5
 8011afc:	f7ff f9c6 	bl	8010e8c <__lshift>
 8011b00:	901a      	str	r0, [sp, #104]	@ 0x68
 8011b02:	2800      	cmp	r0, #0
 8011b04:	d1d9      	bne.n	8011aba <_strtod_l+0x73a>
 8011b06:	e65a      	b.n	80117be <_strtod_l+0x43e>
 8011b08:	2e00      	cmp	r6, #0
 8011b0a:	dd07      	ble.n	8011b1c <_strtod_l+0x79c>
 8011b0c:	4649      	mov	r1, r9
 8011b0e:	9805      	ldr	r0, [sp, #20]
 8011b10:	4632      	mov	r2, r6
 8011b12:	f7ff f9bb 	bl	8010e8c <__lshift>
 8011b16:	4681      	mov	r9, r0
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	d0d8      	beq.n	8011ace <_strtod_l+0x74e>
 8011b1c:	2f00      	cmp	r7, #0
 8011b1e:	dd08      	ble.n	8011b32 <_strtod_l+0x7b2>
 8011b20:	4641      	mov	r1, r8
 8011b22:	9805      	ldr	r0, [sp, #20]
 8011b24:	463a      	mov	r2, r7
 8011b26:	f7ff f9b1 	bl	8010e8c <__lshift>
 8011b2a:	4680      	mov	r8, r0
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	f43f ae46 	beq.w	80117be <_strtod_l+0x43e>
 8011b32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011b34:	9805      	ldr	r0, [sp, #20]
 8011b36:	464a      	mov	r2, r9
 8011b38:	f7ff fa30 	bl	8010f9c <__mdiff>
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	f43f ae3d 	beq.w	80117be <_strtod_l+0x43e>
 8011b44:	68c3      	ldr	r3, [r0, #12]
 8011b46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011b48:	2300      	movs	r3, #0
 8011b4a:	60c3      	str	r3, [r0, #12]
 8011b4c:	4641      	mov	r1, r8
 8011b4e:	f7ff fa09 	bl	8010f64 <__mcmp>
 8011b52:	2800      	cmp	r0, #0
 8011b54:	da46      	bge.n	8011be4 <_strtod_l+0x864>
 8011b56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b58:	ea53 030a 	orrs.w	r3, r3, sl
 8011b5c:	d16c      	bne.n	8011c38 <_strtod_l+0x8b8>
 8011b5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d168      	bne.n	8011c38 <_strtod_l+0x8b8>
 8011b66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011b6a:	0d1b      	lsrs	r3, r3, #20
 8011b6c:	051b      	lsls	r3, r3, #20
 8011b6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011b72:	d961      	bls.n	8011c38 <_strtod_l+0x8b8>
 8011b74:	6963      	ldr	r3, [r4, #20]
 8011b76:	b913      	cbnz	r3, 8011b7e <_strtod_l+0x7fe>
 8011b78:	6923      	ldr	r3, [r4, #16]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	dd5c      	ble.n	8011c38 <_strtod_l+0x8b8>
 8011b7e:	4621      	mov	r1, r4
 8011b80:	2201      	movs	r2, #1
 8011b82:	9805      	ldr	r0, [sp, #20]
 8011b84:	f7ff f982 	bl	8010e8c <__lshift>
 8011b88:	4641      	mov	r1, r8
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	f7ff f9ea 	bl	8010f64 <__mcmp>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	dd51      	ble.n	8011c38 <_strtod_l+0x8b8>
 8011b94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011b98:	9a08      	ldr	r2, [sp, #32]
 8011b9a:	0d1b      	lsrs	r3, r3, #20
 8011b9c:	051b      	lsls	r3, r3, #20
 8011b9e:	2a00      	cmp	r2, #0
 8011ba0:	d06b      	beq.n	8011c7a <_strtod_l+0x8fa>
 8011ba2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011ba6:	d868      	bhi.n	8011c7a <_strtod_l+0x8fa>
 8011ba8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011bac:	f67f ae9d 	bls.w	80118ea <_strtod_l+0x56a>
 8011bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8011bdc <_strtod_l+0x85c>)
 8011bb2:	4650      	mov	r0, sl
 8011bb4:	4659      	mov	r1, fp
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	f7ee fcf6 	bl	80005a8 <__aeabi_dmul>
 8011bbc:	4b08      	ldr	r3, [pc, #32]	@ (8011be0 <_strtod_l+0x860>)
 8011bbe:	400b      	ands	r3, r1
 8011bc0:	4682      	mov	sl, r0
 8011bc2:	468b      	mov	fp, r1
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	f47f ae05 	bne.w	80117d4 <_strtod_l+0x454>
 8011bca:	9a05      	ldr	r2, [sp, #20]
 8011bcc:	2322      	movs	r3, #34	@ 0x22
 8011bce:	6013      	str	r3, [r2, #0]
 8011bd0:	e600      	b.n	80117d4 <_strtod_l+0x454>
 8011bd2:	bf00      	nop
 8011bd4:	08013888 	.word	0x08013888
 8011bd8:	fffffc02 	.word	0xfffffc02
 8011bdc:	39500000 	.word	0x39500000
 8011be0:	7ff00000 	.word	0x7ff00000
 8011be4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011be8:	d165      	bne.n	8011cb6 <_strtod_l+0x936>
 8011bea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bf0:	b35a      	cbz	r2, 8011c4a <_strtod_l+0x8ca>
 8011bf2:	4a9f      	ldr	r2, [pc, #636]	@ (8011e70 <_strtod_l+0xaf0>)
 8011bf4:	4293      	cmp	r3, r2
 8011bf6:	d12b      	bne.n	8011c50 <_strtod_l+0x8d0>
 8011bf8:	9b08      	ldr	r3, [sp, #32]
 8011bfa:	4651      	mov	r1, sl
 8011bfc:	b303      	cbz	r3, 8011c40 <_strtod_l+0x8c0>
 8011bfe:	4b9d      	ldr	r3, [pc, #628]	@ (8011e74 <_strtod_l+0xaf4>)
 8011c00:	465a      	mov	r2, fp
 8011c02:	4013      	ands	r3, r2
 8011c04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011c08:	f04f 32ff 	mov.w	r2, #4294967295
 8011c0c:	d81b      	bhi.n	8011c46 <_strtod_l+0x8c6>
 8011c0e:	0d1b      	lsrs	r3, r3, #20
 8011c10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011c14:	fa02 f303 	lsl.w	r3, r2, r3
 8011c18:	4299      	cmp	r1, r3
 8011c1a:	d119      	bne.n	8011c50 <_strtod_l+0x8d0>
 8011c1c:	4b96      	ldr	r3, [pc, #600]	@ (8011e78 <_strtod_l+0xaf8>)
 8011c1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d102      	bne.n	8011c2a <_strtod_l+0x8aa>
 8011c24:	3101      	adds	r1, #1
 8011c26:	f43f adca 	beq.w	80117be <_strtod_l+0x43e>
 8011c2a:	4b92      	ldr	r3, [pc, #584]	@ (8011e74 <_strtod_l+0xaf4>)
 8011c2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c2e:	401a      	ands	r2, r3
 8011c30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011c34:	f04f 0a00 	mov.w	sl, #0
 8011c38:	9b08      	ldr	r3, [sp, #32]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d1b8      	bne.n	8011bb0 <_strtod_l+0x830>
 8011c3e:	e5c9      	b.n	80117d4 <_strtod_l+0x454>
 8011c40:	f04f 33ff 	mov.w	r3, #4294967295
 8011c44:	e7e8      	b.n	8011c18 <_strtod_l+0x898>
 8011c46:	4613      	mov	r3, r2
 8011c48:	e7e6      	b.n	8011c18 <_strtod_l+0x898>
 8011c4a:	ea53 030a 	orrs.w	r3, r3, sl
 8011c4e:	d0a1      	beq.n	8011b94 <_strtod_l+0x814>
 8011c50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011c52:	b1db      	cbz	r3, 8011c8c <_strtod_l+0x90c>
 8011c54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c56:	4213      	tst	r3, r2
 8011c58:	d0ee      	beq.n	8011c38 <_strtod_l+0x8b8>
 8011c5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c5c:	9a08      	ldr	r2, [sp, #32]
 8011c5e:	4650      	mov	r0, sl
 8011c60:	4659      	mov	r1, fp
 8011c62:	b1bb      	cbz	r3, 8011c94 <_strtod_l+0x914>
 8011c64:	f7ff fb6c 	bl	8011340 <sulp>
 8011c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c6c:	ec53 2b10 	vmov	r2, r3, d0
 8011c70:	f7ee fae4 	bl	800023c <__adddf3>
 8011c74:	4682      	mov	sl, r0
 8011c76:	468b      	mov	fp, r1
 8011c78:	e7de      	b.n	8011c38 <_strtod_l+0x8b8>
 8011c7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011c7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011c82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011c86:	f04f 3aff 	mov.w	sl, #4294967295
 8011c8a:	e7d5      	b.n	8011c38 <_strtod_l+0x8b8>
 8011c8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011c8e:	ea13 0f0a 	tst.w	r3, sl
 8011c92:	e7e1      	b.n	8011c58 <_strtod_l+0x8d8>
 8011c94:	f7ff fb54 	bl	8011340 <sulp>
 8011c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c9c:	ec53 2b10 	vmov	r2, r3, d0
 8011ca0:	f7ee faca 	bl	8000238 <__aeabi_dsub>
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	4682      	mov	sl, r0
 8011caa:	468b      	mov	fp, r1
 8011cac:	f7ee fee4 	bl	8000a78 <__aeabi_dcmpeq>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d0c1      	beq.n	8011c38 <_strtod_l+0x8b8>
 8011cb4:	e619      	b.n	80118ea <_strtod_l+0x56a>
 8011cb6:	4641      	mov	r1, r8
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f7ff facb 	bl	8011254 <__ratio>
 8011cbe:	ec57 6b10 	vmov	r6, r7, d0
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011cc8:	4630      	mov	r0, r6
 8011cca:	4639      	mov	r1, r7
 8011ccc:	f7ee fee8 	bl	8000aa0 <__aeabi_dcmple>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d06f      	beq.n	8011db4 <_strtod_l+0xa34>
 8011cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d17a      	bne.n	8011dd0 <_strtod_l+0xa50>
 8011cda:	f1ba 0f00 	cmp.w	sl, #0
 8011cde:	d158      	bne.n	8011d92 <_strtod_l+0xa12>
 8011ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d15a      	bne.n	8011da0 <_strtod_l+0xa20>
 8011cea:	4b64      	ldr	r3, [pc, #400]	@ (8011e7c <_strtod_l+0xafc>)
 8011cec:	2200      	movs	r2, #0
 8011cee:	4630      	mov	r0, r6
 8011cf0:	4639      	mov	r1, r7
 8011cf2:	f7ee fecb 	bl	8000a8c <__aeabi_dcmplt>
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	d159      	bne.n	8011dae <_strtod_l+0xa2e>
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	4639      	mov	r1, r7
 8011cfe:	4b60      	ldr	r3, [pc, #384]	@ (8011e80 <_strtod_l+0xb00>)
 8011d00:	2200      	movs	r2, #0
 8011d02:	f7ee fc51 	bl	80005a8 <__aeabi_dmul>
 8011d06:	4606      	mov	r6, r0
 8011d08:	460f      	mov	r7, r1
 8011d0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011d0e:	9606      	str	r6, [sp, #24]
 8011d10:	9307      	str	r3, [sp, #28]
 8011d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011d16:	4d57      	ldr	r5, [pc, #348]	@ (8011e74 <_strtod_l+0xaf4>)
 8011d18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d1e:	401d      	ands	r5, r3
 8011d20:	4b58      	ldr	r3, [pc, #352]	@ (8011e84 <_strtod_l+0xb04>)
 8011d22:	429d      	cmp	r5, r3
 8011d24:	f040 80b2 	bne.w	8011e8c <_strtod_l+0xb0c>
 8011d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011d2e:	ec4b ab10 	vmov	d0, sl, fp
 8011d32:	f7ff f9c7 	bl	80110c4 <__ulp>
 8011d36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011d3a:	ec51 0b10 	vmov	r0, r1, d0
 8011d3e:	f7ee fc33 	bl	80005a8 <__aeabi_dmul>
 8011d42:	4652      	mov	r2, sl
 8011d44:	465b      	mov	r3, fp
 8011d46:	f7ee fa79 	bl	800023c <__adddf3>
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	4949      	ldr	r1, [pc, #292]	@ (8011e74 <_strtod_l+0xaf4>)
 8011d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8011e88 <_strtod_l+0xb08>)
 8011d50:	4019      	ands	r1, r3
 8011d52:	4291      	cmp	r1, r2
 8011d54:	4682      	mov	sl, r0
 8011d56:	d942      	bls.n	8011dde <_strtod_l+0xa5e>
 8011d58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011d5a:	4b47      	ldr	r3, [pc, #284]	@ (8011e78 <_strtod_l+0xaf8>)
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	d103      	bne.n	8011d68 <_strtod_l+0x9e8>
 8011d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d62:	3301      	adds	r3, #1
 8011d64:	f43f ad2b 	beq.w	80117be <_strtod_l+0x43e>
 8011d68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011e78 <_strtod_l+0xaf8>
 8011d6c:	f04f 3aff 	mov.w	sl, #4294967295
 8011d70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d72:	9805      	ldr	r0, [sp, #20]
 8011d74:	f7fe fe72 	bl	8010a5c <_Bfree>
 8011d78:	9805      	ldr	r0, [sp, #20]
 8011d7a:	4649      	mov	r1, r9
 8011d7c:	f7fe fe6e 	bl	8010a5c <_Bfree>
 8011d80:	9805      	ldr	r0, [sp, #20]
 8011d82:	4641      	mov	r1, r8
 8011d84:	f7fe fe6a 	bl	8010a5c <_Bfree>
 8011d88:	9805      	ldr	r0, [sp, #20]
 8011d8a:	4621      	mov	r1, r4
 8011d8c:	f7fe fe66 	bl	8010a5c <_Bfree>
 8011d90:	e618      	b.n	80119c4 <_strtod_l+0x644>
 8011d92:	f1ba 0f01 	cmp.w	sl, #1
 8011d96:	d103      	bne.n	8011da0 <_strtod_l+0xa20>
 8011d98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	f43f ada5 	beq.w	80118ea <_strtod_l+0x56a>
 8011da0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011e50 <_strtod_l+0xad0>
 8011da4:	4f35      	ldr	r7, [pc, #212]	@ (8011e7c <_strtod_l+0xafc>)
 8011da6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011daa:	2600      	movs	r6, #0
 8011dac:	e7b1      	b.n	8011d12 <_strtod_l+0x992>
 8011dae:	4f34      	ldr	r7, [pc, #208]	@ (8011e80 <_strtod_l+0xb00>)
 8011db0:	2600      	movs	r6, #0
 8011db2:	e7aa      	b.n	8011d0a <_strtod_l+0x98a>
 8011db4:	4b32      	ldr	r3, [pc, #200]	@ (8011e80 <_strtod_l+0xb00>)
 8011db6:	4630      	mov	r0, r6
 8011db8:	4639      	mov	r1, r7
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f7ee fbf4 	bl	80005a8 <__aeabi_dmul>
 8011dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011dc2:	4606      	mov	r6, r0
 8011dc4:	460f      	mov	r7, r1
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d09f      	beq.n	8011d0a <_strtod_l+0x98a>
 8011dca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011dce:	e7a0      	b.n	8011d12 <_strtod_l+0x992>
 8011dd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011e58 <_strtod_l+0xad8>
 8011dd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011dd8:	ec57 6b17 	vmov	r6, r7, d7
 8011ddc:	e799      	b.n	8011d12 <_strtod_l+0x992>
 8011dde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011de2:	9b08      	ldr	r3, [sp, #32]
 8011de4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d1c1      	bne.n	8011d70 <_strtod_l+0x9f0>
 8011dec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011df0:	0d1b      	lsrs	r3, r3, #20
 8011df2:	051b      	lsls	r3, r3, #20
 8011df4:	429d      	cmp	r5, r3
 8011df6:	d1bb      	bne.n	8011d70 <_strtod_l+0x9f0>
 8011df8:	4630      	mov	r0, r6
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	f7ee ff34 	bl	8000c68 <__aeabi_d2lz>
 8011e00:	f7ee fba4 	bl	800054c <__aeabi_l2d>
 8011e04:	4602      	mov	r2, r0
 8011e06:	460b      	mov	r3, r1
 8011e08:	4630      	mov	r0, r6
 8011e0a:	4639      	mov	r1, r7
 8011e0c:	f7ee fa14 	bl	8000238 <__aeabi_dsub>
 8011e10:	460b      	mov	r3, r1
 8011e12:	4602      	mov	r2, r0
 8011e14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011e18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e1e:	ea46 060a 	orr.w	r6, r6, sl
 8011e22:	431e      	orrs	r6, r3
 8011e24:	d06f      	beq.n	8011f06 <_strtod_l+0xb86>
 8011e26:	a30e      	add	r3, pc, #56	@ (adr r3, 8011e60 <_strtod_l+0xae0>)
 8011e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2c:	f7ee fe2e 	bl	8000a8c <__aeabi_dcmplt>
 8011e30:	2800      	cmp	r0, #0
 8011e32:	f47f accf 	bne.w	80117d4 <_strtod_l+0x454>
 8011e36:	a30c      	add	r3, pc, #48	@ (adr r3, 8011e68 <_strtod_l+0xae8>)
 8011e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e40:	f7ee fe42 	bl	8000ac8 <__aeabi_dcmpgt>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d093      	beq.n	8011d70 <_strtod_l+0x9f0>
 8011e48:	e4c4      	b.n	80117d4 <_strtod_l+0x454>
 8011e4a:	bf00      	nop
 8011e4c:	f3af 8000 	nop.w
 8011e50:	00000000 	.word	0x00000000
 8011e54:	bff00000 	.word	0xbff00000
 8011e58:	00000000 	.word	0x00000000
 8011e5c:	3ff00000 	.word	0x3ff00000
 8011e60:	94a03595 	.word	0x94a03595
 8011e64:	3fdfffff 	.word	0x3fdfffff
 8011e68:	35afe535 	.word	0x35afe535
 8011e6c:	3fe00000 	.word	0x3fe00000
 8011e70:	000fffff 	.word	0x000fffff
 8011e74:	7ff00000 	.word	0x7ff00000
 8011e78:	7fefffff 	.word	0x7fefffff
 8011e7c:	3ff00000 	.word	0x3ff00000
 8011e80:	3fe00000 	.word	0x3fe00000
 8011e84:	7fe00000 	.word	0x7fe00000
 8011e88:	7c9fffff 	.word	0x7c9fffff
 8011e8c:	9b08      	ldr	r3, [sp, #32]
 8011e8e:	b323      	cbz	r3, 8011eda <_strtod_l+0xb5a>
 8011e90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011e94:	d821      	bhi.n	8011eda <_strtod_l+0xb5a>
 8011e96:	a328      	add	r3, pc, #160	@ (adr r3, 8011f38 <_strtod_l+0xbb8>)
 8011e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	4639      	mov	r1, r7
 8011ea0:	f7ee fdfe 	bl	8000aa0 <__aeabi_dcmple>
 8011ea4:	b1a0      	cbz	r0, 8011ed0 <_strtod_l+0xb50>
 8011ea6:	4639      	mov	r1, r7
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	f7ee fe55 	bl	8000b58 <__aeabi_d2uiz>
 8011eae:	2801      	cmp	r0, #1
 8011eb0:	bf38      	it	cc
 8011eb2:	2001      	movcc	r0, #1
 8011eb4:	f7ee fafe 	bl	80004b4 <__aeabi_ui2d>
 8011eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011eba:	4606      	mov	r6, r0
 8011ebc:	460f      	mov	r7, r1
 8011ebe:	b9fb      	cbnz	r3, 8011f00 <_strtod_l+0xb80>
 8011ec0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011ec4:	9014      	str	r0, [sp, #80]	@ 0x50
 8011ec6:	9315      	str	r3, [sp, #84]	@ 0x54
 8011ec8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011ecc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011ed0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011ed2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011ed6:	1b5b      	subs	r3, r3, r5
 8011ed8:	9311      	str	r3, [sp, #68]	@ 0x44
 8011eda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011ede:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011ee2:	f7ff f8ef 	bl	80110c4 <__ulp>
 8011ee6:	4650      	mov	r0, sl
 8011ee8:	ec53 2b10 	vmov	r2, r3, d0
 8011eec:	4659      	mov	r1, fp
 8011eee:	f7ee fb5b 	bl	80005a8 <__aeabi_dmul>
 8011ef2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011ef6:	f7ee f9a1 	bl	800023c <__adddf3>
 8011efa:	4682      	mov	sl, r0
 8011efc:	468b      	mov	fp, r1
 8011efe:	e770      	b.n	8011de2 <_strtod_l+0xa62>
 8011f00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011f04:	e7e0      	b.n	8011ec8 <_strtod_l+0xb48>
 8011f06:	a30e      	add	r3, pc, #56	@ (adr r3, 8011f40 <_strtod_l+0xbc0>)
 8011f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0c:	f7ee fdbe 	bl	8000a8c <__aeabi_dcmplt>
 8011f10:	e798      	b.n	8011e44 <_strtod_l+0xac4>
 8011f12:	2300      	movs	r3, #0
 8011f14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011f18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f1a:	6013      	str	r3, [r2, #0]
 8011f1c:	f7ff ba6d 	b.w	80113fa <_strtod_l+0x7a>
 8011f20:	2a65      	cmp	r2, #101	@ 0x65
 8011f22:	f43f ab66 	beq.w	80115f2 <_strtod_l+0x272>
 8011f26:	2a45      	cmp	r2, #69	@ 0x45
 8011f28:	f43f ab63 	beq.w	80115f2 <_strtod_l+0x272>
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	f7ff bb9e 	b.w	801166e <_strtod_l+0x2ee>
 8011f32:	bf00      	nop
 8011f34:	f3af 8000 	nop.w
 8011f38:	ffc00000 	.word	0xffc00000
 8011f3c:	41dfffff 	.word	0x41dfffff
 8011f40:	94a03595 	.word	0x94a03595
 8011f44:	3fcfffff 	.word	0x3fcfffff

08011f48 <_strtod_r>:
 8011f48:	4b01      	ldr	r3, [pc, #4]	@ (8011f50 <_strtod_r+0x8>)
 8011f4a:	f7ff ba19 	b.w	8011380 <_strtod_l>
 8011f4e:	bf00      	nop
 8011f50:	20000088 	.word	0x20000088

08011f54 <_strtol_l.constprop.0>:
 8011f54:	2b24      	cmp	r3, #36	@ 0x24
 8011f56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f5a:	4686      	mov	lr, r0
 8011f5c:	4690      	mov	r8, r2
 8011f5e:	d801      	bhi.n	8011f64 <_strtol_l.constprop.0+0x10>
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d106      	bne.n	8011f72 <_strtol_l.constprop.0+0x1e>
 8011f64:	f7fd fe44 	bl	800fbf0 <__errno>
 8011f68:	2316      	movs	r3, #22
 8011f6a:	6003      	str	r3, [r0, #0]
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f72:	4834      	ldr	r0, [pc, #208]	@ (8012044 <_strtol_l.constprop.0+0xf0>)
 8011f74:	460d      	mov	r5, r1
 8011f76:	462a      	mov	r2, r5
 8011f78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f7c:	5d06      	ldrb	r6, [r0, r4]
 8011f7e:	f016 0608 	ands.w	r6, r6, #8
 8011f82:	d1f8      	bne.n	8011f76 <_strtol_l.constprop.0+0x22>
 8011f84:	2c2d      	cmp	r4, #45	@ 0x2d
 8011f86:	d12d      	bne.n	8011fe4 <_strtol_l.constprop.0+0x90>
 8011f88:	782c      	ldrb	r4, [r5, #0]
 8011f8a:	2601      	movs	r6, #1
 8011f8c:	1c95      	adds	r5, r2, #2
 8011f8e:	f033 0210 	bics.w	r2, r3, #16
 8011f92:	d109      	bne.n	8011fa8 <_strtol_l.constprop.0+0x54>
 8011f94:	2c30      	cmp	r4, #48	@ 0x30
 8011f96:	d12a      	bne.n	8011fee <_strtol_l.constprop.0+0x9a>
 8011f98:	782a      	ldrb	r2, [r5, #0]
 8011f9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011f9e:	2a58      	cmp	r2, #88	@ 0x58
 8011fa0:	d125      	bne.n	8011fee <_strtol_l.constprop.0+0x9a>
 8011fa2:	786c      	ldrb	r4, [r5, #1]
 8011fa4:	2310      	movs	r3, #16
 8011fa6:	3502      	adds	r5, #2
 8011fa8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011fac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	fbbc f9f3 	udiv	r9, ip, r3
 8011fb6:	4610      	mov	r0, r2
 8011fb8:	fb03 ca19 	mls	sl, r3, r9, ip
 8011fbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011fc0:	2f09      	cmp	r7, #9
 8011fc2:	d81b      	bhi.n	8011ffc <_strtol_l.constprop.0+0xa8>
 8011fc4:	463c      	mov	r4, r7
 8011fc6:	42a3      	cmp	r3, r4
 8011fc8:	dd27      	ble.n	801201a <_strtol_l.constprop.0+0xc6>
 8011fca:	1c57      	adds	r7, r2, #1
 8011fcc:	d007      	beq.n	8011fde <_strtol_l.constprop.0+0x8a>
 8011fce:	4581      	cmp	r9, r0
 8011fd0:	d320      	bcc.n	8012014 <_strtol_l.constprop.0+0xc0>
 8011fd2:	d101      	bne.n	8011fd8 <_strtol_l.constprop.0+0x84>
 8011fd4:	45a2      	cmp	sl, r4
 8011fd6:	db1d      	blt.n	8012014 <_strtol_l.constprop.0+0xc0>
 8011fd8:	fb00 4003 	mla	r0, r0, r3, r4
 8011fdc:	2201      	movs	r2, #1
 8011fde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011fe2:	e7eb      	b.n	8011fbc <_strtol_l.constprop.0+0x68>
 8011fe4:	2c2b      	cmp	r4, #43	@ 0x2b
 8011fe6:	bf04      	itt	eq
 8011fe8:	782c      	ldrbeq	r4, [r5, #0]
 8011fea:	1c95      	addeq	r5, r2, #2
 8011fec:	e7cf      	b.n	8011f8e <_strtol_l.constprop.0+0x3a>
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d1da      	bne.n	8011fa8 <_strtol_l.constprop.0+0x54>
 8011ff2:	2c30      	cmp	r4, #48	@ 0x30
 8011ff4:	bf0c      	ite	eq
 8011ff6:	2308      	moveq	r3, #8
 8011ff8:	230a      	movne	r3, #10
 8011ffa:	e7d5      	b.n	8011fa8 <_strtol_l.constprop.0+0x54>
 8011ffc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012000:	2f19      	cmp	r7, #25
 8012002:	d801      	bhi.n	8012008 <_strtol_l.constprop.0+0xb4>
 8012004:	3c37      	subs	r4, #55	@ 0x37
 8012006:	e7de      	b.n	8011fc6 <_strtol_l.constprop.0+0x72>
 8012008:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801200c:	2f19      	cmp	r7, #25
 801200e:	d804      	bhi.n	801201a <_strtol_l.constprop.0+0xc6>
 8012010:	3c57      	subs	r4, #87	@ 0x57
 8012012:	e7d8      	b.n	8011fc6 <_strtol_l.constprop.0+0x72>
 8012014:	f04f 32ff 	mov.w	r2, #4294967295
 8012018:	e7e1      	b.n	8011fde <_strtol_l.constprop.0+0x8a>
 801201a:	1c53      	adds	r3, r2, #1
 801201c:	d108      	bne.n	8012030 <_strtol_l.constprop.0+0xdc>
 801201e:	2322      	movs	r3, #34	@ 0x22
 8012020:	f8ce 3000 	str.w	r3, [lr]
 8012024:	4660      	mov	r0, ip
 8012026:	f1b8 0f00 	cmp.w	r8, #0
 801202a:	d0a0      	beq.n	8011f6e <_strtol_l.constprop.0+0x1a>
 801202c:	1e69      	subs	r1, r5, #1
 801202e:	e006      	b.n	801203e <_strtol_l.constprop.0+0xea>
 8012030:	b106      	cbz	r6, 8012034 <_strtol_l.constprop.0+0xe0>
 8012032:	4240      	negs	r0, r0
 8012034:	f1b8 0f00 	cmp.w	r8, #0
 8012038:	d099      	beq.n	8011f6e <_strtol_l.constprop.0+0x1a>
 801203a:	2a00      	cmp	r2, #0
 801203c:	d1f6      	bne.n	801202c <_strtol_l.constprop.0+0xd8>
 801203e:	f8c8 1000 	str.w	r1, [r8]
 8012042:	e794      	b.n	8011f6e <_strtol_l.constprop.0+0x1a>
 8012044:	080138b1 	.word	0x080138b1

08012048 <_strtol_r>:
 8012048:	f7ff bf84 	b.w	8011f54 <_strtol_l.constprop.0>

0801204c <__ssputs_r>:
 801204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012050:	688e      	ldr	r6, [r1, #8]
 8012052:	461f      	mov	r7, r3
 8012054:	42be      	cmp	r6, r7
 8012056:	680b      	ldr	r3, [r1, #0]
 8012058:	4682      	mov	sl, r0
 801205a:	460c      	mov	r4, r1
 801205c:	4690      	mov	r8, r2
 801205e:	d82d      	bhi.n	80120bc <__ssputs_r+0x70>
 8012060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012068:	d026      	beq.n	80120b8 <__ssputs_r+0x6c>
 801206a:	6965      	ldr	r5, [r4, #20]
 801206c:	6909      	ldr	r1, [r1, #16]
 801206e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012072:	eba3 0901 	sub.w	r9, r3, r1
 8012076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801207a:	1c7b      	adds	r3, r7, #1
 801207c:	444b      	add	r3, r9
 801207e:	106d      	asrs	r5, r5, #1
 8012080:	429d      	cmp	r5, r3
 8012082:	bf38      	it	cc
 8012084:	461d      	movcc	r5, r3
 8012086:	0553      	lsls	r3, r2, #21
 8012088:	d527      	bpl.n	80120da <__ssputs_r+0x8e>
 801208a:	4629      	mov	r1, r5
 801208c:	f7fc fc24 	bl	800e8d8 <_malloc_r>
 8012090:	4606      	mov	r6, r0
 8012092:	b360      	cbz	r0, 80120ee <__ssputs_r+0xa2>
 8012094:	6921      	ldr	r1, [r4, #16]
 8012096:	464a      	mov	r2, r9
 8012098:	f7fd fdd7 	bl	800fc4a <memcpy>
 801209c:	89a3      	ldrh	r3, [r4, #12]
 801209e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80120a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120a6:	81a3      	strh	r3, [r4, #12]
 80120a8:	6126      	str	r6, [r4, #16]
 80120aa:	6165      	str	r5, [r4, #20]
 80120ac:	444e      	add	r6, r9
 80120ae:	eba5 0509 	sub.w	r5, r5, r9
 80120b2:	6026      	str	r6, [r4, #0]
 80120b4:	60a5      	str	r5, [r4, #8]
 80120b6:	463e      	mov	r6, r7
 80120b8:	42be      	cmp	r6, r7
 80120ba:	d900      	bls.n	80120be <__ssputs_r+0x72>
 80120bc:	463e      	mov	r6, r7
 80120be:	6820      	ldr	r0, [r4, #0]
 80120c0:	4632      	mov	r2, r6
 80120c2:	4641      	mov	r1, r8
 80120c4:	f000 fbb0 	bl	8012828 <memmove>
 80120c8:	68a3      	ldr	r3, [r4, #8]
 80120ca:	1b9b      	subs	r3, r3, r6
 80120cc:	60a3      	str	r3, [r4, #8]
 80120ce:	6823      	ldr	r3, [r4, #0]
 80120d0:	4433      	add	r3, r6
 80120d2:	6023      	str	r3, [r4, #0]
 80120d4:	2000      	movs	r0, #0
 80120d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120da:	462a      	mov	r2, r5
 80120dc:	f000 ff4d 	bl	8012f7a <_realloc_r>
 80120e0:	4606      	mov	r6, r0
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d1e0      	bne.n	80120a8 <__ssputs_r+0x5c>
 80120e6:	6921      	ldr	r1, [r4, #16]
 80120e8:	4650      	mov	r0, sl
 80120ea:	f7fe fc2d 	bl	8010948 <_free_r>
 80120ee:	230c      	movs	r3, #12
 80120f0:	f8ca 3000 	str.w	r3, [sl]
 80120f4:	89a3      	ldrh	r3, [r4, #12]
 80120f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120fa:	81a3      	strh	r3, [r4, #12]
 80120fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012100:	e7e9      	b.n	80120d6 <__ssputs_r+0x8a>
	...

08012104 <_svfiprintf_r>:
 8012104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012108:	4698      	mov	r8, r3
 801210a:	898b      	ldrh	r3, [r1, #12]
 801210c:	061b      	lsls	r3, r3, #24
 801210e:	b09d      	sub	sp, #116	@ 0x74
 8012110:	4607      	mov	r7, r0
 8012112:	460d      	mov	r5, r1
 8012114:	4614      	mov	r4, r2
 8012116:	d510      	bpl.n	801213a <_svfiprintf_r+0x36>
 8012118:	690b      	ldr	r3, [r1, #16]
 801211a:	b973      	cbnz	r3, 801213a <_svfiprintf_r+0x36>
 801211c:	2140      	movs	r1, #64	@ 0x40
 801211e:	f7fc fbdb 	bl	800e8d8 <_malloc_r>
 8012122:	6028      	str	r0, [r5, #0]
 8012124:	6128      	str	r0, [r5, #16]
 8012126:	b930      	cbnz	r0, 8012136 <_svfiprintf_r+0x32>
 8012128:	230c      	movs	r3, #12
 801212a:	603b      	str	r3, [r7, #0]
 801212c:	f04f 30ff 	mov.w	r0, #4294967295
 8012130:	b01d      	add	sp, #116	@ 0x74
 8012132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012136:	2340      	movs	r3, #64	@ 0x40
 8012138:	616b      	str	r3, [r5, #20]
 801213a:	2300      	movs	r3, #0
 801213c:	9309      	str	r3, [sp, #36]	@ 0x24
 801213e:	2320      	movs	r3, #32
 8012140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012144:	f8cd 800c 	str.w	r8, [sp, #12]
 8012148:	2330      	movs	r3, #48	@ 0x30
 801214a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80122e8 <_svfiprintf_r+0x1e4>
 801214e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012152:	f04f 0901 	mov.w	r9, #1
 8012156:	4623      	mov	r3, r4
 8012158:	469a      	mov	sl, r3
 801215a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801215e:	b10a      	cbz	r2, 8012164 <_svfiprintf_r+0x60>
 8012160:	2a25      	cmp	r2, #37	@ 0x25
 8012162:	d1f9      	bne.n	8012158 <_svfiprintf_r+0x54>
 8012164:	ebba 0b04 	subs.w	fp, sl, r4
 8012168:	d00b      	beq.n	8012182 <_svfiprintf_r+0x7e>
 801216a:	465b      	mov	r3, fp
 801216c:	4622      	mov	r2, r4
 801216e:	4629      	mov	r1, r5
 8012170:	4638      	mov	r0, r7
 8012172:	f7ff ff6b 	bl	801204c <__ssputs_r>
 8012176:	3001      	adds	r0, #1
 8012178:	f000 80a7 	beq.w	80122ca <_svfiprintf_r+0x1c6>
 801217c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801217e:	445a      	add	r2, fp
 8012180:	9209      	str	r2, [sp, #36]	@ 0x24
 8012182:	f89a 3000 	ldrb.w	r3, [sl]
 8012186:	2b00      	cmp	r3, #0
 8012188:	f000 809f 	beq.w	80122ca <_svfiprintf_r+0x1c6>
 801218c:	2300      	movs	r3, #0
 801218e:	f04f 32ff 	mov.w	r2, #4294967295
 8012192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012196:	f10a 0a01 	add.w	sl, sl, #1
 801219a:	9304      	str	r3, [sp, #16]
 801219c:	9307      	str	r3, [sp, #28]
 801219e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80121a4:	4654      	mov	r4, sl
 80121a6:	2205      	movs	r2, #5
 80121a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121ac:	484e      	ldr	r0, [pc, #312]	@ (80122e8 <_svfiprintf_r+0x1e4>)
 80121ae:	f7ed ffe7 	bl	8000180 <memchr>
 80121b2:	9a04      	ldr	r2, [sp, #16]
 80121b4:	b9d8      	cbnz	r0, 80121ee <_svfiprintf_r+0xea>
 80121b6:	06d0      	lsls	r0, r2, #27
 80121b8:	bf44      	itt	mi
 80121ba:	2320      	movmi	r3, #32
 80121bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121c0:	0711      	lsls	r1, r2, #28
 80121c2:	bf44      	itt	mi
 80121c4:	232b      	movmi	r3, #43	@ 0x2b
 80121c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121ca:	f89a 3000 	ldrb.w	r3, [sl]
 80121ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80121d0:	d015      	beq.n	80121fe <_svfiprintf_r+0xfa>
 80121d2:	9a07      	ldr	r2, [sp, #28]
 80121d4:	4654      	mov	r4, sl
 80121d6:	2000      	movs	r0, #0
 80121d8:	f04f 0c0a 	mov.w	ip, #10
 80121dc:	4621      	mov	r1, r4
 80121de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121e2:	3b30      	subs	r3, #48	@ 0x30
 80121e4:	2b09      	cmp	r3, #9
 80121e6:	d94b      	bls.n	8012280 <_svfiprintf_r+0x17c>
 80121e8:	b1b0      	cbz	r0, 8012218 <_svfiprintf_r+0x114>
 80121ea:	9207      	str	r2, [sp, #28]
 80121ec:	e014      	b.n	8012218 <_svfiprintf_r+0x114>
 80121ee:	eba0 0308 	sub.w	r3, r0, r8
 80121f2:	fa09 f303 	lsl.w	r3, r9, r3
 80121f6:	4313      	orrs	r3, r2
 80121f8:	9304      	str	r3, [sp, #16]
 80121fa:	46a2      	mov	sl, r4
 80121fc:	e7d2      	b.n	80121a4 <_svfiprintf_r+0xa0>
 80121fe:	9b03      	ldr	r3, [sp, #12]
 8012200:	1d19      	adds	r1, r3, #4
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	9103      	str	r1, [sp, #12]
 8012206:	2b00      	cmp	r3, #0
 8012208:	bfbb      	ittet	lt
 801220a:	425b      	neglt	r3, r3
 801220c:	f042 0202 	orrlt.w	r2, r2, #2
 8012210:	9307      	strge	r3, [sp, #28]
 8012212:	9307      	strlt	r3, [sp, #28]
 8012214:	bfb8      	it	lt
 8012216:	9204      	strlt	r2, [sp, #16]
 8012218:	7823      	ldrb	r3, [r4, #0]
 801221a:	2b2e      	cmp	r3, #46	@ 0x2e
 801221c:	d10a      	bne.n	8012234 <_svfiprintf_r+0x130>
 801221e:	7863      	ldrb	r3, [r4, #1]
 8012220:	2b2a      	cmp	r3, #42	@ 0x2a
 8012222:	d132      	bne.n	801228a <_svfiprintf_r+0x186>
 8012224:	9b03      	ldr	r3, [sp, #12]
 8012226:	1d1a      	adds	r2, r3, #4
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	9203      	str	r2, [sp, #12]
 801222c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012230:	3402      	adds	r4, #2
 8012232:	9305      	str	r3, [sp, #20]
 8012234:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80122f8 <_svfiprintf_r+0x1f4>
 8012238:	7821      	ldrb	r1, [r4, #0]
 801223a:	2203      	movs	r2, #3
 801223c:	4650      	mov	r0, sl
 801223e:	f7ed ff9f 	bl	8000180 <memchr>
 8012242:	b138      	cbz	r0, 8012254 <_svfiprintf_r+0x150>
 8012244:	9b04      	ldr	r3, [sp, #16]
 8012246:	eba0 000a 	sub.w	r0, r0, sl
 801224a:	2240      	movs	r2, #64	@ 0x40
 801224c:	4082      	lsls	r2, r0
 801224e:	4313      	orrs	r3, r2
 8012250:	3401      	adds	r4, #1
 8012252:	9304      	str	r3, [sp, #16]
 8012254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012258:	4824      	ldr	r0, [pc, #144]	@ (80122ec <_svfiprintf_r+0x1e8>)
 801225a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801225e:	2206      	movs	r2, #6
 8012260:	f7ed ff8e 	bl	8000180 <memchr>
 8012264:	2800      	cmp	r0, #0
 8012266:	d036      	beq.n	80122d6 <_svfiprintf_r+0x1d2>
 8012268:	4b21      	ldr	r3, [pc, #132]	@ (80122f0 <_svfiprintf_r+0x1ec>)
 801226a:	bb1b      	cbnz	r3, 80122b4 <_svfiprintf_r+0x1b0>
 801226c:	9b03      	ldr	r3, [sp, #12]
 801226e:	3307      	adds	r3, #7
 8012270:	f023 0307 	bic.w	r3, r3, #7
 8012274:	3308      	adds	r3, #8
 8012276:	9303      	str	r3, [sp, #12]
 8012278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801227a:	4433      	add	r3, r6
 801227c:	9309      	str	r3, [sp, #36]	@ 0x24
 801227e:	e76a      	b.n	8012156 <_svfiprintf_r+0x52>
 8012280:	fb0c 3202 	mla	r2, ip, r2, r3
 8012284:	460c      	mov	r4, r1
 8012286:	2001      	movs	r0, #1
 8012288:	e7a8      	b.n	80121dc <_svfiprintf_r+0xd8>
 801228a:	2300      	movs	r3, #0
 801228c:	3401      	adds	r4, #1
 801228e:	9305      	str	r3, [sp, #20]
 8012290:	4619      	mov	r1, r3
 8012292:	f04f 0c0a 	mov.w	ip, #10
 8012296:	4620      	mov	r0, r4
 8012298:	f810 2b01 	ldrb.w	r2, [r0], #1
 801229c:	3a30      	subs	r2, #48	@ 0x30
 801229e:	2a09      	cmp	r2, #9
 80122a0:	d903      	bls.n	80122aa <_svfiprintf_r+0x1a6>
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d0c6      	beq.n	8012234 <_svfiprintf_r+0x130>
 80122a6:	9105      	str	r1, [sp, #20]
 80122a8:	e7c4      	b.n	8012234 <_svfiprintf_r+0x130>
 80122aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80122ae:	4604      	mov	r4, r0
 80122b0:	2301      	movs	r3, #1
 80122b2:	e7f0      	b.n	8012296 <_svfiprintf_r+0x192>
 80122b4:	ab03      	add	r3, sp, #12
 80122b6:	9300      	str	r3, [sp, #0]
 80122b8:	462a      	mov	r2, r5
 80122ba:	4b0e      	ldr	r3, [pc, #56]	@ (80122f4 <_svfiprintf_r+0x1f0>)
 80122bc:	a904      	add	r1, sp, #16
 80122be:	4638      	mov	r0, r7
 80122c0:	f7fc fc36 	bl	800eb30 <_printf_float>
 80122c4:	1c42      	adds	r2, r0, #1
 80122c6:	4606      	mov	r6, r0
 80122c8:	d1d6      	bne.n	8012278 <_svfiprintf_r+0x174>
 80122ca:	89ab      	ldrh	r3, [r5, #12]
 80122cc:	065b      	lsls	r3, r3, #25
 80122ce:	f53f af2d 	bmi.w	801212c <_svfiprintf_r+0x28>
 80122d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122d4:	e72c      	b.n	8012130 <_svfiprintf_r+0x2c>
 80122d6:	ab03      	add	r3, sp, #12
 80122d8:	9300      	str	r3, [sp, #0]
 80122da:	462a      	mov	r2, r5
 80122dc:	4b05      	ldr	r3, [pc, #20]	@ (80122f4 <_svfiprintf_r+0x1f0>)
 80122de:	a904      	add	r1, sp, #16
 80122e0:	4638      	mov	r0, r7
 80122e2:	f7fc febd 	bl	800f060 <_printf_i>
 80122e6:	e7ed      	b.n	80122c4 <_svfiprintf_r+0x1c0>
 80122e8:	080139b1 	.word	0x080139b1
 80122ec:	080139bb 	.word	0x080139bb
 80122f0:	0800eb31 	.word	0x0800eb31
 80122f4:	0801204d 	.word	0x0801204d
 80122f8:	080139b7 	.word	0x080139b7

080122fc <__sfputc_r>:
 80122fc:	6893      	ldr	r3, [r2, #8]
 80122fe:	3b01      	subs	r3, #1
 8012300:	2b00      	cmp	r3, #0
 8012302:	b410      	push	{r4}
 8012304:	6093      	str	r3, [r2, #8]
 8012306:	da08      	bge.n	801231a <__sfputc_r+0x1e>
 8012308:	6994      	ldr	r4, [r2, #24]
 801230a:	42a3      	cmp	r3, r4
 801230c:	db01      	blt.n	8012312 <__sfputc_r+0x16>
 801230e:	290a      	cmp	r1, #10
 8012310:	d103      	bne.n	801231a <__sfputc_r+0x1e>
 8012312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012316:	f7fd bb74 	b.w	800fa02 <__swbuf_r>
 801231a:	6813      	ldr	r3, [r2, #0]
 801231c:	1c58      	adds	r0, r3, #1
 801231e:	6010      	str	r0, [r2, #0]
 8012320:	7019      	strb	r1, [r3, #0]
 8012322:	4608      	mov	r0, r1
 8012324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012328:	4770      	bx	lr

0801232a <__sfputs_r>:
 801232a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232c:	4606      	mov	r6, r0
 801232e:	460f      	mov	r7, r1
 8012330:	4614      	mov	r4, r2
 8012332:	18d5      	adds	r5, r2, r3
 8012334:	42ac      	cmp	r4, r5
 8012336:	d101      	bne.n	801233c <__sfputs_r+0x12>
 8012338:	2000      	movs	r0, #0
 801233a:	e007      	b.n	801234c <__sfputs_r+0x22>
 801233c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012340:	463a      	mov	r2, r7
 8012342:	4630      	mov	r0, r6
 8012344:	f7ff ffda 	bl	80122fc <__sfputc_r>
 8012348:	1c43      	adds	r3, r0, #1
 801234a:	d1f3      	bne.n	8012334 <__sfputs_r+0xa>
 801234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012350 <_vfiprintf_r>:
 8012350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	460d      	mov	r5, r1
 8012356:	b09d      	sub	sp, #116	@ 0x74
 8012358:	4614      	mov	r4, r2
 801235a:	4698      	mov	r8, r3
 801235c:	4606      	mov	r6, r0
 801235e:	b118      	cbz	r0, 8012368 <_vfiprintf_r+0x18>
 8012360:	6a03      	ldr	r3, [r0, #32]
 8012362:	b90b      	cbnz	r3, 8012368 <_vfiprintf_r+0x18>
 8012364:	f7fd fa3c 	bl	800f7e0 <__sinit>
 8012368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801236a:	07d9      	lsls	r1, r3, #31
 801236c:	d405      	bmi.n	801237a <_vfiprintf_r+0x2a>
 801236e:	89ab      	ldrh	r3, [r5, #12]
 8012370:	059a      	lsls	r2, r3, #22
 8012372:	d402      	bmi.n	801237a <_vfiprintf_r+0x2a>
 8012374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012376:	f7fd fc66 	bl	800fc46 <__retarget_lock_acquire_recursive>
 801237a:	89ab      	ldrh	r3, [r5, #12]
 801237c:	071b      	lsls	r3, r3, #28
 801237e:	d501      	bpl.n	8012384 <_vfiprintf_r+0x34>
 8012380:	692b      	ldr	r3, [r5, #16]
 8012382:	b99b      	cbnz	r3, 80123ac <_vfiprintf_r+0x5c>
 8012384:	4629      	mov	r1, r5
 8012386:	4630      	mov	r0, r6
 8012388:	f7fd fb7a 	bl	800fa80 <__swsetup_r>
 801238c:	b170      	cbz	r0, 80123ac <_vfiprintf_r+0x5c>
 801238e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012390:	07dc      	lsls	r4, r3, #31
 8012392:	d504      	bpl.n	801239e <_vfiprintf_r+0x4e>
 8012394:	f04f 30ff 	mov.w	r0, #4294967295
 8012398:	b01d      	add	sp, #116	@ 0x74
 801239a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801239e:	89ab      	ldrh	r3, [r5, #12]
 80123a0:	0598      	lsls	r0, r3, #22
 80123a2:	d4f7      	bmi.n	8012394 <_vfiprintf_r+0x44>
 80123a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123a6:	f7fd fc4f 	bl	800fc48 <__retarget_lock_release_recursive>
 80123aa:	e7f3      	b.n	8012394 <_vfiprintf_r+0x44>
 80123ac:	2300      	movs	r3, #0
 80123ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80123b0:	2320      	movs	r3, #32
 80123b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80123b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80123ba:	2330      	movs	r3, #48	@ 0x30
 80123bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801256c <_vfiprintf_r+0x21c>
 80123c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80123c4:	f04f 0901 	mov.w	r9, #1
 80123c8:	4623      	mov	r3, r4
 80123ca:	469a      	mov	sl, r3
 80123cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123d0:	b10a      	cbz	r2, 80123d6 <_vfiprintf_r+0x86>
 80123d2:	2a25      	cmp	r2, #37	@ 0x25
 80123d4:	d1f9      	bne.n	80123ca <_vfiprintf_r+0x7a>
 80123d6:	ebba 0b04 	subs.w	fp, sl, r4
 80123da:	d00b      	beq.n	80123f4 <_vfiprintf_r+0xa4>
 80123dc:	465b      	mov	r3, fp
 80123de:	4622      	mov	r2, r4
 80123e0:	4629      	mov	r1, r5
 80123e2:	4630      	mov	r0, r6
 80123e4:	f7ff ffa1 	bl	801232a <__sfputs_r>
 80123e8:	3001      	adds	r0, #1
 80123ea:	f000 80a7 	beq.w	801253c <_vfiprintf_r+0x1ec>
 80123ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123f0:	445a      	add	r2, fp
 80123f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80123f4:	f89a 3000 	ldrb.w	r3, [sl]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	f000 809f 	beq.w	801253c <_vfiprintf_r+0x1ec>
 80123fe:	2300      	movs	r3, #0
 8012400:	f04f 32ff 	mov.w	r2, #4294967295
 8012404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012408:	f10a 0a01 	add.w	sl, sl, #1
 801240c:	9304      	str	r3, [sp, #16]
 801240e:	9307      	str	r3, [sp, #28]
 8012410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012414:	931a      	str	r3, [sp, #104]	@ 0x68
 8012416:	4654      	mov	r4, sl
 8012418:	2205      	movs	r2, #5
 801241a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801241e:	4853      	ldr	r0, [pc, #332]	@ (801256c <_vfiprintf_r+0x21c>)
 8012420:	f7ed feae 	bl	8000180 <memchr>
 8012424:	9a04      	ldr	r2, [sp, #16]
 8012426:	b9d8      	cbnz	r0, 8012460 <_vfiprintf_r+0x110>
 8012428:	06d1      	lsls	r1, r2, #27
 801242a:	bf44      	itt	mi
 801242c:	2320      	movmi	r3, #32
 801242e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012432:	0713      	lsls	r3, r2, #28
 8012434:	bf44      	itt	mi
 8012436:	232b      	movmi	r3, #43	@ 0x2b
 8012438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801243c:	f89a 3000 	ldrb.w	r3, [sl]
 8012440:	2b2a      	cmp	r3, #42	@ 0x2a
 8012442:	d015      	beq.n	8012470 <_vfiprintf_r+0x120>
 8012444:	9a07      	ldr	r2, [sp, #28]
 8012446:	4654      	mov	r4, sl
 8012448:	2000      	movs	r0, #0
 801244a:	f04f 0c0a 	mov.w	ip, #10
 801244e:	4621      	mov	r1, r4
 8012450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012454:	3b30      	subs	r3, #48	@ 0x30
 8012456:	2b09      	cmp	r3, #9
 8012458:	d94b      	bls.n	80124f2 <_vfiprintf_r+0x1a2>
 801245a:	b1b0      	cbz	r0, 801248a <_vfiprintf_r+0x13a>
 801245c:	9207      	str	r2, [sp, #28]
 801245e:	e014      	b.n	801248a <_vfiprintf_r+0x13a>
 8012460:	eba0 0308 	sub.w	r3, r0, r8
 8012464:	fa09 f303 	lsl.w	r3, r9, r3
 8012468:	4313      	orrs	r3, r2
 801246a:	9304      	str	r3, [sp, #16]
 801246c:	46a2      	mov	sl, r4
 801246e:	e7d2      	b.n	8012416 <_vfiprintf_r+0xc6>
 8012470:	9b03      	ldr	r3, [sp, #12]
 8012472:	1d19      	adds	r1, r3, #4
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	9103      	str	r1, [sp, #12]
 8012478:	2b00      	cmp	r3, #0
 801247a:	bfbb      	ittet	lt
 801247c:	425b      	neglt	r3, r3
 801247e:	f042 0202 	orrlt.w	r2, r2, #2
 8012482:	9307      	strge	r3, [sp, #28]
 8012484:	9307      	strlt	r3, [sp, #28]
 8012486:	bfb8      	it	lt
 8012488:	9204      	strlt	r2, [sp, #16]
 801248a:	7823      	ldrb	r3, [r4, #0]
 801248c:	2b2e      	cmp	r3, #46	@ 0x2e
 801248e:	d10a      	bne.n	80124a6 <_vfiprintf_r+0x156>
 8012490:	7863      	ldrb	r3, [r4, #1]
 8012492:	2b2a      	cmp	r3, #42	@ 0x2a
 8012494:	d132      	bne.n	80124fc <_vfiprintf_r+0x1ac>
 8012496:	9b03      	ldr	r3, [sp, #12]
 8012498:	1d1a      	adds	r2, r3, #4
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	9203      	str	r2, [sp, #12]
 801249e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80124a2:	3402      	adds	r4, #2
 80124a4:	9305      	str	r3, [sp, #20]
 80124a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801257c <_vfiprintf_r+0x22c>
 80124aa:	7821      	ldrb	r1, [r4, #0]
 80124ac:	2203      	movs	r2, #3
 80124ae:	4650      	mov	r0, sl
 80124b0:	f7ed fe66 	bl	8000180 <memchr>
 80124b4:	b138      	cbz	r0, 80124c6 <_vfiprintf_r+0x176>
 80124b6:	9b04      	ldr	r3, [sp, #16]
 80124b8:	eba0 000a 	sub.w	r0, r0, sl
 80124bc:	2240      	movs	r2, #64	@ 0x40
 80124be:	4082      	lsls	r2, r0
 80124c0:	4313      	orrs	r3, r2
 80124c2:	3401      	adds	r4, #1
 80124c4:	9304      	str	r3, [sp, #16]
 80124c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124ca:	4829      	ldr	r0, [pc, #164]	@ (8012570 <_vfiprintf_r+0x220>)
 80124cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80124d0:	2206      	movs	r2, #6
 80124d2:	f7ed fe55 	bl	8000180 <memchr>
 80124d6:	2800      	cmp	r0, #0
 80124d8:	d03f      	beq.n	801255a <_vfiprintf_r+0x20a>
 80124da:	4b26      	ldr	r3, [pc, #152]	@ (8012574 <_vfiprintf_r+0x224>)
 80124dc:	bb1b      	cbnz	r3, 8012526 <_vfiprintf_r+0x1d6>
 80124de:	9b03      	ldr	r3, [sp, #12]
 80124e0:	3307      	adds	r3, #7
 80124e2:	f023 0307 	bic.w	r3, r3, #7
 80124e6:	3308      	adds	r3, #8
 80124e8:	9303      	str	r3, [sp, #12]
 80124ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124ec:	443b      	add	r3, r7
 80124ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80124f0:	e76a      	b.n	80123c8 <_vfiprintf_r+0x78>
 80124f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80124f6:	460c      	mov	r4, r1
 80124f8:	2001      	movs	r0, #1
 80124fa:	e7a8      	b.n	801244e <_vfiprintf_r+0xfe>
 80124fc:	2300      	movs	r3, #0
 80124fe:	3401      	adds	r4, #1
 8012500:	9305      	str	r3, [sp, #20]
 8012502:	4619      	mov	r1, r3
 8012504:	f04f 0c0a 	mov.w	ip, #10
 8012508:	4620      	mov	r0, r4
 801250a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801250e:	3a30      	subs	r2, #48	@ 0x30
 8012510:	2a09      	cmp	r2, #9
 8012512:	d903      	bls.n	801251c <_vfiprintf_r+0x1cc>
 8012514:	2b00      	cmp	r3, #0
 8012516:	d0c6      	beq.n	80124a6 <_vfiprintf_r+0x156>
 8012518:	9105      	str	r1, [sp, #20]
 801251a:	e7c4      	b.n	80124a6 <_vfiprintf_r+0x156>
 801251c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012520:	4604      	mov	r4, r0
 8012522:	2301      	movs	r3, #1
 8012524:	e7f0      	b.n	8012508 <_vfiprintf_r+0x1b8>
 8012526:	ab03      	add	r3, sp, #12
 8012528:	9300      	str	r3, [sp, #0]
 801252a:	462a      	mov	r2, r5
 801252c:	4b12      	ldr	r3, [pc, #72]	@ (8012578 <_vfiprintf_r+0x228>)
 801252e:	a904      	add	r1, sp, #16
 8012530:	4630      	mov	r0, r6
 8012532:	f7fc fafd 	bl	800eb30 <_printf_float>
 8012536:	4607      	mov	r7, r0
 8012538:	1c78      	adds	r0, r7, #1
 801253a:	d1d6      	bne.n	80124ea <_vfiprintf_r+0x19a>
 801253c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801253e:	07d9      	lsls	r1, r3, #31
 8012540:	d405      	bmi.n	801254e <_vfiprintf_r+0x1fe>
 8012542:	89ab      	ldrh	r3, [r5, #12]
 8012544:	059a      	lsls	r2, r3, #22
 8012546:	d402      	bmi.n	801254e <_vfiprintf_r+0x1fe>
 8012548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801254a:	f7fd fb7d 	bl	800fc48 <__retarget_lock_release_recursive>
 801254e:	89ab      	ldrh	r3, [r5, #12]
 8012550:	065b      	lsls	r3, r3, #25
 8012552:	f53f af1f 	bmi.w	8012394 <_vfiprintf_r+0x44>
 8012556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012558:	e71e      	b.n	8012398 <_vfiprintf_r+0x48>
 801255a:	ab03      	add	r3, sp, #12
 801255c:	9300      	str	r3, [sp, #0]
 801255e:	462a      	mov	r2, r5
 8012560:	4b05      	ldr	r3, [pc, #20]	@ (8012578 <_vfiprintf_r+0x228>)
 8012562:	a904      	add	r1, sp, #16
 8012564:	4630      	mov	r0, r6
 8012566:	f7fc fd7b 	bl	800f060 <_printf_i>
 801256a:	e7e4      	b.n	8012536 <_vfiprintf_r+0x1e6>
 801256c:	080139b1 	.word	0x080139b1
 8012570:	080139bb 	.word	0x080139bb
 8012574:	0800eb31 	.word	0x0800eb31
 8012578:	0801232b 	.word	0x0801232b
 801257c:	080139b7 	.word	0x080139b7

08012580 <__sflush_r>:
 8012580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012588:	0716      	lsls	r6, r2, #28
 801258a:	4605      	mov	r5, r0
 801258c:	460c      	mov	r4, r1
 801258e:	d454      	bmi.n	801263a <__sflush_r+0xba>
 8012590:	684b      	ldr	r3, [r1, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	dc02      	bgt.n	801259c <__sflush_r+0x1c>
 8012596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012598:	2b00      	cmp	r3, #0
 801259a:	dd48      	ble.n	801262e <__sflush_r+0xae>
 801259c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801259e:	2e00      	cmp	r6, #0
 80125a0:	d045      	beq.n	801262e <__sflush_r+0xae>
 80125a2:	2300      	movs	r3, #0
 80125a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80125a8:	682f      	ldr	r7, [r5, #0]
 80125aa:	6a21      	ldr	r1, [r4, #32]
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	d030      	beq.n	8012612 <__sflush_r+0x92>
 80125b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80125b2:	89a3      	ldrh	r3, [r4, #12]
 80125b4:	0759      	lsls	r1, r3, #29
 80125b6:	d505      	bpl.n	80125c4 <__sflush_r+0x44>
 80125b8:	6863      	ldr	r3, [r4, #4]
 80125ba:	1ad2      	subs	r2, r2, r3
 80125bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80125be:	b10b      	cbz	r3, 80125c4 <__sflush_r+0x44>
 80125c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80125c2:	1ad2      	subs	r2, r2, r3
 80125c4:	2300      	movs	r3, #0
 80125c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80125c8:	6a21      	ldr	r1, [r4, #32]
 80125ca:	4628      	mov	r0, r5
 80125cc:	47b0      	blx	r6
 80125ce:	1c43      	adds	r3, r0, #1
 80125d0:	89a3      	ldrh	r3, [r4, #12]
 80125d2:	d106      	bne.n	80125e2 <__sflush_r+0x62>
 80125d4:	6829      	ldr	r1, [r5, #0]
 80125d6:	291d      	cmp	r1, #29
 80125d8:	d82b      	bhi.n	8012632 <__sflush_r+0xb2>
 80125da:	4a2a      	ldr	r2, [pc, #168]	@ (8012684 <__sflush_r+0x104>)
 80125dc:	410a      	asrs	r2, r1
 80125de:	07d6      	lsls	r6, r2, #31
 80125e0:	d427      	bmi.n	8012632 <__sflush_r+0xb2>
 80125e2:	2200      	movs	r2, #0
 80125e4:	6062      	str	r2, [r4, #4]
 80125e6:	04d9      	lsls	r1, r3, #19
 80125e8:	6922      	ldr	r2, [r4, #16]
 80125ea:	6022      	str	r2, [r4, #0]
 80125ec:	d504      	bpl.n	80125f8 <__sflush_r+0x78>
 80125ee:	1c42      	adds	r2, r0, #1
 80125f0:	d101      	bne.n	80125f6 <__sflush_r+0x76>
 80125f2:	682b      	ldr	r3, [r5, #0]
 80125f4:	b903      	cbnz	r3, 80125f8 <__sflush_r+0x78>
 80125f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80125f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80125fa:	602f      	str	r7, [r5, #0]
 80125fc:	b1b9      	cbz	r1, 801262e <__sflush_r+0xae>
 80125fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012602:	4299      	cmp	r1, r3
 8012604:	d002      	beq.n	801260c <__sflush_r+0x8c>
 8012606:	4628      	mov	r0, r5
 8012608:	f7fe f99e 	bl	8010948 <_free_r>
 801260c:	2300      	movs	r3, #0
 801260e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012610:	e00d      	b.n	801262e <__sflush_r+0xae>
 8012612:	2301      	movs	r3, #1
 8012614:	4628      	mov	r0, r5
 8012616:	47b0      	blx	r6
 8012618:	4602      	mov	r2, r0
 801261a:	1c50      	adds	r0, r2, #1
 801261c:	d1c9      	bne.n	80125b2 <__sflush_r+0x32>
 801261e:	682b      	ldr	r3, [r5, #0]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d0c6      	beq.n	80125b2 <__sflush_r+0x32>
 8012624:	2b1d      	cmp	r3, #29
 8012626:	d001      	beq.n	801262c <__sflush_r+0xac>
 8012628:	2b16      	cmp	r3, #22
 801262a:	d11e      	bne.n	801266a <__sflush_r+0xea>
 801262c:	602f      	str	r7, [r5, #0]
 801262e:	2000      	movs	r0, #0
 8012630:	e022      	b.n	8012678 <__sflush_r+0xf8>
 8012632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012636:	b21b      	sxth	r3, r3
 8012638:	e01b      	b.n	8012672 <__sflush_r+0xf2>
 801263a:	690f      	ldr	r7, [r1, #16]
 801263c:	2f00      	cmp	r7, #0
 801263e:	d0f6      	beq.n	801262e <__sflush_r+0xae>
 8012640:	0793      	lsls	r3, r2, #30
 8012642:	680e      	ldr	r6, [r1, #0]
 8012644:	bf08      	it	eq
 8012646:	694b      	ldreq	r3, [r1, #20]
 8012648:	600f      	str	r7, [r1, #0]
 801264a:	bf18      	it	ne
 801264c:	2300      	movne	r3, #0
 801264e:	eba6 0807 	sub.w	r8, r6, r7
 8012652:	608b      	str	r3, [r1, #8]
 8012654:	f1b8 0f00 	cmp.w	r8, #0
 8012658:	dde9      	ble.n	801262e <__sflush_r+0xae>
 801265a:	6a21      	ldr	r1, [r4, #32]
 801265c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801265e:	4643      	mov	r3, r8
 8012660:	463a      	mov	r2, r7
 8012662:	4628      	mov	r0, r5
 8012664:	47b0      	blx	r6
 8012666:	2800      	cmp	r0, #0
 8012668:	dc08      	bgt.n	801267c <__sflush_r+0xfc>
 801266a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801266e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012672:	81a3      	strh	r3, [r4, #12]
 8012674:	f04f 30ff 	mov.w	r0, #4294967295
 8012678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801267c:	4407      	add	r7, r0
 801267e:	eba8 0800 	sub.w	r8, r8, r0
 8012682:	e7e7      	b.n	8012654 <__sflush_r+0xd4>
 8012684:	dfbffffe 	.word	0xdfbffffe

08012688 <_fflush_r>:
 8012688:	b538      	push	{r3, r4, r5, lr}
 801268a:	690b      	ldr	r3, [r1, #16]
 801268c:	4605      	mov	r5, r0
 801268e:	460c      	mov	r4, r1
 8012690:	b913      	cbnz	r3, 8012698 <_fflush_r+0x10>
 8012692:	2500      	movs	r5, #0
 8012694:	4628      	mov	r0, r5
 8012696:	bd38      	pop	{r3, r4, r5, pc}
 8012698:	b118      	cbz	r0, 80126a2 <_fflush_r+0x1a>
 801269a:	6a03      	ldr	r3, [r0, #32]
 801269c:	b90b      	cbnz	r3, 80126a2 <_fflush_r+0x1a>
 801269e:	f7fd f89f 	bl	800f7e0 <__sinit>
 80126a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d0f3      	beq.n	8012692 <_fflush_r+0xa>
 80126aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80126ac:	07d0      	lsls	r0, r2, #31
 80126ae:	d404      	bmi.n	80126ba <_fflush_r+0x32>
 80126b0:	0599      	lsls	r1, r3, #22
 80126b2:	d402      	bmi.n	80126ba <_fflush_r+0x32>
 80126b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126b6:	f7fd fac6 	bl	800fc46 <__retarget_lock_acquire_recursive>
 80126ba:	4628      	mov	r0, r5
 80126bc:	4621      	mov	r1, r4
 80126be:	f7ff ff5f 	bl	8012580 <__sflush_r>
 80126c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80126c4:	07da      	lsls	r2, r3, #31
 80126c6:	4605      	mov	r5, r0
 80126c8:	d4e4      	bmi.n	8012694 <_fflush_r+0xc>
 80126ca:	89a3      	ldrh	r3, [r4, #12]
 80126cc:	059b      	lsls	r3, r3, #22
 80126ce:	d4e1      	bmi.n	8012694 <_fflush_r+0xc>
 80126d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126d2:	f7fd fab9 	bl	800fc48 <__retarget_lock_release_recursive>
 80126d6:	e7dd      	b.n	8012694 <_fflush_r+0xc>

080126d8 <fiprintf>:
 80126d8:	b40e      	push	{r1, r2, r3}
 80126da:	b503      	push	{r0, r1, lr}
 80126dc:	4601      	mov	r1, r0
 80126de:	ab03      	add	r3, sp, #12
 80126e0:	4805      	ldr	r0, [pc, #20]	@ (80126f8 <fiprintf+0x20>)
 80126e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80126e6:	6800      	ldr	r0, [r0, #0]
 80126e8:	9301      	str	r3, [sp, #4]
 80126ea:	f7ff fe31 	bl	8012350 <_vfiprintf_r>
 80126ee:	b002      	add	sp, #8
 80126f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80126f4:	b003      	add	sp, #12
 80126f6:	4770      	bx	lr
 80126f8:	20000038 	.word	0x20000038

080126fc <__swhatbuf_r>:
 80126fc:	b570      	push	{r4, r5, r6, lr}
 80126fe:	460c      	mov	r4, r1
 8012700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012704:	2900      	cmp	r1, #0
 8012706:	b096      	sub	sp, #88	@ 0x58
 8012708:	4615      	mov	r5, r2
 801270a:	461e      	mov	r6, r3
 801270c:	da0d      	bge.n	801272a <__swhatbuf_r+0x2e>
 801270e:	89a3      	ldrh	r3, [r4, #12]
 8012710:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012714:	f04f 0100 	mov.w	r1, #0
 8012718:	bf14      	ite	ne
 801271a:	2340      	movne	r3, #64	@ 0x40
 801271c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012720:	2000      	movs	r0, #0
 8012722:	6031      	str	r1, [r6, #0]
 8012724:	602b      	str	r3, [r5, #0]
 8012726:	b016      	add	sp, #88	@ 0x58
 8012728:	bd70      	pop	{r4, r5, r6, pc}
 801272a:	466a      	mov	r2, sp
 801272c:	f000 f8a8 	bl	8012880 <_fstat_r>
 8012730:	2800      	cmp	r0, #0
 8012732:	dbec      	blt.n	801270e <__swhatbuf_r+0x12>
 8012734:	9901      	ldr	r1, [sp, #4]
 8012736:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801273a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801273e:	4259      	negs	r1, r3
 8012740:	4159      	adcs	r1, r3
 8012742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012746:	e7eb      	b.n	8012720 <__swhatbuf_r+0x24>

08012748 <__smakebuf_r>:
 8012748:	898b      	ldrh	r3, [r1, #12]
 801274a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801274c:	079d      	lsls	r5, r3, #30
 801274e:	4606      	mov	r6, r0
 8012750:	460c      	mov	r4, r1
 8012752:	d507      	bpl.n	8012764 <__smakebuf_r+0x1c>
 8012754:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012758:	6023      	str	r3, [r4, #0]
 801275a:	6123      	str	r3, [r4, #16]
 801275c:	2301      	movs	r3, #1
 801275e:	6163      	str	r3, [r4, #20]
 8012760:	b003      	add	sp, #12
 8012762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012764:	ab01      	add	r3, sp, #4
 8012766:	466a      	mov	r2, sp
 8012768:	f7ff ffc8 	bl	80126fc <__swhatbuf_r>
 801276c:	9f00      	ldr	r7, [sp, #0]
 801276e:	4605      	mov	r5, r0
 8012770:	4639      	mov	r1, r7
 8012772:	4630      	mov	r0, r6
 8012774:	f7fc f8b0 	bl	800e8d8 <_malloc_r>
 8012778:	b948      	cbnz	r0, 801278e <__smakebuf_r+0x46>
 801277a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801277e:	059a      	lsls	r2, r3, #22
 8012780:	d4ee      	bmi.n	8012760 <__smakebuf_r+0x18>
 8012782:	f023 0303 	bic.w	r3, r3, #3
 8012786:	f043 0302 	orr.w	r3, r3, #2
 801278a:	81a3      	strh	r3, [r4, #12]
 801278c:	e7e2      	b.n	8012754 <__smakebuf_r+0xc>
 801278e:	89a3      	ldrh	r3, [r4, #12]
 8012790:	6020      	str	r0, [r4, #0]
 8012792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012796:	81a3      	strh	r3, [r4, #12]
 8012798:	9b01      	ldr	r3, [sp, #4]
 801279a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801279e:	b15b      	cbz	r3, 80127b8 <__smakebuf_r+0x70>
 80127a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127a4:	4630      	mov	r0, r6
 80127a6:	f000 f87d 	bl	80128a4 <_isatty_r>
 80127aa:	b128      	cbz	r0, 80127b8 <__smakebuf_r+0x70>
 80127ac:	89a3      	ldrh	r3, [r4, #12]
 80127ae:	f023 0303 	bic.w	r3, r3, #3
 80127b2:	f043 0301 	orr.w	r3, r3, #1
 80127b6:	81a3      	strh	r3, [r4, #12]
 80127b8:	89a3      	ldrh	r3, [r4, #12]
 80127ba:	431d      	orrs	r5, r3
 80127bc:	81a5      	strh	r5, [r4, #12]
 80127be:	e7cf      	b.n	8012760 <__smakebuf_r+0x18>

080127c0 <_putc_r>:
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	460d      	mov	r5, r1
 80127c4:	4614      	mov	r4, r2
 80127c6:	4606      	mov	r6, r0
 80127c8:	b118      	cbz	r0, 80127d2 <_putc_r+0x12>
 80127ca:	6a03      	ldr	r3, [r0, #32]
 80127cc:	b90b      	cbnz	r3, 80127d2 <_putc_r+0x12>
 80127ce:	f7fd f807 	bl	800f7e0 <__sinit>
 80127d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127d4:	07d8      	lsls	r0, r3, #31
 80127d6:	d405      	bmi.n	80127e4 <_putc_r+0x24>
 80127d8:	89a3      	ldrh	r3, [r4, #12]
 80127da:	0599      	lsls	r1, r3, #22
 80127dc:	d402      	bmi.n	80127e4 <_putc_r+0x24>
 80127de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127e0:	f7fd fa31 	bl	800fc46 <__retarget_lock_acquire_recursive>
 80127e4:	68a3      	ldr	r3, [r4, #8]
 80127e6:	3b01      	subs	r3, #1
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	60a3      	str	r3, [r4, #8]
 80127ec:	da05      	bge.n	80127fa <_putc_r+0x3a>
 80127ee:	69a2      	ldr	r2, [r4, #24]
 80127f0:	4293      	cmp	r3, r2
 80127f2:	db12      	blt.n	801281a <_putc_r+0x5a>
 80127f4:	b2eb      	uxtb	r3, r5
 80127f6:	2b0a      	cmp	r3, #10
 80127f8:	d00f      	beq.n	801281a <_putc_r+0x5a>
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	1c5a      	adds	r2, r3, #1
 80127fe:	6022      	str	r2, [r4, #0]
 8012800:	701d      	strb	r5, [r3, #0]
 8012802:	b2ed      	uxtb	r5, r5
 8012804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012806:	07da      	lsls	r2, r3, #31
 8012808:	d405      	bmi.n	8012816 <_putc_r+0x56>
 801280a:	89a3      	ldrh	r3, [r4, #12]
 801280c:	059b      	lsls	r3, r3, #22
 801280e:	d402      	bmi.n	8012816 <_putc_r+0x56>
 8012810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012812:	f7fd fa19 	bl	800fc48 <__retarget_lock_release_recursive>
 8012816:	4628      	mov	r0, r5
 8012818:	bd70      	pop	{r4, r5, r6, pc}
 801281a:	4629      	mov	r1, r5
 801281c:	4622      	mov	r2, r4
 801281e:	4630      	mov	r0, r6
 8012820:	f7fd f8ef 	bl	800fa02 <__swbuf_r>
 8012824:	4605      	mov	r5, r0
 8012826:	e7ed      	b.n	8012804 <_putc_r+0x44>

08012828 <memmove>:
 8012828:	4288      	cmp	r0, r1
 801282a:	b510      	push	{r4, lr}
 801282c:	eb01 0402 	add.w	r4, r1, r2
 8012830:	d902      	bls.n	8012838 <memmove+0x10>
 8012832:	4284      	cmp	r4, r0
 8012834:	4623      	mov	r3, r4
 8012836:	d807      	bhi.n	8012848 <memmove+0x20>
 8012838:	1e43      	subs	r3, r0, #1
 801283a:	42a1      	cmp	r1, r4
 801283c:	d008      	beq.n	8012850 <memmove+0x28>
 801283e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012846:	e7f8      	b.n	801283a <memmove+0x12>
 8012848:	4402      	add	r2, r0
 801284a:	4601      	mov	r1, r0
 801284c:	428a      	cmp	r2, r1
 801284e:	d100      	bne.n	8012852 <memmove+0x2a>
 8012850:	bd10      	pop	{r4, pc}
 8012852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801285a:	e7f7      	b.n	801284c <memmove+0x24>

0801285c <strncmp>:
 801285c:	b510      	push	{r4, lr}
 801285e:	b16a      	cbz	r2, 801287c <strncmp+0x20>
 8012860:	3901      	subs	r1, #1
 8012862:	1884      	adds	r4, r0, r2
 8012864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012868:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801286c:	429a      	cmp	r2, r3
 801286e:	d103      	bne.n	8012878 <strncmp+0x1c>
 8012870:	42a0      	cmp	r0, r4
 8012872:	d001      	beq.n	8012878 <strncmp+0x1c>
 8012874:	2a00      	cmp	r2, #0
 8012876:	d1f5      	bne.n	8012864 <strncmp+0x8>
 8012878:	1ad0      	subs	r0, r2, r3
 801287a:	bd10      	pop	{r4, pc}
 801287c:	4610      	mov	r0, r2
 801287e:	e7fc      	b.n	801287a <strncmp+0x1e>

08012880 <_fstat_r>:
 8012880:	b538      	push	{r3, r4, r5, lr}
 8012882:	4d07      	ldr	r5, [pc, #28]	@ (80128a0 <_fstat_r+0x20>)
 8012884:	2300      	movs	r3, #0
 8012886:	4604      	mov	r4, r0
 8012888:	4608      	mov	r0, r1
 801288a:	4611      	mov	r1, r2
 801288c:	602b      	str	r3, [r5, #0]
 801288e:	f7f0 fe1d 	bl	80034cc <_fstat>
 8012892:	1c43      	adds	r3, r0, #1
 8012894:	d102      	bne.n	801289c <_fstat_r+0x1c>
 8012896:	682b      	ldr	r3, [r5, #0]
 8012898:	b103      	cbz	r3, 801289c <_fstat_r+0x1c>
 801289a:	6023      	str	r3, [r4, #0]
 801289c:	bd38      	pop	{r3, r4, r5, pc}
 801289e:	bf00      	nop
 80128a0:	20000a28 	.word	0x20000a28

080128a4 <_isatty_r>:
 80128a4:	b538      	push	{r3, r4, r5, lr}
 80128a6:	4d06      	ldr	r5, [pc, #24]	@ (80128c0 <_isatty_r+0x1c>)
 80128a8:	2300      	movs	r3, #0
 80128aa:	4604      	mov	r4, r0
 80128ac:	4608      	mov	r0, r1
 80128ae:	602b      	str	r3, [r5, #0]
 80128b0:	f7f0 fe1c 	bl	80034ec <_isatty>
 80128b4:	1c43      	adds	r3, r0, #1
 80128b6:	d102      	bne.n	80128be <_isatty_r+0x1a>
 80128b8:	682b      	ldr	r3, [r5, #0]
 80128ba:	b103      	cbz	r3, 80128be <_isatty_r+0x1a>
 80128bc:	6023      	str	r3, [r4, #0]
 80128be:	bd38      	pop	{r3, r4, r5, pc}
 80128c0:	20000a28 	.word	0x20000a28
 80128c4:	00000000 	.word	0x00000000

080128c8 <nan>:
 80128c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80128d0 <nan+0x8>
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop
 80128d0:	00000000 	.word	0x00000000
 80128d4:	7ff80000 	.word	0x7ff80000

080128d8 <abort>:
 80128d8:	b508      	push	{r3, lr}
 80128da:	2006      	movs	r0, #6
 80128dc:	f000 fbb0 	bl	8013040 <raise>
 80128e0:	2001      	movs	r0, #1
 80128e2:	f7f0 fdbf 	bl	8003464 <_exit>

080128e6 <rshift>:
 80128e6:	6903      	ldr	r3, [r0, #16]
 80128e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80128ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80128f4:	f100 0414 	add.w	r4, r0, #20
 80128f8:	dd45      	ble.n	8012986 <rshift+0xa0>
 80128fa:	f011 011f 	ands.w	r1, r1, #31
 80128fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012902:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012906:	d10c      	bne.n	8012922 <rshift+0x3c>
 8012908:	f100 0710 	add.w	r7, r0, #16
 801290c:	4629      	mov	r1, r5
 801290e:	42b1      	cmp	r1, r6
 8012910:	d334      	bcc.n	801297c <rshift+0x96>
 8012912:	1a9b      	subs	r3, r3, r2
 8012914:	009b      	lsls	r3, r3, #2
 8012916:	1eea      	subs	r2, r5, #3
 8012918:	4296      	cmp	r6, r2
 801291a:	bf38      	it	cc
 801291c:	2300      	movcc	r3, #0
 801291e:	4423      	add	r3, r4
 8012920:	e015      	b.n	801294e <rshift+0x68>
 8012922:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012926:	f1c1 0820 	rsb	r8, r1, #32
 801292a:	40cf      	lsrs	r7, r1
 801292c:	f105 0e04 	add.w	lr, r5, #4
 8012930:	46a1      	mov	r9, r4
 8012932:	4576      	cmp	r6, lr
 8012934:	46f4      	mov	ip, lr
 8012936:	d815      	bhi.n	8012964 <rshift+0x7e>
 8012938:	1a9a      	subs	r2, r3, r2
 801293a:	0092      	lsls	r2, r2, #2
 801293c:	3a04      	subs	r2, #4
 801293e:	3501      	adds	r5, #1
 8012940:	42ae      	cmp	r6, r5
 8012942:	bf38      	it	cc
 8012944:	2200      	movcc	r2, #0
 8012946:	18a3      	adds	r3, r4, r2
 8012948:	50a7      	str	r7, [r4, r2]
 801294a:	b107      	cbz	r7, 801294e <rshift+0x68>
 801294c:	3304      	adds	r3, #4
 801294e:	1b1a      	subs	r2, r3, r4
 8012950:	42a3      	cmp	r3, r4
 8012952:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012956:	bf08      	it	eq
 8012958:	2300      	moveq	r3, #0
 801295a:	6102      	str	r2, [r0, #16]
 801295c:	bf08      	it	eq
 801295e:	6143      	streq	r3, [r0, #20]
 8012960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012964:	f8dc c000 	ldr.w	ip, [ip]
 8012968:	fa0c fc08 	lsl.w	ip, ip, r8
 801296c:	ea4c 0707 	orr.w	r7, ip, r7
 8012970:	f849 7b04 	str.w	r7, [r9], #4
 8012974:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012978:	40cf      	lsrs	r7, r1
 801297a:	e7da      	b.n	8012932 <rshift+0x4c>
 801297c:	f851 cb04 	ldr.w	ip, [r1], #4
 8012980:	f847 cf04 	str.w	ip, [r7, #4]!
 8012984:	e7c3      	b.n	801290e <rshift+0x28>
 8012986:	4623      	mov	r3, r4
 8012988:	e7e1      	b.n	801294e <rshift+0x68>

0801298a <__hexdig_fun>:
 801298a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801298e:	2b09      	cmp	r3, #9
 8012990:	d802      	bhi.n	8012998 <__hexdig_fun+0xe>
 8012992:	3820      	subs	r0, #32
 8012994:	b2c0      	uxtb	r0, r0
 8012996:	4770      	bx	lr
 8012998:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801299c:	2b05      	cmp	r3, #5
 801299e:	d801      	bhi.n	80129a4 <__hexdig_fun+0x1a>
 80129a0:	3847      	subs	r0, #71	@ 0x47
 80129a2:	e7f7      	b.n	8012994 <__hexdig_fun+0xa>
 80129a4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80129a8:	2b05      	cmp	r3, #5
 80129aa:	d801      	bhi.n	80129b0 <__hexdig_fun+0x26>
 80129ac:	3827      	subs	r0, #39	@ 0x27
 80129ae:	e7f1      	b.n	8012994 <__hexdig_fun+0xa>
 80129b0:	2000      	movs	r0, #0
 80129b2:	4770      	bx	lr

080129b4 <__gethex>:
 80129b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b8:	b085      	sub	sp, #20
 80129ba:	468a      	mov	sl, r1
 80129bc:	9302      	str	r3, [sp, #8]
 80129be:	680b      	ldr	r3, [r1, #0]
 80129c0:	9001      	str	r0, [sp, #4]
 80129c2:	4690      	mov	r8, r2
 80129c4:	1c9c      	adds	r4, r3, #2
 80129c6:	46a1      	mov	r9, r4
 80129c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80129cc:	2830      	cmp	r0, #48	@ 0x30
 80129ce:	d0fa      	beq.n	80129c6 <__gethex+0x12>
 80129d0:	eba9 0303 	sub.w	r3, r9, r3
 80129d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80129d8:	f7ff ffd7 	bl	801298a <__hexdig_fun>
 80129dc:	4605      	mov	r5, r0
 80129de:	2800      	cmp	r0, #0
 80129e0:	d168      	bne.n	8012ab4 <__gethex+0x100>
 80129e2:	49a0      	ldr	r1, [pc, #640]	@ (8012c64 <__gethex+0x2b0>)
 80129e4:	2201      	movs	r2, #1
 80129e6:	4648      	mov	r0, r9
 80129e8:	f7ff ff38 	bl	801285c <strncmp>
 80129ec:	4607      	mov	r7, r0
 80129ee:	2800      	cmp	r0, #0
 80129f0:	d167      	bne.n	8012ac2 <__gethex+0x10e>
 80129f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80129f6:	4626      	mov	r6, r4
 80129f8:	f7ff ffc7 	bl	801298a <__hexdig_fun>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	d062      	beq.n	8012ac6 <__gethex+0x112>
 8012a00:	4623      	mov	r3, r4
 8012a02:	7818      	ldrb	r0, [r3, #0]
 8012a04:	2830      	cmp	r0, #48	@ 0x30
 8012a06:	4699      	mov	r9, r3
 8012a08:	f103 0301 	add.w	r3, r3, #1
 8012a0c:	d0f9      	beq.n	8012a02 <__gethex+0x4e>
 8012a0e:	f7ff ffbc 	bl	801298a <__hexdig_fun>
 8012a12:	fab0 f580 	clz	r5, r0
 8012a16:	096d      	lsrs	r5, r5, #5
 8012a18:	f04f 0b01 	mov.w	fp, #1
 8012a1c:	464a      	mov	r2, r9
 8012a1e:	4616      	mov	r6, r2
 8012a20:	3201      	adds	r2, #1
 8012a22:	7830      	ldrb	r0, [r6, #0]
 8012a24:	f7ff ffb1 	bl	801298a <__hexdig_fun>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d1f8      	bne.n	8012a1e <__gethex+0x6a>
 8012a2c:	498d      	ldr	r1, [pc, #564]	@ (8012c64 <__gethex+0x2b0>)
 8012a2e:	2201      	movs	r2, #1
 8012a30:	4630      	mov	r0, r6
 8012a32:	f7ff ff13 	bl	801285c <strncmp>
 8012a36:	2800      	cmp	r0, #0
 8012a38:	d13f      	bne.n	8012aba <__gethex+0x106>
 8012a3a:	b944      	cbnz	r4, 8012a4e <__gethex+0x9a>
 8012a3c:	1c74      	adds	r4, r6, #1
 8012a3e:	4622      	mov	r2, r4
 8012a40:	4616      	mov	r6, r2
 8012a42:	3201      	adds	r2, #1
 8012a44:	7830      	ldrb	r0, [r6, #0]
 8012a46:	f7ff ffa0 	bl	801298a <__hexdig_fun>
 8012a4a:	2800      	cmp	r0, #0
 8012a4c:	d1f8      	bne.n	8012a40 <__gethex+0x8c>
 8012a4e:	1ba4      	subs	r4, r4, r6
 8012a50:	00a7      	lsls	r7, r4, #2
 8012a52:	7833      	ldrb	r3, [r6, #0]
 8012a54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012a58:	2b50      	cmp	r3, #80	@ 0x50
 8012a5a:	d13e      	bne.n	8012ada <__gethex+0x126>
 8012a5c:	7873      	ldrb	r3, [r6, #1]
 8012a5e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012a60:	d033      	beq.n	8012aca <__gethex+0x116>
 8012a62:	2b2d      	cmp	r3, #45	@ 0x2d
 8012a64:	d034      	beq.n	8012ad0 <__gethex+0x11c>
 8012a66:	1c71      	adds	r1, r6, #1
 8012a68:	2400      	movs	r4, #0
 8012a6a:	7808      	ldrb	r0, [r1, #0]
 8012a6c:	f7ff ff8d 	bl	801298a <__hexdig_fun>
 8012a70:	1e43      	subs	r3, r0, #1
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	2b18      	cmp	r3, #24
 8012a76:	d830      	bhi.n	8012ada <__gethex+0x126>
 8012a78:	f1a0 0210 	sub.w	r2, r0, #16
 8012a7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012a80:	f7ff ff83 	bl	801298a <__hexdig_fun>
 8012a84:	f100 3cff 	add.w	ip, r0, #4294967295
 8012a88:	fa5f fc8c 	uxtb.w	ip, ip
 8012a8c:	f1bc 0f18 	cmp.w	ip, #24
 8012a90:	f04f 030a 	mov.w	r3, #10
 8012a94:	d91e      	bls.n	8012ad4 <__gethex+0x120>
 8012a96:	b104      	cbz	r4, 8012a9a <__gethex+0xe6>
 8012a98:	4252      	negs	r2, r2
 8012a9a:	4417      	add	r7, r2
 8012a9c:	f8ca 1000 	str.w	r1, [sl]
 8012aa0:	b1ed      	cbz	r5, 8012ade <__gethex+0x12a>
 8012aa2:	f1bb 0f00 	cmp.w	fp, #0
 8012aa6:	bf0c      	ite	eq
 8012aa8:	2506      	moveq	r5, #6
 8012aaa:	2500      	movne	r5, #0
 8012aac:	4628      	mov	r0, r5
 8012aae:	b005      	add	sp, #20
 8012ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab4:	2500      	movs	r5, #0
 8012ab6:	462c      	mov	r4, r5
 8012ab8:	e7b0      	b.n	8012a1c <__gethex+0x68>
 8012aba:	2c00      	cmp	r4, #0
 8012abc:	d1c7      	bne.n	8012a4e <__gethex+0x9a>
 8012abe:	4627      	mov	r7, r4
 8012ac0:	e7c7      	b.n	8012a52 <__gethex+0x9e>
 8012ac2:	464e      	mov	r6, r9
 8012ac4:	462f      	mov	r7, r5
 8012ac6:	2501      	movs	r5, #1
 8012ac8:	e7c3      	b.n	8012a52 <__gethex+0x9e>
 8012aca:	2400      	movs	r4, #0
 8012acc:	1cb1      	adds	r1, r6, #2
 8012ace:	e7cc      	b.n	8012a6a <__gethex+0xb6>
 8012ad0:	2401      	movs	r4, #1
 8012ad2:	e7fb      	b.n	8012acc <__gethex+0x118>
 8012ad4:	fb03 0002 	mla	r0, r3, r2, r0
 8012ad8:	e7ce      	b.n	8012a78 <__gethex+0xc4>
 8012ada:	4631      	mov	r1, r6
 8012adc:	e7de      	b.n	8012a9c <__gethex+0xe8>
 8012ade:	eba6 0309 	sub.w	r3, r6, r9
 8012ae2:	3b01      	subs	r3, #1
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	2b07      	cmp	r3, #7
 8012ae8:	dc0a      	bgt.n	8012b00 <__gethex+0x14c>
 8012aea:	9801      	ldr	r0, [sp, #4]
 8012aec:	f7fd ff76 	bl	80109dc <_Balloc>
 8012af0:	4604      	mov	r4, r0
 8012af2:	b940      	cbnz	r0, 8012b06 <__gethex+0x152>
 8012af4:	4b5c      	ldr	r3, [pc, #368]	@ (8012c68 <__gethex+0x2b4>)
 8012af6:	4602      	mov	r2, r0
 8012af8:	21e4      	movs	r1, #228	@ 0xe4
 8012afa:	485c      	ldr	r0, [pc, #368]	@ (8012c6c <__gethex+0x2b8>)
 8012afc:	f7fd f8ba 	bl	800fc74 <__assert_func>
 8012b00:	3101      	adds	r1, #1
 8012b02:	105b      	asrs	r3, r3, #1
 8012b04:	e7ef      	b.n	8012ae6 <__gethex+0x132>
 8012b06:	f100 0a14 	add.w	sl, r0, #20
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	4655      	mov	r5, sl
 8012b0e:	469b      	mov	fp, r3
 8012b10:	45b1      	cmp	r9, r6
 8012b12:	d337      	bcc.n	8012b84 <__gethex+0x1d0>
 8012b14:	f845 bb04 	str.w	fp, [r5], #4
 8012b18:	eba5 050a 	sub.w	r5, r5, sl
 8012b1c:	10ad      	asrs	r5, r5, #2
 8012b1e:	6125      	str	r5, [r4, #16]
 8012b20:	4658      	mov	r0, fp
 8012b22:	f7fe f84d 	bl	8010bc0 <__hi0bits>
 8012b26:	016d      	lsls	r5, r5, #5
 8012b28:	f8d8 6000 	ldr.w	r6, [r8]
 8012b2c:	1a2d      	subs	r5, r5, r0
 8012b2e:	42b5      	cmp	r5, r6
 8012b30:	dd54      	ble.n	8012bdc <__gethex+0x228>
 8012b32:	1bad      	subs	r5, r5, r6
 8012b34:	4629      	mov	r1, r5
 8012b36:	4620      	mov	r0, r4
 8012b38:	f7fe fbe1 	bl	80112fe <__any_on>
 8012b3c:	4681      	mov	r9, r0
 8012b3e:	b178      	cbz	r0, 8012b60 <__gethex+0x1ac>
 8012b40:	1e6b      	subs	r3, r5, #1
 8012b42:	1159      	asrs	r1, r3, #5
 8012b44:	f003 021f 	and.w	r2, r3, #31
 8012b48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012b4c:	f04f 0901 	mov.w	r9, #1
 8012b50:	fa09 f202 	lsl.w	r2, r9, r2
 8012b54:	420a      	tst	r2, r1
 8012b56:	d003      	beq.n	8012b60 <__gethex+0x1ac>
 8012b58:	454b      	cmp	r3, r9
 8012b5a:	dc36      	bgt.n	8012bca <__gethex+0x216>
 8012b5c:	f04f 0902 	mov.w	r9, #2
 8012b60:	4629      	mov	r1, r5
 8012b62:	4620      	mov	r0, r4
 8012b64:	f7ff febf 	bl	80128e6 <rshift>
 8012b68:	442f      	add	r7, r5
 8012b6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b6e:	42bb      	cmp	r3, r7
 8012b70:	da42      	bge.n	8012bf8 <__gethex+0x244>
 8012b72:	9801      	ldr	r0, [sp, #4]
 8012b74:	4621      	mov	r1, r4
 8012b76:	f7fd ff71 	bl	8010a5c <_Bfree>
 8012b7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	6013      	str	r3, [r2, #0]
 8012b80:	25a3      	movs	r5, #163	@ 0xa3
 8012b82:	e793      	b.n	8012aac <__gethex+0xf8>
 8012b84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012b88:	2a2e      	cmp	r2, #46	@ 0x2e
 8012b8a:	d012      	beq.n	8012bb2 <__gethex+0x1fe>
 8012b8c:	2b20      	cmp	r3, #32
 8012b8e:	d104      	bne.n	8012b9a <__gethex+0x1e6>
 8012b90:	f845 bb04 	str.w	fp, [r5], #4
 8012b94:	f04f 0b00 	mov.w	fp, #0
 8012b98:	465b      	mov	r3, fp
 8012b9a:	7830      	ldrb	r0, [r6, #0]
 8012b9c:	9303      	str	r3, [sp, #12]
 8012b9e:	f7ff fef4 	bl	801298a <__hexdig_fun>
 8012ba2:	9b03      	ldr	r3, [sp, #12]
 8012ba4:	f000 000f 	and.w	r0, r0, #15
 8012ba8:	4098      	lsls	r0, r3
 8012baa:	ea4b 0b00 	orr.w	fp, fp, r0
 8012bae:	3304      	adds	r3, #4
 8012bb0:	e7ae      	b.n	8012b10 <__gethex+0x15c>
 8012bb2:	45b1      	cmp	r9, r6
 8012bb4:	d8ea      	bhi.n	8012b8c <__gethex+0x1d8>
 8012bb6:	492b      	ldr	r1, [pc, #172]	@ (8012c64 <__gethex+0x2b0>)
 8012bb8:	9303      	str	r3, [sp, #12]
 8012bba:	2201      	movs	r2, #1
 8012bbc:	4630      	mov	r0, r6
 8012bbe:	f7ff fe4d 	bl	801285c <strncmp>
 8012bc2:	9b03      	ldr	r3, [sp, #12]
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d1e1      	bne.n	8012b8c <__gethex+0x1d8>
 8012bc8:	e7a2      	b.n	8012b10 <__gethex+0x15c>
 8012bca:	1ea9      	subs	r1, r5, #2
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f7fe fb96 	bl	80112fe <__any_on>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	d0c2      	beq.n	8012b5c <__gethex+0x1a8>
 8012bd6:	f04f 0903 	mov.w	r9, #3
 8012bda:	e7c1      	b.n	8012b60 <__gethex+0x1ac>
 8012bdc:	da09      	bge.n	8012bf2 <__gethex+0x23e>
 8012bde:	1b75      	subs	r5, r6, r5
 8012be0:	4621      	mov	r1, r4
 8012be2:	9801      	ldr	r0, [sp, #4]
 8012be4:	462a      	mov	r2, r5
 8012be6:	f7fe f951 	bl	8010e8c <__lshift>
 8012bea:	1b7f      	subs	r7, r7, r5
 8012bec:	4604      	mov	r4, r0
 8012bee:	f100 0a14 	add.w	sl, r0, #20
 8012bf2:	f04f 0900 	mov.w	r9, #0
 8012bf6:	e7b8      	b.n	8012b6a <__gethex+0x1b6>
 8012bf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012bfc:	42bd      	cmp	r5, r7
 8012bfe:	dd6f      	ble.n	8012ce0 <__gethex+0x32c>
 8012c00:	1bed      	subs	r5, r5, r7
 8012c02:	42ae      	cmp	r6, r5
 8012c04:	dc34      	bgt.n	8012c70 <__gethex+0x2bc>
 8012c06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012c0a:	2b02      	cmp	r3, #2
 8012c0c:	d022      	beq.n	8012c54 <__gethex+0x2a0>
 8012c0e:	2b03      	cmp	r3, #3
 8012c10:	d024      	beq.n	8012c5c <__gethex+0x2a8>
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d115      	bne.n	8012c42 <__gethex+0x28e>
 8012c16:	42ae      	cmp	r6, r5
 8012c18:	d113      	bne.n	8012c42 <__gethex+0x28e>
 8012c1a:	2e01      	cmp	r6, #1
 8012c1c:	d10b      	bne.n	8012c36 <__gethex+0x282>
 8012c1e:	9a02      	ldr	r2, [sp, #8]
 8012c20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c24:	6013      	str	r3, [r2, #0]
 8012c26:	2301      	movs	r3, #1
 8012c28:	6123      	str	r3, [r4, #16]
 8012c2a:	f8ca 3000 	str.w	r3, [sl]
 8012c2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c30:	2562      	movs	r5, #98	@ 0x62
 8012c32:	601c      	str	r4, [r3, #0]
 8012c34:	e73a      	b.n	8012aac <__gethex+0xf8>
 8012c36:	1e71      	subs	r1, r6, #1
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f7fe fb60 	bl	80112fe <__any_on>
 8012c3e:	2800      	cmp	r0, #0
 8012c40:	d1ed      	bne.n	8012c1e <__gethex+0x26a>
 8012c42:	9801      	ldr	r0, [sp, #4]
 8012c44:	4621      	mov	r1, r4
 8012c46:	f7fd ff09 	bl	8010a5c <_Bfree>
 8012c4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	6013      	str	r3, [r2, #0]
 8012c50:	2550      	movs	r5, #80	@ 0x50
 8012c52:	e72b      	b.n	8012aac <__gethex+0xf8>
 8012c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d1f3      	bne.n	8012c42 <__gethex+0x28e>
 8012c5a:	e7e0      	b.n	8012c1e <__gethex+0x26a>
 8012c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d1dd      	bne.n	8012c1e <__gethex+0x26a>
 8012c62:	e7ee      	b.n	8012c42 <__gethex+0x28e>
 8012c64:	08013858 	.word	0x08013858
 8012c68:	080136f1 	.word	0x080136f1
 8012c6c:	080139ca 	.word	0x080139ca
 8012c70:	1e6f      	subs	r7, r5, #1
 8012c72:	f1b9 0f00 	cmp.w	r9, #0
 8012c76:	d130      	bne.n	8012cda <__gethex+0x326>
 8012c78:	b127      	cbz	r7, 8012c84 <__gethex+0x2d0>
 8012c7a:	4639      	mov	r1, r7
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	f7fe fb3e 	bl	80112fe <__any_on>
 8012c82:	4681      	mov	r9, r0
 8012c84:	117a      	asrs	r2, r7, #5
 8012c86:	2301      	movs	r3, #1
 8012c88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012c8c:	f007 071f 	and.w	r7, r7, #31
 8012c90:	40bb      	lsls	r3, r7
 8012c92:	4213      	tst	r3, r2
 8012c94:	4629      	mov	r1, r5
 8012c96:	4620      	mov	r0, r4
 8012c98:	bf18      	it	ne
 8012c9a:	f049 0902 	orrne.w	r9, r9, #2
 8012c9e:	f7ff fe22 	bl	80128e6 <rshift>
 8012ca2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012ca6:	1b76      	subs	r6, r6, r5
 8012ca8:	2502      	movs	r5, #2
 8012caa:	f1b9 0f00 	cmp.w	r9, #0
 8012cae:	d047      	beq.n	8012d40 <__gethex+0x38c>
 8012cb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012cb4:	2b02      	cmp	r3, #2
 8012cb6:	d015      	beq.n	8012ce4 <__gethex+0x330>
 8012cb8:	2b03      	cmp	r3, #3
 8012cba:	d017      	beq.n	8012cec <__gethex+0x338>
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d109      	bne.n	8012cd4 <__gethex+0x320>
 8012cc0:	f019 0f02 	tst.w	r9, #2
 8012cc4:	d006      	beq.n	8012cd4 <__gethex+0x320>
 8012cc6:	f8da 3000 	ldr.w	r3, [sl]
 8012cca:	ea49 0903 	orr.w	r9, r9, r3
 8012cce:	f019 0f01 	tst.w	r9, #1
 8012cd2:	d10e      	bne.n	8012cf2 <__gethex+0x33e>
 8012cd4:	f045 0510 	orr.w	r5, r5, #16
 8012cd8:	e032      	b.n	8012d40 <__gethex+0x38c>
 8012cda:	f04f 0901 	mov.w	r9, #1
 8012cde:	e7d1      	b.n	8012c84 <__gethex+0x2d0>
 8012ce0:	2501      	movs	r5, #1
 8012ce2:	e7e2      	b.n	8012caa <__gethex+0x2f6>
 8012ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ce6:	f1c3 0301 	rsb	r3, r3, #1
 8012cea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d0f0      	beq.n	8012cd4 <__gethex+0x320>
 8012cf2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012cf6:	f104 0314 	add.w	r3, r4, #20
 8012cfa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012cfe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012d02:	f04f 0c00 	mov.w	ip, #0
 8012d06:	4618      	mov	r0, r3
 8012d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012d10:	d01b      	beq.n	8012d4a <__gethex+0x396>
 8012d12:	3201      	adds	r2, #1
 8012d14:	6002      	str	r2, [r0, #0]
 8012d16:	2d02      	cmp	r5, #2
 8012d18:	f104 0314 	add.w	r3, r4, #20
 8012d1c:	d13c      	bne.n	8012d98 <__gethex+0x3e4>
 8012d1e:	f8d8 2000 	ldr.w	r2, [r8]
 8012d22:	3a01      	subs	r2, #1
 8012d24:	42b2      	cmp	r2, r6
 8012d26:	d109      	bne.n	8012d3c <__gethex+0x388>
 8012d28:	1171      	asrs	r1, r6, #5
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d30:	f006 061f 	and.w	r6, r6, #31
 8012d34:	fa02 f606 	lsl.w	r6, r2, r6
 8012d38:	421e      	tst	r6, r3
 8012d3a:	d13a      	bne.n	8012db2 <__gethex+0x3fe>
 8012d3c:	f045 0520 	orr.w	r5, r5, #32
 8012d40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d42:	601c      	str	r4, [r3, #0]
 8012d44:	9b02      	ldr	r3, [sp, #8]
 8012d46:	601f      	str	r7, [r3, #0]
 8012d48:	e6b0      	b.n	8012aac <__gethex+0xf8>
 8012d4a:	4299      	cmp	r1, r3
 8012d4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012d50:	d8d9      	bhi.n	8012d06 <__gethex+0x352>
 8012d52:	68a3      	ldr	r3, [r4, #8]
 8012d54:	459b      	cmp	fp, r3
 8012d56:	db17      	blt.n	8012d88 <__gethex+0x3d4>
 8012d58:	6861      	ldr	r1, [r4, #4]
 8012d5a:	9801      	ldr	r0, [sp, #4]
 8012d5c:	3101      	adds	r1, #1
 8012d5e:	f7fd fe3d 	bl	80109dc <_Balloc>
 8012d62:	4681      	mov	r9, r0
 8012d64:	b918      	cbnz	r0, 8012d6e <__gethex+0x3ba>
 8012d66:	4b1a      	ldr	r3, [pc, #104]	@ (8012dd0 <__gethex+0x41c>)
 8012d68:	4602      	mov	r2, r0
 8012d6a:	2184      	movs	r1, #132	@ 0x84
 8012d6c:	e6c5      	b.n	8012afa <__gethex+0x146>
 8012d6e:	6922      	ldr	r2, [r4, #16]
 8012d70:	3202      	adds	r2, #2
 8012d72:	f104 010c 	add.w	r1, r4, #12
 8012d76:	0092      	lsls	r2, r2, #2
 8012d78:	300c      	adds	r0, #12
 8012d7a:	f7fc ff66 	bl	800fc4a <memcpy>
 8012d7e:	4621      	mov	r1, r4
 8012d80:	9801      	ldr	r0, [sp, #4]
 8012d82:	f7fd fe6b 	bl	8010a5c <_Bfree>
 8012d86:	464c      	mov	r4, r9
 8012d88:	6923      	ldr	r3, [r4, #16]
 8012d8a:	1c5a      	adds	r2, r3, #1
 8012d8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012d90:	6122      	str	r2, [r4, #16]
 8012d92:	2201      	movs	r2, #1
 8012d94:	615a      	str	r2, [r3, #20]
 8012d96:	e7be      	b.n	8012d16 <__gethex+0x362>
 8012d98:	6922      	ldr	r2, [r4, #16]
 8012d9a:	455a      	cmp	r2, fp
 8012d9c:	dd0b      	ble.n	8012db6 <__gethex+0x402>
 8012d9e:	2101      	movs	r1, #1
 8012da0:	4620      	mov	r0, r4
 8012da2:	f7ff fda0 	bl	80128e6 <rshift>
 8012da6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012daa:	3701      	adds	r7, #1
 8012dac:	42bb      	cmp	r3, r7
 8012dae:	f6ff aee0 	blt.w	8012b72 <__gethex+0x1be>
 8012db2:	2501      	movs	r5, #1
 8012db4:	e7c2      	b.n	8012d3c <__gethex+0x388>
 8012db6:	f016 061f 	ands.w	r6, r6, #31
 8012dba:	d0fa      	beq.n	8012db2 <__gethex+0x3fe>
 8012dbc:	4453      	add	r3, sl
 8012dbe:	f1c6 0620 	rsb	r6, r6, #32
 8012dc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012dc6:	f7fd fefb 	bl	8010bc0 <__hi0bits>
 8012dca:	42b0      	cmp	r0, r6
 8012dcc:	dbe7      	blt.n	8012d9e <__gethex+0x3ea>
 8012dce:	e7f0      	b.n	8012db2 <__gethex+0x3fe>
 8012dd0:	080136f1 	.word	0x080136f1

08012dd4 <L_shift>:
 8012dd4:	f1c2 0208 	rsb	r2, r2, #8
 8012dd8:	0092      	lsls	r2, r2, #2
 8012dda:	b570      	push	{r4, r5, r6, lr}
 8012ddc:	f1c2 0620 	rsb	r6, r2, #32
 8012de0:	6843      	ldr	r3, [r0, #4]
 8012de2:	6804      	ldr	r4, [r0, #0]
 8012de4:	fa03 f506 	lsl.w	r5, r3, r6
 8012de8:	432c      	orrs	r4, r5
 8012dea:	40d3      	lsrs	r3, r2
 8012dec:	6004      	str	r4, [r0, #0]
 8012dee:	f840 3f04 	str.w	r3, [r0, #4]!
 8012df2:	4288      	cmp	r0, r1
 8012df4:	d3f4      	bcc.n	8012de0 <L_shift+0xc>
 8012df6:	bd70      	pop	{r4, r5, r6, pc}

08012df8 <__match>:
 8012df8:	b530      	push	{r4, r5, lr}
 8012dfa:	6803      	ldr	r3, [r0, #0]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e02:	b914      	cbnz	r4, 8012e0a <__match+0x12>
 8012e04:	6003      	str	r3, [r0, #0]
 8012e06:	2001      	movs	r0, #1
 8012e08:	bd30      	pop	{r4, r5, pc}
 8012e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012e12:	2d19      	cmp	r5, #25
 8012e14:	bf98      	it	ls
 8012e16:	3220      	addls	r2, #32
 8012e18:	42a2      	cmp	r2, r4
 8012e1a:	d0f0      	beq.n	8012dfe <__match+0x6>
 8012e1c:	2000      	movs	r0, #0
 8012e1e:	e7f3      	b.n	8012e08 <__match+0x10>

08012e20 <__hexnan>:
 8012e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e24:	680b      	ldr	r3, [r1, #0]
 8012e26:	6801      	ldr	r1, [r0, #0]
 8012e28:	115e      	asrs	r6, r3, #5
 8012e2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012e2e:	f013 031f 	ands.w	r3, r3, #31
 8012e32:	b087      	sub	sp, #28
 8012e34:	bf18      	it	ne
 8012e36:	3604      	addne	r6, #4
 8012e38:	2500      	movs	r5, #0
 8012e3a:	1f37      	subs	r7, r6, #4
 8012e3c:	4682      	mov	sl, r0
 8012e3e:	4690      	mov	r8, r2
 8012e40:	9301      	str	r3, [sp, #4]
 8012e42:	f846 5c04 	str.w	r5, [r6, #-4]
 8012e46:	46b9      	mov	r9, r7
 8012e48:	463c      	mov	r4, r7
 8012e4a:	9502      	str	r5, [sp, #8]
 8012e4c:	46ab      	mov	fp, r5
 8012e4e:	784a      	ldrb	r2, [r1, #1]
 8012e50:	1c4b      	adds	r3, r1, #1
 8012e52:	9303      	str	r3, [sp, #12]
 8012e54:	b342      	cbz	r2, 8012ea8 <__hexnan+0x88>
 8012e56:	4610      	mov	r0, r2
 8012e58:	9105      	str	r1, [sp, #20]
 8012e5a:	9204      	str	r2, [sp, #16]
 8012e5c:	f7ff fd95 	bl	801298a <__hexdig_fun>
 8012e60:	2800      	cmp	r0, #0
 8012e62:	d151      	bne.n	8012f08 <__hexnan+0xe8>
 8012e64:	9a04      	ldr	r2, [sp, #16]
 8012e66:	9905      	ldr	r1, [sp, #20]
 8012e68:	2a20      	cmp	r2, #32
 8012e6a:	d818      	bhi.n	8012e9e <__hexnan+0x7e>
 8012e6c:	9b02      	ldr	r3, [sp, #8]
 8012e6e:	459b      	cmp	fp, r3
 8012e70:	dd13      	ble.n	8012e9a <__hexnan+0x7a>
 8012e72:	454c      	cmp	r4, r9
 8012e74:	d206      	bcs.n	8012e84 <__hexnan+0x64>
 8012e76:	2d07      	cmp	r5, #7
 8012e78:	dc04      	bgt.n	8012e84 <__hexnan+0x64>
 8012e7a:	462a      	mov	r2, r5
 8012e7c:	4649      	mov	r1, r9
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f7ff ffa8 	bl	8012dd4 <L_shift>
 8012e84:	4544      	cmp	r4, r8
 8012e86:	d952      	bls.n	8012f2e <__hexnan+0x10e>
 8012e88:	2300      	movs	r3, #0
 8012e8a:	f1a4 0904 	sub.w	r9, r4, #4
 8012e8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012e92:	f8cd b008 	str.w	fp, [sp, #8]
 8012e96:	464c      	mov	r4, r9
 8012e98:	461d      	mov	r5, r3
 8012e9a:	9903      	ldr	r1, [sp, #12]
 8012e9c:	e7d7      	b.n	8012e4e <__hexnan+0x2e>
 8012e9e:	2a29      	cmp	r2, #41	@ 0x29
 8012ea0:	d157      	bne.n	8012f52 <__hexnan+0x132>
 8012ea2:	3102      	adds	r1, #2
 8012ea4:	f8ca 1000 	str.w	r1, [sl]
 8012ea8:	f1bb 0f00 	cmp.w	fp, #0
 8012eac:	d051      	beq.n	8012f52 <__hexnan+0x132>
 8012eae:	454c      	cmp	r4, r9
 8012eb0:	d206      	bcs.n	8012ec0 <__hexnan+0xa0>
 8012eb2:	2d07      	cmp	r5, #7
 8012eb4:	dc04      	bgt.n	8012ec0 <__hexnan+0xa0>
 8012eb6:	462a      	mov	r2, r5
 8012eb8:	4649      	mov	r1, r9
 8012eba:	4620      	mov	r0, r4
 8012ebc:	f7ff ff8a 	bl	8012dd4 <L_shift>
 8012ec0:	4544      	cmp	r4, r8
 8012ec2:	d936      	bls.n	8012f32 <__hexnan+0x112>
 8012ec4:	f1a8 0204 	sub.w	r2, r8, #4
 8012ec8:	4623      	mov	r3, r4
 8012eca:	f853 1b04 	ldr.w	r1, [r3], #4
 8012ece:	f842 1f04 	str.w	r1, [r2, #4]!
 8012ed2:	429f      	cmp	r7, r3
 8012ed4:	d2f9      	bcs.n	8012eca <__hexnan+0xaa>
 8012ed6:	1b3b      	subs	r3, r7, r4
 8012ed8:	f023 0303 	bic.w	r3, r3, #3
 8012edc:	3304      	adds	r3, #4
 8012ede:	3401      	adds	r4, #1
 8012ee0:	3e03      	subs	r6, #3
 8012ee2:	42b4      	cmp	r4, r6
 8012ee4:	bf88      	it	hi
 8012ee6:	2304      	movhi	r3, #4
 8012ee8:	4443      	add	r3, r8
 8012eea:	2200      	movs	r2, #0
 8012eec:	f843 2b04 	str.w	r2, [r3], #4
 8012ef0:	429f      	cmp	r7, r3
 8012ef2:	d2fb      	bcs.n	8012eec <__hexnan+0xcc>
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	b91b      	cbnz	r3, 8012f00 <__hexnan+0xe0>
 8012ef8:	4547      	cmp	r7, r8
 8012efa:	d128      	bne.n	8012f4e <__hexnan+0x12e>
 8012efc:	2301      	movs	r3, #1
 8012efe:	603b      	str	r3, [r7, #0]
 8012f00:	2005      	movs	r0, #5
 8012f02:	b007      	add	sp, #28
 8012f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f08:	3501      	adds	r5, #1
 8012f0a:	2d08      	cmp	r5, #8
 8012f0c:	f10b 0b01 	add.w	fp, fp, #1
 8012f10:	dd06      	ble.n	8012f20 <__hexnan+0x100>
 8012f12:	4544      	cmp	r4, r8
 8012f14:	d9c1      	bls.n	8012e9a <__hexnan+0x7a>
 8012f16:	2300      	movs	r3, #0
 8012f18:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f1c:	2501      	movs	r5, #1
 8012f1e:	3c04      	subs	r4, #4
 8012f20:	6822      	ldr	r2, [r4, #0]
 8012f22:	f000 000f 	and.w	r0, r0, #15
 8012f26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012f2a:	6020      	str	r0, [r4, #0]
 8012f2c:	e7b5      	b.n	8012e9a <__hexnan+0x7a>
 8012f2e:	2508      	movs	r5, #8
 8012f30:	e7b3      	b.n	8012e9a <__hexnan+0x7a>
 8012f32:	9b01      	ldr	r3, [sp, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d0dd      	beq.n	8012ef4 <__hexnan+0xd4>
 8012f38:	f1c3 0320 	rsb	r3, r3, #32
 8012f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f40:	40da      	lsrs	r2, r3
 8012f42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012f46:	4013      	ands	r3, r2
 8012f48:	f846 3c04 	str.w	r3, [r6, #-4]
 8012f4c:	e7d2      	b.n	8012ef4 <__hexnan+0xd4>
 8012f4e:	3f04      	subs	r7, #4
 8012f50:	e7d0      	b.n	8012ef4 <__hexnan+0xd4>
 8012f52:	2004      	movs	r0, #4
 8012f54:	e7d5      	b.n	8012f02 <__hexnan+0xe2>

08012f56 <__ascii_mbtowc>:
 8012f56:	b082      	sub	sp, #8
 8012f58:	b901      	cbnz	r1, 8012f5c <__ascii_mbtowc+0x6>
 8012f5a:	a901      	add	r1, sp, #4
 8012f5c:	b142      	cbz	r2, 8012f70 <__ascii_mbtowc+0x1a>
 8012f5e:	b14b      	cbz	r3, 8012f74 <__ascii_mbtowc+0x1e>
 8012f60:	7813      	ldrb	r3, [r2, #0]
 8012f62:	600b      	str	r3, [r1, #0]
 8012f64:	7812      	ldrb	r2, [r2, #0]
 8012f66:	1e10      	subs	r0, r2, #0
 8012f68:	bf18      	it	ne
 8012f6a:	2001      	movne	r0, #1
 8012f6c:	b002      	add	sp, #8
 8012f6e:	4770      	bx	lr
 8012f70:	4610      	mov	r0, r2
 8012f72:	e7fb      	b.n	8012f6c <__ascii_mbtowc+0x16>
 8012f74:	f06f 0001 	mvn.w	r0, #1
 8012f78:	e7f8      	b.n	8012f6c <__ascii_mbtowc+0x16>

08012f7a <_realloc_r>:
 8012f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f7e:	4680      	mov	r8, r0
 8012f80:	4615      	mov	r5, r2
 8012f82:	460c      	mov	r4, r1
 8012f84:	b921      	cbnz	r1, 8012f90 <_realloc_r+0x16>
 8012f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f8a:	4611      	mov	r1, r2
 8012f8c:	f7fb bca4 	b.w	800e8d8 <_malloc_r>
 8012f90:	b92a      	cbnz	r2, 8012f9e <_realloc_r+0x24>
 8012f92:	f7fd fcd9 	bl	8010948 <_free_r>
 8012f96:	2400      	movs	r4, #0
 8012f98:	4620      	mov	r0, r4
 8012f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f9e:	f000 f86b 	bl	8013078 <_malloc_usable_size_r>
 8012fa2:	4285      	cmp	r5, r0
 8012fa4:	4606      	mov	r6, r0
 8012fa6:	d802      	bhi.n	8012fae <_realloc_r+0x34>
 8012fa8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012fac:	d8f4      	bhi.n	8012f98 <_realloc_r+0x1e>
 8012fae:	4629      	mov	r1, r5
 8012fb0:	4640      	mov	r0, r8
 8012fb2:	f7fb fc91 	bl	800e8d8 <_malloc_r>
 8012fb6:	4607      	mov	r7, r0
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	d0ec      	beq.n	8012f96 <_realloc_r+0x1c>
 8012fbc:	42b5      	cmp	r5, r6
 8012fbe:	462a      	mov	r2, r5
 8012fc0:	4621      	mov	r1, r4
 8012fc2:	bf28      	it	cs
 8012fc4:	4632      	movcs	r2, r6
 8012fc6:	f7fc fe40 	bl	800fc4a <memcpy>
 8012fca:	4621      	mov	r1, r4
 8012fcc:	4640      	mov	r0, r8
 8012fce:	f7fd fcbb 	bl	8010948 <_free_r>
 8012fd2:	463c      	mov	r4, r7
 8012fd4:	e7e0      	b.n	8012f98 <_realloc_r+0x1e>

08012fd6 <__ascii_wctomb>:
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	4608      	mov	r0, r1
 8012fda:	b141      	cbz	r1, 8012fee <__ascii_wctomb+0x18>
 8012fdc:	2aff      	cmp	r2, #255	@ 0xff
 8012fde:	d904      	bls.n	8012fea <__ascii_wctomb+0x14>
 8012fe0:	228a      	movs	r2, #138	@ 0x8a
 8012fe2:	601a      	str	r2, [r3, #0]
 8012fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fe8:	4770      	bx	lr
 8012fea:	700a      	strb	r2, [r1, #0]
 8012fec:	2001      	movs	r0, #1
 8012fee:	4770      	bx	lr

08012ff0 <_raise_r>:
 8012ff0:	291f      	cmp	r1, #31
 8012ff2:	b538      	push	{r3, r4, r5, lr}
 8012ff4:	4605      	mov	r5, r0
 8012ff6:	460c      	mov	r4, r1
 8012ff8:	d904      	bls.n	8013004 <_raise_r+0x14>
 8012ffa:	2316      	movs	r3, #22
 8012ffc:	6003      	str	r3, [r0, #0]
 8012ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8013002:	bd38      	pop	{r3, r4, r5, pc}
 8013004:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013006:	b112      	cbz	r2, 801300e <_raise_r+0x1e>
 8013008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801300c:	b94b      	cbnz	r3, 8013022 <_raise_r+0x32>
 801300e:	4628      	mov	r0, r5
 8013010:	f000 f830 	bl	8013074 <_getpid_r>
 8013014:	4622      	mov	r2, r4
 8013016:	4601      	mov	r1, r0
 8013018:	4628      	mov	r0, r5
 801301a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801301e:	f000 b817 	b.w	8013050 <_kill_r>
 8013022:	2b01      	cmp	r3, #1
 8013024:	d00a      	beq.n	801303c <_raise_r+0x4c>
 8013026:	1c59      	adds	r1, r3, #1
 8013028:	d103      	bne.n	8013032 <_raise_r+0x42>
 801302a:	2316      	movs	r3, #22
 801302c:	6003      	str	r3, [r0, #0]
 801302e:	2001      	movs	r0, #1
 8013030:	e7e7      	b.n	8013002 <_raise_r+0x12>
 8013032:	2100      	movs	r1, #0
 8013034:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013038:	4620      	mov	r0, r4
 801303a:	4798      	blx	r3
 801303c:	2000      	movs	r0, #0
 801303e:	e7e0      	b.n	8013002 <_raise_r+0x12>

08013040 <raise>:
 8013040:	4b02      	ldr	r3, [pc, #8]	@ (801304c <raise+0xc>)
 8013042:	4601      	mov	r1, r0
 8013044:	6818      	ldr	r0, [r3, #0]
 8013046:	f7ff bfd3 	b.w	8012ff0 <_raise_r>
 801304a:	bf00      	nop
 801304c:	20000038 	.word	0x20000038

08013050 <_kill_r>:
 8013050:	b538      	push	{r3, r4, r5, lr}
 8013052:	4d07      	ldr	r5, [pc, #28]	@ (8013070 <_kill_r+0x20>)
 8013054:	2300      	movs	r3, #0
 8013056:	4604      	mov	r4, r0
 8013058:	4608      	mov	r0, r1
 801305a:	4611      	mov	r1, r2
 801305c:	602b      	str	r3, [r5, #0]
 801305e:	f7f0 f9f1 	bl	8003444 <_kill>
 8013062:	1c43      	adds	r3, r0, #1
 8013064:	d102      	bne.n	801306c <_kill_r+0x1c>
 8013066:	682b      	ldr	r3, [r5, #0]
 8013068:	b103      	cbz	r3, 801306c <_kill_r+0x1c>
 801306a:	6023      	str	r3, [r4, #0]
 801306c:	bd38      	pop	{r3, r4, r5, pc}
 801306e:	bf00      	nop
 8013070:	20000a28 	.word	0x20000a28

08013074 <_getpid_r>:
 8013074:	f7f0 b9de 	b.w	8003434 <_getpid>

08013078 <_malloc_usable_size_r>:
 8013078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801307c:	1f18      	subs	r0, r3, #4
 801307e:	2b00      	cmp	r3, #0
 8013080:	bfbc      	itt	lt
 8013082:	580b      	ldrlt	r3, [r1, r0]
 8013084:	18c0      	addlt	r0, r0, r3
 8013086:	4770      	bx	lr

08013088 <_init>:
 8013088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308a:	bf00      	nop
 801308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801308e:	bc08      	pop	{r3}
 8013090:	469e      	mov	lr, r3
 8013092:	4770      	bx	lr

08013094 <_fini>:
 8013094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013096:	bf00      	nop
 8013098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801309a:	bc08      	pop	{r3}
 801309c:	469e      	mov	lr, r3
 801309e:	4770      	bx	lr
